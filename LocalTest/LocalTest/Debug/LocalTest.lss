
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00002f66  00002ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800114  00800114  0000300e  2**0
                  ALLOC
  3 .stab         00004068  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b9  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00008331  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c0  00000000  00000000  00008360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002cd8  00000000  00000000  00008620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b38  00000000  00000000  0000b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ef  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000954  00000000  00000000  0000d120  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000088f  00000000  00000000  0000da74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003406  00000000  00000000  0000e303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c8  00000000  00000000  00011709  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__ctors_end>
       4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       c:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_3>
      10:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      14:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      18:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      1c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      20:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      28:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_10>
      2c:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__vector_11>
      30:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      34:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      38:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      3c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      40:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      44:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      4c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      50:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      54:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      58:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      5c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      64:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      68:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      6c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      70:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      74:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_29>
      78:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      7c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      80:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      84:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      88:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      8c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      90:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      94:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      98:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      9c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

0000011f <descriptor_list>:
     11f:	00 01 00 00 53 01 12 00 02 00 00 65 01 43 00 03     ....S......e.C..
     12f:	00 00 a8 01 04 01 03 09 04 ac 01 12 02 03 09 04     ................
     13f:	c0 01 06 03 03 09 04 c8 01 08                       ..........

00000149 <endpoint_config_table>:
     149:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000153 <device_descriptor>:
     153:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     163:	03 01                                               ..

00000165 <config1_descriptor>:
     165:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     175:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     185:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     195:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a5:	40 00 00                                            @..

000001a8 <string0>:
     1a8:	04 03 09 04                                         ....

000001ac <string1>:
     1ac:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1bc:	65 00 00 00                                         e...

000001c0 <string2>:
     1c0:	06 03 4d 00 32 00 00 00                             ..M.2...

000001c8 <string3>:
     1c8:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	da e0       	ldi	r29, 0x0A	; 10
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	e6 e6       	ldi	r30, 0x66	; 102
     1e6:	ff e2       	ldi	r31, 0x2F	; 47
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a4 31       	cpi	r26, 0x14	; 20
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	a4 e1       	ldi	r26, 0x14	; 20
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	ab 3c       	cpi	r26, 0xCB	; 203
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <main>
     208:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <_exit>

0000020c <__bad_interrupt>:
     20c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000210 <chooseInput>:
		}
		if (changedState) return;
	}
	m_red(OFF);
	game_pause();
}
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	91 05       	cpc	r25, r1
     214:	09 f4       	brne	.+2      	; 0x218 <chooseInput+0x8>
     216:	45 c0       	rjmp	.+138    	; 0x2a2 <chooseInput+0x92>
     218:	3c f4       	brge	.+14     	; 0x228 <chooseInput+0x18>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	91 05       	cpc	r25, r1
     21e:	f9 f0       	breq	.+62     	; 0x25e <chooseInput+0x4e>
     220:	7c f5       	brge	.+94     	; 0x280 <chooseInput+0x70>
     222:	89 2b       	or	r24, r25
     224:	59 f0       	breq	.+22     	; 0x23c <chooseInput+0x2c>
     226:	08 95       	ret
     228:	85 30       	cpi	r24, 0x05	; 5
     22a:	91 05       	cpc	r25, r1
     22c:	09 f4       	brne	.+2      	; 0x230 <chooseInput+0x20>
     22e:	5b c0       	rjmp	.+182    	; 0x2e6 <chooseInput+0xd6>
     230:	0c f4       	brge	.+2      	; 0x234 <chooseInput+0x24>
     232:	48 c0       	rjmp	.+144    	; 0x2c4 <chooseInput+0xb4>
     234:	06 97       	sbiw	r24, 0x06	; 6

int i = 0;
int ADCarr[7] = {0, 0, 0, 0, 0, 0, 0};

void chooseInput(int i) {
	switch (i) {
     236:	09 f0       	breq	.+2      	; 0x23a <chooseInput+0x2a>
     238:	77 c0       	rjmp	.+238    	; 0x328 <chooseInput+0x118>
     23a:	66 c0       	rjmp	.+204    	; 0x308 <chooseInput+0xf8>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
     23c:	eb e7       	ldi	r30, 0x7B	; 123
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	8f 7d       	andi	r24, 0xDF	; 223
     244:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     246:	ec e7       	ldi	r30, 0x7C	; 124
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8b 7f       	andi	r24, 0xFB	; 251
     24e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     250:	80 81       	ld	r24, Z
     252:	8d 7f       	andi	r24, 0xFD	; 253
     254:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     256:	80 81       	ld	r24, Z
     258:	8e 7f       	andi	r24, 0xFE	; 254
     25a:	80 83       	st	Z, r24

		break;
     25c:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
     25e:	eb e7       	ldi	r30, 0x7B	; 123
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	8f 7d       	andi	r24, 0xDF	; 223
     266:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     268:	ec e7       	ldi	r30, 0x7C	; 124
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8b 7f       	andi	r24, 0xFB	; 251
     270:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     272:	80 81       	ld	r24, Z
     274:	8d 7f       	andi	r24, 0xFD	; 253
     276:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     278:	80 81       	ld	r24, Z
     27a:	81 60       	ori	r24, 0x01	; 1
     27c:	80 83       	st	Z, r24

		break;
     27e:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
     280:	eb e7       	ldi	r30, 0x7B	; 123
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8f 7d       	andi	r24, 0xDF	; 223
     288:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     28a:	ec e7       	ldi	r30, 0x7C	; 124
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	84 60       	ori	r24, 0x04	; 4
     292:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     294:	80 81       	ld	r24, Z
     296:	8d 7f       	andi	r24, 0xFD	; 253
     298:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     29a:	80 81       	ld	r24, Z
     29c:	8e 7f       	andi	r24, 0xFE	; 254
     29e:	80 83       	st	Z, r24

		break;
     2a0:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
     2a2:	eb e7       	ldi	r30, 0x7B	; 123
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 7d       	andi	r24, 0xDF	; 223
     2aa:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     2ac:	ec e7       	ldi	r30, 0x7C	; 124
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	84 60       	ori	r24, 0x04	; 4
     2b4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2b6:	80 81       	ld	r24, Z
     2b8:	8d 7f       	andi	r24, 0xFD	; 253
     2ba:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     2bc:	80 81       	ld	r24, Z
     2be:	81 60       	ori	r24, 0x01	; 1
     2c0:	80 83       	st	Z, r24
		break;
     2c2:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
     2c4:	eb e7       	ldi	r30, 0x7B	; 123
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     2ce:	ec e7       	ldi	r30, 0x7C	; 124
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	84 60       	ori	r24, 0x04	; 4
     2d6:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
     2d8:	80 81       	ld	r24, Z
     2da:	82 60       	ori	r24, 0x02	; 2
     2dc:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2de:	80 81       	ld	r24, Z
     2e0:	8e 7f       	andi	r24, 0xFE	; 254
     2e2:	80 83       	st	Z, r24
		break;
     2e4:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
     2e6:	eb e7       	ldi	r30, 0x7B	; 123
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	80 62       	ori	r24, 0x20	; 32
     2ee:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2f0:	ec e7       	ldi	r30, 0x7C	; 124
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8b 7f       	andi	r24, 0xFB	; 251
     2f8:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2fa:	80 81       	ld	r24, Z
     2fc:	8d 7f       	andi	r24, 0xFD	; 253
     2fe:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     300:	80 81       	ld	r24, Z
     302:	8e 7f       	andi	r24, 0xFE	; 254
     304:	80 83       	st	Z, r24
		break;
     306:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
     308:	eb e7       	ldi	r30, 0x7B	; 123
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	80 62       	ori	r24, 0x20	; 32
     310:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     312:	ec e7       	ldi	r30, 0x7C	; 124
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	8b 7f       	andi	r24, 0xFB	; 251
     31a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     31c:	80 81       	ld	r24, Z
     31e:	8d 7f       	andi	r24, 0xFD	; 253
     320:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     322:	80 81       	ld	r24, Z
     324:	81 60       	ori	r24, 0x01	; 1
     326:	80 83       	st	Z, r24
     328:	08 95       	ret

0000032a <getADC>:
int ADC5 = 0;
int ADC6 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
     32a:	80 91 14 01 	lds	r24, 0x0114
     32e:	90 91 15 01 	lds	r25, 0x0115
     332:	89 2b       	or	r24, r25
     334:	09 f4       	brne	.+2      	; 0x338 <getADC+0xe>
     336:	55 c0       	rjmp	.+170    	; 0x3e2 <getADC+0xb8>
		switch (flag) {
     338:	80 91 32 01 	lds	r24, 0x0132
     33c:	90 91 33 01 	lds	r25, 0x0133
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	91 05       	cpc	r25, r1
     344:	59 f1       	breq	.+86     	; 0x39c <getADC+0x72>
     346:	3c f4       	brge	.+14     	; 0x356 <getADC+0x2c>
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	91 05       	cpc	r25, r1
     34c:	a9 f0       	breq	.+42     	; 0x378 <getADC+0x4e>
     34e:	ec f4       	brge	.+58     	; 0x38a <getADC+0x60>
     350:	89 2b       	or	r24, r25
     352:	49 f0       	breq	.+18     	; 0x366 <getADC+0x3c>
     354:	46 c0       	rjmp	.+140    	; 0x3e2 <getADC+0xb8>
     356:	85 30       	cpi	r24, 0x05	; 5
     358:	91 05       	cpc	r25, r1
     35a:	91 f1       	breq	.+100    	; 0x3c0 <getADC+0x96>
     35c:	44 f1       	brlt	.+80     	; 0x3ae <getADC+0x84>
     35e:	06 97       	sbiw	r24, 0x06	; 6
     360:	09 f0       	breq	.+2      	; 0x364 <getADC+0x3a>
     362:	3f c0       	rjmp	.+126    	; 0x3e2 <getADC+0xb8>
     364:	36 c0       	rjmp	.+108    	; 0x3d2 <getADC+0xa8>
			case 0:
			ADC0 = ADC;
     366:	80 91 78 00 	lds	r24, 0x0078
     36a:	90 91 79 00 	lds	r25, 0x0079
     36e:	90 93 23 01 	sts	0x0123, r25
     372:	80 93 22 01 	sts	0x0122, r24
			break;
     376:	35 c0       	rjmp	.+106    	; 0x3e2 <getADC+0xb8>
			case 1:
			ADC1 = ADC;
     378:	80 91 78 00 	lds	r24, 0x0078
     37c:	90 91 79 00 	lds	r25, 0x0079
     380:	90 93 21 01 	sts	0x0121, r25
     384:	80 93 20 01 	sts	0x0120, r24
			break;
     388:	2c c0       	rjmp	.+88     	; 0x3e2 <getADC+0xb8>
			case 2:
			ADC2 = ADC;
     38a:	80 91 78 00 	lds	r24, 0x0078
     38e:	90 91 79 00 	lds	r25, 0x0079
     392:	90 93 1f 01 	sts	0x011F, r25
     396:	80 93 1e 01 	sts	0x011E, r24
			break;
     39a:	23 c0       	rjmp	.+70     	; 0x3e2 <getADC+0xb8>
			case 3:
			ADC3 = ADC;
     39c:	80 91 78 00 	lds	r24, 0x0078
     3a0:	90 91 79 00 	lds	r25, 0x0079
     3a4:	90 93 1d 01 	sts	0x011D, r25
     3a8:	80 93 1c 01 	sts	0x011C, r24
			break;
     3ac:	1a c0       	rjmp	.+52     	; 0x3e2 <getADC+0xb8>
			case 4:
			ADC4 = ADC;
     3ae:	80 91 78 00 	lds	r24, 0x0078
     3b2:	90 91 79 00 	lds	r25, 0x0079
     3b6:	90 93 1b 01 	sts	0x011B, r25
     3ba:	80 93 1a 01 	sts	0x011A, r24
			break;
     3be:	11 c0       	rjmp	.+34     	; 0x3e2 <getADC+0xb8>
			case 5:
			ADC5 = ADC;
     3c0:	80 91 78 00 	lds	r24, 0x0078
     3c4:	90 91 79 00 	lds	r25, 0x0079
     3c8:	90 93 19 01 	sts	0x0119, r25
     3cc:	80 93 18 01 	sts	0x0118, r24
			break;
     3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <getADC+0xb8>
			case 6:
			ADC6 = ADC;
     3d2:	80 91 78 00 	lds	r24, 0x0078
     3d6:	90 91 79 00 	lds	r25, 0x0079
     3da:	90 93 17 01 	sts	0x0117, r25
     3de:	80 93 16 01 	sts	0x0116, r24
			break;
		}
	}
	clear(ADCSRA, ADEN);	//Enable/Start conversion
     3e2:	ea e7       	ldi	r30, 0x7A	; 122
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	8f 77       	andi	r24, 0x7F	; 127
     3ea:	80 83       	st	Z, r24
	clear(ADCSRA, ADSC);	//^
     3ec:	80 81       	ld	r24, Z
     3ee:	8f 7b       	andi	r24, 0xBF	; 191
     3f0:	80 83       	st	Z, r24
	clear(ADCSRA, ADATE);
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 7d       	andi	r24, 0xDF	; 223
     3f6:	80 83       	st	Z, r24
	clear(ADCSRA, ADIF);
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 7e       	andi	r24, 0xEF	; 239
     3fc:	80 83       	st	Z, r24
	if (flag >= 0 && flag < 7) {
     3fe:	80 91 32 01 	lds	r24, 0x0132
     402:	90 91 33 01 	lds	r25, 0x0133
     406:	87 30       	cpi	r24, 0x07	; 7
     408:	91 05       	cpc	r25, r1
     40a:	58 f4       	brcc	.+22     	; 0x422 <getADC+0xf8>
		flag = (flag + 1) % 7;
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	67 e0       	ldi	r22, 0x07	; 7
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__divmodhi4>
     416:	80 93 32 01 	sts	0x0132, r24
     41a:	90 93 33 01 	sts	0x0133, r25
		chooseInput(flag);
     41e:	0e 94 08 01 	call	0x210	; 0x210 <chooseInput>
	}
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     422:	ea e7       	ldi	r30, 0x7A	; 122
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	80 62       	ori	r24, 0x20	; 32
     42a:	80 83       	st	Z, r24
	set(ADCSRA, ADEN);	//Enable/Start conversion
     42c:	80 81       	ld	r24, Z
     42e:	80 68       	ori	r24, 0x80	; 128
     430:	80 83       	st	Z, r24
	set(ADCSRA, ADSC);	//^
     432:	80 81       	ld	r24, Z
     434:	80 64       	ori	r24, 0x40	; 64
     436:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     438:	80 81       	ld	r24, Z
     43a:	80 61       	ori	r24, 0x10	; 16
     43c:	80 83       	st	Z, r24
	conversion = 0;
     43e:	10 92 15 01 	sts	0x0115, r1
     442:	10 92 14 01 	sts	0x0114, r1
	ADCarr[0] = ADC0;
     446:	80 91 22 01 	lds	r24, 0x0122
     44a:	90 91 23 01 	lds	r25, 0x0123
     44e:	90 93 25 01 	sts	0x0125, r25
     452:	80 93 24 01 	sts	0x0124, r24
	ADCarr[1] = ADC1;
     456:	80 91 20 01 	lds	r24, 0x0120
     45a:	90 91 21 01 	lds	r25, 0x0121
     45e:	90 93 27 01 	sts	0x0127, r25
     462:	80 93 26 01 	sts	0x0126, r24
	ADCarr[2] = ADC2;
     466:	80 91 1e 01 	lds	r24, 0x011E
     46a:	90 91 1f 01 	lds	r25, 0x011F
     46e:	90 93 29 01 	sts	0x0129, r25
     472:	80 93 28 01 	sts	0x0128, r24
	ADCarr[3] = ADC3;
     476:	80 91 1c 01 	lds	r24, 0x011C
     47a:	90 91 1d 01 	lds	r25, 0x011D
     47e:	90 93 2b 01 	sts	0x012B, r25
     482:	80 93 2a 01 	sts	0x012A, r24
	ADCarr[4] = ADC4;
     486:	80 91 1a 01 	lds	r24, 0x011A
     48a:	90 91 1b 01 	lds	r25, 0x011B
     48e:	90 93 2d 01 	sts	0x012D, r25
     492:	80 93 2c 01 	sts	0x012C, r24
	ADCarr[5] = ADC5;
     496:	80 91 18 01 	lds	r24, 0x0118
     49a:	90 91 19 01 	lds	r25, 0x0119
     49e:	90 93 2f 01 	sts	0x012F, r25
     4a2:	80 93 2e 01 	sts	0x012E, r24
	ADCarr[6] = ADC6;
     4a6:	80 91 16 01 	lds	r24, 0x0116
     4aa:	90 91 17 01 	lds	r25, 0x0117
     4ae:	90 93 31 01 	sts	0x0131, r25
     4b2:	80 93 30 01 	sts	0x0130, r24
     4b6:	08 95       	ret

000004b8 <reportADC>:
	
	
}

void reportADC() {
	set(DDRF,7);
     4b8:	87 9a       	sbi	0x10, 7	; 16
	m_red(ON);
     4ba:	6e 9a       	sbi	0x0d, 6	; 13
     4bc:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     4be:	6a 9a       	sbi	0x0d, 2	; 13
     4c0:	72 98       	cbi	0x0e, 2	; 14

	m_usb_init(); // connect usb
     4c2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <m_usb_init>
	while(!m_usb_isconnected());  //wait for connection
     4c6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <m_usb_isconnected>
     4ca:	88 23       	and	r24, r24
     4cc:	e1 f3       	breq	.-8      	; 0x4c6 <reportADC+0xe>

	m_red(OFF);
     4ce:	6e 9a       	sbi	0x0d, 6	; 13
     4d0:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     4d2:	6a 9a       	sbi	0x0d, 2	; 13
     4d4:	72 9a       	sbi	0x0e, 2	; 14

	char rx_buffer; //computer interactions
	int index = 0;
	int maxval = 0;
	float deg = 0.0;
     4d6:	41 2c       	mov	r4, r1
     4d8:	51 2c       	mov	r5, r1
     4da:	32 01       	movw	r6, r4
     4dc:	0f 2e       	mov	r0, r31
     4de:	f4 e2       	ldi	r31, 0x24	; 36
     4e0:	ef 2e       	mov	r14, r31
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	ff 2e       	mov	r15, r31
     4e6:	f0 2d       	mov	r31, r0
while(1) {
	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	10 e0       	ldi	r17, 0x00	; 0
			maxval = ADCarr[i];
		}
	}
	switch (index) {
		case 0:
		diff = ADCarr[0] - ADCarr[6];
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f0 e3       	ldi	r31, 0x30	; 48
     4f0:	cf 2e       	mov	r12, r31
     4f2:	f1 e0       	ldi	r31, 0x01	; 1
     4f4:	df 2e       	mov	r13, r31
     4f6:	f0 2d       	mov	r31, r0
		toggle(PORTF,7);
		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			m_usb_tx_int(ADCarr[0]);
			m_usb_tx_char('\t');
			m_usb_tx_int(ADCarr[1]);
     4f8:	0f 2e       	mov	r0, r31
     4fa:	f6 e2       	ldi	r31, 0x26	; 38
     4fc:	8f 2e       	mov	r8, r31
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	9f 2e       	mov	r9, r31
     502:	f0 2d       	mov	r31, r0
			m_usb_tx_char('\t');
			m_usb_tx_int(ADCarr[2]);
     504:	0f 2e       	mov	r0, r31
     506:	f8 e2       	ldi	r31, 0x28	; 40
     508:	af 2e       	mov	r10, r31
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	bf 2e       	mov	r11, r31
     50e:	f0 2d       	mov	r31, r0
	float deg = 0.0;
	float diff = 0.0;
	
	
while(1) {
	getADC();
     510:	0e 94 95 01 	call	0x32a	; 0x32a <getADC>
     514:	f7 01       	movw	r30, r14
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
     516:	c8 01       	movw	r24, r16
	
	
while(1) {
	getADC();
	index = 0;
	maxval = 0;
     518:	a8 01       	movw	r20, r16
	float diff = 0.0;
	
	
while(1) {
	getADC();
	index = 0;
     51a:	e8 01       	movw	r28, r16
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
		if (ADCarr[i] > maxval) {
     51c:	21 91       	ld	r18, Z+
     51e:	31 91       	ld	r19, Z+
     520:	42 17       	cp	r20, r18
     522:	53 07       	cpc	r21, r19
     524:	14 f4       	brge	.+4      	; 0x52a <reportADC+0x72>
			index = i;
			maxval = ADCarr[i];
     526:	a9 01       	movw	r20, r18
	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
		if (ADCarr[i] > maxval) {
     528:	ec 01       	movw	r28, r24
while(1) {
	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	87 30       	cpi	r24, 0x07	; 7
     52e:	91 05       	cpc	r25, r1
     530:	a9 f7       	brne	.-22     	; 0x51c <reportADC+0x64>
		if (ADCarr[i] > maxval) {
			index = i;
			maxval = ADCarr[i];
		}
	}
	switch (index) {
     532:	20 97       	sbiw	r28, 0x00	; 0
     534:	29 f0       	breq	.+10     	; 0x540 <reportADC+0x88>
     536:	c6 30       	cpi	r28, 0x06	; 6
     538:	d1 05       	cpc	r29, r1
     53a:	09 f0       	breq	.+2      	; 0x53e <reportADC+0x86>
     53c:	47 c0       	rjmp	.+142    	; 0x5cc <reportADC+0x114>
     53e:	23 c0       	rjmp	.+70     	; 0x586 <reportADC+0xce>
		case 0:
		diff = ADCarr[0] - ADCarr[6];
     540:	f7 01       	movw	r30, r14
     542:	60 81       	ld	r22, Z
     544:	71 81       	ldd	r23, Z+1	; 0x01
     546:	f6 01       	movw	r30, r12
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	68 1b       	sub	r22, r24
     54e:	79 0b       	sbc	r23, r25
     550:	88 27       	eor	r24, r24
     552:	77 fd       	sbrc	r23, 7
     554:	80 95       	com	r24
     556:	98 2f       	mov	r25, r24
     558:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
		deg = exp(-1.0*fabs(((float)diff))/400.0);
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	bf 77       	andi	r27, 0x7F	; 127
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	90 58       	subi	r25, 0x80	; 128
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	48 ec       	ldi	r20, 0xC8	; 200
     56e:	53 e4       	ldi	r21, 0x43	; 67
     570:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     574:	0e 94 a3 14 	call	0x2946	; 0x2946 <exp>
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
		//turn(LEFT,0.2,deg);
		m_green(ON);
     57c:	6a 9a       	sbi	0x0d, 2	; 13
     57e:	72 98       	cbi	0x0e, 2	; 14
		m_red(OFF);
     580:	6e 9a       	sbi	0x0d, 6	; 13
     582:	76 9a       	sbi	0x0e, 6	; 14
     584:	27 c0       	rjmp	.+78     	; 0x5d4 <reportADC+0x11c>
		break;
		case 6:
		diff = ADCarr[6] - ADCarr[0];
     586:	f6 01       	movw	r30, r12
     588:	60 81       	ld	r22, Z
     58a:	71 81       	ldd	r23, Z+1	; 0x01
     58c:	f7 01       	movw	r30, r14
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	68 1b       	sub	r22, r24
     594:	79 0b       	sbc	r23, r25
     596:	88 27       	eor	r24, r24
     598:	77 fd       	sbrc	r23, 7
     59a:	80 95       	com	r24
     59c:	98 2f       	mov	r25, r24
     59e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
		deg = exp(-1.0*fabs(((float)diff))/400.0);
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	bf 77       	andi	r27, 0x7F	; 127
     5a8:	bc 01       	movw	r22, r24
     5aa:	cd 01       	movw	r24, r26
     5ac:	90 58       	subi	r25, 0x80	; 128
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	48 ec       	ldi	r20, 0xC8	; 200
     5b4:	53 e4       	ldi	r21, 0x43	; 67
     5b6:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     5ba:	0e 94 a3 14 	call	0x2946	; 0x2946 <exp>
     5be:	2b 01       	movw	r4, r22
     5c0:	3c 01       	movw	r6, r24
		//turn(RIGHT,0.2,deg);
		m_green(OFF);
     5c2:	6a 9a       	sbi	0x0d, 2	; 13
     5c4:	72 9a       	sbi	0x0e, 2	; 14
		m_red(ON);
     5c6:	6e 9a       	sbi	0x0d, 6	; 13
     5c8:	76 98       	cbi	0x0e, 6	; 14
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <reportADC+0x11c>
		break;
		default:
		m_green(ON);
     5cc:	6a 9a       	sbi	0x0d, 2	; 13
     5ce:	72 98       	cbi	0x0e, 2	; 14
		m_red(ON);
     5d0:	6e 9a       	sbi	0x0d, 6	; 13
     5d2:	76 98       	cbi	0x0e, 6	; 14
	}
	while(!m_usb_rx_available());  	//wait for an indication from the computer
     5d4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <m_usb_rx_available>
     5d8:	88 23       	and	r24, r24
     5da:	e1 f3       	breq	.-8      	; 0x5d4 <reportADC+0x11c>
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
     5dc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <m_usb_rx_char>
     5e0:	38 2e       	mov	r3, r24

		m_usb_rx_flush();  				//clear buffer
     5e2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <m_usb_rx_flush>
		m_usb_tx_string("\n");
		counter = 0;
		
		}
		counter++;*/
		toggle(PORTF,7);
     5e6:	81 b3       	in	r24, 0x11	; 17
     5e8:	80 58       	subi	r24, 0x80	; 128
     5ea:	81 bb       	out	0x11, r24	; 17
		if(rx_buffer == 1) {  			//computer wants ir buffer
     5ec:	f1 e0       	ldi	r31, 0x01	; 1
     5ee:	3f 12       	cpse	r3, r31
     5f0:	51 c0       	rjmp	.+162    	; 0x694 <reportADC+0x1dc>
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			m_usb_tx_int(ADCarr[0]);
     5f2:	f7 01       	movw	r30, r14
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     5fc:	89 e0       	ldi	r24, 0x09	; 9
     5fe:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[1]);
     602:	f4 01       	movw	r30, r8
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[2]);
     612:	f5 01       	movw	r30, r10
     614:	80 81       	ld	r24, Z
     616:	91 81       	ldd	r25, Z+1	; 0x01
     618:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     61c:	89 e0       	ldi	r24, 0x09	; 9
     61e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[3]);
     622:	ea e2       	ldi	r30, 0x2A	; 42
     624:	f1 e0       	ldi	r31, 0x01	; 1
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[4]);
     634:	ec e2       	ldi	r30, 0x2C	; 44
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[5]);
     646:	ee e2       	ldi	r30, 0x2E	; 46
     648:	f1 e0       	ldi	r31, 0x01	; 1
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[6]);
     658:	f6 01       	movw	r30, r12
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int(index);
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     66e:	89 e0       	ldi	r24, 0x09	; 9
     670:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			m_usb_tx_int((int)(deg*100));
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	48 ec       	ldi	r20, 0xC8	; 200
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	c3 01       	movw	r24, r6
     67e:	b2 01       	movw	r22, r4
     680:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     684:	0e 94 cf 14 	call	0x299e	; 0x299e <__fixsfsi>
     688:	cb 01       	movw	r24, r22
     68a:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
			m_usb_tx_char('\t');
     68e:	89 e0       	ldi	r24, 0x09	; 9
     690:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			/*for (int j = 0 ; j < 7 ; j++){
			m_usb_tx_int(ADCarr[j]);
			m_usb_tx_char('\t');
			}*/
		}
		m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     694:	8a e0       	ldi	r24, 0x0A	; 10
     696:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
		}
     69a:	3a cf       	rjmp	.-396    	; 0x510 <reportADC+0x58>

0000069c <turn>:
		clear(PORTB,2);
		set(PORTB,3);
	}
}

void turn(int dir,float speed, float degree) {
     69c:	8f 92       	push	r8
     69e:	9f 92       	push	r9
     6a0:	af 92       	push	r10
     6a2:	bf 92       	push	r11
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	6a 01       	movw	r12, r20
     6b6:	7b 01       	movw	r14, r22
     6b8:	48 01       	movw	r8, r16
     6ba:	59 01       	movw	r10, r18
	set(PORTB,2);
     6bc:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     6be:	2b 9a       	sbi	0x05, 3	; 5
	if (dir == LEFT) {
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	81 f5       	brne	.+96     	; 0x726 <turn+0x8a>
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     6c6:	60 91 96 00 	lds	r22, 0x0096
     6ca:	70 91 97 00 	lds	r23, 0x0097
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
     6d6:	a7 01       	movw	r20, r14
     6d8:	96 01       	movw	r18, r12
     6da:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     6de:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixunssfsi>
     6e2:	70 93 99 00 	sts	0x0099, r23
     6e6:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     6ea:	c0 91 88 00 	lds	r28, 0x0088
     6ee:	d0 91 89 00 	lds	r29, 0x0089
     6f2:	a7 01       	movw	r20, r14
     6f4:	96 01       	movw	r18, r12
     6f6:	c5 01       	movw	r24, r10
     6f8:	b4 01       	movw	r22, r8
     6fa:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     6fe:	6b 01       	movw	r12, r22
     700:	7c 01       	movw	r14, r24
     702:	be 01       	movw	r22, r28
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     718:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixunssfsi>
     71c:	70 93 8b 00 	sts	0x008B, r23
     720:	60 93 8a 00 	sts	0x008A, r22
     724:	31 c0       	rjmp	.+98     	; 0x788 <turn+0xec>
	}
	
		if (dir == RIGHT) {
     726:	89 2b       	or	r24, r25
     728:	79 f5       	brne	.+94     	; 0x788 <turn+0xec>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     72a:	c0 91 96 00 	lds	r28, 0x0096
     72e:	d0 91 97 00 	lds	r29, 0x0097
     732:	9a 01       	movw	r18, r20
     734:	ab 01       	movw	r20, r22
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     73e:	4b 01       	movw	r8, r22
     740:	5c 01       	movw	r10, r24
     742:	be 01       	movw	r22, r28
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	c5 01       	movw	r24, r10
     752:	b4 01       	movw	r22, r8
     754:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     758:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixunssfsi>
     75c:	70 93 99 00 	sts	0x0099, r23
     760:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     764:	60 91 88 00 	lds	r22, 0x0088
     768:	70 91 89 00 	lds	r23, 0x0089
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
     774:	a7 01       	movw	r20, r14
     776:	96 01       	movw	r18, r12
     778:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     77c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixunssfsi>
     780:	70 93 8b 00 	sts	0x008B, r23
     784:	60 93 8a 00 	sts	0x008A, r22
		}
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	08 95       	ret

000007a2 <reverse>:

void reverse(){
	OCR1B = OCR1A;
     7a2:	80 91 88 00 	lds	r24, 0x0088
     7a6:	90 91 89 00 	lds	r25, 0x0089
     7aa:	90 93 8b 00 	sts	0x008B, r25
     7ae:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     7b2:	80 91 96 00 	lds	r24, 0x0096
     7b6:	90 91 97 00 	lds	r25, 0x0097
     7ba:	90 93 99 00 	sts	0x0099, r25
     7be:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     7c2:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     7c4:	2b 98       	cbi	0x05, 3	; 5
     7c6:	08 95       	ret

000007c8 <drive_to_puck>:
void findPuck() {
	//TODO: Implement code
}

void drive_to_puck() {
	OCR1B = 0;
     7c8:	10 92 8b 00 	sts	0x008B, r1
     7cc:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     7d0:	10 92 99 00 	sts	0x0099, r1
     7d4:	10 92 98 00 	sts	0x0098, r1
	m_red(ON);
     7d8:	6e 9a       	sbi	0x0d, 6	; 13
     7da:	76 98       	cbi	0x0e, 6	; 14
	set(DDRF,7);
     7dc:	87 9a       	sbi	0x10, 7	; 16
	int index = 0;
	int maxval = 0;
	int diff = 0;
	float deg = 0.0;
	
	m_green(OFF);
     7de:	6a 9a       	sbi	0x0d, 2	; 13
     7e0:	72 9a       	sbi	0x0e, 2	; 14
	m_red(OFF);
     7e2:	6e 9a       	sbi	0x0d, 6	; 13
     7e4:	76 9a       	sbi	0x0e, 6	; 14
     7e6:	0f 2e       	mov	r0, r31
     7e8:	f4 e2       	ldi	r31, 0x24	; 36
     7ea:	ef 2e       	mov	r14, r31
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	ff 2e       	mov	r15, r31
     7f0:	f0 2d       	mov	r31, r0
	while(1) {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
				maxval = ADCarr[i];
			}
		}
		switch (index) {
			case 0: 
				diff = ADCarr[0] - ADCarr[6];
     7f6:	0f 2e       	mov	r0, r31
     7f8:	f0 e3       	ldi	r31, 0x30	; 48
     7fa:	cf 2e       	mov	r12, r31
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	df 2e       	mov	r13, r31
     800:	f0 2d       	mov	r31, r0
	float deg = 0.0;
	
	m_green(OFF);
	m_red(OFF);
	while(1) {
		getADC();
     802:	0e 94 95 01 	call	0x32a	; 0x32a <getADC>
     806:	f7 01       	movw	r30, r14
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     808:	ce 01       	movw	r24, r28
	m_green(OFF);
	m_red(OFF);
	while(1) {
		getADC();
		index = 0;
		maxval = 0;
     80a:	ae 01       	movw	r20, r28
	
	m_green(OFF);
	m_red(OFF);
	while(1) {
		getADC();
		index = 0;
     80c:	be 01       	movw	r22, r28
		maxval = 0;
		for(int i = 0; i < 7; i++) {
			if (ADCarr[i] > maxval) {
     80e:	21 91       	ld	r18, Z+
     810:	31 91       	ld	r19, Z+
     812:	42 17       	cp	r20, r18
     814:	53 07       	cpc	r21, r19
     816:	14 f4       	brge	.+4      	; 0x81c <drive_to_puck+0x54>
				index = i;
				maxval = ADCarr[i];
     818:	a9 01       	movw	r20, r18
	while(1) {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
			if (ADCarr[i] > maxval) {
     81a:	bc 01       	movw	r22, r24
	m_red(OFF);
	while(1) {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	87 30       	cpi	r24, 0x07	; 7
     820:	91 05       	cpc	r25, r1
     822:	a9 f7       	brne	.-22     	; 0x80e <drive_to_puck+0x46>
			if (ADCarr[i] > maxval) {
				index = i;
				maxval = ADCarr[i];
			}
		}
		switch (index) {
     824:	61 15       	cp	r22, r1
     826:	71 05       	cpc	r23, r1
     828:	29 f0       	breq	.+10     	; 0x834 <drive_to_puck+0x6c>
     82a:	66 30       	cpi	r22, 0x06	; 6
     82c:	71 05       	cpc	r23, r1
     82e:	09 f0       	breq	.+2      	; 0x832 <drive_to_puck+0x6a>
     830:	56 c0       	rjmp	.+172    	; 0x8de <drive_to_puck+0x116>
     832:	2a c0       	rjmp	.+84     	; 0x888 <drive_to_puck+0xc0>
			case 0: 
				diff = ADCarr[0] - ADCarr[6];
     834:	f7 01       	movw	r30, r14
     836:	60 81       	ld	r22, Z
     838:	71 81       	ldd	r23, Z+1	; 0x01
     83a:	f6 01       	movw	r30, r12
     83c:	80 81       	ld	r24, Z
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	68 1b       	sub	r22, r24
     842:	79 0b       	sbc	r23, r25
				deg = exp(-1.0*(fabs((float)diff))/400.0);
     844:	88 27       	eor	r24, r24
     846:	77 fd       	sbrc	r23, 7
     848:	80 95       	com	r24
     84a:	98 2f       	mov	r25, r24
     84c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bf 77       	andi	r27, 0x7F	; 127
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	90 58       	subi	r25, 0x80	; 128
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	48 ec       	ldi	r20, 0xC8	; 200
     862:	53 e4       	ldi	r21, 0x43	; 67
     864:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     868:	0e 94 a3 14 	call	0x2946	; 0x2946 <exp>
     86c:	8b 01       	movw	r16, r22
     86e:	9c 01       	movw	r18, r24
				turn(RIGHT,0.2,deg);
     870:	4d ec       	ldi	r20, 0xCD	; 205
     872:	5c ec       	ldi	r21, 0xCC	; 204
     874:	6c e4       	ldi	r22, 0x4C	; 76
     876:	7e e3       	ldi	r23, 0x3E	; 62
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 4e 03 	call	0x69c	; 0x69c <turn>
				m_green(ON);
     87e:	6a 9a       	sbi	0x0d, 2	; 13
     880:	72 98       	cbi	0x0e, 2	; 14
				m_red(OFF);
     882:	6e 9a       	sbi	0x0d, 6	; 13
     884:	76 9a       	sbi	0x0e, 6	; 14
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <drive_to_puck+0x11e>
				break;
			case 6:
				diff = ADCarr[6] - ADCarr[0];
     888:	f6 01       	movw	r30, r12
     88a:	60 81       	ld	r22, Z
     88c:	71 81       	ldd	r23, Z+1	; 0x01
     88e:	f7 01       	movw	r30, r14
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	68 1b       	sub	r22, r24
     896:	79 0b       	sbc	r23, r25
				deg = exp(-1.0*(fabs((float)diff))/400.0);
     898:	88 27       	eor	r24, r24
     89a:	77 fd       	sbrc	r23, 7
     89c:	80 95       	com	r24
     89e:	98 2f       	mov	r25, r24
     8a0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	bf 77       	andi	r27, 0x7F	; 127
     8aa:	bc 01       	movw	r22, r24
     8ac:	cd 01       	movw	r24, r26
     8ae:	90 58       	subi	r25, 0x80	; 128
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	48 ec       	ldi	r20, 0xC8	; 200
     8b6:	53 e4       	ldi	r21, 0x43	; 67
     8b8:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     8bc:	0e 94 a3 14 	call	0x2946	; 0x2946 <exp>
     8c0:	8b 01       	movw	r16, r22
     8c2:	9c 01       	movw	r18, r24
				turn(LEFT,0.2,deg);
     8c4:	4d ec       	ldi	r20, 0xCD	; 205
     8c6:	5c ec       	ldi	r21, 0xCC	; 204
     8c8:	6c e4       	ldi	r22, 0x4C	; 76
     8ca:	7e e3       	ldi	r23, 0x3E	; 62
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 4e 03 	call	0x69c	; 0x69c <turn>
				m_green(OFF);
     8d4:	6a 9a       	sbi	0x0d, 2	; 13
     8d6:	72 9a       	sbi	0x0e, 2	; 14
				m_red(ON);
     8d8:	6e 9a       	sbi	0x0d, 6	; 13
     8da:	76 98       	cbi	0x0e, 6	; 14
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <drive_to_puck+0x11e>
				break;
			default:
				m_red(ON);
     8de:	6e 9a       	sbi	0x0d, 6	; 13
     8e0:	76 98       	cbi	0x0e, 6	; 14
				m_green(ON);
     8e2:	6a 9a       	sbi	0x0d, 2	; 13
     8e4:	72 98       	cbi	0x0e, 2	; 14
				break;
		}
		toggle(PORTF,7);
     8e6:	81 b3       	in	r24, 0x11	; 17
     8e8:	80 58       	subi	r24, 0x80	; 128
     8ea:	81 bb       	out	0x11, r24	; 17
	}
     8ec:	8a cf       	rjmp	.-236    	; 0x802 <drive_to_puck+0x3a>

000008ee <drive_to_point2>:
	clear(DDRF,7);
}

void drive_to_point2(int x, int y) {
     8ee:	2f 92       	push	r2
     8f0:	3f 92       	push	r3
     8f2:	4f 92       	push	r4
     8f4:	5f 92       	push	r5
     8f6:	6f 92       	push	r6
     8f8:	7f 92       	push	r7
     8fa:	8f 92       	push	r8
     8fc:	9f 92       	push	r9
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	2d 97       	sbiw	r28, 0x0d	; 13
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	2c 01       	movw	r4, r24
     924:	4b 01       	movw	r8, r22
	m_green(ON);
     926:	6a 9a       	sbi	0x0d, 2	; 13
     928:	72 98       	cbi	0x0e, 2	; 14
	//m_wait(500);
	float speed_cap = 0.5;
	localize(data);
     92a:	85 ea       	ldi	r24, 0xA5	; 165
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <localize>
	int dir = 0;
	while(1) {
		localize(data);
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     932:	c2 01       	movw	r24, r4
     934:	aa 27       	eor	r26, r26
     936:	97 fd       	sbrc	r25, 7
     938:	a0 95       	com	r26
     93a:	ba 2f       	mov	r27, r26
     93c:	8e 83       	std	Y+6, r24	; 0x06
     93e:	9f 83       	std	Y+7, r25	; 0x07
     940:	a8 87       	std	Y+8, r26	; 0x08
     942:	b9 87       	std	Y+9, r27	; 0x09
     944:	c4 01       	movw	r24, r8
     946:	aa 27       	eor	r26, r26
     948:	97 fd       	sbrc	r25, 7
     94a:	a0 95       	com	r26
     94c:	ba 2f       	mov	r27, r26
     94e:	8a 87       	std	Y+10, r24	; 0x0a
     950:	9b 87       	std	Y+11, r25	; 0x0b
     952:	ac 87       	std	Y+12, r26	; 0x0c
     954:	bd 87       	std	Y+13, r27	; 0x0d
	float dist = 0.0;
	float spd = 0.0;
	float deg = 0.0;
	int dir = 0;
	while(1) {
		localize(data);
     956:	85 ea       	ldi	r24, 0xA5	; 165
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <localize>
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     95e:	6e 81       	ldd	r22, Y+6	; 0x06
     960:	7f 81       	ldd	r23, Y+7	; 0x07
     962:	88 85       	ldd	r24, Y+8	; 0x08
     964:	99 85       	ldd	r25, Y+9	; 0x09
     966:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
     96a:	20 91 a5 01 	lds	r18, 0x01A5
     96e:	30 91 a6 01 	lds	r19, 0x01A6
     972:	40 91 a7 01 	lds	r20, 0x01A7
     976:	50 91 a8 01 	lds	r21, 0x01A8
     97a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
     97e:	06 2f       	mov	r16, r22
     980:	17 2f       	mov	r17, r23
     982:	28 2e       	mov	r2, r24
     984:	39 2e       	mov	r3, r25
     986:	6a 85       	ldd	r22, Y+10	; 0x0a
     988:	7b 85       	ldd	r23, Y+11	; 0x0b
     98a:	8c 85       	ldd	r24, Y+12	; 0x0c
     98c:	9d 85       	ldd	r25, Y+13	; 0x0d
     98e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
     992:	a9 ea       	ldi	r26, 0xA9	; 169
     994:	b1 e0       	ldi	r27, 0x01	; 1
     996:	2d 91       	ld	r18, X+
     998:	3d 91       	ld	r19, X+
     99a:	4d 91       	ld	r20, X+
     99c:	5c 91       	ld	r21, X
     99e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
     9a2:	86 2e       	mov	r8, r22
     9a4:	97 2e       	mov	r9, r23
     9a6:	a8 2e       	mov	r10, r24
     9a8:	b9 2e       	mov	r11, r25
     9aa:	20 2f       	mov	r18, r16
     9ac:	31 2f       	mov	r19, r17
     9ae:	42 2d       	mov	r20, r2
     9b0:	53 2d       	mov	r21, r3
     9b2:	68 2d       	mov	r22, r8
     9b4:	79 2d       	mov	r23, r9
     9b6:	8a 2d       	mov	r24, r10
     9b8:	9b 2d       	mov	r25, r11
     9ba:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <atan2>
     9be:	2b 01       	movw	r4, r22
     9c0:	3c 01       	movw	r6, r24
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	44 eb       	ldi	r20, 0xB4	; 180
     9c8:	52 e4       	ldi	r21, 0x42	; 66
     9ca:	ed ea       	ldi	r30, 0xAD	; 173
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	60 81       	ld	r22, Z
     9d0:	71 81       	ldd	r23, Z+1	; 0x01
     9d2:	82 81       	ldd	r24, Z+2	; 0x02
     9d4:	93 81       	ldd	r25, Z+3	; 0x03
     9d6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24
     9de:	f7 fa       	bst	r15, 7
     9e0:	f0 94       	com	r15
     9e2:	f7 f8       	bld	r15, 7
     9e4:	f0 94       	com	r15
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	44 e3       	ldi	r20, 0x34	; 52
     9ec:	53 e4       	ldi	r21, 0x43	; 67
     9ee:	c3 01       	movw	r24, r6
     9f0:	b2 01       	movw	r22, r4
     9f2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     9f6:	23 ec       	ldi	r18, 0xC3	; 195
     9f8:	35 ef       	ldi	r19, 0xF5	; 245
     9fa:	48 e4       	ldi	r20, 0x48	; 72
     9fc:	50 e4       	ldi	r21, 0x40	; 64
     9fe:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     a02:	9b 01       	movw	r18, r22
     a04:	ac 01       	movw	r20, r24
     a06:	c7 01       	movw	r24, r14
     a08:	b6 01       	movw	r22, r12
     a0a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
     a0e:	0e 94 cf 14 	call	0x299e	; 0x299e <__fixsfsi>
     a12:	cb 01       	movw	r24, r22
     a14:	8c 57       	subi	r24, 0x7C	; 124
     a16:	9c 4f       	sbci	r25, 0xFC	; 252
     a18:	68 e6       	ldi	r22, 0x68	; 104
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__divmodhi4>
     a20:	bc 01       	movw	r22, r24
     a22:	64 5b       	subi	r22, 0xB4	; 180
     a24:	71 09       	sbc	r23, r1
     a26:	88 27       	eor	r24, r24
     a28:	77 fd       	sbrc	r23, 7
     a2a:	80 95       	com	r24
     a2c:	98 2f       	mov	r25, r24
     a2e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
     a32:	e6 2e       	mov	r14, r22
     a34:	d7 2e       	mov	r13, r23
     a36:	46 2f       	mov	r20, r22
     a38:	57 2f       	mov	r21, r23
     a3a:	68 2f       	mov	r22, r24
     a3c:	79 2f       	mov	r23, r25
     a3e:	49 83       	std	Y+1, r20	; 0x01
     a40:	5a 83       	std	Y+2, r21	; 0x02
     a42:	6b 83       	std	Y+3, r22	; 0x03
     a44:	7c 83       	std	Y+4, r23	; 0x04
		if (angle_dif > 0) {
     a46:	ff 24       	eor	r15, r15
     a48:	f3 94       	inc	r15
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	a9 01       	movw	r20, r18
     a50:	6e 2d       	mov	r22, r14
     a52:	7d 2d       	mov	r23, r13
     a54:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__gesf2>
     a58:	18 16       	cp	r1, r24
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <drive_to_point2+0x170>
     a5c:	f1 2c       	mov	r15, r1
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	ff 25       	eor	r31, r15
     a62:	fd 83       	std	Y+5, r31	; 0x05
		else {
			dir = LEFT;
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	9a 81       	ldd	r25, Y+2	; 0x02
     a68:	ab 81       	ldd	r26, Y+3	; 0x03
     a6a:	bc 81       	ldd	r27, Y+4	; 0x04
     a6c:	bf 77       	andi	r27, 0x7F	; 127
     a6e:	bc 01       	movw	r22, r24
     a70:	cd 01       	movw	r24, r26
     a72:	90 58       	subi	r25, 0x80	; 128
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 ef       	ldi	r20, 0xF0	; 240
     a7a:	51 e4       	ldi	r21, 0x41	; 65
     a7c:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     a80:	0e 94 a3 14 	call	0x2946	; 0x2946 <exp>
     a84:	6b 01       	movw	r12, r22
     a86:	7c 01       	movw	r14, r24
		//Set distance
		dist = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     a88:	28 2d       	mov	r18, r8
     a8a:	39 2d       	mov	r19, r9
     a8c:	4a 2d       	mov	r20, r10
     a8e:	5b 2d       	mov	r21, r11
     a90:	68 2d       	mov	r22, r8
     a92:	79 2d       	mov	r23, r9
     a94:	8a 2d       	mov	r24, r10
     a96:	9b 2d       	mov	r25, r11
     a98:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     a9c:	4b 01       	movw	r8, r22
     a9e:	5c 01       	movw	r10, r24
     aa0:	20 2f       	mov	r18, r16
     aa2:	31 2f       	mov	r19, r17
     aa4:	42 2d       	mov	r20, r2
     aa6:	53 2d       	mov	r21, r3
     aa8:	60 2f       	mov	r22, r16
     aaa:	71 2f       	mov	r23, r17
     aac:	82 2d       	mov	r24, r2
     aae:	93 2d       	mov	r25, r3
     ab0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c5 01       	movw	r24, r10
     aba:	b4 01       	movw	r22, r8
     abc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
     ac0:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <sqrt>
     ac4:	0e 94 cf 14 	call	0x299e	; 0x299e <__fixsfsi>
     ac8:	88 27       	eor	r24, r24
     aca:	77 fd       	sbrc	r23, 7
     acc:	80 95       	com	r24
     ace:	98 2f       	mov	r25, r24
     ad0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__floatsisf>
     ad4:	a6 2e       	mov	r10, r22
     ad6:	b7 2e       	mov	r11, r23
     ad8:	08 2f       	mov	r16, r24
     ada:	19 2f       	mov	r17, r25
		spd = ((float)dist)/70.0;
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	4c e8       	ldi	r20, 0x8C	; 140
     ae2:	52 e4       	ldi	r21, 0x42	; 66
     ae4:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
     ae8:	26 2e       	mov	r2, r22
     aea:	37 2e       	mov	r3, r23
     aec:	88 2e       	mov	r8, r24
     aee:	99 2e       	mov	r9, r25
     af0:	46 2e       	mov	r4, r22
     af2:	57 2e       	mov	r5, r23
     af4:	68 2e       	mov	r6, r24
     af6:	79 2e       	mov	r7, r25
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     af8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <m_usb_rx_char>
     afc:	80 93 9a 01 	sts	0x019A, r24

			m_usb_rx_flush();  				//clear buffer
     b00:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     b04:	80 91 9a 01 	lds	r24, 0x019A
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	09 f0       	breq	.+2      	; 0xb0e <__stack+0xf>
     b0c:	50 c0       	rjmp	.+160    	; 0xbae <__stack+0xaf>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	9a 81       	ldd	r25, Y+2	; 0x02
     b12:	ab 81       	ldd	r26, Y+3	; 0x03
     b14:	bc 81       	ldd	r27, Y+4	; 0x04
     b16:	e1 eb       	ldi	r30, 0xB1	; 177
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	80 83       	st	Z, r24
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	a2 83       	std	Z+2, r26	; 0x02
     b20:	b3 83       	std	Z+3, r27	; 0x03
				data[4] = deg*100.0;
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 ec       	ldi	r20, 0xC8	; 200
     b28:	52 e4       	ldi	r21, 0x42	; 66
     b2a:	c7 01       	movw	r24, r14
     b2c:	b6 01       	movw	r22, r12
     b2e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     b32:	a5 eb       	ldi	r26, 0xB5	; 181
     b34:	b1 e0       	ldi	r27, 0x01	; 1
     b36:	6d 93       	st	X+, r22
     b38:	7d 93       	st	X+, r23
     b3a:	8d 93       	st	X+, r24
     b3c:	9c 93       	st	X, r25
     b3e:	13 97       	sbiw	r26, 0x03	; 3
				data[5] = dist;
     b40:	8a 2d       	mov	r24, r10
     b42:	9b 2d       	mov	r25, r11
     b44:	a0 2f       	mov	r26, r16
     b46:	b1 2f       	mov	r27, r17
     b48:	e9 eb       	ldi	r30, 0xB9	; 185
     b4a:	f1 e0       	ldi	r31, 0x01	; 1
     b4c:	80 83       	st	Z, r24
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	a2 83       	std	Z+2, r26	; 0x02
     b52:	b3 83       	std	Z+3, r27	; 0x03
				data[6] = spd*100.0;
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	48 ec       	ldi	r20, 0xC8	; 200
     b5a:	52 e4       	ldi	r21, 0x42	; 66
     b5c:	62 2d       	mov	r22, r2
     b5e:	73 2d       	mov	r23, r3
     b60:	88 2d       	mov	r24, r8
     b62:	99 2d       	mov	r25, r9
     b64:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
     b68:	ad eb       	ldi	r26, 0xBD	; 189
     b6a:	b1 e0       	ldi	r27, 0x01	; 1
     b6c:	6d 93       	st	X+, r22
     b6e:	7d 93       	st	X+, r23
     b70:	8d 93       	st	X+, r24
     b72:	9c 93       	st	X, r25
     b74:	13 97       	sbiw	r26, 0x03	; 3
     b76:	e5 ea       	ldi	r30, 0xA5	; 165
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	fa 83       	std	Y+2, r31	; 0x02
     b7c:	e9 83       	std	Y+1, r30	; 0x01
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     b7e:	a9 81       	ldd	r26, Y+1	; 0x01
     b80:	ba 81       	ldd	r27, Y+2	; 0x02
     b82:	6d 91       	ld	r22, X+
     b84:	7d 91       	ld	r23, X+
     b86:	8d 91       	ld	r24, X+
     b88:	9d 91       	ld	r25, X+
     b8a:	ba 83       	std	Y+2, r27	; 0x02
     b8c:	a9 83       	std	Y+1, r26	; 0x01
     b8e:	0e 94 cf 14 	call	0x299e	; 0x299e <__fixsfsi>
     b92:	cb 01       	movw	r24, r22
     b94:	0e 94 42 11 	call	0x2284	; 0x2284 <m_usb_tx_int>
					m_usb_tx_char('\t');
     b98:	89 e0       	ldi	r24, 0x09	; 9
     b9a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = dist;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	e1 5c       	subi	r30, 0xC1	; 193
     ba4:	f1 40       	sbci	r31, 0x01	; 1
     ba6:	59 f7       	brne	.-42     	; 0xb7e <__stack+0x7f>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     ba8:	8a e0       	ldi	r24, 0x0A	; 10
     baa:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	62 2d       	mov	r22, r2
     bb8:	73 2d       	mov	r23, r3
     bba:	88 2d       	mov	r24, r8
     bbc:	99 2d       	mov	r25, r9
     bbe:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__gesf2>
     bc2:	18 16       	cp	r1, r24
     bc4:	3c f4       	brge	.+14     	; 0xbd4 <__stack+0xd5>
     bc6:	41 2c       	mov	r4, r1
     bc8:	51 2c       	mov	r5, r1
     bca:	61 2c       	mov	r6, r1
     bcc:	0f 2e       	mov	r0, r31
     bce:	ff e3       	ldi	r31, 0x3F	; 63
     bd0:	7f 2e       	mov	r7, r31
     bd2:	f0 2d       	mov	r31, r0
		if (dist < 10) break;
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e2       	ldi	r20, 0x20	; 32
     bda:	51 e4       	ldi	r21, 0x41	; 65
     bdc:	6a 2d       	mov	r22, r10
     bde:	7b 2d       	mov	r23, r11
     be0:	80 2f       	mov	r24, r16
     be2:	91 2f       	mov	r25, r17
     be4:	0e 94 2f 14 	call	0x285e	; 0x285e <__cmpsf2>
     be8:	88 23       	and	r24, r24
     bea:	7c f0       	brlt	.+30     	; 0xc0a <__stack+0x10b>
		if (changedState) return;
     bec:	80 91 36 01 	lds	r24, 0x0136
     bf0:	81 11       	cpse	r24, r1
     bf2:	1b c0       	rjmp	.+54     	; 0xc2a <__stack+0x12b>
		turn(dir, spd, deg);
     bf4:	97 01       	movw	r18, r14
     bf6:	86 01       	movw	r16, r12
     bf8:	44 2d       	mov	r20, r4
     bfa:	55 2d       	mov	r21, r5
     bfc:	66 2d       	mov	r22, r6
     bfe:	77 2d       	mov	r23, r7
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 4e 03 	call	0x69c	; 0x69c <turn>
		
	}
     c08:	a6 ce       	rjmp	.-692    	; 0x956 <drive_to_point2+0x68>
	m_red(ON);
     c0a:	6e 9a       	sbi	0x0d, 6	; 13
     c0c:	76 98       	cbi	0x0e, 6	; 14
	reverse();
     c0e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <reverse>
	OCR1B = 0;
     c12:	10 92 8b 00 	sts	0x008B, r1
     c16:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     c1a:	10 92 99 00 	sts	0x0099, r1
     c1e:	10 92 98 00 	sts	0x0098, r1
	state = 0;
     c22:	10 92 35 01 	sts	0x0135, r1
     c26:	10 92 34 01 	sts	0x0134, r1
}
     c2a:	2d 96       	adiw	r28, 0x0d	; 13
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	08 95       	ret

00000c5c <drive_to_goalA>:
	m_red(OFF);
	game_pause();
}

void drive_to_goalA() {
	drive_to_point2(GOALBX,GOALBY);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	83 e7       	ldi	r24, 0x73	; 115
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 77 04 	call	0x8ee	; 0x8ee <drive_to_point2>
     c68:	08 95       	ret

00000c6a <drive_to_goalB>:
}

void drive_to_goalB() {
	drive_to_point2(GOALAX,GOALAY);
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	8d e8       	ldi	r24, 0x8D	; 141
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	0e 94 77 04 	call	0x8ee	; 0x8ee <drive_to_point2>
     c76:	08 95       	ret

00000c78 <shoot>:
}

void shoot() {
		set(PORTB,7);
     c78:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	81 ee       	ldi	r24, 0xE1	; 225
     c7e:	94 e0       	ldi	r25, 0x04	; 4
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	80 40       	sbci	r24, 0x00	; 0
     c84:	90 40       	sbci	r25, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <shoot+0x8>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <shoot+0x12>
     c8a:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     c8c:	2f 98       	cbi	0x05, 7	; 5
     c8e:	08 95       	ret

00000c90 <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     c90:	10 92 8b 00 	sts	0x008B, r1
     c94:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     c98:	10 92 99 00 	sts	0x0099, r1
     c9c:	10 92 98 00 	sts	0x0098, r1
     ca0:	08 95       	ret

00000ca2 <comm_test>:
	//set(PORTB,2);
	//set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     ca2:	5d 9a       	sbi	0x0b, 5	; 11
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	89 e6       	ldi	r24, 0x69	; 105
     ca8:	98 e1       	ldi	r25, 0x18	; 24
     caa:	21 50       	subi	r18, 0x01	; 1
     cac:	80 40       	sbci	r24, 0x00	; 0
     cae:	90 40       	sbci	r25, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <comm_test+0x8>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <comm_test+0x12>
     cb4:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     cb6:	5d 98       	cbi	0x0b, 5	; 11
     cb8:	2f ef       	ldi	r18, 0xFF	; 255
     cba:	89 e6       	ldi	r24, 0x69	; 105
     cbc:	98 e1       	ldi	r25, 0x18	; 24
     cbe:	21 50       	subi	r18, 0x01	; 1
     cc0:	80 40       	sbci	r24, 0x00	; 0
     cc2:	90 40       	sbci	r25, 0x00	; 0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <comm_test+0x1c>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <comm_test+0x26>
     cc8:	00 00       	nop
	m_wait(500);
	state = 0;
     cca:	10 92 35 01 	sts	0x0135, r1
     cce:	10 92 34 01 	sts	0x0134, r1
     cd2:	08 95       	ret

00000cd4 <main>:
		*/
}

int main(void)
{
	set(DDRD,5);
     cd4:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     cd6:	0e 94 00 08 	call	0x1000	; 0x1000 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     cda:	4a e0       	ldi	r20, 0x0A	; 10
     cdc:	68 e0       	ldi	r22, 0x08	; 8
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     ce4:	e1 e6       	ldi	r30, 0x61	; 97
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 e8       	ldi	r24, 0x80	; 128
     cea:	80 83       	st	Z, r24
     cec:	10 82       	st	Z, r1
	
	m_disableJTAG();
     cee:	85 bf       	out	0x35, r24	; 53
     cf0:	85 bf       	out	0x35, r24	; 53
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     cf2:	85 b5       	in	r24, 0x25	; 37
     cf4:	88 60       	ori	r24, 0x08	; 8
     cf6:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     cf8:	84 b5       	in	r24, 0x24	; 36
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     cfe:	84 b5       	in	r24, 0x24	; 36
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     d04:	84 b5       	in	r24, 0x24	; 36
     d06:	80 62       	ori	r24, 0x20	; 32
     d08:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     d0a:	84 b5       	in	r24, 0x24	; 36
     d0c:	8f 7e       	andi	r24, 0xEF	; 239
     d0e:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     d10:	85 b5       	in	r24, 0x25	; 37
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     d16:	85 b5       	in	r24, 0x25	; 37
     d18:	82 60       	ori	r24, 0x02	; 2
     d1a:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     d1c:	85 b5       	in	r24, 0x25	; 37
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     d22:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     d28:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     d2a:	e1 e8       	ldi	r30, 0x81	; 129
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 61       	ori	r24, 0x10	; 16
     d32:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     d3a:	a0 e8       	ldi	r26, 0x80	; 128
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	8c 91       	ld	r24, X
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     d44:	8c 91       	ld	r24, X
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     d4a:	8c 91       	ld	r24, X
     d4c:	80 62       	ori	r24, 0x20	; 32
     d4e:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     d50:	8c 91       	ld	r24, X
     d52:	8f 7e       	andi	r24, 0xEF	; 239
     d54:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     d56:	80 81       	ld	r24, Z
     d58:	8b 7f       	andi	r24, 0xFB	; 251
     d5a:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     d5c:	80 81       	ld	r24, Z
     d5e:	8d 7f       	andi	r24, 0xFD	; 253
     d60:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     d62:	80 81       	ld	r24, Z
     d64:	81 60       	ori	r24, 0x01	; 1
     d66:	80 83       	st	Z, r24
	
	set(DDRB,6);
     d68:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
     d6e:	90 93 89 00 	sts	0x0089, r25
     d72:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     d76:	10 92 8b 00 	sts	0x008B, r1
     d7a:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     d7e:	e1 e9       	ldi	r30, 0x91	; 145
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	20 81       	ld	r18, Z
     d84:	20 61       	ori	r18, 0x10	; 16
     d86:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     d88:	20 81       	ld	r18, Z
     d8a:	28 60       	ori	r18, 0x08	; 8
     d8c:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     d8e:	a0 e9       	ldi	r26, 0x90	; 144
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	2c 91       	ld	r18, X
     d94:	22 60       	ori	r18, 0x02	; 2
     d96:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     d98:	2c 91       	ld	r18, X
     d9a:	2e 7f       	andi	r18, 0xFE	; 254
     d9c:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     d9e:	2c 91       	ld	r18, X
     da0:	20 68       	ori	r18, 0x80	; 128
     da2:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     da4:	2c 91       	ld	r18, X
     da6:	2f 7b       	andi	r18, 0xBF	; 191
     da8:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     daa:	20 81       	ld	r18, Z
     dac:	2b 7f       	andi	r18, 0xFB	; 251
     dae:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     db0:	20 81       	ld	r18, Z
     db2:	2d 7f       	andi	r18, 0xFD	; 253
     db4:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     db6:	20 81       	ld	r18, Z
     db8:	21 60       	ori	r18, 0x01	; 1
     dba:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     dbc:	90 93 97 00 	sts	0x0097, r25
     dc0:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     dc4:	10 92 99 00 	sts	0x0099, r1
     dc8:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     dcc:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     dce:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     dd0:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     dd2:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     dd4:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     dd6:	78 94       	sei
	set(ADCSRA, ADIE);
     dd8:	ca e7       	ldi	r28, 0x7A	; 122
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	88 81       	ld	r24, Y
     dde:	88 60       	ori	r24, 0x08	; 8
     de0:	88 83       	st	Y, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     de2:	ec e7       	ldi	r30, 0x7C	; 124
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8f 77       	andi	r24, 0x7F	; 127
     dea:	80 83       	st	Z, r24
	clear(ADMUX, REFS0);	//^
     dec:	80 81       	ld	r24, Z
     dee:	8f 7b       	andi	r24, 0xBF	; 191
     df0:	80 83       	st	Z, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     df2:	88 81       	ld	r24, Y
     df4:	84 60       	ori	r24, 0x04	; 4
     df6:	88 83       	st	Y, r24
	set(ADCSRA, ADPS1);	//^
     df8:	88 81       	ld	r24, Y
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	88 83       	st	Y, r24
	set(ADCSRA, ADPS0);	//^
     dfe:	88 81       	ld	r24, Y
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	88 83       	st	Y, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     e04:	ee e7       	ldi	r30, 0x7E	; 126
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	81 60       	ori	r24, 0x01	; 1
     e0c:	80 83       	st	Z, r24
	set(DIDR0, ADC1D),
     e0e:	80 81       	ld	r24, Z
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	80 83       	st	Z, r24
	set(DIDR0, ADC4D);
     e14:	80 81       	ld	r24, Z
     e16:	80 61       	ori	r24, 0x10	; 16
     e18:	80 83       	st	Z, r24
	set(DIDR0, ADC5D);
     e1a:	80 81       	ld	r24, Z
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	80 83       	st	Z, r24
	set(DIDR0, ADC6D);
     e20:	80 81       	ld	r24, Z
     e22:	80 64       	ori	r24, 0x40	; 64
     e24:	80 83       	st	Z, r24
	set(DIDR2, ADC8D);
     e26:	ed e7       	ldi	r30, 0x7D	; 125
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	81 60       	ori	r24, 0x01	; 1
     e2e:	80 83       	st	Z, r24
	set(DIDR2, ADC9D);
     e30:	80 81       	ld	r24, Z
     e32:	82 60       	ori	r24, 0x02	; 2
     e34:	80 83       	st	Z, r24
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     e36:	88 81       	ld	r24, Y
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	88 83       	st	Y, r24
	
	chooseInput(0);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 08 01 	call	0x210	; 0x210 <chooseInput>
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
     e44:	88 81       	ld	r24, Y
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	88 83       	st	Y, r24
	set(ADCSRA, ADSC);	//^
     e4a:	88 81       	ld	r24, Y
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	88 83       	st	Y, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     e50:	88 81       	ld	r24, Y
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	88 83       	st	Y, r24
	
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     e56:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     e58:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     e5a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     e5c:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 2; //set state
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 35 01 	sts	0x0135, r25
     e66:	80 93 34 01 	sts	0x0134, r24
	long count = 0;
	

	//m_bus_init();
	m_wii_open();
     e6a:	0e 94 65 12 	call	0x24ca	; 0x24ca <m_wii_open>
	m_usb_init();
     e6e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <m_usb_init>
			break;
			
			case 69:
				set(PORTB,2);
				set(PORTB,3);
				OCR1B = OCR1A;
     e72:	0f 2e       	mov	r0, r31
     e74:	f8 e8       	ldi	r31, 0x88	; 136
     e76:	cf 2e       	mov	r12, r31
     e78:	d1 2c       	mov	r13, r1
     e7a:	f0 2d       	mov	r31, r0
     e7c:	0f 2e       	mov	r0, r31
     e7e:	fa e8       	ldi	r31, 0x8A	; 138
     e80:	ef 2e       	mov	r14, r31
     e82:	f1 2c       	mov	r15, r1
     e84:	f0 2d       	mov	r31, r0
				OCR3A = ICR3;
     e86:	06 e9       	ldi	r16, 0x96	; 150
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	c8 e9       	ldi	r28, 0x98	; 152
     e8c:	d0 e0       	ldi	r29, 0x00	; 0
	m_usb_init();
	//local_init();

    while(1)
    {
		changedState = 0;
     e8e:	10 92 36 01 	sts	0x0136, r1
		getADC();
     e92:	0e 94 95 01 	call	0x32a	; 0x32a <getADC>
		//localize(data);

	

		//switch states
        switch (state) {
     e96:	80 91 34 01 	lds	r24, 0x0134
     e9a:	90 91 35 01 	lds	r25, 0x0135
     e9e:	85 34       	cpi	r24, 0x45	; 69
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <main+0x1d2>
     ea4:	52 c0       	rjmp	.+164    	; 0xf4a <main+0x276>
     ea6:	9c f4       	brge	.+38     	; 0xece <main+0x1fa>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	81 f3       	breq	.-32     	; 0xe8e <main+0x1ba>
     eae:	3c f4       	brge	.+14     	; 0xebe <main+0x1ea>
     eb0:	8d 3f       	cpi	r24, 0xFD	; 253
     eb2:	2f ef       	ldi	r18, 0xFF	; 255
     eb4:	92 07       	cpc	r25, r18
     eb6:	01 f1       	breq	.+64     	; 0xef8 <main+0x224>
     eb8:	89 2b       	or	r24, r25
     eba:	69 f1       	breq	.+90     	; 0xf16 <main+0x242>
     ebc:	56 c0       	rjmp	.+172    	; 0xf6a <main+0x296>
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	91 05       	cpc	r25, r1
     ec2:	71 f1       	breq	.+92     	; 0xf20 <main+0x24c>
     ec4:	5c f1       	brlt	.+86     	; 0xf1c <main+0x248>
     ec6:	04 97       	sbiw	r24, 0x04	; 4
     ec8:	09 f0       	breq	.+2      	; 0xecc <main+0x1f8>
     eca:	4f c0       	rjmp	.+158    	; 0xf6a <main+0x296>
     ecc:	2c c0       	rjmp	.+88     	; 0xf26 <main+0x252>
     ece:	81 3a       	cpi	r24, 0xA1	; 161
     ed0:	91 05       	cpc	r25, r1
     ed2:	91 f1       	breq	.+100    	; 0xf38 <main+0x264>
     ed4:	4c f4       	brge	.+18     	; 0xee8 <main+0x214>
     ed6:	86 34       	cpi	r24, 0x46	; 70
     ed8:	91 05       	cpc	r25, r1
     eda:	09 f4       	brne	.+2      	; 0xede <main+0x20a>
     edc:	44 c0       	rjmp	.+136    	; 0xf66 <main+0x292>
     ede:	80 3a       	cpi	r24, 0xA0	; 160
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <main+0x212>
     ee4:	42 c0       	rjmp	.+132    	; 0xf6a <main+0x296>
     ee6:	25 c0       	rjmp	.+74     	; 0xf32 <main+0x25e>
     ee8:	83 3a       	cpi	r24, 0xA3	; 163
     eea:	91 05       	cpc	r25, r1
     eec:	59 f1       	breq	.+86     	; 0xf44 <main+0x270>
     eee:	3c f1       	brlt	.+78     	; 0xf3e <main+0x26a>
     ef0:	84 3a       	cpi	r24, 0xA4	; 164
     ef2:	91 05       	cpc	r25, r1
     ef4:	d1 f5       	brne	.+116    	; 0xf6a <main+0x296>
     ef6:	1a c0       	rjmp	.+52     	; 0xf2c <main+0x258>
			
			case -3: //test Limit switches
				//m_green(ON);
				if (check(PINB,1)) {
     ef8:	19 9b       	sbis	0x03, 1	; 3
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <main+0x22e>
					
					m_green(ON);
     efc:	6a 9a       	sbi	0x0d, 2	; 13
     efe:	72 98       	cbi	0x0e, 2	; 14
     f00:	c6 cf       	rjmp	.-116    	; 0xe8e <main+0x1ba>
				}
				
				else if (check(PINB,0)) {
     f02:	18 9b       	sbis	0x03, 0	; 3
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <main+0x238>
					
					m_red(ON);
     f06:	6e 9a       	sbi	0x0d, 6	; 13
     f08:	76 98       	cbi	0x0e, 6	; 14
     f0a:	c1 cf       	rjmp	.-126    	; 0xe8e <main+0x1ba>
				}
				
				else {
					m_red(OFF);
     f0c:	6e 9a       	sbi	0x0d, 6	; 13
     f0e:	76 9a       	sbi	0x0e, 6	; 14
					m_green(OFF);
     f10:	6a 9a       	sbi	0x0d, 2	; 13
     f12:	72 9a       	sbi	0x0e, 2	; 14
     f14:	bc cf       	rjmp	.-136    	; 0xe8e <main+0x1ba>
				
			break;

			case 0:
			//drive_to_point2(-100,0);
			game_pause();
     f16:	0e 94 48 06 	call	0xc90	; 0xc90 <game_pause>
			break;
     f1a:	b9 cf       	rjmp	.-142    	; 0xe8e <main+0x1ba>
			case 1:
			findPuck();
			break;
			
			case 2:
			drive_to_puck();
     f1c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <drive_to_puck>
			break;
			
			case 3:
			drive_to_goalA();
     f20:	0e 94 2e 06 	call	0xc5c	; 0xc5c <drive_to_goalA>
			break;
     f24:	b4 cf       	rjmp	.-152    	; 0xe8e <main+0x1ba>
			
			case 4:
			shoot();
     f26:	0e 94 3c 06 	call	0xc78	; 0xc78 <shoot>
			break;	
     f2a:	b1 cf       	rjmp	.-158    	; 0xe8e <main+0x1ba>
			
			case 0xA4:
			game_pause();
     f2c:	0e 94 48 06 	call	0xc90	; 0xc90 <game_pause>
			break;
     f30:	ae cf       	rjmp	.-164    	; 0xe8e <main+0x1ba>
			
			case 0xA0:
			comm_test();
     f32:	0e 94 51 06 	call	0xca2	; 0xca2 <comm_test>
			break;
     f36:	ab cf       	rjmp	.-170    	; 0xe8e <main+0x1ba>
			
			case 0xA1:
			drive_to_goalA();
     f38:	0e 94 2e 06 	call	0xc5c	; 0xc5c <drive_to_goalA>
			break;
     f3c:	a8 cf       	rjmp	.-176    	; 0xe8e <main+0x1ba>
			
			case 0xA2:
			drive_to_goalA();
     f3e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <drive_to_goalA>
			break;
     f42:	a5 cf       	rjmp	.-182    	; 0xe8e <main+0x1ba>
			
			case 0xA3:
			drive_to_goalB();
     f44:	0e 94 35 06 	call	0xc6a	; 0xc6a <drive_to_goalB>
			break;
     f48:	a2 cf       	rjmp	.-188    	; 0xe8e <main+0x1ba>
			
			case 69:
				set(PORTB,2);
     f4a:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
     f4c:	2b 9a       	sbi	0x05, 3	; 5
				OCR1B = OCR1A;
     f4e:	f6 01       	movw	r30, r12
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	f7 01       	movw	r30, r14
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
				OCR3A = ICR3;
     f5a:	f8 01       	movw	r30, r16
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	99 83       	std	Y+1, r25	; 0x01
     f62:	88 83       	st	Y, r24
				break;
     f64:	94 cf       	rjmp	.-216    	; 0xe8e <main+0x1ba>
				
			case 70:
				reportADC();
     f66:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <reportADC>
				break;
			
			default:
			game_pause();
     f6a:	0e 94 48 06 	call	0xc90	; 0xc90 <game_pause>
			break;
     f6e:	8f cf       	rjmp	.-226    	; 0xe8e <main+0x1ba>

00000f70 <__vector_3>:
        
    }
}


ISR(INT2_vect)  {
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	cli();
     f92:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     f94:	6a e0       	ldi	r22, 0x0A	; 10
     f96:	8b e9       	ldi	r24, 0x9B	; 155
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <m_rf_read>
	sei();
     f9e:	78 94       	sei
	state=buffer[0];
     fa0:	80 91 9b 01 	lds	r24, 0x019B
     fa4:	80 93 34 01 	sts	0x0134, r24
     fa8:	10 92 35 01 	sts	0x0135, r1
	changedState = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 36 01 	sts	0x0136, r24
}
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <__vector_29>:

ISR(ADC_vect) {
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
	cli();
     fe2:	f8 94       	cli
	conversion = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	90 93 15 01 	sts	0x0115, r25
     fec:	80 93 14 01 	sts	0x0114, r24
	sei();
     ff0:	78 94       	sei
	
	set(ADCSRA, ADIF);	//Enable reading results
	//m_wait(500);
	m_red(TOGGLE);
	flag = 1;*/
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1000:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1002:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1004:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1006:	8c e0       	ldi	r24, 0x0C	; 12
    1008:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    100c:	e9 e6       	ldi	r30, 0x69	; 105
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 62       	ori	r24, 0x20	; 32
    1014:	80 83       	st	Z, r24
    1016:	80 81       	ld	r24, Z
    1018:	8f 7e       	andi	r24, 0xEF	; 239
    101a:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    101c:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    101e:	78 94       	sei
    1020:	08 95       	ret

00001022 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	8c 01       	movw	r16, r24
    102c:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
    102e:	8d e7       	ldi	r24, 0x7D	; 125
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <m_wii_read>
	x[0] = blobs[0];
    1036:	80 91 7d 01 	lds	r24, 0x017D
    103a:	90 91 7e 01 	lds	r25, 0x017E
    103e:	f8 01       	movw	r30, r16
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
	x[1] = blobs[3];
    1044:	80 91 83 01 	lds	r24, 0x0183
    1048:	90 91 84 01 	lds	r25, 0x0184
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
    1050:	80 91 89 01 	lds	r24, 0x0189
    1054:	90 91 8a 01 	lds	r25, 0x018A
    1058:	95 83       	std	Z+5, r25	; 0x05
    105a:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
    105c:	80 91 8f 01 	lds	r24, 0x018F
    1060:	90 91 90 01 	lds	r25, 0x0190
    1064:	97 83       	std	Z+7, r25	; 0x07
    1066:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
    1068:	80 91 7f 01 	lds	r24, 0x017F
    106c:	90 91 80 01 	lds	r25, 0x0180
    1070:	99 83       	std	Y+1, r25	; 0x01
    1072:	88 83       	st	Y, r24
	y[1] = blobs[4];
    1074:	80 91 85 01 	lds	r24, 0x0185
    1078:	90 91 86 01 	lds	r25, 0x0186
    107c:	9b 83       	std	Y+3, r25	; 0x03
    107e:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
    1080:	80 91 8b 01 	lds	r24, 0x018B
    1084:	90 91 8c 01 	lds	r25, 0x018C
    1088:	9d 83       	std	Y+5, r25	; 0x05
    108a:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
    108c:	80 91 91 01 	lds	r24, 0x0191
    1090:	90 91 92 01 	lds	r25, 0x0192
    1094:	9f 83       	std	Y+7, r25	; 0x07
    1096:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <determine_blobs>:

unsigned char determine_blobs() {
    10a4:	2f 92       	push	r2
    10a6:	3f 92       	push	r3
    10a8:	4f 92       	push	r4
    10aa:	5f 92       	push	r5
    10ac:	6f 92       	push	r6
    10ae:	7f 92       	push	r7
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	6c 97       	sbiw	r28, 0x1c	; 28
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
    10d8:	10 92 45 01 	sts	0x0145, r1
    10dc:	10 92 46 01 	sts	0x0146, r1
    10e0:	10 92 47 01 	sts	0x0147, r1
    10e4:	10 92 48 01 	sts	0x0148, r1
	distmin = 30000;
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e6       	ldi	r25, 0x60	; 96
    10ec:	aa ee       	ldi	r26, 0xEA	; 234
    10ee:	b6 e4       	ldi	r27, 0x46	; 70
    10f0:	80 93 00 01 	sts	0x0100, r24
    10f4:	90 93 01 01 	sts	0x0101, r25
    10f8:	a0 93 02 01 	sts	0x0102, r26
    10fc:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    1100:	0f 2e       	mov	r0, r31
    1102:	f7 e5       	ldi	r31, 0x57	; 87
    1104:	cf 2e       	mov	r12, r31
    1106:	f1 e0       	ldi	r31, 0x01	; 1
    1108:	df 2e       	mov	r13, r31
    110a:	f0 2d       	mov	r31, r0
    110c:	09 e5       	ldi	r16, 0x59	; 89
    110e:	11 e0       	ldi	r17, 0x01	; 1
    1110:	0f 2e       	mov	r0, r31
    1112:	fb e5       	ldi	r31, 0x5B	; 91
    1114:	ef 2e       	mov	r14, r31
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	ff 2e       	mov	r15, r31
    111a:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
    111c:	6d e4       	ldi	r22, 0x4D	; 77
    111e:	71 e0       	ldi	r23, 0x01	; 1
    1120:	85 e5       	ldi	r24, 0x55	; 85
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 11 08 	call	0x1022	; 0x1022 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    1128:	80 91 55 01 	lds	r24, 0x0155
    112c:	90 91 56 01 	lds	r25, 0x0156
    1130:	8f 3f       	cpi	r24, 0xFF	; 255
    1132:	93 40       	sbci	r25, 0x03	; 3
    1134:	98 f7       	brcc	.-26     	; 0x111c <determine_blobs+0x78>
    1136:	f6 01       	movw	r30, r12
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	8f 3f       	cpi	r24, 0xFF	; 255
    113e:	93 40       	sbci	r25, 0x03	; 3
    1140:	68 f7       	brcc	.-38     	; 0x111c <determine_blobs+0x78>
    1142:	f8 01       	movw	r30, r16
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	93 40       	sbci	r25, 0x03	; 3
    114c:	38 f7       	brcc	.-50     	; 0x111c <determine_blobs+0x78>
    114e:	f7 01       	movw	r30, r14
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	93 40       	sbci	r25, 0x03	; 3
    1158:	08 f7       	brcc	.-62     	; 0x111c <determine_blobs+0x78>
    115a:	80 90 49 01 	lds	r8, 0x0149
    115e:	90 90 4a 01 	lds	r9, 0x014A
    1162:	a0 90 4b 01 	lds	r10, 0x014B
    1166:	b0 90 4c 01 	lds	r11, 0x014C
    116a:	20 91 45 01 	lds	r18, 0x0145
    116e:	29 83       	std	Y+1, r18	; 0x01
    1170:	30 91 46 01 	lds	r19, 0x0146
    1174:	3a 83       	std	Y+2, r19	; 0x02
    1176:	40 91 47 01 	lds	r20, 0x0147
    117a:	4b 83       	std	Y+3, r20	; 0x03
    117c:	50 91 48 01 	lds	r21, 0x0148
    1180:	5c 83       	std	Y+4, r21	; 0x04
    1182:	60 91 3f 01 	lds	r22, 0x013F
    1186:	6b 8b       	std	Y+19, r22	; 0x13
    1188:	70 91 40 01 	lds	r23, 0x0140
    118c:	7c 8b       	std	Y+20, r23	; 0x14
    118e:	80 91 3d 01 	lds	r24, 0x013D
    1192:	89 8b       	std	Y+17, r24	; 0x11
    1194:	90 91 3e 01 	lds	r25, 0x013E
    1198:	9a 8b       	std	Y+18, r25	; 0x12
    119a:	e0 91 41 01 	lds	r30, 0x0141
    119e:	ed 8b       	std	Y+21, r30	; 0x15
    11a0:	f0 91 42 01 	lds	r31, 0x0142
    11a4:	fe 8b       	std	Y+22, r31	; 0x16
    11a6:	20 91 43 01 	lds	r18, 0x0143
    11aa:	2f 8b       	std	Y+23, r18	; 0x17
    11ac:	30 91 44 01 	lds	r19, 0x0144
    11b0:	38 8f       	std	Y+24, r19	; 0x18
    11b2:	40 91 00 01 	lds	r20, 0x0100
    11b6:	4d 83       	std	Y+5, r20	; 0x05
    11b8:	50 91 01 01 	lds	r21, 0x0101
    11bc:	5e 83       	std	Y+6, r21	; 0x06
    11be:	20 90 02 01 	lds	r2, 0x0102
    11c2:	30 90 03 01 	lds	r3, 0x0103
    11c6:	60 91 3b 01 	lds	r22, 0x013B
    11ca:	69 8f       	std	Y+25, r22	; 0x19
    11cc:	70 91 3c 01 	lds	r23, 0x013C
    11d0:	7a 8f       	std	Y+26, r23	; 0x1a
    11d2:	80 91 39 01 	lds	r24, 0x0139
    11d6:	90 91 3a 01 	lds	r25, 0x013A
    11da:	98 8b       	std	Y+16, r25	; 0x10
    11dc:	8f 87       	std	Y+15, r24	; 0x0f
    11de:	18 86       	std	Y+8, r1	; 0x08
    11e0:	1f 82       	std	Y+7, r1	; 0x07
    11e2:	c1 2c       	mov	r12, r1
    11e4:	d1 2c       	mov	r13, r1
    11e6:	b9 c0       	rjmp	.+370    	; 0x135a <determine_blobs+0x2b6>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
    11e8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    11ea:	fc 8d       	ldd	r31, Y+28	; 0x1c
    11ec:	e4 15       	cp	r30, r4
    11ee:	f5 05       	cpc	r31, r5
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <determine_blobs+0x150>
    11f2:	9c c0       	rjmp	.+312    	; 0x132c <determine_blobs+0x288>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    11f4:	e9 85       	ldd	r30, Y+9	; 0x09
    11f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1204:	6b 01       	movw	r12, r22
    1206:	7c 01       	movw	r14, r24
    1208:	f3 01       	movw	r30, r6
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	c7 01       	movw	r24, r14
    121c:	b6 01       	movw	r22, r12
    121e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    1222:	c6 2e       	mov	r12, r22
    1224:	d7 2e       	mov	r13, r23
    1226:	e8 2e       	mov	r14, r24
    1228:	f9 2e       	mov	r15, r25
    122a:	eb 85       	ldd	r30, Y+11	; 0x0b
    122c:	fc 85       	ldd	r31, Y+12	; 0x0c
    122e:	60 81       	ld	r22, Z
    1230:	71 81       	ldd	r23, Z+1	; 0x01
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    123a:	4b 01       	movw	r8, r22
    123c:	5c 01       	movw	r10, r24
    123e:	f8 01       	movw	r30, r16
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	c5 01       	movw	r24, r10
    1252:	b4 01       	movw	r22, r8
    1254:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    1258:	86 2e       	mov	r8, r22
    125a:	97 2e       	mov	r9, r23
    125c:	a8 2e       	mov	r10, r24
    125e:	b9 2e       	mov	r11, r25
    1260:	2c 2d       	mov	r18, r12
    1262:	3d 2d       	mov	r19, r13
    1264:	4e 2d       	mov	r20, r14
    1266:	5f 2d       	mov	r21, r15
    1268:	6c 2d       	mov	r22, r12
    126a:	7d 2d       	mov	r23, r13
    126c:	8e 2d       	mov	r24, r14
    126e:	9f 2d       	mov	r25, r15
    1270:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1274:	6b 01       	movw	r12, r22
    1276:	7c 01       	movw	r14, r24
    1278:	28 2d       	mov	r18, r8
    127a:	39 2d       	mov	r19, r9
    127c:	4a 2d       	mov	r20, r10
    127e:	5b 2d       	mov	r21, r11
    1280:	68 2d       	mov	r22, r8
    1282:	79 2d       	mov	r23, r9
    1284:	8a 2d       	mov	r24, r10
    1286:	9b 2d       	mov	r25, r11
    1288:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	c7 01       	movw	r24, r14
    1292:	b6 01       	movw	r22, r12
    1294:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    1298:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <sqrt>
    129c:	86 2e       	mov	r8, r22
    129e:	97 2e       	mov	r9, r23
    12a0:	a8 2e       	mov	r10, r24
    12a2:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
    12a4:	79 81       	ldd	r23, Y+1	; 0x01
    12a6:	6a 81       	ldd	r22, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	27 2f       	mov	r18, r23
    12ae:	36 2f       	mov	r19, r22
    12b0:	49 2f       	mov	r20, r25
    12b2:	58 2f       	mov	r21, r24
    12b4:	68 2d       	mov	r22, r8
    12b6:	79 2d       	mov	r23, r9
    12b8:	8a 2d       	mov	r24, r10
    12ba:	9b 2d       	mov	r25, r11
    12bc:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__gesf2>
    12c0:	18 16       	cp	r1, r24
    12c2:	d4 f4       	brge	.+52     	; 0x12f8 <determine_blobs+0x254>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	68 2d       	mov	r22, r8
    12ce:	79 2d       	mov	r23, r9
    12d0:	8a 2d       	mov	r24, r10
    12d2:	9b 2d       	mov	r25, r11
    12d4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    12d8:	6d 8b       	std	Y+21, r22	; 0x15
    12da:	7e 8b       	std	Y+22, r23	; 0x16
    12dc:	8f 8b       	std	Y+23, r24	; 0x17
    12de:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
    12e0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    12e2:	f9 8b       	std	Y+17, r31	; 0x11
    12e4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    12e6:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
    12e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    12ea:	3b 8b       	std	Y+19, r19	; 0x13
    12ec:	4e 85       	ldd	r20, Y+14	; 0x0e
    12ee:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
    12f0:	89 82       	std	Y+1, r8	; 0x01
    12f2:	9a 82       	std	Y+2, r9	; 0x02
    12f4:	ab 82       	std	Y+3, r10	; 0x03
    12f6:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
    12f8:	7d 81       	ldd	r23, Y+5	; 0x05
    12fa:	6e 81       	ldd	r22, Y+6	; 0x06
    12fc:	27 2f       	mov	r18, r23
    12fe:	36 2f       	mov	r19, r22
    1300:	42 2d       	mov	r20, r2
    1302:	53 2d       	mov	r21, r3
    1304:	68 2d       	mov	r22, r8
    1306:	79 2d       	mov	r23, r9
    1308:	8a 2d       	mov	r24, r10
    130a:	9b 2d       	mov	r25, r11
    130c:	0e 94 2f 14 	call	0x285e	; 0x285e <__cmpsf2>
    1310:	88 23       	and	r24, r24
    1312:	64 f4       	brge	.+24     	; 0x132c <determine_blobs+0x288>
						distmin = dist;
						close1 = i;
						close2 = j;
    1314:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1316:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1318:	78 8b       	std	Y+16, r23	; 0x10
    131a:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    131c:	7d 85       	ldd	r23, Y+13	; 0x0d
    131e:	79 8f       	std	Y+25, r23	; 0x19
    1320:	8e 85       	ldd	r24, Y+14	; 0x0e
    1322:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
    1324:	8d 82       	std	Y+5, r8	; 0x05
    1326:	9e 82       	std	Y+6, r9	; 0x06
    1328:	2a 2c       	mov	r2, r10
    132a:	3b 2c       	mov	r3, r11
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	69 0e       	add	r6, r25
    1330:	71 1c       	adc	r7, r1
    1332:	0e 5f       	subi	r16, 0xFE	; 254
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
    1336:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1338:	fc 8d       	ldd	r31, Y+28	; 0x1c
    133a:	31 96       	adiw	r30, 0x01	; 1
    133c:	fc 8f       	std	Y+28, r31	; 0x1c
    133e:	eb 8f       	std	Y+27, r30	; 0x1b
    1340:	34 97       	sbiw	r30, 0x04	; 4
    1342:	09 f0       	breq	.+2      	; 0x1346 <determine_blobs+0x2a2>
    1344:	51 cf       	rjmp	.-350    	; 0x11e8 <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
    1346:	2f 81       	ldd	r18, Y+7	; 0x07
    1348:	38 85       	ldd	r19, Y+8	; 0x08
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	38 87       	std	Y+8, r19	; 0x08
    1350:	2f 83       	std	Y+7, r18	; 0x07
    1352:	69 01       	movw	r12, r18
    1354:	24 30       	cpi	r18, 0x04	; 4
    1356:	31 05       	cpc	r19, r1
    1358:	39 f1       	breq	.+78     	; 0x13a8 <determine_blobs+0x304>
				for (int j = i; j < 4; j++) {
    135a:	34 e0       	ldi	r19, 0x04	; 4
    135c:	c3 16       	cp	r12, r19
    135e:	d1 04       	cpc	r13, r1
    1360:	94 f7       	brge	.-28     	; 0x1346 <determine_blobs+0x2a2>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    1362:	86 01       	movw	r16, r12
    1364:	0f 5f       	subi	r16, 0xFF	; 255
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
    1368:	00 0f       	add	r16, r16
    136a:	11 1f       	adc	r17, r17
    136c:	0f 2e       	mov	r0, r31
    136e:	f5 e5       	ldi	r31, 0x55	; 85
    1370:	ef 2e       	mov	r14, r31
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	ff 2e       	mov	r15, r31
    1376:	f0 2d       	mov	r31, r0
    1378:	e0 0e       	add	r14, r16
    137a:	f1 1e       	adc	r15, r17
    137c:	03 5b       	subi	r16, 0xB3	; 179
    137e:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    1380:	c6 01       	movw	r24, r12
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	ac 01       	movw	r20, r24
    1388:	4b 5a       	subi	r20, 0xAB	; 171
    138a:	5e 4f       	sbci	r21, 0xFE	; 254
    138c:	5a 87       	std	Y+10, r21	; 0x0a
    138e:	49 87       	std	Y+9, r20	; 0x09
    1390:	bc 01       	movw	r22, r24
    1392:	63 5b       	subi	r22, 0xB3	; 179
    1394:	7e 4f       	sbci	r23, 0xFE	; 254
    1396:	7c 87       	std	Y+12, r23	; 0x0c
    1398:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    139a:	cd 86       	std	Y+13, r12	; 0x0d
    139c:	de 86       	std	Y+14, r13	; 0x0e
    139e:	dc 8e       	std	Y+28, r13	; 0x1c
    13a0:	cb 8e       	std	Y+27, r12	; 0x1b
    13a2:	26 01       	movw	r4, r12
    13a4:	37 01       	movw	r6, r14
    13a6:	c7 cf       	rjmp	.-114    	; 0x1336 <determine_blobs+0x292>
    13a8:	88 2d       	mov	r24, r8
    13aa:	99 2d       	mov	r25, r9
    13ac:	aa 2d       	mov	r26, r10
    13ae:	bb 2d       	mov	r27, r11
    13b0:	80 93 49 01 	sts	0x0149, r24
    13b4:	90 93 4a 01 	sts	0x014A, r25
    13b8:	a0 93 4b 01 	sts	0x014B, r26
    13bc:	b0 93 4c 01 	sts	0x014C, r27
    13c0:	59 81       	ldd	r21, Y+1	; 0x01
    13c2:	4a 81       	ldd	r20, Y+2	; 0x02
    13c4:	3b 81       	ldd	r19, Y+3	; 0x03
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	85 2f       	mov	r24, r21
    13ca:	94 2f       	mov	r25, r20
    13cc:	a3 2f       	mov	r26, r19
    13ce:	b2 2f       	mov	r27, r18
    13d0:	80 93 45 01 	sts	0x0145, r24
    13d4:	90 93 46 01 	sts	0x0146, r25
    13d8:	a0 93 47 01 	sts	0x0147, r26
    13dc:	b0 93 48 01 	sts	0x0148, r27
    13e0:	7b 89       	ldd	r23, Y+19	; 0x13
    13e2:	70 93 3f 01 	sts	0x013F, r23
    13e6:	8c 89       	ldd	r24, Y+20	; 0x14
    13e8:	80 93 40 01 	sts	0x0140, r24
    13ec:	99 89       	ldd	r25, Y+17	; 0x11
    13ee:	90 93 3d 01 	sts	0x013D, r25
    13f2:	ea 89       	ldd	r30, Y+18	; 0x12
    13f4:	e0 93 3e 01 	sts	0x013E, r30
    13f8:	5d 89       	ldd	r21, Y+21	; 0x15
    13fa:	4e 89       	ldd	r20, Y+22	; 0x16
    13fc:	3f 89       	ldd	r19, Y+23	; 0x17
    13fe:	28 8d       	ldd	r18, Y+24	; 0x18
    1400:	85 2f       	mov	r24, r21
    1402:	94 2f       	mov	r25, r20
    1404:	a3 2f       	mov	r26, r19
    1406:	b2 2f       	mov	r27, r18
    1408:	80 93 41 01 	sts	0x0141, r24
    140c:	90 93 42 01 	sts	0x0142, r25
    1410:	a0 93 43 01 	sts	0x0143, r26
    1414:	b0 93 44 01 	sts	0x0144, r27
    1418:	5d 81       	ldd	r21, Y+5	; 0x05
    141a:	4e 81       	ldd	r20, Y+6	; 0x06
    141c:	85 2f       	mov	r24, r21
    141e:	94 2f       	mov	r25, r20
    1420:	a2 2d       	mov	r26, r2
    1422:	b3 2d       	mov	r27, r3
    1424:	80 93 00 01 	sts	0x0100, r24
    1428:	90 93 01 01 	sts	0x0101, r25
    142c:	a0 93 02 01 	sts	0x0102, r26
    1430:	b0 93 03 01 	sts	0x0103, r27
    1434:	f9 8d       	ldd	r31, Y+25	; 0x19
    1436:	f0 93 3b 01 	sts	0x013B, r31
    143a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    143c:	20 93 3c 01 	sts	0x013C, r18
    1440:	3f 85       	ldd	r19, Y+15	; 0x0f
    1442:	30 93 39 01 	sts	0x0139, r19
    1446:	48 89       	ldd	r20, Y+16	; 0x10
    1448:	40 93 3a 01 	sts	0x013A, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
    144c:	80 91 3f 01 	lds	r24, 0x013F
    1450:	90 91 40 01 	lds	r25, 0x0140
    1454:	20 91 3b 01 	lds	r18, 0x013B
    1458:	30 91 3c 01 	lds	r19, 0x013C
    145c:	82 17       	cp	r24, r18
    145e:	93 07       	cpc	r25, r19
    1460:	19 f5       	brne	.+70     	; 0x14a8 <determine_blobs+0x404>
				top = far1;
    1462:	90 93 7c 01 	sts	0x017C, r25
    1466:	80 93 7b 01 	sts	0x017B, r24
				bottom = far2;
    146a:	40 91 3d 01 	lds	r20, 0x013D
    146e:	50 91 3e 01 	lds	r21, 0x013E
    1472:	50 93 7a 01 	sts	0x017A, r21
    1476:	40 93 79 01 	sts	0x0179, r20
				right = close2;
    147a:	20 91 39 01 	lds	r18, 0x0139
    147e:	30 91 3a 01 	lds	r19, 0x013A
    1482:	30 93 76 01 	sts	0x0176, r19
    1486:	20 93 75 01 	sts	0x0175, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
    148a:	69 e0       	ldi	r22, 0x09	; 9
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	fb 01       	movw	r30, r22
    1490:	e8 1b       	sub	r30, r24
    1492:	f9 0b       	sbc	r31, r25
    1494:	cf 01       	movw	r24, r30
    1496:	84 1b       	sub	r24, r20
    1498:	95 0b       	sbc	r25, r21
    149a:	82 1b       	sub	r24, r18
    149c:	93 0b       	sbc	r25, r19
    149e:	90 93 78 01 	sts	0x0178, r25
    14a2:	80 93 77 01 	sts	0x0177, r24
    14a6:	66 c0       	rjmp	.+204    	; 0x1574 <determine_blobs+0x4d0>
			}
			else if (far1 == close2) {
    14a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    14aa:	58 89       	ldd	r21, Y+16	; 0x10
    14ac:	84 17       	cp	r24, r20
    14ae:	95 07       	cpc	r25, r21
    14b0:	f9 f4       	brne	.+62     	; 0x14f0 <determine_blobs+0x44c>
				top = far1;
    14b2:	90 93 7c 01 	sts	0x017C, r25
    14b6:	80 93 7b 01 	sts	0x017B, r24
				bottom = far2;
    14ba:	40 91 3d 01 	lds	r20, 0x013D
    14be:	50 91 3e 01 	lds	r21, 0x013E
    14c2:	50 93 7a 01 	sts	0x017A, r21
    14c6:	40 93 79 01 	sts	0x0179, r20
				right = close1;
    14ca:	30 93 76 01 	sts	0x0176, r19
    14ce:	20 93 75 01 	sts	0x0175, r18
				left = 9 - top - bottom - right;
    14d2:	69 e0       	ldi	r22, 0x09	; 9
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	fb 01       	movw	r30, r22
    14d8:	e8 1b       	sub	r30, r24
    14da:	f9 0b       	sbc	r31, r25
    14dc:	cf 01       	movw	r24, r30
    14de:	84 1b       	sub	r24, r20
    14e0:	95 0b       	sbc	r25, r21
    14e2:	82 1b       	sub	r24, r18
    14e4:	93 0b       	sbc	r25, r19
    14e6:	90 93 78 01 	sts	0x0178, r25
    14ea:	80 93 77 01 	sts	0x0177, r24
    14ee:	42 c0       	rjmp	.+132    	; 0x1574 <determine_blobs+0x4d0>
			}
			else if (far2 == close1) {
    14f0:	40 91 3d 01 	lds	r20, 0x013D
    14f4:	50 91 3e 01 	lds	r21, 0x013E
    14f8:	24 17       	cp	r18, r20
    14fa:	35 07       	cpc	r19, r21
    14fc:	01 f5       	brne	.+64     	; 0x153e <determine_blobs+0x49a>
				top = far2;
    14fe:	30 93 7c 01 	sts	0x017C, r19
    1502:	20 93 7b 01 	sts	0x017B, r18
				bottom = far1;
    1506:	90 93 7a 01 	sts	0x017A, r25
    150a:	80 93 79 01 	sts	0x0179, r24
				right = close2;
    150e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1510:	58 89       	ldd	r21, Y+16	; 0x10
    1512:	50 93 76 01 	sts	0x0176, r21
    1516:	40 93 75 01 	sts	0x0175, r20
				left = 9 - top - bottom - right;
    151a:	49 e0       	ldi	r20, 0x09	; 9
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	ba 01       	movw	r22, r20
    1520:	62 1b       	sub	r22, r18
    1522:	73 0b       	sbc	r23, r19
    1524:	fb 01       	movw	r30, r22
    1526:	e8 1b       	sub	r30, r24
    1528:	f9 0b       	sbc	r31, r25
    152a:	cf 01       	movw	r24, r30
    152c:	2f 85       	ldd	r18, Y+15	; 0x0f
    152e:	38 89       	ldd	r19, Y+16	; 0x10
    1530:	82 1b       	sub	r24, r18
    1532:	93 0b       	sbc	r25, r19
    1534:	90 93 78 01 	sts	0x0178, r25
    1538:	80 93 77 01 	sts	0x0177, r24
    153c:	1b c0       	rjmp	.+54     	; 0x1574 <determine_blobs+0x4d0>
			}
			else {
				top = far2;
    153e:	50 93 7c 01 	sts	0x017C, r21
    1542:	40 93 7b 01 	sts	0x017B, r20
				bottom = far1;
    1546:	90 93 7a 01 	sts	0x017A, r25
    154a:	80 93 79 01 	sts	0x0179, r24
				right = close1;
    154e:	30 93 76 01 	sts	0x0176, r19
    1552:	20 93 75 01 	sts	0x0175, r18
				left = 9 - top - bottom - right;
    1556:	69 e0       	ldi	r22, 0x09	; 9
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	fb 01       	movw	r30, r22
    155c:	e4 1b       	sub	r30, r20
    155e:	f5 0b       	sbc	r31, r21
    1560:	bf 01       	movw	r22, r30
    1562:	68 1b       	sub	r22, r24
    1564:	79 0b       	sbc	r23, r25
    1566:	cb 01       	movw	r24, r22
    1568:	82 1b       	sub	r24, r18
    156a:	93 0b       	sbc	r25, r19
    156c:	90 93 78 01 	sts	0x0178, r25
    1570:	80 93 77 01 	sts	0x0177, r24
			}
		}
	}
	return 1;
}
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	6c 96       	adiw	r28, 0x1c	; 28
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	3f 90       	pop	r3
    15a4:	2f 90       	pop	r2
    15a6:	08 95       	ret

000015a8 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    15a8:	2f 92       	push	r2
    15aa:	3f 92       	push	r3
    15ac:	4f 92       	push	r4
    15ae:	5f 92       	push	r5
    15b0:	6f 92       	push	r6
    15b2:	7f 92       	push	r7
    15b4:	8f 92       	push	r8
    15b6:	9f 92       	push	r9
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2d 97       	sbiw	r28, 0x0d	; 13
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	8c 01       	movw	r16, r24
	numlost = 0;
    15de:	10 92 38 01 	sts	0x0138, r1
    15e2:	10 92 37 01 	sts	0x0137, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    15e6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    15ea:	e0 90 7b 01 	lds	r14, 0x017B
    15ee:	f0 90 7c 01 	lds	r15, 0x017C
    15f2:	f7 01       	movw	r30, r14
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	eb 5a       	subi	r30, 0xAB	; 171
    15fa:	fe 4f       	sbci	r31, 0xFE	; 254
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
    1600:	3a 83       	std	Y+2, r19	; 0x02
    1602:	29 83       	std	Y+1, r18	; 0x01
    1604:	2f 3f       	cpi	r18, 0xFF	; 255
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	38 07       	cpc	r19, r24
    160a:	08 f0       	brcs	.+2      	; 0x160e <localize+0x66>
    160c:	ea c2       	rjmp	.+1492   	; 0x1be2 <localize+0x63a>
    160e:	a0 90 79 01 	lds	r10, 0x0179
    1612:	b0 90 7a 01 	lds	r11, 0x017A
    1616:	f5 01       	movw	r30, r10
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	eb 5a       	subi	r30, 0xAB	; 171
    161e:	fe 4f       	sbci	r31, 0xFE	; 254
    1620:	c0 80       	ld	r12, Z
    1622:	d1 80       	ldd	r13, Z+1	; 0x01
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	c9 16       	cp	r12, r25
    1628:	93 e0       	ldi	r25, 0x03	; 3
    162a:	d9 06       	cpc	r13, r25
    162c:	08 f0       	brcs	.+2      	; 0x1630 <localize+0x88>
    162e:	d9 c2       	rjmp	.+1458   	; 0x1be2 <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    1630:	b9 01       	movw	r22, r18
    1632:	6c 0d       	add	r22, r12
    1634:	7d 1d       	adc	r23, r13
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    164a:	20 91 08 01 	lds	r18, 0x0108
    164e:	30 91 09 01 	lds	r19, 0x0109
    1652:	40 91 0a 01 	lds	r20, 0x010A
    1656:	50 91 0b 01 	lds	r21, 0x010B
    165a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    165e:	6d 83       	std	Y+5, r22	; 0x05
    1660:	7e 83       	std	Y+6, r23	; 0x06
    1662:	8f 83       	std	Y+7, r24	; 0x07
    1664:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    1666:	f7 01       	movw	r30, r14
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e3 5b       	subi	r30, 0xB3	; 179
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	e0 80       	ld	r14, Z
    1672:	f1 80       	ldd	r15, Z+1	; 0x01
    1674:	f5 01       	movw	r30, r10
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	e3 5b       	subi	r30, 0xB3	; 179
    167c:	fe 4f       	sbci	r31, 0xFE	; 254
    167e:	a0 80       	ld	r10, Z
    1680:	b1 80       	ldd	r11, Z+1	; 0x01
    1682:	b5 01       	movw	r22, r10
    1684:	6e 0d       	add	r22, r14
    1686:	7f 1d       	adc	r23, r15
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    169c:	20 91 04 01 	lds	r18, 0x0104
    16a0:	30 91 05 01 	lds	r19, 0x0105
    16a4:	40 91 06 01 	lds	r20, 0x0106
    16a8:	50 91 07 01 	lds	r21, 0x0107
    16ac:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    16b0:	69 87       	std	Y+9, r22	; 0x09
    16b2:	7a 87       	std	Y+10, r23	; 0x0a
    16b4:	28 2e       	mov	r2, r24
    16b6:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    16b8:	b7 01       	movw	r22, r14
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    16c2:	2b 01       	movw	r4, r22
    16c4:	3c 01       	movw	r6, r24
    16c6:	b5 01       	movw	r22, r10
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    16d0:	9b 01       	movw	r18, r22
    16d2:	ac 01       	movw	r20, r24
    16d4:	c3 01       	movw	r24, r6
    16d6:	b2 01       	movw	r22, r4
    16d8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    16dc:	4b 01       	movw	r8, r22
    16de:	5c 01       	movw	r10, r24
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	bf 01       	movw	r22, r30
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    16ee:	2b 01       	movw	r4, r22
    16f0:	3c 01       	movw	r6, r24
    16f2:	b6 01       	movw	r22, r12
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	c3 01       	movw	r24, r6
    1702:	b2 01       	movw	r22, r4
    1704:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    1708:	a5 01       	movw	r20, r10
    170a:	94 01       	movw	r18, r8
    170c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <atan2>
    1710:	4b 01       	movw	r8, r22
    1712:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    1714:	7d 81       	ldd	r23, Y+5	; 0x05
    1716:	6e 81       	ldd	r22, Y+6	; 0x06
    1718:	9f 81       	ldd	r25, Y+7	; 0x07
    171a:	88 85       	ldd	r24, Y+8	; 0x08
    171c:	27 2f       	mov	r18, r23
    171e:	36 2f       	mov	r19, r22
    1720:	49 2f       	mov	r20, r25
    1722:	58 2f       	mov	r21, r24
    1724:	b9 85       	ldd	r27, Y+9	; 0x09
    1726:	aa 85       	ldd	r26, Y+10	; 0x0a
    1728:	6b 2f       	mov	r22, r27
    172a:	7a 2f       	mov	r23, r26
    172c:	82 2d       	mov	r24, r2
    172e:	93 2d       	mov	r25, r3
    1730:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <atan2>
    1734:	2b 01       	movw	r4, r22
    1736:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    1738:	7d 81       	ldd	r23, Y+5	; 0x05
    173a:	6e 81       	ldd	r22, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	88 85       	ldd	r24, Y+8	; 0x08
    1740:	27 2f       	mov	r18, r23
    1742:	36 2f       	mov	r19, r22
    1744:	49 2f       	mov	r20, r25
    1746:	58 2f       	mov	r21, r24
    1748:	67 2f       	mov	r22, r23
    174a:	73 2f       	mov	r23, r19
    174c:	89 2f       	mov	r24, r25
    174e:	95 2f       	mov	r25, r21
    1750:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1754:	6b 01       	movw	r12, r22
    1756:	7c 01       	movw	r14, r24
    1758:	79 85       	ldd	r23, Y+9	; 0x09
    175a:	6a 85       	ldd	r22, Y+10	; 0x0a
    175c:	27 2f       	mov	r18, r23
    175e:	36 2f       	mov	r19, r22
    1760:	42 2d       	mov	r20, r2
    1762:	53 2d       	mov	r21, r3
    1764:	67 2f       	mov	r22, r23
    1766:	73 2f       	mov	r23, r19
    1768:	82 2d       	mov	r24, r2
    176a:	93 2d       	mov	r25, r3
    176c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    177c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <sqrt>
    1780:	6b 01       	movw	r12, r22
    1782:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	60 91 5d 01 	lds	r22, 0x015D
    178e:	70 91 5e 01 	lds	r23, 0x015E
    1792:	80 91 5f 01 	lds	r24, 0x015F
    1796:	90 91 60 01 	lds	r25, 0x0160
    179a:	0e 94 2f 14 	call	0x285e	; 0x285e <__cmpsf2>
    179e:	81 11       	cpse	r24, r1
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <localize+0x20a>
			ai1 = angle;
    17a2:	80 92 5d 01 	sts	0x015D, r8
    17a6:	90 92 5e 01 	sts	0x015E, r9
    17aa:	a0 92 5f 01 	sts	0x015F, r10
    17ae:	b0 92 60 01 	sts	0x0160, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    17b2:	23 e3       	ldi	r18, 0x33	; 51
    17b4:	33 e3       	ldi	r19, 0x33	; 51
    17b6:	43 e7       	ldi	r20, 0x73	; 115
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	60 91 5d 01 	lds	r22, 0x015D
    17be:	70 91 5e 01 	lds	r23, 0x015E
    17c2:	80 91 5f 01 	lds	r24, 0x015F
    17c6:	90 91 60 01 	lds	r25, 0x0160
    17ca:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    17ce:	4b 01       	movw	r8, r22
    17d0:	5c 01       	movw	r10, r24
    17d2:	20 ed       	ldi	r18, 0xD0	; 208
    17d4:	3c ec       	ldi	r19, 0xCC	; 204
    17d6:	4c e4       	ldi	r20, 0x4C	; 76
    17d8:	5d e3       	ldi	r21, 0x3D	; 61
    17da:	60 91 69 01 	lds	r22, 0x0169
    17de:	70 91 6a 01 	lds	r23, 0x016A
    17e2:	80 91 6b 01 	lds	r24, 0x016B
    17e6:	90 91 6c 01 	lds	r25, 0x016C
    17ea:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    17ee:	9b 01       	movw	r18, r22
    17f0:	ac 01       	movw	r20, r24
    17f2:	c5 01       	movw	r24, r10
    17f4:	b4 01       	movw	r22, r8
    17f6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	44 e3       	ldi	r20, 0x34	; 52
    1800:	53 e4       	ldi	r21, 0x43	; 67
    1802:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1806:	23 ec       	ldi	r18, 0xC3	; 195
    1808:	35 ef       	ldi	r19, 0xF5	; 245
    180a:	48 e4       	ldi	r20, 0x48	; 72
    180c:	50 e4       	ldi	r21, 0x40	; 64
    180e:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
    1812:	86 2e       	mov	r8, r22
    1814:	97 2e       	mov	r9, r23
    1816:	a8 2e       	mov	r10, r24
    1818:	b9 2e       	mov	r11, r25
    181a:	f8 01       	movw	r30, r16
    181c:	80 86       	std	Z+8, r8	; 0x08
    181e:	91 86       	std	Z+9, r9	; 0x09
    1820:	a2 86       	std	Z+10, r10	; 0x0a
    1822:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1824:	23 ec       	ldi	r18, 0xC3	; 195
    1826:	35 ef       	ldi	r19, 0xF5	; 245
    1828:	48 e4       	ldi	r20, 0x48	; 72
    182a:	50 e4       	ldi	r21, 0x40	; 64
    182c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	44 e3       	ldi	r20, 0x34	; 52
    1836:	53 e4       	ldi	r21, 0x43	; 67
    1838:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	62 e5       	ldi	r22, 0x52	; 82
    1842:	78 eb       	ldi	r23, 0xB8	; 184
    1844:	86 e9       	ldi	r24, 0x96	; 150
    1846:	90 e4       	ldi	r25, 0x40	; 64
    1848:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    184c:	a3 01       	movw	r20, r6
    184e:	92 01       	movw	r18, r4
    1850:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__subsf3>
    1854:	86 2e       	mov	r8, r22
    1856:	97 2e       	mov	r9, r23
    1858:	a8 2e       	mov	r10, r24
    185a:	b9 2e       	mov	r11, r25
    185c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <sin>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	c7 01       	movw	r24, r14
    1866:	b6 01       	movw	r22, r12
    1868:	90 58       	subi	r25, 0x80	; 128
    186a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    186e:	29 e3       	ldi	r18, 0x39	; 57
    1870:	3e e8       	ldi	r19, 0x8E	; 142
    1872:	43 ea       	ldi	r20, 0xA3	; 163
    1874:	5e e3       	ldi	r21, 0x3E	; 62
    1876:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    187a:	69 83       	std	Y+1, r22	; 0x01
    187c:	7b 87       	std	Y+11, r23	; 0x0b
    187e:	8d 87       	std	Y+13, r24	; 0x0d
    1880:	9c 87       	std	Y+12, r25	; 0x0c
    1882:	47 2f       	mov	r20, r23
    1884:	38 2f       	mov	r19, r24
    1886:	29 2f       	mov	r18, r25
    1888:	86 2f       	mov	r24, r22
    188a:	94 2f       	mov	r25, r20
    188c:	a3 2f       	mov	r26, r19
    188e:	b2 2f       	mov	r27, r18
    1890:	80 93 71 01 	sts	0x0171, r24
    1894:	90 93 72 01 	sts	0x0172, r25
    1898:	a0 93 73 01 	sts	0x0173, r26
    189c:	b0 93 74 01 	sts	0x0174, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    18a0:	68 2d       	mov	r22, r8
    18a2:	79 2d       	mov	r23, r9
    18a4:	8a 2d       	mov	r24, r10
    18a6:	9b 2d       	mov	r25, r11
    18a8:	0e 94 33 14 	call	0x2866	; 0x2866 <cos>
    18ac:	a7 01       	movw	r20, r14
    18ae:	96 01       	movw	r18, r12
    18b0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    18b4:	29 e8       	ldi	r18, 0x89	; 137
    18b6:	3a ed       	ldi	r19, 0xDA	; 218
    18b8:	45 e9       	ldi	r20, 0x95	; 149
    18ba:	5e e3       	ldi	r21, 0x3E	; 62
    18bc:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    18c0:	86 2e       	mov	r8, r22
    18c2:	97 2e       	mov	r9, r23
    18c4:	a8 2e       	mov	r10, r24
    18c6:	b9 2e       	mov	r11, r25
    18c8:	86 2f       	mov	r24, r22
    18ca:	99 2d       	mov	r25, r9
    18cc:	aa 2d       	mov	r26, r10
    18ce:	bb 2d       	mov	r27, r11
    18d0:	80 93 6d 01 	sts	0x016D, r24
    18d4:	90 93 6e 01 	sts	0x016E, r25
    18d8:	a0 93 6f 01 	sts	0x016F, r26
    18dc:	b0 93 70 01 	sts	0x0170, r27
		
		if (xi1 == 0 && yi1 == 0) {
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	60 91 65 01 	lds	r22, 0x0165
    18ea:	70 91 66 01 	lds	r23, 0x0166
    18ee:	80 91 67 01 	lds	r24, 0x0167
    18f2:	90 91 68 01 	lds	r25, 0x0168
    18f6:	0e 94 2f 14 	call	0x285e	; 0x285e <__cmpsf2>
    18fa:	81 11       	cpse	r24, r1
    18fc:	2b c0       	rjmp	.+86     	; 0x1954 <localize+0x3ac>
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	60 91 61 01 	lds	r22, 0x0161
    1908:	70 91 62 01 	lds	r23, 0x0162
    190c:	80 91 63 01 	lds	r24, 0x0163
    1910:	90 91 64 01 	lds	r25, 0x0164
    1914:	0e 94 2f 14 	call	0x285e	; 0x285e <__cmpsf2>
    1918:	81 11       	cpse	r24, r1
    191a:	1c c0       	rjmp	.+56     	; 0x1954 <localize+0x3ac>
			xi1 = xi;
    191c:	59 81       	ldd	r21, Y+1	; 0x01
    191e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1920:	3d 85       	ldd	r19, Y+13	; 0x0d
    1922:	2c 85       	ldd	r18, Y+12	; 0x0c
    1924:	85 2f       	mov	r24, r21
    1926:	94 2f       	mov	r25, r20
    1928:	a3 2f       	mov	r26, r19
    192a:	b2 2f       	mov	r27, r18
    192c:	80 93 65 01 	sts	0x0165, r24
    1930:	90 93 66 01 	sts	0x0166, r25
    1934:	a0 93 67 01 	sts	0x0167, r26
    1938:	b0 93 68 01 	sts	0x0168, r27
			yi1 = yi;
    193c:	88 2d       	mov	r24, r8
    193e:	99 2d       	mov	r25, r9
    1940:	aa 2d       	mov	r26, r10
    1942:	bb 2d       	mov	r27, r11
    1944:	80 93 61 01 	sts	0x0161, r24
    1948:	90 93 62 01 	sts	0x0162, r25
    194c:	a0 93 63 01 	sts	0x0163, r26
    1950:	b0 93 64 01 	sts	0x0164, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    1954:	23 e3       	ldi	r18, 0x33	; 51
    1956:	33 e3       	ldi	r19, 0x33	; 51
    1958:	43 e7       	ldi	r20, 0x73	; 115
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	60 91 65 01 	lds	r22, 0x0165
    1960:	70 91 66 01 	lds	r23, 0x0166
    1964:	80 91 67 01 	lds	r24, 0x0167
    1968:	90 91 68 01 	lds	r25, 0x0168
    196c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1970:	4b 01       	movw	r8, r22
    1972:	5c 01       	movw	r10, r24
    1974:	20 ed       	ldi	r18, 0xD0	; 208
    1976:	3c ec       	ldi	r19, 0xCC	; 204
    1978:	4c e4       	ldi	r20, 0x4C	; 76
    197a:	5d e3       	ldi	r21, 0x3D	; 61
    197c:	b9 81       	ldd	r27, Y+1	; 0x01
    197e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1980:	fd 85       	ldd	r31, Y+13	; 0x0d
    1982:	ec 85       	ldd	r30, Y+12	; 0x0c
    1984:	6b 2f       	mov	r22, r27
    1986:	7a 2f       	mov	r23, r26
    1988:	8f 2f       	mov	r24, r31
    198a:	9e 2f       	mov	r25, r30
    198c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	c5 01       	movw	r24, r10
    1996:	b4 01       	movw	r22, r8
    1998:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    199c:	f8 01       	movw	r30, r16
    199e:	60 83       	st	Z, r22
    19a0:	71 83       	std	Z+1, r23	; 0x01
    19a2:	82 83       	std	Z+2, r24	; 0x02
    19a4:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    19a6:	80 90 6d 01 	lds	r8, 0x016D
    19aa:	90 90 6e 01 	lds	r9, 0x016E
    19ae:	a0 90 6f 01 	lds	r10, 0x016F
    19b2:	b0 90 70 01 	lds	r11, 0x0170
    19b6:	23 e3       	ldi	r18, 0x33	; 51
    19b8:	33 e3       	ldi	r19, 0x33	; 51
    19ba:	43 e7       	ldi	r20, 0x73	; 115
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	60 91 61 01 	lds	r22, 0x0161
    19c2:	70 91 62 01 	lds	r23, 0x0162
    19c6:	80 91 63 01 	lds	r24, 0x0163
    19ca:	90 91 64 01 	lds	r25, 0x0164
    19ce:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    19d2:	69 83       	std	Y+1, r22	; 0x01
    19d4:	7a 83       	std	Y+2, r23	; 0x02
    19d6:	8b 83       	std	Y+3, r24	; 0x03
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	20 ed       	ldi	r18, 0xD0	; 208
    19dc:	3c ec       	ldi	r19, 0xCC	; 204
    19de:	4c e4       	ldi	r20, 0x4C	; 76
    19e0:	5d e3       	ldi	r21, 0x3D	; 61
    19e2:	c5 01       	movw	r24, r10
    19e4:	b4 01       	movw	r22, r8
    19e6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	69 81       	ldd	r22, Y+1	; 0x01
    19f0:	7a 81       	ldd	r23, Y+2	; 0x02
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__addsf3>
    19fa:	f8 01       	movw	r30, r16
    19fc:	64 83       	std	Z+4, r22	; 0x04
    19fe:	75 83       	std	Z+5, r23	; 0x05
    1a00:	86 83       	std	Z+6, r24	; 0x06
    1a02:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1a04:	80 91 7b 01 	lds	r24, 0x017B
    1a08:	90 91 7c 01 	lds	r25, 0x017C
    1a0c:	9c 01       	movw	r18, r24
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	3a 83       	std	Y+2, r19	; 0x02
    1a14:	29 83       	std	Y+1, r18	; 0x01
    1a16:	f9 01       	movw	r30, r18
    1a18:	eb 5a       	subi	r30, 0xAB	; 171
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1a28:	f8 01       	movw	r30, r16
    1a2a:	64 87       	std	Z+12, r22	; 0x0c
    1a2c:	75 87       	std	Z+13, r23	; 0x0d
    1a2e:	86 87       	std	Z+14, r24	; 0x0e
    1a30:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1a32:	e9 81       	ldd	r30, Y+1	; 0x01
    1a34:	fa 81       	ldd	r31, Y+2	; 0x02
    1a36:	e3 5b       	subi	r30, 0xB3	; 179
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1a46:	f8 01       	movw	r30, r16
    1a48:	60 8b       	std	Z+16, r22	; 0x10
    1a4a:	71 8b       	std	Z+17, r23	; 0x11
    1a4c:	82 8b       	std	Z+18, r24	; 0x12
    1a4e:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1a50:	80 91 79 01 	lds	r24, 0x0179
    1a54:	90 91 7a 01 	lds	r25, 0x017A
    1a58:	9c 01       	movw	r18, r24
    1a5a:	22 0f       	add	r18, r18
    1a5c:	33 1f       	adc	r19, r19
    1a5e:	3a 83       	std	Y+2, r19	; 0x02
    1a60:	29 83       	std	Y+1, r18	; 0x01
    1a62:	f9 01       	movw	r30, r18
    1a64:	eb 5a       	subi	r30, 0xAB	; 171
    1a66:	fe 4f       	sbci	r31, 0xFE	; 254
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1a74:	f8 01       	movw	r30, r16
    1a76:	64 8b       	std	Z+20, r22	; 0x14
    1a78:	75 8b       	std	Z+21, r23	; 0x15
    1a7a:	86 8b       	std	Z+22, r24	; 0x16
    1a7c:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a80:	fa 81       	ldd	r31, Y+2	; 0x02
    1a82:	e3 5b       	subi	r30, 0xB3	; 179
    1a84:	fe 4f       	sbci	r31, 0xFE	; 254
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1a92:	f8 01       	movw	r30, r16
    1a94:	60 8f       	std	Z+24, r22	; 0x18
    1a96:	71 8f       	std	Z+25, r23	; 0x19
    1a98:	82 8f       	std	Z+26, r24	; 0x1a
    1a9a:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1a9c:	80 91 75 01 	lds	r24, 0x0175
    1aa0:	90 91 76 01 	lds	r25, 0x0176
    1aa4:	9c 01       	movw	r18, r24
    1aa6:	22 0f       	add	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	3a 83       	std	Y+2, r19	; 0x02
    1aac:	29 83       	std	Y+1, r18	; 0x01
    1aae:	f9 01       	movw	r30, r18
    1ab0:	eb 5a       	subi	r30, 0xAB	; 171
    1ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	64 8f       	std	Z+28, r22	; 0x1c
    1ac4:	75 8f       	std	Z+29, r23	; 0x1d
    1ac6:	86 8f       	std	Z+30, r24	; 0x1e
    1ac8:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	e3 5b       	subi	r30, 0xB3	; 179
    1ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	60 a3       	std	Z+32, r22	; 0x20
    1ae2:	71 a3       	std	Z+33, r23	; 0x21
    1ae4:	82 a3       	std	Z+34, r24	; 0x22
    1ae6:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1ae8:	80 91 77 01 	lds	r24, 0x0177
    1aec:	90 91 78 01 	lds	r25, 0x0178
    1af0:	9c 01       	movw	r18, r24
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	3a 83       	std	Y+2, r19	; 0x02
    1af8:	29 83       	std	Y+1, r18	; 0x01
    1afa:	f9 01       	movw	r30, r18
    1afc:	eb 5a       	subi	r30, 0xAB	; 171
    1afe:	fe 4f       	sbci	r31, 0xFE	; 254
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	64 a3       	std	Z+36, r22	; 0x24
    1b10:	75 a3       	std	Z+37, r23	; 0x25
    1b12:	86 a3       	std	Z+38, r24	; 0x26
    1b14:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	e3 5b       	subi	r30, 0xB3	; 179
    1b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__floatunsisf>
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	60 a7       	std	Z+40, r22	; 0x28
    1b2e:	71 a7       	std	Z+41, r23	; 0x29
    1b30:	82 a7       	std	Z+42, r24	; 0x2a
    1b32:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	44 e3       	ldi	r20, 0x34	; 52
    1b3a:	53 e4       	ldi	r21, 0x43	; 67
    1b3c:	c3 01       	movw	r24, r6
    1b3e:	b2 01       	movw	r22, r4
    1b40:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__mulsf3>
    1b44:	23 ec       	ldi	r18, 0xC3	; 195
    1b46:	35 ef       	ldi	r19, 0xF5	; 245
    1b48:	48 e4       	ldi	r20, 0x48	; 72
    1b4a:	50 e4       	ldi	r21, 0x40	; 64
    1b4c:	0e 94 36 14 	call	0x286c	; 0x286c <__divsf3>
    1b50:	f8 01       	movw	r30, r16
    1b52:	64 a7       	std	Z+44, r22	; 0x2c
    1b54:	75 a7       	std	Z+45, r23	; 0x2d
    1b56:	86 a7       	std	Z+46, r24	; 0x2e
    1b58:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    1b5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b5c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b60:	28 85       	ldd	r18, Y+8	; 0x08
    1b62:	85 2f       	mov	r24, r21
    1b64:	94 2f       	mov	r25, r20
    1b66:	a3 2f       	mov	r26, r19
    1b68:	b2 2f       	mov	r27, r18
    1b6a:	80 ab       	std	Z+48, r24	; 0x30
    1b6c:	91 ab       	std	Z+49, r25	; 0x31
    1b6e:	a2 ab       	std	Z+50, r26	; 0x32
    1b70:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1b72:	59 85       	ldd	r21, Y+9	; 0x09
    1b74:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b76:	85 2f       	mov	r24, r21
    1b78:	94 2f       	mov	r25, r20
    1b7a:	a2 2d       	mov	r26, r2
    1b7c:	b3 2d       	mov	r27, r3
    1b7e:	84 ab       	std	Z+52, r24	; 0x34
    1b80:	95 ab       	std	Z+53, r25	; 0x35
    1b82:	a6 ab       	std	Z+54, r26	; 0x36
    1b84:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    1b86:	c0 ae       	std	Z+56, r12	; 0x38
    1b88:	d1 ae       	std	Z+57, r13	; 0x39
    1b8a:	e2 ae       	std	Z+58, r14	; 0x3a
    1b8c:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1b8e:	80 91 71 01 	lds	r24, 0x0171
    1b92:	90 91 72 01 	lds	r25, 0x0172
    1b96:	a0 91 73 01 	lds	r26, 0x0173
    1b9a:	b0 91 74 01 	lds	r27, 0x0174
    1b9e:	80 93 65 01 	sts	0x0165, r24
    1ba2:	90 93 66 01 	sts	0x0166, r25
    1ba6:	a0 93 67 01 	sts	0x0167, r26
    1baa:	b0 93 68 01 	sts	0x0168, r27
		yi1 = yi;
    1bae:	80 92 61 01 	sts	0x0161, r8
    1bb2:	90 92 62 01 	sts	0x0162, r9
    1bb6:	a0 92 63 01 	sts	0x0163, r10
    1bba:	b0 92 64 01 	sts	0x0164, r11
		ai1 = ai;
    1bbe:	80 91 69 01 	lds	r24, 0x0169
    1bc2:	90 91 6a 01 	lds	r25, 0x016A
    1bc6:	a0 91 6b 01 	lds	r26, 0x016B
    1bca:	b0 91 6c 01 	lds	r27, 0x016C
    1bce:	80 93 5d 01 	sts	0x015D, r24
    1bd2:	90 93 5e 01 	sts	0x015E, r25
    1bd6:	a0 93 5f 01 	sts	0x015F, r26
    1bda:	b0 93 60 01 	sts	0x0160, r27
		
		return 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	00 c0       	rjmp	.+0      	; 0x1be2 <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1be2:	2d 96       	adiw	r28, 0x0d	; 13
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	7f 90       	pop	r7
    1c08:	6f 90       	pop	r6
    1c0a:	5f 90       	pop	r5
    1c0c:	4f 90       	pop	r4
    1c0e:	3f 90       	pop	r3
    1c10:	2f 90       	pop	r2
    1c12:	08 95       	ret

00001c14 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	18 2f       	mov	r17, r24
    1c1c:	d6 2f       	mov	r29, r22
    1c1e:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1c20:	0e 94 00 08 	call	0x1000	; 0x1000 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1c24:	94 ea       	ldi	r25, 0xA4	; 164
    1c26:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c2a:	ec eb       	ldi	r30, 0xBC	; 188
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	90 81       	ld	r25, Z
    1c30:	99 23       	and	r25, r25
    1c32:	ec f7       	brge	.-6      	; 0x1c2e <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1c34:	90 e5       	ldi	r25, 0x50	; 80
    1c36:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c3a:	94 e8       	ldi	r25, 0x84	; 132
    1c3c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c40:	ec eb       	ldi	r30, 0xBC	; 188
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	90 81       	ld	r25, Z
    1c46:	99 23       	and	r25, r25
    1c48:	ec f7       	brge	.-6      	; 0x1c44 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1c4a:	90 91 b9 00 	lds	r25, 0x00B9
    1c4e:	98 7f       	andi	r25, 0xF8	; 248
    1c50:	90 32       	cpi	r25, 0x20	; 32
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1c54:	84 e9       	ldi	r24, 0x94	; 148
    1c56:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	2d c0       	rjmp	.+90     	; 0x1cb8 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c64:	84 e8       	ldi	r24, 0x84	; 132
    1c66:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1c6a:	ec eb       	ldi	r30, 0xBC	; 188
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	90 81       	ld	r25, Z
    1c70:	99 23       	and	r25, r25
    1c72:	ec f7       	brge	.-6      	; 0x1c6e <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1c74:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c78:	84 e8       	ldi	r24, 0x84	; 132
    1c7a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1c7e:	ec eb       	ldi	r30, 0xBC	; 188
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	88 23       	and	r24, r24
    1c86:	ec f7       	brge	.-6      	; 0x1c82 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1c88:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c8c:	84 e8       	ldi	r24, 0x84	; 132
    1c8e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1c92:	ec eb       	ldi	r30, 0xBC	; 188
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	88 23       	and	r24, r24
    1c9a:	ec f7       	brge	.-6      	; 0x1c96 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1c9c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ca0:	84 e8       	ldi	r24, 0x84	; 132
    1ca2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ca6:	ec eb       	ldi	r30, 0xBC	; 188
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	88 23       	and	r24, r24
    1cae:	ec f7       	brge	.-6      	; 0x1caa <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1cb0:	84 e9       	ldi	r24, 0x94	; 148
    1cb2:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	08 95       	ret

00001cc0 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1cc4:	24 ea       	ldi	r18, 0xA4	; 164
    1cc6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1cca:	ec eb       	ldi	r30, 0xBC	; 188
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	20 81       	ld	r18, Z
    1cd0:	22 23       	and	r18, r18
    1cd2:	ec f7       	brge	.-6      	; 0x1cce <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1cd4:	21 e5       	ldi	r18, 0x51	; 81
    1cd6:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cda:	24 e8       	ldi	r18, 0x84	; 132
    1cdc:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1ce0:	ec eb       	ldi	r30, 0xBC	; 188
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	20 81       	ld	r18, Z
    1ce6:	22 23       	and	r18, r18
    1ce8:	ec f7       	brge	.-6      	; 0x1ce4 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1cea:	20 91 b9 00 	lds	r18, 0x00B9
    1cee:	28 7f       	andi	r18, 0xF8	; 248
    1cf0:	28 34       	cpi	r18, 0x48	; 72
    1cf2:	29 f4       	brne	.+10     	; 0x1cfe <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1cf4:	84 e9       	ldi	r24, 0x94	; 148
    1cf6:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1cfe:	24 ec       	ldi	r18, 0xC4	; 196
    1d00:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d04:	ec eb       	ldi	r30, 0xBC	; 188
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	20 81       	ld	r18, Z
    1d0a:	22 23       	and	r18, r18
    1d0c:	ec f7       	brge	.-6      	; 0x1d08 <m_rf_read+0x48>
	bytes = TWDR;
    1d0e:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1d12:	46 13       	cpse	r20, r22
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	41 50       	subi	r20, 0x01	; 1
    1d1a:	51 09       	sbc	r21, r1
    1d1c:	14 16       	cp	r1, r20
    1d1e:	15 06       	cpc	r1, r21
    1d20:	44 f0       	brlt	.+16     	; 0x1d32 <m_rf_read+0x72>
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	18 c0       	rjmp	.+48     	; 0x1d58 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d28:	84 e9       	ldi	r24, 0x94	; 148
    1d2a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	25 c0       	rjmp	.+74     	; 0x1d7c <m_rf_read+0xbc>
    1d32:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d38:	ec eb       	ldi	r30, 0xBC	; 188
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1d3e:	cb eb       	ldi	r28, 0xBB	; 187
    1d40:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d42:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d44:	60 81       	ld	r22, Z
    1d46:	66 23       	and	r22, r22
    1d48:	ec f7       	brge	.-6      	; 0x1d44 <m_rf_read+0x84>
		buffer[i] = TWDR;
    1d4a:	68 81       	ld	r22, Y
    1d4c:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d4e:	2f 5f       	subi	r18, 0xFF	; 255
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	24 17       	cp	r18, r20
    1d54:	35 07       	cpc	r19, r21
    1d56:	ac f3       	brlt	.-22     	; 0x1d42 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1d58:	24 e8       	ldi	r18, 0x84	; 132
    1d5a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d5e:	ec eb       	ldi	r30, 0xBC	; 188
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	20 81       	ld	r18, Z
    1d64:	22 23       	and	r18, r18
    1d66:	ec f7       	brge	.-6      	; 0x1d62 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    1d68:	20 91 bb 00 	lds	r18, 0x00BB
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e4 0f       	add	r30, r20
    1d70:	f5 1f       	adc	r31, r21
    1d72:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d74:	84 e9       	ldi	r24, 0x94	; 148
    1d76:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
}
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1d88:	80 ea       	ldi	r24, 0xA0	; 160
    1d8a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1d8e:	82 e1       	ldi	r24, 0x12	; 18
    1d90:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1d92:	09 b4       	in	r0, 0x29	; 41
    1d94:	00 fe       	sbrs	r0, 0
    1d96:	fd cf       	rjmp	.-6      	; 0x1d92 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1d98:	80 e9       	ldi	r24, 0x90	; 144
    1d9a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1d9e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1da2:	10 92 96 01 	sts	0x0196, r1
	cdc_line_rtsdtr = 0;
    1da6:	10 92 97 01 	sts	0x0197, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1daa:	8c e0       	ldi	r24, 0x0C	; 12
    1dac:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1db0:	78 94       	sei
    1db2:	08 95       	ret

00001db4 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    1db4:	80 91 96 01 	lds	r24, 0x0196
}
    1db8:	08 95       	ret

00001dba <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1dba:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1dbc:	f8 94       	cli
	if (!usb_configuration) {
    1dbe:	80 91 96 01 	lds	r24, 0x0196
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc <m_usb_rx_char+0x12>
		SREG = intr_state;
    1dc6:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    1dd2:	80 91 e8 00 	lds	r24, 0x00E8
    1dd6:	85 fd       	sbrc	r24, 5
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    1dda:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    1de0:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    1de4:	20 91 e8 00 	lds	r18, 0x00E8
    1de8:	25 fd       	sbrc	r18, 5
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <m_usb_rx_char+0x38>
    1dec:	2b e6       	ldi	r18, 0x6B	; 107
    1dee:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    1df2:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    1df4:	08 95       	ret

00001df6 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
    1df6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1df8:	f8 94       	cli
	if (usb_configuration) {
    1dfa:	80 91 96 01 	lds	r24, 0x0196
    1dfe:	88 23       	and	r24, r24
    1e00:	31 f0       	breq	.+12     	; 0x1e0e <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
    1e08:	80 91 f2 00 	lds	r24, 0x00F2
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
    1e10:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
    1e12:	08 95       	ret

00001e14 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1e14:	80 91 96 01 	lds	r24, 0x0196
    1e18:	88 23       	and	r24, r24
    1e1a:	89 f0       	breq	.+34     	; 0x1e3e <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    1e1c:	2f b7       	in	r18, 0x3f	; 63
		cli();
    1e1e:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    1e26:	80 91 e8 00 	lds	r24, 0x00E8
    1e2a:	85 ff       	sbrs	r24, 5
    1e2c:	07 c0       	rjmp	.+14     	; 0x1e3c <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    1e2e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	9b e6       	ldi	r25, 0x6B	; 107
    1e34:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    1e36:	80 81       	ld	r24, Z
    1e38:	85 fd       	sbrc	r24, 5
    1e3a:	fc cf       	rjmp	.-8      	; 0x1e34 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    1e3c:	2f bf       	out	0x3f, r18	; 63
    1e3e:	08 95       	ret

00001e40 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1e44:	90 91 96 01 	lds	r25, 0x0196
    1e48:	99 23       	and	r25, r25
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <m_usb_tx_char+0xe>
    1e4c:	4d c0       	rjmp	.+154    	; 0x1ee8 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1e4e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e50:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1e52:	24 e0       	ldi	r18, 0x04	; 4
    1e54:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1e58:	20 91 98 01 	lds	r18, 0x0198
    1e5c:	22 23       	and	r18, r18
    1e5e:	49 f0       	breq	.+18     	; 0x1e72 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1e60:	20 91 e8 00 	lds	r18, 0x00E8
    1e64:	25 fd       	sbrc	r18, 5
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1e68:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	42 c0       	rjmp	.+132    	; 0x1ef2 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    1e6e:	10 92 98 01 	sts	0x0198, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1e72:	30 91 e4 00 	lds	r19, 0x00E4
    1e76:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1e78:	20 91 e8 00 	lds	r18, 0x00E8
    1e7c:	25 fd       	sbrc	r18, 5
    1e7e:	25 c0       	rjmp	.+74     	; 0x1eca <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1e80:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1e82:	90 91 e4 00 	lds	r25, 0x00E4
    1e86:	93 17       	cp	r25, r19
    1e88:	49 f0       	breq	.+18     	; 0x1e9c <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1e8a:	90 91 96 01 	lds	r25, 0x0196
    1e8e:	91 11       	cpse	r25, r1
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <m_usb_tx_char+0x70>
    1e92:	2c c0       	rjmp	.+88     	; 0x1eec <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1e94:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1e96:	98 81       	ld	r25, Y
    1e98:	93 13       	cpse	r25, r19
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	80 93 98 01 	sts	0x0198, r24
			return -1;
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	26 c0       	rjmp	.+76     	; 0x1ef2 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1ea6:	90 91 96 01 	lds	r25, 0x0196
    1eaa:	91 11       	cpse	r25, r1
    1eac:	08 c0       	rjmp	.+16     	; 0x1ebe <m_usb_tx_char+0x7e>
    1eae:	20 c0       	rjmp	.+64     	; 0x1ef0 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1eb0:	a9 ee       	ldi	r26, 0xE9	; 233
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1eb6:	e8 ee       	ldi	r30, 0xE8	; 232
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1eba:	c4 ee       	ldi	r28, 0xE4	; 228
    1ebc:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    1ebe:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1ec0:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1ec2:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1ec4:	20 81       	ld	r18, Z
    1ec6:	25 ff       	sbrs	r18, 5
    1ec8:	e5 cf       	rjmp	.-54     	; 0x1e94 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1eca:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1ece:	80 91 e8 00 	lds	r24, 0x00E8
    1ed2:	85 fd       	sbrc	r24, 5
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <m_usb_tx_char+0x9c>
    1ed6:	8a e3       	ldi	r24, 0x3A	; 58
    1ed8:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1edc:	85 e0       	ldi	r24, 0x05	; 5
    1ede:	80 93 95 01 	sts	0x0195, r24
	SREG = intr_state;
    1ee2:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <m_usb_tx_char+0xb2>
    1ef0:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	8f 93       	push	r24
    1f04:	9f 93       	push	r25
    1f06:	ef 93       	push	r30
    1f08:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1f0a:	e1 ee       	ldi	r30, 0xE1	; 225
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
        UDINT = 0;
    1f10:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1f12:	83 ff       	sbrs	r24, 3
    1f14:	11 c0       	rjmp	.+34     	; 0x1f38 <__vector_10+0x40>
		UENUM = 0;
    1f16:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1f20:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1f24:	92 e1       	ldi	r25, 0x12	; 18
    1f26:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1f2a:	98 e0       	ldi	r25, 0x08	; 8
    1f2c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1f30:	10 92 96 01 	sts	0x0196, r1
		cdc_line_rtsdtr = 0;
    1f34:	10 92 97 01 	sts	0x0197, r1
        }
	if (intbits & (1<<SOFI)) {
    1f38:	82 ff       	sbrs	r24, 2
    1f3a:	13 c0       	rjmp	.+38     	; 0x1f62 <__vector_10+0x6a>
		if (usb_configuration) {
    1f3c:	80 91 96 01 	lds	r24, 0x0196
    1f40:	88 23       	and	r24, r24
    1f42:	79 f0       	breq	.+30     	; 0x1f62 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1f44:	80 91 95 01 	lds	r24, 0x0195
			if (t) {
    1f48:	88 23       	and	r24, r24
    1f4a:	59 f0       	breq	.+22     	; 0x1f62 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1f4c:	81 50       	subi	r24, 0x01	; 1
    1f4e:	80 93 95 01 	sts	0x0195, r24
				if (!t) {
    1f52:	81 11       	cpse	r24, r1
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1f56:	84 e0       	ldi	r24, 0x04	; 4
    1f58:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1f5c:	8a e3       	ldi	r24, 0x3A	; 58
    1f5e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1f62:	ff 91       	pop	r31
    1f64:	ef 91       	pop	r30
    1f66:	9f 91       	pop	r25
    1f68:	8f 91       	pop	r24
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1f74:	1f 92       	push	r1
    1f76:	0f 92       	push	r0
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	0f 92       	push	r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	2f 93       	push	r18
    1f84:	3f 93       	push	r19
    1f86:	4f 93       	push	r20
    1f88:	5f 93       	push	r21
    1f8a:	6f 93       	push	r22
    1f8c:	7f 93       	push	r23
    1f8e:	8f 93       	push	r24
    1f90:	9f 93       	push	r25
    1f92:	af 93       	push	r26
    1f94:	bf 93       	push	r27
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	ef 93       	push	r30
    1f9c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1f9e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1fa2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1fa6:	83 ff       	sbrs	r24, 3
    1fa8:	51 c1       	rjmp	.+674    	; 0x224c <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    1faa:	e1 ef       	ldi	r30, 0xF1	; 241
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1fb0:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1fb2:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1fb4:	30 81       	ld	r19, Z
    1fb6:	93 2f       	mov	r25, r19
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	dc 01       	movw	r26, r24
    1fbc:	a2 2b       	or	r26, r18
    1fbe:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1fc0:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1fc2:	60 81       	ld	r22, Z
    1fc4:	96 2f       	mov	r25, r22
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	85 2b       	or	r24, r21
                wLength = UEDATX;
    1fca:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    1fcc:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1fce:	52 ef       	ldi	r21, 0xF2	; 242
    1fd0:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1fd4:	46 30       	cpi	r20, 0x06	; 6
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <__vector_11+0x66>
    1fd8:	5c c0       	rjmp	.+184    	; 0x2092 <__vector_11+0x11e>
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1fdc:	81 e2       	ldi	r24, 0x21	; 33
    1fde:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1fe2:	3b c1       	rjmp	.+630    	; 0x225a <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1fe4:	c6 e0       	ldi	r28, 0x06	; 6
    1fe6:	4f e1       	ldi	r20, 0x1F	; 31
    1fe8:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1fea:	fa 01       	movw	r30, r20
    1fec:	65 91       	lpm	r22, Z+
    1fee:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1ff0:	26 17       	cp	r18, r22
    1ff2:	37 07       	cpc	r19, r23
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1ff6:	49 5f       	subi	r20, 0xF9	; 249
    1ff8:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1ffa:	20 c0       	rjmp	.+64     	; 0x203c <__vector_11+0xc8>
				}
				list += 2;
    1ffc:	fa 01       	movw	r30, r20
    1ffe:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2000:	65 91       	lpm	r22, Z+
    2002:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2004:	86 17       	cp	r24, r22
    2006:	97 07       	cpc	r25, r23
    2008:	19 f0       	breq	.+6      	; 0x2010 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    200a:	49 5f       	subi	r20, 0xF9	; 249
    200c:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    200e:	16 c0       	rjmp	.+44     	; 0x203c <__vector_11+0xc8>
				}
				list += 2;
    2010:	fa 01       	movw	r30, r20
    2012:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2014:	85 91       	lpm	r24, Z+
    2016:	94 91       	lpm	r25, Z
    2018:	28 2f       	mov	r18, r24
    201a:	39 2f       	mov	r19, r25
				list += 2;
    201c:	fa 01       	movw	r30, r20
    201e:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2020:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2022:	9b 2f       	mov	r25, r27
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2028:	8f 3f       	cpi	r24, 0xFF	; 255
    202a:	91 05       	cpc	r25, r1
    202c:	19 f0       	breq	.+6      	; 0x2034 <__vector_11+0xc0>
    202e:	10 f0       	brcs	.+4      	; 0x2034 <__vector_11+0xc0>
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	84 17       	cp	r24, r20
    2036:	28 f4       	brcc	.+10     	; 0x2042 <__vector_11+0xce>
    2038:	48 2f       	mov	r20, r24
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <__vector_11+0xce>
    203c:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    203e:	a9 f6       	brne	.-86     	; 0x1fea <__vector_11+0x76>
    2040:	cd cf       	rjmp	.-102    	; 0x1fdc <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2042:	c8 ee       	ldi	r28, 0xE8	; 232
    2044:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2046:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2048:	a1 ef       	ldi	r26, 0xF1	; 241
    204a:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    204c:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    204e:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2050:	98 2f       	mov	r25, r24
    2052:	95 70       	andi	r25, 0x05	; 5
    2054:	e1 f3       	breq	.-8      	; 0x204e <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2056:	82 fd       	sbrc	r24, 2
    2058:	00 c1       	rjmp	.+512    	; 0x225a <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    205a:	64 2f       	mov	r22, r20
    205c:	41 31       	cpi	r20, 0x11	; 17
    205e:	08 f0       	brcs	.+2      	; 0x2062 <__vector_11+0xee>
    2060:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    2062:	66 23       	and	r22, r22
    2064:	09 f4       	brne	.+2      	; 0x2068 <__vector_11+0xf4>
    2066:	f6 c0       	rjmp	.+492    	; 0x2254 <__vector_11+0x2e0>
    2068:	c9 01       	movw	r24, r18
    206a:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    206c:	fc 01       	movw	r30, r24
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	e4 91       	lpm	r30, Z
    2072:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2074:	51 50       	subi	r21, 0x01	; 1
    2076:	d1 f7       	brne	.-12     	; 0x206c <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2078:	86 2f       	mov	r24, r22
    207a:	81 50       	subi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	28 0f       	add	r18, r24
    2082:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2084:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2086:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2088:	41 11       	cpse	r20, r1
    208a:	e1 cf       	rjmp	.-62     	; 0x204e <__vector_11+0xda>
    208c:	60 31       	cpi	r22, 0x10	; 16
    208e:	f9 f2       	breq	.-66     	; 0x204e <__vector_11+0xda>
    2090:	e4 c0       	rjmp	.+456    	; 0x225a <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2092:	45 30       	cpi	r20, 0x05	; 5
    2094:	61 f4       	brne	.+24     	; 0x20ae <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2096:	8e ef       	ldi	r24, 0xFE	; 254
    2098:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    209c:	e8 ee       	ldi	r30, 0xE8	; 232
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 ff       	sbrs	r24, 0
    20a4:	fd cf       	rjmp	.-6      	; 0x20a0 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    20a6:	20 68       	ori	r18, 0x80	; 128
    20a8:	20 93 e3 00 	sts	0x00E3, r18
			return;
    20ac:	d6 c0       	rjmp	.+428    	; 0x225a <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    20ae:	49 30       	cpi	r20, 0x09	; 9
    20b0:	a1 f5       	brne	.+104    	; 0x211a <__vector_11+0x1a6>
    20b2:	71 11       	cpse	r23, r1
    20b4:	5b c0       	rjmp	.+182    	; 0x216c <__vector_11+0x1f8>
			usb_configuration = wValue;
    20b6:	20 93 96 01 	sts	0x0196, r18
			cdc_line_rtsdtr = 0;
    20ba:	10 92 97 01 	sts	0x0197, r1
			transmit_flush_timer = 0;
    20be:	10 92 95 01 	sts	0x0195, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    20c2:	8e ef       	ldi	r24, 0xFE	; 254
    20c4:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    20c8:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    20ca:	89 e4       	ldi	r24, 0x49	; 73
    20cc:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    20ce:	c9 ee       	ldi	r28, 0xE9	; 233
    20d0:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    20d2:	ab ee       	ldi	r26, 0xEB	; 235
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    20d6:	6c ee       	ldi	r22, 0xEC	; 236
    20d8:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    20da:	4d ee       	ldi	r20, 0xED	; 237
    20dc:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    20de:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    20e0:	9c 01       	movw	r18, r24
    20e2:	2f 5f       	subi	r18, 0xFF	; 255
    20e4:	3f 4f       	sbci	r19, 0xFF	; 255
    20e6:	fc 01       	movw	r30, r24
    20e8:	04 91       	lpm	r16, Z
				UECONX = en;
    20ea:	0c 93       	st	X, r16
				if (en) {
    20ec:	00 23       	and	r16, r16
    20ee:	59 f0       	breq	.+22     	; 0x2106 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    20f0:	f9 01       	movw	r30, r18
    20f2:	24 91       	lpm	r18, Z
    20f4:	fb 01       	movw	r30, r22
    20f6:	20 83       	st	Z, r18
    20f8:	fc 01       	movw	r30, r24
    20fa:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    20fc:	03 96       	adiw	r24, 0x03	; 3
    20fe:	24 91       	lpm	r18, Z
    2100:	fa 01       	movw	r30, r20
    2102:	20 83       	st	Z, r18
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2106:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2108:	1f 5f       	subi	r17, 0xFF	; 255
    210a:	15 30       	cpi	r17, 0x05	; 5
    210c:	41 f7       	brne	.-48     	; 0x20de <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    210e:	ea ee       	ldi	r30, 0xEA	; 234
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	8e e1       	ldi	r24, 0x1E	; 30
    2114:	80 83       	st	Z, r24
        		UERST = 0;
    2116:	10 82       	st	Z, r1
			return;
    2118:	a0 c0       	rjmp	.+320    	; 0x225a <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    211a:	48 30       	cpi	r20, 0x08	; 8
    211c:	81 f4       	brne	.+32     	; 0x213e <__vector_11+0x1ca>
    211e:	70 38       	cpi	r23, 0x80	; 128
    2120:	09 f0       	breq	.+2      	; 0x2124 <__vector_11+0x1b0>
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2124:	e8 ee       	ldi	r30, 0xE8	; 232
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	80 ff       	sbrs	r24, 0
    212c:	fd cf       	rjmp	.-6      	; 0x2128 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    212e:	80 91 96 01 	lds	r24, 0x0196
    2132:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2136:	8e ef       	ldi	r24, 0xFE	; 254
    2138:	80 93 e8 00 	sts	0x00E8, r24
    213c:	8e c0       	rjmp	.+284    	; 0x225a <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    213e:	41 32       	cpi	r20, 0x21	; 33
    2140:	a9 f4       	brne	.+42     	; 0x216c <__vector_11+0x1f8>
    2142:	71 3a       	cpi	r23, 0xA1	; 161
    2144:	f1 f5       	brne	.+124    	; 0x21c2 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2146:	e8 ee       	ldi	r30, 0xE8	; 232
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 ff       	sbrs	r24, 0
    214e:	fd cf       	rjmp	.-6      	; 0x214a <__vector_11+0x1d6>
    2150:	ec e0       	ldi	r30, 0x0C	; 12
    2152:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2154:	a1 ef       	ldi	r26, 0xF1	; 241
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	81 91       	ld	r24, Z+
    215a:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	e3 31       	cpi	r30, 0x13	; 19
    2160:	f4 07       	cpc	r31, r20
    2162:	d1 f7       	brne	.-12     	; 0x2158 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2164:	8e ef       	ldi	r24, 0xFE	; 254
    2166:	80 93 e8 00 	sts	0x00E8, r24
    216a:	77 c0       	rjmp	.+238    	; 0x225a <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    216c:	40 32       	cpi	r20, 0x20	; 32
    216e:	c9 f4       	brne	.+50     	; 0x21a2 <__vector_11+0x22e>
    2170:	71 32       	cpi	r23, 0x21	; 33
    2172:	09 f0       	breq	.+2      	; 0x2176 <__vector_11+0x202>
    2174:	6b c0       	rjmp	.+214    	; 0x224c <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2176:	e8 ee       	ldi	r30, 0xE8	; 232
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	82 ff       	sbrs	r24, 2
    217e:	fd cf       	rjmp	.-6      	; 0x217a <__vector_11+0x206>
    2180:	ec e0       	ldi	r30, 0x0C	; 12
    2182:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2184:	a1 ef       	ldi	r26, 0xF1	; 241
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	8c 91       	ld	r24, X
    218a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    218c:	51 e0       	ldi	r21, 0x01	; 1
    218e:	e3 31       	cpi	r30, 0x13	; 19
    2190:	f5 07       	cpc	r31, r21
    2192:	d1 f7       	brne	.-12     	; 0x2188 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2194:	e8 ee       	ldi	r30, 0xE8	; 232
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	8b ef       	ldi	r24, 0xFB	; 251
    219a:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    219c:	8e ef       	ldi	r24, 0xFE	; 254
    219e:	80 83       	st	Z, r24
    21a0:	5c c0       	rjmp	.+184    	; 0x225a <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    21a2:	42 32       	cpi	r20, 0x22	; 34
    21a4:	71 f4       	brne	.+28     	; 0x21c2 <__vector_11+0x24e>
    21a6:	71 32       	cpi	r23, 0x21	; 33
    21a8:	09 f0       	breq	.+2      	; 0x21ac <__vector_11+0x238>
    21aa:	50 c0       	rjmp	.+160    	; 0x224c <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    21ac:	20 93 97 01 	sts	0x0197, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21b0:	e8 ee       	ldi	r30, 0xE8	; 232
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 ff       	sbrs	r24, 0
    21b8:	fd cf       	rjmp	.-6      	; 0x21b4 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21ba:	8e ef       	ldi	r24, 0xFE	; 254
    21bc:	80 93 e8 00 	sts	0x00E8, r24
    21c0:	4c c0       	rjmp	.+152    	; 0x225a <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    21c2:	41 11       	cpse	r20, r1
    21c4:	1a c0       	rjmp	.+52     	; 0x21fa <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21c6:	e8 ee       	ldi	r30, 0xE8	; 232
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	20 81       	ld	r18, Z
    21cc:	20 ff       	sbrs	r18, 0
    21ce:	fd cf       	rjmp	.-6      	; 0x21ca <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    21d0:	72 38       	cpi	r23, 0x82	; 130
    21d2:	51 f4       	brne	.+20     	; 0x21e8 <__vector_11+0x274>
				UENUM = wIndex;
    21d4:	e9 ee       	ldi	r30, 0xE9	; 233
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    21da:	80 91 eb 00 	lds	r24, 0x00EB
    21de:	85 fb       	bst	r24, 5
    21e0:	88 27       	eor	r24, r24
    21e2:	80 f9       	bld	r24, 0
				UENUM = 0;
    21e4:	10 82       	st	Z, r1
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    21ea:	e1 ef       	ldi	r30, 0xF1	; 241
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 83       	st	Z, r24
			UEDATX = 0;
    21f0:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21f2:	8e ef       	ldi	r24, 0xFE	; 254
    21f4:	80 93 e8 00 	sts	0x00E8, r24
    21f8:	30 c0       	rjmp	.+96     	; 0x225a <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    21fa:	41 30       	cpi	r20, 0x01	; 1
    21fc:	11 f0       	breq	.+4      	; 0x2202 <__vector_11+0x28e>
    21fe:	43 30       	cpi	r20, 0x03	; 3
    2200:	29 f5       	brne	.+74     	; 0x224c <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    2202:	72 30       	cpi	r23, 0x02	; 2
    2204:	19 f5       	brne	.+70     	; 0x224c <__vector_11+0x2d8>
    2206:	23 2b       	or	r18, r19
    2208:	09 f5       	brne	.+66     	; 0x224c <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    220a:	8f 77       	andi	r24, 0x7F	; 127
    220c:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    220e:	38 2f       	mov	r19, r24
    2210:	31 50       	subi	r19, 0x01	; 1
    2212:	34 30       	cpi	r19, 0x04	; 4
    2214:	d8 f4       	brcc	.+54     	; 0x224c <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2216:	3e ef       	ldi	r19, 0xFE	; 254
    2218:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    221c:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    2220:	43 30       	cpi	r20, 0x03	; 3
    2222:	21 f4       	brne	.+8      	; 0x222c <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2224:	81 e2       	ldi	r24, 0x21	; 33
    2226:	80 93 eb 00 	sts	0x00EB, r24
    222a:	17 c0       	rjmp	.+46     	; 0x225a <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    222c:	99 e1       	ldi	r25, 0x19	; 25
    222e:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	d9 01       	movw	r26, r18
    2238:	02 c0       	rjmp	.+4      	; 0x223e <__vector_11+0x2ca>
    223a:	aa 0f       	add	r26, r26
    223c:	bb 1f       	adc	r27, r27
    223e:	8a 95       	dec	r24
    2240:	e2 f7       	brpl	.-8      	; 0x223a <__vector_11+0x2c6>
    2242:	ea ee       	ldi	r30, 0xEA	; 234
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	a0 83       	st	Z, r26
					UERST = 0;
    2248:	10 82       	st	Z, r1
    224a:	07 c0       	rjmp	.+14     	; 0x225a <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    224c:	81 e2       	ldi	r24, 0x21	; 33
    224e:	80 93 eb 00 	sts	0x00EB, r24
    2252:	03 c0       	rjmp	.+6      	; 0x225a <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2254:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2256:	41 11       	cpse	r20, r1
    2258:	fa ce       	rjmp	.-524    	; 0x204e <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    225a:	ff 91       	pop	r31
    225c:	ef 91       	pop	r30
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	0f 90       	pop	r0
    2280:	1f 90       	pop	r1
    2282:	18 95       	reti

00002284 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	27 97       	sbiw	r28, 0x07	; 7
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    22a0:	8e 01       	movw	r16, r28
    22a2:	0f 5f       	subi	r16, 0xFF	; 255
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	27 e0       	ldi	r18, 0x07	; 7
    22a8:	f8 01       	movw	r30, r16
    22aa:	11 92       	st	Z+, r1
    22ac:	2a 95       	dec	r18
    22ae:	e9 f7       	brne	.-6      	; 0x22aa <m_usb_tx_int+0x26>
	itoa(i,string,10);
    22b0:	4a e0       	ldi	r20, 0x0A	; 10
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	b8 01       	movw	r22, r16
    22b6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    22ba:	7e 01       	movw	r14, r28
    22bc:	f8 e0       	ldi	r31, 0x08	; 8
    22be:	ef 0e       	add	r14, r31
    22c0:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    22c2:	f8 01       	movw	r30, r16
    22c4:	81 91       	ld	r24, Z+
    22c6:	8f 01       	movw	r16, r30
    22c8:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    22ca:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    22ce:	0e 15       	cp	r16, r14
    22d0:	1f 05       	cpc	r17, r15
    22d2:	b9 f7       	brne	.-18     	; 0x22c2 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    22d4:	27 96       	adiw	r28, 0x07	; 7
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    22ec:	08 95       	ret

000022ee <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    22f2:	ec eb       	ldi	r30, 0xBC	; 188
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	88 23       	and	r24, r24
    22fa:	34 f0       	brlt	.+12     	; 0x2308 <twi_wait+0x1a>
    22fc:	2f 5f       	subi	r18, 0xFF	; 255
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	29 3e       	cpi	r18, 0xE9	; 233
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	38 07       	cpc	r19, r24
    2306:	b9 f7       	brne	.-18     	; 0x22f6 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	28 3e       	cpi	r18, 0xE8	; 232
    230c:	33 40       	sbci	r19, 0x03	; 3
    230e:	09 f4       	brne	.+2      	; 0x2312 <twi_wait+0x24>
    2310:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2312:	08 95       	ret

00002314 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2314:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2318:	84 e8       	ldi	r24, 0x84	; 132
    231a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    231e:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_wait>
    2322:	88 23       	and	r24, r24
    2324:	21 f0       	breq	.+8      	; 0x232e <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2326:	80 91 b9 00 	lds	r24, 0x00B9
    232a:	88 7f       	andi	r24, 0xF8	; 248
    232c:	08 95       	ret
	} else {
		return 0;					// comm failure
    232e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2330:	08 95       	ret

00002332 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2332:	cf 93       	push	r28
    2334:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2336:	94 ea       	ldi	r25, 0xA4	; 164
    2338:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    233c:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_wait>
    2340:	88 23       	and	r24, r24
    2342:	61 f0       	breq	.+24     	; 0x235c <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2344:	8c 2f       	mov	r24, r28
    2346:	88 0f       	add	r24, r24
    2348:	8f 5f       	subi	r24, 0xFF	; 255
    234a:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    234e:	88 34       	cpi	r24, 0x48	; 72
    2350:	39 f4       	brne	.+14     	; 0x2360 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2352:	84 e9       	ldi	r24, 0x94	; 148
    2354:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2360:	81 e0       	ldi	r24, 0x01	; 1
}	
    2362:	cf 91       	pop	r28
    2364:	08 95       	ret

00002366 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2366:	cf 93       	push	r28
    2368:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    236a:	94 ea       	ldi	r25, 0xA4	; 164
    236c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2370:	0e 94 77 11 	call	0x22ee	; 0x22ee <twi_wait>
    2374:	88 23       	and	r24, r24
    2376:	59 f0       	breq	.+22     	; 0x238e <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2378:	8c 2f       	mov	r24, r28
    237a:	88 0f       	add	r24, r24
    237c:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2380:	80 32       	cpi	r24, 0x20	; 32
    2382:	39 f4       	brne	.+14     	; 0x2392 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2384:	84 e9       	ldi	r24, 0x94	; 148
    2386:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2392:	81 e0       	ldi	r24, 0x01	; 1
}	
    2394:	cf 91       	pop	r28
    2396:	08 95       	ret

00002398 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2398:	84 e9       	ldi	r24, 0x94	; 148
    239a:	80 93 bc 00 	sts	0x00BC, r24
    239e:	08 95       	ret

000023a0 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    23a0:	ef 92       	push	r14
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	60 97       	sbiw	r28, 0x10	; 16
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	e8 2e       	mov	r14, r24
    23be:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    23c0:	fe 01       	movw	r30, r28
    23c2:	31 96       	adiw	r30, 0x01	; 1
    23c4:	80 e1       	ldi	r24, 0x10	; 16
    23c6:	df 01       	movw	r26, r30
    23c8:	1d 92       	st	X+, r1
    23ca:	8a 95       	dec	r24
    23cc:	e9 f7       	brne	.-6      	; 0x23c8 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    23ce:	88 e5       	ldi	r24, 0x58	; 88
    23d0:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    23d4:	88 23       	and	r24, r24
    23d6:	09 f4       	brne	.+2      	; 0x23da <m_wii_read+0x3a>
    23d8:	66 c0       	rjmp	.+204    	; 0x24a6 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    23da:	86 e3       	ldi	r24, 0x36	; 54
    23dc:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    23e0:	88 23       	and	r24, r24
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <m_wii_read+0x46>
    23e4:	62 c0       	rjmp	.+196    	; 0x24aa <m_wii_read+0x10a>
	end();
    23e6:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23ea:	b8 e0       	ldi	r27, 0x08	; 8
    23ec:	ba 95       	dec	r27
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <m_wii_read+0x4c>
    23f0:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    23f2:	88 e5       	ldi	r24, 0x58	; 88
    23f4:	0e 94 99 11 	call	0x2332	; 0x2332 <start_read>
    23f8:	88 23       	and	r24, r24
    23fa:	09 f4       	brne	.+2      	; 0x23fe <m_wii_read+0x5e>
    23fc:	58 c0       	rjmp	.+176    	; 0x24ae <m_wii_read+0x10e>
    23fe:	ae 01       	movw	r20, r28
    2400:	4f 5f       	subi	r20, 0xFF	; 255
    2402:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2404:	8e 01       	movw	r16, r28
    2406:	00 5f       	subi	r16, 0xF0	; 240
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    240a:	ec eb       	ldi	r30, 0xBC	; 188
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2410:	2b eb       	ldi	r18, 0xBB	; 187
    2412:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2414:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2416:	80 81       	ld	r24, Z
    2418:	88 23       	and	r24, r24
    241a:	ec f7       	brge	.-6      	; 0x2416 <m_wii_read+0x76>
		temp[i] = TWDR;
    241c:	d9 01       	movw	r26, r18
    241e:	8c 91       	ld	r24, X
    2420:	da 01       	movw	r26, r20
    2422:	8d 93       	st	X+, r24
    2424:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2426:	a0 17       	cp	r26, r16
    2428:	b1 07       	cpc	r27, r17
    242a:	a1 f7       	brne	.-24     	; 0x2414 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    242c:	84 e8       	ldi	r24, 0x84	; 132
    242e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2432:	ec eb       	ldi	r30, 0xBC	; 188
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	88 23       	and	r24, r24
    243a:	ec f7       	brge	.-6      	; 0x2436 <m_wii_read+0x96>
	temp[15] = TWDR;
    243c:	80 91 bb 00 	lds	r24, 0x00BB
    2440:	88 8b       	std	Y+16, r24	; 0x10
	end();
    2442:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
    2446:	de 01       	movw	r26, r28
    2448:	14 96       	adiw	r26, 0x04	; 4
    244a:	6e 2d       	mov	r22, r14
    244c:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    244e:	4c 91       	ld	r20, X
    2450:	24 2f       	mov	r18, r20
    2452:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2454:	cd 01       	movw	r24, r26
    2456:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	f0 e1       	ldi	r31, 0x10	; 16
    2460:	2f 9f       	mul	r18, r31
    2462:	80 0d       	add	r24, r0
    2464:	91 1d       	adc	r25, r1
    2466:	11 24       	eor	r1, r1
    2468:	fb 01       	movw	r30, r22
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    246e:	84 2f       	mov	r24, r20
    2470:	80 7c       	andi	r24, 0xC0	; 192
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    247c:	9d 01       	movw	r18, r26
    247e:	21 50       	subi	r18, 0x01	; 1
    2480:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2482:	f9 01       	movw	r30, r18
    2484:	20 81       	ld	r18, Z
    2486:	82 0f       	add	r24, r18
    2488:	91 1d       	adc	r25, r1
    248a:	fb 01       	movw	r30, r22
    248c:	93 83       	std	Z+3, r25	; 0x03
    248e:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2490:	4f 70       	andi	r20, 0x0F	; 15
    2492:	44 83       	std	Z+4, r20	; 0x04
    2494:	15 82       	std	Z+5, r1	; 0x05
    2496:	13 96       	adiw	r26, 0x03	; 3
    2498:	6a 5f       	subi	r22, 0xFA	; 250
    249a:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    249c:	0a 17       	cp	r16, r26
    249e:	1b 07       	cpc	r17, r27
    24a0:	b1 f6       	brne	.-84     	; 0x244e <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	01 c0       	rjmp	.+2      	; 0x24b0 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    24ae:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    24b0:	60 96       	adiw	r28, 0x10	; 16
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	ff 90       	pop	r15
    24c6:	ef 90       	pop	r14
    24c8:	08 95       	ret

000024ca <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    24ca:	0e 94 00 08 	call	0x1000	; 0x1000 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    24ce:	88 e5       	ldi	r24, 0x58	; 88
    24d0:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <m_wii_open+0x10>
    24d8:	c7 c0       	rjmp	.+398    	; 0x2668 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    24da:	80 e3       	ldi	r24, 0x30	; 48
    24dc:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    24e0:	88 23       	and	r24, r24
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <m_wii_open+0x1c>
    24e4:	c3 c0       	rjmp	.+390    	; 0x266c <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    24ec:	88 23       	and	r24, r24
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <m_wii_open+0x28>
    24f0:	bf c0       	rjmp	.+382    	; 0x2670 <m_wii_open+0x1a6>
	end();
    24f2:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24f6:	83 ec       	ldi	r24, 0xC3	; 195
    24f8:	99 e0       	ldi	r25, 0x09	; 9
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <m_wii_open+0x30>
    24fe:	00 c0       	rjmp	.+0      	; 0x2500 <m_wii_open+0x36>
    2500:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2502:	88 e5       	ldi	r24, 0x58	; 88
    2504:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    2508:	88 23       	and	r24, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <m_wii_open+0x44>
    250c:	b3 c0       	rjmp	.+358    	; 0x2674 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2514:	88 23       	and	r24, r24
    2516:	09 f4       	brne	.+2      	; 0x251a <m_wii_open+0x50>
    2518:	af c0       	rjmp	.+350    	; 0x2678 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2520:	88 23       	and	r24, r24
    2522:	09 f4       	brne	.+2      	; 0x2526 <m_wii_open+0x5c>
    2524:	ab c0       	rjmp	.+342    	; 0x267c <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    252c:	88 23       	and	r24, r24
    252e:	09 f4       	brne	.+2      	; 0x2532 <m_wii_open+0x68>
    2530:	a7 c0       	rjmp	.+334    	; 0x2680 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2538:	88 23       	and	r24, r24
    253a:	09 f4       	brne	.+2      	; 0x253e <m_wii_open+0x74>
    253c:	a3 c0       	rjmp	.+326    	; 0x2684 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2544:	88 23       	and	r24, r24
    2546:	09 f4       	brne	.+2      	; 0x254a <m_wii_open+0x80>
    2548:	9f c0       	rjmp	.+318    	; 0x2688 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2550:	88 23       	and	r24, r24
    2552:	09 f4       	brne	.+2      	; 0x2556 <m_wii_open+0x8c>
    2554:	9b c0       	rjmp	.+310    	; 0x268c <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    255c:	88 23       	and	r24, r24
    255e:	09 f4       	brne	.+2      	; 0x2562 <m_wii_open+0x98>
    2560:	97 c0       	rjmp	.+302    	; 0x2690 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2562:	80 e9       	ldi	r24, 0x90	; 144
    2564:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2568:	88 23       	and	r24, r24
    256a:	09 f4       	brne	.+2      	; 0x256e <m_wii_open+0xa4>
    256c:	93 c0       	rjmp	.+294    	; 0x2694 <m_wii_open+0x1ca>
	end();
    256e:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
    2572:	83 ec       	ldi	r24, 0xC3	; 195
    2574:	99 e0       	ldi	r25, 0x09	; 9
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <m_wii_open+0xac>
    257a:	00 c0       	rjmp	.+0      	; 0x257c <m_wii_open+0xb2>
    257c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    257e:	88 e5       	ldi	r24, 0x58	; 88
    2580:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    2584:	88 23       	and	r24, r24
    2586:	09 f4       	brne	.+2      	; 0x258a <m_wii_open+0xc0>
    2588:	87 c0       	rjmp	.+270    	; 0x2698 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    258a:	87 e0       	ldi	r24, 0x07	; 7
    258c:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2590:	88 23       	and	r24, r24
    2592:	09 f4       	brne	.+2      	; 0x2596 <m_wii_open+0xcc>
    2594:	83 c0       	rjmp	.+262    	; 0x269c <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    259c:	88 23       	and	r24, r24
    259e:	09 f4       	brne	.+2      	; 0x25a2 <m_wii_open+0xd8>
    25a0:	7f c0       	rjmp	.+254    	; 0x26a0 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    25a2:	81 e4       	ldi	r24, 0x41	; 65
    25a4:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    25a8:	88 23       	and	r24, r24
    25aa:	09 f4       	brne	.+2      	; 0x25ae <m_wii_open+0xe4>
    25ac:	7b c0       	rjmp	.+246    	; 0x26a4 <m_wii_open+0x1da>
	end();
    25ae:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
    25b2:	83 ec       	ldi	r24, 0xC3	; 195
    25b4:	99 e0       	ldi	r25, 0x09	; 9
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <m_wii_open+0xec>
    25ba:	00 c0       	rjmp	.+0      	; 0x25bc <m_wii_open+0xf2>
    25bc:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    25be:	88 e5       	ldi	r24, 0x58	; 88
    25c0:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    25c4:	88 23       	and	r24, r24
    25c6:	09 f4       	brne	.+2      	; 0x25ca <m_wii_open+0x100>
    25c8:	6f c0       	rjmp	.+222    	; 0x26a8 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    25ca:	8a e1       	ldi	r24, 0x1A	; 26
    25cc:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    25d0:	88 23       	and	r24, r24
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <m_wii_open+0x10c>
    25d4:	6b c0       	rjmp	.+214    	; 0x26ac <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    25d6:	80 e4       	ldi	r24, 0x40	; 64
    25d8:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    25dc:	88 23       	and	r24, r24
    25de:	09 f4       	brne	.+2      	; 0x25e2 <m_wii_open+0x118>
    25e0:	67 c0       	rjmp	.+206    	; 0x26b0 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    25e8:	88 23       	and	r24, r24
    25ea:	09 f4       	brne	.+2      	; 0x25ee <m_wii_open+0x124>
    25ec:	63 c0       	rjmp	.+198    	; 0x26b4 <m_wii_open+0x1ea>
	end();
    25ee:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
    25f2:	83 ec       	ldi	r24, 0xC3	; 195
    25f4:	99 e0       	ldi	r25, 0x09	; 9
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <m_wii_open+0x12c>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <m_wii_open+0x132>
    25fc:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    25fe:	88 e5       	ldi	r24, 0x58	; 88
    2600:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    2604:	88 23       	and	r24, r24
    2606:	09 f4       	brne	.+2      	; 0x260a <m_wii_open+0x140>
    2608:	57 c0       	rjmp	.+174    	; 0x26b8 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    260a:	83 e3       	ldi	r24, 0x33	; 51
    260c:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <m_wii_open+0x14c>
    2614:	53 c0       	rjmp	.+166    	; 0x26bc <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2616:	83 e0       	ldi	r24, 0x03	; 3
    2618:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    261c:	88 23       	and	r24, r24
    261e:	09 f4       	brne	.+2      	; 0x2622 <m_wii_open+0x158>
    2620:	4f c0       	rjmp	.+158    	; 0x26c0 <m_wii_open+0x1f6>
	end();
    2622:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
    2626:	83 ec       	ldi	r24, 0xC3	; 195
    2628:	99 e0       	ldi	r25, 0x09	; 9
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <m_wii_open+0x160>
    262e:	00 c0       	rjmp	.+0      	; 0x2630 <m_wii_open+0x166>
    2630:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2632:	88 e5       	ldi	r24, 0x58	; 88
    2634:	0e 94 b3 11 	call	0x2366	; 0x2366 <start_write>
    2638:	88 23       	and	r24, r24
    263a:	09 f4       	brne	.+2      	; 0x263e <m_wii_open+0x174>
    263c:	43 c0       	rjmp	.+134    	; 0x26c4 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    263e:	80 e3       	ldi	r24, 0x30	; 48
    2640:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2644:	88 23       	and	r24, r24
    2646:	09 f4       	brne	.+2      	; 0x264a <m_wii_open+0x180>
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    264a:	88 e0       	ldi	r24, 0x08	; 8
    264c:	0e 94 8a 11 	call	0x2314	; 0x2314 <send_byte>
    2650:	88 23       	and	r24, r24
    2652:	e1 f1       	breq	.+120    	; 0x26cc <m_wii_open+0x202>
	end();
    2654:	0e 94 cc 11 	call	0x2398	; 0x2398 <end>
    2658:	83 ec       	ldi	r24, 0xC3	; 195
    265a:	99 e0       	ldi	r25, 0x09	; 9
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <m_wii_open+0x192>
    2660:	00 c0       	rjmp	.+0      	; 0x2662 <m_wii_open+0x198>
    2662:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    26cc:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    26ce:	08 95       	ret

000026d0 <__subsf3>:
    26d0:	50 58       	subi	r21, 0x80	; 128

000026d2 <__addsf3>:
    26d2:	bb 27       	eor	r27, r27
    26d4:	aa 27       	eor	r26, r26
    26d6:	0e d0       	rcall	.+28     	; 0x26f4 <__addsf3x>
    26d8:	58 c2       	rjmp	.+1200   	; 0x2b8a <__fp_round>
    26da:	21 d2       	rcall	.+1090   	; 0x2b1e <__fp_pscA>
    26dc:	30 f0       	brcs	.+12     	; 0x26ea <__addsf3+0x18>
    26de:	26 d2       	rcall	.+1100   	; 0x2b2c <__fp_pscB>
    26e0:	20 f0       	brcs	.+8      	; 0x26ea <__addsf3+0x18>
    26e2:	31 f4       	brne	.+12     	; 0x26f0 <__addsf3+0x1e>
    26e4:	9f 3f       	cpi	r25, 0xFF	; 255
    26e6:	11 f4       	brne	.+4      	; 0x26ec <__addsf3+0x1a>
    26e8:	1e f4       	brtc	.+6      	; 0x26f0 <__addsf3+0x1e>
    26ea:	f1 c1       	rjmp	.+994    	; 0x2ace <__fp_nan>
    26ec:	0e f4       	brtc	.+2      	; 0x26f0 <__addsf3+0x1e>
    26ee:	e0 95       	com	r30
    26f0:	e7 fb       	bst	r30, 7
    26f2:	e7 c1       	rjmp	.+974    	; 0x2ac2 <__fp_inf>

000026f4 <__addsf3x>:
    26f4:	e9 2f       	mov	r30, r25
    26f6:	6b d2       	rcall	.+1238   	; 0x2bce <__fp_split3>
    26f8:	80 f3       	brcs	.-32     	; 0x26da <__addsf3+0x8>
    26fa:	ba 17       	cp	r27, r26
    26fc:	62 07       	cpc	r22, r18
    26fe:	73 07       	cpc	r23, r19
    2700:	84 07       	cpc	r24, r20
    2702:	95 07       	cpc	r25, r21
    2704:	18 f0       	brcs	.+6      	; 0x270c <__addsf3x+0x18>
    2706:	71 f4       	brne	.+28     	; 0x2724 <__addsf3x+0x30>
    2708:	9e f5       	brtc	.+102    	; 0x2770 <__addsf3x+0x7c>
    270a:	83 c2       	rjmp	.+1286   	; 0x2c12 <__fp_zero>
    270c:	0e f4       	brtc	.+2      	; 0x2710 <__addsf3x+0x1c>
    270e:	e0 95       	com	r30
    2710:	0b 2e       	mov	r0, r27
    2712:	ba 2f       	mov	r27, r26
    2714:	a0 2d       	mov	r26, r0
    2716:	0b 01       	movw	r0, r22
    2718:	b9 01       	movw	r22, r18
    271a:	90 01       	movw	r18, r0
    271c:	0c 01       	movw	r0, r24
    271e:	ca 01       	movw	r24, r20
    2720:	a0 01       	movw	r20, r0
    2722:	11 24       	eor	r1, r1
    2724:	ff 27       	eor	r31, r31
    2726:	59 1b       	sub	r21, r25
    2728:	99 f0       	breq	.+38     	; 0x2750 <__addsf3x+0x5c>
    272a:	59 3f       	cpi	r21, 0xF9	; 249
    272c:	50 f4       	brcc	.+20     	; 0x2742 <__addsf3x+0x4e>
    272e:	50 3e       	cpi	r21, 0xE0	; 224
    2730:	68 f1       	brcs	.+90     	; 0x278c <__addsf3x+0x98>
    2732:	1a 16       	cp	r1, r26
    2734:	f0 40       	sbci	r31, 0x00	; 0
    2736:	a2 2f       	mov	r26, r18
    2738:	23 2f       	mov	r18, r19
    273a:	34 2f       	mov	r19, r20
    273c:	44 27       	eor	r20, r20
    273e:	58 5f       	subi	r21, 0xF8	; 248
    2740:	f3 cf       	rjmp	.-26     	; 0x2728 <__addsf3x+0x34>
    2742:	46 95       	lsr	r20
    2744:	37 95       	ror	r19
    2746:	27 95       	ror	r18
    2748:	a7 95       	ror	r26
    274a:	f0 40       	sbci	r31, 0x00	; 0
    274c:	53 95       	inc	r21
    274e:	c9 f7       	brne	.-14     	; 0x2742 <__addsf3x+0x4e>
    2750:	7e f4       	brtc	.+30     	; 0x2770 <__addsf3x+0x7c>
    2752:	1f 16       	cp	r1, r31
    2754:	ba 0b       	sbc	r27, r26
    2756:	62 0b       	sbc	r22, r18
    2758:	73 0b       	sbc	r23, r19
    275a:	84 0b       	sbc	r24, r20
    275c:	ba f0       	brmi	.+46     	; 0x278c <__addsf3x+0x98>
    275e:	91 50       	subi	r25, 0x01	; 1
    2760:	a1 f0       	breq	.+40     	; 0x278a <__addsf3x+0x96>
    2762:	ff 0f       	add	r31, r31
    2764:	bb 1f       	adc	r27, r27
    2766:	66 1f       	adc	r22, r22
    2768:	77 1f       	adc	r23, r23
    276a:	88 1f       	adc	r24, r24
    276c:	c2 f7       	brpl	.-16     	; 0x275e <__addsf3x+0x6a>
    276e:	0e c0       	rjmp	.+28     	; 0x278c <__addsf3x+0x98>
    2770:	ba 0f       	add	r27, r26
    2772:	62 1f       	adc	r22, r18
    2774:	73 1f       	adc	r23, r19
    2776:	84 1f       	adc	r24, r20
    2778:	48 f4       	brcc	.+18     	; 0x278c <__addsf3x+0x98>
    277a:	87 95       	ror	r24
    277c:	77 95       	ror	r23
    277e:	67 95       	ror	r22
    2780:	b7 95       	ror	r27
    2782:	f7 95       	ror	r31
    2784:	9e 3f       	cpi	r25, 0xFE	; 254
    2786:	08 f0       	brcs	.+2      	; 0x278a <__addsf3x+0x96>
    2788:	b3 cf       	rjmp	.-154    	; 0x26f0 <__addsf3+0x1e>
    278a:	93 95       	inc	r25
    278c:	88 0f       	add	r24, r24
    278e:	08 f0       	brcs	.+2      	; 0x2792 <__addsf3x+0x9e>
    2790:	99 27       	eor	r25, r25
    2792:	ee 0f       	add	r30, r30
    2794:	97 95       	ror	r25
    2796:	87 95       	ror	r24
    2798:	08 95       	ret
    279a:	c1 d1       	rcall	.+898    	; 0x2b1e <__fp_pscA>
    279c:	58 f0       	brcs	.+22     	; 0x27b4 <__addsf3x+0xc0>
    279e:	80 e8       	ldi	r24, 0x80	; 128
    27a0:	91 e0       	ldi	r25, 0x01	; 1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <__addsf3x+0xb2>
    27a4:	9e ef       	ldi	r25, 0xFE	; 254
    27a6:	c2 d1       	rcall	.+900    	; 0x2b2c <__fp_pscB>
    27a8:	28 f0       	brcs	.+10     	; 0x27b4 <__addsf3x+0xc0>
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	51 e0       	ldi	r21, 0x01	; 1
    27ae:	59 f4       	brne	.+22     	; 0x27c6 <atan2+0xe>
    27b0:	5e ef       	ldi	r21, 0xFE	; 254
    27b2:	09 c0       	rjmp	.+18     	; 0x27c6 <atan2+0xe>
    27b4:	8c c1       	rjmp	.+792    	; 0x2ace <__fp_nan>
    27b6:	2d c2       	rjmp	.+1114   	; 0x2c12 <__fp_zero>

000027b8 <atan2>:
    27b8:	e9 2f       	mov	r30, r25
    27ba:	e0 78       	andi	r30, 0x80	; 128
    27bc:	08 d2       	rcall	.+1040   	; 0x2bce <__fp_split3>
    27be:	68 f3       	brcs	.-38     	; 0x279a <__addsf3x+0xa6>
    27c0:	09 2e       	mov	r0, r25
    27c2:	05 2a       	or	r0, r21
    27c4:	c1 f3       	breq	.-16     	; 0x27b6 <__addsf3x+0xc2>
    27c6:	26 17       	cp	r18, r22
    27c8:	37 07       	cpc	r19, r23
    27ca:	48 07       	cpc	r20, r24
    27cc:	59 07       	cpc	r21, r25
    27ce:	38 f0       	brcs	.+14     	; 0x27de <atan2+0x26>
    27d0:	0e 2e       	mov	r0, r30
    27d2:	07 f8       	bld	r0, 7
    27d4:	e0 25       	eor	r30, r0
    27d6:	69 f0       	breq	.+26     	; 0x27f2 <atan2+0x3a>
    27d8:	e0 25       	eor	r30, r0
    27da:	e0 64       	ori	r30, 0x40	; 64
    27dc:	0a c0       	rjmp	.+20     	; 0x27f2 <atan2+0x3a>
    27de:	ef 63       	ori	r30, 0x3F	; 63
    27e0:	07 f8       	bld	r0, 7
    27e2:	00 94       	com	r0
    27e4:	07 fa       	bst	r0, 7
    27e6:	db 01       	movw	r26, r22
    27e8:	b9 01       	movw	r22, r18
    27ea:	9d 01       	movw	r18, r26
    27ec:	dc 01       	movw	r26, r24
    27ee:	ca 01       	movw	r24, r20
    27f0:	ad 01       	movw	r20, r26
    27f2:	ef 93       	push	r30
    27f4:	4a d0       	rcall	.+148    	; 0x288a <__divsf3_pse>
    27f6:	c9 d1       	rcall	.+914    	; 0x2b8a <__fp_round>
    27f8:	0a d0       	rcall	.+20     	; 0x280e <atan>
    27fa:	5f 91       	pop	r21
    27fc:	55 23       	and	r21, r21
    27fe:	31 f0       	breq	.+12     	; 0x280c <atan2+0x54>
    2800:	2b ed       	ldi	r18, 0xDB	; 219
    2802:	3f e0       	ldi	r19, 0x0F	; 15
    2804:	49 e4       	ldi	r20, 0x49	; 73
    2806:	50 fd       	sbrc	r21, 0
    2808:	49 ec       	ldi	r20, 0xC9	; 201
    280a:	63 cf       	rjmp	.-314    	; 0x26d2 <__addsf3>
    280c:	08 95       	ret

0000280e <atan>:
    280e:	df 93       	push	r29
    2810:	dd 27       	eor	r29, r29
    2812:	b9 2f       	mov	r27, r25
    2814:	bf 77       	andi	r27, 0x7F	; 127
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	16 16       	cp	r1, r22
    281c:	17 06       	cpc	r1, r23
    281e:	48 07       	cpc	r20, r24
    2820:	5b 07       	cpc	r21, r27
    2822:	10 f4       	brcc	.+4      	; 0x2828 <atan+0x1a>
    2824:	d9 2f       	mov	r29, r25
    2826:	00 d2       	rcall	.+1024   	; 0x2c28 <inverse>
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	7f 93       	push	r23
    282e:	6f 93       	push	r22
    2830:	16 d3       	rcall	.+1580   	; 0x2e5e <square>
    2832:	ec ea       	ldi	r30, 0xAC	; 172
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	4e d1       	rcall	.+668    	; 0x2ad4 <__fp_powser>
    2838:	a8 d1       	rcall	.+848    	; 0x2b8a <__fp_round>
    283a:	2f 91       	pop	r18
    283c:	3f 91       	pop	r19
    283e:	4f 91       	pop	r20
    2840:	5f 91       	pop	r21
    2842:	6e d2       	rcall	.+1244   	; 0x2d20 <__mulsf3x>
    2844:	dd 23       	and	r29, r29
    2846:	49 f0       	breq	.+18     	; 0x285a <atan+0x4c>
    2848:	90 58       	subi	r25, 0x80	; 128
    284a:	a2 ea       	ldi	r26, 0xA2	; 162
    284c:	2a ed       	ldi	r18, 0xDA	; 218
    284e:	3f e0       	ldi	r19, 0x0F	; 15
    2850:	49 ec       	ldi	r20, 0xC9	; 201
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	d0 78       	andi	r29, 0x80	; 128
    2856:	5d 27       	eor	r21, r29
    2858:	4d df       	rcall	.-358    	; 0x26f4 <__addsf3x>
    285a:	df 91       	pop	r29
    285c:	96 c1       	rjmp	.+812    	; 0x2b8a <__fp_round>

0000285e <__cmpsf2>:
    285e:	0d d1       	rcall	.+538    	; 0x2a7a <__fp_cmp>
    2860:	08 f4       	brcc	.+2      	; 0x2864 <__cmpsf2+0x6>
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	08 95       	ret

00002866 <cos>:
    2866:	6a d1       	rcall	.+724    	; 0x2b3c <__fp_rempio2>
    2868:	e3 95       	inc	r30
    286a:	a0 c1       	rjmp	.+832    	; 0x2bac <__fp_sinus>

0000286c <__divsf3>:
    286c:	0c d0       	rcall	.+24     	; 0x2886 <__divsf3x>
    286e:	8d c1       	rjmp	.+794    	; 0x2b8a <__fp_round>
    2870:	5d d1       	rcall	.+698    	; 0x2b2c <__fp_pscB>
    2872:	40 f0       	brcs	.+16     	; 0x2884 <__divsf3+0x18>
    2874:	54 d1       	rcall	.+680    	; 0x2b1e <__fp_pscA>
    2876:	30 f0       	brcs	.+12     	; 0x2884 <__divsf3+0x18>
    2878:	21 f4       	brne	.+8      	; 0x2882 <__divsf3+0x16>
    287a:	5f 3f       	cpi	r21, 0xFF	; 255
    287c:	19 f0       	breq	.+6      	; 0x2884 <__divsf3+0x18>
    287e:	21 c1       	rjmp	.+578    	; 0x2ac2 <__fp_inf>
    2880:	51 11       	cpse	r21, r1
    2882:	c8 c1       	rjmp	.+912    	; 0x2c14 <__fp_szero>
    2884:	24 c1       	rjmp	.+584    	; 0x2ace <__fp_nan>

00002886 <__divsf3x>:
    2886:	a3 d1       	rcall	.+838    	; 0x2bce <__fp_split3>
    2888:	98 f3       	brcs	.-26     	; 0x2870 <__divsf3+0x4>

0000288a <__divsf3_pse>:
    288a:	99 23       	and	r25, r25
    288c:	c9 f3       	breq	.-14     	; 0x2880 <__divsf3+0x14>
    288e:	55 23       	and	r21, r21
    2890:	b1 f3       	breq	.-20     	; 0x287e <__divsf3+0x12>
    2892:	95 1b       	sub	r25, r21
    2894:	55 0b       	sbc	r21, r21
    2896:	bb 27       	eor	r27, r27
    2898:	aa 27       	eor	r26, r26
    289a:	62 17       	cp	r22, r18
    289c:	73 07       	cpc	r23, r19
    289e:	84 07       	cpc	r24, r20
    28a0:	38 f0       	brcs	.+14     	; 0x28b0 <__divsf3_pse+0x26>
    28a2:	9f 5f       	subi	r25, 0xFF	; 255
    28a4:	5f 4f       	sbci	r21, 0xFF	; 255
    28a6:	22 0f       	add	r18, r18
    28a8:	33 1f       	adc	r19, r19
    28aa:	44 1f       	adc	r20, r20
    28ac:	aa 1f       	adc	r26, r26
    28ae:	a9 f3       	breq	.-22     	; 0x289a <__divsf3_pse+0x10>
    28b0:	33 d0       	rcall	.+102    	; 0x2918 <__divsf3_pse+0x8e>
    28b2:	0e 2e       	mov	r0, r30
    28b4:	3a f0       	brmi	.+14     	; 0x28c4 <__divsf3_pse+0x3a>
    28b6:	e0 e8       	ldi	r30, 0x80	; 128
    28b8:	30 d0       	rcall	.+96     	; 0x291a <__divsf3_pse+0x90>
    28ba:	91 50       	subi	r25, 0x01	; 1
    28bc:	50 40       	sbci	r21, 0x00	; 0
    28be:	e6 95       	lsr	r30
    28c0:	00 1c       	adc	r0, r0
    28c2:	ca f7       	brpl	.-14     	; 0x28b6 <__divsf3_pse+0x2c>
    28c4:	29 d0       	rcall	.+82     	; 0x2918 <__divsf3_pse+0x8e>
    28c6:	fe 2f       	mov	r31, r30
    28c8:	27 d0       	rcall	.+78     	; 0x2918 <__divsf3_pse+0x8e>
    28ca:	66 0f       	add	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	88 1f       	adc	r24, r24
    28d0:	bb 1f       	adc	r27, r27
    28d2:	26 17       	cp	r18, r22
    28d4:	37 07       	cpc	r19, r23
    28d6:	48 07       	cpc	r20, r24
    28d8:	ab 07       	cpc	r26, r27
    28da:	b0 e8       	ldi	r27, 0x80	; 128
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <__divsf3_pse+0x56>
    28de:	bb 0b       	sbc	r27, r27
    28e0:	80 2d       	mov	r24, r0
    28e2:	bf 01       	movw	r22, r30
    28e4:	ff 27       	eor	r31, r31
    28e6:	93 58       	subi	r25, 0x83	; 131
    28e8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ea:	2a f0       	brmi	.+10     	; 0x28f6 <__divsf3_pse+0x6c>
    28ec:	9e 3f       	cpi	r25, 0xFE	; 254
    28ee:	51 05       	cpc	r21, r1
    28f0:	68 f0       	brcs	.+26     	; 0x290c <__divsf3_pse+0x82>
    28f2:	e7 c0       	rjmp	.+462    	; 0x2ac2 <__fp_inf>
    28f4:	8f c1       	rjmp	.+798    	; 0x2c14 <__fp_szero>
    28f6:	5f 3f       	cpi	r21, 0xFF	; 255
    28f8:	ec f3       	brlt	.-6      	; 0x28f4 <__divsf3_pse+0x6a>
    28fa:	98 3e       	cpi	r25, 0xE8	; 232
    28fc:	dc f3       	brlt	.-10     	; 0x28f4 <__divsf3_pse+0x6a>
    28fe:	86 95       	lsr	r24
    2900:	77 95       	ror	r23
    2902:	67 95       	ror	r22
    2904:	b7 95       	ror	r27
    2906:	f7 95       	ror	r31
    2908:	9f 5f       	subi	r25, 0xFF	; 255
    290a:	c9 f7       	brne	.-14     	; 0x28fe <__divsf3_pse+0x74>
    290c:	88 0f       	add	r24, r24
    290e:	91 1d       	adc	r25, r1
    2910:	96 95       	lsr	r25
    2912:	87 95       	ror	r24
    2914:	97 f9       	bld	r25, 7
    2916:	08 95       	ret
    2918:	e1 e0       	ldi	r30, 0x01	; 1
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	bb 1f       	adc	r27, r27
    2922:	62 17       	cp	r22, r18
    2924:	73 07       	cpc	r23, r19
    2926:	84 07       	cpc	r24, r20
    2928:	ba 07       	cpc	r27, r26
    292a:	20 f0       	brcs	.+8      	; 0x2934 <__divsf3_pse+0xaa>
    292c:	62 1b       	sub	r22, r18
    292e:	73 0b       	sbc	r23, r19
    2930:	84 0b       	sbc	r24, r20
    2932:	ba 0b       	sbc	r27, r26
    2934:	ee 1f       	adc	r30, r30
    2936:	88 f7       	brcc	.-30     	; 0x291a <__divsf3_pse+0x90>
    2938:	e0 95       	com	r30
    293a:	08 95       	ret
    293c:	19 f4       	brne	.+6      	; 0x2944 <__divsf3_pse+0xba>
    293e:	0e f0       	brts	.+2      	; 0x2942 <__divsf3_pse+0xb8>
    2940:	c0 c0       	rjmp	.+384    	; 0x2ac2 <__fp_inf>
    2942:	67 c1       	rjmp	.+718    	; 0x2c12 <__fp_zero>
    2944:	c4 c0       	rjmp	.+392    	; 0x2ace <__fp_nan>

00002946 <exp>:
    2946:	4b d1       	rcall	.+662    	; 0x2bde <__fp_splitA>
    2948:	c8 f3       	brcs	.-14     	; 0x293c <__divsf3_pse+0xb2>
    294a:	96 38       	cpi	r25, 0x86	; 134
    294c:	c0 f7       	brcc	.-16     	; 0x293e <__divsf3_pse+0xb4>
    294e:	07 f8       	bld	r0, 7
    2950:	0f 92       	push	r0
    2952:	e8 94       	clt
    2954:	2b e3       	ldi	r18, 0x3B	; 59
    2956:	3a ea       	ldi	r19, 0xAA	; 170
    2958:	48 eb       	ldi	r20, 0xB8	; 184
    295a:	5f e7       	ldi	r21, 0x7F	; 127
    295c:	e3 d1       	rcall	.+966    	; 0x2d24 <__mulsf3_pse>
    295e:	0f 92       	push	r0
    2960:	0f 92       	push	r0
    2962:	0f 92       	push	r0
    2964:	4d b7       	in	r20, 0x3d	; 61
    2966:	5e b7       	in	r21, 0x3e	; 62
    2968:	0f 92       	push	r0
    296a:	9b d1       	rcall	.+822    	; 0x2ca2 <modf>
    296c:	e9 ed       	ldi	r30, 0xD9	; 217
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	b1 d0       	rcall	.+354    	; 0x2ad4 <__fp_powser>
    2972:	4f 91       	pop	r20
    2974:	5f 91       	pop	r21
    2976:	ef 91       	pop	r30
    2978:	ff 91       	pop	r31
    297a:	e5 95       	asr	r30
    297c:	ee 1f       	adc	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	49 f0       	breq	.+18     	; 0x2994 <exp+0x4e>
    2982:	fe 57       	subi	r31, 0x7E	; 126
    2984:	e0 68       	ori	r30, 0x80	; 128
    2986:	44 27       	eor	r20, r20
    2988:	ee 0f       	add	r30, r30
    298a:	44 1f       	adc	r20, r20
    298c:	fa 95       	dec	r31
    298e:	e1 f7       	brne	.-8      	; 0x2988 <exp+0x42>
    2990:	41 95       	neg	r20
    2992:	55 0b       	sbc	r21, r21
    2994:	52 d1       	rcall	.+676    	; 0x2c3a <ldexp>
    2996:	0f 90       	pop	r0
    2998:	07 fe       	sbrs	r0, 7
    299a:	46 c1       	rjmp	.+652    	; 0x2c28 <inverse>
    299c:	08 95       	ret

0000299e <__fixsfsi>:
    299e:	04 d0       	rcall	.+8      	; 0x29a8 <__fixunssfsi>
    29a0:	68 94       	set
    29a2:	b1 11       	cpse	r27, r1
    29a4:	37 c1       	rjmp	.+622    	; 0x2c14 <__fp_szero>
    29a6:	08 95       	ret

000029a8 <__fixunssfsi>:
    29a8:	1a d1       	rcall	.+564    	; 0x2bde <__fp_splitA>
    29aa:	88 f0       	brcs	.+34     	; 0x29ce <__fixunssfsi+0x26>
    29ac:	9f 57       	subi	r25, 0x7F	; 127
    29ae:	90 f0       	brcs	.+36     	; 0x29d4 <__fixunssfsi+0x2c>
    29b0:	b9 2f       	mov	r27, r25
    29b2:	99 27       	eor	r25, r25
    29b4:	b7 51       	subi	r27, 0x17	; 23
    29b6:	a0 f0       	brcs	.+40     	; 0x29e0 <__fixunssfsi+0x38>
    29b8:	d1 f0       	breq	.+52     	; 0x29ee <__fixunssfsi+0x46>
    29ba:	66 0f       	add	r22, r22
    29bc:	77 1f       	adc	r23, r23
    29be:	88 1f       	adc	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	1a f0       	brmi	.+6      	; 0x29ca <__fixunssfsi+0x22>
    29c4:	ba 95       	dec	r27
    29c6:	c9 f7       	brne	.-14     	; 0x29ba <__fixunssfsi+0x12>
    29c8:	12 c0       	rjmp	.+36     	; 0x29ee <__fixunssfsi+0x46>
    29ca:	b1 30       	cpi	r27, 0x01	; 1
    29cc:	81 f0       	breq	.+32     	; 0x29ee <__fixunssfsi+0x46>
    29ce:	21 d1       	rcall	.+578    	; 0x2c12 <__fp_zero>
    29d0:	b1 e0       	ldi	r27, 0x01	; 1
    29d2:	08 95       	ret
    29d4:	1e c1       	rjmp	.+572    	; 0x2c12 <__fp_zero>
    29d6:	67 2f       	mov	r22, r23
    29d8:	78 2f       	mov	r23, r24
    29da:	88 27       	eor	r24, r24
    29dc:	b8 5f       	subi	r27, 0xF8	; 248
    29de:	39 f0       	breq	.+14     	; 0x29ee <__fixunssfsi+0x46>
    29e0:	b9 3f       	cpi	r27, 0xF9	; 249
    29e2:	cc f3       	brlt	.-14     	; 0x29d6 <__fixunssfsi+0x2e>
    29e4:	86 95       	lsr	r24
    29e6:	77 95       	ror	r23
    29e8:	67 95       	ror	r22
    29ea:	b3 95       	inc	r27
    29ec:	d9 f7       	brne	.-10     	; 0x29e4 <__fixunssfsi+0x3c>
    29ee:	3e f4       	brtc	.+14     	; 0x29fe <__fixunssfsi+0x56>
    29f0:	90 95       	com	r25
    29f2:	80 95       	com	r24
    29f4:	70 95       	com	r23
    29f6:	61 95       	neg	r22
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	8f 4f       	sbci	r24, 0xFF	; 255
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	08 95       	ret

00002a00 <__floatunsisf>:
    2a00:	e8 94       	clt
    2a02:	09 c0       	rjmp	.+18     	; 0x2a16 <__floatsisf+0x12>

00002a04 <__floatsisf>:
    2a04:	97 fb       	bst	r25, 7
    2a06:	3e f4       	brtc	.+14     	; 0x2a16 <__floatsisf+0x12>
    2a08:	90 95       	com	r25
    2a0a:	80 95       	com	r24
    2a0c:	70 95       	com	r23
    2a0e:	61 95       	neg	r22
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	8f 4f       	sbci	r24, 0xFF	; 255
    2a14:	9f 4f       	sbci	r25, 0xFF	; 255
    2a16:	99 23       	and	r25, r25
    2a18:	a9 f0       	breq	.+42     	; 0x2a44 <__floatsisf+0x40>
    2a1a:	f9 2f       	mov	r31, r25
    2a1c:	96 e9       	ldi	r25, 0x96	; 150
    2a1e:	bb 27       	eor	r27, r27
    2a20:	93 95       	inc	r25
    2a22:	f6 95       	lsr	r31
    2a24:	87 95       	ror	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	b7 95       	ror	r27
    2a2c:	f1 11       	cpse	r31, r1
    2a2e:	f8 cf       	rjmp	.-16     	; 0x2a20 <__floatsisf+0x1c>
    2a30:	fa f4       	brpl	.+62     	; 0x2a70 <__floatsisf+0x6c>
    2a32:	bb 0f       	add	r27, r27
    2a34:	11 f4       	brne	.+4      	; 0x2a3a <__floatsisf+0x36>
    2a36:	60 ff       	sbrs	r22, 0
    2a38:	1b c0       	rjmp	.+54     	; 0x2a70 <__floatsisf+0x6c>
    2a3a:	6f 5f       	subi	r22, 0xFF	; 255
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a40:	9f 4f       	sbci	r25, 0xFF	; 255
    2a42:	16 c0       	rjmp	.+44     	; 0x2a70 <__floatsisf+0x6c>
    2a44:	88 23       	and	r24, r24
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <__floatsisf+0x48>
    2a48:	96 e9       	ldi	r25, 0x96	; 150
    2a4a:	11 c0       	rjmp	.+34     	; 0x2a6e <__floatsisf+0x6a>
    2a4c:	77 23       	and	r23, r23
    2a4e:	21 f0       	breq	.+8      	; 0x2a58 <__floatsisf+0x54>
    2a50:	9e e8       	ldi	r25, 0x8E	; 142
    2a52:	87 2f       	mov	r24, r23
    2a54:	76 2f       	mov	r23, r22
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <__floatsisf+0x5e>
    2a58:	66 23       	and	r22, r22
    2a5a:	71 f0       	breq	.+28     	; 0x2a78 <__floatsisf+0x74>
    2a5c:	96 e8       	ldi	r25, 0x86	; 134
    2a5e:	86 2f       	mov	r24, r22
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	2a f0       	brmi	.+10     	; 0x2a70 <__floatsisf+0x6c>
    2a66:	9a 95       	dec	r25
    2a68:	66 0f       	add	r22, r22
    2a6a:	77 1f       	adc	r23, r23
    2a6c:	88 1f       	adc	r24, r24
    2a6e:	da f7       	brpl	.-10     	; 0x2a66 <__floatsisf+0x62>
    2a70:	88 0f       	add	r24, r24
    2a72:	96 95       	lsr	r25
    2a74:	87 95       	ror	r24
    2a76:	97 f9       	bld	r25, 7
    2a78:	08 95       	ret

00002a7a <__fp_cmp>:
    2a7a:	99 0f       	add	r25, r25
    2a7c:	00 08       	sbc	r0, r0
    2a7e:	55 0f       	add	r21, r21
    2a80:	aa 0b       	sbc	r26, r26
    2a82:	e0 e8       	ldi	r30, 0x80	; 128
    2a84:	fe ef       	ldi	r31, 0xFE	; 254
    2a86:	16 16       	cp	r1, r22
    2a88:	17 06       	cpc	r1, r23
    2a8a:	e8 07       	cpc	r30, r24
    2a8c:	f9 07       	cpc	r31, r25
    2a8e:	c0 f0       	brcs	.+48     	; 0x2ac0 <__fp_cmp+0x46>
    2a90:	12 16       	cp	r1, r18
    2a92:	13 06       	cpc	r1, r19
    2a94:	e4 07       	cpc	r30, r20
    2a96:	f5 07       	cpc	r31, r21
    2a98:	98 f0       	brcs	.+38     	; 0x2ac0 <__fp_cmp+0x46>
    2a9a:	62 1b       	sub	r22, r18
    2a9c:	73 0b       	sbc	r23, r19
    2a9e:	84 0b       	sbc	r24, r20
    2aa0:	95 0b       	sbc	r25, r21
    2aa2:	39 f4       	brne	.+14     	; 0x2ab2 <__fp_cmp+0x38>
    2aa4:	0a 26       	eor	r0, r26
    2aa6:	61 f0       	breq	.+24     	; 0x2ac0 <__fp_cmp+0x46>
    2aa8:	23 2b       	or	r18, r19
    2aaa:	24 2b       	or	r18, r20
    2aac:	25 2b       	or	r18, r21
    2aae:	21 f4       	brne	.+8      	; 0x2ab8 <__fp_cmp+0x3e>
    2ab0:	08 95       	ret
    2ab2:	0a 26       	eor	r0, r26
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <__fp_cmp+0x3e>
    2ab6:	a1 40       	sbci	r26, 0x01	; 1
    2ab8:	a6 95       	lsr	r26
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	81 1d       	adc	r24, r1
    2abe:	81 1d       	adc	r24, r1
    2ac0:	08 95       	ret

00002ac2 <__fp_inf>:
    2ac2:	97 f9       	bld	r25, 7
    2ac4:	9f 67       	ori	r25, 0x7F	; 127
    2ac6:	80 e8       	ldi	r24, 0x80	; 128
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	08 95       	ret

00002ace <__fp_nan>:
    2ace:	9f ef       	ldi	r25, 0xFF	; 255
    2ad0:	80 ec       	ldi	r24, 0xC0	; 192
    2ad2:	08 95       	ret

00002ad4 <__fp_powser>:
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	1f 93       	push	r17
    2ada:	0f 93       	push	r16
    2adc:	ff 92       	push	r15
    2ade:	ef 92       	push	r14
    2ae0:	df 92       	push	r13
    2ae2:	7b 01       	movw	r14, r22
    2ae4:	8c 01       	movw	r16, r24
    2ae6:	68 94       	set
    2ae8:	05 c0       	rjmp	.+10     	; 0x2af4 <__fp_powser+0x20>
    2aea:	da 2e       	mov	r13, r26
    2aec:	ef 01       	movw	r28, r30
    2aee:	18 d1       	rcall	.+560    	; 0x2d20 <__mulsf3x>
    2af0:	fe 01       	movw	r30, r28
    2af2:	e8 94       	clt
    2af4:	a5 91       	lpm	r26, Z+
    2af6:	25 91       	lpm	r18, Z+
    2af8:	35 91       	lpm	r19, Z+
    2afa:	45 91       	lpm	r20, Z+
    2afc:	55 91       	lpm	r21, Z+
    2afe:	ae f3       	brts	.-22     	; 0x2aea <__fp_powser+0x16>
    2b00:	ef 01       	movw	r28, r30
    2b02:	f8 dd       	rcall	.-1040   	; 0x26f4 <__addsf3x>
    2b04:	fe 01       	movw	r30, r28
    2b06:	97 01       	movw	r18, r14
    2b08:	a8 01       	movw	r20, r16
    2b0a:	da 94       	dec	r13
    2b0c:	79 f7       	brne	.-34     	; 0x2aec <__fp_powser+0x18>
    2b0e:	df 90       	pop	r13
    2b10:	ef 90       	pop	r14
    2b12:	ff 90       	pop	r15
    2b14:	0f 91       	pop	r16
    2b16:	1f 91       	pop	r17
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	08 95       	ret

00002b1e <__fp_pscA>:
    2b1e:	00 24       	eor	r0, r0
    2b20:	0a 94       	dec	r0
    2b22:	16 16       	cp	r1, r22
    2b24:	17 06       	cpc	r1, r23
    2b26:	18 06       	cpc	r1, r24
    2b28:	09 06       	cpc	r0, r25
    2b2a:	08 95       	ret

00002b2c <__fp_pscB>:
    2b2c:	00 24       	eor	r0, r0
    2b2e:	0a 94       	dec	r0
    2b30:	12 16       	cp	r1, r18
    2b32:	13 06       	cpc	r1, r19
    2b34:	14 06       	cpc	r1, r20
    2b36:	05 06       	cpc	r0, r21
    2b38:	08 95       	ret
    2b3a:	c9 cf       	rjmp	.-110    	; 0x2ace <__fp_nan>

00002b3c <__fp_rempio2>:
    2b3c:	50 d0       	rcall	.+160    	; 0x2bde <__fp_splitA>
    2b3e:	e8 f3       	brcs	.-6      	; 0x2b3a <__fp_pscB+0xe>
    2b40:	e8 94       	clt
    2b42:	e0 e0       	ldi	r30, 0x00	; 0
    2b44:	bb 27       	eor	r27, r27
    2b46:	9f 57       	subi	r25, 0x7F	; 127
    2b48:	f0 f0       	brcs	.+60     	; 0x2b86 <__fp_rempio2+0x4a>
    2b4a:	2a ed       	ldi	r18, 0xDA	; 218
    2b4c:	3f e0       	ldi	r19, 0x0F	; 15
    2b4e:	49 ec       	ldi	r20, 0xC9	; 201
    2b50:	06 c0       	rjmp	.+12     	; 0x2b5e <__fp_rempio2+0x22>
    2b52:	ee 0f       	add	r30, r30
    2b54:	bb 0f       	add	r27, r27
    2b56:	66 1f       	adc	r22, r22
    2b58:	77 1f       	adc	r23, r23
    2b5a:	88 1f       	adc	r24, r24
    2b5c:	28 f0       	brcs	.+10     	; 0x2b68 <__fp_rempio2+0x2c>
    2b5e:	b2 3a       	cpi	r27, 0xA2	; 162
    2b60:	62 07       	cpc	r22, r18
    2b62:	73 07       	cpc	r23, r19
    2b64:	84 07       	cpc	r24, r20
    2b66:	28 f0       	brcs	.+10     	; 0x2b72 <__fp_rempio2+0x36>
    2b68:	b2 5a       	subi	r27, 0xA2	; 162
    2b6a:	62 0b       	sbc	r22, r18
    2b6c:	73 0b       	sbc	r23, r19
    2b6e:	84 0b       	sbc	r24, r20
    2b70:	e3 95       	inc	r30
    2b72:	9a 95       	dec	r25
    2b74:	72 f7       	brpl	.-36     	; 0x2b52 <__fp_rempio2+0x16>
    2b76:	80 38       	cpi	r24, 0x80	; 128
    2b78:	30 f4       	brcc	.+12     	; 0x2b86 <__fp_rempio2+0x4a>
    2b7a:	9a 95       	dec	r25
    2b7c:	bb 0f       	add	r27, r27
    2b7e:	66 1f       	adc	r22, r22
    2b80:	77 1f       	adc	r23, r23
    2b82:	88 1f       	adc	r24, r24
    2b84:	d2 f7       	brpl	.-12     	; 0x2b7a <__fp_rempio2+0x3e>
    2b86:	90 48       	sbci	r25, 0x80	; 128
    2b88:	6f c1       	rjmp	.+734    	; 0x2e68 <__fp_mpack_finite>

00002b8a <__fp_round>:
    2b8a:	09 2e       	mov	r0, r25
    2b8c:	03 94       	inc	r0
    2b8e:	00 0c       	add	r0, r0
    2b90:	11 f4       	brne	.+4      	; 0x2b96 <__fp_round+0xc>
    2b92:	88 23       	and	r24, r24
    2b94:	52 f0       	brmi	.+20     	; 0x2baa <__fp_round+0x20>
    2b96:	bb 0f       	add	r27, r27
    2b98:	40 f4       	brcc	.+16     	; 0x2baa <__fp_round+0x20>
    2b9a:	bf 2b       	or	r27, r31
    2b9c:	11 f4       	brne	.+4      	; 0x2ba2 <__fp_round+0x18>
    2b9e:	60 ff       	sbrs	r22, 0
    2ba0:	04 c0       	rjmp	.+8      	; 0x2baa <__fp_round+0x20>
    2ba2:	6f 5f       	subi	r22, 0xFF	; 255
    2ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    2baa:	08 95       	ret

00002bac <__fp_sinus>:
    2bac:	ef 93       	push	r30
    2bae:	e0 ff       	sbrs	r30, 0
    2bb0:	06 c0       	rjmp	.+12     	; 0x2bbe <__fp_sinus+0x12>
    2bb2:	a2 ea       	ldi	r26, 0xA2	; 162
    2bb4:	2a ed       	ldi	r18, 0xDA	; 218
    2bb6:	3f e0       	ldi	r19, 0x0F	; 15
    2bb8:	49 ec       	ldi	r20, 0xC9	; 201
    2bba:	5f eb       	ldi	r21, 0xBF	; 191
    2bbc:	9b dd       	rcall	.-1226   	; 0x26f4 <__addsf3x>
    2bbe:	e5 df       	rcall	.-54     	; 0x2b8a <__fp_round>
    2bc0:	0f 90       	pop	r0
    2bc2:	03 94       	inc	r0
    2bc4:	01 fc       	sbrc	r0, 1
    2bc6:	90 58       	subi	r25, 0x80	; 128
    2bc8:	e1 e0       	ldi	r30, 0x01	; 1
    2bca:	f1 e0       	ldi	r31, 0x01	; 1
    2bcc:	60 c1       	rjmp	.+704    	; 0x2e8e <__fp_powsodd>

00002bce <__fp_split3>:
    2bce:	57 fd       	sbrc	r21, 7
    2bd0:	90 58       	subi	r25, 0x80	; 128
    2bd2:	44 0f       	add	r20, r20
    2bd4:	55 1f       	adc	r21, r21
    2bd6:	59 f0       	breq	.+22     	; 0x2bee <__fp_splitA+0x10>
    2bd8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <__fp_splitA+0x1a>
    2bdc:	47 95       	ror	r20

00002bde <__fp_splitA>:
    2bde:	88 0f       	add	r24, r24
    2be0:	97 fb       	bst	r25, 7
    2be2:	99 1f       	adc	r25, r25
    2be4:	61 f0       	breq	.+24     	; 0x2bfe <__fp_splitA+0x20>
    2be6:	9f 3f       	cpi	r25, 0xFF	; 255
    2be8:	79 f0       	breq	.+30     	; 0x2c08 <__fp_splitA+0x2a>
    2bea:	87 95       	ror	r24
    2bec:	08 95       	ret
    2bee:	12 16       	cp	r1, r18
    2bf0:	13 06       	cpc	r1, r19
    2bf2:	14 06       	cpc	r1, r20
    2bf4:	55 1f       	adc	r21, r21
    2bf6:	f2 cf       	rjmp	.-28     	; 0x2bdc <__fp_split3+0xe>
    2bf8:	46 95       	lsr	r20
    2bfa:	f1 df       	rcall	.-30     	; 0x2bde <__fp_splitA>
    2bfc:	08 c0       	rjmp	.+16     	; 0x2c0e <__fp_splitA+0x30>
    2bfe:	16 16       	cp	r1, r22
    2c00:	17 06       	cpc	r1, r23
    2c02:	18 06       	cpc	r1, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	f1 cf       	rjmp	.-30     	; 0x2bea <__fp_splitA+0xc>
    2c08:	86 95       	lsr	r24
    2c0a:	71 05       	cpc	r23, r1
    2c0c:	61 05       	cpc	r22, r1
    2c0e:	08 94       	sec
    2c10:	08 95       	ret

00002c12 <__fp_zero>:
    2c12:	e8 94       	clt

00002c14 <__fp_szero>:
    2c14:	bb 27       	eor	r27, r27
    2c16:	66 27       	eor	r22, r22
    2c18:	77 27       	eor	r23, r23
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	97 f9       	bld	r25, 7
    2c1e:	08 95       	ret

00002c20 <__gesf2>:
    2c20:	2c df       	rcall	.-424    	; 0x2a7a <__fp_cmp>
    2c22:	08 f4       	brcc	.+2      	; 0x2c26 <__gesf2+0x6>
    2c24:	8f ef       	ldi	r24, 0xFF	; 255
    2c26:	08 95       	ret

00002c28 <inverse>:
    2c28:	9b 01       	movw	r18, r22
    2c2a:	ac 01       	movw	r20, r24
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	80 e8       	ldi	r24, 0x80	; 128
    2c32:	9f e3       	ldi	r25, 0x3F	; 63
    2c34:	1b ce       	rjmp	.-970    	; 0x286c <__divsf3>
    2c36:	45 cf       	rjmp	.-374    	; 0x2ac2 <__fp_inf>
    2c38:	15 c1       	rjmp	.+554    	; 0x2e64 <__fp_mpack>

00002c3a <ldexp>:
    2c3a:	d1 df       	rcall	.-94     	; 0x2bde <__fp_splitA>
    2c3c:	e8 f3       	brcs	.-6      	; 0x2c38 <inverse+0x10>
    2c3e:	99 23       	and	r25, r25
    2c40:	d9 f3       	breq	.-10     	; 0x2c38 <inverse+0x10>
    2c42:	94 0f       	add	r25, r20
    2c44:	51 1d       	adc	r21, r1
    2c46:	bb f3       	brvs	.-18     	; 0x2c36 <inverse+0xe>
    2c48:	91 50       	subi	r25, 0x01	; 1
    2c4a:	50 40       	sbci	r21, 0x00	; 0
    2c4c:	94 f0       	brlt	.+36     	; 0x2c72 <ldexp+0x38>
    2c4e:	59 f0       	breq	.+22     	; 0x2c66 <ldexp+0x2c>
    2c50:	88 23       	and	r24, r24
    2c52:	32 f0       	brmi	.+12     	; 0x2c60 <ldexp+0x26>
    2c54:	66 0f       	add	r22, r22
    2c56:	77 1f       	adc	r23, r23
    2c58:	88 1f       	adc	r24, r24
    2c5a:	91 50       	subi	r25, 0x01	; 1
    2c5c:	50 40       	sbci	r21, 0x00	; 0
    2c5e:	c1 f7       	brne	.-16     	; 0x2c50 <ldexp+0x16>
    2c60:	9e 3f       	cpi	r25, 0xFE	; 254
    2c62:	51 05       	cpc	r21, r1
    2c64:	44 f7       	brge	.-48     	; 0x2c36 <inverse+0xe>
    2c66:	88 0f       	add	r24, r24
    2c68:	91 1d       	adc	r25, r1
    2c6a:	96 95       	lsr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	97 f9       	bld	r25, 7
    2c70:	08 95       	ret
    2c72:	5f 3f       	cpi	r21, 0xFF	; 255
    2c74:	ac f0       	brlt	.+42     	; 0x2ca0 <ldexp+0x66>
    2c76:	98 3e       	cpi	r25, 0xE8	; 232
    2c78:	9c f0       	brlt	.+38     	; 0x2ca0 <ldexp+0x66>
    2c7a:	bb 27       	eor	r27, r27
    2c7c:	86 95       	lsr	r24
    2c7e:	77 95       	ror	r23
    2c80:	67 95       	ror	r22
    2c82:	b7 95       	ror	r27
    2c84:	08 f4       	brcc	.+2      	; 0x2c88 <ldexp+0x4e>
    2c86:	b1 60       	ori	r27, 0x01	; 1
    2c88:	93 95       	inc	r25
    2c8a:	c1 f7       	brne	.-16     	; 0x2c7c <ldexp+0x42>
    2c8c:	bb 0f       	add	r27, r27
    2c8e:	58 f7       	brcc	.-42     	; 0x2c66 <ldexp+0x2c>
    2c90:	11 f4       	brne	.+4      	; 0x2c96 <ldexp+0x5c>
    2c92:	60 ff       	sbrs	r22, 0
    2c94:	e8 cf       	rjmp	.-48     	; 0x2c66 <ldexp+0x2c>
    2c96:	6f 5f       	subi	r22, 0xFF	; 255
    2c98:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	e3 cf       	rjmp	.-58     	; 0x2c66 <ldexp+0x2c>
    2ca0:	b9 cf       	rjmp	.-142    	; 0x2c14 <__fp_szero>

00002ca2 <modf>:
    2ca2:	fa 01       	movw	r30, r20
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	aa 0f       	add	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	bf 57       	subi	r27, 0x7F	; 127
    2cb0:	28 f4       	brcc	.+10     	; 0x2cbc <modf+0x1a>
    2cb2:	22 27       	eor	r18, r18
    2cb4:	33 27       	eor	r19, r19
    2cb6:	44 27       	eor	r20, r20
    2cb8:	50 78       	andi	r21, 0x80	; 128
    2cba:	1f c0       	rjmp	.+62     	; 0x2cfa <modf+0x58>
    2cbc:	b7 51       	subi	r27, 0x17	; 23
    2cbe:	88 f4       	brcc	.+34     	; 0x2ce2 <modf+0x40>
    2cc0:	ab 2f       	mov	r26, r27
    2cc2:	00 24       	eor	r0, r0
    2cc4:	46 95       	lsr	r20
    2cc6:	37 95       	ror	r19
    2cc8:	27 95       	ror	r18
    2cca:	01 1c       	adc	r0, r1
    2ccc:	a3 95       	inc	r26
    2cce:	d2 f3       	brmi	.-12     	; 0x2cc4 <modf+0x22>
    2cd0:	00 20       	and	r0, r0
    2cd2:	69 f0       	breq	.+26     	; 0x2cee <modf+0x4c>
    2cd4:	22 0f       	add	r18, r18
    2cd6:	33 1f       	adc	r19, r19
    2cd8:	44 1f       	adc	r20, r20
    2cda:	b3 95       	inc	r27
    2cdc:	da f3       	brmi	.-10     	; 0x2cd4 <modf+0x32>
    2cde:	0d d0       	rcall	.+26     	; 0x2cfa <modf+0x58>
    2ce0:	f7 cc       	rjmp	.-1554   	; 0x26d0 <__subsf3>
    2ce2:	61 30       	cpi	r22, 0x01	; 1
    2ce4:	71 05       	cpc	r23, r1
    2ce6:	a0 e8       	ldi	r26, 0x80	; 128
    2ce8:	8a 07       	cpc	r24, r26
    2cea:	b9 46       	sbci	r27, 0x69	; 105
    2cec:	30 f4       	brcc	.+12     	; 0x2cfa <modf+0x58>
    2cee:	9b 01       	movw	r18, r22
    2cf0:	ac 01       	movw	r20, r24
    2cf2:	66 27       	eor	r22, r22
    2cf4:	77 27       	eor	r23, r23
    2cf6:	88 27       	eor	r24, r24
    2cf8:	90 78       	andi	r25, 0x80	; 128
    2cfa:	30 96       	adiw	r30, 0x00	; 0
    2cfc:	21 f0       	breq	.+8      	; 0x2d06 <modf+0x64>
    2cfe:	20 83       	st	Z, r18
    2d00:	31 83       	std	Z+1, r19	; 0x01
    2d02:	42 83       	std	Z+2, r20	; 0x02
    2d04:	53 83       	std	Z+3, r21	; 0x03
    2d06:	08 95       	ret

00002d08 <__mulsf3>:
    2d08:	0b d0       	rcall	.+22     	; 0x2d20 <__mulsf3x>
    2d0a:	3f cf       	rjmp	.-386    	; 0x2b8a <__fp_round>
    2d0c:	08 df       	rcall	.-496    	; 0x2b1e <__fp_pscA>
    2d0e:	28 f0       	brcs	.+10     	; 0x2d1a <__mulsf3+0x12>
    2d10:	0d df       	rcall	.-486    	; 0x2b2c <__fp_pscB>
    2d12:	18 f0       	brcs	.+6      	; 0x2d1a <__mulsf3+0x12>
    2d14:	95 23       	and	r25, r21
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <__mulsf3+0x12>
    2d18:	d4 ce       	rjmp	.-600    	; 0x2ac2 <__fp_inf>
    2d1a:	d9 ce       	rjmp	.-590    	; 0x2ace <__fp_nan>
    2d1c:	11 24       	eor	r1, r1
    2d1e:	7a cf       	rjmp	.-268    	; 0x2c14 <__fp_szero>

00002d20 <__mulsf3x>:
    2d20:	56 df       	rcall	.-340    	; 0x2bce <__fp_split3>
    2d22:	a0 f3       	brcs	.-24     	; 0x2d0c <__mulsf3+0x4>

00002d24 <__mulsf3_pse>:
    2d24:	95 9f       	mul	r25, r21
    2d26:	d1 f3       	breq	.-12     	; 0x2d1c <__mulsf3+0x14>
    2d28:	95 0f       	add	r25, r21
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	55 1f       	adc	r21, r21
    2d2e:	62 9f       	mul	r22, r18
    2d30:	f0 01       	movw	r30, r0
    2d32:	72 9f       	mul	r23, r18
    2d34:	bb 27       	eor	r27, r27
    2d36:	f0 0d       	add	r31, r0
    2d38:	b1 1d       	adc	r27, r1
    2d3a:	63 9f       	mul	r22, r19
    2d3c:	aa 27       	eor	r26, r26
    2d3e:	f0 0d       	add	r31, r0
    2d40:	b1 1d       	adc	r27, r1
    2d42:	aa 1f       	adc	r26, r26
    2d44:	64 9f       	mul	r22, r20
    2d46:	66 27       	eor	r22, r22
    2d48:	b0 0d       	add	r27, r0
    2d4a:	a1 1d       	adc	r26, r1
    2d4c:	66 1f       	adc	r22, r22
    2d4e:	82 9f       	mul	r24, r18
    2d50:	22 27       	eor	r18, r18
    2d52:	b0 0d       	add	r27, r0
    2d54:	a1 1d       	adc	r26, r1
    2d56:	62 1f       	adc	r22, r18
    2d58:	73 9f       	mul	r23, r19
    2d5a:	b0 0d       	add	r27, r0
    2d5c:	a1 1d       	adc	r26, r1
    2d5e:	62 1f       	adc	r22, r18
    2d60:	83 9f       	mul	r24, r19
    2d62:	a0 0d       	add	r26, r0
    2d64:	61 1d       	adc	r22, r1
    2d66:	22 1f       	adc	r18, r18
    2d68:	74 9f       	mul	r23, r20
    2d6a:	33 27       	eor	r19, r19
    2d6c:	a0 0d       	add	r26, r0
    2d6e:	61 1d       	adc	r22, r1
    2d70:	23 1f       	adc	r18, r19
    2d72:	84 9f       	mul	r24, r20
    2d74:	60 0d       	add	r22, r0
    2d76:	21 1d       	adc	r18, r1
    2d78:	82 2f       	mov	r24, r18
    2d7a:	76 2f       	mov	r23, r22
    2d7c:	6a 2f       	mov	r22, r26
    2d7e:	11 24       	eor	r1, r1
    2d80:	9f 57       	subi	r25, 0x7F	; 127
    2d82:	50 40       	sbci	r21, 0x00	; 0
    2d84:	8a f0       	brmi	.+34     	; 0x2da8 <__mulsf3_pse+0x84>
    2d86:	e1 f0       	breq	.+56     	; 0x2dc0 <__mulsf3_pse+0x9c>
    2d88:	88 23       	and	r24, r24
    2d8a:	4a f0       	brmi	.+18     	; 0x2d9e <__mulsf3_pse+0x7a>
    2d8c:	ee 0f       	add	r30, r30
    2d8e:	ff 1f       	adc	r31, r31
    2d90:	bb 1f       	adc	r27, r27
    2d92:	66 1f       	adc	r22, r22
    2d94:	77 1f       	adc	r23, r23
    2d96:	88 1f       	adc	r24, r24
    2d98:	91 50       	subi	r25, 0x01	; 1
    2d9a:	50 40       	sbci	r21, 0x00	; 0
    2d9c:	a9 f7       	brne	.-22     	; 0x2d88 <__mulsf3_pse+0x64>
    2d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    2da0:	51 05       	cpc	r21, r1
    2da2:	70 f0       	brcs	.+28     	; 0x2dc0 <__mulsf3_pse+0x9c>
    2da4:	8e ce       	rjmp	.-740    	; 0x2ac2 <__fp_inf>
    2da6:	36 cf       	rjmp	.-404    	; 0x2c14 <__fp_szero>
    2da8:	5f 3f       	cpi	r21, 0xFF	; 255
    2daa:	ec f3       	brlt	.-6      	; 0x2da6 <__mulsf3_pse+0x82>
    2dac:	98 3e       	cpi	r25, 0xE8	; 232
    2dae:	dc f3       	brlt	.-10     	; 0x2da6 <__mulsf3_pse+0x82>
    2db0:	86 95       	lsr	r24
    2db2:	77 95       	ror	r23
    2db4:	67 95       	ror	r22
    2db6:	b7 95       	ror	r27
    2db8:	f7 95       	ror	r31
    2dba:	e7 95       	ror	r30
    2dbc:	9f 5f       	subi	r25, 0xFF	; 255
    2dbe:	c1 f7       	brne	.-16     	; 0x2db0 <__mulsf3_pse+0x8c>
    2dc0:	fe 2b       	or	r31, r30
    2dc2:	88 0f       	add	r24, r24
    2dc4:	91 1d       	adc	r25, r1
    2dc6:	96 95       	lsr	r25
    2dc8:	87 95       	ror	r24
    2dca:	97 f9       	bld	r25, 7
    2dcc:	08 95       	ret

00002dce <sin>:
    2dce:	9f 93       	push	r25
    2dd0:	b5 de       	rcall	.-662    	; 0x2b3c <__fp_rempio2>
    2dd2:	0f 90       	pop	r0
    2dd4:	07 fc       	sbrc	r0, 7
    2dd6:	ee 5f       	subi	r30, 0xFE	; 254
    2dd8:	e9 ce       	rjmp	.-558    	; 0x2bac <__fp_sinus>
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <sin+0x12>
    2ddc:	0e f4       	brtc	.+2      	; 0x2de0 <sin+0x12>
    2dde:	77 ce       	rjmp	.-786    	; 0x2ace <__fp_nan>
    2de0:	41 c0       	rjmp	.+130    	; 0x2e64 <__fp_mpack>

00002de2 <sqrt>:
    2de2:	fd de       	rcall	.-518    	; 0x2bde <__fp_splitA>
    2de4:	d0 f3       	brcs	.-12     	; 0x2dda <sin+0xc>
    2de6:	99 23       	and	r25, r25
    2de8:	d9 f3       	breq	.-10     	; 0x2de0 <sin+0x12>
    2dea:	ce f3       	brts	.-14     	; 0x2dde <sin+0x10>
    2dec:	9f 57       	subi	r25, 0x7F	; 127
    2dee:	55 0b       	sbc	r21, r21
    2df0:	87 ff       	sbrs	r24, 7
    2df2:	46 d0       	rcall	.+140    	; 0x2e80 <__fp_norm2>
    2df4:	00 24       	eor	r0, r0
    2df6:	a0 e6       	ldi	r26, 0x60	; 96
    2df8:	40 ea       	ldi	r20, 0xA0	; 160
    2dfa:	90 01       	movw	r18, r0
    2dfc:	80 58       	subi	r24, 0x80	; 128
    2dfe:	56 95       	lsr	r21
    2e00:	97 95       	ror	r25
    2e02:	28 f4       	brcc	.+10     	; 0x2e0e <sqrt+0x2c>
    2e04:	80 5c       	subi	r24, 0xC0	; 192
    2e06:	66 0f       	add	r22, r22
    2e08:	77 1f       	adc	r23, r23
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	20 f0       	brcs	.+8      	; 0x2e16 <sqrt+0x34>
    2e0e:	26 17       	cp	r18, r22
    2e10:	37 07       	cpc	r19, r23
    2e12:	48 07       	cpc	r20, r24
    2e14:	30 f4       	brcc	.+12     	; 0x2e22 <sqrt+0x40>
    2e16:	62 1b       	sub	r22, r18
    2e18:	73 0b       	sbc	r23, r19
    2e1a:	84 0b       	sbc	r24, r20
    2e1c:	20 29       	or	r18, r0
    2e1e:	31 29       	or	r19, r1
    2e20:	4a 2b       	or	r20, r26
    2e22:	a6 95       	lsr	r26
    2e24:	17 94       	ror	r1
    2e26:	07 94       	ror	r0
    2e28:	20 25       	eor	r18, r0
    2e2a:	31 25       	eor	r19, r1
    2e2c:	4a 27       	eor	r20, r26
    2e2e:	58 f7       	brcc	.-42     	; 0x2e06 <sqrt+0x24>
    2e30:	66 0f       	add	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	88 1f       	adc	r24, r24
    2e36:	20 f0       	brcs	.+8      	; 0x2e40 <sqrt+0x5e>
    2e38:	26 17       	cp	r18, r22
    2e3a:	37 07       	cpc	r19, r23
    2e3c:	48 07       	cpc	r20, r24
    2e3e:	30 f4       	brcc	.+12     	; 0x2e4c <sqrt+0x6a>
    2e40:	62 0b       	sbc	r22, r18
    2e42:	73 0b       	sbc	r23, r19
    2e44:	84 0b       	sbc	r24, r20
    2e46:	20 0d       	add	r18, r0
    2e48:	31 1d       	adc	r19, r1
    2e4a:	41 1d       	adc	r20, r1
    2e4c:	a0 95       	com	r26
    2e4e:	81 f7       	brne	.-32     	; 0x2e30 <sqrt+0x4e>
    2e50:	b9 01       	movw	r22, r18
    2e52:	84 2f       	mov	r24, r20
    2e54:	91 58       	subi	r25, 0x81	; 129
    2e56:	88 0f       	add	r24, r24
    2e58:	96 95       	lsr	r25
    2e5a:	87 95       	ror	r24
    2e5c:	08 95       	ret

00002e5e <square>:
    2e5e:	9b 01       	movw	r18, r22
    2e60:	ac 01       	movw	r20, r24
    2e62:	52 cf       	rjmp	.-348    	; 0x2d08 <__mulsf3>

00002e64 <__fp_mpack>:
    2e64:	9f 3f       	cpi	r25, 0xFF	; 255
    2e66:	31 f0       	breq	.+12     	; 0x2e74 <__fp_mpack_finite+0xc>

00002e68 <__fp_mpack_finite>:
    2e68:	91 50       	subi	r25, 0x01	; 1
    2e6a:	20 f4       	brcc	.+8      	; 0x2e74 <__fp_mpack_finite+0xc>
    2e6c:	87 95       	ror	r24
    2e6e:	77 95       	ror	r23
    2e70:	67 95       	ror	r22
    2e72:	b7 95       	ror	r27
    2e74:	88 0f       	add	r24, r24
    2e76:	91 1d       	adc	r25, r1
    2e78:	96 95       	lsr	r25
    2e7a:	87 95       	ror	r24
    2e7c:	97 f9       	bld	r25, 7
    2e7e:	08 95       	ret

00002e80 <__fp_norm2>:
    2e80:	91 50       	subi	r25, 0x01	; 1
    2e82:	50 40       	sbci	r21, 0x00	; 0
    2e84:	66 0f       	add	r22, r22
    2e86:	77 1f       	adc	r23, r23
    2e88:	88 1f       	adc	r24, r24
    2e8a:	d2 f7       	brpl	.-12     	; 0x2e80 <__fp_norm2>
    2e8c:	08 95       	ret

00002e8e <__fp_powsodd>:
    2e8e:	9f 93       	push	r25
    2e90:	8f 93       	push	r24
    2e92:	7f 93       	push	r23
    2e94:	6f 93       	push	r22
    2e96:	ff 93       	push	r31
    2e98:	ef 93       	push	r30
    2e9a:	9b 01       	movw	r18, r22
    2e9c:	ac 01       	movw	r20, r24
    2e9e:	34 df       	rcall	.-408    	; 0x2d08 <__mulsf3>
    2ea0:	ef 91       	pop	r30
    2ea2:	ff 91       	pop	r31
    2ea4:	17 de       	rcall	.-978    	; 0x2ad4 <__fp_powser>
    2ea6:	2f 91       	pop	r18
    2ea8:	3f 91       	pop	r19
    2eaa:	4f 91       	pop	r20
    2eac:	5f 91       	pop	r21
    2eae:	2c cf       	rjmp	.-424    	; 0x2d08 <__mulsf3>

00002eb0 <__divmodhi4>:
    2eb0:	97 fb       	bst	r25, 7
    2eb2:	07 2e       	mov	r0, r23
    2eb4:	16 f4       	brtc	.+4      	; 0x2eba <__divmodhi4+0xa>
    2eb6:	00 94       	com	r0
    2eb8:	07 d0       	rcall	.+14     	; 0x2ec8 <__divmodhi4_neg1>
    2eba:	77 fd       	sbrc	r23, 7
    2ebc:	09 d0       	rcall	.+18     	; 0x2ed0 <__divmodhi4_neg2>
    2ebe:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__udivmodhi4>
    2ec2:	07 fc       	sbrc	r0, 7
    2ec4:	05 d0       	rcall	.+10     	; 0x2ed0 <__divmodhi4_neg2>
    2ec6:	3e f4       	brtc	.+14     	; 0x2ed6 <__divmodhi4_exit>

00002ec8 <__divmodhi4_neg1>:
    2ec8:	90 95       	com	r25
    2eca:	81 95       	neg	r24
    2ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ece:	08 95       	ret

00002ed0 <__divmodhi4_neg2>:
    2ed0:	70 95       	com	r23
    2ed2:	61 95       	neg	r22
    2ed4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ed6 <__divmodhi4_exit>:
    2ed6:	08 95       	ret

00002ed8 <__udivmodhi4>:
    2ed8:	aa 1b       	sub	r26, r26
    2eda:	bb 1b       	sub	r27, r27
    2edc:	51 e1       	ldi	r21, 0x11	; 17
    2ede:	07 c0       	rjmp	.+14     	; 0x2eee <__udivmodhi4_ep>

00002ee0 <__udivmodhi4_loop>:
    2ee0:	aa 1f       	adc	r26, r26
    2ee2:	bb 1f       	adc	r27, r27
    2ee4:	a6 17       	cp	r26, r22
    2ee6:	b7 07       	cpc	r27, r23
    2ee8:	10 f0       	brcs	.+4      	; 0x2eee <__udivmodhi4_ep>
    2eea:	a6 1b       	sub	r26, r22
    2eec:	b7 0b       	sbc	r27, r23

00002eee <__udivmodhi4_ep>:
    2eee:	88 1f       	adc	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	5a 95       	dec	r21
    2ef4:	a9 f7       	brne	.-22     	; 0x2ee0 <__udivmodhi4_loop>
    2ef6:	80 95       	com	r24
    2ef8:	90 95       	com	r25
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	08 95       	ret

00002f00 <itoa>:
    2f00:	fb 01       	movw	r30, r22
    2f02:	9f 01       	movw	r18, r30
    2f04:	e8 94       	clt
    2f06:	42 30       	cpi	r20, 0x02	; 2
    2f08:	c4 f0       	brlt	.+48     	; 0x2f3a <itoa+0x3a>
    2f0a:	45 32       	cpi	r20, 0x25	; 37
    2f0c:	b4 f4       	brge	.+44     	; 0x2f3a <itoa+0x3a>
    2f0e:	4a 30       	cpi	r20, 0x0A	; 10
    2f10:	29 f4       	brne	.+10     	; 0x2f1c <itoa+0x1c>
    2f12:	97 fb       	bst	r25, 7
    2f14:	1e f4       	brtc	.+6      	; 0x2f1c <itoa+0x1c>
    2f16:	90 95       	com	r25
    2f18:	81 95       	neg	r24
    2f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1c:	64 2f       	mov	r22, r20
    2f1e:	77 27       	eor	r23, r23
    2f20:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__udivmodhi4>
    2f24:	80 5d       	subi	r24, 0xD0	; 208
    2f26:	8a 33       	cpi	r24, 0x3A	; 58
    2f28:	0c f0       	brlt	.+2      	; 0x2f2c <itoa+0x2c>
    2f2a:	89 5d       	subi	r24, 0xD9	; 217
    2f2c:	81 93       	st	Z+, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	a1 f7       	brne	.-24     	; 0x2f1c <itoa+0x1c>
    2f34:	16 f4       	brtc	.+4      	; 0x2f3a <itoa+0x3a>
    2f36:	5d e2       	ldi	r21, 0x2D	; 45
    2f38:	51 93       	st	Z+, r21
    2f3a:	10 82       	st	Z, r1
    2f3c:	c9 01       	movw	r24, r18
    2f3e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <strrev>

00002f42 <strrev>:
    2f42:	dc 01       	movw	r26, r24
    2f44:	fc 01       	movw	r30, r24
    2f46:	67 2f       	mov	r22, r23
    2f48:	71 91       	ld	r23, Z+
    2f4a:	77 23       	and	r23, r23
    2f4c:	e1 f7       	brne	.-8      	; 0x2f46 <strrev+0x4>
    2f4e:	32 97       	sbiw	r30, 0x02	; 2
    2f50:	04 c0       	rjmp	.+8      	; 0x2f5a <strrev+0x18>
    2f52:	7c 91       	ld	r23, X
    2f54:	6d 93       	st	X+, r22
    2f56:	70 83       	st	Z, r23
    2f58:	62 91       	ld	r22, -Z
    2f5a:	ae 17       	cp	r26, r30
    2f5c:	bf 07       	cpc	r27, r31
    2f5e:	c8 f3       	brcs	.-14     	; 0x2f52 <strrev+0x10>
    2f60:	08 95       	ret

00002f62 <_exit>:
    2f62:	f8 94       	cli

00002f64 <__stop_program>:
    2f64:	ff cf       	rjmp	.-2      	; 0x2f64 <__stop_program>
