
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000217a  0000220e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000217a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800114  00800114  00002222  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00005908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006a6e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000267d  00000000  00000000  00006d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a88  00000000  00000000  000093b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010e9  00000000  00000000  00009e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000850  00000000  00000000  0000af24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007bd  00000000  00000000  0000b774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d2c  00000000  00000000  0000bf31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a0  00000000  00000000  0000ec5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_3>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_10>
      2c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_29>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	ea e7       	ldi	r30, 0x7A	; 122
     1be:	f1 e2       	ldi	r31, 0x21	; 33
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a4 31       	cpi	r26, 0x14	; 20
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a4 e1       	ldi	r26, 0x14	; 20
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a5 38       	cpi	r26, 0x85	; 133
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
     1e0:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <rotate>:

char buffer[10];
int state = 0;

void rotate(int dir) {
	OCR1B = OCR1A;
     1e8:	20 91 88 00 	lds	r18, 0x0088
     1ec:	30 91 89 00 	lds	r19, 0x0089
     1f0:	30 93 8b 00 	sts	0x008B, r19
     1f4:	20 93 8a 00 	sts	0x008A, r18
	OCR3A = ICR3;
     1f8:	20 91 96 00 	lds	r18, 0x0096
     1fc:	30 91 97 00 	lds	r19, 0x0097
     200:	30 93 99 00 	sts	0x0099, r19
     204:	20 93 98 00 	sts	0x0098, r18
	if (dir == RIGHT) {
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	19 f4       	brne	.+6      	; 0x212 <rotate+0x2a>
		set(PORTB,2);
     20c:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     20e:	2b 98       	cbi	0x05, 3	; 5
     210:	08 95       	ret
	}
	else if (dir == LEFT) {
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	11 f4       	brne	.+4      	; 0x21a <rotate+0x32>
		clear(PORTB,2);
     216:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     218:	2b 9a       	sbi	0x05, 3	; 5
     21a:	08 95       	ret

0000021c <turn>:
	}
}

void turn(int dir,int degree) {
	set(PORTB,2);
     21c:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     21e:	2b 9a       	sbi	0x05, 3	; 5
	if (dir == LEFT) {
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	91 05       	cpc	r25, r1
     224:	79 f4       	brne	.+30     	; 0x244 <turn+0x28>
		OCR3A = ICR3;
     226:	80 91 96 00 	lds	r24, 0x0096
     22a:	90 91 97 00 	lds	r25, 0x0097
     22e:	90 93 99 00 	sts	0x0099, r25
     232:	80 93 98 00 	sts	0x0098, r24
		OCR1B = degree;
     236:	86 2f       	mov	r24, r22
     238:	97 2f       	mov	r25, r23
     23a:	90 93 8b 00 	sts	0x008B, r25
     23e:	80 93 8a 00 	sts	0x008A, r24
     242:	08 95       	ret
	}
	
		if (dir == RIGHT) {
     244:	89 2b       	or	r24, r25
     246:	71 f4       	brne	.+28     	; 0x264 <turn+0x48>
			OCR3A = degree;
     248:	86 2f       	mov	r24, r22
     24a:	97 2f       	mov	r25, r23
     24c:	90 93 99 00 	sts	0x0099, r25
     250:	80 93 98 00 	sts	0x0098, r24
			OCR1B = OCR1A;
     254:	80 91 88 00 	lds	r24, 0x0088
     258:	90 91 89 00 	lds	r25, 0x0089
     25c:	90 93 8b 00 	sts	0x008B, r25
     260:	80 93 8a 00 	sts	0x008A, r24
     264:	08 95       	ret

00000266 <forward>:
	clear(PORTB,2);
	clear(PORTB,3);
}

void forward() {
			OCR1B = OCR1A;
     266:	80 91 88 00 	lds	r24, 0x0088
     26a:	90 91 89 00 	lds	r25, 0x0089
     26e:	90 93 8b 00 	sts	0x008B, r25
     272:	80 93 8a 00 	sts	0x008A, r24
			OCR3A = ICR3;
     276:	80 91 96 00 	lds	r24, 0x0096
     27a:	90 91 97 00 	lds	r25, 0x0097
     27e:	90 93 99 00 	sts	0x0099, r25
     282:	80 93 98 00 	sts	0x0098, r24
			set(PORTB,2);
     286:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB,3);
     288:	2b 9a       	sbi	0x05, 3	; 5
     28a:	08 95       	ret

0000028c <shoot>:
void drive_to_goal() {
	drive_to_point(GOALBX,GOALBY);
}

void shoot() {
		set(PORTB,7);
     28c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	81 ee       	ldi	r24, 0xE1	; 225
     292:	94 e0       	ldi	r25, 0x04	; 4
     294:	21 50       	subi	r18, 0x01	; 1
     296:	80 40       	sbci	r24, 0x00	; 0
     298:	90 40       	sbci	r25, 0x00	; 0
     29a:	e1 f7       	brne	.-8      	; 0x294 <shoot+0x8>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <shoot+0x12>
     29e:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     2a0:	2f 98       	cbi	0x05, 7	; 5
     2a2:	08 95       	ret

000002a4 <game_pause>:
}

void game_pause() {
	clear(DDRB,6);
     2a4:	26 98       	cbi	0x04, 6	; 4
	clear(DDRC,6);
     2a6:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRB,2);
     2a8:	22 98       	cbi	0x04, 2	; 4
	clear(DDRB,3);
     2aa:	23 98       	cbi	0x04, 3	; 4
     2ac:	08 95       	ret

000002ae <drive_to_point>:

void drive_to_puck() {

}

void drive_to_point(int x, int y) {
     2ae:	2f 92       	push	r2
     2b0:	3f 92       	push	r3
     2b2:	4f 92       	push	r4
     2b4:	5f 92       	push	r5
     2b6:	6f 92       	push	r6
     2b8:	7f 92       	push	r7
     2ba:	8f 92       	push	r8
     2bc:	9f 92       	push	r9
     2be:	af 92       	push	r10
     2c0:	bf 92       	push	r11
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	28 97       	sbiw	r28, 0x08	; 8
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	2c 01       	movw	r4, r24
     2e4:	8b 01       	movw	r16, r22
	
	//Rotate until you are facing target
	rotate(LEFT);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <rotate>
	while(1) {
		localize(data);
		if (abs(atan2((float)y-data[1],(float)x-data[0])-data[2] < 3.14/100)) {
     2ee:	c2 01       	movw	r24, r4
     2f0:	aa 27       	eor	r26, r26
     2f2:	97 fd       	sbrc	r25, 7
     2f4:	a0 95       	com	r26
     2f6:	ba 2f       	mov	r27, r26
     2f8:	89 83       	std	Y+1, r24	; 0x01
     2fa:	9a 83       	std	Y+2, r25	; 0x02
     2fc:	ab 83       	std	Y+3, r26	; 0x03
     2fe:	bc 83       	std	Y+4, r27	; 0x04
     300:	c8 01       	movw	r24, r16
     302:	aa 27       	eor	r26, r26
     304:	97 fd       	sbrc	r25, 7
     306:	a0 95       	com	r26
     308:	ba 2f       	mov	r27, r26
     30a:	8d 83       	std	Y+5, r24	; 0x05
     30c:	9e 83       	std	Y+6, r25	; 0x06
     30e:	af 83       	std	Y+7, r26	; 0x07
     310:	b8 87       	std	Y+8, r27	; 0x08
     312:	0f 2e       	mov	r0, r31
     314:	fd e6       	ldi	r31, 0x6D	; 109
     316:	2f 2e       	mov	r2, r31
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	3f 2e       	mov	r3, r31
     31c:	f0 2d       	mov	r31, r0
     31e:	01 e7       	ldi	r16, 0x71	; 113
     320:	11 e0       	ldi	r17, 0x01	; 1
void drive_to_point(int x, int y) {
	
	//Rotate until you are facing target
	rotate(LEFT);
	while(1) {
		localize(data);
     322:	89 e6       	ldi	r24, 0x69	; 105
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <localize>
		if (abs(atan2((float)y-data[1],(float)x-data[0])-data[2] < 3.14/100)) {
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	7a 81       	ldd	r23, Y+2	; 0x02
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__floatsisf>
     336:	6b 01       	movw	r12, r22
     338:	7c 01       	movw	r14, r24
     33a:	6d 81       	ldd	r22, Y+5	; 0x05
     33c:	7e 81       	ldd	r23, Y+6	; 0x06
     33e:	8f 81       	ldd	r24, Y+7	; 0x07
     340:	98 85       	ldd	r25, Y+8	; 0x08
     342:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__floatsisf>
     346:	4b 01       	movw	r8, r22
     348:	5c 01       	movw	r10, r24
     34a:	20 91 69 01 	lds	r18, 0x0169
     34e:	30 91 6a 01 	lds	r19, 0x016A
     352:	40 91 6b 01 	lds	r20, 0x016B
     356:	50 91 6c 01 	lds	r21, 0x016C
     35a:	c7 01       	movw	r24, r14
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     362:	2b 01       	movw	r4, r22
     364:	3c 01       	movw	r6, r24
     366:	d1 01       	movw	r26, r2
     368:	2d 91       	ld	r18, X+
     36a:	3d 91       	ld	r19, X+
     36c:	4d 91       	ld	r20, X+
     36e:	5c 91       	ld	r21, X
     370:	c5 01       	movw	r24, r10
     372:	b4 01       	movw	r22, r8
     374:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     378:	a3 01       	movw	r20, r6
     37a:	92 01       	movw	r18, r4
     37c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <atan2>
     380:	f8 01       	movw	r30, r16
     382:	20 81       	ld	r18, Z
     384:	31 81       	ldd	r19, Z+1	; 0x01
     386:	42 81       	ldd	r20, Z+2	; 0x02
     388:	53 81       	ldd	r21, Z+3	; 0x03
     38a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     38e:	2a e4       	ldi	r18, 0x4A	; 74
     390:	3d e9       	ldi	r19, 0x9D	; 157
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	5d e3       	ldi	r21, 0x3D	; 61
     396:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     39a:	88 23       	and	r24, r24
     39c:	14 f6       	brge	.-124    	; 0x322 <drive_to_point+0x74>
			break;
		}
	}
	
	//Drive until you're close to being there
	forward();
     39e:	0e 94 33 01 	call	0x266	; 0x266 <forward>
	while(1) {
		localize(data);
     3a2:	89 e6       	ldi	r24, 0x69	; 105
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <localize>
		if (sqrt((data[1]-y)*(data[1]-y)+(data[0]-x)*(data[0]-x)) < 5) {
     3aa:	a5 01       	movw	r20, r10
     3ac:	94 01       	movw	r18, r8
     3ae:	ad e6       	ldi	r26, 0x6D	; 109
     3b0:	b1 e0       	ldi	r27, 0x01	; 1
     3b2:	6d 91       	ld	r22, X+
     3b4:	7d 91       	ld	r23, X+
     3b6:	8d 91       	ld	r24, X+
     3b8:	9c 91       	ld	r25, X
     3ba:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     3be:	46 2e       	mov	r4, r22
     3c0:	57 2e       	mov	r5, r23
     3c2:	68 2e       	mov	r6, r24
     3c4:	79 2e       	mov	r7, r25
     3c6:	a7 01       	movw	r20, r14
     3c8:	96 01       	movw	r18, r12
     3ca:	60 91 69 01 	lds	r22, 0x0169
     3ce:	70 91 6a 01 	lds	r23, 0x016A
     3d2:	80 91 6b 01 	lds	r24, 0x016B
     3d6:	90 91 6c 01 	lds	r25, 0x016C
     3da:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     3de:	26 2e       	mov	r2, r22
     3e0:	37 2e       	mov	r3, r23
     3e2:	08 2f       	mov	r16, r24
     3e4:	19 2f       	mov	r17, r25
     3e6:	24 2d       	mov	r18, r4
     3e8:	35 2d       	mov	r19, r5
     3ea:	46 2d       	mov	r20, r6
     3ec:	57 2d       	mov	r21, r7
     3ee:	64 2d       	mov	r22, r4
     3f0:	75 2d       	mov	r23, r5
     3f2:	86 2d       	mov	r24, r6
     3f4:	97 2d       	mov	r25, r7
     3f6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     3fa:	2b 01       	movw	r4, r22
     3fc:	3c 01       	movw	r6, r24
     3fe:	22 2d       	mov	r18, r2
     400:	33 2d       	mov	r19, r3
     402:	40 2f       	mov	r20, r16
     404:	51 2f       	mov	r21, r17
     406:	62 2d       	mov	r22, r2
     408:	73 2d       	mov	r23, r3
     40a:	80 2f       	mov	r24, r16
     40c:	91 2f       	mov	r25, r17
     40e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     412:	9b 01       	movw	r18, r22
     414:	ac 01       	movw	r20, r24
     416:	c3 01       	movw	r24, r6
     418:	b2 01       	movw	r22, r4
     41a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__addsf3>
     41e:	0e 94 48 10 	call	0x2090	; 0x2090 <sqrt>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 ea       	ldi	r20, 0xA0	; 160
     428:	50 e4       	ldi	r21, 0x40	; 64
     42a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     42e:	88 23       	and	r24, r24
     430:	0c f0       	brlt	.+2      	; 0x434 <drive_to_point+0x186>
     432:	b7 cf       	rjmp	.-146    	; 0x3a2 <drive_to_point+0xf4>
			break;
		}
	}
	game_pause();
     434:	0e 94 52 01 	call	0x2a4	; 0x2a4 <game_pause>
}
     438:	28 96       	adiw	r28, 0x08	; 8
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	af 90       	pop	r10
     458:	9f 90       	pop	r9
     45a:	8f 90       	pop	r8
     45c:	7f 90       	pop	r7
     45e:	6f 90       	pop	r6
     460:	5f 90       	pop	r5
     462:	4f 90       	pop	r4
     464:	3f 90       	pop	r3
     466:	2f 90       	pop	r2
     468:	08 95       	ret

0000046a <drive_to_goal>:

void drive_to_goal() {
	drive_to_point(GOALBX,GOALBY);
     46a:	64 e6       	ldi	r22, 0x64	; 100
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 57 01 	call	0x2ae	; 0x2ae <drive_to_point>
     476:	08 95       	ret

00000478 <comm_test>:
	set(DDRB,2);
	set(DDRB,3);
}

void comm_test() {
	set(PORTD,5);
     478:	5d 9a       	sbi	0x0b, 5	; 11
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	89 e6       	ldi	r24, 0x69	; 105
     47e:	98 e1       	ldi	r25, 0x18	; 24
     480:	21 50       	subi	r18, 0x01	; 1
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <comm_test+0x8>
     488:	00 c0       	rjmp	.+0      	; 0x48a <comm_test+0x12>
     48a:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     48c:	5d 98       	cbi	0x0b, 5	; 11
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	89 e6       	ldi	r24, 0x69	; 105
     492:	98 e1       	ldi	r25, 0x18	; 24
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <comm_test+0x1c>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <comm_test+0x26>
     49e:	00 00       	nop
	m_wait(500);
	state = 0;
     4a0:	10 92 15 01 	sts	0x0115, r1
     4a4:	10 92 14 01 	sts	0x0114, r1
     4a8:	08 95       	ret

000004aa <main>:
		}
}

int main(void)
{
	set(DDRD,5);
     4aa:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     4ac:	0e 94 27 04 	call	0x84e	; 0x84e <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     4b0:	4a e0       	ldi	r20, 0x0A	; 10
     4b2:	68 e0       	ldi	r22, 0x08	; 8
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 1c 09 	call	0x1238	; 0x1238 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 e8       	ldi	r24, 0x80	; 128
     4c0:	80 83       	st	Z, r24
     4c2:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     4c4:	85 b5       	in	r24, 0x25	; 37
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     4ca:	84 b5       	in	r24, 0x24	; 36
     4cc:	82 60       	ori	r24, 0x02	; 2
     4ce:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     4d0:	84 b5       	in	r24, 0x24	; 36
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     4d6:	84 b5       	in	r24, 0x24	; 36
     4d8:	80 62       	ori	r24, 0x20	; 32
     4da:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     4dc:	84 b5       	in	r24, 0x24	; 36
     4de:	8f 7e       	andi	r24, 0xEF	; 239
     4e0:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     4e2:	85 b5       	in	r24, 0x25	; 37
     4e4:	84 60       	ori	r24, 0x04	; 4
     4e6:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     4e8:	85 b5       	in	r24, 0x25	; 37
     4ea:	82 60       	ori	r24, 0x02	; 2
     4ec:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     4ee:	85 b5       	in	r24, 0x25	; 37
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     4f4:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     4fa:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     4fc:	e1 e8       	ldi	r30, 0x81	; 129
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	80 61       	ori	r24, 0x10	; 16
     504:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     506:	80 81       	ld	r24, Z
     508:	88 60       	ori	r24, 0x08	; 8
     50a:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     50c:	a0 e8       	ldi	r26, 0x80	; 128
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	8c 91       	ld	r24, X
     512:	82 60       	ori	r24, 0x02	; 2
     514:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     516:	8c 91       	ld	r24, X
     518:	81 60       	ori	r24, 0x01	; 1
     51a:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     51c:	8c 91       	ld	r24, X
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     522:	8c 91       	ld	r24, X
     524:	8f 7e       	andi	r24, 0xEF	; 239
     526:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     528:	80 81       	ld	r24, Z
     52a:	8b 7f       	andi	r24, 0xFB	; 251
     52c:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     52e:	80 81       	ld	r24, Z
     530:	8d 7f       	andi	r24, 0xFD	; 253
     532:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     534:	80 81       	ld	r24, Z
     536:	81 60       	ori	r24, 0x01	; 1
     538:	80 83       	st	Z, r24
	
	set(DDRB,6);
     53a:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	90 93 89 00 	sts	0x0089, r25
     544:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     548:	10 92 8b 00 	sts	0x008B, r1
     54c:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     550:	e1 e9       	ldi	r30, 0x91	; 145
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	20 81       	ld	r18, Z
     556:	20 61       	ori	r18, 0x10	; 16
     558:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     55a:	20 81       	ld	r18, Z
     55c:	28 60       	ori	r18, 0x08	; 8
     55e:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     560:	a0 e9       	ldi	r26, 0x90	; 144
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	2c 91       	ld	r18, X
     566:	22 60       	ori	r18, 0x02	; 2
     568:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     56a:	2c 91       	ld	r18, X
     56c:	2e 7f       	andi	r18, 0xFE	; 254
     56e:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     570:	2c 91       	ld	r18, X
     572:	20 68       	ori	r18, 0x80	; 128
     574:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     576:	2c 91       	ld	r18, X
     578:	2f 7b       	andi	r18, 0xBF	; 191
     57a:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     57c:	20 81       	ld	r18, Z
     57e:	2b 7f       	andi	r18, 0xFB	; 251
     580:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     582:	20 81       	ld	r18, Z
     584:	2d 7f       	andi	r18, 0xFD	; 253
     586:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     588:	20 81       	ld	r18, Z
     58a:	21 60       	ori	r18, 0x01	; 1
     58c:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     58e:	90 93 97 00 	sts	0x0097, r25
     592:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     596:	10 92 99 00 	sts	0x0099, r1
     59a:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     59e:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     5a0:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     5a2:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     5a4:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     5a6:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     5a8:	78 94       	sei
	set(ADCSRA,ADIE);
     5aa:	ea e7       	ldi	r30, 0x7A	; 122
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	80 83       	st	Z, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     5b4:	ac e7       	ldi	r26, 0x7C	; 124
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	8c 91       	ld	r24, X
     5ba:	8f 77       	andi	r24, 0x7F	; 127
     5bc:	8c 93       	st	X, r24
	clear(ADMUX, REFS0);	//^
     5be:	8c 91       	ld	r24, X
     5c0:	8f 7b       	andi	r24, 0xBF	; 191
     5c2:	8c 93       	st	X, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     5c4:	80 81       	ld	r24, Z
     5c6:	84 60       	ori	r24, 0x04	; 4
     5c8:	80 83       	st	Z, r24
	set(ADCSRA, ADPS1);	//^
     5ca:	80 81       	ld	r24, Z
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);	//^
     5d0:	80 81       	ld	r24, Z
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	80 83       	st	Z, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     5d6:	ae e7       	ldi	r26, 0x7E	; 126
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	8c 91       	ld	r24, X
     5dc:	81 60       	ori	r24, 0x01	; 1
     5de:	8c 93       	st	X, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
     5e0:	8c 91       	ld	r24, X
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	8c 93       	st	X, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
     5e6:	8c 91       	ld	r24, X
     5e8:	80 61       	ori	r24, 0x10	; 16
     5ea:	8c 93       	st	X, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
     5ec:	8c 91       	ld	r24, X
     5ee:	80 62       	ori	r24, 0x20	; 32
     5f0:	8c 93       	st	X, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
     5f2:	8c 91       	ld	r24, X
     5f4:	80 64       	ori	r24, 0x40	; 64
     5f6:	8c 93       	st	X, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
     5f8:	ad e7       	ldi	r26, 0x7D	; 125
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	8c 91       	ld	r24, X
     5fe:	81 60       	ori	r24, 0x01	; 1
     600:	8c 93       	st	X, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
     602:	8c 91       	ld	r24, X
     604:	82 60       	ori	r24, 0x02	; 2
     606:	8c 93       	st	X, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     608:	80 81       	ld	r24, Z
     60a:	80 62       	ori	r24, 0x20	; 32
     60c:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     60e:	80 81       	ld	r24, Z
     610:	80 61       	ori	r24, 0x10	; 16
     612:	80 83       	st	Z, r24
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     614:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     616:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     618:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     61a:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 20; //set state
     61c:	84 e1       	ldi	r24, 0x14	; 20
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 15 01 	sts	0x0115, r25
     624:	80 93 14 01 	sts	0x0114, r24
	long count = 0;
	
	char yes;
	m_bus_init();
     628:	0e 94 27 04 	call	0x84e	; 0x84e <m_bus_init>
	m_wii_open();
     62c:	0e 94 87 0c 	call	0x190e	; 0x190e <m_wii_open>
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     630:	08 e8       	ldi	r16, 0x88	; 136
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	0f 2e       	mov	r0, r31
     636:	fa e8       	ldi	r31, 0x8A	; 138
     638:	af 2e       	mov	r10, r31
     63a:	b1 2c       	mov	r11, r1
     63c:	f0 2d       	mov	r31, r0
				OCR3A = ICR3;
     63e:	c6 e9       	ldi	r28, 0x96	; 150
     640:	d0 e0       	ldi	r29, 0x00	; 0
     642:	0f 2e       	mov	r0, r31
     644:	f8 e9       	ldi	r31, 0x98	; 152
     646:	cf 2e       	mov	r12, r31
     648:	d1 2c       	mov	r13, r1
     64a:	f0 2d       	mov	r31, r0
        switch (state) {
			
			case -4:
			m_wait(1000);
				shoot();
				state = -3;
     64c:	0f 2e       	mov	r0, r31
     64e:	fd ef       	ldi	r31, 0xFD	; 253
     650:	ef 2e       	mov	r14, r31
     652:	ff 24       	eor	r15, r15
     654:	fa 94       	dec	r15
     656:	f0 2d       	mov	r31, r0
        
        counter++;
		*/
		
		//constant localization
		m_red(ON);
     658:	6e 9a       	sbi	0x0d, 6	; 13
     65a:	76 98       	cbi	0x0e, 6	; 14
		m_green(OFF);
     65c:	6a 9a       	sbi	0x0d, 2	; 13
     65e:	72 9a       	sbi	0x0e, 2	; 14
		//localize(data);
		m_red(OFF);
     660:	6e 9a       	sbi	0x0d, 6	; 13
     662:	76 9a       	sbi	0x0e, 6	; 14
		m_green(ON);
     664:	6a 9a       	sbi	0x0d, 2	; 13
     666:	72 98       	cbi	0x0e, 2	; 14
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
		}
		*/
		
		//switch states
        switch (state) {
     668:	80 91 14 01 	lds	r24, 0x0114
     66c:	90 91 15 01 	lds	r25, 0x0115
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	91 05       	cpc	r25, r1
     674:	a4 f4       	brge	.+40     	; 0x69e <main+0x1f4>
     676:	99 23       	and	r25, r25
     678:	7c f7       	brge	.-34     	; 0x658 <main+0x1ae>
     67a:	8d 3f       	cpi	r24, 0xFD	; 253
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	92 07       	cpc	r25, r18
     680:	a1 f1       	breq	.+104    	; 0x6ea <main+0x240>
     682:	24 f4       	brge	.+8      	; 0x68c <main+0x1e2>
     684:	04 96       	adiw	r24, 0x04	; 4
     686:	09 f0       	breq	.+2      	; 0x68a <main+0x1e0>
     688:	8f c0       	rjmp	.+286    	; 0x7a8 <main+0x2fe>
     68a:	1f c0       	rjmp	.+62     	; 0x6ca <main+0x220>
     68c:	8e 3f       	cpi	r24, 0xFE	; 254
     68e:	2f ef       	ldi	r18, 0xFF	; 255
     690:	92 07       	cpc	r25, r18
     692:	09 f4       	brne	.+2      	; 0x696 <main+0x1ec>
     694:	43 c0       	rjmp	.+134    	; 0x71c <main+0x272>
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	09 f0       	breq	.+2      	; 0x69c <main+0x1f2>
     69a:	86 c0       	rjmp	.+268    	; 0x7a8 <main+0x2fe>
     69c:	6c c0       	rjmp	.+216    	; 0x776 <main+0x2cc>
     69e:	80 3a       	cpi	r24, 0xA0	; 160
     6a0:	91 05       	cpc	r25, r1
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <main+0x1fc>
     6a4:	7b c0       	rjmp	.+246    	; 0x79c <main+0x2f2>
     6a6:	44 f4       	brge	.+16     	; 0x6b8 <main+0x20e>
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <main+0x206>
     6ae:	6d c0       	rjmp	.+218    	; 0x78a <main+0x2e0>
     6b0:	04 97       	sbiw	r24, 0x04	; 4
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <main+0x20c>
     6b4:	79 c0       	rjmp	.+242    	; 0x7a8 <main+0x2fe>
     6b6:	6c c0       	rjmp	.+216    	; 0x790 <main+0x2e6>
     6b8:	81 3a       	cpi	r24, 0xA1	; 161
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <main+0x216>
     6be:	71 c0       	rjmp	.+226    	; 0x7a2 <main+0x2f8>
     6c0:	84 3a       	cpi	r24, 0xA4	; 164
     6c2:	91 05       	cpc	r25, r1
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <main+0x21e>
     6c6:	70 c0       	rjmp	.+224    	; 0x7a8 <main+0x2fe>
     6c8:	66 c0       	rjmp	.+204    	; 0x796 <main+0x2ec>
     6ca:	ff ef       	ldi	r31, 0xFF	; 255
     6cc:	23 ed       	ldi	r18, 0xD3	; 211
     6ce:	80 e3       	ldi	r24, 0x30	; 48
     6d0:	f1 50       	subi	r31, 0x01	; 1
     6d2:	20 40       	sbci	r18, 0x00	; 0
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x226>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x230>
     6da:	00 00       	nop
			
			case -4:
			m_wait(1000);
				shoot();
     6dc:	0e 94 46 01 	call	0x28c	; 0x28c <shoot>
				state = -3;
     6e0:	f0 92 15 01 	sts	0x0115, r15
     6e4:	e0 92 14 01 	sts	0x0114, r14
			break;
     6e8:	b7 cf       	rjmp	.-146    	; 0x658 <main+0x1ae>
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     6ea:	f8 01       	movw	r30, r16
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	f5 01       	movw	r30, r10
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	80 83       	st	Z, r24
				OCR3A = ICR3;
     6f6:	88 81       	ld	r24, Y
     6f8:	99 81       	ldd	r25, Y+1	; 0x01
     6fa:	f6 01       	movw	r30, r12
     6fc:	91 83       	std	Z+1, r25	; 0x01
     6fe:	80 83       	st	Z, r24
				set(PORTB,2);
     700:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
     702:	2b 9a       	sbi	0x05, 3	; 5
     704:	ff ef       	ldi	r31, 0xFF	; 255
     706:	23 ed       	ldi	r18, 0xD3	; 211
     708:	80 e3       	ldi	r24, 0x30	; 48
     70a:	f1 50       	subi	r31, 0x01	; 1
     70c:	20 40       	sbci	r18, 0x00	; 0
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <main+0x260>
     712:	00 c0       	rjmp	.+0      	; 0x714 <main+0x26a>
     714:	00 00       	nop
				m_wait(1000);
				clear(PORTB,3);
     716:	2b 98       	cbi	0x05, 3	; 5
				clear(PORTB,2);
     718:	2a 98       	cbi	0x05, 2	; 5
			break;
     71a:	9e cf       	rjmp	.-196    	; 0x658 <main+0x1ae>
			
			case -2: //test turning n driving n stuff
			turn(LEFT,OCR1A/4);
     71c:	f8 01       	movw	r30, r16
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	76 95       	lsr	r23
     728:	67 95       	ror	r22
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 0e 01 	call	0x21c	; 0x21c <turn>
     732:	ff ef       	ldi	r31, 0xFF	; 255
     734:	23 ed       	ldi	r18, 0xD3	; 211
     736:	80 e3       	ldi	r24, 0x30	; 48
     738:	f1 50       	subi	r31, 0x01	; 1
     73a:	20 40       	sbci	r18, 0x00	; 0
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <main+0x28e>
     740:	00 c0       	rjmp	.+0      	; 0x742 <main+0x298>
     742:	00 00       	nop
			m_wait(1000);
			turn(RIGHT, ICR3/5);
     744:	28 81       	ld	r18, Y
     746:	39 81       	ldd	r19, Y+1	; 0x01
     748:	ad ec       	ldi	r26, 0xCD	; 205
     74a:	bc ec       	ldi	r27, 0xCC	; 204
     74c:	0e 94 af 10 	call	0x215e	; 0x215e <__umulhisi3>
     750:	bc 01       	movw	r22, r24
     752:	76 95       	lsr	r23
     754:	67 95       	ror	r22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 0e 01 	call	0x21c	; 0x21c <turn>
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	e3 ed       	ldi	r30, 0xD3	; 211
     766:	f0 e3       	ldi	r31, 0x30	; 48
     768:	91 50       	subi	r25, 0x01	; 1
     76a:	e0 40       	sbci	r30, 0x00	; 0
     76c:	f0 40       	sbci	r31, 0x00	; 0
     76e:	e1 f7       	brne	.-8      	; 0x768 <main+0x2be>
     770:	00 c0       	rjmp	.+0      	; 0x772 <main+0x2c8>
     772:	00 00       	nop
     774:	71 cf       	rjmp	.-286    	; 0x658 <main+0x1ae>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	89 e6       	ldi	r24, 0x69	; 105
     77a:	98 e1       	ldi	r25, 0x18	; 24
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x2d2>
     784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x2dc>
     786:	00 00       	nop
     788:	67 cf       	rjmp	.-306    	; 0x658 <main+0x1ae>
			case 2:
			drive_to_puck();
			break;
			
			case 3:
			drive_to_goal();
     78a:	0e 94 35 02 	call	0x46a	; 0x46a <drive_to_goal>
			break;
     78e:	64 cf       	rjmp	.-312    	; 0x658 <main+0x1ae>
			
			case 4:
			shoot();
     790:	0e 94 46 01 	call	0x28c	; 0x28c <shoot>
			break;
     794:	61 cf       	rjmp	.-318    	; 0x658 <main+0x1ae>
			m_green(OFF);
			m_wait(500);
			break;*/
			
			case 0xA4:
			game_pause();
     796:	0e 94 52 01 	call	0x2a4	; 0x2a4 <game_pause>
			break;
     79a:	5e cf       	rjmp	.-324    	; 0x658 <main+0x1ae>
			
			case 0xA0:
			comm_test();
     79c:	0e 94 3c 02 	call	0x478	; 0x478 <comm_test>
			break;
     7a0:	5b cf       	rjmp	.-330    	; 0x658 <main+0x1ae>
			
			case 0xA1:
			drive_to_goal();
     7a2:	0e 94 35 02 	call	0x46a	; 0x46a <drive_to_goal>
			break;
     7a6:	58 cf       	rjmp	.-336    	; 0x658 <main+0x1ae>
			
			default:
			rotate(LEFT);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <rotate>
			break;
     7b0:	53 cf       	rjmp	.-346    	; 0x658 <main+0x1ae>

000007b2 <__vector_29>:
		}
        
    }
}

ISR(ADC_vect) {
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 93       	push	r18
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
	if (ADC  > 500) {
     7c2:	80 91 78 00 	lds	r24, 0x0078
     7c6:	90 91 79 00 	lds	r25, 0x0079
     7ca:	85 3f       	cpi	r24, 0xF5	; 245
     7cc:	91 40       	sbci	r25, 0x01	; 1
     7ce:	18 f0       	brcs	.+6      	; 0x7d6 <__vector_29+0x24>
		m_green(ON);
     7d0:	6a 9a       	sbi	0x0d, 2	; 13
     7d2:	72 98       	cbi	0x0e, 2	; 14
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <__vector_29+0x28>
	}
	
	else {
		m_green(OFF);
     7d6:	6a 9a       	sbi	0x0d, 2	; 13
     7d8:	72 9a       	sbi	0x0e, 2	; 14
	}
}
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	2f 91       	pop	r18
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <__vector_3>:

ISR(INT2_vect)  {
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	m_green(TOGGLE);
     80c:	6a 9a       	sbi	0x0d, 2	; 13
     80e:	9e b1       	in	r25, 0x0e	; 14
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	89 27       	eor	r24, r25
     814:	8e b9       	out	0x0e, r24	; 14
	m_rf_read(buffer,PACKET_LENGTH);
     816:	6a e0       	ldi	r22, 0x0A	; 10
     818:	8f e5       	ldi	r24, 0x5F	; 95
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <m_rf_read>
	state=buffer[0];
     820:	80 91 5f 01 	lds	r24, 0x015F
     824:	80 93 14 01 	sts	0x0114, r24
     828:	10 92 15 01 	sts	0x0115, r1
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     84e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     850:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     852:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     854:	8c e0       	ldi	r24, 0x0C	; 12
     856:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     85a:	e9 e6       	ldi	r30, 0x69	; 105
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	80 62       	ori	r24, 0x20	; 32
     862:	80 83       	st	Z, r24
     864:	80 81       	ld	r24, Z
     866:	8f 7e       	andi	r24, 0xEF	; 239
     868:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     86a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     86c:	78 94       	sei
     86e:	08 95       	ret

00000870 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	8c 01       	movw	r16, r24
     87a:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     87c:	84 e4       	ldi	r24, 0x44	; 68
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <m_wii_read>
	x[0] = blobs[0];
     884:	80 91 44 01 	lds	r24, 0x0144
     888:	90 91 45 01 	lds	r25, 0x0145
     88c:	f8 01       	movw	r30, r16
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
	x[1] = blobs[3];
     892:	80 91 4a 01 	lds	r24, 0x014A
     896:	90 91 4b 01 	lds	r25, 0x014B
     89a:	93 83       	std	Z+3, r25	; 0x03
     89c:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     89e:	80 91 50 01 	lds	r24, 0x0150
     8a2:	90 91 51 01 	lds	r25, 0x0151
     8a6:	95 83       	std	Z+5, r25	; 0x05
     8a8:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     8aa:	80 91 56 01 	lds	r24, 0x0156
     8ae:	90 91 57 01 	lds	r25, 0x0157
     8b2:	97 83       	std	Z+7, r25	; 0x07
     8b4:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     8b6:	80 91 46 01 	lds	r24, 0x0146
     8ba:	90 91 47 01 	lds	r25, 0x0147
     8be:	99 83       	std	Y+1, r25	; 0x01
     8c0:	88 83       	st	Y, r24
	y[1] = blobs[4];
     8c2:	80 91 4c 01 	lds	r24, 0x014C
     8c6:	90 91 4d 01 	lds	r25, 0x014D
     8ca:	9b 83       	std	Y+3, r25	; 0x03
     8cc:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     8ce:	80 91 52 01 	lds	r24, 0x0152
     8d2:	90 91 53 01 	lds	r25, 0x0153
     8d6:	9d 83       	std	Y+5, r25	; 0x05
     8d8:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     8da:	80 91 58 01 	lds	r24, 0x0158
     8de:	90 91 59 01 	lds	r25, 0x0159
     8e2:	9f 83       	std	Y+7, r25	; 0x07
     8e4:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <determine_blobs>:

unsigned char determine_blobs() {
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	6c 97       	sbiw	r28, 0x1c	; 28
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     926:	10 92 24 01 	sts	0x0124, r1
     92a:	10 92 25 01 	sts	0x0125, r1
     92e:	10 92 26 01 	sts	0x0126, r1
     932:	10 92 27 01 	sts	0x0127, r1
	distmin = 30000;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e6       	ldi	r25, 0x60	; 96
     93a:	aa ee       	ldi	r26, 0xEA	; 234
     93c:	b6 e4       	ldi	r27, 0x46	; 70
     93e:	80 93 00 01 	sts	0x0100, r24
     942:	90 93 01 01 	sts	0x0101, r25
     946:	a0 93 02 01 	sts	0x0102, r26
     94a:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     94e:	0f 2e       	mov	r0, r31
     950:	f6 e3       	ldi	r31, 0x36	; 54
     952:	cf 2e       	mov	r12, r31
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	df 2e       	mov	r13, r31
     958:	f0 2d       	mov	r31, r0
     95a:	08 e3       	ldi	r16, 0x38	; 56
     95c:	11 e0       	ldi	r17, 0x01	; 1
     95e:	0f 2e       	mov	r0, r31
     960:	fa e3       	ldi	r31, 0x3A	; 58
     962:	ef 2e       	mov	r14, r31
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	ff 2e       	mov	r15, r31
     968:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     96a:	6c e2       	ldi	r22, 0x2C	; 44
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	84 e3       	ldi	r24, 0x34	; 52
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 38 04 	call	0x870	; 0x870 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     976:	80 91 34 01 	lds	r24, 0x0134
     97a:	90 91 35 01 	lds	r25, 0x0135
     97e:	8f 3f       	cpi	r24, 0xFF	; 255
     980:	93 40       	sbci	r25, 0x03	; 3
     982:	98 f7       	brcc	.-26     	; 0x96a <determine_blobs+0x78>
     984:	f6 01       	movw	r30, r12
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	8f 3f       	cpi	r24, 0xFF	; 255
     98c:	93 40       	sbci	r25, 0x03	; 3
     98e:	68 f7       	brcc	.-38     	; 0x96a <determine_blobs+0x78>
     990:	f8 01       	movw	r30, r16
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	8f 3f       	cpi	r24, 0xFF	; 255
     998:	93 40       	sbci	r25, 0x03	; 3
     99a:	38 f7       	brcc	.-50     	; 0x96a <determine_blobs+0x78>
     99c:	f7 01       	movw	r30, r14
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	8f 3f       	cpi	r24, 0xFF	; 255
     9a4:	93 40       	sbci	r25, 0x03	; 3
     9a6:	08 f7       	brcc	.-62     	; 0x96a <determine_blobs+0x78>
     9a8:	80 90 28 01 	lds	r8, 0x0128
     9ac:	90 90 29 01 	lds	r9, 0x0129
     9b0:	a0 90 2a 01 	lds	r10, 0x012A
     9b4:	b0 90 2b 01 	lds	r11, 0x012B
     9b8:	20 91 24 01 	lds	r18, 0x0124
     9bc:	29 83       	std	Y+1, r18	; 0x01
     9be:	30 91 25 01 	lds	r19, 0x0125
     9c2:	3a 83       	std	Y+2, r19	; 0x02
     9c4:	40 91 26 01 	lds	r20, 0x0126
     9c8:	4b 83       	std	Y+3, r20	; 0x03
     9ca:	50 91 27 01 	lds	r21, 0x0127
     9ce:	5c 83       	std	Y+4, r21	; 0x04
     9d0:	60 91 1e 01 	lds	r22, 0x011E
     9d4:	6b 8b       	std	Y+19, r22	; 0x13
     9d6:	70 91 1f 01 	lds	r23, 0x011F
     9da:	7c 8b       	std	Y+20, r23	; 0x14
     9dc:	80 91 1c 01 	lds	r24, 0x011C
     9e0:	89 8b       	std	Y+17, r24	; 0x11
     9e2:	90 91 1d 01 	lds	r25, 0x011D
     9e6:	9a 8b       	std	Y+18, r25	; 0x12
     9e8:	e0 91 20 01 	lds	r30, 0x0120
     9ec:	ed 8b       	std	Y+21, r30	; 0x15
     9ee:	f0 91 21 01 	lds	r31, 0x0121
     9f2:	fe 8b       	std	Y+22, r31	; 0x16
     9f4:	20 91 22 01 	lds	r18, 0x0122
     9f8:	2f 8b       	std	Y+23, r18	; 0x17
     9fa:	30 91 23 01 	lds	r19, 0x0123
     9fe:	38 8f       	std	Y+24, r19	; 0x18
     a00:	40 91 00 01 	lds	r20, 0x0100
     a04:	4d 83       	std	Y+5, r20	; 0x05
     a06:	50 91 01 01 	lds	r21, 0x0101
     a0a:	5e 83       	std	Y+6, r21	; 0x06
     a0c:	20 90 02 01 	lds	r2, 0x0102
     a10:	30 90 03 01 	lds	r3, 0x0103
     a14:	60 91 1a 01 	lds	r22, 0x011A
     a18:	69 8f       	std	Y+25, r22	; 0x19
     a1a:	70 91 1b 01 	lds	r23, 0x011B
     a1e:	7a 8f       	std	Y+26, r23	; 0x1a
     a20:	80 91 18 01 	lds	r24, 0x0118
     a24:	90 91 19 01 	lds	r25, 0x0119
     a28:	98 8b       	std	Y+16, r25	; 0x10
     a2a:	8f 87       	std	Y+15, r24	; 0x0f
     a2c:	18 86       	std	Y+8, r1	; 0x08
     a2e:	1f 82       	std	Y+7, r1	; 0x07
     a30:	c1 2c       	mov	r12, r1
     a32:	d1 2c       	mov	r13, r1
     a34:	b9 c0       	rjmp	.+370    	; 0xba8 <__stack+0xa9>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     a36:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a38:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a3a:	e4 15       	cp	r30, r4
     a3c:	f5 05       	cpc	r31, r5
     a3e:	09 f4       	brne	.+2      	; 0xa42 <determine_blobs+0x150>
     a40:	9c c0       	rjmp	.+312    	; 0xb7a <__stack+0x7b>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     a42:	e9 85       	ldd	r30, Y+9	; 0x09
     a44:	fa 85       	ldd	r31, Y+10	; 0x0a
     a46:	60 81       	ld	r22, Z
     a48:	71 81       	ldd	r23, Z+1	; 0x01
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	f3 01       	movw	r30, r6
     a58:	60 81       	ld	r22, Z
     a5a:	71 81       	ldd	r23, Z+1	; 0x01
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c7 01       	movw	r24, r14
     a6a:	b6 01       	movw	r22, r12
     a6c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     a70:	c6 2e       	mov	r12, r22
     a72:	d7 2e       	mov	r13, r23
     a74:	e8 2e       	mov	r14, r24
     a76:	f9 2e       	mov	r15, r25
     a78:	eb 85       	ldd	r30, Y+11	; 0x0b
     a7a:	fc 85       	ldd	r31, Y+12	; 0x0c
     a7c:	60 81       	ld	r22, Z
     a7e:	71 81       	ldd	r23, Z+1	; 0x01
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     a88:	4b 01       	movw	r8, r22
     a8a:	5c 01       	movw	r10, r24
     a8c:	f8 01       	movw	r30, r16
     a8e:	60 81       	ld	r22, Z
     a90:	71 81       	ldd	r23, Z+1	; 0x01
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     a9a:	9b 01       	movw	r18, r22
     a9c:	ac 01       	movw	r20, r24
     a9e:	c5 01       	movw	r24, r10
     aa0:	b4 01       	movw	r22, r8
     aa2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     aa6:	86 2e       	mov	r8, r22
     aa8:	97 2e       	mov	r9, r23
     aaa:	a8 2e       	mov	r10, r24
     aac:	b9 2e       	mov	r11, r25
     aae:	2c 2d       	mov	r18, r12
     ab0:	3d 2d       	mov	r19, r13
     ab2:	4e 2d       	mov	r20, r14
     ab4:	5f 2d       	mov	r21, r15
     ab6:	6c 2d       	mov	r22, r12
     ab8:	7d 2d       	mov	r23, r13
     aba:	8e 2d       	mov	r24, r14
     abc:	9f 2d       	mov	r25, r15
     abe:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     ac2:	6b 01       	movw	r12, r22
     ac4:	7c 01       	movw	r14, r24
     ac6:	28 2d       	mov	r18, r8
     ac8:	39 2d       	mov	r19, r9
     aca:	4a 2d       	mov	r20, r10
     acc:	5b 2d       	mov	r21, r11
     ace:	68 2d       	mov	r22, r8
     ad0:	79 2d       	mov	r23, r9
     ad2:	8a 2d       	mov	r24, r10
     ad4:	9b 2d       	mov	r25, r11
     ad6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__addsf3>
     ae6:	0e 94 48 10 	call	0x2090	; 0x2090 <sqrt>
     aea:	86 2e       	mov	r8, r22
     aec:	97 2e       	mov	r9, r23
     aee:	a8 2e       	mov	r10, r24
     af0:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     af2:	79 81       	ldd	r23, Y+1	; 0x01
     af4:	6a 81       	ldd	r22, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	8c 81       	ldd	r24, Y+4	; 0x04
     afa:	27 2f       	mov	r18, r23
     afc:	36 2f       	mov	r19, r22
     afe:	49 2f       	mov	r20, r25
     b00:	58 2f       	mov	r21, r24
     b02:	68 2d       	mov	r22, r8
     b04:	79 2d       	mov	r23, r9
     b06:	8a 2d       	mov	r24, r10
     b08:	9b 2d       	mov	r25, r11
     b0a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__gesf2>
     b0e:	18 16       	cp	r1, r24
     b10:	d4 f4       	brge	.+52     	; 0xb46 <__stack+0x47>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	5f e3       	ldi	r21, 0x3F	; 63
     b1a:	68 2d       	mov	r22, r8
     b1c:	79 2d       	mov	r23, r9
     b1e:	8a 2d       	mov	r24, r10
     b20:	9b 2d       	mov	r25, r11
     b22:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     b26:	6d 8b       	std	Y+21, r22	; 0x15
     b28:	7e 8b       	std	Y+22, r23	; 0x16
     b2a:	8f 8b       	std	Y+23, r24	; 0x17
     b2c:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     b2e:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b30:	f9 8b       	std	Y+17, r31	; 0x11
     b32:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b34:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     b36:	3d 85       	ldd	r19, Y+13	; 0x0d
     b38:	3b 8b       	std	Y+19, r19	; 0x13
     b3a:	4e 85       	ldd	r20, Y+14	; 0x0e
     b3c:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     b3e:	89 82       	std	Y+1, r8	; 0x01
     b40:	9a 82       	std	Y+2, r9	; 0x02
     b42:	ab 82       	std	Y+3, r10	; 0x03
     b44:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     b46:	7d 81       	ldd	r23, Y+5	; 0x05
     b48:	6e 81       	ldd	r22, Y+6	; 0x06
     b4a:	27 2f       	mov	r18, r23
     b4c:	36 2f       	mov	r19, r22
     b4e:	42 2d       	mov	r20, r2
     b50:	53 2d       	mov	r21, r3
     b52:	68 2d       	mov	r22, r8
     b54:	79 2d       	mov	r23, r9
     b56:	8a 2d       	mov	r24, r10
     b58:	9b 2d       	mov	r25, r11
     b5a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     b5e:	88 23       	and	r24, r24
     b60:	64 f4       	brge	.+24     	; 0xb7a <__stack+0x7b>
						distmin = dist;
						close1 = i;
						close2 = j;
     b62:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b64:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b66:	78 8b       	std	Y+16, r23	; 0x10
     b68:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     b6a:	7d 85       	ldd	r23, Y+13	; 0x0d
     b6c:	79 8f       	std	Y+25, r23	; 0x19
     b6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b70:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     b72:	8d 82       	std	Y+5, r8	; 0x05
     b74:	9e 82       	std	Y+6, r9	; 0x06
     b76:	2a 2c       	mov	r2, r10
     b78:	3b 2c       	mov	r3, r11
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	69 0e       	add	r6, r25
     b7e:	71 1c       	adc	r7, r1
     b80:	0e 5f       	subi	r16, 0xFE	; 254
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     b84:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b86:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b88:	31 96       	adiw	r30, 0x01	; 1
     b8a:	fc 8f       	std	Y+28, r31	; 0x1c
     b8c:	eb 8f       	std	Y+27, r30	; 0x1b
     b8e:	34 97       	sbiw	r30, 0x04	; 4
     b90:	09 f0       	breq	.+2      	; 0xb94 <__stack+0x95>
     b92:	51 cf       	rjmp	.-350    	; 0xa36 <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     b94:	2f 81       	ldd	r18, Y+7	; 0x07
     b96:	38 85       	ldd	r19, Y+8	; 0x08
     b98:	2f 5f       	subi	r18, 0xFF	; 255
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	38 87       	std	Y+8, r19	; 0x08
     b9e:	2f 83       	std	Y+7, r18	; 0x07
     ba0:	69 01       	movw	r12, r18
     ba2:	24 30       	cpi	r18, 0x04	; 4
     ba4:	31 05       	cpc	r19, r1
     ba6:	39 f1       	breq	.+78     	; 0xbf6 <__stack+0xf7>
				for (int j = i; j < 4; j++) {
     ba8:	34 e0       	ldi	r19, 0x04	; 4
     baa:	c3 16       	cp	r12, r19
     bac:	d1 04       	cpc	r13, r1
     bae:	94 f7       	brge	.-28     	; 0xb94 <__stack+0x95>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     bb0:	86 01       	movw	r16, r12
     bb2:	0f 5f       	subi	r16, 0xFF	; 255
     bb4:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     bb6:	00 0f       	add	r16, r16
     bb8:	11 1f       	adc	r17, r17
     bba:	0f 2e       	mov	r0, r31
     bbc:	f4 e3       	ldi	r31, 0x34	; 52
     bbe:	ef 2e       	mov	r14, r31
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	ff 2e       	mov	r15, r31
     bc4:	f0 2d       	mov	r31, r0
     bc6:	e0 0e       	add	r14, r16
     bc8:	f1 1e       	adc	r15, r17
     bca:	04 5d       	subi	r16, 0xD4	; 212
     bcc:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     bce:	c6 01       	movw	r24, r12
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	ac 01       	movw	r20, r24
     bd6:	4c 5c       	subi	r20, 0xCC	; 204
     bd8:	5e 4f       	sbci	r21, 0xFE	; 254
     bda:	5a 87       	std	Y+10, r21	; 0x0a
     bdc:	49 87       	std	Y+9, r20	; 0x09
     bde:	bc 01       	movw	r22, r24
     be0:	64 5d       	subi	r22, 0xD4	; 212
     be2:	7e 4f       	sbci	r23, 0xFE	; 254
     be4:	7c 87       	std	Y+12, r23	; 0x0c
     be6:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     be8:	cd 86       	std	Y+13, r12	; 0x0d
     bea:	de 86       	std	Y+14, r13	; 0x0e
     bec:	dc 8e       	std	Y+28, r13	; 0x1c
     bee:	cb 8e       	std	Y+27, r12	; 0x1b
     bf0:	26 01       	movw	r4, r12
     bf2:	37 01       	movw	r6, r14
     bf4:	c7 cf       	rjmp	.-114    	; 0xb84 <__stack+0x85>
     bf6:	88 2d       	mov	r24, r8
     bf8:	99 2d       	mov	r25, r9
     bfa:	aa 2d       	mov	r26, r10
     bfc:	bb 2d       	mov	r27, r11
     bfe:	80 93 28 01 	sts	0x0128, r24
     c02:	90 93 29 01 	sts	0x0129, r25
     c06:	a0 93 2a 01 	sts	0x012A, r26
     c0a:	b0 93 2b 01 	sts	0x012B, r27
     c0e:	59 81       	ldd	r21, Y+1	; 0x01
     c10:	4a 81       	ldd	r20, Y+2	; 0x02
     c12:	3b 81       	ldd	r19, Y+3	; 0x03
     c14:	2c 81       	ldd	r18, Y+4	; 0x04
     c16:	85 2f       	mov	r24, r21
     c18:	94 2f       	mov	r25, r20
     c1a:	a3 2f       	mov	r26, r19
     c1c:	b2 2f       	mov	r27, r18
     c1e:	80 93 24 01 	sts	0x0124, r24
     c22:	90 93 25 01 	sts	0x0125, r25
     c26:	a0 93 26 01 	sts	0x0126, r26
     c2a:	b0 93 27 01 	sts	0x0127, r27
     c2e:	7b 89       	ldd	r23, Y+19	; 0x13
     c30:	70 93 1e 01 	sts	0x011E, r23
     c34:	8c 89       	ldd	r24, Y+20	; 0x14
     c36:	80 93 1f 01 	sts	0x011F, r24
     c3a:	99 89       	ldd	r25, Y+17	; 0x11
     c3c:	90 93 1c 01 	sts	0x011C, r25
     c40:	ea 89       	ldd	r30, Y+18	; 0x12
     c42:	e0 93 1d 01 	sts	0x011D, r30
     c46:	5d 89       	ldd	r21, Y+21	; 0x15
     c48:	4e 89       	ldd	r20, Y+22	; 0x16
     c4a:	3f 89       	ldd	r19, Y+23	; 0x17
     c4c:	28 8d       	ldd	r18, Y+24	; 0x18
     c4e:	85 2f       	mov	r24, r21
     c50:	94 2f       	mov	r25, r20
     c52:	a3 2f       	mov	r26, r19
     c54:	b2 2f       	mov	r27, r18
     c56:	80 93 20 01 	sts	0x0120, r24
     c5a:	90 93 21 01 	sts	0x0121, r25
     c5e:	a0 93 22 01 	sts	0x0122, r26
     c62:	b0 93 23 01 	sts	0x0123, r27
     c66:	5d 81       	ldd	r21, Y+5	; 0x05
     c68:	4e 81       	ldd	r20, Y+6	; 0x06
     c6a:	85 2f       	mov	r24, r21
     c6c:	94 2f       	mov	r25, r20
     c6e:	a2 2d       	mov	r26, r2
     c70:	b3 2d       	mov	r27, r3
     c72:	80 93 00 01 	sts	0x0100, r24
     c76:	90 93 01 01 	sts	0x0101, r25
     c7a:	a0 93 02 01 	sts	0x0102, r26
     c7e:	b0 93 03 01 	sts	0x0103, r27
     c82:	f9 8d       	ldd	r31, Y+25	; 0x19
     c84:	f0 93 1a 01 	sts	0x011A, r31
     c88:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c8a:	20 93 1b 01 	sts	0x011B, r18
     c8e:	3f 85       	ldd	r19, Y+15	; 0x0f
     c90:	30 93 18 01 	sts	0x0118, r19
     c94:	48 89       	ldd	r20, Y+16	; 0x10
     c96:	40 93 19 01 	sts	0x0119, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     c9a:	80 91 1e 01 	lds	r24, 0x011E
     c9e:	90 91 1f 01 	lds	r25, 0x011F
     ca2:	20 91 1a 01 	lds	r18, 0x011A
     ca6:	30 91 1b 01 	lds	r19, 0x011B
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	19 f5       	brne	.+70     	; 0xcf6 <__stack+0x1f7>
				top = far1;
     cb0:	90 93 43 01 	sts	0x0143, r25
     cb4:	80 93 42 01 	sts	0x0142, r24
				bottom = far2;
     cb8:	40 91 1c 01 	lds	r20, 0x011C
     cbc:	50 91 1d 01 	lds	r21, 0x011D
     cc0:	50 93 41 01 	sts	0x0141, r21
     cc4:	40 93 40 01 	sts	0x0140, r20
				right = close2;
     cc8:	20 91 18 01 	lds	r18, 0x0118
     ccc:	30 91 19 01 	lds	r19, 0x0119
     cd0:	30 93 3d 01 	sts	0x013D, r19
     cd4:	20 93 3c 01 	sts	0x013C, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     cd8:	69 e0       	ldi	r22, 0x09	; 9
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	fb 01       	movw	r30, r22
     cde:	e8 1b       	sub	r30, r24
     ce0:	f9 0b       	sbc	r31, r25
     ce2:	cf 01       	movw	r24, r30
     ce4:	84 1b       	sub	r24, r20
     ce6:	95 0b       	sbc	r25, r21
     ce8:	82 1b       	sub	r24, r18
     cea:	93 0b       	sbc	r25, r19
     cec:	90 93 3f 01 	sts	0x013F, r25
     cf0:	80 93 3e 01 	sts	0x013E, r24
     cf4:	66 c0       	rjmp	.+204    	; 0xdc2 <__stack+0x2c3>
			}
			else if (far1 == close2) {
     cf6:	4f 85       	ldd	r20, Y+15	; 0x0f
     cf8:	58 89       	ldd	r21, Y+16	; 0x10
     cfa:	84 17       	cp	r24, r20
     cfc:	95 07       	cpc	r25, r21
     cfe:	f9 f4       	brne	.+62     	; 0xd3e <__stack+0x23f>
				top = far1;
     d00:	90 93 43 01 	sts	0x0143, r25
     d04:	80 93 42 01 	sts	0x0142, r24
				bottom = far2;
     d08:	40 91 1c 01 	lds	r20, 0x011C
     d0c:	50 91 1d 01 	lds	r21, 0x011D
     d10:	50 93 41 01 	sts	0x0141, r21
     d14:	40 93 40 01 	sts	0x0140, r20
				right = close1;
     d18:	30 93 3d 01 	sts	0x013D, r19
     d1c:	20 93 3c 01 	sts	0x013C, r18
				left = 9 - top - bottom - right;
     d20:	69 e0       	ldi	r22, 0x09	; 9
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	fb 01       	movw	r30, r22
     d26:	e8 1b       	sub	r30, r24
     d28:	f9 0b       	sbc	r31, r25
     d2a:	cf 01       	movw	r24, r30
     d2c:	84 1b       	sub	r24, r20
     d2e:	95 0b       	sbc	r25, r21
     d30:	82 1b       	sub	r24, r18
     d32:	93 0b       	sbc	r25, r19
     d34:	90 93 3f 01 	sts	0x013F, r25
     d38:	80 93 3e 01 	sts	0x013E, r24
     d3c:	42 c0       	rjmp	.+132    	; 0xdc2 <__stack+0x2c3>
			}
			else if (far2 == close1) {
     d3e:	40 91 1c 01 	lds	r20, 0x011C
     d42:	50 91 1d 01 	lds	r21, 0x011D
     d46:	24 17       	cp	r18, r20
     d48:	35 07       	cpc	r19, r21
     d4a:	01 f5       	brne	.+64     	; 0xd8c <__stack+0x28d>
				top = far2;
     d4c:	30 93 43 01 	sts	0x0143, r19
     d50:	20 93 42 01 	sts	0x0142, r18
				bottom = far1;
     d54:	90 93 41 01 	sts	0x0141, r25
     d58:	80 93 40 01 	sts	0x0140, r24
				right = close2;
     d5c:	4f 85       	ldd	r20, Y+15	; 0x0f
     d5e:	58 89       	ldd	r21, Y+16	; 0x10
     d60:	50 93 3d 01 	sts	0x013D, r21
     d64:	40 93 3c 01 	sts	0x013C, r20
				left = 9 - top - bottom - right;
     d68:	49 e0       	ldi	r20, 0x09	; 9
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	ba 01       	movw	r22, r20
     d6e:	62 1b       	sub	r22, r18
     d70:	73 0b       	sbc	r23, r19
     d72:	fb 01       	movw	r30, r22
     d74:	e8 1b       	sub	r30, r24
     d76:	f9 0b       	sbc	r31, r25
     d78:	cf 01       	movw	r24, r30
     d7a:	2f 85       	ldd	r18, Y+15	; 0x0f
     d7c:	38 89       	ldd	r19, Y+16	; 0x10
     d7e:	82 1b       	sub	r24, r18
     d80:	93 0b       	sbc	r25, r19
     d82:	90 93 3f 01 	sts	0x013F, r25
     d86:	80 93 3e 01 	sts	0x013E, r24
     d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <__stack+0x2c3>
			}
			else {
				top = far2;
     d8c:	50 93 43 01 	sts	0x0143, r21
     d90:	40 93 42 01 	sts	0x0142, r20
				bottom = far1;
     d94:	90 93 41 01 	sts	0x0141, r25
     d98:	80 93 40 01 	sts	0x0140, r24
				right = close1;
     d9c:	30 93 3d 01 	sts	0x013D, r19
     da0:	20 93 3c 01 	sts	0x013C, r18
				left = 9 - top - bottom - right;
     da4:	69 e0       	ldi	r22, 0x09	; 9
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	fb 01       	movw	r30, r22
     daa:	e4 1b       	sub	r30, r20
     dac:	f5 0b       	sbc	r31, r21
     dae:	bf 01       	movw	r22, r30
     db0:	68 1b       	sub	r22, r24
     db2:	79 0b       	sbc	r23, r25
     db4:	cb 01       	movw	r24, r22
     db6:	82 1b       	sub	r24, r18
     db8:	93 0b       	sbc	r25, r19
     dba:	90 93 3f 01 	sts	0x013F, r25
     dbe:	80 93 3e 01 	sts	0x013E, r24
			}
		}
	}
	return 1;
}
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	6c 96       	adiw	r28, 0x1c	; 28
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	6f 90       	pop	r6
     dec:	5f 90       	pop	r5
     dee:	4f 90       	pop	r4
     df0:	3f 90       	pop	r3
     df2:	2f 90       	pop	r2
     df4:	08 95       	ret

00000df6 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
     df6:	2f 92       	push	r2
     df8:	3f 92       	push	r3
     dfa:	4f 92       	push	r4
     dfc:	5f 92       	push	r5
     dfe:	6f 92       	push	r6
     e00:	7f 92       	push	r7
     e02:	8f 92       	push	r8
     e04:	9f 92       	push	r9
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	2e 97       	sbiw	r28, 0x0e	; 14
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	1c 01       	movw	r2, r24
	numlost = 0;
     e2c:	10 92 17 01 	sts	0x0117, r1
     e30:	10 92 16 01 	sts	0x0116, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
     e34:	0e 94 79 04 	call	0x8f2	; 0x8f2 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
     e38:	00 91 42 01 	lds	r16, 0x0142
     e3c:	10 91 43 01 	lds	r17, 0x0143
     e40:	f8 01       	movw	r30, r16
     e42:	ee 0f       	add	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	ec 5c       	subi	r30, 0xCC	; 204
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	20 81       	ld	r18, Z
     e4c:	31 81       	ldd	r19, Z+1	; 0x01
     e4e:	3a 87       	std	Y+10, r19	; 0x0a
     e50:	29 87       	std	Y+9, r18	; 0x09
     e52:	2f 3f       	cpi	r18, 0xFF	; 255
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	38 07       	cpc	r19, r24
     e58:	08 f0       	brcs	.+2      	; 0xe5c <localize+0x66>
     e5a:	d5 c1       	rjmp	.+938    	; 0x1206 <localize+0x410>
     e5c:	c0 90 40 01 	lds	r12, 0x0140
     e60:	d0 90 41 01 	lds	r13, 0x0141
     e64:	f6 01       	movw	r30, r12
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	ec 5c       	subi	r30, 0xCC	; 204
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	e0 80       	ld	r14, Z
     e70:	f1 80       	ldd	r15, Z+1	; 0x01
     e72:	9f ef       	ldi	r25, 0xFF	; 255
     e74:	e9 16       	cp	r14, r25
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	f9 06       	cpc	r15, r25
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <localize+0x88>
     e7c:	c4 c1       	rjmp	.+904    	; 0x1206 <localize+0x410>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
     e7e:	40 90 08 01 	lds	r4, 0x0108
     e82:	50 90 09 01 	lds	r5, 0x0109
     e86:	60 90 0a 01 	lds	r6, 0x010A
     e8a:	70 90 0b 01 	lds	r7, 0x010B
     e8e:	b9 01       	movw	r22, r18
     e90:	6e 0d       	add	r22, r14
     e92:	7f 1d       	adc	r23, r15
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	5f e3       	ldi	r21, 0x3F	; 63
     ea4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     ea8:	a3 01       	movw	r20, r6
     eaa:	92 01       	movw	r18, r4
     eac:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     eb0:	69 83       	std	Y+1, r22	; 0x01
     eb2:	7a 83       	std	Y+2, r23	; 0x02
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	9c 83       	std	Y+4, r25	; 0x04
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
     eb8:	f8 01       	movw	r30, r16
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e4 5d       	subi	r30, 0xD4	; 212
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	a0 80       	ld	r10, Z
     ec4:	b1 80       	ldd	r11, Z+1	; 0x01
     ec6:	f6 01       	movw	r30, r12
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	e4 5d       	subi	r30, 0xD4	; 212
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	00 81       	ld	r16, Z
     ed2:	11 81       	ldd	r17, Z+1	; 0x01
     ed4:	b8 01       	movw	r22, r16
     ed6:	6a 0d       	add	r22, r10
     ed8:	7b 1d       	adc	r23, r11
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     eee:	20 91 04 01 	lds	r18, 0x0104
     ef2:	30 91 05 01 	lds	r19, 0x0105
     ef6:	40 91 06 01 	lds	r20, 0x0106
     efa:	50 91 07 01 	lds	r21, 0x0107
     efe:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     f02:	6d 83       	std	Y+5, r22	; 0x05
     f04:	7e 83       	std	Y+6, r23	; 0x06
     f06:	8f 83       	std	Y+7, r24	; 0x07
     f08:	98 87       	std	Y+8, r25	; 0x08
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
     f0a:	b5 01       	movw	r22, r10
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     f14:	4b 01       	movw	r8, r22
     f16:	5c 01       	movw	r10, r24
     f18:	b8 01       	movw	r22, r16
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     f22:	9b 01       	movw	r18, r22
     f24:	ac 01       	movw	r20, r24
     f26:	c5 01       	movw	r24, r10
     f28:	b4 01       	movw	r22, r8
     f2a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     f2e:	4b 01       	movw	r8, r22
     f30:	5c 01       	movw	r10, r24
     f32:	e9 85       	ldd	r30, Y+9	; 0x09
     f34:	fa 85       	ldd	r31, Y+10	; 0x0a
     f36:	bf 01       	movw	r22, r30
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     f40:	69 87       	std	Y+9, r22	; 0x09
     f42:	7a 87       	std	Y+10, r23	; 0x0a
     f44:	8b 87       	std	Y+11, r24	; 0x0b
     f46:	9c 87       	std	Y+12, r25	; 0x0c
     f48:	b7 01       	movw	r22, r14
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
     f52:	9b 01       	movw	r18, r22
     f54:	ac 01       	movw	r20, r24
     f56:	69 85       	ldd	r22, Y+9	; 0x09
     f58:	7a 85       	ldd	r23, Y+10	; 0x0a
     f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f5e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     f62:	a5 01       	movw	r20, r10
     f64:	94 01       	movw	r18, r8
     f66:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <atan2>
     f6a:	69 87       	std	Y+9, r22	; 0x09
     f6c:	7a 87       	std	Y+10, r23	; 0x0a
     f6e:	8b 87       	std	Y+11, r24	; 0x0b
     f70:	9c 87       	std	Y+12, r25	; 0x0c
		phi = ((float) atan2((double) posy, (double) posx));
     f72:	79 81       	ldd	r23, Y+1	; 0x01
     f74:	6a 81       	ldd	r22, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	27 2f       	mov	r18, r23
     f7c:	36 2f       	mov	r19, r22
     f7e:	49 2f       	mov	r20, r25
     f80:	58 2f       	mov	r21, r24
     f82:	bd 81       	ldd	r27, Y+5	; 0x05
     f84:	ae 81       	ldd	r26, Y+6	; 0x06
     f86:	ef 81       	ldd	r30, Y+7	; 0x07
     f88:	18 85       	ldd	r17, Y+8	; 0x08
     f8a:	6b 2f       	mov	r22, r27
     f8c:	7a 2f       	mov	r23, r26
     f8e:	8e 2f       	mov	r24, r30
     f90:	91 2f       	mov	r25, r17
     f92:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <atan2>
     f96:	4b 01       	movw	r8, r22
     f98:	5c 01       	movw	r10, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
     f9a:	79 81       	ldd	r23, Y+1	; 0x01
     f9c:	6a 81       	ldd	r22, Y+2	; 0x02
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	27 2f       	mov	r18, r23
     fa4:	36 2f       	mov	r19, r22
     fa6:	49 2f       	mov	r20, r25
     fa8:	58 2f       	mov	r21, r24
     faa:	67 2f       	mov	r22, r23
     fac:	73 2f       	mov	r23, r19
     fae:	89 2f       	mov	r24, r25
     fb0:	95 2f       	mov	r25, r21
     fb2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
     fba:	7d 81       	ldd	r23, Y+5	; 0x05
     fbc:	6e 81       	ldd	r22, Y+6	; 0x06
     fbe:	9f 81       	ldd	r25, Y+7	; 0x07
     fc0:	88 85       	ldd	r24, Y+8	; 0x08
     fc2:	27 2f       	mov	r18, r23
     fc4:	36 2f       	mov	r19, r22
     fc6:	49 2f       	mov	r20, r25
     fc8:	58 2f       	mov	r21, r24
     fca:	67 2f       	mov	r22, r23
     fcc:	73 2f       	mov	r23, r19
     fce:	89 2f       	mov	r24, r25
     fd0:	95 2f       	mov	r25, r21
     fd2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     fd6:	9b 01       	movw	r18, r22
     fd8:	ac 01       	movw	r20, r24
     fda:	c7 01       	movw	r24, r14
     fdc:	b6 01       	movw	r22, r12
     fde:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__addsf3>
     fe2:	0e 94 48 10 	call	0x2090	; 0x2090 <sqrt>
     fe6:	6b 01       	movw	r12, r22
     fe8:	7c 01       	movw	r14, r24
		
		

		data[0] = (rcenterx + r * (float) sin((double) (((3 * 3.14)/2) - angle - phi)));
     fea:	29 85       	ldd	r18, Y+9	; 0x09
     fec:	3a 85       	ldd	r19, Y+10	; 0x0a
     fee:	4b 85       	ldd	r20, Y+11	; 0x0b
     ff0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ff2:	62 e5       	ldi	r22, 0x52	; 82
     ff4:	78 eb       	ldi	r23, 0xB8	; 184
     ff6:	86 e9       	ldi	r24, 0x96	; 150
     ff8:	90 e4       	ldi	r25, 0x40	; 64
     ffa:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
     ffe:	a5 01       	movw	r20, r10
    1000:	94 01       	movw	r18, r8
    1002:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__subsf3>
    1006:	6e 87       	std	Y+14, r22	; 0x0e
    1008:	7d 87       	std	Y+13, r23	; 0x0d
    100a:	18 2f       	mov	r17, r24
    100c:	09 2f       	mov	r16, r25
    100e:	81 2f       	mov	r24, r17
    1010:	90 2f       	mov	r25, r16
    1012:	0e 94 3e 10 	call	0x207c	; 0x207c <sin>
    1016:	a7 01       	movw	r20, r14
    1018:	96 01       	movw	r18, r12
    101a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	c3 01       	movw	r24, r6
    1024:	b2 01       	movw	r22, r4
    1026:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__addsf3>
    102a:	f1 01       	movw	r30, r2
    102c:	60 83       	st	Z, r22
    102e:	71 83       	std	Z+1, r23	; 0x01
    1030:	82 83       	std	Z+2, r24	; 0x02
    1032:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery + r * (float) cos((double) (((3 * 3.14)/2) - angle - phi));
    1034:	5e 85       	ldd	r21, Y+14	; 0x0e
    1036:	4d 85       	ldd	r20, Y+13	; 0x0d
    1038:	65 2f       	mov	r22, r21
    103a:	74 2f       	mov	r23, r20
    103c:	81 2f       	mov	r24, r17
    103e:	90 2f       	mov	r25, r16
    1040:	0e 94 55 0e 	call	0x1caa	; 0x1caa <cos>
    1044:	a7 01       	movw	r20, r14
    1046:	96 01       	movw	r18, r12
    1048:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
    104c:	20 91 04 01 	lds	r18, 0x0104
    1050:	30 91 05 01 	lds	r19, 0x0105
    1054:	40 91 06 01 	lds	r20, 0x0106
    1058:	50 91 07 01 	lds	r21, 0x0107
    105c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__addsf3>
    1060:	f1 01       	movw	r30, r2
    1062:	64 83       	std	Z+4, r22	; 0x04
    1064:	75 83       	std	Z+5, r23	; 0x05
    1066:	86 83       	std	Z+6, r24	; 0x06
    1068:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[2] = angle * 180.0 / 3.14;
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	44 e3       	ldi	r20, 0x34	; 52
    1070:	53 e4       	ldi	r21, 0x43	; 67
    1072:	69 85       	ldd	r22, Y+9	; 0x09
    1074:	7a 85       	ldd	r23, Y+10	; 0x0a
    1076:	8b 85       	ldd	r24, Y+11	; 0x0b
    1078:	9c 85       	ldd	r25, Y+12	; 0x0c
    107a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
    107e:	23 ec       	ldi	r18, 0xC3	; 195
    1080:	35 ef       	ldi	r19, 0xF5	; 245
    1082:	48 e4       	ldi	r20, 0x48	; 72
    1084:	50 e4       	ldi	r21, 0x40	; 64
    1086:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__divsf3>
    108a:	f1 01       	movw	r30, r2
    108c:	60 87       	std	Z+8, r22	; 0x08
    108e:	71 87       	std	Z+9, r23	; 0x09
    1090:	82 87       	std	Z+10, r24	; 0x0a
    1092:	93 87       	std	Z+11, r25	; 0x0b
		data[3] = x[top];
    1094:	00 91 42 01 	lds	r16, 0x0142
    1098:	10 91 43 01 	lds	r17, 0x0143
    109c:	00 0f       	add	r16, r16
    109e:	11 1f       	adc	r17, r17
    10a0:	f8 01       	movw	r30, r16
    10a2:	ec 5c       	subi	r30, 0xCC	; 204
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    10b2:	f1 01       	movw	r30, r2
    10b4:	64 87       	std	Z+12, r22	; 0x0c
    10b6:	75 87       	std	Z+13, r23	; 0x0d
    10b8:	86 87       	std	Z+14, r24	; 0x0e
    10ba:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    10bc:	f8 01       	movw	r30, r16
    10be:	e4 5d       	subi	r30, 0xD4	; 212
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    10ce:	f1 01       	movw	r30, r2
    10d0:	60 8b       	std	Z+16, r22	; 0x10
    10d2:	71 8b       	std	Z+17, r23	; 0x11
    10d4:	82 8b       	std	Z+18, r24	; 0x12
    10d6:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    10d8:	00 91 40 01 	lds	r16, 0x0140
    10dc:	10 91 41 01 	lds	r17, 0x0141
    10e0:	00 0f       	add	r16, r16
    10e2:	11 1f       	adc	r17, r17
    10e4:	f8 01       	movw	r30, r16
    10e6:	ec 5c       	subi	r30, 0xCC	; 204
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    10f6:	f1 01       	movw	r30, r2
    10f8:	64 8b       	std	Z+20, r22	; 0x14
    10fa:	75 8b       	std	Z+21, r23	; 0x15
    10fc:	86 8b       	std	Z+22, r24	; 0x16
    10fe:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1100:	f8 01       	movw	r30, r16
    1102:	e4 5d       	subi	r30, 0xD4	; 212
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    1112:	f1 01       	movw	r30, r2
    1114:	60 8f       	std	Z+24, r22	; 0x18
    1116:	71 8f       	std	Z+25, r23	; 0x19
    1118:	82 8f       	std	Z+26, r24	; 0x1a
    111a:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    111c:	00 91 3c 01 	lds	r16, 0x013C
    1120:	10 91 3d 01 	lds	r17, 0x013D
    1124:	00 0f       	add	r16, r16
    1126:	11 1f       	adc	r17, r17
    1128:	f8 01       	movw	r30, r16
    112a:	ec 5c       	subi	r30, 0xCC	; 204
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    113a:	f1 01       	movw	r30, r2
    113c:	64 8f       	std	Z+28, r22	; 0x1c
    113e:	75 8f       	std	Z+29, r23	; 0x1d
    1140:	86 8f       	std	Z+30, r24	; 0x1e
    1142:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1144:	f8 01       	movw	r30, r16
    1146:	e4 5d       	subi	r30, 0xD4	; 212
    1148:	fe 4f       	sbci	r31, 0xFE	; 254
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    1156:	f1 01       	movw	r30, r2
    1158:	60 a3       	std	Z+32, r22	; 0x20
    115a:	71 a3       	std	Z+33, r23	; 0x21
    115c:	82 a3       	std	Z+34, r24	; 0x22
    115e:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1160:	00 91 3e 01 	lds	r16, 0x013E
    1164:	10 91 3f 01 	lds	r17, 0x013F
    1168:	00 0f       	add	r16, r16
    116a:	11 1f       	adc	r17, r17
    116c:	f8 01       	movw	r30, r16
    116e:	ec 5c       	subi	r30, 0xCC	; 204
    1170:	fe 4f       	sbci	r31, 0xFE	; 254
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    117e:	f1 01       	movw	r30, r2
    1180:	64 a3       	std	Z+36, r22	; 0x24
    1182:	75 a3       	std	Z+37, r23	; 0x25
    1184:	86 a3       	std	Z+38, r24	; 0x26
    1186:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1188:	f8 01       	movw	r30, r16
    118a:	e4 5d       	subi	r30, 0xD4	; 212
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__floatunsisf>
    119a:	f1 01       	movw	r30, r2
    119c:	60 a7       	std	Z+40, r22	; 0x28
    119e:	71 a7       	std	Z+41, r23	; 0x29
    11a0:	82 a7       	std	Z+42, r24	; 0x2a
    11a2:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	44 e3       	ldi	r20, 0x34	; 52
    11aa:	53 e4       	ldi	r21, 0x43	; 67
    11ac:	c5 01       	movw	r24, r10
    11ae:	b4 01       	movw	r22, r8
    11b0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
    11b4:	23 ec       	ldi	r18, 0xC3	; 195
    11b6:	35 ef       	ldi	r19, 0xF5	; 245
    11b8:	48 e4       	ldi	r20, 0x48	; 72
    11ba:	50 e4       	ldi	r21, 0x40	; 64
    11bc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__divsf3>
    11c0:	f1 01       	movw	r30, r2
    11c2:	64 a7       	std	Z+44, r22	; 0x2c
    11c4:	75 a7       	std	Z+45, r23	; 0x2d
    11c6:	86 a7       	std	Z+46, r24	; 0x2e
    11c8:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    11ca:	59 81       	ldd	r21, Y+1	; 0x01
    11cc:	4a 81       	ldd	r20, Y+2	; 0x02
    11ce:	3b 81       	ldd	r19, Y+3	; 0x03
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	85 2f       	mov	r24, r21
    11d4:	94 2f       	mov	r25, r20
    11d6:	a3 2f       	mov	r26, r19
    11d8:	b2 2f       	mov	r27, r18
    11da:	80 ab       	std	Z+48, r24	; 0x30
    11dc:	91 ab       	std	Z+49, r25	; 0x31
    11de:	a2 ab       	std	Z+50, r26	; 0x32
    11e0:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    11e2:	5d 81       	ldd	r21, Y+5	; 0x05
    11e4:	4e 81       	ldd	r20, Y+6	; 0x06
    11e6:	3f 81       	ldd	r19, Y+7	; 0x07
    11e8:	28 85       	ldd	r18, Y+8	; 0x08
    11ea:	85 2f       	mov	r24, r21
    11ec:	94 2f       	mov	r25, r20
    11ee:	a3 2f       	mov	r26, r19
    11f0:	b2 2f       	mov	r27, r18
    11f2:	84 ab       	std	Z+52, r24	; 0x34
    11f4:	95 ab       	std	Z+53, r25	; 0x35
    11f6:	a6 ab       	std	Z+54, r26	; 0x36
    11f8:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    11fa:	c0 ae       	std	Z+56, r12	; 0x38
    11fc:	d1 ae       	std	Z+57, r13	; 0x39
    11fe:	e2 ae       	std	Z+58, r14	; 0x3a
    1200:	f3 ae       	std	Z+59, r15	; 0x3b
		return 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	00 c0       	rjmp	.+0      	; 0x1206 <localize+0x410>
		return 1;
	}
	
	return 0;
	*/
    1206:	2e 96       	adiw	r28, 0x0e	; 14
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	9f 90       	pop	r9
    1228:	8f 90       	pop	r8
    122a:	7f 90       	pop	r7
    122c:	6f 90       	pop	r6
    122e:	5f 90       	pop	r5
    1230:	4f 90       	pop	r4
    1232:	3f 90       	pop	r3
    1234:	2f 90       	pop	r2
    1236:	08 95       	ret

00001238 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	18 2f       	mov	r17, r24
    1240:	d6 2f       	mov	r29, r22
    1242:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1244:	0e 94 27 04 	call	0x84e	; 0x84e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1248:	94 ea       	ldi	r25, 0xA4	; 164
    124a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    124e:	ec eb       	ldi	r30, 0xBC	; 188
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	99 23       	and	r25, r25
    1256:	ec f7       	brge	.-6      	; 0x1252 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1258:	90 e5       	ldi	r25, 0x50	; 80
    125a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    125e:	94 e8       	ldi	r25, 0x84	; 132
    1260:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1264:	ec eb       	ldi	r30, 0xBC	; 188
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	90 81       	ld	r25, Z
    126a:	99 23       	and	r25, r25
    126c:	ec f7       	brge	.-6      	; 0x1268 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    126e:	90 91 b9 00 	lds	r25, 0x00B9
    1272:	98 7f       	andi	r25, 0xF8	; 248
    1274:	90 32       	cpi	r25, 0x20	; 32
    1276:	29 f4       	brne	.+10     	; 0x1282 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1278:	84 e9       	ldi	r24, 0x94	; 148
    127a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	2d c0       	rjmp	.+90     	; 0x12dc <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1288:	84 e8       	ldi	r24, 0x84	; 132
    128a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    128e:	ec eb       	ldi	r30, 0xBC	; 188
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	90 81       	ld	r25, Z
    1294:	99 23       	and	r25, r25
    1296:	ec f7       	brge	.-6      	; 0x1292 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1298:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    129c:	84 e8       	ldi	r24, 0x84	; 132
    129e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    12a2:	ec eb       	ldi	r30, 0xBC	; 188
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	88 23       	and	r24, r24
    12aa:	ec f7       	brge	.-6      	; 0x12a6 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    12ac:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    12b0:	84 e8       	ldi	r24, 0x84	; 132
    12b2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    12b6:	ec eb       	ldi	r30, 0xBC	; 188
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	88 23       	and	r24, r24
    12be:	ec f7       	brge	.-6      	; 0x12ba <m_rf_open+0x82>
	
	TWDR = packet_length;
    12c0:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    12ca:	ec eb       	ldi	r30, 0xBC	; 188
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	ec f7       	brge	.-6      	; 0x12ce <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    12d4:	84 e9       	ldi	r24, 0x94	; 148
    12d6:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	08 95       	ret

000012e4 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    12e8:	24 ea       	ldi	r18, 0xA4	; 164
    12ea:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    12ee:	ec eb       	ldi	r30, 0xBC	; 188
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	20 81       	ld	r18, Z
    12f4:	22 23       	and	r18, r18
    12f6:	ec f7       	brge	.-6      	; 0x12f2 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    12f8:	21 e5       	ldi	r18, 0x51	; 81
    12fa:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    12fe:	24 e8       	ldi	r18, 0x84	; 132
    1300:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1304:	ec eb       	ldi	r30, 0xBC	; 188
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	20 81       	ld	r18, Z
    130a:	22 23       	and	r18, r18
    130c:	ec f7       	brge	.-6      	; 0x1308 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    130e:	20 91 b9 00 	lds	r18, 0x00B9
    1312:	28 7f       	andi	r18, 0xF8	; 248
    1314:	28 34       	cpi	r18, 0x48	; 72
    1316:	29 f4       	brne	.+10     	; 0x1322 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1318:	84 e9       	ldi	r24, 0x94	; 148
    131a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1322:	24 ec       	ldi	r18, 0xC4	; 196
    1324:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1328:	ec eb       	ldi	r30, 0xBC	; 188
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	20 81       	ld	r18, Z
    132e:	22 23       	and	r18, r18
    1330:	ec f7       	brge	.-6      	; 0x132c <m_rf_read+0x48>
	bytes = TWDR;
    1332:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1336:	46 13       	cpse	r20, r22
    1338:	09 c0       	rjmp	.+18     	; 0x134c <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	41 50       	subi	r20, 0x01	; 1
    133e:	51 09       	sbc	r21, r1
    1340:	14 16       	cp	r1, r20
    1342:	15 06       	cpc	r1, r21
    1344:	44 f0       	brlt	.+16     	; 0x1356 <m_rf_read+0x72>
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	18 c0       	rjmp	.+48     	; 0x137c <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    134c:	84 e9       	ldi	r24, 0x94	; 148
    134e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	25 c0       	rjmp	.+74     	; 0x13a0 <m_rf_read+0xbc>
    1356:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    135c:	ec eb       	ldi	r30, 0xBC	; 188
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1362:	cb eb       	ldi	r28, 0xBB	; 187
    1364:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1366:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1368:	60 81       	ld	r22, Z
    136a:	66 23       	and	r22, r22
    136c:	ec f7       	brge	.-6      	; 0x1368 <m_rf_read+0x84>
		buffer[i] = TWDR;
    136e:	68 81       	ld	r22, Y
    1370:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1372:	2f 5f       	subi	r18, 0xFF	; 255
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	24 17       	cp	r18, r20
    1378:	35 07       	cpc	r19, r21
    137a:	ac f3       	brlt	.-22     	; 0x1366 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    137c:	24 e8       	ldi	r18, 0x84	; 132
    137e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1382:	ec eb       	ldi	r30, 0xBC	; 188
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	20 81       	ld	r18, Z
    1388:	22 23       	and	r18, r18
    138a:	ec f7       	brge	.-6      	; 0x1386 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    138c:	20 91 bb 00 	lds	r18, 0x00BB
    1390:	fc 01       	movw	r30, r24
    1392:	e4 0f       	add	r30, r20
    1394:	f5 1f       	adc	r31, r21
    1396:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1398:	84 e9       	ldi	r24, 0x94	; 148
    139a:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    13b8:	e1 ee       	ldi	r30, 0xE1	; 225
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
        UDINT = 0;
    13be:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    13c0:	83 ff       	sbrs	r24, 3
    13c2:	11 c0       	rjmp	.+34     	; 0x13e6 <__vector_10+0x40>
		UENUM = 0;
    13c4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    13ce:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    13d2:	92 e1       	ldi	r25, 0x12	; 18
    13d4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    13d8:	98 e0       	ldi	r25, 0x08	; 8
    13da:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    13de:	10 92 5d 01 	sts	0x015D, r1
		cdc_line_rtsdtr = 0;
    13e2:	10 92 5e 01 	sts	0x015E, r1
        }
	if (intbits & (1<<SOFI)) {
    13e6:	82 ff       	sbrs	r24, 2
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <__vector_10+0x6a>
		if (usb_configuration) {
    13ea:	80 91 5d 01 	lds	r24, 0x015D
    13ee:	88 23       	and	r24, r24
    13f0:	79 f0       	breq	.+30     	; 0x1410 <__vector_10+0x6a>
			t = transmit_flush_timer;
    13f2:	80 91 5c 01 	lds	r24, 0x015C
			if (t) {
    13f6:	88 23       	and	r24, r24
    13f8:	59 f0       	breq	.+22     	; 0x1410 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	80 93 5c 01 	sts	0x015C, r24
				if (!t) {
    1400:	81 11       	cpse	r24, r1
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    140a:	8a e3       	ldi	r24, 0x3A	; 58
    140c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    144c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1450:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1454:	83 ff       	sbrs	r24, 3
    1456:	51 c1       	rjmp	.+674    	; 0x16fa <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    1458:	e1 ef       	ldi	r30, 0xF1	; 241
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    145e:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1460:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1462:	30 81       	ld	r19, Z
    1464:	93 2f       	mov	r25, r19
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	dc 01       	movw	r26, r24
    146a:	a2 2b       	or	r26, r18
    146c:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    146e:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1470:	60 81       	ld	r22, Z
    1472:	96 2f       	mov	r25, r22
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	85 2b       	or	r24, r21
                wLength = UEDATX;
    1478:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    147a:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    147c:	52 ef       	ldi	r21, 0xF2	; 242
    147e:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1482:	46 30       	cpi	r20, 0x06	; 6
    1484:	09 f0       	breq	.+2      	; 0x1488 <__vector_11+0x66>
    1486:	5c c0       	rjmp	.+184    	; 0x1540 <__vector_11+0x11e>
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    148a:	81 e2       	ldi	r24, 0x21	; 33
    148c:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1490:	3b c1       	rjmp	.+630    	; 0x1708 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1492:	c6 e0       	ldi	r28, 0x06	; 6
    1494:	47 ef       	ldi	r20, 0xF7	; 247
    1496:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1498:	fa 01       	movw	r30, r20
    149a:	65 91       	lpm	r22, Z+
    149c:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    149e:	26 17       	cp	r18, r22
    14a0:	37 07       	cpc	r19, r23
    14a2:	19 f0       	breq	.+6      	; 0x14aa <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    14a4:	49 5f       	subi	r20, 0xF9	; 249
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    14a8:	20 c0       	rjmp	.+64     	; 0x14ea <__vector_11+0xc8>
				}
				list += 2;
    14aa:	fa 01       	movw	r30, r20
    14ac:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    14ae:	65 91       	lpm	r22, Z+
    14b0:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    14b2:	86 17       	cp	r24, r22
    14b4:	97 07       	cpc	r25, r23
    14b6:	19 f0       	breq	.+6      	; 0x14be <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    14b8:	49 5f       	subi	r20, 0xF9	; 249
    14ba:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <__vector_11+0xc8>
				}
				list += 2;
    14be:	fa 01       	movw	r30, r20
    14c0:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    14c2:	85 91       	lpm	r24, Z+
    14c4:	94 91       	lpm	r25, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	39 2f       	mov	r19, r25
				list += 2;
    14ca:	fa 01       	movw	r30, r20
    14cc:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    14ce:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    14d0:	9b 2f       	mov	r25, r27
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    14d6:	8f 3f       	cpi	r24, 0xFF	; 255
    14d8:	91 05       	cpc	r25, r1
    14da:	19 f0       	breq	.+6      	; 0x14e2 <__vector_11+0xc0>
    14dc:	10 f0       	brcs	.+4      	; 0x14e2 <__vector_11+0xc0>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	84 17       	cp	r24, r20
    14e4:	28 f4       	brcc	.+10     	; 0x14f0 <__vector_11+0xce>
    14e6:	48 2f       	mov	r20, r24
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <__vector_11+0xce>
    14ea:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    14ec:	a9 f6       	brne	.-86     	; 0x1498 <__vector_11+0x76>
    14ee:	cd cf       	rjmp	.-102    	; 0x148a <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    14f0:	c8 ee       	ldi	r28, 0xE8	; 232
    14f2:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    14f4:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    14f6:	a1 ef       	ldi	r26, 0xF1	; 241
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    14fa:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    14fc:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    14fe:	98 2f       	mov	r25, r24
    1500:	95 70       	andi	r25, 0x05	; 5
    1502:	e1 f3       	breq	.-8      	; 0x14fc <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    1504:	82 fd       	sbrc	r24, 2
    1506:	00 c1       	rjmp	.+512    	; 0x1708 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1508:	64 2f       	mov	r22, r20
    150a:	41 31       	cpi	r20, 0x11	; 17
    150c:	08 f0       	brcs	.+2      	; 0x1510 <__vector_11+0xee>
    150e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1510:	66 23       	and	r22, r22
    1512:	09 f4       	brne	.+2      	; 0x1516 <__vector_11+0xf4>
    1514:	f6 c0       	rjmp	.+492    	; 0x1702 <__vector_11+0x2e0>
    1516:	c9 01       	movw	r24, r18
    1518:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    151a:	fc 01       	movw	r30, r24
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	e4 91       	lpm	r30, Z
    1520:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1522:	51 50       	subi	r21, 0x01	; 1
    1524:	d1 f7       	brne	.-12     	; 0x151a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1526:	86 2f       	mov	r24, r22
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	28 0f       	add	r18, r24
    1530:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1532:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1534:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1536:	41 11       	cpse	r20, r1
    1538:	e1 cf       	rjmp	.-62     	; 0x14fc <__vector_11+0xda>
    153a:	60 31       	cpi	r22, 0x10	; 16
    153c:	f9 f2       	breq	.-66     	; 0x14fc <__vector_11+0xda>
    153e:	e4 c0       	rjmp	.+456    	; 0x1708 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1540:	45 30       	cpi	r20, 0x05	; 5
    1542:	61 f4       	brne	.+24     	; 0x155c <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1544:	8e ef       	ldi	r24, 0xFE	; 254
    1546:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    154a:	e8 ee       	ldi	r30, 0xE8	; 232
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	80 ff       	sbrs	r24, 0
    1552:	fd cf       	rjmp	.-6      	; 0x154e <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1554:	20 68       	ori	r18, 0x80	; 128
    1556:	20 93 e3 00 	sts	0x00E3, r18
			return;
    155a:	d6 c0       	rjmp	.+428    	; 0x1708 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    155c:	49 30       	cpi	r20, 0x09	; 9
    155e:	a1 f5       	brne	.+104    	; 0x15c8 <__vector_11+0x1a6>
    1560:	71 11       	cpse	r23, r1
    1562:	5b c0       	rjmp	.+182    	; 0x161a <__vector_11+0x1f8>
			usb_configuration = wValue;
    1564:	20 93 5d 01 	sts	0x015D, r18
			cdc_line_rtsdtr = 0;
    1568:	10 92 5e 01 	sts	0x015E, r1
			transmit_flush_timer = 0;
    156c:	10 92 5c 01 	sts	0x015C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1570:	8e ef       	ldi	r24, 0xFE	; 254
    1572:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1576:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1578:	81 e2       	ldi	r24, 0x21	; 33
    157a:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    157c:	c9 ee       	ldi	r28, 0xE9	; 233
    157e:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1580:	ab ee       	ldi	r26, 0xEB	; 235
    1582:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1584:	6c ee       	ldi	r22, 0xEC	; 236
    1586:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1588:	4d ee       	ldi	r20, 0xED	; 237
    158a:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    158c:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    158e:	9c 01       	movw	r18, r24
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	fc 01       	movw	r30, r24
    1596:	04 91       	lpm	r16, Z
				UECONX = en;
    1598:	0c 93       	st	X, r16
				if (en) {
    159a:	00 23       	and	r16, r16
    159c:	59 f0       	breq	.+22     	; 0x15b4 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    159e:	f9 01       	movw	r30, r18
    15a0:	24 91       	lpm	r18, Z
    15a2:	fb 01       	movw	r30, r22
    15a4:	20 83       	st	Z, r18
    15a6:	fc 01       	movw	r30, r24
    15a8:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    15aa:	03 96       	adiw	r24, 0x03	; 3
    15ac:	24 91       	lpm	r18, Z
    15ae:	fa 01       	movw	r30, r20
    15b0:	20 83       	st	Z, r18
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    15b4:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    15b6:	1f 5f       	subi	r17, 0xFF	; 255
    15b8:	15 30       	cpi	r17, 0x05	; 5
    15ba:	41 f7       	brne	.-48     	; 0x158c <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    15bc:	ea ee       	ldi	r30, 0xEA	; 234
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8e e1       	ldi	r24, 0x1E	; 30
    15c2:	80 83       	st	Z, r24
        		UERST = 0;
    15c4:	10 82       	st	Z, r1
			return;
    15c6:	a0 c0       	rjmp	.+320    	; 0x1708 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    15c8:	48 30       	cpi	r20, 0x08	; 8
    15ca:	81 f4       	brne	.+32     	; 0x15ec <__vector_11+0x1ca>
    15cc:	70 38       	cpi	r23, 0x80	; 128
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <__vector_11+0x1b0>
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    15d2:	e8 ee       	ldi	r30, 0xE8	; 232
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 ff       	sbrs	r24, 0
    15da:	fd cf       	rjmp	.-6      	; 0x15d6 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    15dc:	80 91 5d 01 	lds	r24, 0x015D
    15e0:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    15e4:	8e ef       	ldi	r24, 0xFE	; 254
    15e6:	80 93 e8 00 	sts	0x00E8, r24
    15ea:	8e c0       	rjmp	.+284    	; 0x1708 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    15ec:	41 32       	cpi	r20, 0x21	; 33
    15ee:	a9 f4       	brne	.+42     	; 0x161a <__vector_11+0x1f8>
    15f0:	71 3a       	cpi	r23, 0xA1	; 161
    15f2:	f1 f5       	brne	.+124    	; 0x1670 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    15f4:	e8 ee       	ldi	r30, 0xE8	; 232
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 ff       	sbrs	r24, 0
    15fc:	fd cf       	rjmp	.-6      	; 0x15f8 <__vector_11+0x1d6>
    15fe:	ec e0       	ldi	r30, 0x0C	; 12
    1600:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1602:	a1 ef       	ldi	r26, 0xF1	; 241
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	81 91       	ld	r24, Z+
    1608:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	e3 31       	cpi	r30, 0x13	; 19
    160e:	f4 07       	cpc	r31, r20
    1610:	d1 f7       	brne	.-12     	; 0x1606 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1612:	8e ef       	ldi	r24, 0xFE	; 254
    1614:	80 93 e8 00 	sts	0x00E8, r24
    1618:	77 c0       	rjmp	.+238    	; 0x1708 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    161a:	40 32       	cpi	r20, 0x20	; 32
    161c:	c9 f4       	brne	.+50     	; 0x1650 <__vector_11+0x22e>
    161e:	71 32       	cpi	r23, 0x21	; 33
    1620:	09 f0       	breq	.+2      	; 0x1624 <__vector_11+0x202>
    1622:	6b c0       	rjmp	.+214    	; 0x16fa <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1624:	e8 ee       	ldi	r30, 0xE8	; 232
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	82 ff       	sbrs	r24, 2
    162c:	fd cf       	rjmp	.-6      	; 0x1628 <__vector_11+0x206>
    162e:	ec e0       	ldi	r30, 0x0C	; 12
    1630:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1632:	a1 ef       	ldi	r26, 0xF1	; 241
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	8c 91       	ld	r24, X
    1638:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    163a:	51 e0       	ldi	r21, 0x01	; 1
    163c:	e3 31       	cpi	r30, 0x13	; 19
    163e:	f5 07       	cpc	r31, r21
    1640:	d1 f7       	brne	.-12     	; 0x1636 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1642:	e8 ee       	ldi	r30, 0xE8	; 232
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8b ef       	ldi	r24, 0xFB	; 251
    1648:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    164a:	8e ef       	ldi	r24, 0xFE	; 254
    164c:	80 83       	st	Z, r24
    164e:	5c c0       	rjmp	.+184    	; 0x1708 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1650:	42 32       	cpi	r20, 0x22	; 34
    1652:	71 f4       	brne	.+28     	; 0x1670 <__vector_11+0x24e>
    1654:	71 32       	cpi	r23, 0x21	; 33
    1656:	09 f0       	breq	.+2      	; 0x165a <__vector_11+0x238>
    1658:	50 c0       	rjmp	.+160    	; 0x16fa <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    165a:	20 93 5e 01 	sts	0x015E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    165e:	e8 ee       	ldi	r30, 0xE8	; 232
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	80 ff       	sbrs	r24, 0
    1666:	fd cf       	rjmp	.-6      	; 0x1662 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1668:	8e ef       	ldi	r24, 0xFE	; 254
    166a:	80 93 e8 00 	sts	0x00E8, r24
    166e:	4c c0       	rjmp	.+152    	; 0x1708 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1670:	41 11       	cpse	r20, r1
    1672:	1a c0       	rjmp	.+52     	; 0x16a8 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1674:	e8 ee       	ldi	r30, 0xE8	; 232
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	20 81       	ld	r18, Z
    167a:	20 ff       	sbrs	r18, 0
    167c:	fd cf       	rjmp	.-6      	; 0x1678 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    167e:	72 38       	cpi	r23, 0x82	; 130
    1680:	51 f4       	brne	.+20     	; 0x1696 <__vector_11+0x274>
				UENUM = wIndex;
    1682:	e9 ee       	ldi	r30, 0xE9	; 233
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1688:	80 91 eb 00 	lds	r24, 0x00EB
    168c:	85 fb       	bst	r24, 5
    168e:	88 27       	eor	r24, r24
    1690:	80 f9       	bld	r24, 0
				UENUM = 0;
    1692:	10 82       	st	Z, r1
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1696:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1698:	e1 ef       	ldi	r30, 0xF1	; 241
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 83       	st	Z, r24
			UEDATX = 0;
    169e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    16a0:	8e ef       	ldi	r24, 0xFE	; 254
    16a2:	80 93 e8 00 	sts	0x00E8, r24
    16a6:	30 c0       	rjmp	.+96     	; 0x1708 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    16a8:	41 30       	cpi	r20, 0x01	; 1
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <__vector_11+0x28e>
    16ac:	43 30       	cpi	r20, 0x03	; 3
    16ae:	29 f5       	brne	.+74     	; 0x16fa <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    16b0:	72 30       	cpi	r23, 0x02	; 2
    16b2:	19 f5       	brne	.+70     	; 0x16fa <__vector_11+0x2d8>
    16b4:	23 2b       	or	r18, r19
    16b6:	09 f5       	brne	.+66     	; 0x16fa <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    16b8:	8f 77       	andi	r24, 0x7F	; 127
    16ba:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    16bc:	38 2f       	mov	r19, r24
    16be:	31 50       	subi	r19, 0x01	; 1
    16c0:	34 30       	cpi	r19, 0x04	; 4
    16c2:	d8 f4       	brcc	.+54     	; 0x16fa <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    16c4:	3e ef       	ldi	r19, 0xFE	; 254
    16c6:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    16ca:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    16ce:	43 30       	cpi	r20, 0x03	; 3
    16d0:	21 f4       	brne	.+8      	; 0x16da <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    16d2:	81 e2       	ldi	r24, 0x21	; 33
    16d4:	80 93 eb 00 	sts	0x00EB, r24
    16d8:	17 c0       	rjmp	.+46     	; 0x1708 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    16da:	99 e1       	ldi	r25, 0x19	; 25
    16dc:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	d9 01       	movw	r26, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <__vector_11+0x2ca>
    16e8:	aa 0f       	add	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	8a 95       	dec	r24
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <__vector_11+0x2c6>
    16f0:	ea ee       	ldi	r30, 0xEA	; 234
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	a0 83       	st	Z, r26
					UERST = 0;
    16f6:	10 82       	st	Z, r1
    16f8:	07 c0       	rjmp	.+14     	; 0x1708 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    16fa:	81 e2       	ldi	r24, 0x21	; 33
    16fc:	80 93 eb 00 	sts	0x00EB, r24
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1702:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1704:	41 11       	cpse	r20, r1
    1706:	fa ce       	rjmp	.-524    	; 0x14fc <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1736:	ec eb       	ldi	r30, 0xBC	; 188
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	88 23       	and	r24, r24
    173e:	34 f0       	brlt	.+12     	; 0x174c <twi_wait+0x1a>
    1740:	2f 5f       	subi	r18, 0xFF	; 255
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	29 3e       	cpi	r18, 0xE9	; 233
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	38 07       	cpc	r19, r24
    174a:	b9 f7       	brne	.-18     	; 0x173a <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	28 3e       	cpi	r18, 0xE8	; 232
    1750:	33 40       	sbci	r19, 0x03	; 3
    1752:	09 f4       	brne	.+2      	; 0x1756 <twi_wait+0x24>
    1754:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1756:	08 95       	ret

00001758 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1758:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    175c:	84 e8       	ldi	r24, 0x84	; 132
    175e:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1762:	0e 94 99 0b 	call	0x1732	; 0x1732 <twi_wait>
    1766:	88 23       	and	r24, r24
    1768:	21 f0       	breq	.+8      	; 0x1772 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    176a:	80 91 b9 00 	lds	r24, 0x00B9
    176e:	88 7f       	andi	r24, 0xF8	; 248
    1770:	08 95       	ret
	} else {
		return 0;					// comm failure
    1772:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1774:	08 95       	ret

00001776 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1776:	cf 93       	push	r28
    1778:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    177a:	94 ea       	ldi	r25, 0xA4	; 164
    177c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1780:	0e 94 99 0b 	call	0x1732	; 0x1732 <twi_wait>
    1784:	88 23       	and	r24, r24
    1786:	61 f0       	breq	.+24     	; 0x17a0 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1788:	8c 2f       	mov	r24, r28
    178a:	88 0f       	add	r24, r24
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1792:	88 34       	cpi	r24, 0x48	; 72
    1794:	39 f4       	brne	.+14     	; 0x17a4 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1796:	84 e9       	ldi	r24, 0x94	; 148
    1798:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    17a4:	81 e0       	ldi	r24, 0x01	; 1
}	
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    17aa:	cf 93       	push	r28
    17ac:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    17ae:	94 ea       	ldi	r25, 0xA4	; 164
    17b0:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    17b4:	0e 94 99 0b 	call	0x1732	; 0x1732 <twi_wait>
    17b8:	88 23       	and	r24, r24
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    17bc:	8c 2f       	mov	r24, r28
    17be:	88 0f       	add	r24, r24
    17c0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    17c4:	80 32       	cpi	r24, 0x20	; 32
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    17c8:	84 e9       	ldi	r24, 0x94	; 148
    17ca:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    17d6:	81 e0       	ldi	r24, 0x01	; 1
}	
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17dc:	84 e9       	ldi	r24, 0x94	; 148
    17de:	80 93 bc 00 	sts	0x00BC, r24
    17e2:	08 95       	ret

000017e4 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	60 97       	sbiw	r28, 0x10	; 16
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	e8 2e       	mov	r14, r24
    1802:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1804:	fe 01       	movw	r30, r28
    1806:	31 96       	adiw	r30, 0x01	; 1
    1808:	80 e1       	ldi	r24, 0x10	; 16
    180a:	df 01       	movw	r26, r30
    180c:	1d 92       	st	X+, r1
    180e:	8a 95       	dec	r24
    1810:	e9 f7       	brne	.-6      	; 0x180c <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1812:	88 e5       	ldi	r24, 0x58	; 88
    1814:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    1818:	88 23       	and	r24, r24
    181a:	09 f4       	brne	.+2      	; 0x181e <m_wii_read+0x3a>
    181c:	66 c0       	rjmp	.+204    	; 0x18ea <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    181e:	86 e3       	ldi	r24, 0x36	; 54
    1820:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1824:	88 23       	and	r24, r24
    1826:	09 f4       	brne	.+2      	; 0x182a <m_wii_read+0x46>
    1828:	62 c0       	rjmp	.+196    	; 0x18ee <m_wii_read+0x10a>
	end();
    182a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    182e:	b8 e0       	ldi	r27, 0x08	; 8
    1830:	ba 95       	dec	r27
    1832:	f1 f7       	brne	.-4      	; 0x1830 <m_wii_read+0x4c>
    1834:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1836:	88 e5       	ldi	r24, 0x58	; 88
    1838:	0e 94 bb 0b 	call	0x1776	; 0x1776 <start_read>
    183c:	88 23       	and	r24, r24
    183e:	09 f4       	brne	.+2      	; 0x1842 <m_wii_read+0x5e>
    1840:	58 c0       	rjmp	.+176    	; 0x18f2 <m_wii_read+0x10e>
    1842:	ae 01       	movw	r20, r28
    1844:	4f 5f       	subi	r20, 0xFF	; 255
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1848:	8e 01       	movw	r16, r28
    184a:	00 5f       	subi	r16, 0xF0	; 240
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    184e:	ec eb       	ldi	r30, 0xBC	; 188
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1854:	2b eb       	ldi	r18, 0xBB	; 187
    1856:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1858:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    185a:	80 81       	ld	r24, Z
    185c:	88 23       	and	r24, r24
    185e:	ec f7       	brge	.-6      	; 0x185a <m_wii_read+0x76>
		temp[i] = TWDR;
    1860:	d9 01       	movw	r26, r18
    1862:	8c 91       	ld	r24, X
    1864:	da 01       	movw	r26, r20
    1866:	8d 93       	st	X+, r24
    1868:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    186a:	a0 17       	cp	r26, r16
    186c:	b1 07       	cpc	r27, r17
    186e:	a1 f7       	brne	.-24     	; 0x1858 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1870:	84 e8       	ldi	r24, 0x84	; 132
    1872:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1876:	ec eb       	ldi	r30, 0xBC	; 188
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	88 23       	and	r24, r24
    187e:	ec f7       	brge	.-6      	; 0x187a <m_wii_read+0x96>
	temp[15] = TWDR;
    1880:	80 91 bb 00 	lds	r24, 0x00BB
    1884:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1886:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
    188a:	de 01       	movw	r26, r28
    188c:	14 96       	adiw	r26, 0x04	; 4
    188e:	6e 2d       	mov	r22, r14
    1890:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1892:	4c 91       	ld	r20, X
    1894:	24 2f       	mov	r18, r20
    1896:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1898:	cd 01       	movw	r24, r26
    189a:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    189c:	fc 01       	movw	r30, r24
    189e:	80 81       	ld	r24, Z
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	f0 e1       	ldi	r31, 0x10	; 16
    18a4:	2f 9f       	mul	r18, r31
    18a6:	80 0d       	add	r24, r0
    18a8:	91 1d       	adc	r25, r1
    18aa:	11 24       	eor	r1, r1
    18ac:	fb 01       	movw	r30, r22
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    18b2:	84 2f       	mov	r24, r20
    18b4:	80 7c       	andi	r24, 0xC0	; 192
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    18c0:	9d 01       	movw	r18, r26
    18c2:	21 50       	subi	r18, 0x01	; 1
    18c4:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    18c6:	f9 01       	movw	r30, r18
    18c8:	20 81       	ld	r18, Z
    18ca:	82 0f       	add	r24, r18
    18cc:	91 1d       	adc	r25, r1
    18ce:	fb 01       	movw	r30, r22
    18d0:	93 83       	std	Z+3, r25	; 0x03
    18d2:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    18d4:	4f 70       	andi	r20, 0x0F	; 15
    18d6:	44 83       	std	Z+4, r20	; 0x04
    18d8:	15 82       	std	Z+5, r1	; 0x05
    18da:	13 96       	adiw	r26, 0x03	; 3
    18dc:	6a 5f       	subi	r22, 0xFA	; 250
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    18e0:	0a 17       	cp	r16, r26
    18e2:	1b 07       	cpc	r17, r27
    18e4:	b1 f6       	brne	.-84     	; 0x1892 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    18f2:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    18f4:	60 96       	adiw	r28, 0x10	; 16
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	08 95       	ret

0000190e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    190e:	0e 94 27 04 	call	0x84e	; 0x84e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1912:	88 e5       	ldi	r24, 0x58	; 88
    1914:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    1918:	88 23       	and	r24, r24
    191a:	09 f4       	brne	.+2      	; 0x191e <m_wii_open+0x10>
    191c:	c7 c0       	rjmp	.+398    	; 0x1aac <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    191e:	80 e3       	ldi	r24, 0x30	; 48
    1920:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1924:	88 23       	and	r24, r24
    1926:	09 f4       	brne	.+2      	; 0x192a <m_wii_open+0x1c>
    1928:	c3 c0       	rjmp	.+390    	; 0x1ab0 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1930:	88 23       	and	r24, r24
    1932:	09 f4       	brne	.+2      	; 0x1936 <m_wii_open+0x28>
    1934:	bf c0       	rjmp	.+382    	; 0x1ab4 <m_wii_open+0x1a6>
	end();
    1936:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    193a:	83 ec       	ldi	r24, 0xC3	; 195
    193c:	99 e0       	ldi	r25, 0x09	; 9
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <m_wii_open+0x30>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <m_wii_open+0x36>
    1944:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1946:	88 e5       	ldi	r24, 0x58	; 88
    1948:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    194c:	88 23       	and	r24, r24
    194e:	09 f4       	brne	.+2      	; 0x1952 <m_wii_open+0x44>
    1950:	b3 c0       	rjmp	.+358    	; 0x1ab8 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1958:	88 23       	and	r24, r24
    195a:	09 f4       	brne	.+2      	; 0x195e <m_wii_open+0x50>
    195c:	af c0       	rjmp	.+350    	; 0x1abc <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <m_wii_open+0x5c>
    1968:	ab c0       	rjmp	.+342    	; 0x1ac0 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1970:	88 23       	and	r24, r24
    1972:	09 f4       	brne	.+2      	; 0x1976 <m_wii_open+0x68>
    1974:	a7 c0       	rjmp	.+334    	; 0x1ac4 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    197c:	88 23       	and	r24, r24
    197e:	09 f4       	brne	.+2      	; 0x1982 <m_wii_open+0x74>
    1980:	a3 c0       	rjmp	.+326    	; 0x1ac8 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1988:	88 23       	and	r24, r24
    198a:	09 f4       	brne	.+2      	; 0x198e <m_wii_open+0x80>
    198c:	9f c0       	rjmp	.+318    	; 0x1acc <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1994:	88 23       	and	r24, r24
    1996:	09 f4       	brne	.+2      	; 0x199a <m_wii_open+0x8c>
    1998:	9b c0       	rjmp	.+310    	; 0x1ad0 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <m_wii_open+0x98>
    19a4:	97 c0       	rjmp	.+302    	; 0x1ad4 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    19a6:	80 e9       	ldi	r24, 0x90	; 144
    19a8:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    19ac:	88 23       	and	r24, r24
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <m_wii_open+0xa4>
    19b0:	93 c0       	rjmp	.+294    	; 0x1ad8 <m_wii_open+0x1ca>
	end();
    19b2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
    19b6:	83 ec       	ldi	r24, 0xC3	; 195
    19b8:	99 e0       	ldi	r25, 0x09	; 9
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <m_wii_open+0xac>
    19be:	00 c0       	rjmp	.+0      	; 0x19c0 <m_wii_open+0xb2>
    19c0:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    19c2:	88 e5       	ldi	r24, 0x58	; 88
    19c4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <m_wii_open+0xc0>
    19cc:	87 c0       	rjmp	.+270    	; 0x1adc <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    19ce:	87 e0       	ldi	r24, 0x07	; 7
    19d0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    19d4:	88 23       	and	r24, r24
    19d6:	09 f4       	brne	.+2      	; 0x19da <m_wii_open+0xcc>
    19d8:	83 c0       	rjmp	.+262    	; 0x1ae0 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <m_wii_open+0xd8>
    19e4:	7f c0       	rjmp	.+254    	; 0x1ae4 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    19e6:	81 e4       	ldi	r24, 0x41	; 65
    19e8:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    19ec:	88 23       	and	r24, r24
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <m_wii_open+0xe4>
    19f0:	7b c0       	rjmp	.+246    	; 0x1ae8 <m_wii_open+0x1da>
	end();
    19f2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
    19f6:	83 ec       	ldi	r24, 0xC3	; 195
    19f8:	99 e0       	ldi	r25, 0x09	; 9
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <m_wii_open+0xec>
    19fe:	00 c0       	rjmp	.+0      	; 0x1a00 <m_wii_open+0xf2>
    1a00:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1a02:	88 e5       	ldi	r24, 0x58	; 88
    1a04:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <m_wii_open+0x100>
    1a0c:	6f c0       	rjmp	.+222    	; 0x1aec <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1a0e:	8a e1       	ldi	r24, 0x1A	; 26
    1a10:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <m_wii_open+0x10c>
    1a18:	6b c0       	rjmp	.+214    	; 0x1af0 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1a1a:	80 e4       	ldi	r24, 0x40	; 64
    1a1c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <m_wii_open+0x118>
    1a24:	67 c0       	rjmp	.+206    	; 0x1af4 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <m_wii_open+0x124>
    1a30:	63 c0       	rjmp	.+198    	; 0x1af8 <m_wii_open+0x1ea>
	end();
    1a32:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
    1a36:	83 ec       	ldi	r24, 0xC3	; 195
    1a38:	99 e0       	ldi	r25, 0x09	; 9
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <m_wii_open+0x12c>
    1a3e:	00 c0       	rjmp	.+0      	; 0x1a40 <m_wii_open+0x132>
    1a40:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1a42:	88 e5       	ldi	r24, 0x58	; 88
    1a44:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    1a48:	88 23       	and	r24, r24
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <m_wii_open+0x140>
    1a4c:	57 c0       	rjmp	.+174    	; 0x1afc <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1a4e:	83 e3       	ldi	r24, 0x33	; 51
    1a50:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <m_wii_open+0x14c>
    1a58:	53 c0       	rjmp	.+166    	; 0x1b00 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a60:	88 23       	and	r24, r24
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <m_wii_open+0x158>
    1a64:	4f c0       	rjmp	.+158    	; 0x1b04 <m_wii_open+0x1f6>
	end();
    1a66:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
    1a6a:	83 ec       	ldi	r24, 0xC3	; 195
    1a6c:	99 e0       	ldi	r25, 0x09	; 9
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <m_wii_open+0x160>
    1a72:	00 c0       	rjmp	.+0      	; 0x1a74 <m_wii_open+0x166>
    1a74:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1a76:	88 e5       	ldi	r24, 0x58	; 88
    1a78:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <start_write>
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <m_wii_open+0x174>
    1a80:	43 c0       	rjmp	.+134    	; 0x1b08 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1a82:	80 e3       	ldi	r24, 0x30	; 48
    1a84:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <m_wii_open+0x180>
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1a8e:	88 e0       	ldi	r24, 0x08	; 8
    1a90:	0e 94 ac 0b 	call	0x1758	; 0x1758 <send_byte>
    1a94:	88 23       	and	r24, r24
    1a96:	e1 f1       	breq	.+120    	; 0x1b10 <m_wii_open+0x202>
	end();
    1a98:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <end>
    1a9c:	83 ec       	ldi	r24, 0xC3	; 195
    1a9e:	99 e0       	ldi	r25, 0x09	; 9
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <m_wii_open+0x192>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <m_wii_open+0x198>
    1aa6:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1b10:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1b12:	08 95       	ret

00001b14 <__subsf3>:
    1b14:	50 58       	subi	r21, 0x80	; 128

00001b16 <__addsf3>:
    1b16:	bb 27       	eor	r27, r27
    1b18:	aa 27       	eor	r26, r26
    1b1a:	0e d0       	rcall	.+28     	; 0x1b38 <__addsf3x>
    1b1c:	f6 c1       	rjmp	.+1004   	; 0x1f0a <__fp_round>
    1b1e:	bf d1       	rcall	.+894    	; 0x1e9e <__fp_pscA>
    1b20:	30 f0       	brcs	.+12     	; 0x1b2e <__addsf3+0x18>
    1b22:	c4 d1       	rcall	.+904    	; 0x1eac <__fp_pscB>
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__addsf3+0x18>
    1b26:	31 f4       	brne	.+12     	; 0x1b34 <__addsf3+0x1e>
    1b28:	9f 3f       	cpi	r25, 0xFF	; 255
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <__addsf3+0x1a>
    1b2c:	1e f4       	brtc	.+6      	; 0x1b34 <__addsf3+0x1e>
    1b2e:	8f c1       	rjmp	.+798    	; 0x1e4e <__fp_nan>
    1b30:	0e f4       	brtc	.+2      	; 0x1b34 <__addsf3+0x1e>
    1b32:	e0 95       	com	r30
    1b34:	e7 fb       	bst	r30, 7
    1b36:	85 c1       	rjmp	.+778    	; 0x1e42 <__fp_inf>

00001b38 <__addsf3x>:
    1b38:	e9 2f       	mov	r30, r25
    1b3a:	09 d2       	rcall	.+1042   	; 0x1f4e <__fp_split3>
    1b3c:	80 f3       	brcs	.-32     	; 0x1b1e <__addsf3+0x8>
    1b3e:	ba 17       	cp	r27, r26
    1b40:	62 07       	cpc	r22, r18
    1b42:	73 07       	cpc	r23, r19
    1b44:	84 07       	cpc	r24, r20
    1b46:	95 07       	cpc	r25, r21
    1b48:	18 f0       	brcs	.+6      	; 0x1b50 <__addsf3x+0x18>
    1b4a:	71 f4       	brne	.+28     	; 0x1b68 <__addsf3x+0x30>
    1b4c:	9e f5       	brtc	.+102    	; 0x1bb4 <__addsf3x+0x7c>
    1b4e:	21 c2       	rjmp	.+1090   	; 0x1f92 <__fp_zero>
    1b50:	0e f4       	brtc	.+2      	; 0x1b54 <__addsf3x+0x1c>
    1b52:	e0 95       	com	r30
    1b54:	0b 2e       	mov	r0, r27
    1b56:	ba 2f       	mov	r27, r26
    1b58:	a0 2d       	mov	r26, r0
    1b5a:	0b 01       	movw	r0, r22
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	90 01       	movw	r18, r0
    1b60:	0c 01       	movw	r0, r24
    1b62:	ca 01       	movw	r24, r20
    1b64:	a0 01       	movw	r20, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	ff 27       	eor	r31, r31
    1b6a:	59 1b       	sub	r21, r25
    1b6c:	99 f0       	breq	.+38     	; 0x1b94 <__addsf3x+0x5c>
    1b6e:	59 3f       	cpi	r21, 0xF9	; 249
    1b70:	50 f4       	brcc	.+20     	; 0x1b86 <__addsf3x+0x4e>
    1b72:	50 3e       	cpi	r21, 0xE0	; 224
    1b74:	68 f1       	brcs	.+90     	; 0x1bd0 <__addsf3x+0x98>
    1b76:	1a 16       	cp	r1, r26
    1b78:	f0 40       	sbci	r31, 0x00	; 0
    1b7a:	a2 2f       	mov	r26, r18
    1b7c:	23 2f       	mov	r18, r19
    1b7e:	34 2f       	mov	r19, r20
    1b80:	44 27       	eor	r20, r20
    1b82:	58 5f       	subi	r21, 0xF8	; 248
    1b84:	f3 cf       	rjmp	.-26     	; 0x1b6c <__addsf3x+0x34>
    1b86:	46 95       	lsr	r20
    1b88:	37 95       	ror	r19
    1b8a:	27 95       	ror	r18
    1b8c:	a7 95       	ror	r26
    1b8e:	f0 40       	sbci	r31, 0x00	; 0
    1b90:	53 95       	inc	r21
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <__addsf3x+0x4e>
    1b94:	7e f4       	brtc	.+30     	; 0x1bb4 <__addsf3x+0x7c>
    1b96:	1f 16       	cp	r1, r31
    1b98:	ba 0b       	sbc	r27, r26
    1b9a:	62 0b       	sbc	r22, r18
    1b9c:	73 0b       	sbc	r23, r19
    1b9e:	84 0b       	sbc	r24, r20
    1ba0:	ba f0       	brmi	.+46     	; 0x1bd0 <__addsf3x+0x98>
    1ba2:	91 50       	subi	r25, 0x01	; 1
    1ba4:	a1 f0       	breq	.+40     	; 0x1bce <__addsf3x+0x96>
    1ba6:	ff 0f       	add	r31, r31
    1ba8:	bb 1f       	adc	r27, r27
    1baa:	66 1f       	adc	r22, r22
    1bac:	77 1f       	adc	r23, r23
    1bae:	88 1f       	adc	r24, r24
    1bb0:	c2 f7       	brpl	.-16     	; 0x1ba2 <__addsf3x+0x6a>
    1bb2:	0e c0       	rjmp	.+28     	; 0x1bd0 <__addsf3x+0x98>
    1bb4:	ba 0f       	add	r27, r26
    1bb6:	62 1f       	adc	r22, r18
    1bb8:	73 1f       	adc	r23, r19
    1bba:	84 1f       	adc	r24, r20
    1bbc:	48 f4       	brcc	.+18     	; 0x1bd0 <__addsf3x+0x98>
    1bbe:	87 95       	ror	r24
    1bc0:	77 95       	ror	r23
    1bc2:	67 95       	ror	r22
    1bc4:	b7 95       	ror	r27
    1bc6:	f7 95       	ror	r31
    1bc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <__addsf3x+0x96>
    1bcc:	b3 cf       	rjmp	.-154    	; 0x1b34 <__addsf3+0x1e>
    1bce:	93 95       	inc	r25
    1bd0:	88 0f       	add	r24, r24
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <__addsf3x+0x9e>
    1bd4:	99 27       	eor	r25, r25
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	97 95       	ror	r25
    1bda:	87 95       	ror	r24
    1bdc:	08 95       	ret
    1bde:	5f d1       	rcall	.+702    	; 0x1e9e <__fp_pscA>
    1be0:	58 f0       	brcs	.+22     	; 0x1bf8 <__addsf3x+0xc0>
    1be2:	80 e8       	ldi	r24, 0x80	; 128
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <__addsf3x+0xb2>
    1be8:	9e ef       	ldi	r25, 0xFE	; 254
    1bea:	60 d1       	rcall	.+704    	; 0x1eac <__fp_pscB>
    1bec:	28 f0       	brcs	.+10     	; 0x1bf8 <__addsf3x+0xc0>
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	51 e0       	ldi	r21, 0x01	; 1
    1bf2:	59 f4       	brne	.+22     	; 0x1c0a <atan2+0xe>
    1bf4:	5e ef       	ldi	r21, 0xFE	; 254
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <atan2+0xe>
    1bf8:	2a c1       	rjmp	.+596    	; 0x1e4e <__fp_nan>
    1bfa:	cb c1       	rjmp	.+918    	; 0x1f92 <__fp_zero>

00001bfc <atan2>:
    1bfc:	e9 2f       	mov	r30, r25
    1bfe:	e0 78       	andi	r30, 0x80	; 128
    1c00:	a6 d1       	rcall	.+844    	; 0x1f4e <__fp_split3>
    1c02:	68 f3       	brcs	.-38     	; 0x1bde <__addsf3x+0xa6>
    1c04:	09 2e       	mov	r0, r25
    1c06:	05 2a       	or	r0, r21
    1c08:	c1 f3       	breq	.-16     	; 0x1bfa <__addsf3x+0xc2>
    1c0a:	26 17       	cp	r18, r22
    1c0c:	37 07       	cpc	r19, r23
    1c0e:	48 07       	cpc	r20, r24
    1c10:	59 07       	cpc	r21, r25
    1c12:	38 f0       	brcs	.+14     	; 0x1c22 <atan2+0x26>
    1c14:	0e 2e       	mov	r0, r30
    1c16:	07 f8       	bld	r0, 7
    1c18:	e0 25       	eor	r30, r0
    1c1a:	69 f0       	breq	.+26     	; 0x1c36 <atan2+0x3a>
    1c1c:	e0 25       	eor	r30, r0
    1c1e:	e0 64       	ori	r30, 0x40	; 64
    1c20:	0a c0       	rjmp	.+20     	; 0x1c36 <atan2+0x3a>
    1c22:	ef 63       	ori	r30, 0x3F	; 63
    1c24:	07 f8       	bld	r0, 7
    1c26:	00 94       	com	r0
    1c28:	07 fa       	bst	r0, 7
    1c2a:	db 01       	movw	r26, r22
    1c2c:	b9 01       	movw	r22, r18
    1c2e:	9d 01       	movw	r18, r26
    1c30:	dc 01       	movw	r26, r24
    1c32:	ca 01       	movw	r24, r20
    1c34:	ad 01       	movw	r20, r26
    1c36:	ef 93       	push	r30
    1c38:	4a d0       	rcall	.+148    	; 0x1cce <__divsf3_pse>
    1c3a:	67 d1       	rcall	.+718    	; 0x1f0a <__fp_round>
    1c3c:	0a d0       	rcall	.+20     	; 0x1c52 <atan>
    1c3e:	5f 91       	pop	r21
    1c40:	55 23       	and	r21, r21
    1c42:	31 f0       	breq	.+12     	; 0x1c50 <atan2+0x54>
    1c44:	2b ed       	ldi	r18, 0xDB	; 219
    1c46:	3f e0       	ldi	r19, 0x0F	; 15
    1c48:	49 e4       	ldi	r20, 0x49	; 73
    1c4a:	50 fd       	sbrc	r21, 0
    1c4c:	49 ec       	ldi	r20, 0xC9	; 201
    1c4e:	63 cf       	rjmp	.-314    	; 0x1b16 <__addsf3>
    1c50:	08 95       	ret

00001c52 <atan>:
    1c52:	df 93       	push	r29
    1c54:	dd 27       	eor	r29, r29
    1c56:	b9 2f       	mov	r27, r25
    1c58:	bf 77       	andi	r27, 0x7F	; 127
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	16 16       	cp	r1, r22
    1c60:	17 06       	cpc	r1, r23
    1c62:	48 07       	cpc	r20, r24
    1c64:	5b 07       	cpc	r21, r27
    1c66:	10 f4       	brcc	.+4      	; 0x1c6c <atan+0x1a>
    1c68:	d9 2f       	mov	r29, r25
    1c6a:	9e d1       	rcall	.+828    	; 0x1fa8 <inverse>
    1c6c:	9f 93       	push	r25
    1c6e:	8f 93       	push	r24
    1c70:	7f 93       	push	r23
    1c72:	6f 93       	push	r22
    1c74:	4b d2       	rcall	.+1174   	; 0x210c <square>
    1c76:	ec ea       	ldi	r30, 0xAC	; 172
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	ec d0       	rcall	.+472    	; 0x1e54 <__fp_powser>
    1c7c:	46 d1       	rcall	.+652    	; 0x1f0a <__fp_round>
    1c7e:	2f 91       	pop	r18
    1c80:	3f 91       	pop	r19
    1c82:	4f 91       	pop	r20
    1c84:	5f 91       	pop	r21
    1c86:	a3 d1       	rcall	.+838    	; 0x1fce <__mulsf3x>
    1c88:	dd 23       	and	r29, r29
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <atan+0x4c>
    1c8c:	90 58       	subi	r25, 0x80	; 128
    1c8e:	a2 ea       	ldi	r26, 0xA2	; 162
    1c90:	2a ed       	ldi	r18, 0xDA	; 218
    1c92:	3f e0       	ldi	r19, 0x0F	; 15
    1c94:	49 ec       	ldi	r20, 0xC9	; 201
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	d0 78       	andi	r29, 0x80	; 128
    1c9a:	5d 27       	eor	r21, r29
    1c9c:	4d df       	rcall	.-358    	; 0x1b38 <__addsf3x>
    1c9e:	df 91       	pop	r29
    1ca0:	34 c1       	rjmp	.+616    	; 0x1f0a <__fp_round>

00001ca2 <__cmpsf2>:
    1ca2:	ab d0       	rcall	.+342    	; 0x1dfa <__fp_cmp>
    1ca4:	08 f4       	brcc	.+2      	; 0x1ca8 <__cmpsf2+0x6>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	08 95       	ret

00001caa <cos>:
    1caa:	08 d1       	rcall	.+528    	; 0x1ebc <__fp_rempio2>
    1cac:	e3 95       	inc	r30
    1cae:	3e c1       	rjmp	.+636    	; 0x1f2c <__fp_sinus>

00001cb0 <__divsf3>:
    1cb0:	0c d0       	rcall	.+24     	; 0x1cca <__divsf3x>
    1cb2:	2b c1       	rjmp	.+598    	; 0x1f0a <__fp_round>
    1cb4:	fb d0       	rcall	.+502    	; 0x1eac <__fp_pscB>
    1cb6:	40 f0       	brcs	.+16     	; 0x1cc8 <__divsf3+0x18>
    1cb8:	f2 d0       	rcall	.+484    	; 0x1e9e <__fp_pscA>
    1cba:	30 f0       	brcs	.+12     	; 0x1cc8 <__divsf3+0x18>
    1cbc:	21 f4       	brne	.+8      	; 0x1cc6 <__divsf3+0x16>
    1cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc0:	19 f0       	breq	.+6      	; 0x1cc8 <__divsf3+0x18>
    1cc2:	bf c0       	rjmp	.+382    	; 0x1e42 <__fp_inf>
    1cc4:	51 11       	cpse	r21, r1
    1cc6:	66 c1       	rjmp	.+716    	; 0x1f94 <__fp_szero>
    1cc8:	c2 c0       	rjmp	.+388    	; 0x1e4e <__fp_nan>

00001cca <__divsf3x>:
    1cca:	41 d1       	rcall	.+642    	; 0x1f4e <__fp_split3>
    1ccc:	98 f3       	brcs	.-26     	; 0x1cb4 <__divsf3+0x4>

00001cce <__divsf3_pse>:
    1cce:	99 23       	and	r25, r25
    1cd0:	c9 f3       	breq	.-14     	; 0x1cc4 <__divsf3+0x14>
    1cd2:	55 23       	and	r21, r21
    1cd4:	b1 f3       	breq	.-20     	; 0x1cc2 <__divsf3+0x12>
    1cd6:	95 1b       	sub	r25, r21
    1cd8:	55 0b       	sbc	r21, r21
    1cda:	bb 27       	eor	r27, r27
    1cdc:	aa 27       	eor	r26, r26
    1cde:	62 17       	cp	r22, r18
    1ce0:	73 07       	cpc	r23, r19
    1ce2:	84 07       	cpc	r24, r20
    1ce4:	38 f0       	brcs	.+14     	; 0x1cf4 <__divsf3_pse+0x26>
    1ce6:	9f 5f       	subi	r25, 0xFF	; 255
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	44 1f       	adc	r20, r20
    1cf0:	aa 1f       	adc	r26, r26
    1cf2:	a9 f3       	breq	.-22     	; 0x1cde <__divsf3_pse+0x10>
    1cf4:	33 d0       	rcall	.+102    	; 0x1d5c <__divsf3_pse+0x8e>
    1cf6:	0e 2e       	mov	r0, r30
    1cf8:	3a f0       	brmi	.+14     	; 0x1d08 <__divsf3_pse+0x3a>
    1cfa:	e0 e8       	ldi	r30, 0x80	; 128
    1cfc:	30 d0       	rcall	.+96     	; 0x1d5e <__divsf3_pse+0x90>
    1cfe:	91 50       	subi	r25, 0x01	; 1
    1d00:	50 40       	sbci	r21, 0x00	; 0
    1d02:	e6 95       	lsr	r30
    1d04:	00 1c       	adc	r0, r0
    1d06:	ca f7       	brpl	.-14     	; 0x1cfa <__divsf3_pse+0x2c>
    1d08:	29 d0       	rcall	.+82     	; 0x1d5c <__divsf3_pse+0x8e>
    1d0a:	fe 2f       	mov	r31, r30
    1d0c:	27 d0       	rcall	.+78     	; 0x1d5c <__divsf3_pse+0x8e>
    1d0e:	66 0f       	add	r22, r22
    1d10:	77 1f       	adc	r23, r23
    1d12:	88 1f       	adc	r24, r24
    1d14:	bb 1f       	adc	r27, r27
    1d16:	26 17       	cp	r18, r22
    1d18:	37 07       	cpc	r19, r23
    1d1a:	48 07       	cpc	r20, r24
    1d1c:	ab 07       	cpc	r26, r27
    1d1e:	b0 e8       	ldi	r27, 0x80	; 128
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <__divsf3_pse+0x56>
    1d22:	bb 0b       	sbc	r27, r27
    1d24:	80 2d       	mov	r24, r0
    1d26:	bf 01       	movw	r22, r30
    1d28:	ff 27       	eor	r31, r31
    1d2a:	93 58       	subi	r25, 0x83	; 131
    1d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2e:	2a f0       	brmi	.+10     	; 0x1d3a <__divsf3_pse+0x6c>
    1d30:	9e 3f       	cpi	r25, 0xFE	; 254
    1d32:	51 05       	cpc	r21, r1
    1d34:	68 f0       	brcs	.+26     	; 0x1d50 <__divsf3_pse+0x82>
    1d36:	85 c0       	rjmp	.+266    	; 0x1e42 <__fp_inf>
    1d38:	2d c1       	rjmp	.+602    	; 0x1f94 <__fp_szero>
    1d3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d3c:	ec f3       	brlt	.-6      	; 0x1d38 <__divsf3_pse+0x6a>
    1d3e:	98 3e       	cpi	r25, 0xE8	; 232
    1d40:	dc f3       	brlt	.-10     	; 0x1d38 <__divsf3_pse+0x6a>
    1d42:	86 95       	lsr	r24
    1d44:	77 95       	ror	r23
    1d46:	67 95       	ror	r22
    1d48:	b7 95       	ror	r27
    1d4a:	f7 95       	ror	r31
    1d4c:	9f 5f       	subi	r25, 0xFF	; 255
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <__divsf3_pse+0x74>
    1d50:	88 0f       	add	r24, r24
    1d52:	91 1d       	adc	r25, r1
    1d54:	96 95       	lsr	r25
    1d56:	87 95       	ror	r24
    1d58:	97 f9       	bld	r25, 7
    1d5a:	08 95       	ret
    1d5c:	e1 e0       	ldi	r30, 0x01	; 1
    1d5e:	66 0f       	add	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	bb 1f       	adc	r27, r27
    1d66:	62 17       	cp	r22, r18
    1d68:	73 07       	cpc	r23, r19
    1d6a:	84 07       	cpc	r24, r20
    1d6c:	ba 07       	cpc	r27, r26
    1d6e:	20 f0       	brcs	.+8      	; 0x1d78 <__divsf3_pse+0xaa>
    1d70:	62 1b       	sub	r22, r18
    1d72:	73 0b       	sbc	r23, r19
    1d74:	84 0b       	sbc	r24, r20
    1d76:	ba 0b       	sbc	r27, r26
    1d78:	ee 1f       	adc	r30, r30
    1d7a:	88 f7       	brcc	.-30     	; 0x1d5e <__divsf3_pse+0x90>
    1d7c:	e0 95       	com	r30
    1d7e:	08 95       	ret

00001d80 <__floatunsisf>:
    1d80:	e8 94       	clt
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <__floatsisf+0x12>

00001d84 <__floatsisf>:
    1d84:	97 fb       	bst	r25, 7
    1d86:	3e f4       	brtc	.+14     	; 0x1d96 <__floatsisf+0x12>
    1d88:	90 95       	com	r25
    1d8a:	80 95       	com	r24
    1d8c:	70 95       	com	r23
    1d8e:	61 95       	neg	r22
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8f 4f       	sbci	r24, 0xFF	; 255
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	99 23       	and	r25, r25
    1d98:	a9 f0       	breq	.+42     	; 0x1dc4 <__floatsisf+0x40>
    1d9a:	f9 2f       	mov	r31, r25
    1d9c:	96 e9       	ldi	r25, 0x96	; 150
    1d9e:	bb 27       	eor	r27, r27
    1da0:	93 95       	inc	r25
    1da2:	f6 95       	lsr	r31
    1da4:	87 95       	ror	r24
    1da6:	77 95       	ror	r23
    1da8:	67 95       	ror	r22
    1daa:	b7 95       	ror	r27
    1dac:	f1 11       	cpse	r31, r1
    1dae:	f8 cf       	rjmp	.-16     	; 0x1da0 <__floatsisf+0x1c>
    1db0:	fa f4       	brpl	.+62     	; 0x1df0 <__floatsisf+0x6c>
    1db2:	bb 0f       	add	r27, r27
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__floatsisf+0x36>
    1db6:	60 ff       	sbrs	r22, 0
    1db8:	1b c0       	rjmp	.+54     	; 0x1df0 <__floatsisf+0x6c>
    1dba:	6f 5f       	subi	r22, 0xFF	; 255
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <__floatsisf+0x6c>
    1dc4:	88 23       	and	r24, r24
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <__floatsisf+0x48>
    1dc8:	96 e9       	ldi	r25, 0x96	; 150
    1dca:	11 c0       	rjmp	.+34     	; 0x1dee <__floatsisf+0x6a>
    1dcc:	77 23       	and	r23, r23
    1dce:	21 f0       	breq	.+8      	; 0x1dd8 <__floatsisf+0x54>
    1dd0:	9e e8       	ldi	r25, 0x8E	; 142
    1dd2:	87 2f       	mov	r24, r23
    1dd4:	76 2f       	mov	r23, r22
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <__floatsisf+0x5e>
    1dd8:	66 23       	and	r22, r22
    1dda:	71 f0       	breq	.+28     	; 0x1df8 <__floatsisf+0x74>
    1ddc:	96 e8       	ldi	r25, 0x86	; 134
    1dde:	86 2f       	mov	r24, r22
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	2a f0       	brmi	.+10     	; 0x1df0 <__floatsisf+0x6c>
    1de6:	9a 95       	dec	r25
    1de8:	66 0f       	add	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	da f7       	brpl	.-10     	; 0x1de6 <__floatsisf+0x62>
    1df0:	88 0f       	add	r24, r24
    1df2:	96 95       	lsr	r25
    1df4:	87 95       	ror	r24
    1df6:	97 f9       	bld	r25, 7
    1df8:	08 95       	ret

00001dfa <__fp_cmp>:
    1dfa:	99 0f       	add	r25, r25
    1dfc:	00 08       	sbc	r0, r0
    1dfe:	55 0f       	add	r21, r21
    1e00:	aa 0b       	sbc	r26, r26
    1e02:	e0 e8       	ldi	r30, 0x80	; 128
    1e04:	fe ef       	ldi	r31, 0xFE	; 254
    1e06:	16 16       	cp	r1, r22
    1e08:	17 06       	cpc	r1, r23
    1e0a:	e8 07       	cpc	r30, r24
    1e0c:	f9 07       	cpc	r31, r25
    1e0e:	c0 f0       	brcs	.+48     	; 0x1e40 <__fp_cmp+0x46>
    1e10:	12 16       	cp	r1, r18
    1e12:	13 06       	cpc	r1, r19
    1e14:	e4 07       	cpc	r30, r20
    1e16:	f5 07       	cpc	r31, r21
    1e18:	98 f0       	brcs	.+38     	; 0x1e40 <__fp_cmp+0x46>
    1e1a:	62 1b       	sub	r22, r18
    1e1c:	73 0b       	sbc	r23, r19
    1e1e:	84 0b       	sbc	r24, r20
    1e20:	95 0b       	sbc	r25, r21
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <__fp_cmp+0x38>
    1e24:	0a 26       	eor	r0, r26
    1e26:	61 f0       	breq	.+24     	; 0x1e40 <__fp_cmp+0x46>
    1e28:	23 2b       	or	r18, r19
    1e2a:	24 2b       	or	r18, r20
    1e2c:	25 2b       	or	r18, r21
    1e2e:	21 f4       	brne	.+8      	; 0x1e38 <__fp_cmp+0x3e>
    1e30:	08 95       	ret
    1e32:	0a 26       	eor	r0, r26
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <__fp_cmp+0x3e>
    1e36:	a1 40       	sbci	r26, 0x01	; 1
    1e38:	a6 95       	lsr	r26
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	81 1d       	adc	r24, r1
    1e3e:	81 1d       	adc	r24, r1
    1e40:	08 95       	ret

00001e42 <__fp_inf>:
    1e42:	97 f9       	bld	r25, 7
    1e44:	9f 67       	ori	r25, 0x7F	; 127
    1e46:	80 e8       	ldi	r24, 0x80	; 128
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	08 95       	ret

00001e4e <__fp_nan>:
    1e4e:	9f ef       	ldi	r25, 0xFF	; 255
    1e50:	80 ec       	ldi	r24, 0xC0	; 192
    1e52:	08 95       	ret

00001e54 <__fp_powser>:
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	1f 93       	push	r17
    1e5a:	0f 93       	push	r16
    1e5c:	ff 92       	push	r15
    1e5e:	ef 92       	push	r14
    1e60:	df 92       	push	r13
    1e62:	7b 01       	movw	r14, r22
    1e64:	8c 01       	movw	r16, r24
    1e66:	68 94       	set
    1e68:	05 c0       	rjmp	.+10     	; 0x1e74 <__fp_powser+0x20>
    1e6a:	da 2e       	mov	r13, r26
    1e6c:	ef 01       	movw	r28, r30
    1e6e:	af d0       	rcall	.+350    	; 0x1fce <__mulsf3x>
    1e70:	fe 01       	movw	r30, r28
    1e72:	e8 94       	clt
    1e74:	a5 91       	lpm	r26, Z+
    1e76:	25 91       	lpm	r18, Z+
    1e78:	35 91       	lpm	r19, Z+
    1e7a:	45 91       	lpm	r20, Z+
    1e7c:	55 91       	lpm	r21, Z+
    1e7e:	ae f3       	brts	.-22     	; 0x1e6a <__fp_powser+0x16>
    1e80:	ef 01       	movw	r28, r30
    1e82:	5a de       	rcall	.-844    	; 0x1b38 <__addsf3x>
    1e84:	fe 01       	movw	r30, r28
    1e86:	97 01       	movw	r18, r14
    1e88:	a8 01       	movw	r20, r16
    1e8a:	da 94       	dec	r13
    1e8c:	79 f7       	brne	.-34     	; 0x1e6c <__fp_powser+0x18>
    1e8e:	df 90       	pop	r13
    1e90:	ef 90       	pop	r14
    1e92:	ff 90       	pop	r15
    1e94:	0f 91       	pop	r16
    1e96:	1f 91       	pop	r17
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <__fp_pscA>:
    1e9e:	00 24       	eor	r0, r0
    1ea0:	0a 94       	dec	r0
    1ea2:	16 16       	cp	r1, r22
    1ea4:	17 06       	cpc	r1, r23
    1ea6:	18 06       	cpc	r1, r24
    1ea8:	09 06       	cpc	r0, r25
    1eaa:	08 95       	ret

00001eac <__fp_pscB>:
    1eac:	00 24       	eor	r0, r0
    1eae:	0a 94       	dec	r0
    1eb0:	12 16       	cp	r1, r18
    1eb2:	13 06       	cpc	r1, r19
    1eb4:	14 06       	cpc	r1, r20
    1eb6:	05 06       	cpc	r0, r21
    1eb8:	08 95       	ret
    1eba:	c9 cf       	rjmp	.-110    	; 0x1e4e <__fp_nan>

00001ebc <__fp_rempio2>:
    1ebc:	50 d0       	rcall	.+160    	; 0x1f5e <__fp_splitA>
    1ebe:	e8 f3       	brcs	.-6      	; 0x1eba <__fp_pscB+0xe>
    1ec0:	e8 94       	clt
    1ec2:	e0 e0       	ldi	r30, 0x00	; 0
    1ec4:	bb 27       	eor	r27, r27
    1ec6:	9f 57       	subi	r25, 0x7F	; 127
    1ec8:	f0 f0       	brcs	.+60     	; 0x1f06 <__fp_rempio2+0x4a>
    1eca:	2a ed       	ldi	r18, 0xDA	; 218
    1ecc:	3f e0       	ldi	r19, 0x0F	; 15
    1ece:	49 ec       	ldi	r20, 0xC9	; 201
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <__fp_rempio2+0x22>
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	bb 0f       	add	r27, r27
    1ed6:	66 1f       	adc	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	28 f0       	brcs	.+10     	; 0x1ee8 <__fp_rempio2+0x2c>
    1ede:	b2 3a       	cpi	r27, 0xA2	; 162
    1ee0:	62 07       	cpc	r22, r18
    1ee2:	73 07       	cpc	r23, r19
    1ee4:	84 07       	cpc	r24, r20
    1ee6:	28 f0       	brcs	.+10     	; 0x1ef2 <__fp_rempio2+0x36>
    1ee8:	b2 5a       	subi	r27, 0xA2	; 162
    1eea:	62 0b       	sbc	r22, r18
    1eec:	73 0b       	sbc	r23, r19
    1eee:	84 0b       	sbc	r24, r20
    1ef0:	e3 95       	inc	r30
    1ef2:	9a 95       	dec	r25
    1ef4:	72 f7       	brpl	.-36     	; 0x1ed2 <__fp_rempio2+0x16>
    1ef6:	80 38       	cpi	r24, 0x80	; 128
    1ef8:	30 f4       	brcc	.+12     	; 0x1f06 <__fp_rempio2+0x4a>
    1efa:	9a 95       	dec	r25
    1efc:	bb 0f       	add	r27, r27
    1efe:	66 1f       	adc	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	d2 f7       	brpl	.-12     	; 0x1efa <__fp_rempio2+0x3e>
    1f06:	90 48       	sbci	r25, 0x80	; 128
    1f08:	06 c1       	rjmp	.+524    	; 0x2116 <__fp_mpack_finite>

00001f0a <__fp_round>:
    1f0a:	09 2e       	mov	r0, r25
    1f0c:	03 94       	inc	r0
    1f0e:	00 0c       	add	r0, r0
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__fp_round+0xc>
    1f12:	88 23       	and	r24, r24
    1f14:	52 f0       	brmi	.+20     	; 0x1f2a <__fp_round+0x20>
    1f16:	bb 0f       	add	r27, r27
    1f18:	40 f4       	brcc	.+16     	; 0x1f2a <__fp_round+0x20>
    1f1a:	bf 2b       	or	r27, r31
    1f1c:	11 f4       	brne	.+4      	; 0x1f22 <__fp_round+0x18>
    1f1e:	60 ff       	sbrs	r22, 0
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <__fp_round+0x20>
    1f22:	6f 5f       	subi	r22, 0xFF	; 255
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8f 4f       	sbci	r24, 0xFF	; 255
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	08 95       	ret

00001f2c <__fp_sinus>:
    1f2c:	ef 93       	push	r30
    1f2e:	e0 ff       	sbrs	r30, 0
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <__fp_sinus+0x12>
    1f32:	a2 ea       	ldi	r26, 0xA2	; 162
    1f34:	2a ed       	ldi	r18, 0xDA	; 218
    1f36:	3f e0       	ldi	r19, 0x0F	; 15
    1f38:	49 ec       	ldi	r20, 0xC9	; 201
    1f3a:	5f eb       	ldi	r21, 0xBF	; 191
    1f3c:	fd dd       	rcall	.-1030   	; 0x1b38 <__addsf3x>
    1f3e:	e5 df       	rcall	.-54     	; 0x1f0a <__fp_round>
    1f40:	0f 90       	pop	r0
    1f42:	03 94       	inc	r0
    1f44:	01 fc       	sbrc	r0, 1
    1f46:	90 58       	subi	r25, 0x80	; 128
    1f48:	e9 ed       	ldi	r30, 0xD9	; 217
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	f7 c0       	rjmp	.+494    	; 0x213c <__fp_powsodd>

00001f4e <__fp_split3>:
    1f4e:	57 fd       	sbrc	r21, 7
    1f50:	90 58       	subi	r25, 0x80	; 128
    1f52:	44 0f       	add	r20, r20
    1f54:	55 1f       	adc	r21, r21
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <__fp_splitA+0x10>
    1f58:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5a:	71 f0       	breq	.+28     	; 0x1f78 <__fp_splitA+0x1a>
    1f5c:	47 95       	ror	r20

00001f5e <__fp_splitA>:
    1f5e:	88 0f       	add	r24, r24
    1f60:	97 fb       	bst	r25, 7
    1f62:	99 1f       	adc	r25, r25
    1f64:	61 f0       	breq	.+24     	; 0x1f7e <__fp_splitA+0x20>
    1f66:	9f 3f       	cpi	r25, 0xFF	; 255
    1f68:	79 f0       	breq	.+30     	; 0x1f88 <__fp_splitA+0x2a>
    1f6a:	87 95       	ror	r24
    1f6c:	08 95       	ret
    1f6e:	12 16       	cp	r1, r18
    1f70:	13 06       	cpc	r1, r19
    1f72:	14 06       	cpc	r1, r20
    1f74:	55 1f       	adc	r21, r21
    1f76:	f2 cf       	rjmp	.-28     	; 0x1f5c <__fp_split3+0xe>
    1f78:	46 95       	lsr	r20
    1f7a:	f1 df       	rcall	.-30     	; 0x1f5e <__fp_splitA>
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <__fp_splitA+0x30>
    1f7e:	16 16       	cp	r1, r22
    1f80:	17 06       	cpc	r1, r23
    1f82:	18 06       	cpc	r1, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	f1 cf       	rjmp	.-30     	; 0x1f6a <__fp_splitA+0xc>
    1f88:	86 95       	lsr	r24
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	61 05       	cpc	r22, r1
    1f8e:	08 94       	sec
    1f90:	08 95       	ret

00001f92 <__fp_zero>:
    1f92:	e8 94       	clt

00001f94 <__fp_szero>:
    1f94:	bb 27       	eor	r27, r27
    1f96:	66 27       	eor	r22, r22
    1f98:	77 27       	eor	r23, r23
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	97 f9       	bld	r25, 7
    1f9e:	08 95       	ret

00001fa0 <__gesf2>:
    1fa0:	2c df       	rcall	.-424    	; 0x1dfa <__fp_cmp>
    1fa2:	08 f4       	brcc	.+2      	; 0x1fa6 <__gesf2+0x6>
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	08 95       	ret

00001fa8 <inverse>:
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	80 e8       	ldi	r24, 0x80	; 128
    1fb2:	9f e3       	ldi	r25, 0x3F	; 63
    1fb4:	7d ce       	rjmp	.-774    	; 0x1cb0 <__divsf3>

00001fb6 <__mulsf3>:
    1fb6:	0b d0       	rcall	.+22     	; 0x1fce <__mulsf3x>
    1fb8:	a8 cf       	rjmp	.-176    	; 0x1f0a <__fp_round>
    1fba:	71 df       	rcall	.-286    	; 0x1e9e <__fp_pscA>
    1fbc:	28 f0       	brcs	.+10     	; 0x1fc8 <__mulsf3+0x12>
    1fbe:	76 df       	rcall	.-276    	; 0x1eac <__fp_pscB>
    1fc0:	18 f0       	brcs	.+6      	; 0x1fc8 <__mulsf3+0x12>
    1fc2:	95 23       	and	r25, r21
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <__mulsf3+0x12>
    1fc6:	3d cf       	rjmp	.-390    	; 0x1e42 <__fp_inf>
    1fc8:	42 cf       	rjmp	.-380    	; 0x1e4e <__fp_nan>
    1fca:	11 24       	eor	r1, r1
    1fcc:	e3 cf       	rjmp	.-58     	; 0x1f94 <__fp_szero>

00001fce <__mulsf3x>:
    1fce:	bf df       	rcall	.-130    	; 0x1f4e <__fp_split3>
    1fd0:	a0 f3       	brcs	.-24     	; 0x1fba <__mulsf3+0x4>

00001fd2 <__mulsf3_pse>:
    1fd2:	95 9f       	mul	r25, r21
    1fd4:	d1 f3       	breq	.-12     	; 0x1fca <__mulsf3+0x14>
    1fd6:	95 0f       	add	r25, r21
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	55 1f       	adc	r21, r21
    1fdc:	62 9f       	mul	r22, r18
    1fde:	f0 01       	movw	r30, r0
    1fe0:	72 9f       	mul	r23, r18
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	f0 0d       	add	r31, r0
    1fe6:	b1 1d       	adc	r27, r1
    1fe8:	63 9f       	mul	r22, r19
    1fea:	aa 27       	eor	r26, r26
    1fec:	f0 0d       	add	r31, r0
    1fee:	b1 1d       	adc	r27, r1
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	64 9f       	mul	r22, r20
    1ff4:	66 27       	eor	r22, r22
    1ff6:	b0 0d       	add	r27, r0
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	66 1f       	adc	r22, r22
    1ffc:	82 9f       	mul	r24, r18
    1ffe:	22 27       	eor	r18, r18
    2000:	b0 0d       	add	r27, r0
    2002:	a1 1d       	adc	r26, r1
    2004:	62 1f       	adc	r22, r18
    2006:	73 9f       	mul	r23, r19
    2008:	b0 0d       	add	r27, r0
    200a:	a1 1d       	adc	r26, r1
    200c:	62 1f       	adc	r22, r18
    200e:	83 9f       	mul	r24, r19
    2010:	a0 0d       	add	r26, r0
    2012:	61 1d       	adc	r22, r1
    2014:	22 1f       	adc	r18, r18
    2016:	74 9f       	mul	r23, r20
    2018:	33 27       	eor	r19, r19
    201a:	a0 0d       	add	r26, r0
    201c:	61 1d       	adc	r22, r1
    201e:	23 1f       	adc	r18, r19
    2020:	84 9f       	mul	r24, r20
    2022:	60 0d       	add	r22, r0
    2024:	21 1d       	adc	r18, r1
    2026:	82 2f       	mov	r24, r18
    2028:	76 2f       	mov	r23, r22
    202a:	6a 2f       	mov	r22, r26
    202c:	11 24       	eor	r1, r1
    202e:	9f 57       	subi	r25, 0x7F	; 127
    2030:	50 40       	sbci	r21, 0x00	; 0
    2032:	8a f0       	brmi	.+34     	; 0x2056 <__mulsf3_pse+0x84>
    2034:	e1 f0       	breq	.+56     	; 0x206e <__mulsf3_pse+0x9c>
    2036:	88 23       	and	r24, r24
    2038:	4a f0       	brmi	.+18     	; 0x204c <__mulsf3_pse+0x7a>
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	bb 1f       	adc	r27, r27
    2040:	66 1f       	adc	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	91 50       	subi	r25, 0x01	; 1
    2048:	50 40       	sbci	r21, 0x00	; 0
    204a:	a9 f7       	brne	.-22     	; 0x2036 <__mulsf3_pse+0x64>
    204c:	9e 3f       	cpi	r25, 0xFE	; 254
    204e:	51 05       	cpc	r21, r1
    2050:	70 f0       	brcs	.+28     	; 0x206e <__mulsf3_pse+0x9c>
    2052:	f7 ce       	rjmp	.-530    	; 0x1e42 <__fp_inf>
    2054:	9f cf       	rjmp	.-194    	; 0x1f94 <__fp_szero>
    2056:	5f 3f       	cpi	r21, 0xFF	; 255
    2058:	ec f3       	brlt	.-6      	; 0x2054 <__mulsf3_pse+0x82>
    205a:	98 3e       	cpi	r25, 0xE8	; 232
    205c:	dc f3       	brlt	.-10     	; 0x2054 <__mulsf3_pse+0x82>
    205e:	86 95       	lsr	r24
    2060:	77 95       	ror	r23
    2062:	67 95       	ror	r22
    2064:	b7 95       	ror	r27
    2066:	f7 95       	ror	r31
    2068:	e7 95       	ror	r30
    206a:	9f 5f       	subi	r25, 0xFF	; 255
    206c:	c1 f7       	brne	.-16     	; 0x205e <__mulsf3_pse+0x8c>
    206e:	fe 2b       	or	r31, r30
    2070:	88 0f       	add	r24, r24
    2072:	91 1d       	adc	r25, r1
    2074:	96 95       	lsr	r25
    2076:	87 95       	ror	r24
    2078:	97 f9       	bld	r25, 7
    207a:	08 95       	ret

0000207c <sin>:
    207c:	9f 93       	push	r25
    207e:	1e df       	rcall	.-452    	; 0x1ebc <__fp_rempio2>
    2080:	0f 90       	pop	r0
    2082:	07 fc       	sbrc	r0, 7
    2084:	ee 5f       	subi	r30, 0xFE	; 254
    2086:	52 cf       	rjmp	.-348    	; 0x1f2c <__fp_sinus>
    2088:	11 f4       	brne	.+4      	; 0x208e <sin+0x12>
    208a:	0e f4       	brtc	.+2      	; 0x208e <sin+0x12>
    208c:	e0 ce       	rjmp	.-576    	; 0x1e4e <__fp_nan>
    208e:	41 c0       	rjmp	.+130    	; 0x2112 <__fp_mpack>

00002090 <sqrt>:
    2090:	66 df       	rcall	.-308    	; 0x1f5e <__fp_splitA>
    2092:	d0 f3       	brcs	.-12     	; 0x2088 <sin+0xc>
    2094:	99 23       	and	r25, r25
    2096:	d9 f3       	breq	.-10     	; 0x208e <sin+0x12>
    2098:	ce f3       	brts	.-14     	; 0x208c <sin+0x10>
    209a:	9f 57       	subi	r25, 0x7F	; 127
    209c:	55 0b       	sbc	r21, r21
    209e:	87 ff       	sbrs	r24, 7
    20a0:	46 d0       	rcall	.+140    	; 0x212e <__fp_norm2>
    20a2:	00 24       	eor	r0, r0
    20a4:	a0 e6       	ldi	r26, 0x60	; 96
    20a6:	40 ea       	ldi	r20, 0xA0	; 160
    20a8:	90 01       	movw	r18, r0
    20aa:	80 58       	subi	r24, 0x80	; 128
    20ac:	56 95       	lsr	r21
    20ae:	97 95       	ror	r25
    20b0:	28 f4       	brcc	.+10     	; 0x20bc <sqrt+0x2c>
    20b2:	80 5c       	subi	r24, 0xC0	; 192
    20b4:	66 0f       	add	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	88 1f       	adc	r24, r24
    20ba:	20 f0       	brcs	.+8      	; 0x20c4 <sqrt+0x34>
    20bc:	26 17       	cp	r18, r22
    20be:	37 07       	cpc	r19, r23
    20c0:	48 07       	cpc	r20, r24
    20c2:	30 f4       	brcc	.+12     	; 0x20d0 <sqrt+0x40>
    20c4:	62 1b       	sub	r22, r18
    20c6:	73 0b       	sbc	r23, r19
    20c8:	84 0b       	sbc	r24, r20
    20ca:	20 29       	or	r18, r0
    20cc:	31 29       	or	r19, r1
    20ce:	4a 2b       	or	r20, r26
    20d0:	a6 95       	lsr	r26
    20d2:	17 94       	ror	r1
    20d4:	07 94       	ror	r0
    20d6:	20 25       	eor	r18, r0
    20d8:	31 25       	eor	r19, r1
    20da:	4a 27       	eor	r20, r26
    20dc:	58 f7       	brcc	.-42     	; 0x20b4 <sqrt+0x24>
    20de:	66 0f       	add	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	20 f0       	brcs	.+8      	; 0x20ee <sqrt+0x5e>
    20e6:	26 17       	cp	r18, r22
    20e8:	37 07       	cpc	r19, r23
    20ea:	48 07       	cpc	r20, r24
    20ec:	30 f4       	brcc	.+12     	; 0x20fa <sqrt+0x6a>
    20ee:	62 0b       	sbc	r22, r18
    20f0:	73 0b       	sbc	r23, r19
    20f2:	84 0b       	sbc	r24, r20
    20f4:	20 0d       	add	r18, r0
    20f6:	31 1d       	adc	r19, r1
    20f8:	41 1d       	adc	r20, r1
    20fa:	a0 95       	com	r26
    20fc:	81 f7       	brne	.-32     	; 0x20de <sqrt+0x4e>
    20fe:	b9 01       	movw	r22, r18
    2100:	84 2f       	mov	r24, r20
    2102:	91 58       	subi	r25, 0x81	; 129
    2104:	88 0f       	add	r24, r24
    2106:	96 95       	lsr	r25
    2108:	87 95       	ror	r24
    210a:	08 95       	ret

0000210c <square>:
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
    2110:	52 cf       	rjmp	.-348    	; 0x1fb6 <__mulsf3>

00002112 <__fp_mpack>:
    2112:	9f 3f       	cpi	r25, 0xFF	; 255
    2114:	31 f0       	breq	.+12     	; 0x2122 <__fp_mpack_finite+0xc>

00002116 <__fp_mpack_finite>:
    2116:	91 50       	subi	r25, 0x01	; 1
    2118:	20 f4       	brcc	.+8      	; 0x2122 <__fp_mpack_finite+0xc>
    211a:	87 95       	ror	r24
    211c:	77 95       	ror	r23
    211e:	67 95       	ror	r22
    2120:	b7 95       	ror	r27
    2122:	88 0f       	add	r24, r24
    2124:	91 1d       	adc	r25, r1
    2126:	96 95       	lsr	r25
    2128:	87 95       	ror	r24
    212a:	97 f9       	bld	r25, 7
    212c:	08 95       	ret

0000212e <__fp_norm2>:
    212e:	91 50       	subi	r25, 0x01	; 1
    2130:	50 40       	sbci	r21, 0x00	; 0
    2132:	66 0f       	add	r22, r22
    2134:	77 1f       	adc	r23, r23
    2136:	88 1f       	adc	r24, r24
    2138:	d2 f7       	brpl	.-12     	; 0x212e <__fp_norm2>
    213a:	08 95       	ret

0000213c <__fp_powsodd>:
    213c:	9f 93       	push	r25
    213e:	8f 93       	push	r24
    2140:	7f 93       	push	r23
    2142:	6f 93       	push	r22
    2144:	ff 93       	push	r31
    2146:	ef 93       	push	r30
    2148:	9b 01       	movw	r18, r22
    214a:	ac 01       	movw	r20, r24
    214c:	34 df       	rcall	.-408    	; 0x1fb6 <__mulsf3>
    214e:	ef 91       	pop	r30
    2150:	ff 91       	pop	r31
    2152:	80 de       	rcall	.-768    	; 0x1e54 <__fp_powser>
    2154:	2f 91       	pop	r18
    2156:	3f 91       	pop	r19
    2158:	4f 91       	pop	r20
    215a:	5f 91       	pop	r21
    215c:	2c cf       	rjmp	.-424    	; 0x1fb6 <__mulsf3>

0000215e <__umulhisi3>:
    215e:	a2 9f       	mul	r26, r18
    2160:	b0 01       	movw	r22, r0
    2162:	b3 9f       	mul	r27, r19
    2164:	c0 01       	movw	r24, r0
    2166:	a3 9f       	mul	r26, r19
    2168:	01 d0       	rcall	.+2      	; 0x216c <__umulhisi3+0xe>
    216a:	b2 9f       	mul	r27, r18
    216c:	70 0d       	add	r23, r0
    216e:	81 1d       	adc	r24, r1
    2170:	11 24       	eor	r1, r1
    2172:	91 1d       	adc	r25, r1
    2174:	08 95       	ret

00002176 <_exit>:
    2176:	f8 94       	cli

00002178 <__stop_program>:
    2178:	ff cf       	rjmp	.-2      	; 0x2178 <__stop_program>
