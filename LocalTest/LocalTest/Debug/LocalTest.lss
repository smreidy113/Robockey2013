
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001aa4  00001b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800114  00800114  00001b4c  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f3  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000642b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  0000645a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0c  00000000  00000000  00006642  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000084b  00000000  00000000  0000854e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d27  00000000  00000000  00008d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005fc  00000000  00000000  00009ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006a5  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000252f  00000000  00000000  0000a761  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000200  00000000  00000000  0000cc90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_10>
      2c:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_11>
      30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      90:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      94:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      98:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      9c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 0a       	sbc	r3, r31

000000f7 <__c.1837>:
      f7:	0a 00                                               ..

000000f9 <descriptor_list>:
      f9:	00 01 00 00 2d 01 12 00 02 00 00 3f 01 43 00 03     ....-......?.C..
     109:	00 00 82 01 04 01 03 09 04 86 01 12 02 03 09 04     ................
     119:	9a 01 06 03 03 09 04 a2 01 08                       ..........

00000123 <endpoint_config_table>:
     123:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012d <device_descriptor>:
     12d:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13d:	03 01                                               ..

0000013f <config1_descriptor>:
     13f:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14f:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15f:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16f:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17f:	40 00 00                                            @..

00000182 <string0>:
     182:	04 03 09 04                                         ....

00000186 <string1>:
     186:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     196:	65 00 00 00                                         e...

0000019a <string2>:
     19a:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a2 <string3>:
     1a2:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	e4 ea       	ldi	r30, 0xA4	; 164
     1c0:	fa e1       	ldi	r31, 0x1A	; 26
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	a4 31       	cpi	r26, 0x14	; 20
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	a4 e1       	ldi	r26, 0x14	; 20
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a8 37       	cpi	r26, 0x78	; 120
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
     1e2:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <main>:


 int main(void){
	 
	 //MATLAB PLOTTING STUFFS*****************************************************************
	m_clockdivide(0);
     1ea:	e1 e6       	ldi	r30, 0x61	; 97
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 e8       	ldi	r24, 0x80	; 128
     1f0:	80 83       	st	Z, r24
     1f2:	10 82       	st	Z, r1
		 
	long count = 0;
	
	m_red(ON);
     1f4:	6e 9a       	sbi	0x0d, 6	; 13
     1f6:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     1f8:	6a 9a       	sbi	0x0d, 2	; 13
     1fa:	72 98       	cbi	0x0e, 2	; 14

	m_bus_init();
     1fc:	0e 94 3c 01 	call	0x278	; 0x278 <m_bus_init>
	m_wii_open();
     200:	0e 94 b6 08 	call	0x116c	; 0x116c <m_wii_open>
	m_usb_init(); // connect usb
     204:	0e 94 3b 05 	call	0xa76	; 0xa76 <m_usb_init>
	while(!m_usb_isconnected()){};  //wait for connection
     208:	0e 94 54 05 	call	0xaa8	; 0xaa8 <m_usb_isconnected>
     20c:	88 23       	and	r24, r24
     20e:	e1 f3       	breq	.-8      	; 0x208 <main+0x1e>

	m_red(OFF);
     210:	6e 9a       	sbi	0x0d, 6	; 13
     212:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     214:	6a 9a       	sbi	0x0d, 2	; 13
     216:	72 9a       	sbi	0x0e, 2	; 14
 #define CLOCK 0
 
 //long count = 0;


 int main(void){
     218:	08 e7       	ldi	r16, 0x78	; 120
     21a:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	84 e3       	ldi	r24, 0x34	; 52
     220:	9c e0       	ldi	r25, 0x0C	; 12
     222:	21 50       	subi	r18, 0x01	; 1
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	90 40       	sbci	r25, 0x00	; 0
     228:	e1 f7       	brne	.-8      	; 0x222 <main+0x38>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x42>
     22c:	00 00       	nop
	i = 0;
	*/
	
	while(1){
		m_wait(250);
		m_red(ON);
     22e:	6e 9a       	sbi	0x0d, 6	; 13
     230:	76 98       	cbi	0x0e, 6	; 14
		m_green(OFF);
     232:	6a 9a       	sbi	0x0d, 2	; 13
     234:	72 9a       	sbi	0x0e, 2	; 14
		localize(data);
     236:	8c e5       	ldi	r24, 0x5C	; 92
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 a1 03 	call	0x742	; 0x742 <localize>
		m_red(OFF);
     23e:	6e 9a       	sbi	0x0d, 6	; 13
     240:	76 9a       	sbi	0x0e, 6	; 14
		m_green(ON);
     242:	6a 9a       	sbi	0x0d, 2	; 13
     244:	72 98       	cbi	0x0e, 2	; 14
     246:	cc e5       	ldi	r28, 0x5C	; 92
     248:	d1 e0       	ldi	r29, 0x01	; 1
			//m_wii_read(blobs);
			/*data[0] = 50;
			data[1] = 50;*/
			//m_usb_tx_string("hi");
			for (i = 0 ; i < 7 ; i++){
			m_usb_tx_int((int)data[i]);
     24a:	69 91       	ld	r22, Y+
     24c:	79 91       	ld	r23, Y+
     24e:	89 91       	ld	r24, Y+
     250:	99 91       	ld	r25, Y+
     252:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fixsfsi>
     256:	cb 01       	movw	r24, r22
     258:	0e 94 93 07 	call	0xf26	; 0xf26 <m_usb_tx_int>
			m_usb_tx_char('\t');
     25c:	89 e0       	ldi	r24, 0x09	; 9
     25e:	0e 94 57 05 	call	0xaae	; 0xaae <m_usb_tx_char>
			*/
			//m_wii_read(blobs);
			/*data[0] = 50;
			data[1] = 50;*/
			//m_usb_tx_string("hi");
			for (i = 0 ; i < 7 ; i++){
     262:	c0 17       	cp	r28, r16
     264:	d1 07       	cpc	r29, r17
     266:	89 f7       	brne	.-30     	; 0x24a <main+0x60>
			m_usb_tx_int((int)data[i]);
			m_usb_tx_char('\t');

			}
			//m_usb_tx_int((int)(data[2]));
			m_usb_tx_string("\n");
     268:	87 ef       	ldi	r24, 0xF7	; 247
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 79 07 	call	0xef2	; 0xef2 <print_P>
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     270:	8a e0       	ldi	r24, 0x0A	; 10
     272:	0e 94 57 05 	call	0xaae	; 0xaae <m_usb_tx_char>
			m_usb_tx_int(data[6]);
			m_usb_tx_string("\tangle: ");
			m_usb_tx_int((int) (((float) atan2(((double) (data[3]-data[4])),((double) (data[5]-data[6])))) * 180.0 / 3.14));
			m_usb_tx_string("\n");*/
		}
	}	 
     276:	d2 cf       	rjmp	.-92     	; 0x21c <main+0x32>

00000278 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     278:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     27a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     27c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     27e:	8c e0       	ldi	r24, 0x0C	; 12
     280:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     284:	e9 e6       	ldi	r30, 0x69	; 105
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	80 62       	ori	r24, 0x20	; 32
     28c:	80 83       	st	Z, r24
     28e:	80 81       	ld	r24, Z
     290:	8f 7e       	andi	r24, 0xEF	; 239
     292:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     294:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     296:	78 94       	sei
     298:	08 95       	ret

0000029a <getData>:
float dist = 0;
float distmax = 0, distmin = 1023;
float dcenter = 0;
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     2a6:	80 e4       	ldi	r24, 0x40	; 64
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 21 08 	call	0x1042	; 0x1042 <m_wii_read>
	x[0] = blobs[0];
     2ae:	80 91 40 01 	lds	r24, 0x0140
     2b2:	90 91 41 01 	lds	r25, 0x0141
     2b6:	f8 01       	movw	r30, r16
     2b8:	91 83       	std	Z+1, r25	; 0x01
     2ba:	80 83       	st	Z, r24
	x[1] = blobs[3];
     2bc:	80 91 46 01 	lds	r24, 0x0146
     2c0:	90 91 47 01 	lds	r25, 0x0147
     2c4:	93 83       	std	Z+3, r25	; 0x03
     2c6:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     2c8:	80 91 4c 01 	lds	r24, 0x014C
     2cc:	90 91 4d 01 	lds	r25, 0x014D
     2d0:	95 83       	std	Z+5, r25	; 0x05
     2d2:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     2d4:	80 91 52 01 	lds	r24, 0x0152
     2d8:	90 91 53 01 	lds	r25, 0x0153
     2dc:	97 83       	std	Z+7, r25	; 0x07
     2de:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     2e0:	80 91 42 01 	lds	r24, 0x0142
     2e4:	90 91 43 01 	lds	r25, 0x0143
     2e8:	99 83       	std	Y+1, r25	; 0x01
     2ea:	88 83       	st	Y, r24
	y[1] = blobs[4];
     2ec:	80 91 48 01 	lds	r24, 0x0148
     2f0:	90 91 49 01 	lds	r25, 0x0149
     2f4:	9b 83       	std	Y+3, r25	; 0x03
     2f6:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     2f8:	80 91 4e 01 	lds	r24, 0x014E
     2fc:	90 91 4f 01 	lds	r25, 0x014F
     300:	9d 83       	std	Y+5, r25	; 0x05
     302:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     304:	80 91 54 01 	lds	r24, 0x0154
     308:	90 91 55 01 	lds	r25, 0x0155
     30c:	9f 83       	std	Y+7, r25	; 0x07
     30e:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <determine_blobs>:

unsigned char determine_blobs() {
     31c:	2f 92       	push	r2
     31e:	3f 92       	push	r3
     320:	4f 92       	push	r4
     322:	5f 92       	push	r5
     324:	6f 92       	push	r6
     326:	7f 92       	push	r7
     328:	8f 92       	push	r8
     32a:	9f 92       	push	r9
     32c:	af 92       	push	r10
     32e:	bf 92       	push	r11
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	66 97       	sbiw	r28, 0x16	; 22
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     350:	0f 2e       	mov	r0, r31
     352:	f2 e3       	ldi	r31, 0x32	; 50
     354:	cf 2e       	mov	r12, r31
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	df 2e       	mov	r13, r31
     35a:	f0 2d       	mov	r31, r0
     35c:	04 e3       	ldi	r16, 0x34	; 52
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	0f 2e       	mov	r0, r31
     362:	f6 e3       	ldi	r31, 0x36	; 54
     364:	ef 2e       	mov	r14, r31
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	ff 2e       	mov	r15, r31
     36a:	f0 2d       	mov	r31, r0
} 

unsigned char determine_blobs() {
	int exit = 0;
	while (exit == 0) {
		getData(x, y);
     36c:	68 e2       	ldi	r22, 0x28	; 40
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	80 e3       	ldi	r24, 0x30	; 48
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 4d 01 	call	0x29a	; 0x29a <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     378:	80 91 30 01 	lds	r24, 0x0130
     37c:	90 91 31 01 	lds	r25, 0x0131
     380:	8f 3f       	cpi	r24, 0xFF	; 255
     382:	93 40       	sbci	r25, 0x03	; 3
     384:	98 f7       	brcc	.-26     	; 0x36c <determine_blobs+0x50>
     386:	d6 01       	movw	r26, r12
     388:	8d 91       	ld	r24, X+
     38a:	9c 91       	ld	r25, X
     38c:	8f 3f       	cpi	r24, 0xFF	; 255
     38e:	93 40       	sbci	r25, 0x03	; 3
     390:	68 f7       	brcc	.-38     	; 0x36c <determine_blobs+0x50>
     392:	f8 01       	movw	r30, r16
     394:	80 81       	ld	r24, Z
     396:	91 81       	ldd	r25, Z+1	; 0x01
     398:	8f 3f       	cpi	r24, 0xFF	; 255
     39a:	93 40       	sbci	r25, 0x03	; 3
     39c:	38 f7       	brcc	.-50     	; 0x36c <determine_blobs+0x50>
     39e:	d7 01       	movw	r26, r14
     3a0:	8d 91       	ld	r24, X+
     3a2:	9c 91       	ld	r25, X
     3a4:	8f 3f       	cpi	r24, 0xFF	; 255
     3a6:	93 40       	sbci	r25, 0x03	; 3
     3a8:	08 f7       	brcc	.-62     	; 0x36c <determine_blobs+0x50>
     3aa:	60 90 24 01 	lds	r6, 0x0124
     3ae:	70 90 25 01 	lds	r7, 0x0125
     3b2:	80 90 26 01 	lds	r8, 0x0126
     3b6:	90 90 27 01 	lds	r9, 0x0127
     3ba:	d0 90 20 01 	lds	r13, 0x0120
     3be:	c0 90 21 01 	lds	r12, 0x0121
     3c2:	40 90 22 01 	lds	r4, 0x0122
     3c6:	50 90 23 01 	lds	r5, 0x0123
     3ca:	e0 91 1a 01 	lds	r30, 0x011A
     3ce:	ed 87       	std	Y+13, r30	; 0x0d
     3d0:	f0 91 1b 01 	lds	r31, 0x011B
     3d4:	fe 87       	std	Y+14, r31	; 0x0e
     3d6:	20 91 18 01 	lds	r18, 0x0118
     3da:	2b 87       	std	Y+11, r18	; 0x0b
     3dc:	30 91 19 01 	lds	r19, 0x0119
     3e0:	3c 87       	std	Y+12, r19	; 0x0c
     3e2:	40 91 1c 01 	lds	r20, 0x011C
     3e6:	49 8b       	std	Y+17, r20	; 0x11
     3e8:	50 91 1d 01 	lds	r21, 0x011D
     3ec:	5a 8b       	std	Y+18, r21	; 0x12
     3ee:	60 91 1e 01 	lds	r22, 0x011E
     3f2:	6b 8b       	std	Y+19, r22	; 0x13
     3f4:	70 91 1f 01 	lds	r23, 0x011F
     3f8:	7c 8b       	std	Y+20, r23	; 0x14
     3fa:	f0 90 00 01 	lds	r15, 0x0100
     3fe:	e0 90 01 01 	lds	r14, 0x0101
     402:	20 90 02 01 	lds	r2, 0x0102
     406:	30 90 03 01 	lds	r3, 0x0103
     40a:	80 91 16 01 	lds	r24, 0x0116
     40e:	8f 87       	std	Y+15, r24	; 0x0f
     410:	90 91 17 01 	lds	r25, 0x0117
     414:	98 8b       	std	Y+16, r25	; 0x10
     416:	a0 91 14 01 	lds	r26, 0x0114
     41a:	b0 91 15 01 	lds	r27, 0x0115
     41e:	ba 87       	std	Y+10, r27	; 0x0a
     420:	a9 87       	std	Y+9, r26	; 0x09
     422:	18 86       	std	Y+8, r1	; 0x08
     424:	1f 82       	std	Y+7, r1	; 0x07
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	77 c0       	rjmp	.+238    	; 0x51a <determine_blobs+0x1fe>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
     42c:	f8 01       	movw	r30, r16
     42e:	81 91       	ld	r24, Z+
     430:	91 91       	ld	r25, Z+
     432:	8f 01       	movw	r16, r30
     434:	2b 81       	ldd	r18, Y+3	; 0x03
     436:	3c 81       	ldd	r19, Y+4	; 0x04
     438:	28 1b       	sub	r18, r24
     43a:	39 0b       	sbc	r19, r25
     43c:	c9 01       	movw	r24, r18
     43e:	a9 81       	ldd	r26, Y+1	; 0x01
     440:	ba 81       	ldd	r27, Y+2	; 0x02
     442:	2d 91       	ld	r18, X+
     444:	3d 91       	ld	r19, X+
     446:	ba 83       	std	Y+2, r27	; 0x02
     448:	a9 83       	std	Y+1, r26	; 0x01
     44a:	ed 81       	ldd	r30, Y+5	; 0x05
     44c:	fe 81       	ldd	r31, Y+6	; 0x06
     44e:	e2 1b       	sub	r30, r18
     450:	f3 0b       	sbc	r31, r19
     452:	ee 9f       	mul	r30, r30
     454:	b0 01       	movw	r22, r0
     456:	ef 9f       	mul	r30, r31
     458:	70 0d       	add	r23, r0
     45a:	70 0d       	add	r23, r0
     45c:	11 24       	eor	r1, r1
     45e:	88 9f       	mul	r24, r24
     460:	90 01       	movw	r18, r0
     462:	89 9f       	mul	r24, r25
     464:	30 0d       	add	r19, r0
     466:	30 0d       	add	r19, r0
     468:	11 24       	eor	r1, r1
     46a:	62 0f       	add	r22, r18
     46c:	73 1f       	adc	r23, r19
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     476:	0e 94 80 0c 	call	0x1900	; 0x1900 <sqrt>
     47a:	66 2e       	mov	r6, r22
     47c:	77 2e       	mov	r7, r23
     47e:	88 2e       	mov	r8, r24
     480:	99 2e       	mov	r9, r25
					if (dist > distmax) {
     482:	2d 2d       	mov	r18, r13
     484:	3c 2d       	mov	r19, r12
     486:	44 2d       	mov	r20, r4
     488:	55 2d       	mov	r21, r5
     48a:	66 2d       	mov	r22, r6
     48c:	77 2d       	mov	r23, r7
     48e:	88 2d       	mov	r24, r8
     490:	99 2d       	mov	r25, r9
     492:	0e 94 08 0c 	call	0x1810	; 0x1810 <__gesf2>
     496:	18 16       	cp	r1, r24
     498:	c4 f4       	brge	.+48     	; 0x4ca <determine_blobs+0x1ae>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	66 2d       	mov	r22, r6
     4a4:	77 2d       	mov	r23, r7
     4a6:	88 2d       	mov	r24, r8
     4a8:	99 2d       	mov	r25, r9
     4aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     4ae:	69 8b       	std	Y+17, r22	; 0x11
     4b0:	7a 8b       	std	Y+18, r23	; 0x12
     4b2:	8b 8b       	std	Y+19, r24	; 0x13
     4b4:	9c 8b       	std	Y+20, r25	; 0x14
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     4b6:	fd 89       	ldd	r31, Y+21	; 0x15
     4b8:	fb 87       	std	Y+11, r31	; 0x0b
     4ba:	2e 89       	ldd	r18, Y+22	; 0x16
     4bc:	2c 87       	std	Y+12, r18	; 0x0c
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     4be:	ad 86       	std	Y+13, r10	; 0x0d
     4c0:	be 86       	std	Y+14, r11	; 0x0e
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
     4c2:	d6 2c       	mov	r13, r6
     4c4:	c7 2c       	mov	r12, r7
     4c6:	48 2c       	mov	r4, r8
     4c8:	59 2c       	mov	r5, r9
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     4ca:	26 2d       	mov	r18, r6
     4cc:	37 2d       	mov	r19, r7
     4ce:	48 2d       	mov	r20, r8
     4d0:	59 2d       	mov	r21, r9
     4d2:	6f 2d       	mov	r22, r15
     4d4:	7e 2d       	mov	r23, r14
     4d6:	82 2d       	mov	r24, r2
     4d8:	93 2d       	mov	r25, r3
     4da:	0e 94 08 0c 	call	0x1810	; 0x1810 <__gesf2>
     4de:	18 16       	cp	r1, r24
     4e0:	54 f4       	brge	.+20     	; 0x4f6 <determine_blobs+0x1da>
						distmin = dist;
						close1 = i;
						close2 = j;
     4e2:	4d 89       	ldd	r20, Y+21	; 0x15
     4e4:	5e 89       	ldd	r21, Y+22	; 0x16
     4e6:	5a 87       	std	Y+10, r21	; 0x0a
     4e8:	49 87       	std	Y+9, r20	; 0x09
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     4ea:	af 86       	std	Y+15, r10	; 0x0f
     4ec:	b8 8a       	std	Y+16, r11	; 0x10
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     4ee:	f6 2c       	mov	r15, r6
     4f0:	e7 2c       	mov	r14, r7
     4f2:	28 2c       	mov	r2, r8
     4f4:	39 2c       	mov	r3, r9
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     4f6:	6d 89       	ldd	r22, Y+21	; 0x15
     4f8:	7e 89       	ldd	r23, Y+22	; 0x16
     4fa:	6f 5f       	subi	r22, 0xFF	; 255
     4fc:	7f 4f       	sbci	r23, 0xFF	; 255
     4fe:	7e 8b       	std	Y+22, r23	; 0x16
     500:	6d 8b       	std	Y+21, r22	; 0x15
     502:	64 30       	cpi	r22, 0x04	; 4
     504:	71 05       	cpc	r23, r1
     506:	09 f0       	breq	.+2      	; 0x50a <determine_blobs+0x1ee>
     508:	91 cf       	rjmp	.-222    	; 0x42c <determine_blobs+0x110>
	int exit = 0;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	98 87       	std	Y+8, r25	; 0x08
     512:	8f 83       	std	Y+7, r24	; 0x07
     514:	84 30       	cpi	r24, 0x04	; 4
     516:	91 05       	cpc	r25, r1
     518:	e1 f0       	breq	.+56     	; 0x552 <determine_blobs+0x236>
				for (int j = i; j < 4; j++) {
     51a:	84 30       	cpi	r24, 0x04	; 4
     51c:	91 05       	cpc	r25, r1
     51e:	ac f7       	brge	.-22     	; 0x50a <determine_blobs+0x1ee>
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
     520:	fc 01       	movw	r30, r24
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	8f 01       	movw	r16, r30
     528:	00 5d       	subi	r16, 0xD0	; 208
     52a:	1e 4f       	sbci	r17, 0xFE	; 254
     52c:	d8 01       	movw	r26, r16
     52e:	0d 90       	ld	r0, X+
     530:	bc 91       	ld	r27, X
     532:	a0 2d       	mov	r26, r0
     534:	bc 83       	std	Y+4, r27	; 0x04
     536:	ab 83       	std	Y+3, r26	; 0x03
     538:	e8 5d       	subi	r30, 0xD8	; 216
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	20 81       	ld	r18, Z
     53e:	31 81       	ldd	r19, Z+1	; 0x01
     540:	3e 83       	std	Y+6, r19	; 0x06
     542:	2d 83       	std	Y+5, r18	; 0x05
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     544:	fa 83       	std	Y+2, r31	; 0x02
     546:	e9 83       	std	Y+1, r30	; 0x01
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     548:	a8 2e       	mov	r10, r24
     54a:	b9 2e       	mov	r11, r25
     54c:	9e 8b       	std	Y+22, r25	; 0x16
     54e:	8d 8b       	std	Y+21, r24	; 0x15
     550:	6d cf       	rjmp	.-294    	; 0x42c <determine_blobs+0x110>
     552:	86 2d       	mov	r24, r6
     554:	97 2d       	mov	r25, r7
     556:	a8 2d       	mov	r26, r8
     558:	b9 2d       	mov	r27, r9
     55a:	80 93 24 01 	sts	0x0124, r24
     55e:	90 93 25 01 	sts	0x0125, r25
     562:	a0 93 26 01 	sts	0x0126, r26
     566:	b0 93 27 01 	sts	0x0127, r27
     56a:	8d 2d       	mov	r24, r13
     56c:	9c 2d       	mov	r25, r12
     56e:	a4 2d       	mov	r26, r4
     570:	b5 2d       	mov	r27, r5
     572:	80 93 20 01 	sts	0x0120, r24
     576:	90 93 21 01 	sts	0x0121, r25
     57a:	a0 93 22 01 	sts	0x0122, r26
     57e:	b0 93 23 01 	sts	0x0123, r27
     582:	3d 85       	ldd	r19, Y+13	; 0x0d
     584:	30 93 1a 01 	sts	0x011A, r19
     588:	4e 85       	ldd	r20, Y+14	; 0x0e
     58a:	40 93 1b 01 	sts	0x011B, r20
     58e:	5b 85       	ldd	r21, Y+11	; 0x0b
     590:	50 93 18 01 	sts	0x0118, r21
     594:	6c 85       	ldd	r22, Y+12	; 0x0c
     596:	60 93 19 01 	sts	0x0119, r22
     59a:	59 89       	ldd	r21, Y+17	; 0x11
     59c:	4a 89       	ldd	r20, Y+18	; 0x12
     59e:	3b 89       	ldd	r19, Y+19	; 0x13
     5a0:	2c 89       	ldd	r18, Y+20	; 0x14
     5a2:	85 2f       	mov	r24, r21
     5a4:	94 2f       	mov	r25, r20
     5a6:	a3 2f       	mov	r26, r19
     5a8:	b2 2f       	mov	r27, r18
     5aa:	80 93 1c 01 	sts	0x011C, r24
     5ae:	90 93 1d 01 	sts	0x011D, r25
     5b2:	a0 93 1e 01 	sts	0x011E, r26
     5b6:	b0 93 1f 01 	sts	0x011F, r27
     5ba:	8f 2d       	mov	r24, r15
     5bc:	9e 2d       	mov	r25, r14
     5be:	a2 2d       	mov	r26, r2
     5c0:	b3 2d       	mov	r27, r3
     5c2:	80 93 00 01 	sts	0x0100, r24
     5c6:	90 93 01 01 	sts	0x0101, r25
     5ca:	a0 93 02 01 	sts	0x0102, r26
     5ce:	b0 93 03 01 	sts	0x0103, r27
     5d2:	7f 85       	ldd	r23, Y+15	; 0x0f
     5d4:	70 93 16 01 	sts	0x0116, r23
     5d8:	88 89       	ldd	r24, Y+16	; 0x10
     5da:	80 93 17 01 	sts	0x0117, r24
     5de:	99 85       	ldd	r25, Y+9	; 0x09
     5e0:	90 93 14 01 	sts	0x0114, r25
     5e4:	aa 85       	ldd	r26, Y+10	; 0x0a
     5e6:	a0 93 15 01 	sts	0x0115, r26
						close1 = i;
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     5ea:	80 91 1a 01 	lds	r24, 0x011A
     5ee:	90 91 1b 01 	lds	r25, 0x011B
     5f2:	20 91 16 01 	lds	r18, 0x0116
     5f6:	30 91 17 01 	lds	r19, 0x0117
     5fa:	82 17       	cp	r24, r18
     5fc:	93 07       	cpc	r25, r19
     5fe:	19 f5       	brne	.+70     	; 0x646 <determine_blobs+0x32a>
				top = far1;
     600:	90 93 3f 01 	sts	0x013F, r25
     604:	80 93 3e 01 	sts	0x013E, r24
				bottom = far2;
     608:	40 91 18 01 	lds	r20, 0x0118
     60c:	50 91 19 01 	lds	r21, 0x0119
     610:	50 93 3d 01 	sts	0x013D, r21
     614:	40 93 3c 01 	sts	0x013C, r20
				right = close2;
     618:	20 91 14 01 	lds	r18, 0x0114
     61c:	30 91 15 01 	lds	r19, 0x0115
     620:	30 93 39 01 	sts	0x0139, r19
     624:	20 93 38 01 	sts	0x0138, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 10 - top - bottom - right;
     628:	6a e0       	ldi	r22, 0x0A	; 10
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	fb 01       	movw	r30, r22
     62e:	e8 1b       	sub	r30, r24
     630:	f9 0b       	sbc	r31, r25
     632:	cf 01       	movw	r24, r30
     634:	84 1b       	sub	r24, r20
     636:	95 0b       	sbc	r25, r21
     638:	82 1b       	sub	r24, r18
     63a:	93 0b       	sbc	r25, r19
     63c:	90 93 3b 01 	sts	0x013B, r25
     640:	80 93 3a 01 	sts	0x013A, r24
     644:	64 c0       	rjmp	.+200    	; 0x70e <determine_blobs+0x3f2>
			}
			else if (far1 == close2) {
     646:	49 85       	ldd	r20, Y+9	; 0x09
     648:	5a 85       	ldd	r21, Y+10	; 0x0a
     64a:	84 17       	cp	r24, r20
     64c:	95 07       	cpc	r25, r21
     64e:	f9 f4       	brne	.+62     	; 0x68e <determine_blobs+0x372>
				top = far1;
     650:	90 93 3f 01 	sts	0x013F, r25
     654:	80 93 3e 01 	sts	0x013E, r24
				bottom = far2;
     658:	40 91 18 01 	lds	r20, 0x0118
     65c:	50 91 19 01 	lds	r21, 0x0119
     660:	50 93 3d 01 	sts	0x013D, r21
     664:	40 93 3c 01 	sts	0x013C, r20
				right = close1;
     668:	30 93 39 01 	sts	0x0139, r19
     66c:	20 93 38 01 	sts	0x0138, r18
				left = 10 - top - bottom - right;
     670:	6a e0       	ldi	r22, 0x0A	; 10
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	db 01       	movw	r26, r22
     676:	a8 1b       	sub	r26, r24
     678:	b9 0b       	sbc	r27, r25
     67a:	cd 01       	movw	r24, r26
     67c:	84 1b       	sub	r24, r20
     67e:	95 0b       	sbc	r25, r21
     680:	82 1b       	sub	r24, r18
     682:	93 0b       	sbc	r25, r19
     684:	90 93 3b 01 	sts	0x013B, r25
     688:	80 93 3a 01 	sts	0x013A, r24
     68c:	40 c0       	rjmp	.+128    	; 0x70e <determine_blobs+0x3f2>
			}
			else if (far2 == close1) {
     68e:	40 91 18 01 	lds	r20, 0x0118
     692:	50 91 19 01 	lds	r21, 0x0119
     696:	24 17       	cp	r18, r20
     698:	35 07       	cpc	r19, r21
     69a:	f1 f4       	brne	.+60     	; 0x6d8 <determine_blobs+0x3bc>
				top = far2;
     69c:	30 93 3f 01 	sts	0x013F, r19
     6a0:	20 93 3e 01 	sts	0x013E, r18
				bottom = far1;
     6a4:	90 93 3d 01 	sts	0x013D, r25
     6a8:	80 93 3c 01 	sts	0x013C, r24
				right = close2;
     6ac:	e9 85       	ldd	r30, Y+9	; 0x09
     6ae:	fa 85       	ldd	r31, Y+10	; 0x0a
     6b0:	f0 93 39 01 	sts	0x0139, r31
     6b4:	e0 93 38 01 	sts	0x0138, r30
				left = 10 - top - bottom - right;
     6b8:	4a e0       	ldi	r20, 0x0A	; 10
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	ba 01       	movw	r22, r20
     6be:	62 1b       	sub	r22, r18
     6c0:	73 0b       	sbc	r23, r19
     6c2:	db 01       	movw	r26, r22
     6c4:	a8 1b       	sub	r26, r24
     6c6:	b9 0b       	sbc	r27, r25
     6c8:	cd 01       	movw	r24, r26
     6ca:	8e 1b       	sub	r24, r30
     6cc:	9f 0b       	sbc	r25, r31
     6ce:	90 93 3b 01 	sts	0x013B, r25
     6d2:	80 93 3a 01 	sts	0x013A, r24
     6d6:	1b c0       	rjmp	.+54     	; 0x70e <determine_blobs+0x3f2>
			}
			else {
				top = far2;
     6d8:	50 93 3f 01 	sts	0x013F, r21
     6dc:	40 93 3e 01 	sts	0x013E, r20
				bottom = far1;
     6e0:	90 93 3d 01 	sts	0x013D, r25
     6e4:	80 93 3c 01 	sts	0x013C, r24
				right = close1;
     6e8:	30 93 39 01 	sts	0x0139, r19
     6ec:	20 93 38 01 	sts	0x0138, r18
				left = 10 - top - bottom - right;
     6f0:	6a e0       	ldi	r22, 0x0A	; 10
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	fb 01       	movw	r30, r22
     6f6:	e4 1b       	sub	r30, r20
     6f8:	f5 0b       	sbc	r31, r21
     6fa:	bf 01       	movw	r22, r30
     6fc:	68 1b       	sub	r22, r24
     6fe:	79 0b       	sbc	r23, r25
     700:	cb 01       	movw	r24, r22
     702:	82 1b       	sub	r24, r18
     704:	93 0b       	sbc	r25, r19
     706:	90 93 3b 01 	sts	0x013B, r25
     70a:	80 93 3a 01 	sts	0x013A, r24
			}
		}
	}
	return 1;
}
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	66 96       	adiw	r28, 0x16	; 22
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	bf 90       	pop	r11
     72e:	af 90       	pop	r10
     730:	9f 90       	pop	r9
     732:	8f 90       	pop	r8
     734:	7f 90       	pop	r7
     736:	6f 90       	pop	r6
     738:	5f 90       	pop	r5
     73a:	4f 90       	pop	r4
     73c:	3f 90       	pop	r3
     73e:	2f 90       	pop	r2
     740:	08 95       	ret

00000742 <localize>:
	data[0] = blobs[0];
	data[1] = blobs[1];
	data[2] = 1.0;
}

unsigned char localize (float* data) {
     742:	2f 92       	push	r2
     744:	3f 92       	push	r3
     746:	4f 92       	push	r4
     748:	5f 92       	push	r5
     74a:	6f 92       	push	r6
     74c:	7f 92       	push	r7
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	2a 97       	sbiw	r28, 0x0a	; 10
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	9a 87       	std	Y+10, r25	; 0x0a
     778:	89 87       	std	Y+9, r24	; 0x09
	//m_wii_read(blobs);
	determine_blobs();
     77a:	0e 94 8e 01 	call	0x31c	; 0x31c <determine_blobs>
	float theta_top_right = (float) atan2((double) 11.655, (double) (14.5+8.741));
	float theta_bottom_left = (float) atan2((double)10.563, (double) (14.5+2.483));
	float theta_bottom_right = (float) atan2((double) 11.655, (double) (14.5-8.741));

	
	if (x[top] < 1023 && x[bottom] < 1023) {
     77e:	c0 90 3e 01 	lds	r12, 0x013E
     782:	d0 90 3f 01 	lds	r13, 0x013F
     786:	f6 01       	movw	r30, r12
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e0 5d       	subi	r30, 0xD0	; 208
     78e:	fe 4f       	sbci	r31, 0xFE	; 254
     790:	e0 80       	ld	r14, Z
     792:	f1 80       	ldd	r15, Z+1	; 0x01
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	e8 16       	cp	r14, r24
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	f8 06       	cpc	r15, r24
     79c:	08 f0       	brcs	.+2      	; 0x7a0 <localize+0x5e>
     79e:	4f c1       	rjmp	.+670    	; 0xa3e <localize+0x2fc>
     7a0:	80 90 3c 01 	lds	r8, 0x013C
     7a4:	90 90 3d 01 	lds	r9, 0x013D
     7a8:	f4 01       	movw	r30, r8
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e0 5d       	subi	r30, 0xD0	; 208
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	a0 80       	ld	r10, Z
     7b4:	b1 80       	ldd	r11, Z+1	; 0x01
     7b6:	ef ef       	ldi	r30, 0xFF	; 255
     7b8:	ae 16       	cp	r10, r30
     7ba:	e3 e0       	ldi	r30, 0x03	; 3
     7bc:	be 06       	cpc	r11, r30
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <localize+0x80>
     7c0:	40 c1       	rjmp	.+640    	; 0xa42 <localize+0x300>
		//calculate and store pixel-space position and orientation
		posx = (float) ((128.0/1023.0)*((float)(x[top]+x[bottom]))/2.0-rcenterx);
     7c2:	40 90 08 01 	lds	r4, 0x0108
     7c6:	50 90 09 01 	lds	r5, 0x0109
     7ca:	60 90 0a 01 	lds	r6, 0x010A
     7ce:	70 90 0b 01 	lds	r7, 0x010B
     7d2:	b5 01       	movw	r22, r10
     7d4:	6e 0d       	add	r22, r14
     7d6:	7f 1d       	adc	r23, r15
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     7e0:	28 e0       	ldi	r18, 0x08	; 8
     7e2:	30 e2       	ldi	r19, 0x20	; 32
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	5e e3       	ldi	r21, 0x3E	; 62
     7e8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     7f8:	a3 01       	movw	r20, r6
     7fa:	92 01       	movw	r18, r4
     7fc:	0e 94 b9 09 	call	0x1372	; 0x1372 <__subsf3>
     800:	16 2f       	mov	r17, r22
     802:	07 2f       	mov	r16, r23
     804:	38 2e       	mov	r3, r24
     806:	29 2e       	mov	r2, r25
		posy = (float) ((96.0/1023.0)*((float)(y[top]+y[bottom]))/2.0-rcentery);
     808:	f6 01       	movw	r30, r12
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e8 5d       	subi	r30, 0xD8	; 216
     810:	fe 4f       	sbci	r31, 0xFE	; 254
     812:	c0 80       	ld	r12, Z
     814:	d1 80       	ldd	r13, Z+1	; 0x01
     816:	f4 01       	movw	r30, r8
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	e8 5d       	subi	r30, 0xD8	; 216
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	80 80       	ld	r8, Z
     822:	91 80       	ldd	r9, Z+1	; 0x01
     824:	b4 01       	movw	r22, r8
     826:	6c 0d       	add	r22, r12
     828:	7d 1d       	adc	r23, r13
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     832:	2c e0       	ldi	r18, 0x0C	; 12
     834:	30 e3       	ldi	r19, 0x30	; 48
     836:	40 ec       	ldi	r20, 0xC0	; 192
     838:	5d e3       	ldi	r21, 0x3D	; 61
     83a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	5f e3       	ldi	r21, 0x3F	; 63
     846:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     84a:	20 91 04 01 	lds	r18, 0x0104
     84e:	30 91 05 01 	lds	r19, 0x0105
     852:	40 91 06 01 	lds	r20, 0x0106
     856:	50 91 07 01 	lds	r21, 0x0107
     85a:	0e 94 b9 09 	call	0x1372	; 0x1372 <__subsf3>
     85e:	69 83       	std	Y+1, r22	; 0x01
     860:	7a 83       	std	Y+2, r23	; 0x02
     862:	8b 83       	std	Y+3, r24	; 0x03
     864:	9c 83       	std	Y+4, r25	; 0x04
		
		//calculate and store angle
		angle = (float) atan2(((double) ((int)x[top]-(int)x[bottom])),((double) ((int)y[top]-(int)y[bottom])));
     866:	b6 01       	movw	r22, r12
     868:	68 19       	sub	r22, r8
     86a:	79 09       	sbc	r23, r9
     86c:	88 27       	eor	r24, r24
     86e:	77 fd       	sbrc	r23, 7
     870:	80 95       	com	r24
     872:	98 2f       	mov	r25, r24
     874:	0e 94 1e 0b 	call	0x163c	; 0x163c <__floatsisf>
     878:	6d 83       	std	Y+5, r22	; 0x05
     87a:	7e 83       	std	Y+6, r23	; 0x06
     87c:	8f 83       	std	Y+7, r24	; 0x07
     87e:	98 87       	std	Y+8, r25	; 0x08
     880:	b7 01       	movw	r22, r14
     882:	6a 19       	sub	r22, r10
     884:	7b 09       	sbc	r23, r11
     886:	88 27       	eor	r24, r24
     888:	77 fd       	sbrc	r23, 7
     88a:	80 95       	com	r24
     88c:	98 2f       	mov	r25, r24
     88e:	0e 94 1e 0b 	call	0x163c	; 0x163c <__floatsisf>
     892:	2d 81       	ldd	r18, Y+5	; 0x05
     894:	3e 81       	ldd	r19, Y+6	; 0x06
     896:	4f 81       	ldd	r20, Y+7	; 0x07
     898:	58 85       	ldd	r21, Y+8	; 0x08
     89a:	0e 94 2d 0a 	call	0x145a	; 0x145a <atan2>
     89e:	6b 01       	movw	r12, r22
     8a0:	7c 01       	movw	r14, r24
		phi = -1.0 * ((float) atan2((double) posy, (double) posx));
     8a2:	21 2f       	mov	r18, r17
     8a4:	30 2f       	mov	r19, r16
     8a6:	43 2d       	mov	r20, r3
     8a8:	52 2d       	mov	r21, r2
     8aa:	b9 81       	ldd	r27, Y+1	; 0x01
     8ac:	aa 81       	ldd	r26, Y+2	; 0x02
     8ae:	bb 80       	ldd	r11, Y+3	; 0x03
     8b0:	ac 80       	ldd	r10, Y+4	; 0x04
     8b2:	6b 2f       	mov	r22, r27
     8b4:	7a 2f       	mov	r23, r26
     8b6:	8b 2d       	mov	r24, r11
     8b8:	9a 2d       	mov	r25, r10
     8ba:	0e 94 2d 0a 	call	0x145a	; 0x145a <atan2>
     8be:	6d 83       	std	Y+5, r22	; 0x05
     8c0:	7e 83       	std	Y+6, r23	; 0x06
     8c2:	8f 83       	std	Y+7, r24	; 0x07
     8c4:	98 87       	std	Y+8, r25	; 0x08
		
		r = (float) sqrt((double)(posx*posx + posy*posy));
     8c6:	21 2f       	mov	r18, r17
     8c8:	30 2f       	mov	r19, r16
     8ca:	43 2d       	mov	r20, r3
     8cc:	52 2d       	mov	r21, r2
     8ce:	61 2f       	mov	r22, r17
     8d0:	70 2f       	mov	r23, r16
     8d2:	83 2d       	mov	r24, r3
     8d4:	92 2d       	mov	r25, r2
     8d6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     8da:	4b 01       	movw	r8, r22
     8dc:	5c 01       	movw	r10, r24
     8de:	79 81       	ldd	r23, Y+1	; 0x01
     8e0:	6a 81       	ldd	r22, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	8c 81       	ldd	r24, Y+4	; 0x04
     8e6:	27 2f       	mov	r18, r23
     8e8:	36 2f       	mov	r19, r22
     8ea:	49 2f       	mov	r20, r25
     8ec:	58 2f       	mov	r21, r24
     8ee:	67 2f       	mov	r22, r23
     8f0:	73 2f       	mov	r23, r19
     8f2:	84 2f       	mov	r24, r20
     8f4:	95 2f       	mov	r25, r21
     8f6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	c5 01       	movw	r24, r10
     900:	b4 01       	movw	r22, r8
     902:	0e 94 ba 09 	call	0x1374	; 0x1374 <__addsf3>
     906:	0e 94 80 0c 	call	0x1900	; 0x1900 <sqrt>
     90a:	4b 01       	movw	r8, r22
     90c:	5c 01       	movw	r10, r24
		
		
		data[0] = rcenterx - r * (float) cos((double) (angle - phi));
     90e:	2d 81       	ldd	r18, Y+5	; 0x05
     910:	3e 81       	ldd	r19, Y+6	; 0x06
     912:	4f 81       	ldd	r20, Y+7	; 0x07
     914:	58 85       	ldd	r21, Y+8	; 0x08
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 ba 09 	call	0x1374	; 0x1374 <__addsf3>
     91e:	26 2e       	mov	r2, r22
     920:	37 2e       	mov	r3, r23
     922:	08 2f       	mov	r16, r24
     924:	19 2f       	mov	r17, r25
     926:	80 2f       	mov	r24, r16
     928:	91 2f       	mov	r25, r17
     92a:	0e 94 80 0a 	call	0x1500	; 0x1500 <cos>
     92e:	a5 01       	movw	r20, r10
     930:	94 01       	movw	r18, r8
     932:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c3 01       	movw	r24, r6
     93c:	b2 01       	movw	r22, r4
     93e:	0e 94 b9 09 	call	0x1372	; 0x1372 <__subsf3>
     942:	e9 85       	ldd	r30, Y+9	; 0x09
     944:	fa 85       	ldd	r31, Y+10	; 0x0a
     946:	60 83       	st	Z, r22
     948:	71 83       	std	Z+1, r23	; 0x01
     94a:	82 83       	std	Z+2, r24	; 0x02
     94c:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery + r * (float) sin((double) (angle - phi));
     94e:	62 2d       	mov	r22, r2
     950:	73 2d       	mov	r23, r3
     952:	80 2f       	mov	r24, r16
     954:	91 2f       	mov	r25, r17
     956:	0e 94 76 0c 	call	0x18ec	; 0x18ec <sin>
     95a:	a5 01       	movw	r20, r10
     95c:	94 01       	movw	r18, r8
     95e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     962:	20 91 04 01 	lds	r18, 0x0104
     966:	30 91 05 01 	lds	r19, 0x0105
     96a:	40 91 06 01 	lds	r20, 0x0106
     96e:	50 91 07 01 	lds	r21, 0x0107
     972:	0e 94 ba 09 	call	0x1374	; 0x1374 <__addsf3>
     976:	e9 85       	ldd	r30, Y+9	; 0x09
     978:	fa 85       	ldd	r31, Y+10	; 0x0a
     97a:	64 83       	std	Z+4, r22	; 0x04
     97c:	75 83       	std	Z+5, r23	; 0x05
     97e:	86 83       	std	Z+6, r24	; 0x06
     980:	97 83       	std	Z+7, r25	; 0x07
		data[2] = angle * 180.0 / 3.14;
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	44 e3       	ldi	r20, 0x34	; 52
     988:	53 e4       	ldi	r21, 0x43	; 67
     98a:	c7 01       	movw	r24, r14
     98c:	b6 01       	movw	r22, r12
     98e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__mulsf3>
     992:	23 ec       	ldi	r18, 0xC3	; 195
     994:	35 ef       	ldi	r19, 0xF5	; 245
     996:	48 e4       	ldi	r20, 0x48	; 72
     998:	50 e4       	ldi	r21, 0x40	; 64
     99a:	0e 94 83 0a 	call	0x1506	; 0x1506 <__divsf3>
     99e:	e9 85       	ldd	r30, Y+9	; 0x09
     9a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     9a2:	60 87       	std	Z+8, r22	; 0x08
     9a4:	71 87       	std	Z+9, r23	; 0x09
     9a6:	82 87       	std	Z+10, r24	; 0x0a
     9a8:	93 87       	std	Z+11, r25	; 0x0b
		data[3] = x[top];
     9aa:	e0 90 3e 01 	lds	r14, 0x013E
     9ae:	f0 90 3f 01 	lds	r15, 0x013F
     9b2:	ee 0c       	add	r14, r14
     9b4:	ff 1c       	adc	r15, r15
     9b6:	f7 01       	movw	r30, r14
     9b8:	e0 5d       	subi	r30, 0xD0	; 208
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	60 81       	ld	r22, Z
     9be:	71 81       	ldd	r23, Z+1	; 0x01
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     9c8:	e9 85       	ldd	r30, Y+9	; 0x09
     9ca:	fa 85       	ldd	r31, Y+10	; 0x0a
     9cc:	64 87       	std	Z+12, r22	; 0x0c
     9ce:	75 87       	std	Z+13, r23	; 0x0d
     9d0:	86 87       	std	Z+14, r24	; 0x0e
     9d2:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = x[bottom];
     9d4:	00 91 3c 01 	lds	r16, 0x013C
     9d8:	10 91 3d 01 	lds	r17, 0x013D
     9dc:	00 0f       	add	r16, r16
     9de:	11 1f       	adc	r17, r17
     9e0:	f8 01       	movw	r30, r16
     9e2:	e0 5d       	subi	r30, 0xD0	; 208
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	60 81       	ld	r22, Z
     9e8:	71 81       	ldd	r23, Z+1	; 0x01
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     9f2:	e9 85       	ldd	r30, Y+9	; 0x09
     9f4:	fa 85       	ldd	r31, Y+10	; 0x0a
     9f6:	60 8b       	std	Z+16, r22	; 0x10
     9f8:	71 8b       	std	Z+17, r23	; 0x11
     9fa:	82 8b       	std	Z+18, r24	; 0x12
     9fc:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = y[top];
     9fe:	f7 01       	movw	r30, r14
     a00:	e8 5d       	subi	r30, 0xD8	; 216
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	60 81       	ld	r22, Z
     a06:	71 81       	ldd	r23, Z+1	; 0x01
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     a10:	e9 85       	ldd	r30, Y+9	; 0x09
     a12:	fa 85       	ldd	r31, Y+10	; 0x0a
     a14:	64 8b       	std	Z+20, r22	; 0x14
     a16:	75 8b       	std	Z+21, r23	; 0x15
     a18:	86 8b       	std	Z+22, r24	; 0x16
     a1a:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
     a1c:	f8 01       	movw	r30, r16
     a1e:	e8 5d       	subi	r30, 0xD8	; 216
     a20:	fe 4f       	sbci	r31, 0xFE	; 254
     a22:	60 81       	ld	r22, Z
     a24:	71 81       	ldd	r23, Z+1	; 0x01
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__floatunsisf>
     a2e:	e9 85       	ldd	r30, Y+9	; 0x09
     a30:	fa 85       	ldd	r31, Y+10	; 0x0a
     a32:	60 8f       	std	Z+24, r22	; 0x18
     a34:	71 8f       	std	Z+25, r23	; 0x19
     a36:	82 8f       	std	Z+26, r24	; 0x1a
     a38:	93 8f       	std	Z+27, r25	; 0x1b
		return 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <localize+0x302>
		data[1] = rcentery - r * (float)sin((double)(angle - phi));
		data[2] = angle;
		return 1;
	}
	*/
	return 0;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <localize+0x302>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	2a 96       	adiw	r28, 0x0a	; 10
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	3f 90       	pop	r3
     a72:	2f 90       	pop	r2
     a74:	08 95       	ret

00000a76 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     a7c:	80 ea       	ldi	r24, 0xA0	; 160
     a7e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     a82:	82 e1       	ldi	r24, 0x12	; 18
     a84:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     a86:	09 b4       	in	r0, 0x29	; 41
     a88:	00 fe       	sbrs	r0, 0
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     a8c:	80 e9       	ldi	r24, 0x90	; 144
     a8e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     a92:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     a96:	10 92 59 01 	sts	0x0159, r1
	cdc_line_rtsdtr = 0;
     a9a:	10 92 5a 01 	sts	0x015A, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     a9e:	8c e0       	ldi	r24, 0x0C	; 12
     aa0:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     aa4:	78 94       	sei
     aa6:	08 95       	ret

00000aa8 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
     aa8:	80 91 59 01 	lds	r24, 0x0159
}
     aac:	08 95       	ret

00000aae <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     ab2:	90 91 59 01 	lds	r25, 0x0159
     ab6:	99 23       	and	r25, r25
     ab8:	09 f4       	brne	.+2      	; 0xabc <m_usb_tx_char+0xe>
     aba:	4d c0       	rjmp	.+154    	; 0xb56 <__stack+0x57>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     abc:	9f b7       	in	r25, 0x3f	; 63
	cli();
     abe:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     ac0:	24 e0       	ldi	r18, 0x04	; 4
     ac2:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     ac6:	20 91 5b 01 	lds	r18, 0x015B
     aca:	22 23       	and	r18, r18
     acc:	49 f0       	breq	.+18     	; 0xae0 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     ace:	20 91 e8 00 	lds	r18, 0x00E8
     ad2:	25 fd       	sbrc	r18, 5
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <m_usb_tx_char+0x2e>
			SREG = intr_state;
     ad6:	9f bf       	out	0x3f, r25	; 63
			return -1;
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	42 c0       	rjmp	.+132    	; 0xb60 <__stack+0x61>
		}
		transmit_previous_timeout = 0;
     adc:	10 92 5b 01 	sts	0x015B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     ae0:	30 91 e4 00 	lds	r19, 0x00E4
     ae4:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     ae6:	20 91 e8 00 	lds	r18, 0x00E8
     aea:	25 fd       	sbrc	r18, 5
     aec:	25 c0       	rjmp	.+74     	; 0xb38 <__stack+0x39>
		SREG = intr_state;
     aee:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     af0:	90 91 e4 00 	lds	r25, 0x00E4
     af4:	93 17       	cp	r25, r19
     af6:	49 f0       	breq	.+18     	; 0xb0a <__stack+0xb>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     af8:	90 91 59 01 	lds	r25, 0x0159
     afc:	91 11       	cpse	r25, r1
     afe:	0f c0       	rjmp	.+30     	; 0xb1e <__stack+0x1f>
     b00:	2c c0       	rjmp	.+88     	; 0xb5a <__stack+0x5b>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     b02:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     b04:	98 81       	ld	r25, Y
     b06:	93 13       	cpse	r25, r19
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__stack+0x15>
			transmit_previous_timeout = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 5b 01 	sts	0x015B, r24
			return -1;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	26 c0       	rjmp	.+76     	; 0xb60 <__stack+0x61>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     b14:	90 91 59 01 	lds	r25, 0x0159
     b18:	91 11       	cpse	r25, r1
     b1a:	08 c0       	rjmp	.+16     	; 0xb2c <__stack+0x2d>
     b1c:	20 c0       	rjmp	.+64     	; 0xb5e <__stack+0x5f>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     b1e:	a9 ee       	ldi	r26, 0xE9	; 233
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     b24:	e8 ee       	ldi	r30, 0xE8	; 232
     b26:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     b28:	c4 ee       	ldi	r28, 0xE4	; 228
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
     b2c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     b2e:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     b30:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     b32:	20 81       	ld	r18, Z
     b34:	25 ff       	sbrs	r18, 5
     b36:	e5 cf       	rjmp	.-54     	; 0xb02 <__stack+0x3>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     b38:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     b3c:	80 91 e8 00 	lds	r24, 0x00E8
     b40:	85 fd       	sbrc	r24, 5
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <__stack+0x4b>
     b44:	8a e3       	ldi	r24, 0x3A	; 58
     b46:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     b4a:	85 e0       	ldi	r24, 0x05	; 5
     b4c:	80 93 58 01 	sts	0x0158, r24
	SREG = intr_state;
     b50:	9f bf       	out	0x3f, r25	; 63
	return 0;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <__stack+0x61>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <__stack+0x61>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <__stack+0x61>
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	8f 93       	push	r24
     b72:	9f 93       	push	r25
     b74:	ef 93       	push	r30
     b76:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     b78:	e1 ee       	ldi	r30, 0xE1	; 225
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
        UDINT = 0;
     b7e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     b80:	83 ff       	sbrs	r24, 3
     b82:	11 c0       	rjmp	.+34     	; 0xba6 <__vector_10+0x40>
		UENUM = 0;
     b84:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     b8e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     b92:	92 e1       	ldi	r25, 0x12	; 18
     b94:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     b98:	98 e0       	ldi	r25, 0x08	; 8
     b9a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     b9e:	10 92 59 01 	sts	0x0159, r1
		cdc_line_rtsdtr = 0;
     ba2:	10 92 5a 01 	sts	0x015A, r1
        }
	if (intbits & (1<<SOFI)) {
     ba6:	82 ff       	sbrs	r24, 2
     ba8:	13 c0       	rjmp	.+38     	; 0xbd0 <__vector_10+0x6a>
		if (usb_configuration) {
     baa:	80 91 59 01 	lds	r24, 0x0159
     bae:	88 23       	and	r24, r24
     bb0:	79 f0       	breq	.+30     	; 0xbd0 <__vector_10+0x6a>
			t = transmit_flush_timer;
     bb2:	80 91 58 01 	lds	r24, 0x0158
			if (t) {
     bb6:	88 23       	and	r24, r24
     bb8:	59 f0       	breq	.+22     	; 0xbd0 <__vector_10+0x6a>
				transmit_flush_timer = --t;
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	80 93 58 01 	sts	0x0158, r24
				if (!t) {
     bc0:	81 11       	cpse	r24, r1
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     bca:	8a e3       	ldi	r24, 0x3A	; 58
     bcc:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     c0c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     c10:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     c14:	83 ff       	sbrs	r24, 3
     c16:	51 c1       	rjmp	.+674    	; 0xeba <__vector_11+0x2d8>
                bmRequestType = UEDATX;
     c18:	e1 ef       	ldi	r30, 0xF1	; 241
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	70 81       	ld	r23, Z
                bRequest = UEDATX;
     c1e:	40 81       	ld	r20, Z
                wValue = UEDATX;
     c20:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     c22:	30 81       	ld	r19, Z
     c24:	93 2f       	mov	r25, r19
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	dc 01       	movw	r26, r24
     c2a:	a2 2b       	or	r26, r18
     c2c:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
     c2e:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
     c30:	60 81       	ld	r22, Z
     c32:	96 2f       	mov	r25, r22
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	85 2b       	or	r24, r21
                wLength = UEDATX;
     c38:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
     c3a:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     c3c:	52 ef       	ldi	r21, 0xF2	; 242
     c3e:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
     c42:	46 30       	cpi	r20, 0x06	; 6
     c44:	09 f0       	breq	.+2      	; 0xc48 <__vector_11+0x66>
     c46:	5c c0       	rjmp	.+184    	; 0xd00 <__vector_11+0x11e>
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     c4a:	81 e2       	ldi	r24, 0x21	; 33
     c4c:	80 93 eb 00 	sts	0x00EB, r24
					return;
     c50:	3b c1       	rjmp	.+630    	; 0xec8 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
     c52:	c6 e0       	ldi	r28, 0x06	; 6
     c54:	49 ef       	ldi	r20, 0xF9	; 249
     c56:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
     c58:	fa 01       	movw	r30, r20
     c5a:	65 91       	lpm	r22, Z+
     c5c:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
     c5e:	26 17       	cp	r18, r22
     c60:	37 07       	cpc	r19, r23
     c62:	19 f0       	breq	.+6      	; 0xc6a <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
     c64:	49 5f       	subi	r20, 0xF9	; 249
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
     c68:	20 c0       	rjmp	.+64     	; 0xcaa <__vector_11+0xc8>
				}
				list += 2;
     c6a:	fa 01       	movw	r30, r20
     c6c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     c6e:	65 91       	lpm	r22, Z+
     c70:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
     c72:	86 17       	cp	r24, r22
     c74:	97 07       	cpc	r25, r23
     c76:	19 f0       	breq	.+6      	; 0xc7e <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
     c78:	49 5f       	subi	r20, 0xF9	; 249
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
     c7c:	16 c0       	rjmp	.+44     	; 0xcaa <__vector_11+0xc8>
				}
				list += 2;
     c7e:	fa 01       	movw	r30, r20
     c80:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     c82:	85 91       	lpm	r24, Z+
     c84:	94 91       	lpm	r25, Z
     c86:	28 2f       	mov	r18, r24
     c88:	39 2f       	mov	r19, r25
				list += 2;
     c8a:	fa 01       	movw	r30, r20
     c8c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     c8e:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     c90:	9b 2f       	mov	r25, r27
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	91 05       	cpc	r25, r1
     c9a:	19 f0       	breq	.+6      	; 0xca2 <__vector_11+0xc0>
     c9c:	10 f0       	brcs	.+4      	; 0xca2 <__vector_11+0xc0>
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	84 17       	cp	r24, r20
     ca4:	28 f4       	brcc	.+10     	; 0xcb0 <__vector_11+0xce>
     ca6:	48 2f       	mov	r20, r24
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <__vector_11+0xce>
     caa:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     cac:	a9 f6       	brne	.-86     	; 0xc58 <__vector_11+0x76>
     cae:	cd cf       	rjmp	.-102    	; 0xc4a <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     cb0:	c8 ee       	ldi	r28, 0xE8	; 232
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     cb4:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     cb6:	a1 ef       	ldi	r26, 0xF1	; 241
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     cba:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     cbc:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     cbe:	98 2f       	mov	r25, r24
     cc0:	95 70       	andi	r25, 0x05	; 5
     cc2:	e1 f3       	breq	.-8      	; 0xcbc <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
     cc4:	82 fd       	sbrc	r24, 2
     cc6:	00 c1       	rjmp	.+512    	; 0xec8 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     cc8:	64 2f       	mov	r22, r20
     cca:	41 31       	cpi	r20, 0x11	; 17
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <__vector_11+0xee>
     cce:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
     cd0:	66 23       	and	r22, r22
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <__vector_11+0xf4>
     cd4:	f6 c0       	rjmp	.+492    	; 0xec2 <__vector_11+0x2e0>
     cd6:	c9 01       	movw	r24, r18
     cd8:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
     cda:	fc 01       	movw	r30, r24
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	e4 91       	lpm	r30, Z
     ce0:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     ce2:	51 50       	subi	r21, 0x01	; 1
     ce4:	d1 f7       	brne	.-12     	; 0xcda <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
     ce6:	86 2f       	mov	r24, r22
     ce8:	81 50       	subi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	28 0f       	add	r18, r24
     cf0:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     cf2:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     cf4:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     cf6:	41 11       	cpse	r20, r1
     cf8:	e1 cf       	rjmp	.-62     	; 0xcbc <__vector_11+0xda>
     cfa:	60 31       	cpi	r22, 0x10	; 16
     cfc:	f9 f2       	breq	.-66     	; 0xcbc <__vector_11+0xda>
     cfe:	e4 c0       	rjmp	.+456    	; 0xec8 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     d00:	45 30       	cpi	r20, 0x05	; 5
     d02:	61 f4       	brne	.+24     	; 0xd1c <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d04:	8e ef       	ldi	r24, 0xFE	; 254
     d06:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     d0a:	e8 ee       	ldi	r30, 0xE8	; 232
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 ff       	sbrs	r24, 0
     d12:	fd cf       	rjmp	.-6      	; 0xd0e <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     d14:	20 68       	ori	r18, 0x80	; 128
     d16:	20 93 e3 00 	sts	0x00E3, r18
			return;
     d1a:	d6 c0       	rjmp	.+428    	; 0xec8 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     d1c:	49 30       	cpi	r20, 0x09	; 9
     d1e:	a1 f5       	brne	.+104    	; 0xd88 <__vector_11+0x1a6>
     d20:	71 11       	cpse	r23, r1
     d22:	5b c0       	rjmp	.+182    	; 0xdda <__vector_11+0x1f8>
			usb_configuration = wValue;
     d24:	20 93 59 01 	sts	0x0159, r18
			cdc_line_rtsdtr = 0;
     d28:	10 92 5a 01 	sts	0x015A, r1
			transmit_flush_timer = 0;
     d2c:	10 92 58 01 	sts	0x0158, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d30:	8e ef       	ldi	r24, 0xFE	; 254
     d32:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     d36:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     d38:	83 e2       	ldi	r24, 0x23	; 35
     d3a:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     d3c:	c9 ee       	ldi	r28, 0xE9	; 233
     d3e:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     d40:	ab ee       	ldi	r26, 0xEB	; 235
     d42:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     d44:	6c ee       	ldi	r22, 0xEC	; 236
     d46:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     d48:	4d ee       	ldi	r20, 0xED	; 237
     d4a:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     d4c:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
     d4e:	9c 01       	movw	r18, r24
     d50:	2f 5f       	subi	r18, 0xFF	; 255
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	fc 01       	movw	r30, r24
     d56:	04 91       	lpm	r16, Z
				UECONX = en;
     d58:	0c 93       	st	X, r16
				if (en) {
     d5a:	00 23       	and	r16, r16
     d5c:	59 f0       	breq	.+22     	; 0xd74 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
     d5e:	f9 01       	movw	r30, r18
     d60:	24 91       	lpm	r18, Z
     d62:	fb 01       	movw	r30, r22
     d64:	20 83       	st	Z, r18
     d66:	fc 01       	movw	r30, r24
     d68:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
     d6a:	03 96       	adiw	r24, 0x03	; 3
     d6c:	24 91       	lpm	r18, Z
     d6e:	fa 01       	movw	r30, r20
     d70:	20 83       	st	Z, r18
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     d74:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     d76:	1f 5f       	subi	r17, 0xFF	; 255
     d78:	15 30       	cpi	r17, 0x05	; 5
     d7a:	41 f7       	brne	.-48     	; 0xd4c <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     d7c:	ea ee       	ldi	r30, 0xEA	; 234
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8e e1       	ldi	r24, 0x1E	; 30
     d82:	80 83       	st	Z, r24
        		UERST = 0;
     d84:	10 82       	st	Z, r1
			return;
     d86:	a0 c0       	rjmp	.+320    	; 0xec8 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     d88:	48 30       	cpi	r20, 0x08	; 8
     d8a:	81 f4       	brne	.+32     	; 0xdac <__vector_11+0x1ca>
     d8c:	70 38       	cpi	r23, 0x80	; 128
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__vector_11+0x1b0>
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     d92:	e8 ee       	ldi	r30, 0xE8	; 232
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 ff       	sbrs	r24, 0
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     d9c:	80 91 59 01 	lds	r24, 0x0159
     da0:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     da4:	8e ef       	ldi	r24, 0xFE	; 254
     da6:	80 93 e8 00 	sts	0x00E8, r24
     daa:	8e c0       	rjmp	.+284    	; 0xec8 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     dac:	41 32       	cpi	r20, 0x21	; 33
     dae:	a9 f4       	brne	.+42     	; 0xdda <__vector_11+0x1f8>
     db0:	71 3a       	cpi	r23, 0xA1	; 161
     db2:	f1 f5       	brne	.+124    	; 0xe30 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     db4:	e8 ee       	ldi	r30, 0xE8	; 232
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 ff       	sbrs	r24, 0
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <__vector_11+0x1d6>
     dbe:	ec e0       	ldi	r30, 0x0C	; 12
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     dc2:	a1 ef       	ldi	r26, 0xF1	; 241
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	81 91       	ld	r24, Z+
     dc8:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     dca:	41 e0       	ldi	r20, 0x01	; 1
     dcc:	e3 31       	cpi	r30, 0x13	; 19
     dce:	f4 07       	cpc	r31, r20
     dd0:	d1 f7       	brne	.-12     	; 0xdc6 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     dd2:	8e ef       	ldi	r24, 0xFE	; 254
     dd4:	80 93 e8 00 	sts	0x00E8, r24
     dd8:	77 c0       	rjmp	.+238    	; 0xec8 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     dda:	40 32       	cpi	r20, 0x20	; 32
     ddc:	c9 f4       	brne	.+50     	; 0xe10 <__vector_11+0x22e>
     dde:	71 32       	cpi	r23, 0x21	; 33
     de0:	09 f0       	breq	.+2      	; 0xde4 <__vector_11+0x202>
     de2:	6b c0       	rjmp	.+214    	; 0xeba <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     de4:	e8 ee       	ldi	r30, 0xE8	; 232
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	82 ff       	sbrs	r24, 2
     dec:	fd cf       	rjmp	.-6      	; 0xde8 <__vector_11+0x206>
     dee:	ec e0       	ldi	r30, 0x0C	; 12
     df0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     df2:	a1 ef       	ldi	r26, 0xF1	; 241
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	8c 91       	ld	r24, X
     df8:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     dfa:	51 e0       	ldi	r21, 0x01	; 1
     dfc:	e3 31       	cpi	r30, 0x13	; 19
     dfe:	f5 07       	cpc	r31, r21
     e00:	d1 f7       	brne	.-12     	; 0xdf6 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     e02:	e8 ee       	ldi	r30, 0xE8	; 232
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b ef       	ldi	r24, 0xFB	; 251
     e08:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e0a:	8e ef       	ldi	r24, 0xFE	; 254
     e0c:	80 83       	st	Z, r24
     e0e:	5c c0       	rjmp	.+184    	; 0xec8 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     e10:	42 32       	cpi	r20, 0x22	; 34
     e12:	71 f4       	brne	.+28     	; 0xe30 <__vector_11+0x24e>
     e14:	71 32       	cpi	r23, 0x21	; 33
     e16:	09 f0       	breq	.+2      	; 0xe1a <__vector_11+0x238>
     e18:	50 c0       	rjmp	.+160    	; 0xeba <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
     e1a:	20 93 5a 01 	sts	0x015A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e1e:	e8 ee       	ldi	r30, 0xE8	; 232
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 ff       	sbrs	r24, 0
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e28:	8e ef       	ldi	r24, 0xFE	; 254
     e2a:	80 93 e8 00 	sts	0x00E8, r24
     e2e:	4c c0       	rjmp	.+152    	; 0xec8 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     e30:	41 11       	cpse	r20, r1
     e32:	1a c0       	rjmp	.+52     	; 0xe68 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e34:	e8 ee       	ldi	r30, 0xE8	; 232
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	20 81       	ld	r18, Z
     e3a:	20 ff       	sbrs	r18, 0
     e3c:	fd cf       	rjmp	.-6      	; 0xe38 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     e3e:	72 38       	cpi	r23, 0x82	; 130
     e40:	51 f4       	brne	.+20     	; 0xe56 <__vector_11+0x274>
				UENUM = wIndex;
     e42:	e9 ee       	ldi	r30, 0xE9	; 233
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
     e48:	80 91 eb 00 	lds	r24, 0x00EB
     e4c:	85 fb       	bst	r24, 5
     e4e:	88 27       	eor	r24, r24
     e50:	80 f9       	bld	r24, 0
				UENUM = 0;
     e52:	10 82       	st	Z, r1
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     e56:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     e58:	e1 ef       	ldi	r30, 0xF1	; 241
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 83       	st	Z, r24
			UEDATX = 0;
     e5e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e60:	8e ef       	ldi	r24, 0xFE	; 254
     e62:	80 93 e8 00 	sts	0x00E8, r24
     e66:	30 c0       	rjmp	.+96     	; 0xec8 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     e68:	41 30       	cpi	r20, 0x01	; 1
     e6a:	11 f0       	breq	.+4      	; 0xe70 <__vector_11+0x28e>
     e6c:	43 30       	cpi	r20, 0x03	; 3
     e6e:	29 f5       	brne	.+74     	; 0xeba <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
     e70:	72 30       	cpi	r23, 0x02	; 2
     e72:	19 f5       	brne	.+70     	; 0xeba <__vector_11+0x2d8>
     e74:	23 2b       	or	r18, r19
     e76:	09 f5       	brne	.+66     	; 0xeba <__vector_11+0x2d8>
			i = wIndex & 0x7F;
     e78:	8f 77       	andi	r24, 0x7F	; 127
     e7a:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
     e7c:	38 2f       	mov	r19, r24
     e7e:	31 50       	subi	r19, 0x01	; 1
     e80:	34 30       	cpi	r19, 0x04	; 4
     e82:	d8 f4       	brcc	.+54     	; 0xeba <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e84:	3e ef       	ldi	r19, 0xFE	; 254
     e86:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     e8a:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
     e8e:	43 30       	cpi	r20, 0x03	; 3
     e90:	21 f4       	brne	.+8      	; 0xe9a <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     e92:	81 e2       	ldi	r24, 0x21	; 33
     e94:	80 93 eb 00 	sts	0x00EB, r24
     e98:	17 c0       	rjmp	.+46     	; 0xec8 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     e9a:	99 e1       	ldi	r25, 0x19	; 25
     e9c:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	d9 01       	movw	r26, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <__vector_11+0x2ca>
     ea8:	aa 0f       	add	r26, r26
     eaa:	bb 1f       	adc	r27, r27
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <__vector_11+0x2c6>
     eb0:	ea ee       	ldi	r30, 0xEA	; 234
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	a0 83       	st	Z, r26
					UERST = 0;
     eb6:	10 82       	st	Z, r1
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     eba:	81 e2       	ldi	r24, 0x21	; 33
     ebc:	80 93 eb 00 	sts	0x00EB, r24
     ec0:	03 c0       	rjmp	.+6      	; 0xec8 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ec2:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     ec4:	41 11       	cpse	r20, r1
     ec6:	fa ce       	rjmp	.-524    	; 0xcbc <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     ef8:	ec 01       	movw	r28, r24
     efa:	21 96       	adiw	r28, 0x01	; 1
     efc:	fc 01       	movw	r30, r24
     efe:	14 91       	lpm	r17, Z
		if (!c) break;
     f00:	11 23       	and	r17, r17
     f02:	69 f0       	breq	.+26     	; 0xf1e <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
     f04:	1a 30       	cpi	r17, 0x0A	; 10
     f06:	19 f4       	brne	.+6      	; 0xf0e <print_P+0x1c>
     f08:	8d e0       	ldi	r24, 0x0D	; 13
     f0a:	0e 94 57 05 	call	0xaae	; 0xaae <m_usb_tx_char>
		usb_tx_char(c);
     f0e:	81 2f       	mov	r24, r17
     f10:	0e 94 57 05 	call	0xaae	; 0xaae <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     f14:	fe 01       	movw	r30, r28
     f16:	21 96       	adiw	r28, 0x01	; 1
     f18:	14 91       	lpm	r17, Z
		if (!c) break;
     f1a:	11 11       	cpse	r17, r1
     f1c:	f3 cf       	rjmp	.-26     	; 0xf04 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	08 95       	ret

00000f26 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	27 97       	sbiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     f42:	8e 01       	movw	r16, r28
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	27 e0       	ldi	r18, 0x07	; 7
     f4a:	f8 01       	movw	r30, r16
     f4c:	11 92       	st	Z+, r1
     f4e:	2a 95       	dec	r18
     f50:	e9 f7       	brne	.-6      	; 0xf4c <m_usb_tx_int+0x26>
	itoa(i,string,10);
     f52:	4a e0       	ldi	r20, 0x0A	; 10
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	b8 01       	movw	r22, r16
     f58:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
     f5c:	7e 01       	movw	r14, r28
     f5e:	f8 e0       	ldi	r31, 0x08	; 8
     f60:	ef 0e       	add	r14, r31
     f62:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     f64:	f8 01       	movw	r30, r16
     f66:	81 91       	ld	r24, Z+
     f68:	8f 01       	movw	r16, r30
     f6a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     f6c:	0e 94 57 05 	call	0xaae	; 0xaae <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     f70:	0e 15       	cp	r16, r14
     f72:	1f 05       	cpc	r17, r15
     f74:	b9 f7       	brne	.-18     	; 0xf64 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     f76:	27 96       	adiw	r28, 0x07	; 7
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	08 95       	ret

00000f90 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     f94:	ec eb       	ldi	r30, 0xBC	; 188
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	34 f0       	brlt	.+12     	; 0xfaa <twi_wait+0x1a>
     f9e:	2f 5f       	subi	r18, 0xFF	; 255
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	29 3e       	cpi	r18, 0xE9	; 233
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	38 07       	cpc	r19, r24
     fa8:	b9 f7       	brne	.-18     	; 0xf98 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	28 3e       	cpi	r18, 0xE8	; 232
     fae:	33 40       	sbci	r19, 0x03	; 3
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <twi_wait+0x24>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     fb4:	08 95       	ret

00000fb6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     fb6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     fba:	84 e8       	ldi	r24, 0x84	; 132
     fbc:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
     fc0:	0e 94 c8 07 	call	0xf90	; 0xf90 <twi_wait>
     fc4:	88 23       	and	r24, r24
     fc6:	21 f0       	breq	.+8      	; 0xfd0 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     fc8:	80 91 b9 00 	lds	r24, 0x00B9
     fcc:	88 7f       	andi	r24, 0xF8	; 248
     fce:	08 95       	ret
	} else {
		return 0;					// comm failure
     fd0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     fd2:	08 95       	ret

00000fd4 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     fd4:	cf 93       	push	r28
     fd6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     fd8:	94 ea       	ldi	r25, 0xA4	; 164
     fda:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
     fde:	0e 94 c8 07 	call	0xf90	; 0xf90 <twi_wait>
     fe2:	88 23       	and	r24, r24
     fe4:	61 f0       	breq	.+24     	; 0xffe <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     fe6:	8c 2f       	mov	r24, r28
     fe8:	88 0f       	add	r24, r24
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     ff0:	88 34       	cpi	r24, 0x48	; 72
     ff2:	39 f4       	brne	.+14     	; 0x1002 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     ff4:	84 e9       	ldi	r24, 0x94	; 148
     ff6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1002:	81 e0       	ldi	r24, 0x01	; 1
}	
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1008:	cf 93       	push	r28
    100a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    100c:	94 ea       	ldi	r25, 0xA4	; 164
    100e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1012:	0e 94 c8 07 	call	0xf90	; 0xf90 <twi_wait>
    1016:	88 23       	and	r24, r24
    1018:	59 f0       	breq	.+22     	; 0x1030 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    101a:	8c 2f       	mov	r24, r28
    101c:	88 0f       	add	r24, r24
    101e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1022:	80 32       	cpi	r24, 0x20	; 32
    1024:	39 f4       	brne	.+14     	; 0x1034 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1026:	84 e9       	ldi	r24, 0x94	; 148
    1028:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1034:	81 e0       	ldi	r24, 0x01	; 1
}	
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    103a:	84 e9       	ldi	r24, 0x94	; 148
    103c:	80 93 bc 00 	sts	0x00BC, r24
    1040:	08 95       	ret

00001042 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	60 97       	sbiw	r28, 0x10	; 16
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	e8 2e       	mov	r14, r24
    1060:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1062:	fe 01       	movw	r30, r28
    1064:	31 96       	adiw	r30, 0x01	; 1
    1066:	80 e1       	ldi	r24, 0x10	; 16
    1068:	df 01       	movw	r26, r30
    106a:	1d 92       	st	X+, r1
    106c:	8a 95       	dec	r24
    106e:	e9 f7       	brne	.-6      	; 0x106a <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1070:	88 e5       	ldi	r24, 0x58	; 88
    1072:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    1076:	88 23       	and	r24, r24
    1078:	09 f4       	brne	.+2      	; 0x107c <m_wii_read+0x3a>
    107a:	66 c0       	rjmp	.+204    	; 0x1148 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    107c:	86 e3       	ldi	r24, 0x36	; 54
    107e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    1082:	88 23       	and	r24, r24
    1084:	09 f4       	brne	.+2      	; 0x1088 <m_wii_read+0x46>
    1086:	62 c0       	rjmp	.+196    	; 0x114c <m_wii_read+0x10a>
	end();
    1088:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108c:	b8 e0       	ldi	r27, 0x08	; 8
    108e:	ba 95       	dec	r27
    1090:	f1 f7       	brne	.-4      	; 0x108e <m_wii_read+0x4c>
    1092:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1094:	88 e5       	ldi	r24, 0x58	; 88
    1096:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <start_read>
    109a:	88 23       	and	r24, r24
    109c:	09 f4       	brne	.+2      	; 0x10a0 <m_wii_read+0x5e>
    109e:	58 c0       	rjmp	.+176    	; 0x1150 <m_wii_read+0x10e>
    10a0:	ae 01       	movw	r20, r28
    10a2:	4f 5f       	subi	r20, 0xFF	; 255
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    10a6:	8e 01       	movw	r16, r28
    10a8:	00 5f       	subi	r16, 0xF0	; 240
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    10ac:	ec eb       	ldi	r30, 0xBC	; 188
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    10b2:	2b eb       	ldi	r18, 0xBB	; 187
    10b4:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    10b6:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	ec f7       	brge	.-6      	; 0x10b8 <m_wii_read+0x76>
		temp[i] = TWDR;
    10be:	d9 01       	movw	r26, r18
    10c0:	8c 91       	ld	r24, X
    10c2:	da 01       	movw	r26, r20
    10c4:	8d 93       	st	X+, r24
    10c6:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    10c8:	a0 17       	cp	r26, r16
    10ca:	b1 07       	cpc	r27, r17
    10cc:	a1 f7       	brne	.-24     	; 0x10b6 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    10ce:	84 e8       	ldi	r24, 0x84	; 132
    10d0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    10d4:	ec eb       	ldi	r30, 0xBC	; 188
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	88 23       	and	r24, r24
    10dc:	ec f7       	brge	.-6      	; 0x10d8 <m_wii_read+0x96>
	temp[15] = TWDR;
    10de:	80 91 bb 00 	lds	r24, 0x00BB
    10e2:	88 8b       	std	Y+16, r24	; 0x10
	end();
    10e4:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
    10e8:	de 01       	movw	r26, r28
    10ea:	14 96       	adiw	r26, 0x04	; 4
    10ec:	6e 2d       	mov	r22, r14
    10ee:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    10f0:	4c 91       	ld	r20, X
    10f2:	24 2f       	mov	r18, r20
    10f4:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    10f6:	cd 01       	movw	r24, r26
    10f8:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	f0 e1       	ldi	r31, 0x10	; 16
    1102:	2f 9f       	mul	r18, r31
    1104:	80 0d       	add	r24, r0
    1106:	91 1d       	adc	r25, r1
    1108:	11 24       	eor	r1, r1
    110a:	fb 01       	movw	r30, r22
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1110:	84 2f       	mov	r24, r20
    1112:	80 7c       	andi	r24, 0xC0	; 192
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    111e:	9d 01       	movw	r18, r26
    1120:	21 50       	subi	r18, 0x01	; 1
    1122:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1124:	f9 01       	movw	r30, r18
    1126:	20 81       	ld	r18, Z
    1128:	82 0f       	add	r24, r18
    112a:	91 1d       	adc	r25, r1
    112c:	fb 01       	movw	r30, r22
    112e:	93 83       	std	Z+3, r25	; 0x03
    1130:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1132:	4f 70       	andi	r20, 0x0F	; 15
    1134:	44 83       	std	Z+4, r20	; 0x04
    1136:	15 82       	std	Z+5, r1	; 0x05
    1138:	13 96       	adiw	r26, 0x03	; 3
    113a:	6a 5f       	subi	r22, 0xFA	; 250
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    113e:	0a 17       	cp	r16, r26
    1140:	1b 07       	cpc	r17, r27
    1142:	b1 f6       	brne	.-84     	; 0x10f0 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1150:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1152:	60 96       	adiw	r28, 0x10	; 16
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    116c:	0e 94 3c 01 	call	0x278	; 0x278 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1170:	88 e5       	ldi	r24, 0x58	; 88
    1172:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    1176:	88 23       	and	r24, r24
    1178:	09 f4       	brne	.+2      	; 0x117c <m_wii_open+0x10>
    117a:	c7 c0       	rjmp	.+398    	; 0x130a <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    117c:	80 e3       	ldi	r24, 0x30	; 48
    117e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <m_wii_open+0x1c>
    1186:	c3 c0       	rjmp	.+390    	; 0x130e <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    118e:	88 23       	and	r24, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <m_wii_open+0x28>
    1192:	bf c0       	rjmp	.+382    	; 0x1312 <m_wii_open+0x1a6>
	end();
    1194:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1198:	83 ec       	ldi	r24, 0xC3	; 195
    119a:	99 e0       	ldi	r25, 0x09	; 9
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <m_wii_open+0x30>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <m_wii_open+0x36>
    11a2:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    11a4:	88 e5       	ldi	r24, 0x58	; 88
    11a6:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    11aa:	88 23       	and	r24, r24
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <m_wii_open+0x44>
    11ae:	b3 c0       	rjmp	.+358    	; 0x1316 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <m_wii_open+0x50>
    11ba:	af c0       	rjmp	.+350    	; 0x131a <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11c2:	88 23       	and	r24, r24
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <m_wii_open+0x5c>
    11c6:	ab c0       	rjmp	.+342    	; 0x131e <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11ce:	88 23       	and	r24, r24
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <m_wii_open+0x68>
    11d2:	a7 c0       	rjmp	.+334    	; 0x1322 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <m_wii_open+0x74>
    11de:	a3 c0       	rjmp	.+326    	; 0x1326 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <m_wii_open+0x80>
    11ea:	9f c0       	rjmp	.+318    	; 0x132a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11f2:	88 23       	and	r24, r24
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <m_wii_open+0x8c>
    11f6:	9b c0       	rjmp	.+310    	; 0x132e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    11fe:	88 23       	and	r24, r24
    1200:	09 f4       	brne	.+2      	; 0x1204 <m_wii_open+0x98>
    1202:	97 c0       	rjmp	.+302    	; 0x1332 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1204:	80 e9       	ldi	r24, 0x90	; 144
    1206:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <m_wii_open+0xa4>
    120e:	93 c0       	rjmp	.+294    	; 0x1336 <m_wii_open+0x1ca>
	end();
    1210:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
    1214:	83 ec       	ldi	r24, 0xC3	; 195
    1216:	99 e0       	ldi	r25, 0x09	; 9
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <m_wii_open+0xac>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <m_wii_open+0xb2>
    121e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1220:	88 e5       	ldi	r24, 0x58	; 88
    1222:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <m_wii_open+0xc0>
    122a:	87 c0       	rjmp	.+270    	; 0x133a <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    122c:	87 e0       	ldi	r24, 0x07	; 7
    122e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    1232:	88 23       	and	r24, r24
    1234:	09 f4       	brne	.+2      	; 0x1238 <m_wii_open+0xcc>
    1236:	83 c0       	rjmp	.+262    	; 0x133e <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <m_wii_open+0xd8>
    1242:	7f c0       	rjmp	.+254    	; 0x1342 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1244:	81 e4       	ldi	r24, 0x41	; 65
    1246:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    124a:	88 23       	and	r24, r24
    124c:	09 f4       	brne	.+2      	; 0x1250 <m_wii_open+0xe4>
    124e:	7b c0       	rjmp	.+246    	; 0x1346 <m_wii_open+0x1da>
	end();
    1250:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
    1254:	83 ec       	ldi	r24, 0xC3	; 195
    1256:	99 e0       	ldi	r25, 0x09	; 9
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <m_wii_open+0xec>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <m_wii_open+0xf2>
    125e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1260:	88 e5       	ldi	r24, 0x58	; 88
    1262:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <m_wii_open+0x100>
    126a:	6f c0       	rjmp	.+222    	; 0x134a <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    126c:	8a e1       	ldi	r24, 0x1A	; 26
    126e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <m_wii_open+0x10c>
    1276:	6b c0       	rjmp	.+214    	; 0x134e <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1278:	80 e4       	ldi	r24, 0x40	; 64
    127a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <m_wii_open+0x118>
    1282:	67 c0       	rjmp	.+206    	; 0x1352 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <m_wii_open+0x124>
    128e:	63 c0       	rjmp	.+198    	; 0x1356 <m_wii_open+0x1ea>
	end();
    1290:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
    1294:	83 ec       	ldi	r24, 0xC3	; 195
    1296:	99 e0       	ldi	r25, 0x09	; 9
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <m_wii_open+0x12c>
    129c:	00 c0       	rjmp	.+0      	; 0x129e <m_wii_open+0x132>
    129e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    12a0:	88 e5       	ldi	r24, 0x58	; 88
    12a2:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <m_wii_open+0x140>
    12aa:	57 c0       	rjmp	.+174    	; 0x135a <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    12ac:	83 e3       	ldi	r24, 0x33	; 51
    12ae:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    12b2:	88 23       	and	r24, r24
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <m_wii_open+0x14c>
    12b6:	53 c0       	rjmp	.+166    	; 0x135e <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <m_wii_open+0x158>
    12c2:	4f c0       	rjmp	.+158    	; 0x1362 <m_wii_open+0x1f6>
	end();
    12c4:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
    12c8:	83 ec       	ldi	r24, 0xC3	; 195
    12ca:	99 e0       	ldi	r25, 0x09	; 9
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <m_wii_open+0x160>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <m_wii_open+0x166>
    12d2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    12d4:	88 e5       	ldi	r24, 0x58	; 88
    12d6:	0e 94 04 08 	call	0x1008	; 0x1008 <start_write>
    12da:	88 23       	and	r24, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <m_wii_open+0x174>
    12de:	43 c0       	rjmp	.+134    	; 0x1366 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    12e0:	80 e3       	ldi	r24, 0x30	; 48
    12e2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <m_wii_open+0x180>
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    12ec:	88 e0       	ldi	r24, 0x08	; 8
    12ee:	0e 94 db 07 	call	0xfb6	; 0xfb6 <send_byte>
    12f2:	88 23       	and	r24, r24
    12f4:	e1 f1       	breq	.+120    	; 0x136e <m_wii_open+0x202>
	end();
    12f6:	0e 94 1d 08 	call	0x103a	; 0x103a <end>
    12fa:	83 ec       	ldi	r24, 0xC3	; 195
    12fc:	99 e0       	ldi	r25, 0x09	; 9
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <m_wii_open+0x192>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <m_wii_open+0x198>
    1304:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    136e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1370:	08 95       	ret

00001372 <__subsf3>:
    1372:	50 58       	subi	r21, 0x80	; 128

00001374 <__addsf3>:
    1374:	bb 27       	eor	r27, r27
    1376:	aa 27       	eor	r26, r26
    1378:	0e d0       	rcall	.+28     	; 0x1396 <__addsf3x>
    137a:	ff c1       	rjmp	.+1022   	; 0x177a <__fp_round>
    137c:	c8 d1       	rcall	.+912    	; 0x170e <__fp_pscA>
    137e:	30 f0       	brcs	.+12     	; 0x138c <__addsf3+0x18>
    1380:	cd d1       	rcall	.+922    	; 0x171c <__fp_pscB>
    1382:	20 f0       	brcs	.+8      	; 0x138c <__addsf3+0x18>
    1384:	31 f4       	brne	.+12     	; 0x1392 <__addsf3+0x1e>
    1386:	9f 3f       	cpi	r25, 0xFF	; 255
    1388:	11 f4       	brne	.+4      	; 0x138e <__addsf3+0x1a>
    138a:	1e f4       	brtc	.+6      	; 0x1392 <__addsf3+0x1e>
    138c:	98 c1       	rjmp	.+816    	; 0x16be <__fp_nan>
    138e:	0e f4       	brtc	.+2      	; 0x1392 <__addsf3+0x1e>
    1390:	e0 95       	com	r30
    1392:	e7 fb       	bst	r30, 7
    1394:	8e c1       	rjmp	.+796    	; 0x16b2 <__fp_inf>

00001396 <__addsf3x>:
    1396:	e9 2f       	mov	r30, r25
    1398:	12 d2       	rcall	.+1060   	; 0x17be <__fp_split3>
    139a:	80 f3       	brcs	.-32     	; 0x137c <__addsf3+0x8>
    139c:	ba 17       	cp	r27, r26
    139e:	62 07       	cpc	r22, r18
    13a0:	73 07       	cpc	r23, r19
    13a2:	84 07       	cpc	r24, r20
    13a4:	95 07       	cpc	r25, r21
    13a6:	18 f0       	brcs	.+6      	; 0x13ae <__addsf3x+0x18>
    13a8:	71 f4       	brne	.+28     	; 0x13c6 <__addsf3x+0x30>
    13aa:	9e f5       	brtc	.+102    	; 0x1412 <__addsf3x+0x7c>
    13ac:	2a c2       	rjmp	.+1108   	; 0x1802 <__fp_zero>
    13ae:	0e f4       	brtc	.+2      	; 0x13b2 <__addsf3x+0x1c>
    13b0:	e0 95       	com	r30
    13b2:	0b 2e       	mov	r0, r27
    13b4:	ba 2f       	mov	r27, r26
    13b6:	a0 2d       	mov	r26, r0
    13b8:	0b 01       	movw	r0, r22
    13ba:	b9 01       	movw	r22, r18
    13bc:	90 01       	movw	r18, r0
    13be:	0c 01       	movw	r0, r24
    13c0:	ca 01       	movw	r24, r20
    13c2:	a0 01       	movw	r20, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	ff 27       	eor	r31, r31
    13c8:	59 1b       	sub	r21, r25
    13ca:	99 f0       	breq	.+38     	; 0x13f2 <__addsf3x+0x5c>
    13cc:	59 3f       	cpi	r21, 0xF9	; 249
    13ce:	50 f4       	brcc	.+20     	; 0x13e4 <__addsf3x+0x4e>
    13d0:	50 3e       	cpi	r21, 0xE0	; 224
    13d2:	68 f1       	brcs	.+90     	; 0x142e <__addsf3x+0x98>
    13d4:	1a 16       	cp	r1, r26
    13d6:	f0 40       	sbci	r31, 0x00	; 0
    13d8:	a2 2f       	mov	r26, r18
    13da:	23 2f       	mov	r18, r19
    13dc:	34 2f       	mov	r19, r20
    13de:	44 27       	eor	r20, r20
    13e0:	58 5f       	subi	r21, 0xF8	; 248
    13e2:	f3 cf       	rjmp	.-26     	; 0x13ca <__addsf3x+0x34>
    13e4:	46 95       	lsr	r20
    13e6:	37 95       	ror	r19
    13e8:	27 95       	ror	r18
    13ea:	a7 95       	ror	r26
    13ec:	f0 40       	sbci	r31, 0x00	; 0
    13ee:	53 95       	inc	r21
    13f0:	c9 f7       	brne	.-14     	; 0x13e4 <__addsf3x+0x4e>
    13f2:	7e f4       	brtc	.+30     	; 0x1412 <__addsf3x+0x7c>
    13f4:	1f 16       	cp	r1, r31
    13f6:	ba 0b       	sbc	r27, r26
    13f8:	62 0b       	sbc	r22, r18
    13fa:	73 0b       	sbc	r23, r19
    13fc:	84 0b       	sbc	r24, r20
    13fe:	ba f0       	brmi	.+46     	; 0x142e <__addsf3x+0x98>
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	a1 f0       	breq	.+40     	; 0x142c <__addsf3x+0x96>
    1404:	ff 0f       	add	r31, r31
    1406:	bb 1f       	adc	r27, r27
    1408:	66 1f       	adc	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	c2 f7       	brpl	.-16     	; 0x1400 <__addsf3x+0x6a>
    1410:	0e c0       	rjmp	.+28     	; 0x142e <__addsf3x+0x98>
    1412:	ba 0f       	add	r27, r26
    1414:	62 1f       	adc	r22, r18
    1416:	73 1f       	adc	r23, r19
    1418:	84 1f       	adc	r24, r20
    141a:	48 f4       	brcc	.+18     	; 0x142e <__addsf3x+0x98>
    141c:	87 95       	ror	r24
    141e:	77 95       	ror	r23
    1420:	67 95       	ror	r22
    1422:	b7 95       	ror	r27
    1424:	f7 95       	ror	r31
    1426:	9e 3f       	cpi	r25, 0xFE	; 254
    1428:	08 f0       	brcs	.+2      	; 0x142c <__addsf3x+0x96>
    142a:	b3 cf       	rjmp	.-154    	; 0x1392 <__addsf3+0x1e>
    142c:	93 95       	inc	r25
    142e:	88 0f       	add	r24, r24
    1430:	08 f0       	brcs	.+2      	; 0x1434 <__addsf3x+0x9e>
    1432:	99 27       	eor	r25, r25
    1434:	ee 0f       	add	r30, r30
    1436:	97 95       	ror	r25
    1438:	87 95       	ror	r24
    143a:	08 95       	ret
    143c:	68 d1       	rcall	.+720    	; 0x170e <__fp_pscA>
    143e:	58 f0       	brcs	.+22     	; 0x1456 <__addsf3x+0xc0>
    1440:	80 e8       	ldi	r24, 0x80	; 128
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	09 f4       	brne	.+2      	; 0x1448 <__addsf3x+0xb2>
    1446:	9e ef       	ldi	r25, 0xFE	; 254
    1448:	69 d1       	rcall	.+722    	; 0x171c <__fp_pscB>
    144a:	28 f0       	brcs	.+10     	; 0x1456 <__addsf3x+0xc0>
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	51 e0       	ldi	r21, 0x01	; 1
    1450:	59 f4       	brne	.+22     	; 0x1468 <atan2+0xe>
    1452:	5e ef       	ldi	r21, 0xFE	; 254
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <atan2+0xe>
    1456:	33 c1       	rjmp	.+614    	; 0x16be <__fp_nan>
    1458:	d4 c1       	rjmp	.+936    	; 0x1802 <__fp_zero>

0000145a <atan2>:
    145a:	e9 2f       	mov	r30, r25
    145c:	e0 78       	andi	r30, 0x80	; 128
    145e:	af d1       	rcall	.+862    	; 0x17be <__fp_split3>
    1460:	68 f3       	brcs	.-38     	; 0x143c <__addsf3x+0xa6>
    1462:	09 2e       	mov	r0, r25
    1464:	05 2a       	or	r0, r21
    1466:	c1 f3       	breq	.-16     	; 0x1458 <__addsf3x+0xc2>
    1468:	26 17       	cp	r18, r22
    146a:	37 07       	cpc	r19, r23
    146c:	48 07       	cpc	r20, r24
    146e:	59 07       	cpc	r21, r25
    1470:	38 f0       	brcs	.+14     	; 0x1480 <atan2+0x26>
    1472:	0e 2e       	mov	r0, r30
    1474:	07 f8       	bld	r0, 7
    1476:	e0 25       	eor	r30, r0
    1478:	69 f0       	breq	.+26     	; 0x1494 <atan2+0x3a>
    147a:	e0 25       	eor	r30, r0
    147c:	e0 64       	ori	r30, 0x40	; 64
    147e:	0a c0       	rjmp	.+20     	; 0x1494 <atan2+0x3a>
    1480:	ef 63       	ori	r30, 0x3F	; 63
    1482:	07 f8       	bld	r0, 7
    1484:	00 94       	com	r0
    1486:	07 fa       	bst	r0, 7
    1488:	db 01       	movw	r26, r22
    148a:	b9 01       	movw	r22, r18
    148c:	9d 01       	movw	r18, r26
    148e:	dc 01       	movw	r26, r24
    1490:	ca 01       	movw	r24, r20
    1492:	ad 01       	movw	r20, r26
    1494:	ef 93       	push	r30
    1496:	46 d0       	rcall	.+140    	; 0x1524 <__divsf3_pse>
    1498:	70 d1       	rcall	.+736    	; 0x177a <__fp_round>
    149a:	0a d0       	rcall	.+20     	; 0x14b0 <atan>
    149c:	5f 91       	pop	r21
    149e:	55 23       	and	r21, r21
    14a0:	31 f0       	breq	.+12     	; 0x14ae <atan2+0x54>
    14a2:	2b ed       	ldi	r18, 0xDB	; 219
    14a4:	3f e0       	ldi	r19, 0x0F	; 15
    14a6:	49 e4       	ldi	r20, 0x49	; 73
    14a8:	50 fd       	sbrc	r21, 0
    14aa:	49 ec       	ldi	r20, 0xC9	; 201
    14ac:	63 cf       	rjmp	.-314    	; 0x1374 <__addsf3>
    14ae:	08 95       	ret

000014b0 <atan>:
    14b0:	df 93       	push	r29
    14b2:	dd 27       	eor	r29, r29
    14b4:	b9 2f       	mov	r27, r25
    14b6:	bf 77       	andi	r27, 0x7F	; 127
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	16 16       	cp	r1, r22
    14be:	17 06       	cpc	r1, r23
    14c0:	48 07       	cpc	r20, r24
    14c2:	5b 07       	cpc	r21, r27
    14c4:	10 f4       	brcc	.+4      	; 0x14ca <atan+0x1a>
    14c6:	d9 2f       	mov	r29, r25
    14c8:	a7 d1       	rcall	.+846    	; 0x1818 <inverse>
    14ca:	9f 93       	push	r25
    14cc:	8f 93       	push	r24
    14ce:	7f 93       	push	r23
    14d0:	6f 93       	push	r22
    14d2:	54 d2       	rcall	.+1192   	; 0x197c <square>
    14d4:	ec ea       	ldi	r30, 0xAC	; 172
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	f5 d0       	rcall	.+490    	; 0x16c4 <__fp_powser>
    14da:	4f d1       	rcall	.+670    	; 0x177a <__fp_round>
    14dc:	2f 91       	pop	r18
    14de:	3f 91       	pop	r19
    14e0:	4f 91       	pop	r20
    14e2:	5f 91       	pop	r21
    14e4:	ac d1       	rcall	.+856    	; 0x183e <__mulsf3x>
    14e6:	dd 23       	and	r29, r29
    14e8:	49 f0       	breq	.+18     	; 0x14fc <atan+0x4c>
    14ea:	90 58       	subi	r25, 0x80	; 128
    14ec:	a2 ea       	ldi	r26, 0xA2	; 162
    14ee:	2a ed       	ldi	r18, 0xDA	; 218
    14f0:	3f e0       	ldi	r19, 0x0F	; 15
    14f2:	49 ec       	ldi	r20, 0xC9	; 201
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	d0 78       	andi	r29, 0x80	; 128
    14f8:	5d 27       	eor	r21, r29
    14fa:	4d df       	rcall	.-358    	; 0x1396 <__addsf3x>
    14fc:	df 91       	pop	r29
    14fe:	3d c1       	rjmp	.+634    	; 0x177a <__fp_round>

00001500 <cos>:
    1500:	15 d1       	rcall	.+554    	; 0x172c <__fp_rempio2>
    1502:	e3 95       	inc	r30
    1504:	4b c1       	rjmp	.+662    	; 0x179c <__fp_sinus>

00001506 <__divsf3>:
    1506:	0c d0       	rcall	.+24     	; 0x1520 <__divsf3x>
    1508:	38 c1       	rjmp	.+624    	; 0x177a <__fp_round>
    150a:	08 d1       	rcall	.+528    	; 0x171c <__fp_pscB>
    150c:	40 f0       	brcs	.+16     	; 0x151e <__divsf3+0x18>
    150e:	ff d0       	rcall	.+510    	; 0x170e <__fp_pscA>
    1510:	30 f0       	brcs	.+12     	; 0x151e <__divsf3+0x18>
    1512:	21 f4       	brne	.+8      	; 0x151c <__divsf3+0x16>
    1514:	5f 3f       	cpi	r21, 0xFF	; 255
    1516:	19 f0       	breq	.+6      	; 0x151e <__divsf3+0x18>
    1518:	cc c0       	rjmp	.+408    	; 0x16b2 <__fp_inf>
    151a:	51 11       	cpse	r21, r1
    151c:	73 c1       	rjmp	.+742    	; 0x1804 <__fp_szero>
    151e:	cf c0       	rjmp	.+414    	; 0x16be <__fp_nan>

00001520 <__divsf3x>:
    1520:	4e d1       	rcall	.+668    	; 0x17be <__fp_split3>
    1522:	98 f3       	brcs	.-26     	; 0x150a <__divsf3+0x4>

00001524 <__divsf3_pse>:
    1524:	99 23       	and	r25, r25
    1526:	c9 f3       	breq	.-14     	; 0x151a <__divsf3+0x14>
    1528:	55 23       	and	r21, r21
    152a:	b1 f3       	breq	.-20     	; 0x1518 <__divsf3+0x12>
    152c:	95 1b       	sub	r25, r21
    152e:	55 0b       	sbc	r21, r21
    1530:	bb 27       	eor	r27, r27
    1532:	aa 27       	eor	r26, r26
    1534:	62 17       	cp	r22, r18
    1536:	73 07       	cpc	r23, r19
    1538:	84 07       	cpc	r24, r20
    153a:	38 f0       	brcs	.+14     	; 0x154a <__divsf3_pse+0x26>
    153c:	9f 5f       	subi	r25, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	44 1f       	adc	r20, r20
    1546:	aa 1f       	adc	r26, r26
    1548:	a9 f3       	breq	.-22     	; 0x1534 <__divsf3_pse+0x10>
    154a:	33 d0       	rcall	.+102    	; 0x15b2 <__divsf3_pse+0x8e>
    154c:	0e 2e       	mov	r0, r30
    154e:	3a f0       	brmi	.+14     	; 0x155e <__divsf3_pse+0x3a>
    1550:	e0 e8       	ldi	r30, 0x80	; 128
    1552:	30 d0       	rcall	.+96     	; 0x15b4 <__divsf3_pse+0x90>
    1554:	91 50       	subi	r25, 0x01	; 1
    1556:	50 40       	sbci	r21, 0x00	; 0
    1558:	e6 95       	lsr	r30
    155a:	00 1c       	adc	r0, r0
    155c:	ca f7       	brpl	.-14     	; 0x1550 <__divsf3_pse+0x2c>
    155e:	29 d0       	rcall	.+82     	; 0x15b2 <__divsf3_pse+0x8e>
    1560:	fe 2f       	mov	r31, r30
    1562:	27 d0       	rcall	.+78     	; 0x15b2 <__divsf3_pse+0x8e>
    1564:	66 0f       	add	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	bb 1f       	adc	r27, r27
    156c:	26 17       	cp	r18, r22
    156e:	37 07       	cpc	r19, r23
    1570:	48 07       	cpc	r20, r24
    1572:	ab 07       	cpc	r26, r27
    1574:	b0 e8       	ldi	r27, 0x80	; 128
    1576:	09 f0       	breq	.+2      	; 0x157a <__divsf3_pse+0x56>
    1578:	bb 0b       	sbc	r27, r27
    157a:	80 2d       	mov	r24, r0
    157c:	bf 01       	movw	r22, r30
    157e:	ff 27       	eor	r31, r31
    1580:	93 58       	subi	r25, 0x83	; 131
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	2a f0       	brmi	.+10     	; 0x1590 <__divsf3_pse+0x6c>
    1586:	9e 3f       	cpi	r25, 0xFE	; 254
    1588:	51 05       	cpc	r21, r1
    158a:	68 f0       	brcs	.+26     	; 0x15a6 <__divsf3_pse+0x82>
    158c:	92 c0       	rjmp	.+292    	; 0x16b2 <__fp_inf>
    158e:	3a c1       	rjmp	.+628    	; 0x1804 <__fp_szero>
    1590:	5f 3f       	cpi	r21, 0xFF	; 255
    1592:	ec f3       	brlt	.-6      	; 0x158e <__divsf3_pse+0x6a>
    1594:	98 3e       	cpi	r25, 0xE8	; 232
    1596:	dc f3       	brlt	.-10     	; 0x158e <__divsf3_pse+0x6a>
    1598:	86 95       	lsr	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b7 95       	ror	r27
    15a0:	f7 95       	ror	r31
    15a2:	9f 5f       	subi	r25, 0xFF	; 255
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <__divsf3_pse+0x74>
    15a6:	88 0f       	add	r24, r24
    15a8:	91 1d       	adc	r25, r1
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	97 f9       	bld	r25, 7
    15b0:	08 95       	ret
    15b2:	e1 e0       	ldi	r30, 0x01	; 1
    15b4:	66 0f       	add	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	88 1f       	adc	r24, r24
    15ba:	bb 1f       	adc	r27, r27
    15bc:	62 17       	cp	r22, r18
    15be:	73 07       	cpc	r23, r19
    15c0:	84 07       	cpc	r24, r20
    15c2:	ba 07       	cpc	r27, r26
    15c4:	20 f0       	brcs	.+8      	; 0x15ce <__divsf3_pse+0xaa>
    15c6:	62 1b       	sub	r22, r18
    15c8:	73 0b       	sbc	r23, r19
    15ca:	84 0b       	sbc	r24, r20
    15cc:	ba 0b       	sbc	r27, r26
    15ce:	ee 1f       	adc	r30, r30
    15d0:	88 f7       	brcc	.-30     	; 0x15b4 <__divsf3_pse+0x90>
    15d2:	e0 95       	com	r30
    15d4:	08 95       	ret

000015d6 <__fixsfsi>:
    15d6:	04 d0       	rcall	.+8      	; 0x15e0 <__fixunssfsi>
    15d8:	68 94       	set
    15da:	b1 11       	cpse	r27, r1
    15dc:	13 c1       	rjmp	.+550    	; 0x1804 <__fp_szero>
    15de:	08 95       	ret

000015e0 <__fixunssfsi>:
    15e0:	f6 d0       	rcall	.+492    	; 0x17ce <__fp_splitA>
    15e2:	88 f0       	brcs	.+34     	; 0x1606 <__fixunssfsi+0x26>
    15e4:	9f 57       	subi	r25, 0x7F	; 127
    15e6:	90 f0       	brcs	.+36     	; 0x160c <__fixunssfsi+0x2c>
    15e8:	b9 2f       	mov	r27, r25
    15ea:	99 27       	eor	r25, r25
    15ec:	b7 51       	subi	r27, 0x17	; 23
    15ee:	a0 f0       	brcs	.+40     	; 0x1618 <__fixunssfsi+0x38>
    15f0:	d1 f0       	breq	.+52     	; 0x1626 <__fixunssfsi+0x46>
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	1a f0       	brmi	.+6      	; 0x1602 <__fixunssfsi+0x22>
    15fc:	ba 95       	dec	r27
    15fe:	c9 f7       	brne	.-14     	; 0x15f2 <__fixunssfsi+0x12>
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <__fixunssfsi+0x46>
    1602:	b1 30       	cpi	r27, 0x01	; 1
    1604:	81 f0       	breq	.+32     	; 0x1626 <__fixunssfsi+0x46>
    1606:	fd d0       	rcall	.+506    	; 0x1802 <__fp_zero>
    1608:	b1 e0       	ldi	r27, 0x01	; 1
    160a:	08 95       	ret
    160c:	fa c0       	rjmp	.+500    	; 0x1802 <__fp_zero>
    160e:	67 2f       	mov	r22, r23
    1610:	78 2f       	mov	r23, r24
    1612:	88 27       	eor	r24, r24
    1614:	b8 5f       	subi	r27, 0xF8	; 248
    1616:	39 f0       	breq	.+14     	; 0x1626 <__fixunssfsi+0x46>
    1618:	b9 3f       	cpi	r27, 0xF9	; 249
    161a:	cc f3       	brlt	.-14     	; 0x160e <__fixunssfsi+0x2e>
    161c:	86 95       	lsr	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	b3 95       	inc	r27
    1624:	d9 f7       	brne	.-10     	; 0x161c <__fixunssfsi+0x3c>
    1626:	3e f4       	brtc	.+14     	; 0x1636 <__fixunssfsi+0x56>
    1628:	90 95       	com	r25
    162a:	80 95       	com	r24
    162c:	70 95       	com	r23
    162e:	61 95       	neg	r22
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	8f 4f       	sbci	r24, 0xFF	; 255
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	08 95       	ret

00001638 <__floatunsisf>:
    1638:	e8 94       	clt
    163a:	09 c0       	rjmp	.+18     	; 0x164e <__floatsisf+0x12>

0000163c <__floatsisf>:
    163c:	97 fb       	bst	r25, 7
    163e:	3e f4       	brtc	.+14     	; 0x164e <__floatsisf+0x12>
    1640:	90 95       	com	r25
    1642:	80 95       	com	r24
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	99 23       	and	r25, r25
    1650:	a9 f0       	breq	.+42     	; 0x167c <__floatsisf+0x40>
    1652:	f9 2f       	mov	r31, r25
    1654:	96 e9       	ldi	r25, 0x96	; 150
    1656:	bb 27       	eor	r27, r27
    1658:	93 95       	inc	r25
    165a:	f6 95       	lsr	r31
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f1 11       	cpse	r31, r1
    1666:	f8 cf       	rjmp	.-16     	; 0x1658 <__floatsisf+0x1c>
    1668:	fa f4       	brpl	.+62     	; 0x16a8 <__floatsisf+0x6c>
    166a:	bb 0f       	add	r27, r27
    166c:	11 f4       	brne	.+4      	; 0x1672 <__floatsisf+0x36>
    166e:	60 ff       	sbrs	r22, 0
    1670:	1b c0       	rjmp	.+54     	; 0x16a8 <__floatsisf+0x6c>
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	16 c0       	rjmp	.+44     	; 0x16a8 <__floatsisf+0x6c>
    167c:	88 23       	and	r24, r24
    167e:	11 f0       	breq	.+4      	; 0x1684 <__floatsisf+0x48>
    1680:	96 e9       	ldi	r25, 0x96	; 150
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <__floatsisf+0x6a>
    1684:	77 23       	and	r23, r23
    1686:	21 f0       	breq	.+8      	; 0x1690 <__floatsisf+0x54>
    1688:	9e e8       	ldi	r25, 0x8E	; 142
    168a:	87 2f       	mov	r24, r23
    168c:	76 2f       	mov	r23, r22
    168e:	05 c0       	rjmp	.+10     	; 0x169a <__floatsisf+0x5e>
    1690:	66 23       	and	r22, r22
    1692:	71 f0       	breq	.+28     	; 0x16b0 <__floatsisf+0x74>
    1694:	96 e8       	ldi	r25, 0x86	; 134
    1696:	86 2f       	mov	r24, r22
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	2a f0       	brmi	.+10     	; 0x16a8 <__floatsisf+0x6c>
    169e:	9a 95       	dec	r25
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	da f7       	brpl	.-10     	; 0x169e <__floatsisf+0x62>
    16a8:	88 0f       	add	r24, r24
    16aa:	96 95       	lsr	r25
    16ac:	87 95       	ror	r24
    16ae:	97 f9       	bld	r25, 7
    16b0:	08 95       	ret

000016b2 <__fp_inf>:
    16b2:	97 f9       	bld	r25, 7
    16b4:	9f 67       	ori	r25, 0x7F	; 127
    16b6:	80 e8       	ldi	r24, 0x80	; 128
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	08 95       	ret

000016be <__fp_nan>:
    16be:	9f ef       	ldi	r25, 0xFF	; 255
    16c0:	80 ec       	ldi	r24, 0xC0	; 192
    16c2:	08 95       	ret

000016c4 <__fp_powser>:
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	1f 93       	push	r17
    16ca:	0f 93       	push	r16
    16cc:	ff 92       	push	r15
    16ce:	ef 92       	push	r14
    16d0:	df 92       	push	r13
    16d2:	7b 01       	movw	r14, r22
    16d4:	8c 01       	movw	r16, r24
    16d6:	68 94       	set
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <__fp_powser+0x20>
    16da:	da 2e       	mov	r13, r26
    16dc:	ef 01       	movw	r28, r30
    16de:	af d0       	rcall	.+350    	; 0x183e <__mulsf3x>
    16e0:	fe 01       	movw	r30, r28
    16e2:	e8 94       	clt
    16e4:	a5 91       	lpm	r26, Z+
    16e6:	25 91       	lpm	r18, Z+
    16e8:	35 91       	lpm	r19, Z+
    16ea:	45 91       	lpm	r20, Z+
    16ec:	55 91       	lpm	r21, Z+
    16ee:	ae f3       	brts	.-22     	; 0x16da <__fp_powser+0x16>
    16f0:	ef 01       	movw	r28, r30
    16f2:	51 de       	rcall	.-862    	; 0x1396 <__addsf3x>
    16f4:	fe 01       	movw	r30, r28
    16f6:	97 01       	movw	r18, r14
    16f8:	a8 01       	movw	r20, r16
    16fa:	da 94       	dec	r13
    16fc:	79 f7       	brne	.-34     	; 0x16dc <__fp_powser+0x18>
    16fe:	df 90       	pop	r13
    1700:	ef 90       	pop	r14
    1702:	ff 90       	pop	r15
    1704:	0f 91       	pop	r16
    1706:	1f 91       	pop	r17
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <__fp_pscA>:
    170e:	00 24       	eor	r0, r0
    1710:	0a 94       	dec	r0
    1712:	16 16       	cp	r1, r22
    1714:	17 06       	cpc	r1, r23
    1716:	18 06       	cpc	r1, r24
    1718:	09 06       	cpc	r0, r25
    171a:	08 95       	ret

0000171c <__fp_pscB>:
    171c:	00 24       	eor	r0, r0
    171e:	0a 94       	dec	r0
    1720:	12 16       	cp	r1, r18
    1722:	13 06       	cpc	r1, r19
    1724:	14 06       	cpc	r1, r20
    1726:	05 06       	cpc	r0, r21
    1728:	08 95       	ret
    172a:	c9 cf       	rjmp	.-110    	; 0x16be <__fp_nan>

0000172c <__fp_rempio2>:
    172c:	50 d0       	rcall	.+160    	; 0x17ce <__fp_splitA>
    172e:	e8 f3       	brcs	.-6      	; 0x172a <__fp_pscB+0xe>
    1730:	e8 94       	clt
    1732:	e0 e0       	ldi	r30, 0x00	; 0
    1734:	bb 27       	eor	r27, r27
    1736:	9f 57       	subi	r25, 0x7F	; 127
    1738:	f0 f0       	brcs	.+60     	; 0x1776 <__fp_rempio2+0x4a>
    173a:	2a ed       	ldi	r18, 0xDA	; 218
    173c:	3f e0       	ldi	r19, 0x0F	; 15
    173e:	49 ec       	ldi	r20, 0xC9	; 201
    1740:	06 c0       	rjmp	.+12     	; 0x174e <__fp_rempio2+0x22>
    1742:	ee 0f       	add	r30, r30
    1744:	bb 0f       	add	r27, r27
    1746:	66 1f       	adc	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	28 f0       	brcs	.+10     	; 0x1758 <__fp_rempio2+0x2c>
    174e:	b2 3a       	cpi	r27, 0xA2	; 162
    1750:	62 07       	cpc	r22, r18
    1752:	73 07       	cpc	r23, r19
    1754:	84 07       	cpc	r24, r20
    1756:	28 f0       	brcs	.+10     	; 0x1762 <__fp_rempio2+0x36>
    1758:	b2 5a       	subi	r27, 0xA2	; 162
    175a:	62 0b       	sbc	r22, r18
    175c:	73 0b       	sbc	r23, r19
    175e:	84 0b       	sbc	r24, r20
    1760:	e3 95       	inc	r30
    1762:	9a 95       	dec	r25
    1764:	72 f7       	brpl	.-36     	; 0x1742 <__fp_rempio2+0x16>
    1766:	80 38       	cpi	r24, 0x80	; 128
    1768:	30 f4       	brcc	.+12     	; 0x1776 <__fp_rempio2+0x4a>
    176a:	9a 95       	dec	r25
    176c:	bb 0f       	add	r27, r27
    176e:	66 1f       	adc	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	d2 f7       	brpl	.-12     	; 0x176a <__fp_rempio2+0x3e>
    1776:	90 48       	sbci	r25, 0x80	; 128
    1778:	2a c1       	rjmp	.+596    	; 0x19ce <__fp_mpack_finite>

0000177a <__fp_round>:
    177a:	09 2e       	mov	r0, r25
    177c:	03 94       	inc	r0
    177e:	00 0c       	add	r0, r0
    1780:	11 f4       	brne	.+4      	; 0x1786 <__fp_round+0xc>
    1782:	88 23       	and	r24, r24
    1784:	52 f0       	brmi	.+20     	; 0x179a <__fp_round+0x20>
    1786:	bb 0f       	add	r27, r27
    1788:	40 f4       	brcc	.+16     	; 0x179a <__fp_round+0x20>
    178a:	bf 2b       	or	r27, r31
    178c:	11 f4       	brne	.+4      	; 0x1792 <__fp_round+0x18>
    178e:	60 ff       	sbrs	r22, 0
    1790:	04 c0       	rjmp	.+8      	; 0x179a <__fp_round+0x20>
    1792:	6f 5f       	subi	r22, 0xFF	; 255
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	8f 4f       	sbci	r24, 0xFF	; 255
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	08 95       	ret

0000179c <__fp_sinus>:
    179c:	ef 93       	push	r30
    179e:	e0 ff       	sbrs	r30, 0
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <__fp_sinus+0x12>
    17a2:	a2 ea       	ldi	r26, 0xA2	; 162
    17a4:	2a ed       	ldi	r18, 0xDA	; 218
    17a6:	3f e0       	ldi	r19, 0x0F	; 15
    17a8:	49 ec       	ldi	r20, 0xC9	; 201
    17aa:	5f eb       	ldi	r21, 0xBF	; 191
    17ac:	f4 dd       	rcall	.-1048   	; 0x1396 <__addsf3x>
    17ae:	e5 df       	rcall	.-54     	; 0x177a <__fp_round>
    17b0:	0f 90       	pop	r0
    17b2:	03 94       	inc	r0
    17b4:	01 fc       	sbrc	r0, 1
    17b6:	90 58       	subi	r25, 0x80	; 128
    17b8:	e9 ed       	ldi	r30, 0xD9	; 217
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	1b c1       	rjmp	.+566    	; 0x19f4 <__fp_powsodd>

000017be <__fp_split3>:
    17be:	57 fd       	sbrc	r21, 7
    17c0:	90 58       	subi	r25, 0x80	; 128
    17c2:	44 0f       	add	r20, r20
    17c4:	55 1f       	adc	r21, r21
    17c6:	59 f0       	breq	.+22     	; 0x17de <__fp_splitA+0x10>
    17c8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ca:	71 f0       	breq	.+28     	; 0x17e8 <__fp_splitA+0x1a>
    17cc:	47 95       	ror	r20

000017ce <__fp_splitA>:
    17ce:	88 0f       	add	r24, r24
    17d0:	97 fb       	bst	r25, 7
    17d2:	99 1f       	adc	r25, r25
    17d4:	61 f0       	breq	.+24     	; 0x17ee <__fp_splitA+0x20>
    17d6:	9f 3f       	cpi	r25, 0xFF	; 255
    17d8:	79 f0       	breq	.+30     	; 0x17f8 <__fp_splitA+0x2a>
    17da:	87 95       	ror	r24
    17dc:	08 95       	ret
    17de:	12 16       	cp	r1, r18
    17e0:	13 06       	cpc	r1, r19
    17e2:	14 06       	cpc	r1, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	f2 cf       	rjmp	.-28     	; 0x17cc <__fp_split3+0xe>
    17e8:	46 95       	lsr	r20
    17ea:	f1 df       	rcall	.-30     	; 0x17ce <__fp_splitA>
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <__fp_splitA+0x30>
    17ee:	16 16       	cp	r1, r22
    17f0:	17 06       	cpc	r1, r23
    17f2:	18 06       	cpc	r1, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	f1 cf       	rjmp	.-30     	; 0x17da <__fp_splitA+0xc>
    17f8:	86 95       	lsr	r24
    17fa:	71 05       	cpc	r23, r1
    17fc:	61 05       	cpc	r22, r1
    17fe:	08 94       	sec
    1800:	08 95       	ret

00001802 <__fp_zero>:
    1802:	e8 94       	clt

00001804 <__fp_szero>:
    1804:	bb 27       	eor	r27, r27
    1806:	66 27       	eor	r22, r22
    1808:	77 27       	eor	r23, r23
    180a:	cb 01       	movw	r24, r22
    180c:	97 f9       	bld	r25, 7
    180e:	08 95       	ret

00001810 <__gesf2>:
    1810:	b8 d0       	rcall	.+368    	; 0x1982 <__fp_cmp>
    1812:	08 f4       	brcc	.+2      	; 0x1816 <__gesf2+0x6>
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	08 95       	ret

00001818 <inverse>:
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	80 e8       	ldi	r24, 0x80	; 128
    1822:	9f e3       	ldi	r25, 0x3F	; 63
    1824:	70 ce       	rjmp	.-800    	; 0x1506 <__divsf3>

00001826 <__mulsf3>:
    1826:	0b d0       	rcall	.+22     	; 0x183e <__mulsf3x>
    1828:	a8 cf       	rjmp	.-176    	; 0x177a <__fp_round>
    182a:	71 df       	rcall	.-286    	; 0x170e <__fp_pscA>
    182c:	28 f0       	brcs	.+10     	; 0x1838 <__mulsf3+0x12>
    182e:	76 df       	rcall	.-276    	; 0x171c <__fp_pscB>
    1830:	18 f0       	brcs	.+6      	; 0x1838 <__mulsf3+0x12>
    1832:	95 23       	and	r25, r21
    1834:	09 f0       	breq	.+2      	; 0x1838 <__mulsf3+0x12>
    1836:	3d cf       	rjmp	.-390    	; 0x16b2 <__fp_inf>
    1838:	42 cf       	rjmp	.-380    	; 0x16be <__fp_nan>
    183a:	11 24       	eor	r1, r1
    183c:	e3 cf       	rjmp	.-58     	; 0x1804 <__fp_szero>

0000183e <__mulsf3x>:
    183e:	bf df       	rcall	.-130    	; 0x17be <__fp_split3>
    1840:	a0 f3       	brcs	.-24     	; 0x182a <__mulsf3+0x4>

00001842 <__mulsf3_pse>:
    1842:	95 9f       	mul	r25, r21
    1844:	d1 f3       	breq	.-12     	; 0x183a <__mulsf3+0x14>
    1846:	95 0f       	add	r25, r21
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	55 1f       	adc	r21, r21
    184c:	62 9f       	mul	r22, r18
    184e:	f0 01       	movw	r30, r0
    1850:	72 9f       	mul	r23, r18
    1852:	bb 27       	eor	r27, r27
    1854:	f0 0d       	add	r31, r0
    1856:	b1 1d       	adc	r27, r1
    1858:	63 9f       	mul	r22, r19
    185a:	aa 27       	eor	r26, r26
    185c:	f0 0d       	add	r31, r0
    185e:	b1 1d       	adc	r27, r1
    1860:	aa 1f       	adc	r26, r26
    1862:	64 9f       	mul	r22, r20
    1864:	66 27       	eor	r22, r22
    1866:	b0 0d       	add	r27, r0
    1868:	a1 1d       	adc	r26, r1
    186a:	66 1f       	adc	r22, r22
    186c:	82 9f       	mul	r24, r18
    186e:	22 27       	eor	r18, r18
    1870:	b0 0d       	add	r27, r0
    1872:	a1 1d       	adc	r26, r1
    1874:	62 1f       	adc	r22, r18
    1876:	73 9f       	mul	r23, r19
    1878:	b0 0d       	add	r27, r0
    187a:	a1 1d       	adc	r26, r1
    187c:	62 1f       	adc	r22, r18
    187e:	83 9f       	mul	r24, r19
    1880:	a0 0d       	add	r26, r0
    1882:	61 1d       	adc	r22, r1
    1884:	22 1f       	adc	r18, r18
    1886:	74 9f       	mul	r23, r20
    1888:	33 27       	eor	r19, r19
    188a:	a0 0d       	add	r26, r0
    188c:	61 1d       	adc	r22, r1
    188e:	23 1f       	adc	r18, r19
    1890:	84 9f       	mul	r24, r20
    1892:	60 0d       	add	r22, r0
    1894:	21 1d       	adc	r18, r1
    1896:	82 2f       	mov	r24, r18
    1898:	76 2f       	mov	r23, r22
    189a:	6a 2f       	mov	r22, r26
    189c:	11 24       	eor	r1, r1
    189e:	9f 57       	subi	r25, 0x7F	; 127
    18a0:	50 40       	sbci	r21, 0x00	; 0
    18a2:	8a f0       	brmi	.+34     	; 0x18c6 <__mulsf3_pse+0x84>
    18a4:	e1 f0       	breq	.+56     	; 0x18de <__mulsf3_pse+0x9c>
    18a6:	88 23       	and	r24, r24
    18a8:	4a f0       	brmi	.+18     	; 0x18bc <__mulsf3_pse+0x7a>
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	bb 1f       	adc	r27, r27
    18b0:	66 1f       	adc	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	88 1f       	adc	r24, r24
    18b6:	91 50       	subi	r25, 0x01	; 1
    18b8:	50 40       	sbci	r21, 0x00	; 0
    18ba:	a9 f7       	brne	.-22     	; 0x18a6 <__mulsf3_pse+0x64>
    18bc:	9e 3f       	cpi	r25, 0xFE	; 254
    18be:	51 05       	cpc	r21, r1
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__mulsf3_pse+0x9c>
    18c2:	f7 ce       	rjmp	.-530    	; 0x16b2 <__fp_inf>
    18c4:	9f cf       	rjmp	.-194    	; 0x1804 <__fp_szero>
    18c6:	5f 3f       	cpi	r21, 0xFF	; 255
    18c8:	ec f3       	brlt	.-6      	; 0x18c4 <__mulsf3_pse+0x82>
    18ca:	98 3e       	cpi	r25, 0xE8	; 232
    18cc:	dc f3       	brlt	.-10     	; 0x18c4 <__mulsf3_pse+0x82>
    18ce:	86 95       	lsr	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	f7 95       	ror	r31
    18d8:	e7 95       	ror	r30
    18da:	9f 5f       	subi	r25, 0xFF	; 255
    18dc:	c1 f7       	brne	.-16     	; 0x18ce <__mulsf3_pse+0x8c>
    18de:	fe 2b       	or	r31, r30
    18e0:	88 0f       	add	r24, r24
    18e2:	91 1d       	adc	r25, r1
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	97 f9       	bld	r25, 7
    18ea:	08 95       	ret

000018ec <sin>:
    18ec:	9f 93       	push	r25
    18ee:	1e df       	rcall	.-452    	; 0x172c <__fp_rempio2>
    18f0:	0f 90       	pop	r0
    18f2:	07 fc       	sbrc	r0, 7
    18f4:	ee 5f       	subi	r30, 0xFE	; 254
    18f6:	52 cf       	rjmp	.-348    	; 0x179c <__fp_sinus>
    18f8:	11 f4       	brne	.+4      	; 0x18fe <sin+0x12>
    18fa:	0e f4       	brtc	.+2      	; 0x18fe <sin+0x12>
    18fc:	e0 ce       	rjmp	.-576    	; 0x16be <__fp_nan>
    18fe:	65 c0       	rjmp	.+202    	; 0x19ca <__fp_mpack>

00001900 <sqrt>:
    1900:	66 df       	rcall	.-308    	; 0x17ce <__fp_splitA>
    1902:	d0 f3       	brcs	.-12     	; 0x18f8 <sin+0xc>
    1904:	99 23       	and	r25, r25
    1906:	d9 f3       	breq	.-10     	; 0x18fe <sin+0x12>
    1908:	ce f3       	brts	.-14     	; 0x18fc <sin+0x10>
    190a:	9f 57       	subi	r25, 0x7F	; 127
    190c:	55 0b       	sbc	r21, r21
    190e:	87 ff       	sbrs	r24, 7
    1910:	6a d0       	rcall	.+212    	; 0x19e6 <__fp_norm2>
    1912:	00 24       	eor	r0, r0
    1914:	a0 e6       	ldi	r26, 0x60	; 96
    1916:	40 ea       	ldi	r20, 0xA0	; 160
    1918:	90 01       	movw	r18, r0
    191a:	80 58       	subi	r24, 0x80	; 128
    191c:	56 95       	lsr	r21
    191e:	97 95       	ror	r25
    1920:	28 f4       	brcc	.+10     	; 0x192c <sqrt+0x2c>
    1922:	80 5c       	subi	r24, 0xC0	; 192
    1924:	66 0f       	add	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	20 f0       	brcs	.+8      	; 0x1934 <sqrt+0x34>
    192c:	26 17       	cp	r18, r22
    192e:	37 07       	cpc	r19, r23
    1930:	48 07       	cpc	r20, r24
    1932:	30 f4       	brcc	.+12     	; 0x1940 <sqrt+0x40>
    1934:	62 1b       	sub	r22, r18
    1936:	73 0b       	sbc	r23, r19
    1938:	84 0b       	sbc	r24, r20
    193a:	20 29       	or	r18, r0
    193c:	31 29       	or	r19, r1
    193e:	4a 2b       	or	r20, r26
    1940:	a6 95       	lsr	r26
    1942:	17 94       	ror	r1
    1944:	07 94       	ror	r0
    1946:	20 25       	eor	r18, r0
    1948:	31 25       	eor	r19, r1
    194a:	4a 27       	eor	r20, r26
    194c:	58 f7       	brcc	.-42     	; 0x1924 <sqrt+0x24>
    194e:	66 0f       	add	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	20 f0       	brcs	.+8      	; 0x195e <sqrt+0x5e>
    1956:	26 17       	cp	r18, r22
    1958:	37 07       	cpc	r19, r23
    195a:	48 07       	cpc	r20, r24
    195c:	30 f4       	brcc	.+12     	; 0x196a <sqrt+0x6a>
    195e:	62 0b       	sbc	r22, r18
    1960:	73 0b       	sbc	r23, r19
    1962:	84 0b       	sbc	r24, r20
    1964:	20 0d       	add	r18, r0
    1966:	31 1d       	adc	r19, r1
    1968:	41 1d       	adc	r20, r1
    196a:	a0 95       	com	r26
    196c:	81 f7       	brne	.-32     	; 0x194e <sqrt+0x4e>
    196e:	b9 01       	movw	r22, r18
    1970:	84 2f       	mov	r24, r20
    1972:	91 58       	subi	r25, 0x81	; 129
    1974:	88 0f       	add	r24, r24
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	08 95       	ret

0000197c <square>:
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	52 cf       	rjmp	.-348    	; 0x1826 <__mulsf3>

00001982 <__fp_cmp>:
    1982:	99 0f       	add	r25, r25
    1984:	00 08       	sbc	r0, r0
    1986:	55 0f       	add	r21, r21
    1988:	aa 0b       	sbc	r26, r26
    198a:	e0 e8       	ldi	r30, 0x80	; 128
    198c:	fe ef       	ldi	r31, 0xFE	; 254
    198e:	16 16       	cp	r1, r22
    1990:	17 06       	cpc	r1, r23
    1992:	e8 07       	cpc	r30, r24
    1994:	f9 07       	cpc	r31, r25
    1996:	c0 f0       	brcs	.+48     	; 0x19c8 <__fp_cmp+0x46>
    1998:	12 16       	cp	r1, r18
    199a:	13 06       	cpc	r1, r19
    199c:	e4 07       	cpc	r30, r20
    199e:	f5 07       	cpc	r31, r21
    19a0:	98 f0       	brcs	.+38     	; 0x19c8 <__fp_cmp+0x46>
    19a2:	62 1b       	sub	r22, r18
    19a4:	73 0b       	sbc	r23, r19
    19a6:	84 0b       	sbc	r24, r20
    19a8:	95 0b       	sbc	r25, r21
    19aa:	39 f4       	brne	.+14     	; 0x19ba <__fp_cmp+0x38>
    19ac:	0a 26       	eor	r0, r26
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <__fp_cmp+0x46>
    19b0:	23 2b       	or	r18, r19
    19b2:	24 2b       	or	r18, r20
    19b4:	25 2b       	or	r18, r21
    19b6:	21 f4       	brne	.+8      	; 0x19c0 <__fp_cmp+0x3e>
    19b8:	08 95       	ret
    19ba:	0a 26       	eor	r0, r26
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__fp_cmp+0x3e>
    19be:	a1 40       	sbci	r26, 0x01	; 1
    19c0:	a6 95       	lsr	r26
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	81 1d       	adc	r24, r1
    19c6:	81 1d       	adc	r24, r1
    19c8:	08 95       	ret

000019ca <__fp_mpack>:
    19ca:	9f 3f       	cpi	r25, 0xFF	; 255
    19cc:	31 f0       	breq	.+12     	; 0x19da <__fp_mpack_finite+0xc>

000019ce <__fp_mpack_finite>:
    19ce:	91 50       	subi	r25, 0x01	; 1
    19d0:	20 f4       	brcc	.+8      	; 0x19da <__fp_mpack_finite+0xc>
    19d2:	87 95       	ror	r24
    19d4:	77 95       	ror	r23
    19d6:	67 95       	ror	r22
    19d8:	b7 95       	ror	r27
    19da:	88 0f       	add	r24, r24
    19dc:	91 1d       	adc	r25, r1
    19de:	96 95       	lsr	r25
    19e0:	87 95       	ror	r24
    19e2:	97 f9       	bld	r25, 7
    19e4:	08 95       	ret

000019e6 <__fp_norm2>:
    19e6:	91 50       	subi	r25, 0x01	; 1
    19e8:	50 40       	sbci	r21, 0x00	; 0
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	d2 f7       	brpl	.-12     	; 0x19e6 <__fp_norm2>
    19f2:	08 95       	ret

000019f4 <__fp_powsodd>:
    19f4:	9f 93       	push	r25
    19f6:	8f 93       	push	r24
    19f8:	7f 93       	push	r23
    19fa:	6f 93       	push	r22
    19fc:	ff 93       	push	r31
    19fe:	ef 93       	push	r30
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	10 df       	rcall	.-480    	; 0x1826 <__mulsf3>
    1a06:	ef 91       	pop	r30
    1a08:	ff 91       	pop	r31
    1a0a:	5c de       	rcall	.-840    	; 0x16c4 <__fp_powser>
    1a0c:	2f 91       	pop	r18
    1a0e:	3f 91       	pop	r19
    1a10:	4f 91       	pop	r20
    1a12:	5f 91       	pop	r21
    1a14:	08 cf       	rjmp	.-496    	; 0x1826 <__mulsf3>

00001a16 <itoa>:
    1a16:	fb 01       	movw	r30, r22
    1a18:	9f 01       	movw	r18, r30
    1a1a:	e8 94       	clt
    1a1c:	42 30       	cpi	r20, 0x02	; 2
    1a1e:	c4 f0       	brlt	.+48     	; 0x1a50 <itoa+0x3a>
    1a20:	45 32       	cpi	r20, 0x25	; 37
    1a22:	b4 f4       	brge	.+44     	; 0x1a50 <itoa+0x3a>
    1a24:	4a 30       	cpi	r20, 0x0A	; 10
    1a26:	29 f4       	brne	.+10     	; 0x1a32 <itoa+0x1c>
    1a28:	97 fb       	bst	r25, 7
    1a2a:	1e f4       	brtc	.+6      	; 0x1a32 <itoa+0x1c>
    1a2c:	90 95       	com	r25
    1a2e:	81 95       	neg	r24
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	64 2f       	mov	r22, r20
    1a34:	77 27       	eor	r23, r23
    1a36:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodhi4>
    1a3a:	80 5d       	subi	r24, 0xD0	; 208
    1a3c:	8a 33       	cpi	r24, 0x3A	; 58
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <itoa+0x2c>
    1a40:	89 5d       	subi	r24, 0xD9	; 217
    1a42:	81 93       	st	Z+, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	a1 f7       	brne	.-24     	; 0x1a32 <itoa+0x1c>
    1a4a:	16 f4       	brtc	.+4      	; 0x1a50 <itoa+0x3a>
    1a4c:	5d e2       	ldi	r21, 0x2D	; 45
    1a4e:	51 93       	st	Z+, r21
    1a50:	10 82       	st	Z, r1
    1a52:	c9 01       	movw	r24, r18
    1a54:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <strrev>

00001a58 <strrev>:
    1a58:	dc 01       	movw	r26, r24
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	67 2f       	mov	r22, r23
    1a5e:	71 91       	ld	r23, Z+
    1a60:	77 23       	and	r23, r23
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <strrev+0x4>
    1a64:	32 97       	sbiw	r30, 0x02	; 2
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <strrev+0x18>
    1a68:	7c 91       	ld	r23, X
    1a6a:	6d 93       	st	X+, r22
    1a6c:	70 83       	st	Z, r23
    1a6e:	62 91       	ld	r22, -Z
    1a70:	ae 17       	cp	r26, r30
    1a72:	bf 07       	cpc	r27, r31
    1a74:	c8 f3       	brcs	.-14     	; 0x1a68 <strrev+0x10>
    1a76:	08 95       	ret

00001a78 <__udivmodhi4>:
    1a78:	aa 1b       	sub	r26, r26
    1a7a:	bb 1b       	sub	r27, r27
    1a7c:	51 e1       	ldi	r21, 0x11	; 17
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <__udivmodhi4_ep>

00001a80 <__udivmodhi4_loop>:
    1a80:	aa 1f       	adc	r26, r26
    1a82:	bb 1f       	adc	r27, r27
    1a84:	a6 17       	cp	r26, r22
    1a86:	b7 07       	cpc	r27, r23
    1a88:	10 f0       	brcs	.+4      	; 0x1a8e <__udivmodhi4_ep>
    1a8a:	a6 1b       	sub	r26, r22
    1a8c:	b7 0b       	sbc	r27, r23

00001a8e <__udivmodhi4_ep>:
    1a8e:	88 1f       	adc	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	5a 95       	dec	r21
    1a94:	a9 f7       	brne	.-22     	; 0x1a80 <__udivmodhi4_loop>
    1a96:	80 95       	com	r24
    1a98:	90 95       	com	r25
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	08 95       	ret

00001aa0 <_exit>:
    1aa0:	f8 94       	cli

00001aa2 <__stop_program>:
    1aa2:	ff cf       	rjmp	.-2      	; 0x1aa2 <__stop_program>
