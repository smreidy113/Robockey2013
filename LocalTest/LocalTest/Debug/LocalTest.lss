
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000031ce  00003262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  00800118  00800118  0000327a  2**0
                  ALLOC
  3 .stab         000043e0  00000000  00000000  0000327c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001329  00000000  00000000  0000765c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00008985  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  000089b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d53  00000000  00000000  00008c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b42  00000000  00000000  0000b9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012c4  00000000  00000000  0000c501  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000900  00000000  00000000  0000d7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000088d  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030c1  00000000  00000000  0000e955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00011a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_3>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__vector_10>
      2c:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_11>
      30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_29>
      78:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      7c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      80:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <drive_to_puck+0xe>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <getADC+0xde>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <turn+0xcc>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

00000179 <descriptor_list>:
     179:	00 01 00 00 ad 01 12 00 02 00 00 bf 01 43 00 03     .............C..
     189:	00 00 02 02 04 01 03 09 04 06 02 12 02 03 09 04     ................
     199:	1a 02 06 03 03 09 04 22 02 08                       ......."..

000001a3 <endpoint_config_table>:
     1a3:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001ad <device_descriptor>:
     1ad:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1bd:	03 01                                               ..

000001bf <config1_descriptor>:
     1bf:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1cf:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1df:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1ef:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1ff:	40 00 00                                            @..

00000202 <string0>:
     202:	04 03 09 04                                         ....

00000206 <string1>:
     206:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     216:	65 00 00 00                                         e...

0000021a <string2>:
     21a:	06 03 4d 00 32 00 00 00                             ..M.2...

00000222 <string3>:
     222:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	ee ec       	ldi	r30, 0xCE	; 206
     240:	f1 e3       	ldi	r31, 0x31	; 49
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a8 31       	cpi	r26, 0x18	; 24
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	a8 e1       	ldi	r26, 0x18	; 24
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	ab 3e       	cpi	r26, 0xEB	; 235
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	0e 94 66 07 	call	0xecc	; 0xecc <main>
     262:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <_exit>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <chooseInput>:
	int maxval = 0;
	int diff = 0;
	float deg = 0.0;

void chooseInput(int i) {
	switch (i) {
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	91 05       	cpc	r25, r1
     26e:	09 f4       	brne	.+2      	; 0x272 <chooseInput+0x8>
     270:	45 c0       	rjmp	.+138    	; 0x2fc <chooseInput+0x92>
     272:	3c f4       	brge	.+14     	; 0x282 <chooseInput+0x18>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	91 05       	cpc	r25, r1
     278:	f9 f0       	breq	.+62     	; 0x2b8 <chooseInput+0x4e>
     27a:	7c f5       	brge	.+94     	; 0x2da <chooseInput+0x70>
     27c:	89 2b       	or	r24, r25
     27e:	59 f0       	breq	.+22     	; 0x296 <chooseInput+0x2c>
     280:	08 95       	ret
     282:	85 30       	cpi	r24, 0x05	; 5
     284:	91 05       	cpc	r25, r1
     286:	09 f4       	brne	.+2      	; 0x28a <chooseInput+0x20>
     288:	5b c0       	rjmp	.+182    	; 0x340 <chooseInput+0xd6>
     28a:	0c f4       	brge	.+2      	; 0x28e <chooseInput+0x24>
     28c:	48 c0       	rjmp	.+144    	; 0x31e <chooseInput+0xb4>
     28e:	06 97       	sbiw	r24, 0x06	; 6
     290:	09 f0       	breq	.+2      	; 0x294 <chooseInput+0x2a>
     292:	77 c0       	rjmp	.+238    	; 0x382 <chooseInput+0x118>
     294:	66 c0       	rjmp	.+204    	; 0x362 <chooseInput+0xf8>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
     296:	eb e7       	ldi	r30, 0x7B	; 123
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	8f 7d       	andi	r24, 0xDF	; 223
     29e:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2a0:	ec e7       	ldi	r30, 0x7C	; 124
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8b 7f       	andi	r24, 0xFB	; 251
     2a8:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2aa:	80 81       	ld	r24, Z
     2ac:	8d 7f       	andi	r24, 0xFD	; 253
     2ae:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2b0:	80 81       	ld	r24, Z
     2b2:	8e 7f       	andi	r24, 0xFE	; 254
     2b4:	80 83       	st	Z, r24

		break;
     2b6:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
     2b8:	eb e7       	ldi	r30, 0x7B	; 123
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	8f 7d       	andi	r24, 0xDF	; 223
     2c0:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2c2:	ec e7       	ldi	r30, 0x7C	; 124
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	8b 7f       	andi	r24, 0xFB	; 251
     2ca:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2cc:	80 81       	ld	r24, Z
     2ce:	8d 7f       	andi	r24, 0xFD	; 253
     2d0:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     2d2:	80 81       	ld	r24, Z
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	80 83       	st	Z, r24

		break;
     2d8:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
     2da:	eb e7       	ldi	r30, 0x7B	; 123
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	8f 7d       	andi	r24, 0xDF	; 223
     2e2:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     2e4:	ec e7       	ldi	r30, 0x7C	; 124
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	84 60       	ori	r24, 0x04	; 4
     2ec:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2ee:	80 81       	ld	r24, Z
     2f0:	8d 7f       	andi	r24, 0xFD	; 253
     2f2:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2f4:	80 81       	ld	r24, Z
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	80 83       	st	Z, r24

		break;
     2fa:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
     2fc:	eb e7       	ldi	r30, 0x7B	; 123
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	8f 7d       	andi	r24, 0xDF	; 223
     304:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     306:	ec e7       	ldi	r30, 0x7C	; 124
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	84 60       	ori	r24, 0x04	; 4
     30e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     310:	80 81       	ld	r24, Z
     312:	8d 7f       	andi	r24, 0xFD	; 253
     314:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     316:	80 81       	ld	r24, Z
     318:	81 60       	ori	r24, 0x01	; 1
     31a:	80 83       	st	Z, r24
		break;
     31c:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
     31e:	eb e7       	ldi	r30, 0x7B	; 123
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	8f 7d       	andi	r24, 0xDF	; 223
     326:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     328:	ec e7       	ldi	r30, 0x7C	; 124
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	84 60       	ori	r24, 0x04	; 4
     330:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
     332:	80 81       	ld	r24, Z
     334:	82 60       	ori	r24, 0x02	; 2
     336:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     338:	80 81       	ld	r24, Z
     33a:	8e 7f       	andi	r24, 0xFE	; 254
     33c:	80 83       	st	Z, r24
		break;
     33e:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
     340:	eb e7       	ldi	r30, 0x7B	; 123
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	80 62       	ori	r24, 0x20	; 32
     348:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     34a:	ec e7       	ldi	r30, 0x7C	; 124
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	8b 7f       	andi	r24, 0xFB	; 251
     352:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     354:	80 81       	ld	r24, Z
     356:	8d 7f       	andi	r24, 0xFD	; 253
     358:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     35a:	80 81       	ld	r24, Z
     35c:	8e 7f       	andi	r24, 0xFE	; 254
     35e:	80 83       	st	Z, r24
		break;
     360:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
     362:	eb e7       	ldi	r30, 0x7B	; 123
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	80 62       	ori	r24, 0x20	; 32
     36a:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     36c:	ec e7       	ldi	r30, 0x7C	; 124
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8b 7f       	andi	r24, 0xFB	; 251
     374:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     376:	80 81       	ld	r24, Z
     378:	8d 7f       	andi	r24, 0xFD	; 253
     37a:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     37c:	80 81       	ld	r24, Z
     37e:	81 60       	ori	r24, 0x01	; 1
     380:	80 83       	st	Z, r24
     382:	08 95       	ret

00000384 <getADC>:
int ADC5 = 0;
int ADC6 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
     384:	80 91 26 01 	lds	r24, 0x0126
     388:	90 91 27 01 	lds	r25, 0x0127
     38c:	89 2b       	or	r24, r25
     38e:	09 f4       	brne	.+2      	; 0x392 <getADC+0xe>
     390:	87 c0       	rjmp	.+270    	; 0x4a0 <getADC+0x11c>
		switch (flag) {
     392:	80 91 4e 01 	lds	r24, 0x014E
     396:	90 91 4f 01 	lds	r25, 0x014F
     39a:	83 30       	cpi	r24, 0x03	; 3
     39c:	91 05       	cpc	r25, r1
     39e:	59 f1       	breq	.+86     	; 0x3f6 <getADC+0x72>
     3a0:	3c f4       	brge	.+14     	; 0x3b0 <getADC+0x2c>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	91 05       	cpc	r25, r1
     3a6:	a9 f0       	breq	.+42     	; 0x3d2 <getADC+0x4e>
     3a8:	ec f4       	brge	.+58     	; 0x3e4 <getADC+0x60>
     3aa:	89 2b       	or	r24, r25
     3ac:	49 f0       	breq	.+18     	; 0x3c0 <getADC+0x3c>
     3ae:	46 c0       	rjmp	.+140    	; 0x43c <getADC+0xb8>
     3b0:	85 30       	cpi	r24, 0x05	; 5
     3b2:	91 05       	cpc	r25, r1
     3b4:	91 f1       	breq	.+100    	; 0x41a <getADC+0x96>
     3b6:	44 f1       	brlt	.+80     	; 0x408 <getADC+0x84>
     3b8:	06 97       	sbiw	r24, 0x06	; 6
     3ba:	09 f0       	breq	.+2      	; 0x3be <getADC+0x3a>
     3bc:	3f c0       	rjmp	.+126    	; 0x43c <getADC+0xb8>
     3be:	36 c0       	rjmp	.+108    	; 0x42c <getADC+0xa8>
			case 0:
			ADC0 = ADC;
     3c0:	80 91 78 00 	lds	r24, 0x0078
     3c4:	90 91 79 00 	lds	r25, 0x0079
     3c8:	90 93 35 01 	sts	0x0135, r25
     3cc:	80 93 34 01 	sts	0x0134, r24
			break;
     3d0:	35 c0       	rjmp	.+106    	; 0x43c <getADC+0xb8>
			case 1:
			ADC1 = ADC;
     3d2:	80 91 78 00 	lds	r24, 0x0078
     3d6:	90 91 79 00 	lds	r25, 0x0079
     3da:	90 93 33 01 	sts	0x0133, r25
     3de:	80 93 32 01 	sts	0x0132, r24
			break;
     3e2:	2c c0       	rjmp	.+88     	; 0x43c <getADC+0xb8>
			case 2:
			ADC2 = ADC;
     3e4:	80 91 78 00 	lds	r24, 0x0078
     3e8:	90 91 79 00 	lds	r25, 0x0079
     3ec:	90 93 31 01 	sts	0x0131, r25
     3f0:	80 93 30 01 	sts	0x0130, r24
			break;
     3f4:	23 c0       	rjmp	.+70     	; 0x43c <getADC+0xb8>
			case 3:
			ADC3 = ADC;
     3f6:	80 91 78 00 	lds	r24, 0x0078
     3fa:	90 91 79 00 	lds	r25, 0x0079
     3fe:	90 93 2f 01 	sts	0x012F, r25
     402:	80 93 2e 01 	sts	0x012E, r24
			break;
     406:	1a c0       	rjmp	.+52     	; 0x43c <getADC+0xb8>
			case 4:
			ADC4 = ADC;
     408:	80 91 78 00 	lds	r24, 0x0078
     40c:	90 91 79 00 	lds	r25, 0x0079
     410:	90 93 2d 01 	sts	0x012D, r25
     414:	80 93 2c 01 	sts	0x012C, r24
			break;
     418:	11 c0       	rjmp	.+34     	; 0x43c <getADC+0xb8>
			case 5:
			ADC5 = ADC;
     41a:	80 91 78 00 	lds	r24, 0x0078
     41e:	90 91 79 00 	lds	r25, 0x0079
     422:	90 93 2b 01 	sts	0x012B, r25
     426:	80 93 2a 01 	sts	0x012A, r24
			break;
     42a:	08 c0       	rjmp	.+16     	; 0x43c <getADC+0xb8>
			case 6:
			ADC6 = ADC;
     42c:	80 91 78 00 	lds	r24, 0x0078
     430:	90 91 79 00 	lds	r25, 0x0079
     434:	90 93 29 01 	sts	0x0129, r25
     438:	80 93 28 01 	sts	0x0128, r24
			break;
		}
			clear(ADCSRA, ADEN);	//Enable/Start conversion
     43c:	ea e7       	ldi	r30, 0x7A	; 122
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	8f 77       	andi	r24, 0x7F	; 127
     444:	80 83       	st	Z, r24
			clear(ADCSRA, ADSC);	//^
     446:	80 81       	ld	r24, Z
     448:	8f 7b       	andi	r24, 0xBF	; 191
     44a:	80 83       	st	Z, r24
			clear(ADCSRA, ADATE);
     44c:	80 81       	ld	r24, Z
     44e:	8f 7d       	andi	r24, 0xDF	; 223
     450:	80 83       	st	Z, r24
			clear(ADCSRA, ADIF);
     452:	80 81       	ld	r24, Z
     454:	8f 7e       	andi	r24, 0xEF	; 239
     456:	80 83       	st	Z, r24
			if (flag >= 0 && flag < 7) {
     458:	80 91 4e 01 	lds	r24, 0x014E
     45c:	90 91 4f 01 	lds	r25, 0x014F
     460:	87 30       	cpi	r24, 0x07	; 7
     462:	91 05       	cpc	r25, r1
     464:	58 f4       	brcc	.+22     	; 0x47c <getADC+0xf8>
				flag = (flag + 1) % 7;
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	67 e0       	ldi	r22, 0x07	; 7
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 8c 18 	call	0x3118	; 0x3118 <__divmodhi4>
     470:	80 93 4e 01 	sts	0x014E, r24
     474:	90 93 4f 01 	sts	0x014F, r25
				chooseInput(flag);
     478:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
			}
			set(ADCSRA, ADATE);	//Set trigger to free-running mode
     47c:	ea e7       	ldi	r30, 0x7A	; 122
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	80 62       	ori	r24, 0x20	; 32
     484:	80 83       	st	Z, r24
			set(ADCSRA, ADEN);	//Enable/Start conversion
     486:	80 81       	ld	r24, Z
     488:	80 68       	ori	r24, 0x80	; 128
     48a:	80 83       	st	Z, r24
			set(ADCSRA, ADSC);	//^
     48c:	80 81       	ld	r24, Z
     48e:	80 64       	ori	r24, 0x40	; 64
     490:	80 83       	st	Z, r24
			
			set(ADCSRA, ADIF);	//Enable reading results
     492:	80 81       	ld	r24, Z
     494:	80 61       	ori	r24, 0x10	; 16
     496:	80 83       	st	Z, r24
			conversion = 0;
     498:	10 92 27 01 	sts	0x0127, r1
     49c:	10 92 26 01 	sts	0x0126, r1
	}

	ADCarr[0] = ADC0;
     4a0:	80 91 34 01 	lds	r24, 0x0134
     4a4:	90 91 35 01 	lds	r25, 0x0135
     4a8:	90 93 41 01 	sts	0x0141, r25
     4ac:	80 93 40 01 	sts	0x0140, r24
	ADCarr[1] = ADC1;
     4b0:	80 91 32 01 	lds	r24, 0x0132
     4b4:	90 91 33 01 	lds	r25, 0x0133
     4b8:	90 93 43 01 	sts	0x0143, r25
     4bc:	80 93 42 01 	sts	0x0142, r24
	ADCarr[2] = ADC2;
     4c0:	80 91 30 01 	lds	r24, 0x0130
     4c4:	90 91 31 01 	lds	r25, 0x0131
     4c8:	90 93 45 01 	sts	0x0145, r25
     4cc:	80 93 44 01 	sts	0x0144, r24
	ADCarr[3] = ADC3;
     4d0:	80 91 2e 01 	lds	r24, 0x012E
     4d4:	90 91 2f 01 	lds	r25, 0x012F
     4d8:	90 93 47 01 	sts	0x0147, r25
     4dc:	80 93 46 01 	sts	0x0146, r24
	ADCarr[4] = ADC4;
     4e0:	80 91 2c 01 	lds	r24, 0x012C
     4e4:	90 91 2d 01 	lds	r25, 0x012D
     4e8:	90 93 49 01 	sts	0x0149, r25
     4ec:	80 93 48 01 	sts	0x0148, r24
	ADCarr[5] = ADC5;
     4f0:	80 91 2a 01 	lds	r24, 0x012A
     4f4:	90 91 2b 01 	lds	r25, 0x012B
     4f8:	90 93 4b 01 	sts	0x014B, r25
     4fc:	80 93 4a 01 	sts	0x014A, r24
	ADCarr[6] = ADC6;
     500:	80 91 28 01 	lds	r24, 0x0128
     504:	90 91 29 01 	lds	r25, 0x0129
     508:	90 93 4d 01 	sts	0x014D, r25
     50c:	80 93 4c 01 	sts	0x014C, r24
     510:	08 95       	ret

00000512 <reportADC>:
	
	
	
}

void reportADC() {
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29

	m_red(ON);
     51e:	6e 9a       	sbi	0x0d, 6	; 13
     520:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     522:	6a 9a       	sbi	0x0d, 2	; 13
     524:	72 98       	cbi	0x0e, 2	; 14

	m_usb_init(); // connect usb
     526:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <m_usb_init>
	while(!m_usb_isconnected());  //wait for connection
     52a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <m_usb_isconnected>
     52e:	88 23       	and	r24, r24
     530:	e1 f3       	breq	.-8      	; 0x52a <reportADC+0x18>

	m_red(OFF);
     532:	6e 9a       	sbi	0x0d, 6	; 13
     534:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     536:	6a 9a       	sbi	0x0d, 2	; 13
     538:	72 9a       	sbi	0x0e, 2	; 14
	float diff = 0.0;

	
	

	getADC();
     53a:	0e 94 c2 01 	call	0x384	; 0x384 <getADC>
     53e:	e0 e4       	ldi	r30, 0x40	; 64
     540:	f1 e0       	ldi	r31, 0x01	; 1
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
	
	

	getADC();
	index = 0;
	maxval = 0;
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0

	
	

	getADC();
	index = 0;
     54a:	c0 e0       	ldi	r28, 0x00	; 0
     54c:	d0 e0       	ldi	r29, 0x00	; 0
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
		if (ADCarr[i] > maxval) {
     54e:	21 91       	ld	r18, Z+
     550:	31 91       	ld	r19, Z+
     552:	42 17       	cp	r20, r18
     554:	53 07       	cpc	r21, r19
     556:	14 f4       	brge	.+4      	; 0x55c <reportADC+0x4a>
			index = i;
			maxval = ADCarr[i];
     558:	a9 01       	movw	r20, r18
	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
		if (ADCarr[i] > maxval) {
     55a:	ec 01       	movw	r28, r24

	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 7; i++) {
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	87 30       	cpi	r24, 0x07	; 7
     560:	91 05       	cpc	r25, r1
     562:	a9 f7       	brne	.-22     	; 0x54e <reportADC+0x3c>
		if (ADCarr[i] > maxval) {
			index = i;
			maxval = ADCarr[i];
		}
	}
	switch (index) {
     564:	20 97       	sbiw	r28, 0x00	; 0
     566:	29 f0       	breq	.+10     	; 0x572 <reportADC+0x60>
     568:	c6 30       	cpi	r28, 0x06	; 6
     56a:	d1 05       	cpc	r29, r1
     56c:	09 f0       	breq	.+2      	; 0x570 <reportADC+0x5e>
     56e:	4b c0       	rjmp	.+150    	; 0x606 <reportADC+0xf4>
     570:	25 c0       	rjmp	.+74     	; 0x5bc <reportADC+0xaa>
		case 0:
		diff = ADCarr[0] - ADCarr[6];
     572:	60 91 40 01 	lds	r22, 0x0140
     576:	70 91 41 01 	lds	r23, 0x0141
     57a:	80 91 4c 01 	lds	r24, 0x014C
     57e:	90 91 4d 01 	lds	r25, 0x014D
     582:	68 1b       	sub	r22, r24
     584:	79 0b       	sbc	r23, r25
     586:	88 27       	eor	r24, r24
     588:	77 fd       	sbrc	r23, 7
     58a:	80 95       	com	r24
     58c:	98 2f       	mov	r25, r24
     58e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
		deg = exp(-1.0*fabs(((float)diff))/400.0);
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	bf 77       	andi	r27, 0x7F	; 127
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	90 58       	subi	r25, 0x80	; 128
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	48 ec       	ldi	r20, 0xC8	; 200
     5a4:	53 e4       	ldi	r21, 0x43	; 67
     5a6:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     5aa:	0e 94 92 15 	call	0x2b24	; 0x2b24 <exp>
     5ae:	6b 01       	movw	r12, r22
     5b0:	7c 01       	movw	r14, r24
		m_green(ON);
     5b2:	6a 9a       	sbi	0x0d, 2	; 13
     5b4:	72 98       	cbi	0x0e, 2	; 14
		m_red(OFF);
     5b6:	6e 9a       	sbi	0x0d, 6	; 13
     5b8:	76 9a       	sbi	0x0e, 6	; 14
     5ba:	2c c0       	rjmp	.+88     	; 0x614 <reportADC+0x102>
		break;
		case 6:
		diff = ADCarr[6] - ADCarr[0];
     5bc:	60 91 4c 01 	lds	r22, 0x014C
     5c0:	70 91 4d 01 	lds	r23, 0x014D
     5c4:	80 91 40 01 	lds	r24, 0x0140
     5c8:	90 91 41 01 	lds	r25, 0x0141
     5cc:	68 1b       	sub	r22, r24
     5ce:	79 0b       	sbc	r23, r25
     5d0:	88 27       	eor	r24, r24
     5d2:	77 fd       	sbrc	r23, 7
     5d4:	80 95       	com	r24
     5d6:	98 2f       	mov	r25, r24
     5d8:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
		deg = exp(-1.0*fabs(((float)diff))/400.0);
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bf 77       	andi	r27, 0x7F	; 127
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	90 58       	subi	r25, 0x80	; 128
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	48 ec       	ldi	r20, 0xC8	; 200
     5ee:	53 e4       	ldi	r21, 0x43	; 67
     5f0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     5f4:	0e 94 92 15 	call	0x2b24	; 0x2b24 <exp>
     5f8:	6b 01       	movw	r12, r22
     5fa:	7c 01       	movw	r14, r24
		m_green(OFF);
     5fc:	6a 9a       	sbi	0x0d, 2	; 13
     5fe:	72 9a       	sbi	0x0e, 2	; 14
		m_red(ON);
     600:	6e 9a       	sbi	0x0d, 6	; 13
     602:	76 98       	cbi	0x0e, 6	; 14
     604:	07 c0       	rjmp	.+14     	; 0x614 <reportADC+0x102>
		break;
		default:
		m_green(ON);
     606:	6a 9a       	sbi	0x0d, 2	; 13
     608:	72 98       	cbi	0x0e, 2	; 14
		m_red(ON);
     60a:	6e 9a       	sbi	0x0d, 6	; 13
     60c:	76 98       	cbi	0x0e, 6	; 14
	m_green(OFF);

	char rx_buffer; //computer interactions
	int index = 0;
	int maxval = 0;
	float deg = 0.0;
     60e:	c1 2c       	mov	r12, r1
     610:	d1 2c       	mov	r13, r1
     612:	76 01       	movw	r14, r12

		//m_usb_rx_flush();  				//clear buffer

		//if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			m_usb_tx_int(ADCarr[0]);
     614:	80 91 40 01 	lds	r24, 0x0140
     618:	90 91 41 01 	lds	r25, 0x0141
     61c:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     620:	89 e0       	ldi	r24, 0x09	; 9
     622:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(ADCarr[1]);
     626:	80 91 42 01 	lds	r24, 0x0142
     62a:	90 91 43 01 	lds	r25, 0x0143
     62e:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     632:	89 e0       	ldi	r24, 0x09	; 9
     634:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(ADCarr[2]);
     638:	80 91 44 01 	lds	r24, 0x0144
     63c:	90 91 45 01 	lds	r25, 0x0145
     640:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(ADCarr[3]);
     64a:	80 91 46 01 	lds	r24, 0x0146
     64e:	90 91 47 01 	lds	r25, 0x0147
     652:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     656:	89 e0       	ldi	r24, 0x09	; 9
     658:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(ADCarr[4]);
     65c:	80 91 48 01 	lds	r24, 0x0148
     660:	90 91 49 01 	lds	r25, 0x0149
     664:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     668:	89 e0       	ldi	r24, 0x09	; 9
     66a:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(ADCarr[5]);
     66e:	80 91 4a 01 	lds	r24, 0x014A
     672:	90 91 4b 01 	lds	r25, 0x014B
     676:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(ADCarr[6]);
     680:	80 91 4c 01 	lds	r24, 0x014C
     684:	90 91 4d 01 	lds	r25, 0x014D
     688:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     68c:	89 e0       	ldi	r24, 0x09	; 9
     68e:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int(index);
     692:	ce 01       	movw	r24, r28
     694:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			m_usb_tx_int((int)(deg*100));
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	48 ec       	ldi	r20, 0xC8	; 200
     6a4:	52 e4       	ldi	r21, 0x42	; 66
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     6ae:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixsfsi>
     6b2:	cb 01       	movw	r24, r22
     6b4:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
			m_usb_tx_char('\t');
     6b8:	89 e0       	ldi	r24, 0x09	; 9
     6ba:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>

		//}
		m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     6be:	8a e0       	ldi	r24, 0x0A	; 10
     6c0:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
		//}
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	08 95       	ret

000006d2 <rotate>:

void rotate(int dir, float speed) {
	OCR1B = OCR1A;
     6d2:	20 91 88 00 	lds	r18, 0x0088
     6d6:	30 91 89 00 	lds	r19, 0x0089
     6da:	30 93 8b 00 	sts	0x008B, r19
     6de:	20 93 8a 00 	sts	0x008A, r18
	OCR3A = ICR3;
     6e2:	20 91 96 00 	lds	r18, 0x0096
     6e6:	30 91 97 00 	lds	r19, 0x0097
     6ea:	30 93 99 00 	sts	0x0099, r19
     6ee:	20 93 98 00 	sts	0x0098, r18
	if (dir == RIGHT) {
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	19 f4       	brne	.+6      	; 0x6fc <rotate+0x2a>
		set(PORTB,2);
     6f6:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     6f8:	2b 98       	cbi	0x05, 3	; 5
     6fa:	08 95       	ret
	}
	else if (dir == LEFT) {
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	11 f4       	brne	.+4      	; 0x704 <rotate+0x32>
		clear(PORTB,2);
     700:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     702:	2b 9a       	sbi	0x05, 3	; 5
     704:	08 95       	ret

00000706 <turn>:
	}
}

void turn(int dir,float speed, float degree) {
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	6a 01       	movw	r12, r20
     720:	7b 01       	movw	r14, r22
     722:	48 01       	movw	r8, r16
     724:	59 01       	movw	r10, r18
	set(PORTB,2);
     726:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     728:	2b 9a       	sbi	0x05, 3	; 5
	if (dir == LEFT) {
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	91 05       	cpc	r25, r1
     72e:	81 f5       	brne	.+96     	; 0x790 <turn+0x8a>
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     730:	60 91 96 00 	lds	r22, 0x0096
     734:	70 91 97 00 	lds	r23, 0x0097
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
     740:	a7 01       	movw	r20, r14
     742:	96 01       	movw	r18, r12
     744:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     748:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fixunssfsi>
     74c:	70 93 99 00 	sts	0x0099, r23
     750:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     754:	c0 91 88 00 	lds	r28, 0x0088
     758:	d0 91 89 00 	lds	r29, 0x0089
     75c:	a7 01       	movw	r20, r14
     75e:	96 01       	movw	r18, r12
     760:	c5 01       	movw	r24, r10
     762:	b4 01       	movw	r22, r8
     764:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     768:	6b 01       	movw	r12, r22
     76a:	7c 01       	movw	r14, r24
     76c:	be 01       	movw	r22, r28
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     782:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fixunssfsi>
     786:	70 93 8b 00 	sts	0x008B, r23
     78a:	60 93 8a 00 	sts	0x008A, r22
     78e:	31 c0       	rjmp	.+98     	; 0x7f2 <turn+0xec>
	}
	
		if (dir == RIGHT) {
     790:	89 2b       	or	r24, r25
     792:	79 f5       	brne	.+94     	; 0x7f2 <turn+0xec>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     794:	c0 91 96 00 	lds	r28, 0x0096
     798:	d0 91 97 00 	lds	r29, 0x0097
     79c:	9a 01       	movw	r18, r20
     79e:	ab 01       	movw	r20, r22
     7a0:	c5 01       	movw	r24, r10
     7a2:	b4 01       	movw	r22, r8
     7a4:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     7a8:	4b 01       	movw	r8, r22
     7aa:	5c 01       	movw	r10, r24
     7ac:	be 01       	movw	r22, r28
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	c5 01       	movw	r24, r10
     7bc:	b4 01       	movw	r22, r8
     7be:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     7c2:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fixunssfsi>
     7c6:	70 93 99 00 	sts	0x0099, r23
     7ca:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     7ce:	60 91 88 00 	lds	r22, 0x0088
     7d2:	70 91 89 00 	lds	r23, 0x0089
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
     7de:	a7 01       	movw	r20, r14
     7e0:	96 01       	movw	r18, r12
     7e2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     7e6:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fixunssfsi>
     7ea:	70 93 8b 00 	sts	0x008B, r23
     7ee:	60 93 8a 00 	sts	0x008A, r22
		}
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	9f 90       	pop	r9
     808:	8f 90       	pop	r8
     80a:	08 95       	ret

0000080c <reverse>:

void reverse(){
	OCR1B = OCR1A;
     80c:	80 91 88 00 	lds	r24, 0x0088
     810:	90 91 89 00 	lds	r25, 0x0089
     814:	90 93 8b 00 	sts	0x008B, r25
     818:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     81c:	80 91 96 00 	lds	r24, 0x0096
     820:	90 91 97 00 	lds	r25, 0x0097
     824:	90 93 99 00 	sts	0x0099, r25
     828:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     82c:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     82e:	2b 98       	cbi	0x05, 3	; 5
     830:	08 95       	ret

00000832 <drive_to_puck>:

void findPuck() {
	//TODO: Implement code
}

void drive_to_puck() {
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
		getADC();
     836:	0e 94 c2 01 	call	0x384	; 0x384 <getADC>
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	e0 e4       	ldi	r30, 0x40	; 64
     840:	f1 e0       	ldi	r31, 0x01	; 1
		index = 0;
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
			if (ADCarr[i] > maxval) {
     84a:	21 91       	ld	r18, Z+
     84c:	31 91       	ld	r19, Z+
     84e:	42 17       	cp	r20, r18
     850:	53 07       	cpc	r21, r19
     852:	14 f4       	brge	.+4      	; 0x858 <drive_to_puck+0x26>
				index = i;
     854:	bc 01       	movw	r22, r24
				maxval = ADCarr[i];
     856:	a9 01       	movw	r20, r18

void drive_to_puck() {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	87 30       	cpi	r24, 0x07	; 7
     85c:	91 05       	cpc	r25, r1
     85e:	a9 f7       	brne	.-22     	; 0x84a <drive_to_puck+0x18>
     860:	50 93 3d 01 	sts	0x013D, r21
     864:	40 93 3c 01 	sts	0x013C, r20
     868:	60 93 3e 01 	sts	0x013E, r22
     86c:	70 93 3f 01 	sts	0x013F, r23
			if (ADCarr[i] > maxval) {
				index = i;
				maxval = ADCarr[i];
			}
		}
		switch (index) {
     870:	63 30       	cpi	r22, 0x03	; 3
     872:	71 05       	cpc	r23, r1
     874:	09 f4       	brne	.+2      	; 0x878 <drive_to_puck+0x46>
     876:	86 c0       	rjmp	.+268    	; 0x984 <drive_to_puck+0x152>
     878:	4c f4       	brge	.+18     	; 0x88c <drive_to_puck+0x5a>
     87a:	61 30       	cpi	r22, 0x01	; 1
     87c:	71 05       	cpc	r23, r1
     87e:	09 f4       	brne	.+2      	; 0x882 <drive_to_puck+0x50>
     880:	68 c0       	rjmp	.+208    	; 0x952 <drive_to_puck+0x120>
     882:	0c f0       	brlt	.+2      	; 0x886 <drive_to_puck+0x54>
     884:	73 c0       	rjmp	.+230    	; 0x96c <drive_to_puck+0x13a>
     886:	67 2b       	or	r22, r23
     888:	61 f0       	breq	.+24     	; 0x8a2 <drive_to_puck+0x70>
     88a:	09 c1       	rjmp	.+530    	; 0xa9e <drive_to_puck+0x26c>
     88c:	65 30       	cpi	r22, 0x05	; 5
     88e:	71 05       	cpc	r23, r1
     890:	09 f4       	brne	.+2      	; 0x894 <drive_to_puck+0x62>
     892:	a1 c0       	rjmp	.+322    	; 0x9d6 <drive_to_puck+0x1a4>
     894:	0c f4       	brge	.+2      	; 0x898 <drive_to_puck+0x66>
     896:	93 c0       	rjmp	.+294    	; 0x9be <drive_to_puck+0x18c>
     898:	66 30       	cpi	r22, 0x06	; 6
     89a:	71 05       	cpc	r23, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <drive_to_puck+0x6e>
     89e:	ff c0       	rjmp	.+510    	; 0xa9e <drive_to_puck+0x26c>
     8a0:	a7 c0       	rjmp	.+334    	; 0x9f0 <drive_to_puck+0x1be>
			case 0: 
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     8a2:	00 91 40 01 	lds	r16, 0x0140
     8a6:	10 91 41 01 	lds	r17, 0x0141
     8aa:	b8 01       	movw	r22, r16
     8ac:	88 27       	eor	r24, r24
     8ae:	77 fd       	sbrc	r23, 7
     8b0:	80 95       	com	r24
     8b2:	98 2f       	mov	r25, r24
     8b4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     8b8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <log>
     8bc:	90 58       	subi	r25, 0x80	; 128
     8be:	2e ea       	ldi	r18, 0xAE	; 174
     8c0:	37 e4       	ldi	r19, 0x47	; 71
     8c2:	43 eb       	ldi	r20, 0xB3	; 179
     8c4:	52 e4       	ldi	r21, 0x42	; 66
     8c6:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     8ca:	2f e1       	ldi	r18, 0x1F	; 31
     8cc:	35 e2       	ldi	r19, 0x25	; 37
     8ce:	46 e2       	ldi	r20, 0x26	; 38
     8d0:	54 e4       	ldi	r21, 0x44	; 68
     8d2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
     8d6:	60 93 b5 01 	sts	0x01B5, r22
     8da:	70 93 b6 01 	sts	0x01B6, r23
     8de:	80 93 b7 01 	sts	0x01B7, r24
     8e2:	90 93 b8 01 	sts	0x01B8, r25
				diff = ADCarr[0] - ADCarr[6];
     8e6:	80 91 4c 01 	lds	r24, 0x014C
     8ea:	90 91 4d 01 	lds	r25, 0x014D
     8ee:	b8 01       	movw	r22, r16
     8f0:	68 1b       	sub	r22, r24
     8f2:	79 0b       	sbc	r23, r25
     8f4:	70 93 3b 01 	sts	0x013B, r23
     8f8:	60 93 3a 01 	sts	0x013A, r22
				deg = exp(-1.0*(fabs((float)diff))/70.0);
     8fc:	88 27       	eor	r24, r24
     8fe:	77 fd       	sbrc	r23, 7
     900:	80 95       	com	r24
     902:	98 2f       	mov	r25, r24
     904:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	bf 77       	andi	r27, 0x7F	; 127
     90e:	bc 01       	movw	r22, r24
     910:	cd 01       	movw	r24, r26
     912:	90 58       	subi	r25, 0x80	; 128
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	4c e8       	ldi	r20, 0x8C	; 140
     91a:	52 e4       	ldi	r21, 0x42	; 66
     91c:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     920:	0e 94 92 15 	call	0x2b24	; 0x2b24 <exp>
     924:	8b 01       	movw	r16, r22
     926:	9c 01       	movw	r18, r24
     928:	60 93 36 01 	sts	0x0136, r22
     92c:	70 93 37 01 	sts	0x0137, r23
     930:	80 93 38 01 	sts	0x0138, r24
     934:	90 93 39 01 	sts	0x0139, r25
				turn(RIGHT,1.0,deg);
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e8       	ldi	r22, 0x80	; 128
     93e:	7f e3       	ldi	r23, 0x3F	; 63
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 83 03 	call	0x706	; 0x706 <turn>
				m_green(ON);
     948:	6a 9a       	sbi	0x0d, 2	; 13
     94a:	72 98       	cbi	0x0e, 2	; 14
				m_red(OFF);
     94c:	6e 9a       	sbi	0x0d, 6	; 13
     94e:	76 9a       	sbi	0x0e, 6	; 14
     950:	aa c0       	rjmp	.+340    	; 0xaa6 <drive_to_puck+0x274>
				break;
			case 1:
				turn(RIGHT,1.0,0.15);
     952:	0a e9       	ldi	r16, 0x9A	; 154
     954:	19 e9       	ldi	r17, 0x99	; 153
     956:	29 e1       	ldi	r18, 0x19	; 25
     958:	3e e3       	ldi	r19, 0x3E	; 62
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	60 e8       	ldi	r22, 0x80	; 128
     960:	7f e3       	ldi	r23, 0x3F	; 63
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 83 03 	call	0x706	; 0x706 <turn>
				break;
     96a:	9d c0       	rjmp	.+314    	; 0xaa6 <drive_to_puck+0x274>
			case 2:
				turn(RIGHT,1.0,0);
     96c:	00 e0       	ldi	r16, 0x00	; 0
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	98 01       	movw	r18, r16
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e8       	ldi	r22, 0x80	; 128
     978:	7f e3       	ldi	r23, 0x3F	; 63
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 83 03 	call	0x706	; 0x706 <turn>
				break;
     982:	91 c0       	rjmp	.+290    	; 0xaa6 <drive_to_puck+0x274>
			case 3:
				if (ADCarr[2] > ADCarr[4]) {
     984:	20 91 44 01 	lds	r18, 0x0144
     988:	30 91 45 01 	lds	r19, 0x0145
     98c:	80 91 48 01 	lds	r24, 0x0148
     990:	90 91 49 01 	lds	r25, 0x0149
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	4c f4       	brge	.+18     	; 0x9ac <drive_to_puck+0x17a>
					rotate(RIGHT, 1);
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	60 e8       	ldi	r22, 0x80	; 128
     9a0:	7f e3       	ldi	r23, 0x3F	; 63
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <rotate>
     9aa:	7d c0       	rjmp	.+250    	; 0xaa6 <drive_to_puck+0x274>
				}
				else {
					rotate(LEFT, 1);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e8       	ldi	r22, 0x80	; 128
     9b2:	7f e3       	ldi	r23, 0x3F	; 63
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <rotate>
     9bc:	74 c0       	rjmp	.+232    	; 0xaa6 <drive_to_puck+0x274>
				}
				break;
			case 4:
				turn(LEFT,1.0,0);
     9be:	00 e0       	ldi	r16, 0x00	; 0
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	98 01       	movw	r18, r16
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e8       	ldi	r22, 0x80	; 128
     9ca:	7f e3       	ldi	r23, 0x3F	; 63
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 83 03 	call	0x706	; 0x706 <turn>
				break;
     9d4:	68 c0       	rjmp	.+208    	; 0xaa6 <drive_to_puck+0x274>
			case 5:
				turn(LEFT,1.0,0.15);
     9d6:	0a e9       	ldi	r16, 0x9A	; 154
     9d8:	19 e9       	ldi	r17, 0x99	; 153
     9da:	29 e1       	ldi	r18, 0x19	; 25
     9dc:	3e e3       	ldi	r19, 0x3E	; 62
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	60 e8       	ldi	r22, 0x80	; 128
     9e4:	7f e3       	ldi	r23, 0x3F	; 63
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 83 03 	call	0x706	; 0x706 <turn>
				break;
     9ee:	5b c0       	rjmp	.+182    	; 0xaa6 <drive_to_puck+0x274>
			case 6:
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     9f0:	00 91 40 01 	lds	r16, 0x0140
     9f4:	10 91 41 01 	lds	r17, 0x0141
     9f8:	b8 01       	movw	r22, r16
     9fa:	88 27       	eor	r24, r24
     9fc:	77 fd       	sbrc	r23, 7
     9fe:	80 95       	com	r24
     a00:	98 2f       	mov	r25, r24
     a02:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     a06:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <log>
     a0a:	90 58       	subi	r25, 0x80	; 128
     a0c:	2e ea       	ldi	r18, 0xAE	; 174
     a0e:	37 e4       	ldi	r19, 0x47	; 71
     a10:	43 eb       	ldi	r20, 0xB3	; 179
     a12:	52 e4       	ldi	r21, 0x42	; 66
     a14:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     a18:	2f e1       	ldi	r18, 0x1F	; 31
     a1a:	35 e2       	ldi	r19, 0x25	; 37
     a1c:	46 e2       	ldi	r20, 0x26	; 38
     a1e:	54 e4       	ldi	r21, 0x44	; 68
     a20:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
     a24:	60 93 b5 01 	sts	0x01B5, r22
     a28:	70 93 b6 01 	sts	0x01B6, r23
     a2c:	80 93 b7 01 	sts	0x01B7, r24
     a30:	90 93 b8 01 	sts	0x01B8, r25
				diff = ADCarr[6] - ADCarr[0];
     a34:	60 91 4c 01 	lds	r22, 0x014C
     a38:	70 91 4d 01 	lds	r23, 0x014D
     a3c:	60 1b       	sub	r22, r16
     a3e:	71 0b       	sbc	r23, r17
     a40:	70 93 3b 01 	sts	0x013B, r23
     a44:	60 93 3a 01 	sts	0x013A, r22
				deg = exp(-1.0*(fabs((float)diff))/70.0);
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	bf 77       	andi	r27, 0x7F	; 127
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	90 58       	subi	r25, 0x80	; 128
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4c e8       	ldi	r20, 0x8C	; 140
     a66:	52 e4       	ldi	r21, 0x42	; 66
     a68:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     a6c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <exp>
     a70:	8b 01       	movw	r16, r22
     a72:	9c 01       	movw	r18, r24
     a74:	60 93 36 01 	sts	0x0136, r22
     a78:	70 93 37 01 	sts	0x0137, r23
     a7c:	80 93 38 01 	sts	0x0138, r24
     a80:	90 93 39 01 	sts	0x0139, r25
				turn(LEFT,1.0,deg);
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	60 e8       	ldi	r22, 0x80	; 128
     a8a:	7f e3       	ldi	r23, 0x3F	; 63
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 83 03 	call	0x706	; 0x706 <turn>
				m_green(OFF);
     a94:	6a 9a       	sbi	0x0d, 2	; 13
     a96:	72 9a       	sbi	0x0e, 2	; 14
				m_red(ON);
     a98:	6e 9a       	sbi	0x0d, 6	; 13
     a9a:	76 98       	cbi	0x0e, 6	; 14
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <drive_to_puck+0x274>
				break;
			default:
				m_red(ON);
     a9e:	6e 9a       	sbi	0x0d, 6	; 13
     aa0:	76 98       	cbi	0x0e, 6	; 14
				m_green(ON);
     aa2:	6a 9a       	sbi	0x0d, 2	; 13
     aa4:	72 98       	cbi	0x0e, 2	; 14
				break;
		}
	//}
}
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <drive_to_point2>:
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     aac:	4f 92       	push	r4
     aae:	5f 92       	push	r5
     ab0:	6f 92       	push	r6
     ab2:	7f 92       	push	r7
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	ec 01       	movw	r28, r24
     ace:	7b 01       	movw	r14, r22
	m_green(ON);
     ad0:	6a 9a       	sbi	0x0d, 2	; 13
     ad2:	72 98       	cbi	0x0e, 2	; 14
	//m_wait(500);

	//while(1) {
		localize(data);
     ad4:	85 ec       	ldi	r24, 0xC5	; 197
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <localize>
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     adc:	be 01       	movw	r22, r28
     ade:	88 27       	eor	r24, r24
     ae0:	77 fd       	sbrc	r23, 7
     ae2:	80 95       	com	r24
     ae4:	98 2f       	mov	r25, r24
     ae6:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     aea:	20 91 c5 01 	lds	r18, 0x01C5
     aee:	30 91 c6 01 	lds	r19, 0x01C6
     af2:	40 91 c7 01 	lds	r20, 0x01C7
     af6:	50 91 c8 01 	lds	r21, 0x01C8
     afa:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
     afe:	06 2f       	mov	r16, r22
     b00:	17 2f       	mov	r17, r23
     b02:	d8 2f       	mov	r29, r24
     b04:	c9 2f       	mov	r28, r25
     b06:	b7 01       	movw	r22, r14
     b08:	88 27       	eor	r24, r24
     b0a:	77 fd       	sbrc	r23, 7
     b0c:	80 95       	com	r24
     b0e:	98 2f       	mov	r25, r24
     b10:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     b14:	20 91 c9 01 	lds	r18, 0x01C9
     b18:	30 91 ca 01 	lds	r19, 0x01CA
     b1c:	40 91 cb 01 	lds	r20, 0x01CB
     b20:	50 91 cc 01 	lds	r21, 0x01CC
     b24:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
     b28:	c6 2e       	mov	r12, r22
     b2a:	d7 2e       	mov	r13, r23
     b2c:	e8 2e       	mov	r14, r24
     b2e:	f9 2e       	mov	r15, r25
     b30:	20 2f       	mov	r18, r16
     b32:	31 2f       	mov	r19, r17
     b34:	4d 2f       	mov	r20, r29
     b36:	5c 2f       	mov	r21, r28
     b38:	6c 2d       	mov	r22, r12
     b3a:	7d 2d       	mov	r23, r13
     b3c:	8e 2d       	mov	r24, r14
     b3e:	9f 2d       	mov	r25, r15
     b40:	0e 94 cb 14 	call	0x2996	; 0x2996 <atan2>
     b44:	2b 01       	movw	r4, r22
     b46:	3c 01       	movw	r6, r24
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	44 eb       	ldi	r20, 0xB4	; 180
     b4e:	52 e4       	ldi	r21, 0x42	; 66
     b50:	60 91 cd 01 	lds	r22, 0x01CD
     b54:	70 91 ce 01 	lds	r23, 0x01CE
     b58:	80 91 cf 01 	lds	r24, 0x01CF
     b5c:	90 91 d0 01 	lds	r25, 0x01D0
     b60:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
     b64:	4b 01       	movw	r8, r22
     b66:	5c 01       	movw	r10, r24
     b68:	b7 fa       	bst	r11, 7
     b6a:	b0 94       	com	r11
     b6c:	b7 f8       	bld	r11, 7
     b6e:	b0 94       	com	r11
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	44 e3       	ldi	r20, 0x34	; 52
     b76:	53 e4       	ldi	r21, 0x43	; 67
     b78:	c3 01       	movw	r24, r6
     b7a:	b2 01       	movw	r22, r4
     b7c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     b80:	23 ec       	ldi	r18, 0xC3	; 195
     b82:	35 ef       	ldi	r19, 0xF5	; 245
     b84:	48 e4       	ldi	r20, 0x48	; 72
     b86:	50 e4       	ldi	r21, 0x40	; 64
     b88:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	c5 01       	movw	r24, r10
     b92:	b4 01       	movw	r22, r8
     b94:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
     b98:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixsfsi>
     b9c:	cb 01       	movw	r24, r22
     b9e:	8c 57       	subi	r24, 0x7C	; 124
     ba0:	9c 4f       	sbci	r25, 0xFC	; 252
     ba2:	68 e6       	ldi	r22, 0x68	; 104
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	0e 94 8c 18 	call	0x3118	; 0x3118 <__divmodhi4>
     baa:	bc 01       	movw	r22, r24
     bac:	64 5b       	subi	r22, 0xB4	; 180
     bae:	71 09       	sbc	r23, r1
     bb0:	88 27       	eor	r24, r24
     bb2:	77 fd       	sbrc	r23, 7
     bb4:	80 95       	com	r24
     bb6:	98 2f       	mov	r25, r24
     bb8:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     bbc:	4b 01       	movw	r8, r22
     bbe:	5c 01       	movw	r10, r24
     bc0:	60 93 22 01 	sts	0x0122, r22
     bc4:	70 93 23 01 	sts	0x0123, r23
     bc8:	80 93 24 01 	sts	0x0124, r24
     bcc:	90 93 25 01 	sts	0x0125, r25
		if (angle_dif > 0) {
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	a9 01       	movw	r20, r18
     bd6:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__gesf2>
     bda:	18 16       	cp	r1, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <__stack+0xe9>
			dir = RIGHT;
     bde:	10 92 19 01 	sts	0x0119, r1
     be2:	10 92 18 01 	sts	0x0118, r1
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <__stack+0xf5>
		}
		else {
			dir = LEFT;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 19 01 	sts	0x0119, r25
     bf0:	80 93 18 01 	sts	0x0118, r24
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     bf4:	e8 94       	clt
     bf6:	b7 f8       	bld	r11, 7
     bf8:	c5 01       	movw	r24, r10
     bfa:	b4 01       	movw	r22, r8
     bfc:	90 58       	subi	r25, 0x80	; 128
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 ef       	ldi	r20, 0xF0	; 240
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     c0a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <exp>
     c0e:	60 93 36 01 	sts	0x0136, r22
     c12:	70 93 37 01 	sts	0x0137, r23
     c16:	80 93 38 01 	sts	0x0138, r24
     c1a:	90 93 39 01 	sts	0x0139, r25
		//Set distance
		distance = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     c1e:	2c 2d       	mov	r18, r12
     c20:	3d 2d       	mov	r19, r13
     c22:	4e 2d       	mov	r20, r14
     c24:	5f 2d       	mov	r21, r15
     c26:	6c 2d       	mov	r22, r12
     c28:	7d 2d       	mov	r23, r13
     c2a:	8e 2d       	mov	r24, r14
     c2c:	9f 2d       	mov	r25, r15
     c2e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     c32:	6b 01       	movw	r12, r22
     c34:	7c 01       	movw	r14, r24
     c36:	20 2f       	mov	r18, r16
     c38:	31 2f       	mov	r19, r17
     c3a:	4d 2f       	mov	r20, r29
     c3c:	5c 2f       	mov	r21, r28
     c3e:	60 2f       	mov	r22, r16
     c40:	71 2f       	mov	r23, r17
     c42:	8d 2f       	mov	r24, r29
     c44:	9c 2f       	mov	r25, r28
     c46:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
     c56:	0e 94 25 18 	call	0x304a	; 0x304a <sqrt>
     c5a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixsfsi>
     c5e:	88 27       	eor	r24, r24
     c60:	77 fd       	sbrc	r23, 7
     c62:	80 95       	com	r24
     c64:	98 2f       	mov	r25, r24
     c66:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__floatsisf>
     c6a:	60 93 1e 01 	sts	0x011E, r22
     c6e:	70 93 1f 01 	sts	0x011F, r23
     c72:	80 93 20 01 	sts	0x0120, r24
     c76:	90 93 21 01 	sts	0x0121, r25
		spd = ((float)distance)/70.0;
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4c e8       	ldi	r20, 0x8C	; 140
     c80:	52 e4       	ldi	r21, 0x42	; 66
     c82:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
     c86:	60 93 1a 01 	sts	0x011A, r22
     c8a:	70 93 1b 01 	sts	0x011B, r23
     c8e:	80 93 1c 01 	sts	0x011C, r24
     c92:	90 93 1d 01 	sts	0x011D, r25
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     c96:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <m_usb_rx_char>
     c9a:	80 93 ba 01 	sts	0x01BA, r24

			m_usb_rx_flush();  				//clear buffer
     c9e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     ca2:	80 91 ba 01 	lds	r24, 0x01BA
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	09 f0       	breq	.+2      	; 0xcac <__stack+0x1ad>
     caa:	62 c0       	rjmp	.+196    	; 0xd70 <__stack+0x271>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     cac:	80 91 22 01 	lds	r24, 0x0122
     cb0:	90 91 23 01 	lds	r25, 0x0123
     cb4:	a0 91 24 01 	lds	r26, 0x0124
     cb8:	b0 91 25 01 	lds	r27, 0x0125
     cbc:	80 93 d1 01 	sts	0x01D1, r24
     cc0:	90 93 d2 01 	sts	0x01D2, r25
     cc4:	a0 93 d3 01 	sts	0x01D3, r26
     cc8:	b0 93 d4 01 	sts	0x01D4, r27
				data[4] = deg*100.0;
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	48 ec       	ldi	r20, 0xC8	; 200
     cd2:	52 e4       	ldi	r21, 0x42	; 66
     cd4:	60 91 36 01 	lds	r22, 0x0136
     cd8:	70 91 37 01 	lds	r23, 0x0137
     cdc:	80 91 38 01 	lds	r24, 0x0138
     ce0:	90 91 39 01 	lds	r25, 0x0139
     ce4:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     ce8:	60 93 d5 01 	sts	0x01D5, r22
     cec:	70 93 d6 01 	sts	0x01D6, r23
     cf0:	80 93 d7 01 	sts	0x01D7, r24
     cf4:	90 93 d8 01 	sts	0x01D8, r25
				data[5] = distance;
     cf8:	80 91 1e 01 	lds	r24, 0x011E
     cfc:	90 91 1f 01 	lds	r25, 0x011F
     d00:	a0 91 20 01 	lds	r26, 0x0120
     d04:	b0 91 21 01 	lds	r27, 0x0121
     d08:	80 93 d9 01 	sts	0x01D9, r24
     d0c:	90 93 da 01 	sts	0x01DA, r25
     d10:	a0 93 db 01 	sts	0x01DB, r26
     d14:	b0 93 dc 01 	sts	0x01DC, r27
				data[6] = spd*100.0;
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	48 ec       	ldi	r20, 0xC8	; 200
     d1e:	52 e4       	ldi	r21, 0x42	; 66
     d20:	60 91 1a 01 	lds	r22, 0x011A
     d24:	70 91 1b 01 	lds	r23, 0x011B
     d28:	80 91 1c 01 	lds	r24, 0x011C
     d2c:	90 91 1d 01 	lds	r25, 0x011D
     d30:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
     d34:	60 93 dd 01 	sts	0x01DD, r22
     d38:	70 93 de 01 	sts	0x01DE, r23
     d3c:	80 93 df 01 	sts	0x01DF, r24
     d40:	90 93 e0 01 	sts	0x01E0, r25
     d44:	c5 ec       	ldi	r28, 0xC5	; 197
     d46:	d1 e0       	ldi	r29, 0x01	; 1
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     d48:	01 ee       	ldi	r16, 0xE1	; 225
     d4a:	11 e0       	ldi	r17, 0x01	; 1
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     d4c:	69 91       	ld	r22, Y+
     d4e:	79 91       	ld	r23, Y+
     d50:	89 91       	ld	r24, Y+
     d52:	99 91       	ld	r25, Y+
     d54:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixsfsi>
     d58:	cb 01       	movw	r24, r22
     d5a:	0e 94 31 12 	call	0x2462	; 0x2462 <m_usb_tx_int>
					m_usb_tx_char('\t');
     d5e:	89 e0       	ldi	r24, 0x09	; 9
     d60:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     d64:	c0 17       	cp	r28, r16
     d66:	d1 07       	cpc	r29, r17
     d68:	89 f7       	brne	.-30     	; 0xd4c <__stack+0x24d>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     d70:	c0 90 00 01 	lds	r12, 0x0100
     d74:	d0 90 01 01 	lds	r13, 0x0101
     d78:	e0 90 02 01 	lds	r14, 0x0102
     d7c:	f0 90 03 01 	lds	r15, 0x0103
     d80:	a7 01       	movw	r20, r14
     d82:	96 01       	movw	r18, r12
     d84:	60 91 1a 01 	lds	r22, 0x011A
     d88:	70 91 1b 01 	lds	r23, 0x011B
     d8c:	80 91 1c 01 	lds	r24, 0x011C
     d90:	90 91 1d 01 	lds	r25, 0x011D
     d94:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__gesf2>
     d98:	18 16       	cp	r1, r24
     d9a:	44 f4       	brge	.+16     	; 0xdac <__stack+0x2ad>
     d9c:	c0 92 1a 01 	sts	0x011A, r12
     da0:	d0 92 1b 01 	sts	0x011B, r13
     da4:	e0 92 1c 01 	sts	0x011C, r14
     da8:	f0 92 1d 01 	sts	0x011D, r15
		turn(dir, spd, deg);
     dac:	00 91 36 01 	lds	r16, 0x0136
     db0:	10 91 37 01 	lds	r17, 0x0137
     db4:	20 91 38 01 	lds	r18, 0x0138
     db8:	30 91 39 01 	lds	r19, 0x0139
     dbc:	40 91 1a 01 	lds	r20, 0x011A
     dc0:	50 91 1b 01 	lds	r21, 0x011B
     dc4:	60 91 1c 01 	lds	r22, 0x011C
     dc8:	70 91 1d 01 	lds	r23, 0x011D
     dcc:	80 91 18 01 	lds	r24, 0x0118
     dd0:	90 91 19 01 	lds	r25, 0x0119
     dd4:	0e 94 83 03 	call	0x706	; 0x706 <turn>
		
	//}
	if (distance < 10) {
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e2       	ldi	r20, 0x20	; 32
     dde:	51 e4       	ldi	r21, 0x41	; 65
     de0:	60 91 1e 01 	lds	r22, 0x011E
     de4:	70 91 1f 01 	lds	r23, 0x011F
     de8:	80 91 20 01 	lds	r24, 0x0120
     dec:	90 91 21 01 	lds	r25, 0x0121
     df0:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__cmpsf2>
     df4:	88 23       	and	r24, r24
     df6:	84 f4       	brge	.+32     	; 0xe18 <__stack+0x319>
		m_red(ON);
     df8:	6e 9a       	sbi	0x0d, 6	; 13
     dfa:	76 98       	cbi	0x0e, 6	; 14
		reverse();
     dfc:	0e 94 06 04 	call	0x80c	; 0x80c <reverse>
		OCR1B = 0;
     e00:	10 92 8b 00 	sts	0x008B, r1
     e04:	10 92 8a 00 	sts	0x008A, r1
		OCR3A = 0;
     e08:	10 92 99 00 	sts	0x0099, r1
     e0c:	10 92 98 00 	sts	0x0098, r1
		state = 0;
     e10:	10 92 51 01 	sts	0x0151, r1
     e14:	10 92 50 01 	sts	0x0150, r1
	}
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	9f 90       	pop	r9
     e2e:	8f 90       	pop	r8
     e30:	7f 90       	pop	r7
     e32:	6f 90       	pop	r6
     e34:	5f 90       	pop	r5
     e36:	4f 90       	pop	r4
     e38:	08 95       	ret

00000e3a <drive_to_goalA>:

void drive_to_goalA() {
	drive_to_point2(GOALBX,GOALBY);
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	83 e7       	ldi	r24, 0x73	; 115
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 56 05 	call	0xaac	; 0xaac <drive_to_point2>
     e46:	08 95       	ret

00000e48 <drive_to_goalB>:
}

void drive_to_goalB() {
	drive_to_point2(GOALAX,GOALAY);
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	8d e8       	ldi	r24, 0x8D	; 141
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	0e 94 56 05 	call	0xaac	; 0xaac <drive_to_point2>
     e54:	08 95       	ret

00000e56 <shoot>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	83 ed       	ldi	r24, 0xD3	; 211
     e5a:	90 e3       	ldi	r25, 0x30	; 48
     e5c:	21 50       	subi	r18, 0x01	; 1
     e5e:	80 40       	sbci	r24, 0x00	; 0
     e60:	90 40       	sbci	r25, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <shoot+0x6>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <shoot+0x10>
     e66:	00 00       	nop
}

void shoot() {
	m_wait(1000);
	m_red(ON);
     e68:	6e 9a       	sbi	0x0d, 6	; 13
     e6a:	76 98       	cbi	0x0e, 6	; 14
	set(PORTB,7);
     e6c:	2f 9a       	sbi	0x05, 7	; 5
     e6e:	2f ef       	ldi	r18, 0xFF	; 255
     e70:	81 ee       	ldi	r24, 0xE1	; 225
     e72:	94 e0       	ldi	r25, 0x04	; 4
     e74:	21 50       	subi	r18, 0x01	; 1
     e76:	80 40       	sbci	r24, 0x00	; 0
     e78:	90 40       	sbci	r25, 0x00	; 0
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <shoot+0x1e>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <shoot+0x28>
     e7e:	00 00       	nop
	m_wait(100);
	clear(PORTB,7);
     e80:	2f 98       	cbi	0x05, 7	; 5
	m_red(OFF);
     e82:	6e 9a       	sbi	0x0d, 6	; 13
     e84:	76 9a       	sbi	0x0e, 6	; 14
     e86:	08 95       	ret

00000e88 <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     e88:	10 92 8b 00 	sts	0x008B, r1
     e8c:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     e90:	10 92 99 00 	sts	0x0099, r1
     e94:	10 92 98 00 	sts	0x0098, r1
     e98:	08 95       	ret

00000e9a <comm_test>:
	//set(PORTB,2);
	//set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     e9a:	5d 9a       	sbi	0x0b, 5	; 11
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	89 e6       	ldi	r24, 0x69	; 105
     ea0:	98 e1       	ldi	r25, 0x18	; 24
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	90 40       	sbci	r25, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <comm_test+0x8>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <comm_test+0x12>
     eac:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     eae:	5d 98       	cbi	0x0b, 5	; 11
     eb0:	2f ef       	ldi	r18, 0xFF	; 255
     eb2:	89 e6       	ldi	r24, 0x69	; 105
     eb4:	98 e1       	ldi	r25, 0x18	; 24
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	80 40       	sbci	r24, 0x00	; 0
     eba:	90 40       	sbci	r25, 0x00	; 0
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <comm_test+0x1c>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <comm_test+0x26>
     ec0:	00 00       	nop
	m_wait(500);
	state = 0;
     ec2:	10 92 51 01 	sts	0x0151, r1
     ec6:	10 92 50 01 	sts	0x0150, r1
     eca:	08 95       	ret

00000ecc <main>:

}

int main(void)
{
	set(DDRD,5);
     ecc:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     ece:	0e 94 fe 08 	call	0x11fc	; 0x11fc <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     ed2:	4a e0       	ldi	r20, 0x0A	; 10
     ed4:	68 e0       	ldi	r22, 0x08	; 8
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     edc:	e1 e6       	ldi	r30, 0x61	; 97
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	80 83       	st	Z, r24
     ee4:	10 82       	st	Z, r1
	
	m_disableJTAG();
     ee6:	85 bf       	out	0x35, r24	; 53
     ee8:	85 bf       	out	0x35, r24	; 53
// 	
// 	set(TCCR0B, CS02);
// 	set(TCCR0B, CS01);
// 	set(TCCR0B, CS00);
// 	
	set(DDRB,7);
     eea:	27 9a       	sbi	0x04, 7	; 4
// 	OCR0A = 0xFF;
// 	OCR0B = 0xff;
// 	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     eec:	e1 e8       	ldi	r30, 0x81	; 129
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     ef6:	80 81       	ld	r24, Z
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     efc:	a0 e8       	ldi	r26, 0x80	; 128
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	8c 91       	ld	r24, X
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     f06:	8c 91       	ld	r24, X
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     f0c:	8c 91       	ld	r24, X
     f0e:	80 62       	ori	r24, 0x20	; 32
     f10:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     f12:	8c 91       	ld	r24, X
     f14:	8f 7e       	andi	r24, 0xEF	; 239
     f16:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     f1e:	80 81       	ld	r24, Z
     f20:	8d 7f       	andi	r24, 0xFD	; 253
     f22:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     f24:	80 81       	ld	r24, Z
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	80 83       	st	Z, r24
	
	set(DDRB,6);
     f2a:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f ef       	ldi	r25, 0xFF	; 255
     f30:	90 93 89 00 	sts	0x0089, r25
     f34:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     f38:	10 92 8b 00 	sts	0x008B, r1
     f3c:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     f40:	e1 e9       	ldi	r30, 0x91	; 145
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	20 81       	ld	r18, Z
     f46:	20 61       	ori	r18, 0x10	; 16
     f48:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     f4a:	20 81       	ld	r18, Z
     f4c:	28 60       	ori	r18, 0x08	; 8
     f4e:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     f50:	a0 e9       	ldi	r26, 0x90	; 144
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	2c 91       	ld	r18, X
     f56:	22 60       	ori	r18, 0x02	; 2
     f58:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     f5a:	2c 91       	ld	r18, X
     f5c:	2e 7f       	andi	r18, 0xFE	; 254
     f5e:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     f60:	2c 91       	ld	r18, X
     f62:	20 68       	ori	r18, 0x80	; 128
     f64:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     f66:	2c 91       	ld	r18, X
     f68:	2f 7b       	andi	r18, 0xBF	; 191
     f6a:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     f6c:	20 81       	ld	r18, Z
     f6e:	2b 7f       	andi	r18, 0xFB	; 251
     f70:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     f72:	20 81       	ld	r18, Z
     f74:	2d 7f       	andi	r18, 0xFD	; 253
     f76:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     f78:	20 81       	ld	r18, Z
     f7a:	21 60       	ori	r18, 0x01	; 1
     f7c:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     f7e:	90 93 97 00 	sts	0x0097, r25
     f82:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     f86:	10 92 99 00 	sts	0x0099, r1
     f8a:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     f8e:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     f90:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     f92:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     f94:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     f96:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     f98:	78 94       	sei
	set(ADCSRA, ADIE);
     f9a:	ca e7       	ldi	r28, 0x7A	; 122
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
     f9e:	88 81       	ld	r24, Y
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	88 83       	st	Y, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     fa4:	ec e7       	ldi	r30, 0x7C	; 124
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8f 77       	andi	r24, 0x7F	; 127
     fac:	80 83       	st	Z, r24
	clear(ADMUX, REFS0);	//^
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7b       	andi	r24, 0xBF	; 191
     fb2:	80 83       	st	Z, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     fb4:	88 81       	ld	r24, Y
     fb6:	84 60       	ori	r24, 0x04	; 4
     fb8:	88 83       	st	Y, r24
	set(ADCSRA, ADPS1);	//^
     fba:	88 81       	ld	r24, Y
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	88 83       	st	Y, r24
	set(ADCSRA, ADPS0);	//^
     fc0:	88 81       	ld	r24, Y
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	88 83       	st	Y, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     fc6:	ee e7       	ldi	r30, 0x7E	; 126
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	80 83       	st	Z, r24
	set(DIDR0, ADC1D),
     fd0:	80 81       	ld	r24, Z
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	80 83       	st	Z, r24
	set(DIDR0, ADC4D);
     fd6:	80 81       	ld	r24, Z
     fd8:	80 61       	ori	r24, 0x10	; 16
     fda:	80 83       	st	Z, r24
	set(DIDR0, ADC5D);
     fdc:	80 81       	ld	r24, Z
     fde:	80 62       	ori	r24, 0x20	; 32
     fe0:	80 83       	st	Z, r24
	set(DIDR0, ADC6D);
     fe2:	80 81       	ld	r24, Z
     fe4:	80 64       	ori	r24, 0x40	; 64
     fe6:	80 83       	st	Z, r24
	set(DIDR2, ADC8D);
     fe8:	ed e7       	ldi	r30, 0x7D	; 125
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	80 83       	st	Z, r24
	set(DIDR2, ADC9D);
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     ff8:	88 81       	ld	r24, Y
     ffa:	80 62       	ori	r24, 0x20	; 32
     ffc:	88 83       	st	Y, r24
	
	chooseInput(0);
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
    1006:	88 81       	ld	r24, Y
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	88 83       	st	Y, r24
	set(ADCSRA, ADSC);	//^
    100c:	88 81       	ld	r24, Y
    100e:	80 64       	ori	r24, 0x40	; 64
    1010:	88 83       	st	Y, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
    1012:	88 81       	ld	r24, Y
    1014:	80 61       	ori	r24, 0x10	; 16
    1016:	88 83       	st	Y, r24
	
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
    1018:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
    101a:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
    101c:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
    101e:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 4; //set state
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	90 93 51 01 	sts	0x0151, r25
    1028:	80 93 50 01 	sts	0x0150, r24
	long count = 0;
	

	//m_bus_init();
	m_wii_open();
    102c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <m_wii_open>
	m_usb_init();
    1030:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <m_usb_init>
			break;
			
			case 69:
				set(PORTB,2);
				set(PORTB,3);
				OCR1B = OCR1A;
    1034:	0f 2e       	mov	r0, r31
    1036:	f8 e8       	ldi	r31, 0x88	; 136
    1038:	af 2e       	mov	r10, r31
    103a:	b1 2c       	mov	r11, r1
    103c:	f0 2d       	mov	r31, r0
    103e:	0f 2e       	mov	r0, r31
    1040:	fa e8       	ldi	r31, 0x8A	; 138
    1042:	cf 2e       	mov	r12, r31
    1044:	d1 2c       	mov	r13, r1
    1046:	f0 2d       	mov	r31, r0
				OCR3A = ICR3;
    1048:	0f 2e       	mov	r0, r31
    104a:	f6 e9       	ldi	r31, 0x96	; 150
    104c:	ef 2e       	mov	r14, r31
    104e:	f1 2c       	mov	r15, r1
    1050:	f0 2d       	mov	r31, r0
    1052:	08 e9       	ldi	r16, 0x98	; 152
    1054:	10 e0       	ldi	r17, 0x00	; 0
		//switch states
        switch (state) {
			
			case -2:
			getADC();
			if (ADCarr[0] > 500) {
    1056:	c0 e4       	ldi	r28, 0x40	; 64
    1058:	d1 e0       	ldi	r29, 0x01	; 1
// 			state = 2;
// 		}
	

		//switch states
        switch (state) {
    105a:	80 91 50 01 	lds	r24, 0x0150
    105e:	90 91 51 01 	lds	r25, 0x0151
	m_usb_init();
	//local_init();

    while(1)
    {
		changedState = 0;
    1062:	10 92 52 01 	sts	0x0152, r1
// 			state = 2;
// 		}
	

		//switch states
        switch (state) {
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <main+0x1a2>
    106c:	51 c0       	rjmp	.+162    	; 0x1110 <main+0x244>
    106e:	8c f4       	brge	.+34     	; 0x1092 <main+0x1c6>
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	09 f4       	brne	.+2      	; 0x1076 <main+0x1aa>
    1074:	44 c0       	rjmp	.+136    	; 0x10fe <main+0x232>
    1076:	44 f4       	brge	.+16     	; 0x1088 <main+0x1bc>
    1078:	8e 3f       	cpi	r24, 0xFE	; 254
    107a:	2f ef       	ldi	r18, 0xFF	; 255
    107c:	92 07       	cpc	r25, r18
    107e:	19 f1       	breq	.+70     	; 0x10c6 <main+0x1fa>
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	09 f0       	breq	.+2      	; 0x1086 <main+0x1ba>
    1084:	6d c0       	rjmp	.+218    	; 0x1160 <main+0x294>
    1086:	2c c0       	rjmp	.+88     	; 0x10e0 <main+0x214>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	91 05       	cpc	r25, r1
    108c:	d9 f1       	breq	.+118    	; 0x1104 <main+0x238>
    108e:	ec f5       	brge	.+122    	; 0x110a <main+0x23e>
    1090:	6a c0       	rjmp	.+212    	; 0x1166 <main+0x29a>
    1092:	81 3a       	cpi	r24, 0xA1	; 161
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <main+0x1ce>
    1098:	48 c0       	rjmp	.+144    	; 0x112a <main+0x25e>
    109a:	64 f4       	brge	.+24     	; 0x10b4 <main+0x1e8>
    109c:	86 34       	cpi	r24, 0x46	; 70
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <main+0x1d8>
    10a2:	5b c0       	rjmp	.+182    	; 0x115a <main+0x28e>
    10a4:	80 3a       	cpi	r24, 0xA0	; 160
    10a6:	91 05       	cpc	r25, r1
    10a8:	e9 f1       	breq	.+122    	; 0x1124 <main+0x258>
    10aa:	85 34       	cpi	r24, 0x45	; 69
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <main+0x1e6>
    10b0:	57 c0       	rjmp	.+174    	; 0x1160 <main+0x294>
    10b2:	44 c0       	rjmp	.+136    	; 0x113c <main+0x270>
    10b4:	83 3a       	cpi	r24, 0xA3	; 163
    10b6:	91 05       	cpc	r25, r1
    10b8:	f1 f1       	breq	.+124    	; 0x1136 <main+0x26a>
    10ba:	d4 f1       	brlt	.+116    	; 0x1130 <main+0x264>
    10bc:	84 3a       	cpi	r24, 0xA4	; 164
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <main+0x1f8>
    10c2:	4e c0       	rjmp	.+156    	; 0x1160 <main+0x294>
    10c4:	2c c0       	rjmp	.+88     	; 0x111e <main+0x252>
			
			case -2:
			getADC();
    10c6:	0e 94 c2 01 	call	0x384	; 0x384 <getADC>
			if (ADCarr[0] > 500) {
    10ca:	88 81       	ld	r24, Y
    10cc:	99 81       	ldd	r25, Y+1	; 0x01
    10ce:	85 3f       	cpi	r24, 0xF5	; 245
    10d0:	91 40       	sbci	r25, 0x01	; 1
    10d2:	1c f0       	brlt	.+6      	; 0x10da <main+0x20e>
				m_green(ON);
    10d4:	6a 9a       	sbi	0x0d, 2	; 13
    10d6:	72 98       	cbi	0x0e, 2	; 14
    10d8:	c0 cf       	rjmp	.-128    	; 0x105a <main+0x18e>
			}
			else {m_green(OFF)}
    10da:	6a 9a       	sbi	0x0d, 2	; 13
    10dc:	72 9a       	sbi	0x0e, 2	; 14
    10de:	bd cf       	rjmp	.-134    	; 0x105a <main+0x18e>
			break;
			
			case -1: //test Limit switches
				//m_green(ON);
				if (check(PINB,1)) {
    10e0:	19 9b       	sbis	0x03, 1	; 3
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <main+0x21e>
					
					m_green(ON);
    10e4:	6a 9a       	sbi	0x0d, 2	; 13
    10e6:	72 98       	cbi	0x0e, 2	; 14
    10e8:	b8 cf       	rjmp	.-144    	; 0x105a <main+0x18e>
				}
				
				else if (check(PINB,0)) {
    10ea:	18 9b       	sbis	0x03, 0	; 3
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <main+0x228>
					
					m_red(ON);
    10ee:	6e 9a       	sbi	0x0d, 6	; 13
    10f0:	76 98       	cbi	0x0e, 6	; 14
    10f2:	b3 cf       	rjmp	.-154    	; 0x105a <main+0x18e>
				}
				
				else {
					m_red(OFF);
    10f4:	6e 9a       	sbi	0x0d, 6	; 13
    10f6:	76 9a       	sbi	0x0e, 6	; 14
					m_green(OFF);
    10f8:	6a 9a       	sbi	0x0d, 2	; 13
    10fa:	72 9a       	sbi	0x0e, 2	; 14
    10fc:	ae cf       	rjmp	.-164    	; 0x105a <main+0x18e>
				
			break;

			case 0:
			//drive_to_point2(-100,0);
			game_pause();
    10fe:	0e 94 44 07 	call	0xe88	; 0xe88 <game_pause>
			break;
    1102:	ab cf       	rjmp	.-170    	; 0x105a <main+0x18e>
			findPuck();
			break;
			
			case 2:
			//m_red(ON);
			drive_to_puck();
    1104:	0e 94 19 04 	call	0x832	; 0x832 <drive_to_puck>
			break;
    1108:	a8 cf       	rjmp	.-176    	; 0x105a <main+0x18e>
			
			case 3:
			drive_to_goalA();
    110a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <drive_to_goalA>
			break;
    110e:	a5 cf       	rjmp	.-182    	; 0x105a <main+0x18e>
			
			case 4:
			shoot();
    1110:	0e 94 2b 07 	call	0xe56	; 0xe56 <shoot>
			state =  0;
    1114:	10 92 51 01 	sts	0x0151, r1
    1118:	10 92 50 01 	sts	0x0150, r1
			break;	
    111c:	9e cf       	rjmp	.-196    	; 0x105a <main+0x18e>
			
			case 0xA4:
			game_pause();
    111e:	0e 94 44 07 	call	0xe88	; 0xe88 <game_pause>
			break;
    1122:	9b cf       	rjmp	.-202    	; 0x105a <main+0x18e>
			
			case 0xA0:
			comm_test();
    1124:	0e 94 4d 07 	call	0xe9a	; 0xe9a <comm_test>
			break;
    1128:	98 cf       	rjmp	.-208    	; 0x105a <main+0x18e>
			
			case 0xA1:
			drive_to_goalA();
    112a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <drive_to_goalA>
			break;
    112e:	95 cf       	rjmp	.-214    	; 0x105a <main+0x18e>
			
			case 0xA2:
			drive_to_goalA();
    1130:	0e 94 1d 07 	call	0xe3a	; 0xe3a <drive_to_goalA>
			break;
    1134:	92 cf       	rjmp	.-220    	; 0x105a <main+0x18e>
			
			case 0xA3:
			drive_to_goalB();
    1136:	0e 94 24 07 	call	0xe48	; 0xe48 <drive_to_goalB>
			break;
    113a:	8f cf       	rjmp	.-226    	; 0x105a <main+0x18e>
			
			case 69:
				set(PORTB,2);
    113c:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
    113e:	2b 9a       	sbi	0x05, 3	; 5
				OCR1B = OCR1A;
    1140:	f5 01       	movw	r30, r10
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	f6 01       	movw	r30, r12
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
				OCR3A = ICR3;
    114c:	f7 01       	movw	r30, r14
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	f8 01       	movw	r30, r16
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
				break;
    1158:	80 cf       	rjmp	.-256    	; 0x105a <main+0x18e>
				
			case 70:
				reportADC();
    115a:	0e 94 89 02 	call	0x512	; 0x512 <reportADC>
				break;
    115e:	7d cf       	rjmp	.-262    	; 0x105a <main+0x18e>
			
			default:
			game_pause();
    1160:	0e 94 44 07 	call	0xe88	; 0xe88 <game_pause>
			break;
    1164:	7a cf       	rjmp	.-268    	; 0x105a <main+0x18e>
	m_usb_init();
	//local_init();

    while(1)
    {
		changedState = 0;
    1166:	10 92 52 01 	sts	0x0152, r1
    116a:	fd cf       	rjmp	.-6      	; 0x1166 <main+0x29a>

0000116c <__vector_3>:
        
    }
}


ISR(INT2_vect)  {
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
	cli();
    118e:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
    1190:	6a e0       	ldi	r22, 0x0A	; 10
    1192:	8b eb       	ldi	r24, 0xBB	; 187
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <m_rf_read>
	sei();
    119a:	78 94       	sei
	state=buffer[0];
    119c:	80 91 bb 01 	lds	r24, 0x01BB
    11a0:	80 93 50 01 	sts	0x0150, r24
    11a4:	10 92 51 01 	sts	0x0151, r1
	changedState = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 52 01 	sts	0x0152, r24
}
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_29>:

ISR(ADC_vect) {
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
	cli();
    11de:	f8 94       	cli
	conversion = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 27 01 	sts	0x0127, r25
    11e8:	80 93 26 01 	sts	0x0126, r24
	sei();
    11ec:	78 94       	sei
    11ee:	9f 91       	pop	r25
    11f0:	8f 91       	pop	r24
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    11fc:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    11fe:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1200:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1202:	8c e0       	ldi	r24, 0x0C	; 12
    1204:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1208:	e9 e6       	ldi	r30, 0x69	; 105
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 62       	ori	r24, 0x20	; 32
    1210:	80 83       	st	Z, r24
    1212:	80 81       	ld	r24, Z
    1214:	8f 7e       	andi	r24, 0xEF	; 239
    1216:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1218:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    121a:	78 94       	sei
    121c:	08 95       	ret

0000121e <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	8c 01       	movw	r16, r24
    1228:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
    122a:	89 e9       	ldi	r24, 0x99	; 153
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 bf 12 	call	0x257e	; 0x257e <m_wii_read>
	x[0] = blobs[0];
    1232:	80 91 99 01 	lds	r24, 0x0199
    1236:	90 91 9a 01 	lds	r25, 0x019A
    123a:	f8 01       	movw	r30, r16
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
	x[1] = blobs[3];
    1240:	80 91 9f 01 	lds	r24, 0x019F
    1244:	90 91 a0 01 	lds	r25, 0x01A0
    1248:	93 83       	std	Z+3, r25	; 0x03
    124a:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
    124c:	80 91 a5 01 	lds	r24, 0x01A5
    1250:	90 91 a6 01 	lds	r25, 0x01A6
    1254:	95 83       	std	Z+5, r25	; 0x05
    1256:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
    1258:	80 91 ab 01 	lds	r24, 0x01AB
    125c:	90 91 ac 01 	lds	r25, 0x01AC
    1260:	97 83       	std	Z+7, r25	; 0x07
    1262:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
    1264:	80 91 9b 01 	lds	r24, 0x019B
    1268:	90 91 9c 01 	lds	r25, 0x019C
    126c:	99 83       	std	Y+1, r25	; 0x01
    126e:	88 83       	st	Y, r24
	y[1] = blobs[4];
    1270:	80 91 a1 01 	lds	r24, 0x01A1
    1274:	90 91 a2 01 	lds	r25, 0x01A2
    1278:	9b 83       	std	Y+3, r25	; 0x03
    127a:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
    127c:	80 91 a7 01 	lds	r24, 0x01A7
    1280:	90 91 a8 01 	lds	r25, 0x01A8
    1284:	9d 83       	std	Y+5, r25	; 0x05
    1286:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
    1288:	80 91 ad 01 	lds	r24, 0x01AD
    128c:	90 91 ae 01 	lds	r25, 0x01AE
    1290:	9f 83       	std	Y+7, r25	; 0x07
    1292:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	08 95       	ret

000012a0 <determine_blobs>:

unsigned char determine_blobs() {
    12a0:	2f 92       	push	r2
    12a2:	3f 92       	push	r3
    12a4:	4f 92       	push	r4
    12a6:	5f 92       	push	r5
    12a8:	6f 92       	push	r6
    12aa:	7f 92       	push	r7
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	6c 97       	sbiw	r28, 0x1c	; 28
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
    12d4:	10 92 61 01 	sts	0x0161, r1
    12d8:	10 92 62 01 	sts	0x0162, r1
    12dc:	10 92 63 01 	sts	0x0163, r1
    12e0:	10 92 64 01 	sts	0x0164, r1
	distmin = 30000;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e6       	ldi	r25, 0x60	; 96
    12e8:	aa ee       	ldi	r26, 0xEA	; 234
    12ea:	b6 e4       	ldi	r27, 0x46	; 70
    12ec:	80 93 04 01 	sts	0x0104, r24
    12f0:	90 93 05 01 	sts	0x0105, r25
    12f4:	a0 93 06 01 	sts	0x0106, r26
    12f8:	b0 93 07 01 	sts	0x0107, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    12fc:	0f 2e       	mov	r0, r31
    12fe:	f3 e7       	ldi	r31, 0x73	; 115
    1300:	cf 2e       	mov	r12, r31
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	df 2e       	mov	r13, r31
    1306:	f0 2d       	mov	r31, r0
    1308:	05 e7       	ldi	r16, 0x75	; 117
    130a:	11 e0       	ldi	r17, 0x01	; 1
    130c:	0f 2e       	mov	r0, r31
    130e:	f7 e7       	ldi	r31, 0x77	; 119
    1310:	ef 2e       	mov	r14, r31
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	ff 2e       	mov	r15, r31
    1316:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
    1318:	69 e6       	ldi	r22, 0x69	; 105
    131a:	71 e0       	ldi	r23, 0x01	; 1
    131c:	81 e7       	ldi	r24, 0x71	; 113
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	0e 94 0f 09 	call	0x121e	; 0x121e <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    1324:	80 91 71 01 	lds	r24, 0x0171
    1328:	90 91 72 01 	lds	r25, 0x0172
    132c:	8f 3f       	cpi	r24, 0xFF	; 255
    132e:	93 40       	sbci	r25, 0x03	; 3
    1330:	98 f7       	brcc	.-26     	; 0x1318 <determine_blobs+0x78>
    1332:	f6 01       	movw	r30, r12
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	8f 3f       	cpi	r24, 0xFF	; 255
    133a:	93 40       	sbci	r25, 0x03	; 3
    133c:	68 f7       	brcc	.-38     	; 0x1318 <determine_blobs+0x78>
    133e:	f8 01       	movw	r30, r16
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	93 40       	sbci	r25, 0x03	; 3
    1348:	38 f7       	brcc	.-50     	; 0x1318 <determine_blobs+0x78>
    134a:	f7 01       	movw	r30, r14
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	8f 3f       	cpi	r24, 0xFF	; 255
    1352:	93 40       	sbci	r25, 0x03	; 3
    1354:	08 f7       	brcc	.-62     	; 0x1318 <determine_blobs+0x78>
    1356:	80 90 65 01 	lds	r8, 0x0165
    135a:	90 90 66 01 	lds	r9, 0x0166
    135e:	a0 90 67 01 	lds	r10, 0x0167
    1362:	b0 90 68 01 	lds	r11, 0x0168
    1366:	20 91 61 01 	lds	r18, 0x0161
    136a:	29 83       	std	Y+1, r18	; 0x01
    136c:	30 91 62 01 	lds	r19, 0x0162
    1370:	3a 83       	std	Y+2, r19	; 0x02
    1372:	40 91 63 01 	lds	r20, 0x0163
    1376:	4b 83       	std	Y+3, r20	; 0x03
    1378:	50 91 64 01 	lds	r21, 0x0164
    137c:	5c 83       	std	Y+4, r21	; 0x04
    137e:	60 91 5b 01 	lds	r22, 0x015B
    1382:	6b 8b       	std	Y+19, r22	; 0x13
    1384:	70 91 5c 01 	lds	r23, 0x015C
    1388:	7c 8b       	std	Y+20, r23	; 0x14
    138a:	80 91 59 01 	lds	r24, 0x0159
    138e:	89 8b       	std	Y+17, r24	; 0x11
    1390:	90 91 5a 01 	lds	r25, 0x015A
    1394:	9a 8b       	std	Y+18, r25	; 0x12
    1396:	e0 91 5d 01 	lds	r30, 0x015D
    139a:	ed 8b       	std	Y+21, r30	; 0x15
    139c:	f0 91 5e 01 	lds	r31, 0x015E
    13a0:	fe 8b       	std	Y+22, r31	; 0x16
    13a2:	20 91 5f 01 	lds	r18, 0x015F
    13a6:	2f 8b       	std	Y+23, r18	; 0x17
    13a8:	30 91 60 01 	lds	r19, 0x0160
    13ac:	38 8f       	std	Y+24, r19	; 0x18
    13ae:	40 91 04 01 	lds	r20, 0x0104
    13b2:	4d 83       	std	Y+5, r20	; 0x05
    13b4:	50 91 05 01 	lds	r21, 0x0105
    13b8:	5e 83       	std	Y+6, r21	; 0x06
    13ba:	20 90 06 01 	lds	r2, 0x0106
    13be:	30 90 07 01 	lds	r3, 0x0107
    13c2:	60 91 57 01 	lds	r22, 0x0157
    13c6:	69 8f       	std	Y+25, r22	; 0x19
    13c8:	70 91 58 01 	lds	r23, 0x0158
    13cc:	7a 8f       	std	Y+26, r23	; 0x1a
    13ce:	80 91 55 01 	lds	r24, 0x0155
    13d2:	90 91 56 01 	lds	r25, 0x0156
    13d6:	98 8b       	std	Y+16, r25	; 0x10
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
    13da:	18 86       	std	Y+8, r1	; 0x08
    13dc:	1f 82       	std	Y+7, r1	; 0x07
    13de:	c1 2c       	mov	r12, r1
    13e0:	d1 2c       	mov	r13, r1
    13e2:	b9 c0       	rjmp	.+370    	; 0x1556 <determine_blobs+0x2b6>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
    13e4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    13e6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    13e8:	e4 15       	cp	r30, r4
    13ea:	f5 05       	cpc	r31, r5
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <determine_blobs+0x150>
    13ee:	9c c0       	rjmp	.+312    	; 0x1528 <determine_blobs+0x288>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    13f0:	e9 85       	ldd	r30, Y+9	; 0x09
    13f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1400:	6b 01       	movw	r12, r22
    1402:	7c 01       	movw	r14, r24
    1404:	f3 01       	movw	r30, r6
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	c7 01       	movw	r24, r14
    1418:	b6 01       	movw	r22, r12
    141a:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    141e:	c6 2e       	mov	r12, r22
    1420:	d7 2e       	mov	r13, r23
    1422:	e8 2e       	mov	r14, r24
    1424:	f9 2e       	mov	r15, r25
    1426:	eb 85       	ldd	r30, Y+11	; 0x0b
    1428:	fc 85       	ldd	r31, Y+12	; 0x0c
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1436:	4b 01       	movw	r8, r22
    1438:	5c 01       	movw	r10, r24
    143a:	f8 01       	movw	r30, r16
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	c5 01       	movw	r24, r10
    144e:	b4 01       	movw	r22, r8
    1450:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    1454:	86 2e       	mov	r8, r22
    1456:	97 2e       	mov	r9, r23
    1458:	a8 2e       	mov	r10, r24
    145a:	b9 2e       	mov	r11, r25
    145c:	2c 2d       	mov	r18, r12
    145e:	3d 2d       	mov	r19, r13
    1460:	4e 2d       	mov	r20, r14
    1462:	5f 2d       	mov	r21, r15
    1464:	6c 2d       	mov	r22, r12
    1466:	7d 2d       	mov	r23, r13
    1468:	8e 2d       	mov	r24, r14
    146a:	9f 2d       	mov	r25, r15
    146c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1470:	6b 01       	movw	r12, r22
    1472:	7c 01       	movw	r14, r24
    1474:	28 2d       	mov	r18, r8
    1476:	39 2d       	mov	r19, r9
    1478:	4a 2d       	mov	r20, r10
    147a:	5b 2d       	mov	r21, r11
    147c:	68 2d       	mov	r22, r8
    147e:	79 2d       	mov	r23, r9
    1480:	8a 2d       	mov	r24, r10
    1482:	9b 2d       	mov	r25, r11
    1484:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1488:	9b 01       	movw	r18, r22
    148a:	ac 01       	movw	r20, r24
    148c:	c7 01       	movw	r24, r14
    148e:	b6 01       	movw	r22, r12
    1490:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
    1494:	0e 94 25 18 	call	0x304a	; 0x304a <sqrt>
    1498:	86 2e       	mov	r8, r22
    149a:	97 2e       	mov	r9, r23
    149c:	a8 2e       	mov	r10, r24
    149e:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
    14a0:	79 81       	ldd	r23, Y+1	; 0x01
    14a2:	6a 81       	ldd	r22, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	27 2f       	mov	r18, r23
    14aa:	36 2f       	mov	r19, r22
    14ac:	49 2f       	mov	r20, r25
    14ae:	58 2f       	mov	r21, r24
    14b0:	68 2d       	mov	r22, r8
    14b2:	79 2d       	mov	r23, r9
    14b4:	8a 2d       	mov	r24, r10
    14b6:	9b 2d       	mov	r25, r11
    14b8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__gesf2>
    14bc:	18 16       	cp	r1, r24
    14be:	d4 f4       	brge	.+52     	; 0x14f4 <determine_blobs+0x254>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	68 2d       	mov	r22, r8
    14ca:	79 2d       	mov	r23, r9
    14cc:	8a 2d       	mov	r24, r10
    14ce:	9b 2d       	mov	r25, r11
    14d0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    14d4:	6d 8b       	std	Y+21, r22	; 0x15
    14d6:	7e 8b       	std	Y+22, r23	; 0x16
    14d8:	8f 8b       	std	Y+23, r24	; 0x17
    14da:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
    14dc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    14de:	f9 8b       	std	Y+17, r31	; 0x11
    14e0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    14e2:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
    14e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    14e6:	3b 8b       	std	Y+19, r19	; 0x13
    14e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    14ea:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
    14ec:	89 82       	std	Y+1, r8	; 0x01
    14ee:	9a 82       	std	Y+2, r9	; 0x02
    14f0:	ab 82       	std	Y+3, r10	; 0x03
    14f2:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
    14f4:	7d 81       	ldd	r23, Y+5	; 0x05
    14f6:	6e 81       	ldd	r22, Y+6	; 0x06
    14f8:	27 2f       	mov	r18, r23
    14fa:	36 2f       	mov	r19, r22
    14fc:	42 2d       	mov	r20, r2
    14fe:	53 2d       	mov	r21, r3
    1500:	68 2d       	mov	r22, r8
    1502:	79 2d       	mov	r23, r9
    1504:	8a 2d       	mov	r24, r10
    1506:	9b 2d       	mov	r25, r11
    1508:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__cmpsf2>
    150c:	88 23       	and	r24, r24
    150e:	64 f4       	brge	.+24     	; 0x1528 <determine_blobs+0x288>
						distmin = dist;
						close1 = i;
						close2 = j;
    1510:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1512:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1514:	78 8b       	std	Y+16, r23	; 0x10
    1516:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    1518:	7d 85       	ldd	r23, Y+13	; 0x0d
    151a:	79 8f       	std	Y+25, r23	; 0x19
    151c:	8e 85       	ldd	r24, Y+14	; 0x0e
    151e:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
    1520:	8d 82       	std	Y+5, r8	; 0x05
    1522:	9e 82       	std	Y+6, r9	; 0x06
    1524:	2a 2c       	mov	r2, r10
    1526:	3b 2c       	mov	r3, r11
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	69 0e       	add	r6, r25
    152c:	71 1c       	adc	r7, r1
    152e:	0e 5f       	subi	r16, 0xFE	; 254
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
    1532:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1534:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1536:	31 96       	adiw	r30, 0x01	; 1
    1538:	fc 8f       	std	Y+28, r31	; 0x1c
    153a:	eb 8f       	std	Y+27, r30	; 0x1b
    153c:	34 97       	sbiw	r30, 0x04	; 4
    153e:	09 f0       	breq	.+2      	; 0x1542 <determine_blobs+0x2a2>
    1540:	51 cf       	rjmp	.-350    	; 0x13e4 <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
    1542:	2f 81       	ldd	r18, Y+7	; 0x07
    1544:	38 85       	ldd	r19, Y+8	; 0x08
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	38 87       	std	Y+8, r19	; 0x08
    154c:	2f 83       	std	Y+7, r18	; 0x07
    154e:	69 01       	movw	r12, r18
    1550:	24 30       	cpi	r18, 0x04	; 4
    1552:	31 05       	cpc	r19, r1
    1554:	39 f1       	breq	.+78     	; 0x15a4 <determine_blobs+0x304>
				for (int j = i; j < 4; j++) {
    1556:	34 e0       	ldi	r19, 0x04	; 4
    1558:	c3 16       	cp	r12, r19
    155a:	d1 04       	cpc	r13, r1
    155c:	94 f7       	brge	.-28     	; 0x1542 <determine_blobs+0x2a2>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    155e:	86 01       	movw	r16, r12
    1560:	0f 5f       	subi	r16, 0xFF	; 255
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
    1564:	00 0f       	add	r16, r16
    1566:	11 1f       	adc	r17, r17
    1568:	0f 2e       	mov	r0, r31
    156a:	f1 e7       	ldi	r31, 0x71	; 113
    156c:	ef 2e       	mov	r14, r31
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	ff 2e       	mov	r15, r31
    1572:	f0 2d       	mov	r31, r0
    1574:	e0 0e       	add	r14, r16
    1576:	f1 1e       	adc	r15, r17
    1578:	07 59       	subi	r16, 0x97	; 151
    157a:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    157c:	c6 01       	movw	r24, r12
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	ac 01       	movw	r20, r24
    1584:	4f 58       	subi	r20, 0x8F	; 143
    1586:	5e 4f       	sbci	r21, 0xFE	; 254
    1588:	5a 87       	std	Y+10, r21	; 0x0a
    158a:	49 87       	std	Y+9, r20	; 0x09
    158c:	bc 01       	movw	r22, r24
    158e:	67 59       	subi	r22, 0x97	; 151
    1590:	7e 4f       	sbci	r23, 0xFE	; 254
    1592:	7c 87       	std	Y+12, r23	; 0x0c
    1594:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    1596:	cd 86       	std	Y+13, r12	; 0x0d
    1598:	de 86       	std	Y+14, r13	; 0x0e
    159a:	dc 8e       	std	Y+28, r13	; 0x1c
    159c:	cb 8e       	std	Y+27, r12	; 0x1b
    159e:	26 01       	movw	r4, r12
    15a0:	37 01       	movw	r6, r14
    15a2:	c7 cf       	rjmp	.-114    	; 0x1532 <determine_blobs+0x292>
    15a4:	88 2d       	mov	r24, r8
    15a6:	99 2d       	mov	r25, r9
    15a8:	aa 2d       	mov	r26, r10
    15aa:	bb 2d       	mov	r27, r11
    15ac:	80 93 65 01 	sts	0x0165, r24
    15b0:	90 93 66 01 	sts	0x0166, r25
    15b4:	a0 93 67 01 	sts	0x0167, r26
    15b8:	b0 93 68 01 	sts	0x0168, r27
    15bc:	59 81       	ldd	r21, Y+1	; 0x01
    15be:	4a 81       	ldd	r20, Y+2	; 0x02
    15c0:	3b 81       	ldd	r19, Y+3	; 0x03
    15c2:	2c 81       	ldd	r18, Y+4	; 0x04
    15c4:	85 2f       	mov	r24, r21
    15c6:	94 2f       	mov	r25, r20
    15c8:	a3 2f       	mov	r26, r19
    15ca:	b2 2f       	mov	r27, r18
    15cc:	80 93 61 01 	sts	0x0161, r24
    15d0:	90 93 62 01 	sts	0x0162, r25
    15d4:	a0 93 63 01 	sts	0x0163, r26
    15d8:	b0 93 64 01 	sts	0x0164, r27
    15dc:	7b 89       	ldd	r23, Y+19	; 0x13
    15de:	70 93 5b 01 	sts	0x015B, r23
    15e2:	8c 89       	ldd	r24, Y+20	; 0x14
    15e4:	80 93 5c 01 	sts	0x015C, r24
    15e8:	99 89       	ldd	r25, Y+17	; 0x11
    15ea:	90 93 59 01 	sts	0x0159, r25
    15ee:	ea 89       	ldd	r30, Y+18	; 0x12
    15f0:	e0 93 5a 01 	sts	0x015A, r30
    15f4:	5d 89       	ldd	r21, Y+21	; 0x15
    15f6:	4e 89       	ldd	r20, Y+22	; 0x16
    15f8:	3f 89       	ldd	r19, Y+23	; 0x17
    15fa:	28 8d       	ldd	r18, Y+24	; 0x18
    15fc:	85 2f       	mov	r24, r21
    15fe:	94 2f       	mov	r25, r20
    1600:	a3 2f       	mov	r26, r19
    1602:	b2 2f       	mov	r27, r18
    1604:	80 93 5d 01 	sts	0x015D, r24
    1608:	90 93 5e 01 	sts	0x015E, r25
    160c:	a0 93 5f 01 	sts	0x015F, r26
    1610:	b0 93 60 01 	sts	0x0160, r27
    1614:	5d 81       	ldd	r21, Y+5	; 0x05
    1616:	4e 81       	ldd	r20, Y+6	; 0x06
    1618:	85 2f       	mov	r24, r21
    161a:	94 2f       	mov	r25, r20
    161c:	a2 2d       	mov	r26, r2
    161e:	b3 2d       	mov	r27, r3
    1620:	80 93 04 01 	sts	0x0104, r24
    1624:	90 93 05 01 	sts	0x0105, r25
    1628:	a0 93 06 01 	sts	0x0106, r26
    162c:	b0 93 07 01 	sts	0x0107, r27
    1630:	f9 8d       	ldd	r31, Y+25	; 0x19
    1632:	f0 93 57 01 	sts	0x0157, r31
    1636:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1638:	20 93 58 01 	sts	0x0158, r18
    163c:	3f 85       	ldd	r19, Y+15	; 0x0f
    163e:	30 93 55 01 	sts	0x0155, r19
    1642:	48 89       	ldd	r20, Y+16	; 0x10
    1644:	40 93 56 01 	sts	0x0156, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
    1648:	80 91 5b 01 	lds	r24, 0x015B
    164c:	90 91 5c 01 	lds	r25, 0x015C
    1650:	20 91 57 01 	lds	r18, 0x0157
    1654:	30 91 58 01 	lds	r19, 0x0158
    1658:	82 17       	cp	r24, r18
    165a:	93 07       	cpc	r25, r19
    165c:	19 f5       	brne	.+70     	; 0x16a4 <determine_blobs+0x404>
				top = far1;
    165e:	90 93 98 01 	sts	0x0198, r25
    1662:	80 93 97 01 	sts	0x0197, r24
				bottom = far2;
    1666:	40 91 59 01 	lds	r20, 0x0159
    166a:	50 91 5a 01 	lds	r21, 0x015A
    166e:	50 93 96 01 	sts	0x0196, r21
    1672:	40 93 95 01 	sts	0x0195, r20
				right = close2;
    1676:	20 91 55 01 	lds	r18, 0x0155
    167a:	30 91 56 01 	lds	r19, 0x0156
    167e:	30 93 92 01 	sts	0x0192, r19
    1682:	20 93 91 01 	sts	0x0191, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
    1686:	69 e0       	ldi	r22, 0x09	; 9
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	fb 01       	movw	r30, r22
    168c:	e8 1b       	sub	r30, r24
    168e:	f9 0b       	sbc	r31, r25
    1690:	cf 01       	movw	r24, r30
    1692:	84 1b       	sub	r24, r20
    1694:	95 0b       	sbc	r25, r21
    1696:	82 1b       	sub	r24, r18
    1698:	93 0b       	sbc	r25, r19
    169a:	90 93 94 01 	sts	0x0194, r25
    169e:	80 93 93 01 	sts	0x0193, r24
    16a2:	66 c0       	rjmp	.+204    	; 0x1770 <determine_blobs+0x4d0>
			}
			else if (far1 == close2) {
    16a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    16a6:	58 89       	ldd	r21, Y+16	; 0x10
    16a8:	84 17       	cp	r24, r20
    16aa:	95 07       	cpc	r25, r21
    16ac:	f9 f4       	brne	.+62     	; 0x16ec <determine_blobs+0x44c>
				top = far1;
    16ae:	90 93 98 01 	sts	0x0198, r25
    16b2:	80 93 97 01 	sts	0x0197, r24
				bottom = far2;
    16b6:	40 91 59 01 	lds	r20, 0x0159
    16ba:	50 91 5a 01 	lds	r21, 0x015A
    16be:	50 93 96 01 	sts	0x0196, r21
    16c2:	40 93 95 01 	sts	0x0195, r20
				right = close1;
    16c6:	30 93 92 01 	sts	0x0192, r19
    16ca:	20 93 91 01 	sts	0x0191, r18
				left = 9 - top - bottom - right;
    16ce:	69 e0       	ldi	r22, 0x09	; 9
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	fb 01       	movw	r30, r22
    16d4:	e8 1b       	sub	r30, r24
    16d6:	f9 0b       	sbc	r31, r25
    16d8:	cf 01       	movw	r24, r30
    16da:	84 1b       	sub	r24, r20
    16dc:	95 0b       	sbc	r25, r21
    16de:	82 1b       	sub	r24, r18
    16e0:	93 0b       	sbc	r25, r19
    16e2:	90 93 94 01 	sts	0x0194, r25
    16e6:	80 93 93 01 	sts	0x0193, r24
    16ea:	42 c0       	rjmp	.+132    	; 0x1770 <determine_blobs+0x4d0>
			}
			else if (far2 == close1) {
    16ec:	40 91 59 01 	lds	r20, 0x0159
    16f0:	50 91 5a 01 	lds	r21, 0x015A
    16f4:	24 17       	cp	r18, r20
    16f6:	35 07       	cpc	r19, r21
    16f8:	01 f5       	brne	.+64     	; 0x173a <determine_blobs+0x49a>
				top = far2;
    16fa:	30 93 98 01 	sts	0x0198, r19
    16fe:	20 93 97 01 	sts	0x0197, r18
				bottom = far1;
    1702:	90 93 96 01 	sts	0x0196, r25
    1706:	80 93 95 01 	sts	0x0195, r24
				right = close2;
    170a:	4f 85       	ldd	r20, Y+15	; 0x0f
    170c:	58 89       	ldd	r21, Y+16	; 0x10
    170e:	50 93 92 01 	sts	0x0192, r21
    1712:	40 93 91 01 	sts	0x0191, r20
				left = 9 - top - bottom - right;
    1716:	49 e0       	ldi	r20, 0x09	; 9
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	ba 01       	movw	r22, r20
    171c:	62 1b       	sub	r22, r18
    171e:	73 0b       	sbc	r23, r19
    1720:	fb 01       	movw	r30, r22
    1722:	e8 1b       	sub	r30, r24
    1724:	f9 0b       	sbc	r31, r25
    1726:	cf 01       	movw	r24, r30
    1728:	2f 85       	ldd	r18, Y+15	; 0x0f
    172a:	38 89       	ldd	r19, Y+16	; 0x10
    172c:	82 1b       	sub	r24, r18
    172e:	93 0b       	sbc	r25, r19
    1730:	90 93 94 01 	sts	0x0194, r25
    1734:	80 93 93 01 	sts	0x0193, r24
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <determine_blobs+0x4d0>
			}
			else {
				top = far2;
    173a:	50 93 98 01 	sts	0x0198, r21
    173e:	40 93 97 01 	sts	0x0197, r20
				bottom = far1;
    1742:	90 93 96 01 	sts	0x0196, r25
    1746:	80 93 95 01 	sts	0x0195, r24
				right = close1;
    174a:	30 93 92 01 	sts	0x0192, r19
    174e:	20 93 91 01 	sts	0x0191, r18
				left = 9 - top - bottom - right;
    1752:	69 e0       	ldi	r22, 0x09	; 9
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	fb 01       	movw	r30, r22
    1758:	e4 1b       	sub	r30, r20
    175a:	f5 0b       	sbc	r31, r21
    175c:	bf 01       	movw	r22, r30
    175e:	68 1b       	sub	r22, r24
    1760:	79 0b       	sbc	r23, r25
    1762:	cb 01       	movw	r24, r22
    1764:	82 1b       	sub	r24, r18
    1766:	93 0b       	sbc	r25, r19
    1768:	90 93 94 01 	sts	0x0194, r25
    176c:	80 93 93 01 	sts	0x0193, r24
			}
		}
	}
	return 1;
}
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	6c 96       	adiw	r28, 0x1c	; 28
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	08 95       	ret

000017a4 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    17a4:	2f 92       	push	r2
    17a6:	3f 92       	push	r3
    17a8:	4f 92       	push	r4
    17aa:	5f 92       	push	r5
    17ac:	6f 92       	push	r6
    17ae:	7f 92       	push	r7
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	2d 97       	sbiw	r28, 0x0d	; 13
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	8c 01       	movw	r16, r24
	numlost = 0;
    17da:	10 92 54 01 	sts	0x0154, r1
    17de:	10 92 53 01 	sts	0x0153, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    17e2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    17e6:	e0 90 97 01 	lds	r14, 0x0197
    17ea:	f0 90 98 01 	lds	r15, 0x0198
    17ee:	f7 01       	movw	r30, r14
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	ef 58       	subi	r30, 0x8F	; 143
    17f6:	fe 4f       	sbci	r31, 0xFE	; 254
    17f8:	20 81       	ld	r18, Z
    17fa:	31 81       	ldd	r19, Z+1	; 0x01
    17fc:	3a 83       	std	Y+2, r19	; 0x02
    17fe:	29 83       	std	Y+1, r18	; 0x01
    1800:	2f 3f       	cpi	r18, 0xFF	; 255
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	38 07       	cpc	r19, r24
    1806:	08 f0       	brcs	.+2      	; 0x180a <localize+0x66>
    1808:	ea c2       	rjmp	.+1492   	; 0x1dde <localize+0x63a>
    180a:	a0 90 95 01 	lds	r10, 0x0195
    180e:	b0 90 96 01 	lds	r11, 0x0196
    1812:	f5 01       	movw	r30, r10
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	ef 58       	subi	r30, 0x8F	; 143
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
    181c:	c0 80       	ld	r12, Z
    181e:	d1 80       	ldd	r13, Z+1	; 0x01
    1820:	9f ef       	ldi	r25, 0xFF	; 255
    1822:	c9 16       	cp	r12, r25
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	d9 06       	cpc	r13, r25
    1828:	08 f0       	brcs	.+2      	; 0x182c <localize+0x88>
    182a:	d9 c2       	rjmp	.+1458   	; 0x1dde <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    182c:	b9 01       	movw	r22, r18
    182e:	6c 0d       	add	r22, r12
    1830:	7d 1d       	adc	r23, r13
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1846:	20 91 0c 01 	lds	r18, 0x010C
    184a:	30 91 0d 01 	lds	r19, 0x010D
    184e:	40 91 0e 01 	lds	r20, 0x010E
    1852:	50 91 0f 01 	lds	r21, 0x010F
    1856:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    185a:	6d 83       	std	Y+5, r22	; 0x05
    185c:	7e 83       	std	Y+6, r23	; 0x06
    185e:	8f 83       	std	Y+7, r24	; 0x07
    1860:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    1862:	f7 01       	movw	r30, r14
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	e7 59       	subi	r30, 0x97	; 151
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	e0 80       	ld	r14, Z
    186e:	f1 80       	ldd	r15, Z+1	; 0x01
    1870:	f5 01       	movw	r30, r10
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	e7 59       	subi	r30, 0x97	; 151
    1878:	fe 4f       	sbci	r31, 0xFE	; 254
    187a:	a0 80       	ld	r10, Z
    187c:	b1 80       	ldd	r11, Z+1	; 0x01
    187e:	b5 01       	movw	r22, r10
    1880:	6e 0d       	add	r22, r14
    1882:	7f 1d       	adc	r23, r15
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1898:	20 91 08 01 	lds	r18, 0x0108
    189c:	30 91 09 01 	lds	r19, 0x0109
    18a0:	40 91 0a 01 	lds	r20, 0x010A
    18a4:	50 91 0b 01 	lds	r21, 0x010B
    18a8:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    18ac:	69 87       	std	Y+9, r22	; 0x09
    18ae:	7a 87       	std	Y+10, r23	; 0x0a
    18b0:	28 2e       	mov	r2, r24
    18b2:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    18b4:	b7 01       	movw	r22, r14
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    18be:	2b 01       	movw	r4, r22
    18c0:	3c 01       	movw	r6, r24
    18c2:	b5 01       	movw	r22, r10
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	c3 01       	movw	r24, r6
    18d2:	b2 01       	movw	r22, r4
    18d4:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    18d8:	4b 01       	movw	r8, r22
    18da:	5c 01       	movw	r10, r24
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	bf 01       	movw	r22, r30
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    18ea:	2b 01       	movw	r4, r22
    18ec:	3c 01       	movw	r6, r24
    18ee:	b6 01       	movw	r22, r12
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    18f8:	9b 01       	movw	r18, r22
    18fa:	ac 01       	movw	r20, r24
    18fc:	c3 01       	movw	r24, r6
    18fe:	b2 01       	movw	r22, r4
    1900:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    1904:	a5 01       	movw	r20, r10
    1906:	94 01       	movw	r18, r8
    1908:	0e 94 cb 14 	call	0x2996	; 0x2996 <atan2>
    190c:	4b 01       	movw	r8, r22
    190e:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    1910:	7d 81       	ldd	r23, Y+5	; 0x05
    1912:	6e 81       	ldd	r22, Y+6	; 0x06
    1914:	9f 81       	ldd	r25, Y+7	; 0x07
    1916:	88 85       	ldd	r24, Y+8	; 0x08
    1918:	27 2f       	mov	r18, r23
    191a:	36 2f       	mov	r19, r22
    191c:	49 2f       	mov	r20, r25
    191e:	58 2f       	mov	r21, r24
    1920:	b9 85       	ldd	r27, Y+9	; 0x09
    1922:	aa 85       	ldd	r26, Y+10	; 0x0a
    1924:	6b 2f       	mov	r22, r27
    1926:	7a 2f       	mov	r23, r26
    1928:	82 2d       	mov	r24, r2
    192a:	93 2d       	mov	r25, r3
    192c:	0e 94 cb 14 	call	0x2996	; 0x2996 <atan2>
    1930:	2b 01       	movw	r4, r22
    1932:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    1934:	7d 81       	ldd	r23, Y+5	; 0x05
    1936:	6e 81       	ldd	r22, Y+6	; 0x06
    1938:	9f 81       	ldd	r25, Y+7	; 0x07
    193a:	88 85       	ldd	r24, Y+8	; 0x08
    193c:	27 2f       	mov	r18, r23
    193e:	36 2f       	mov	r19, r22
    1940:	49 2f       	mov	r20, r25
    1942:	58 2f       	mov	r21, r24
    1944:	67 2f       	mov	r22, r23
    1946:	73 2f       	mov	r23, r19
    1948:	89 2f       	mov	r24, r25
    194a:	95 2f       	mov	r25, r21
    194c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1950:	6b 01       	movw	r12, r22
    1952:	7c 01       	movw	r14, r24
    1954:	79 85       	ldd	r23, Y+9	; 0x09
    1956:	6a 85       	ldd	r22, Y+10	; 0x0a
    1958:	27 2f       	mov	r18, r23
    195a:	36 2f       	mov	r19, r22
    195c:	42 2d       	mov	r20, r2
    195e:	53 2d       	mov	r21, r3
    1960:	67 2f       	mov	r22, r23
    1962:	73 2f       	mov	r23, r19
    1964:	82 2d       	mov	r24, r2
    1966:	93 2d       	mov	r25, r3
    1968:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	c7 01       	movw	r24, r14
    1972:	b6 01       	movw	r22, r12
    1974:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
    1978:	0e 94 25 18 	call	0x304a	; 0x304a <sqrt>
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	a9 01       	movw	r20, r18
    1986:	60 91 79 01 	lds	r22, 0x0179
    198a:	70 91 7a 01 	lds	r23, 0x017A
    198e:	80 91 7b 01 	lds	r24, 0x017B
    1992:	90 91 7c 01 	lds	r25, 0x017C
    1996:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__cmpsf2>
    199a:	81 11       	cpse	r24, r1
    199c:	08 c0       	rjmp	.+16     	; 0x19ae <localize+0x20a>
			ai1 = angle;
    199e:	80 92 79 01 	sts	0x0179, r8
    19a2:	90 92 7a 01 	sts	0x017A, r9
    19a6:	a0 92 7b 01 	sts	0x017B, r10
    19aa:	b0 92 7c 01 	sts	0x017C, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    19ae:	23 e3       	ldi	r18, 0x33	; 51
    19b0:	33 e3       	ldi	r19, 0x33	; 51
    19b2:	43 e7       	ldi	r20, 0x73	; 115
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	60 91 79 01 	lds	r22, 0x0179
    19ba:	70 91 7a 01 	lds	r23, 0x017A
    19be:	80 91 7b 01 	lds	r24, 0x017B
    19c2:	90 91 7c 01 	lds	r25, 0x017C
    19c6:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    19ca:	4b 01       	movw	r8, r22
    19cc:	5c 01       	movw	r10, r24
    19ce:	20 ed       	ldi	r18, 0xD0	; 208
    19d0:	3c ec       	ldi	r19, 0xCC	; 204
    19d2:	4c e4       	ldi	r20, 0x4C	; 76
    19d4:	5d e3       	ldi	r21, 0x3D	; 61
    19d6:	60 91 85 01 	lds	r22, 0x0185
    19da:	70 91 86 01 	lds	r23, 0x0186
    19de:	80 91 87 01 	lds	r24, 0x0187
    19e2:	90 91 88 01 	lds	r25, 0x0188
    19e6:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	c5 01       	movw	r24, r10
    19f0:	b4 01       	movw	r22, r8
    19f2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	44 e3       	ldi	r20, 0x34	; 52
    19fc:	53 e4       	ldi	r21, 0x43	; 67
    19fe:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1a02:	23 ec       	ldi	r18, 0xC3	; 195
    1a04:	35 ef       	ldi	r19, 0xF5	; 245
    1a06:	48 e4       	ldi	r20, 0x48	; 72
    1a08:	50 e4       	ldi	r21, 0x40	; 64
    1a0a:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
    1a0e:	86 2e       	mov	r8, r22
    1a10:	97 2e       	mov	r9, r23
    1a12:	a8 2e       	mov	r10, r24
    1a14:	b9 2e       	mov	r11, r25
    1a16:	f8 01       	movw	r30, r16
    1a18:	80 86       	std	Z+8, r8	; 0x08
    1a1a:	91 86       	std	Z+9, r9	; 0x09
    1a1c:	a2 86       	std	Z+10, r10	; 0x0a
    1a1e:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1a20:	23 ec       	ldi	r18, 0xC3	; 195
    1a22:	35 ef       	ldi	r19, 0xF5	; 245
    1a24:	48 e4       	ldi	r20, 0x48	; 72
    1a26:	50 e4       	ldi	r21, 0x40	; 64
    1a28:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	44 e3       	ldi	r20, 0x34	; 52
    1a32:	53 e4       	ldi	r21, 0x43	; 67
    1a34:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
    1a38:	9b 01       	movw	r18, r22
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	62 e5       	ldi	r22, 0x52	; 82
    1a3e:	78 eb       	ldi	r23, 0xB8	; 184
    1a40:	86 e9       	ldi	r24, 0x96	; 150
    1a42:	90 e4       	ldi	r25, 0x40	; 64
    1a44:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    1a48:	a3 01       	movw	r20, r6
    1a4a:	92 01       	movw	r18, r4
    1a4c:	0e 94 57 14 	call	0x28ae	; 0x28ae <__subsf3>
    1a50:	86 2e       	mov	r8, r22
    1a52:	97 2e       	mov	r9, r23
    1a54:	a8 2e       	mov	r10, r24
    1a56:	b9 2e       	mov	r11, r25
    1a58:	0e 94 1b 18 	call	0x3036	; 0x3036 <sin>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	c7 01       	movw	r24, r14
    1a62:	b6 01       	movw	r22, r12
    1a64:	90 58       	subi	r25, 0x80	; 128
    1a66:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1a6a:	29 e3       	ldi	r18, 0x39	; 57
    1a6c:	3e e8       	ldi	r19, 0x8E	; 142
    1a6e:	43 ea       	ldi	r20, 0xA3	; 163
    1a70:	5e e3       	ldi	r21, 0x3E	; 62
    1a72:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1a76:	69 83       	std	Y+1, r22	; 0x01
    1a78:	7b 87       	std	Y+11, r23	; 0x0b
    1a7a:	8d 87       	std	Y+13, r24	; 0x0d
    1a7c:	9c 87       	std	Y+12, r25	; 0x0c
    1a7e:	47 2f       	mov	r20, r23
    1a80:	38 2f       	mov	r19, r24
    1a82:	29 2f       	mov	r18, r25
    1a84:	86 2f       	mov	r24, r22
    1a86:	94 2f       	mov	r25, r20
    1a88:	a3 2f       	mov	r26, r19
    1a8a:	b2 2f       	mov	r27, r18
    1a8c:	80 93 8d 01 	sts	0x018D, r24
    1a90:	90 93 8e 01 	sts	0x018E, r25
    1a94:	a0 93 8f 01 	sts	0x018F, r26
    1a98:	b0 93 90 01 	sts	0x0190, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1a9c:	68 2d       	mov	r22, r8
    1a9e:	79 2d       	mov	r23, r9
    1aa0:	8a 2d       	mov	r24, r10
    1aa2:	9b 2d       	mov	r25, r11
    1aa4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <cos>
    1aa8:	a7 01       	movw	r20, r14
    1aaa:	96 01       	movw	r18, r12
    1aac:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1ab0:	29 e8       	ldi	r18, 0x89	; 137
    1ab2:	3a ed       	ldi	r19, 0xDA	; 218
    1ab4:	45 e9       	ldi	r20, 0x95	; 149
    1ab6:	5e e3       	ldi	r21, 0x3E	; 62
    1ab8:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1abc:	86 2e       	mov	r8, r22
    1abe:	97 2e       	mov	r9, r23
    1ac0:	a8 2e       	mov	r10, r24
    1ac2:	b9 2e       	mov	r11, r25
    1ac4:	86 2f       	mov	r24, r22
    1ac6:	99 2d       	mov	r25, r9
    1ac8:	aa 2d       	mov	r26, r10
    1aca:	bb 2d       	mov	r27, r11
    1acc:	80 93 89 01 	sts	0x0189, r24
    1ad0:	90 93 8a 01 	sts	0x018A, r25
    1ad4:	a0 93 8b 01 	sts	0x018B, r26
    1ad8:	b0 93 8c 01 	sts	0x018C, r27
		
		if (xi1 == 0 && yi1 == 0) {
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	60 91 81 01 	lds	r22, 0x0181
    1ae6:	70 91 82 01 	lds	r23, 0x0182
    1aea:	80 91 83 01 	lds	r24, 0x0183
    1aee:	90 91 84 01 	lds	r25, 0x0184
    1af2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__cmpsf2>
    1af6:	81 11       	cpse	r24, r1
    1af8:	2b c0       	rjmp	.+86     	; 0x1b50 <localize+0x3ac>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	a9 01       	movw	r20, r18
    1b00:	60 91 7d 01 	lds	r22, 0x017D
    1b04:	70 91 7e 01 	lds	r23, 0x017E
    1b08:	80 91 7f 01 	lds	r24, 0x017F
    1b0c:	90 91 80 01 	lds	r25, 0x0180
    1b10:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__cmpsf2>
    1b14:	81 11       	cpse	r24, r1
    1b16:	1c c0       	rjmp	.+56     	; 0x1b50 <localize+0x3ac>
			xi1 = xi;
    1b18:	59 81       	ldd	r21, Y+1	; 0x01
    1b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b1c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b20:	85 2f       	mov	r24, r21
    1b22:	94 2f       	mov	r25, r20
    1b24:	a3 2f       	mov	r26, r19
    1b26:	b2 2f       	mov	r27, r18
    1b28:	80 93 81 01 	sts	0x0181, r24
    1b2c:	90 93 82 01 	sts	0x0182, r25
    1b30:	a0 93 83 01 	sts	0x0183, r26
    1b34:	b0 93 84 01 	sts	0x0184, r27
			yi1 = yi;
    1b38:	88 2d       	mov	r24, r8
    1b3a:	99 2d       	mov	r25, r9
    1b3c:	aa 2d       	mov	r26, r10
    1b3e:	bb 2d       	mov	r27, r11
    1b40:	80 93 7d 01 	sts	0x017D, r24
    1b44:	90 93 7e 01 	sts	0x017E, r25
    1b48:	a0 93 7f 01 	sts	0x017F, r26
    1b4c:	b0 93 80 01 	sts	0x0180, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    1b50:	23 e3       	ldi	r18, 0x33	; 51
    1b52:	33 e3       	ldi	r19, 0x33	; 51
    1b54:	43 e7       	ldi	r20, 0x73	; 115
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	60 91 81 01 	lds	r22, 0x0181
    1b5c:	70 91 82 01 	lds	r23, 0x0182
    1b60:	80 91 83 01 	lds	r24, 0x0183
    1b64:	90 91 84 01 	lds	r25, 0x0184
    1b68:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1b6c:	4b 01       	movw	r8, r22
    1b6e:	5c 01       	movw	r10, r24
    1b70:	20 ed       	ldi	r18, 0xD0	; 208
    1b72:	3c ec       	ldi	r19, 0xCC	; 204
    1b74:	4c e4       	ldi	r20, 0x4C	; 76
    1b76:	5d e3       	ldi	r21, 0x3D	; 61
    1b78:	b9 81       	ldd	r27, Y+1	; 0x01
    1b7a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b7c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b80:	6b 2f       	mov	r22, r27
    1b82:	7a 2f       	mov	r23, r26
    1b84:	8f 2f       	mov	r24, r31
    1b86:	9e 2f       	mov	r25, r30
    1b88:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1b8c:	9b 01       	movw	r18, r22
    1b8e:	ac 01       	movw	r20, r24
    1b90:	c5 01       	movw	r24, r10
    1b92:	b4 01       	movw	r22, r8
    1b94:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	60 83       	st	Z, r22
    1b9c:	71 83       	std	Z+1, r23	; 0x01
    1b9e:	82 83       	std	Z+2, r24	; 0x02
    1ba0:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    1ba2:	80 90 89 01 	lds	r8, 0x0189
    1ba6:	90 90 8a 01 	lds	r9, 0x018A
    1baa:	a0 90 8b 01 	lds	r10, 0x018B
    1bae:	b0 90 8c 01 	lds	r11, 0x018C
    1bb2:	23 e3       	ldi	r18, 0x33	; 51
    1bb4:	33 e3       	ldi	r19, 0x33	; 51
    1bb6:	43 e7       	ldi	r20, 0x73	; 115
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	60 91 7d 01 	lds	r22, 0x017D
    1bbe:	70 91 7e 01 	lds	r23, 0x017E
    1bc2:	80 91 7f 01 	lds	r24, 0x017F
    1bc6:	90 91 80 01 	lds	r25, 0x0180
    1bca:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1bce:	69 83       	std	Y+1, r22	; 0x01
    1bd0:	7a 83       	std	Y+2, r23	; 0x02
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    1bd4:	9c 83       	std	Y+4, r25	; 0x04
    1bd6:	20 ed       	ldi	r18, 0xD0	; 208
    1bd8:	3c ec       	ldi	r19, 0xCC	; 204
    1bda:	4c e4       	ldi	r20, 0x4C	; 76
    1bdc:	5d e3       	ldi	r21, 0x3D	; 61
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1be6:	9b 01       	movw	r18, r22
    1be8:	ac 01       	movw	r20, r24
    1bea:	69 81       	ldd	r22, Y+1	; 0x01
    1bec:	7a 81       	ldd	r23, Y+2	; 0x02
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__addsf3>
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	64 83       	std	Z+4, r22	; 0x04
    1bfa:	75 83       	std	Z+5, r23	; 0x05
    1bfc:	86 83       	std	Z+6, r24	; 0x06
    1bfe:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1c00:	80 91 97 01 	lds	r24, 0x0197
    1c04:	90 91 98 01 	lds	r25, 0x0198
    1c08:	9c 01       	movw	r18, r24
    1c0a:	22 0f       	add	r18, r18
    1c0c:	33 1f       	adc	r19, r19
    1c0e:	3a 83       	std	Y+2, r19	; 0x02
    1c10:	29 83       	std	Y+1, r18	; 0x01
    1c12:	f9 01       	movw	r30, r18
    1c14:	ef 58       	subi	r30, 0x8F	; 143
    1c16:	fe 4f       	sbci	r31, 0xFE	; 254
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1c24:	f8 01       	movw	r30, r16
    1c26:	64 87       	std	Z+12, r22	; 0x0c
    1c28:	75 87       	std	Z+13, r23	; 0x0d
    1c2a:	86 87       	std	Z+14, r24	; 0x0e
    1c2c:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c30:	fa 81       	ldd	r31, Y+2	; 0x02
    1c32:	e7 59       	subi	r30, 0x97	; 151
    1c34:	fe 4f       	sbci	r31, 0xFE	; 254
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1c42:	f8 01       	movw	r30, r16
    1c44:	60 8b       	std	Z+16, r22	; 0x10
    1c46:	71 8b       	std	Z+17, r23	; 0x11
    1c48:	82 8b       	std	Z+18, r24	; 0x12
    1c4a:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1c4c:	80 91 95 01 	lds	r24, 0x0195
    1c50:	90 91 96 01 	lds	r25, 0x0196
    1c54:	9c 01       	movw	r18, r24
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	3a 83       	std	Y+2, r19	; 0x02
    1c5c:	29 83       	std	Y+1, r18	; 0x01
    1c5e:	f9 01       	movw	r30, r18
    1c60:	ef 58       	subi	r30, 0x8F	; 143
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1c70:	f8 01       	movw	r30, r16
    1c72:	64 8b       	std	Z+20, r22	; 0x14
    1c74:	75 8b       	std	Z+21, r23	; 0x15
    1c76:	86 8b       	std	Z+22, r24	; 0x16
    1c78:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7e:	e7 59       	subi	r30, 0x97	; 151
    1c80:	fe 4f       	sbci	r31, 0xFE	; 254
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1c8e:	f8 01       	movw	r30, r16
    1c90:	60 8f       	std	Z+24, r22	; 0x18
    1c92:	71 8f       	std	Z+25, r23	; 0x19
    1c94:	82 8f       	std	Z+26, r24	; 0x1a
    1c96:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1c98:	80 91 91 01 	lds	r24, 0x0191
    1c9c:	90 91 92 01 	lds	r25, 0x0192
    1ca0:	9c 01       	movw	r18, r24
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	3a 83       	std	Y+2, r19	; 0x02
    1ca8:	29 83       	std	Y+1, r18	; 0x01
    1caa:	f9 01       	movw	r30, r18
    1cac:	ef 58       	subi	r30, 0x8F	; 143
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	64 8f       	std	Z+28, r22	; 0x1c
    1cc0:	75 8f       	std	Z+29, r23	; 0x1d
    1cc2:	86 8f       	std	Z+30, r24	; 0x1e
    1cc4:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	e7 59       	subi	r30, 0x97	; 151
    1ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	60 a3       	std	Z+32, r22	; 0x20
    1cde:	71 a3       	std	Z+33, r23	; 0x21
    1ce0:	82 a3       	std	Z+34, r24	; 0x22
    1ce2:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1ce4:	80 91 93 01 	lds	r24, 0x0193
    1ce8:	90 91 94 01 	lds	r25, 0x0194
    1cec:	9c 01       	movw	r18, r24
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	3a 83       	std	Y+2, r19	; 0x02
    1cf4:	29 83       	std	Y+1, r18	; 0x01
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	ef 58       	subi	r30, 0x8F	; 143
    1cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1d08:	f8 01       	movw	r30, r16
    1d0a:	64 a3       	std	Z+36, r22	; 0x24
    1d0c:	75 a3       	std	Z+37, r23	; 0x25
    1d0e:	86 a3       	std	Z+38, r24	; 0x26
    1d10:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1d12:	e9 81       	ldd	r30, Y+1	; 0x01
    1d14:	fa 81       	ldd	r31, Y+2	; 0x02
    1d16:	e7 59       	subi	r30, 0x97	; 151
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__floatunsisf>
    1d26:	f8 01       	movw	r30, r16
    1d28:	60 a7       	std	Z+40, r22	; 0x28
    1d2a:	71 a7       	std	Z+41, r23	; 0x29
    1d2c:	82 a7       	std	Z+42, r24	; 0x2a
    1d2e:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	44 e3       	ldi	r20, 0x34	; 52
    1d36:	53 e4       	ldi	r21, 0x43	; 67
    1d38:	c3 01       	movw	r24, r6
    1d3a:	b2 01       	movw	r22, r4
    1d3c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsf3>
    1d40:	23 ec       	ldi	r18, 0xC3	; 195
    1d42:	35 ef       	ldi	r19, 0xF5	; 245
    1d44:	48 e4       	ldi	r20, 0x48	; 72
    1d46:	50 e4       	ldi	r21, 0x40	; 64
    1d48:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divsf3>
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	64 a7       	std	Z+44, r22	; 0x2c
    1d50:	75 a7       	std	Z+45, r23	; 0x2d
    1d52:	86 a7       	std	Z+46, r24	; 0x2e
    1d54:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    1d56:	5d 81       	ldd	r21, Y+5	; 0x05
    1d58:	4e 81       	ldd	r20, Y+6	; 0x06
    1d5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d5c:	28 85       	ldd	r18, Y+8	; 0x08
    1d5e:	85 2f       	mov	r24, r21
    1d60:	94 2f       	mov	r25, r20
    1d62:	a3 2f       	mov	r26, r19
    1d64:	b2 2f       	mov	r27, r18
    1d66:	80 ab       	std	Z+48, r24	; 0x30
    1d68:	91 ab       	std	Z+49, r25	; 0x31
    1d6a:	a2 ab       	std	Z+50, r26	; 0x32
    1d6c:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1d6e:	59 85       	ldd	r21, Y+9	; 0x09
    1d70:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d72:	85 2f       	mov	r24, r21
    1d74:	94 2f       	mov	r25, r20
    1d76:	a2 2d       	mov	r26, r2
    1d78:	b3 2d       	mov	r27, r3
    1d7a:	84 ab       	std	Z+52, r24	; 0x34
    1d7c:	95 ab       	std	Z+53, r25	; 0x35
    1d7e:	a6 ab       	std	Z+54, r26	; 0x36
    1d80:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    1d82:	c0 ae       	std	Z+56, r12	; 0x38
    1d84:	d1 ae       	std	Z+57, r13	; 0x39
    1d86:	e2 ae       	std	Z+58, r14	; 0x3a
    1d88:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1d8a:	80 91 8d 01 	lds	r24, 0x018D
    1d8e:	90 91 8e 01 	lds	r25, 0x018E
    1d92:	a0 91 8f 01 	lds	r26, 0x018F
    1d96:	b0 91 90 01 	lds	r27, 0x0190
    1d9a:	80 93 81 01 	sts	0x0181, r24
    1d9e:	90 93 82 01 	sts	0x0182, r25
    1da2:	a0 93 83 01 	sts	0x0183, r26
    1da6:	b0 93 84 01 	sts	0x0184, r27
		yi1 = yi;
    1daa:	80 92 7d 01 	sts	0x017D, r8
    1dae:	90 92 7e 01 	sts	0x017E, r9
    1db2:	a0 92 7f 01 	sts	0x017F, r10
    1db6:	b0 92 80 01 	sts	0x0180, r11
		ai1 = ai;
    1dba:	80 91 85 01 	lds	r24, 0x0185
    1dbe:	90 91 86 01 	lds	r25, 0x0186
    1dc2:	a0 91 87 01 	lds	r26, 0x0187
    1dc6:	b0 91 88 01 	lds	r27, 0x0188
    1dca:	80 93 79 01 	sts	0x0179, r24
    1dce:	90 93 7a 01 	sts	0x017A, r25
    1dd2:	a0 93 7b 01 	sts	0x017B, r26
    1dd6:	b0 93 7c 01 	sts	0x017C, r27
		
		return 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	00 c0       	rjmp	.+0      	; 0x1dde <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1dde:	2d 96       	adiw	r28, 0x0d	; 13
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	9f 90       	pop	r9
    1e00:	8f 90       	pop	r8
    1e02:	7f 90       	pop	r7
    1e04:	6f 90       	pop	r6
    1e06:	5f 90       	pop	r5
    1e08:	4f 90       	pop	r4
    1e0a:	3f 90       	pop	r3
    1e0c:	2f 90       	pop	r2
    1e0e:	08 95       	ret

00001e10 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	18 2f       	mov	r17, r24
    1e18:	d6 2f       	mov	r29, r22
    1e1a:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1e1c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1e20:	94 ea       	ldi	r25, 0xA4	; 164
    1e22:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1e26:	ec eb       	ldi	r30, 0xBC	; 188
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	90 81       	ld	r25, Z
    1e2c:	99 23       	and	r25, r25
    1e2e:	ec f7       	brge	.-6      	; 0x1e2a <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1e30:	90 e5       	ldi	r25, 0x50	; 80
    1e32:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e36:	94 e8       	ldi	r25, 0x84	; 132
    1e38:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1e3c:	ec eb       	ldi	r30, 0xBC	; 188
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	90 81       	ld	r25, Z
    1e42:	99 23       	and	r25, r25
    1e44:	ec f7       	brge	.-6      	; 0x1e40 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1e46:	90 91 b9 00 	lds	r25, 0x00B9
    1e4a:	98 7f       	andi	r25, 0xF8	; 248
    1e4c:	90 32       	cpi	r25, 0x20	; 32
    1e4e:	29 f4       	brne	.+10     	; 0x1e5a <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1e50:	84 e9       	ldi	r24, 0x94	; 148
    1e52:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	2d c0       	rjmp	.+90     	; 0x1eb4 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e60:	84 e8       	ldi	r24, 0x84	; 132
    1e62:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e66:	ec eb       	ldi	r30, 0xBC	; 188
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	90 81       	ld	r25, Z
    1e6c:	99 23       	and	r25, r25
    1e6e:	ec f7       	brge	.-6      	; 0x1e6a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1e70:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e74:	84 e8       	ldi	r24, 0x84	; 132
    1e76:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e7a:	ec eb       	ldi	r30, 0xBC	; 188
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 23       	and	r24, r24
    1e82:	ec f7       	brge	.-6      	; 0x1e7e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1e84:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e88:	84 e8       	ldi	r24, 0x84	; 132
    1e8a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e8e:	ec eb       	ldi	r30, 0xBC	; 188
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 23       	and	r24, r24
    1e96:	ec f7       	brge	.-6      	; 0x1e92 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1e98:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e9c:	84 e8       	ldi	r24, 0x84	; 132
    1e9e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ea2:	ec eb       	ldi	r30, 0xBC	; 188
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 23       	and	r24, r24
    1eaa:	ec f7       	brge	.-6      	; 0x1ea6 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1eac:	84 e9       	ldi	r24, 0x94	; 148
    1eae:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
}
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	08 95       	ret

00001ebc <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1ec0:	24 ea       	ldi	r18, 0xA4	; 164
    1ec2:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1ec6:	ec eb       	ldi	r30, 0xBC	; 188
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	20 81       	ld	r18, Z
    1ecc:	22 23       	and	r18, r18
    1ece:	ec f7       	brge	.-6      	; 0x1eca <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1ed0:	21 e5       	ldi	r18, 0x51	; 81
    1ed2:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ed6:	24 e8       	ldi	r18, 0x84	; 132
    1ed8:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1edc:	ec eb       	ldi	r30, 0xBC	; 188
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	20 81       	ld	r18, Z
    1ee2:	22 23       	and	r18, r18
    1ee4:	ec f7       	brge	.-6      	; 0x1ee0 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1ee6:	20 91 b9 00 	lds	r18, 0x00B9
    1eea:	28 7f       	andi	r18, 0xF8	; 248
    1eec:	28 34       	cpi	r18, 0x48	; 72
    1eee:	29 f4       	brne	.+10     	; 0x1efa <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1ef0:	84 e9       	ldi	r24, 0x94	; 148
    1ef2:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1efa:	24 ec       	ldi	r18, 0xC4	; 196
    1efc:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1f00:	ec eb       	ldi	r30, 0xBC	; 188
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	20 81       	ld	r18, Z
    1f06:	22 23       	and	r18, r18
    1f08:	ec f7       	brge	.-6      	; 0x1f04 <m_rf_read+0x48>
	bytes = TWDR;
    1f0a:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1f0e:	46 13       	cpse	r20, r22
    1f10:	09 c0       	rjmp	.+18     	; 0x1f24 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	41 50       	subi	r20, 0x01	; 1
    1f16:	51 09       	sbc	r21, r1
    1f18:	14 16       	cp	r1, r20
    1f1a:	15 06       	cpc	r1, r21
    1f1c:	44 f0       	brlt	.+16     	; 0x1f2e <m_rf_read+0x72>
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	18 c0       	rjmp	.+48     	; 0x1f54 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1f24:	84 e9       	ldi	r24, 0x94	; 148
    1f26:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	25 c0       	rjmp	.+74     	; 0x1f78 <m_rf_read+0xbc>
    1f2e:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1f34:	ec eb       	ldi	r30, 0xBC	; 188
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1f3a:	cb eb       	ldi	r28, 0xBB	; 187
    1f3c:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1f3e:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1f40:	60 81       	ld	r22, Z
    1f42:	66 23       	and	r22, r22
    1f44:	ec f7       	brge	.-6      	; 0x1f40 <m_rf_read+0x84>
		buffer[i] = TWDR;
    1f46:	68 81       	ld	r22, Y
    1f48:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1f4a:	2f 5f       	subi	r18, 0xFF	; 255
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	24 17       	cp	r18, r20
    1f50:	35 07       	cpc	r19, r21
    1f52:	ac f3       	brlt	.-22     	; 0x1f3e <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1f54:	24 e8       	ldi	r18, 0x84	; 132
    1f56:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1f5a:	ec eb       	ldi	r30, 0xBC	; 188
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	20 81       	ld	r18, Z
    1f60:	22 23       	and	r18, r18
    1f62:	ec f7       	brge	.-6      	; 0x1f5e <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    1f64:	20 91 bb 00 	lds	r18, 0x00BB
    1f68:	fc 01       	movw	r30, r24
    1f6a:	e4 0f       	add	r30, r20
    1f6c:	f5 1f       	adc	r31, r21
    1f6e:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f70:	84 e9       	ldi	r24, 0x94	; 148
    1f72:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	08 95       	ret

00001f7e <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1f84:	80 ea       	ldi	r24, 0xA0	; 160
    1f86:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1f8a:	82 e1       	ldi	r24, 0x12	; 18
    1f8c:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1f8e:	09 b4       	in	r0, 0x29	; 41
    1f90:	00 fe       	sbrs	r0, 0
    1f92:	fd cf       	rjmp	.-6      	; 0x1f8e <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1f94:	80 e9       	ldi	r24, 0x90	; 144
    1f96:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1f9a:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1f9e:	10 92 b2 01 	sts	0x01B2, r1
	cdc_line_rtsdtr = 0;
    1fa2:	10 92 b3 01 	sts	0x01B3, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1fa6:	8c e0       	ldi	r24, 0x0C	; 12
    1fa8:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1fac:	78 94       	sei
    1fae:	08 95       	ret

00001fb0 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    1fb0:	80 91 b2 01 	lds	r24, 0x01B2
}
    1fb4:	08 95       	ret

00001fb6 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1fb6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1fb8:	f8 94       	cli
	if (!usb_configuration) {
    1fba:	80 91 b2 01 	lds	r24, 0x01B2
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <m_usb_rx_char+0x12>
		SREG = intr_state;
    1fc2:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    1fce:	80 91 e8 00 	lds	r24, 0x00E8
    1fd2:	85 fd       	sbrc	r24, 5
    1fd4:	03 c0       	rjmp	.+6      	; 0x1fdc <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    1fd6:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    1fdc:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    1fe0:	20 91 e8 00 	lds	r18, 0x00E8
    1fe4:	25 fd       	sbrc	r18, 5
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <m_usb_rx_char+0x38>
    1fe8:	2b e6       	ldi	r18, 0x6B	; 107
    1fea:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    1fee:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    1ff0:	08 95       	ret

00001ff2 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1ff2:	80 91 b2 01 	lds	r24, 0x01B2
    1ff6:	88 23       	and	r24, r24
    1ff8:	89 f0       	breq	.+34     	; 0x201c <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    1ffa:	2f b7       	in	r18, 0x3f	; 63
		cli();
    1ffc:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    2004:	80 91 e8 00 	lds	r24, 0x00E8
    2008:	85 ff       	sbrs	r24, 5
    200a:	07 c0       	rjmp	.+14     	; 0x201a <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    200c:	e8 ee       	ldi	r30, 0xE8	; 232
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	9b e6       	ldi	r25, 0x6B	; 107
    2012:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    2014:	80 81       	ld	r24, Z
    2016:	85 fd       	sbrc	r24, 5
    2018:	fc cf       	rjmp	.-8      	; 0x2012 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    201a:	2f bf       	out	0x3f, r18	; 63
    201c:	08 95       	ret

0000201e <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2022:	90 91 b2 01 	lds	r25, 0x01B2
    2026:	99 23       	and	r25, r25
    2028:	09 f4       	brne	.+2      	; 0x202c <m_usb_tx_char+0xe>
    202a:	4d c0       	rjmp	.+154    	; 0x20c6 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    202c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    202e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2030:	24 e0       	ldi	r18, 0x04	; 4
    2032:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2036:	20 91 b4 01 	lds	r18, 0x01B4
    203a:	22 23       	and	r18, r18
    203c:	49 f0       	breq	.+18     	; 0x2050 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    203e:	20 91 e8 00 	lds	r18, 0x00E8
    2042:	25 fd       	sbrc	r18, 5
    2044:	03 c0       	rjmp	.+6      	; 0x204c <m_usb_tx_char+0x2e>
			SREG = intr_state;
    2046:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	42 c0       	rjmp	.+132    	; 0x20d0 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    204c:	10 92 b4 01 	sts	0x01B4, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2050:	30 91 e4 00 	lds	r19, 0x00E4
    2054:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2056:	20 91 e8 00 	lds	r18, 0x00E8
    205a:	25 fd       	sbrc	r18, 5
    205c:	25 c0       	rjmp	.+74     	; 0x20a8 <m_usb_tx_char+0x8a>
		SREG = intr_state;
    205e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2060:	90 91 e4 00 	lds	r25, 0x00E4
    2064:	93 17       	cp	r25, r19
    2066:	49 f0       	breq	.+18     	; 0x207a <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2068:	90 91 b2 01 	lds	r25, 0x01B2
    206c:	91 11       	cpse	r25, r1
    206e:	0f c0       	rjmp	.+30     	; 0x208e <m_usb_tx_char+0x70>
    2070:	2c c0       	rjmp	.+88     	; 0x20ca <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2072:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2074:	98 81       	ld	r25, Y
    2076:	93 13       	cpse	r25, r19
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 b4 01 	sts	0x01B4, r24
			return -1;
    2080:	8f ef       	ldi	r24, 0xFF	; 255
    2082:	26 c0       	rjmp	.+76     	; 0x20d0 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2084:	90 91 b2 01 	lds	r25, 0x01B2
    2088:	91 11       	cpse	r25, r1
    208a:	08 c0       	rjmp	.+16     	; 0x209c <m_usb_tx_char+0x7e>
    208c:	20 c0       	rjmp	.+64     	; 0x20ce <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    208e:	a9 ee       	ldi	r26, 0xE9	; 233
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2094:	e8 ee       	ldi	r30, 0xE8	; 232
    2096:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2098:	c4 ee       	ldi	r28, 0xE4	; 228
    209a:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    209c:	9f b7       	in	r25, 0x3f	; 63
		cli();
    209e:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    20a0:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    20a2:	20 81       	ld	r18, Z
    20a4:	25 ff       	sbrs	r18, 5
    20a6:	e5 cf       	rjmp	.-54     	; 0x2072 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    20a8:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    20ac:	80 91 e8 00 	lds	r24, 0x00E8
    20b0:	85 fd       	sbrc	r24, 5
    20b2:	03 c0       	rjmp	.+6      	; 0x20ba <m_usb_tx_char+0x9c>
    20b4:	8a e3       	ldi	r24, 0x3A	; 58
    20b6:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    20ba:	85 e0       	ldi	r24, 0x05	; 5
    20bc:	80 93 b1 01 	sts	0x01B1, r24
	SREG = intr_state;
    20c0:	9f bf       	out	0x3f, r25	; 63
	return 0;
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <m_usb_tx_char+0xb2>
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	08 95       	ret

000020d6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    20d6:	1f 92       	push	r1
    20d8:	0f 92       	push	r0
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	0f 92       	push	r0
    20de:	11 24       	eor	r1, r1
    20e0:	8f 93       	push	r24
    20e2:	9f 93       	push	r25
    20e4:	ef 93       	push	r30
    20e6:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    20e8:	e1 ee       	ldi	r30, 0xE1	; 225
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
        UDINT = 0;
    20ee:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    20f0:	83 ff       	sbrs	r24, 3
    20f2:	11 c0       	rjmp	.+34     	; 0x2116 <__vector_10+0x40>
		UENUM = 0;
    20f4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    20fe:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2102:	92 e1       	ldi	r25, 0x12	; 18
    2104:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2108:	98 e0       	ldi	r25, 0x08	; 8
    210a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    210e:	10 92 b2 01 	sts	0x01B2, r1
		cdc_line_rtsdtr = 0;
    2112:	10 92 b3 01 	sts	0x01B3, r1
        }
	if (intbits & (1<<SOFI)) {
    2116:	82 ff       	sbrs	r24, 2
    2118:	13 c0       	rjmp	.+38     	; 0x2140 <__vector_10+0x6a>
		if (usb_configuration) {
    211a:	80 91 b2 01 	lds	r24, 0x01B2
    211e:	88 23       	and	r24, r24
    2120:	79 f0       	breq	.+30     	; 0x2140 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2122:	80 91 b1 01 	lds	r24, 0x01B1
			if (t) {
    2126:	88 23       	and	r24, r24
    2128:	59 f0       	breq	.+22     	; 0x2140 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    212a:	81 50       	subi	r24, 0x01	; 1
    212c:	80 93 b1 01 	sts	0x01B1, r24
				if (!t) {
    2130:	81 11       	cpse	r24, r1
    2132:	06 c0       	rjmp	.+12     	; 0x2140 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2134:	84 e0       	ldi	r24, 0x04	; 4
    2136:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    213a:	8a e3       	ldi	r24, 0x3A	; 58
    213c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2140:	ff 91       	pop	r31
    2142:	ef 91       	pop	r30
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	2f 93       	push	r18
    2162:	3f 93       	push	r19
    2164:	4f 93       	push	r20
    2166:	5f 93       	push	r21
    2168:	6f 93       	push	r22
    216a:	7f 93       	push	r23
    216c:	8f 93       	push	r24
    216e:	9f 93       	push	r25
    2170:	af 93       	push	r26
    2172:	bf 93       	push	r27
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	ef 93       	push	r30
    217a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    217c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2180:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2184:	83 ff       	sbrs	r24, 3
    2186:	51 c1       	rjmp	.+674    	; 0x242a <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    2188:	e1 ef       	ldi	r30, 0xF1	; 241
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    218e:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2190:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2192:	30 81       	ld	r19, Z
    2194:	93 2f       	mov	r25, r19
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	dc 01       	movw	r26, r24
    219a:	a2 2b       	or	r26, r18
    219c:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    219e:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    21a0:	60 81       	ld	r22, Z
    21a2:	96 2f       	mov	r25, r22
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	85 2b       	or	r24, r21
                wLength = UEDATX;
    21a8:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    21aa:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    21ac:	52 ef       	ldi	r21, 0xF2	; 242
    21ae:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    21b2:	46 30       	cpi	r20, 0x06	; 6
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <__vector_11+0x66>
    21b6:	5c c0       	rjmp	.+184    	; 0x2270 <__vector_11+0x11e>
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    21ba:	81 e2       	ldi	r24, 0x21	; 33
    21bc:	80 93 eb 00 	sts	0x00EB, r24
					return;
    21c0:	3b c1       	rjmp	.+630    	; 0x2438 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    21c2:	c6 e0       	ldi	r28, 0x06	; 6
    21c4:	49 e7       	ldi	r20, 0x79	; 121
    21c6:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    21c8:	fa 01       	movw	r30, r20
    21ca:	65 91       	lpm	r22, Z+
    21cc:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    21ce:	26 17       	cp	r18, r22
    21d0:	37 07       	cpc	r19, r23
    21d2:	19 f0       	breq	.+6      	; 0x21da <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    21d4:	49 5f       	subi	r20, 0xF9	; 249
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    21d8:	20 c0       	rjmp	.+64     	; 0x221a <__vector_11+0xc8>
				}
				list += 2;
    21da:	fa 01       	movw	r30, r20
    21dc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    21de:	65 91       	lpm	r22, Z+
    21e0:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    21e2:	86 17       	cp	r24, r22
    21e4:	97 07       	cpc	r25, r23
    21e6:	19 f0       	breq	.+6      	; 0x21ee <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    21e8:	49 5f       	subi	r20, 0xF9	; 249
    21ea:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    21ec:	16 c0       	rjmp	.+44     	; 0x221a <__vector_11+0xc8>
				}
				list += 2;
    21ee:	fa 01       	movw	r30, r20
    21f0:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    21f2:	85 91       	lpm	r24, Z+
    21f4:	94 91       	lpm	r25, Z
    21f6:	28 2f       	mov	r18, r24
    21f8:	39 2f       	mov	r19, r25
				list += 2;
    21fa:	fa 01       	movw	r30, r20
    21fc:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    21fe:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2200:	9b 2f       	mov	r25, r27
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2206:	8f 3f       	cpi	r24, 0xFF	; 255
    2208:	91 05       	cpc	r25, r1
    220a:	19 f0       	breq	.+6      	; 0x2212 <__vector_11+0xc0>
    220c:	10 f0       	brcs	.+4      	; 0x2212 <__vector_11+0xc0>
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	84 17       	cp	r24, r20
    2214:	28 f4       	brcc	.+10     	; 0x2220 <__vector_11+0xce>
    2216:	48 2f       	mov	r20, r24
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <__vector_11+0xce>
    221a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    221c:	a9 f6       	brne	.-86     	; 0x21c8 <__vector_11+0x76>
    221e:	cd cf       	rjmp	.-102    	; 0x21ba <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2220:	c8 ee       	ldi	r28, 0xE8	; 232
    2222:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2224:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2226:	a1 ef       	ldi	r26, 0xF1	; 241
    2228:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    222a:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    222c:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    222e:	98 2f       	mov	r25, r24
    2230:	95 70       	andi	r25, 0x05	; 5
    2232:	e1 f3       	breq	.-8      	; 0x222c <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2234:	82 fd       	sbrc	r24, 2
    2236:	00 c1       	rjmp	.+512    	; 0x2438 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2238:	64 2f       	mov	r22, r20
    223a:	41 31       	cpi	r20, 0x11	; 17
    223c:	08 f0       	brcs	.+2      	; 0x2240 <__vector_11+0xee>
    223e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    2240:	66 23       	and	r22, r22
    2242:	09 f4       	brne	.+2      	; 0x2246 <__vector_11+0xf4>
    2244:	f6 c0       	rjmp	.+492    	; 0x2432 <__vector_11+0x2e0>
    2246:	c9 01       	movw	r24, r18
    2248:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    224a:	fc 01       	movw	r30, r24
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	e4 91       	lpm	r30, Z
    2250:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2252:	51 50       	subi	r21, 0x01	; 1
    2254:	d1 f7       	brne	.-12     	; 0x224a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2256:	86 2f       	mov	r24, r22
    2258:	81 50       	subi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	28 0f       	add	r18, r24
    2260:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2262:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2264:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2266:	41 11       	cpse	r20, r1
    2268:	e1 cf       	rjmp	.-62     	; 0x222c <__vector_11+0xda>
    226a:	60 31       	cpi	r22, 0x10	; 16
    226c:	f9 f2       	breq	.-66     	; 0x222c <__vector_11+0xda>
    226e:	e4 c0       	rjmp	.+456    	; 0x2438 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2270:	45 30       	cpi	r20, 0x05	; 5
    2272:	61 f4       	brne	.+24     	; 0x228c <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2274:	8e ef       	ldi	r24, 0xFE	; 254
    2276:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    227a:	e8 ee       	ldi	r30, 0xE8	; 232
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	80 ff       	sbrs	r24, 0
    2282:	fd cf       	rjmp	.-6      	; 0x227e <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2284:	20 68       	ori	r18, 0x80	; 128
    2286:	20 93 e3 00 	sts	0x00E3, r18
			return;
    228a:	d6 c0       	rjmp	.+428    	; 0x2438 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    228c:	49 30       	cpi	r20, 0x09	; 9
    228e:	a1 f5       	brne	.+104    	; 0x22f8 <__vector_11+0x1a6>
    2290:	71 11       	cpse	r23, r1
    2292:	5b c0       	rjmp	.+182    	; 0x234a <__vector_11+0x1f8>
			usb_configuration = wValue;
    2294:	20 93 b2 01 	sts	0x01B2, r18
			cdc_line_rtsdtr = 0;
    2298:	10 92 b3 01 	sts	0x01B3, r1
			transmit_flush_timer = 0;
    229c:	10 92 b1 01 	sts	0x01B1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    22a0:	8e ef       	ldi	r24, 0xFE	; 254
    22a2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    22a6:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    22a8:	83 ea       	ldi	r24, 0xA3	; 163
    22aa:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    22ac:	c9 ee       	ldi	r28, 0xE9	; 233
    22ae:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    22b0:	ab ee       	ldi	r26, 0xEB	; 235
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    22b4:	6c ee       	ldi	r22, 0xEC	; 236
    22b6:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    22b8:	4d ee       	ldi	r20, 0xED	; 237
    22ba:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    22bc:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    22be:	9c 01       	movw	r18, r24
    22c0:	2f 5f       	subi	r18, 0xFF	; 255
    22c2:	3f 4f       	sbci	r19, 0xFF	; 255
    22c4:	fc 01       	movw	r30, r24
    22c6:	04 91       	lpm	r16, Z
				UECONX = en;
    22c8:	0c 93       	st	X, r16
				if (en) {
    22ca:	00 23       	and	r16, r16
    22cc:	59 f0       	breq	.+22     	; 0x22e4 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    22ce:	f9 01       	movw	r30, r18
    22d0:	24 91       	lpm	r18, Z
    22d2:	fb 01       	movw	r30, r22
    22d4:	20 83       	st	Z, r18
    22d6:	fc 01       	movw	r30, r24
    22d8:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    22da:	03 96       	adiw	r24, 0x03	; 3
    22dc:	24 91       	lpm	r18, Z
    22de:	fa 01       	movw	r30, r20
    22e0:	20 83       	st	Z, r18
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    22e4:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    22e6:	1f 5f       	subi	r17, 0xFF	; 255
    22e8:	15 30       	cpi	r17, 0x05	; 5
    22ea:	41 f7       	brne	.-48     	; 0x22bc <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    22ec:	ea ee       	ldi	r30, 0xEA	; 234
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	8e e1       	ldi	r24, 0x1E	; 30
    22f2:	80 83       	st	Z, r24
        		UERST = 0;
    22f4:	10 82       	st	Z, r1
			return;
    22f6:	a0 c0       	rjmp	.+320    	; 0x2438 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    22f8:	48 30       	cpi	r20, 0x08	; 8
    22fa:	81 f4       	brne	.+32     	; 0x231c <__vector_11+0x1ca>
    22fc:	70 38       	cpi	r23, 0x80	; 128
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__vector_11+0x1b0>
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2302:	e8 ee       	ldi	r30, 0xE8	; 232
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 ff       	sbrs	r24, 0
    230a:	fd cf       	rjmp	.-6      	; 0x2306 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    230c:	80 91 b2 01 	lds	r24, 0x01B2
    2310:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2314:	8e ef       	ldi	r24, 0xFE	; 254
    2316:	80 93 e8 00 	sts	0x00E8, r24
    231a:	8e c0       	rjmp	.+284    	; 0x2438 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    231c:	41 32       	cpi	r20, 0x21	; 33
    231e:	a9 f4       	brne	.+42     	; 0x234a <__vector_11+0x1f8>
    2320:	71 3a       	cpi	r23, 0xA1	; 161
    2322:	f1 f5       	brne	.+124    	; 0x23a0 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2324:	e8 ee       	ldi	r30, 0xE8	; 232
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	80 ff       	sbrs	r24, 0
    232c:	fd cf       	rjmp	.-6      	; 0x2328 <__vector_11+0x1d6>
    232e:	e0 e1       	ldi	r30, 0x10	; 16
    2330:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2332:	a1 ef       	ldi	r26, 0xF1	; 241
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	81 91       	ld	r24, Z+
    2338:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	e7 31       	cpi	r30, 0x17	; 23
    233e:	f4 07       	cpc	r31, r20
    2340:	d1 f7       	brne	.-12     	; 0x2336 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2342:	8e ef       	ldi	r24, 0xFE	; 254
    2344:	80 93 e8 00 	sts	0x00E8, r24
    2348:	77 c0       	rjmp	.+238    	; 0x2438 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    234a:	40 32       	cpi	r20, 0x20	; 32
    234c:	c9 f4       	brne	.+50     	; 0x2380 <__vector_11+0x22e>
    234e:	71 32       	cpi	r23, 0x21	; 33
    2350:	09 f0       	breq	.+2      	; 0x2354 <__vector_11+0x202>
    2352:	6b c0       	rjmp	.+214    	; 0x242a <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2354:	e8 ee       	ldi	r30, 0xE8	; 232
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	82 ff       	sbrs	r24, 2
    235c:	fd cf       	rjmp	.-6      	; 0x2358 <__vector_11+0x206>
    235e:	e0 e1       	ldi	r30, 0x10	; 16
    2360:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2362:	a1 ef       	ldi	r26, 0xF1	; 241
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	8c 91       	ld	r24, X
    2368:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    236a:	51 e0       	ldi	r21, 0x01	; 1
    236c:	e7 31       	cpi	r30, 0x17	; 23
    236e:	f5 07       	cpc	r31, r21
    2370:	d1 f7       	brne	.-12     	; 0x2366 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2372:	e8 ee       	ldi	r30, 0xE8	; 232
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	8b ef       	ldi	r24, 0xFB	; 251
    2378:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    237a:	8e ef       	ldi	r24, 0xFE	; 254
    237c:	80 83       	st	Z, r24
    237e:	5c c0       	rjmp	.+184    	; 0x2438 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2380:	42 32       	cpi	r20, 0x22	; 34
    2382:	71 f4       	brne	.+28     	; 0x23a0 <__vector_11+0x24e>
    2384:	71 32       	cpi	r23, 0x21	; 33
    2386:	09 f0       	breq	.+2      	; 0x238a <__vector_11+0x238>
    2388:	50 c0       	rjmp	.+160    	; 0x242a <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    238a:	20 93 b3 01 	sts	0x01B3, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    238e:	e8 ee       	ldi	r30, 0xE8	; 232
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	80 ff       	sbrs	r24, 0
    2396:	fd cf       	rjmp	.-6      	; 0x2392 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2398:	8e ef       	ldi	r24, 0xFE	; 254
    239a:	80 93 e8 00 	sts	0x00E8, r24
    239e:	4c c0       	rjmp	.+152    	; 0x2438 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    23a0:	41 11       	cpse	r20, r1
    23a2:	1a c0       	rjmp	.+52     	; 0x23d8 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    23a4:	e8 ee       	ldi	r30, 0xE8	; 232
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	20 81       	ld	r18, Z
    23aa:	20 ff       	sbrs	r18, 0
    23ac:	fd cf       	rjmp	.-6      	; 0x23a8 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    23ae:	72 38       	cpi	r23, 0x82	; 130
    23b0:	51 f4       	brne	.+20     	; 0x23c6 <__vector_11+0x274>
				UENUM = wIndex;
    23b2:	e9 ee       	ldi	r30, 0xE9	; 233
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    23b8:	80 91 eb 00 	lds	r24, 0x00EB
    23bc:	85 fb       	bst	r24, 5
    23be:	88 27       	eor	r24, r24
    23c0:	80 f9       	bld	r24, 0
				UENUM = 0;
    23c2:	10 82       	st	Z, r1
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    23c6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    23c8:	e1 ef       	ldi	r30, 0xF1	; 241
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 83       	st	Z, r24
			UEDATX = 0;
    23ce:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    23d0:	8e ef       	ldi	r24, 0xFE	; 254
    23d2:	80 93 e8 00 	sts	0x00E8, r24
    23d6:	30 c0       	rjmp	.+96     	; 0x2438 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    23d8:	41 30       	cpi	r20, 0x01	; 1
    23da:	11 f0       	breq	.+4      	; 0x23e0 <__vector_11+0x28e>
    23dc:	43 30       	cpi	r20, 0x03	; 3
    23de:	29 f5       	brne	.+74     	; 0x242a <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    23e0:	72 30       	cpi	r23, 0x02	; 2
    23e2:	19 f5       	brne	.+70     	; 0x242a <__vector_11+0x2d8>
    23e4:	23 2b       	or	r18, r19
    23e6:	09 f5       	brne	.+66     	; 0x242a <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    23e8:	8f 77       	andi	r24, 0x7F	; 127
    23ea:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    23ec:	38 2f       	mov	r19, r24
    23ee:	31 50       	subi	r19, 0x01	; 1
    23f0:	34 30       	cpi	r19, 0x04	; 4
    23f2:	d8 f4       	brcc	.+54     	; 0x242a <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    23f4:	3e ef       	ldi	r19, 0xFE	; 254
    23f6:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    23fa:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    23fe:	43 30       	cpi	r20, 0x03	; 3
    2400:	21 f4       	brne	.+8      	; 0x240a <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2402:	81 e2       	ldi	r24, 0x21	; 33
    2404:	80 93 eb 00 	sts	0x00EB, r24
    2408:	17 c0       	rjmp	.+46     	; 0x2438 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    240a:	99 e1       	ldi	r25, 0x19	; 25
    240c:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    2410:	21 e0       	ldi	r18, 0x01	; 1
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	d9 01       	movw	r26, r18
    2416:	02 c0       	rjmp	.+4      	; 0x241c <__vector_11+0x2ca>
    2418:	aa 0f       	add	r26, r26
    241a:	bb 1f       	adc	r27, r27
    241c:	8a 95       	dec	r24
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <__vector_11+0x2c6>
    2420:	ea ee       	ldi	r30, 0xEA	; 234
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	a0 83       	st	Z, r26
					UERST = 0;
    2426:	10 82       	st	Z, r1
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    242a:	81 e2       	ldi	r24, 0x21	; 33
    242c:	80 93 eb 00 	sts	0x00EB, r24
    2430:	03 c0       	rjmp	.+6      	; 0x2438 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2432:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2434:	41 11       	cpse	r20, r1
    2436:	fa ce       	rjmp	.-524    	; 0x222c <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	bf 91       	pop	r27
    2442:	af 91       	pop	r26
    2444:	9f 91       	pop	r25
    2446:	8f 91       	pop	r24
    2448:	7f 91       	pop	r23
    244a:	6f 91       	pop	r22
    244c:	5f 91       	pop	r21
    244e:	4f 91       	pop	r20
    2450:	3f 91       	pop	r19
    2452:	2f 91       	pop	r18
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	0f 90       	pop	r0
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	0f 90       	pop	r0
    245e:	1f 90       	pop	r1
    2460:	18 95       	reti

00002462 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	27 97       	sbiw	r28, 0x07	; 7
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    247e:	8e 01       	movw	r16, r28
    2480:	0f 5f       	subi	r16, 0xFF	; 255
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	27 e0       	ldi	r18, 0x07	; 7
    2486:	f8 01       	movw	r30, r16
    2488:	11 92       	st	Z+, r1
    248a:	2a 95       	dec	r18
    248c:	e9 f7       	brne	.-6      	; 0x2488 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    248e:	4a e0       	ldi	r20, 0x0A	; 10
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	b8 01       	movw	r22, r16
    2494:	0e 94 b4 18 	call	0x3168	; 0x3168 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    2498:	7e 01       	movw	r14, r28
    249a:	f8 e0       	ldi	r31, 0x08	; 8
    249c:	ef 0e       	add	r14, r31
    249e:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    24a0:	f8 01       	movw	r30, r16
    24a2:	81 91       	ld	r24, Z+
    24a4:	8f 01       	movw	r16, r30
    24a6:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    24a8:	0e 94 0f 10 	call	0x201e	; 0x201e <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    24ac:	0e 15       	cp	r16, r14
    24ae:	1f 05       	cpc	r17, r15
    24b0:	b9 f7       	brne	.-18     	; 0x24a0 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    24b2:	27 96       	adiw	r28, 0x07	; 7
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	08 95       	ret

000024cc <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    24d0:	ec eb       	ldi	r30, 0xBC	; 188
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	88 23       	and	r24, r24
    24d8:	34 f0       	brlt	.+12     	; 0x24e6 <twi_wait+0x1a>
    24da:	2f 5f       	subi	r18, 0xFF	; 255
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	29 3e       	cpi	r18, 0xE9	; 233
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	38 07       	cpc	r19, r24
    24e4:	b9 f7       	brne	.-18     	; 0x24d4 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	28 3e       	cpi	r18, 0xE8	; 232
    24ea:	33 40       	sbci	r19, 0x03	; 3
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <twi_wait+0x24>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    24f0:	08 95       	ret

000024f2 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    24f2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    24f6:	84 e8       	ldi	r24, 0x84	; 132
    24f8:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    24fc:	0e 94 66 12 	call	0x24cc	; 0x24cc <twi_wait>
    2500:	88 23       	and	r24, r24
    2502:	21 f0       	breq	.+8      	; 0x250c <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2504:	80 91 b9 00 	lds	r24, 0x00B9
    2508:	88 7f       	andi	r24, 0xF8	; 248
    250a:	08 95       	ret
	} else {
		return 0;					// comm failure
    250c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    250e:	08 95       	ret

00002510 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2510:	cf 93       	push	r28
    2512:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2514:	94 ea       	ldi	r25, 0xA4	; 164
    2516:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    251a:	0e 94 66 12 	call	0x24cc	; 0x24cc <twi_wait>
    251e:	88 23       	and	r24, r24
    2520:	61 f0       	breq	.+24     	; 0x253a <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2522:	8c 2f       	mov	r24, r28
    2524:	88 0f       	add	r24, r24
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    252c:	88 34       	cpi	r24, 0x48	; 72
    252e:	39 f4       	brne	.+14     	; 0x253e <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2530:	84 e9       	ldi	r24, 0x94	; 148
    2532:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    253e:	81 e0       	ldi	r24, 0x01	; 1
}	
    2540:	cf 91       	pop	r28
    2542:	08 95       	ret

00002544 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2544:	cf 93       	push	r28
    2546:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2548:	94 ea       	ldi	r25, 0xA4	; 164
    254a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    254e:	0e 94 66 12 	call	0x24cc	; 0x24cc <twi_wait>
    2552:	88 23       	and	r24, r24
    2554:	59 f0       	breq	.+22     	; 0x256c <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2556:	8c 2f       	mov	r24, r28
    2558:	88 0f       	add	r24, r24
    255a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    255e:	80 32       	cpi	r24, 0x20	; 32
    2560:	39 f4       	brne	.+14     	; 0x2570 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2562:	84 e9       	ldi	r24, 0x94	; 148
    2564:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2570:	81 e0       	ldi	r24, 0x01	; 1
}	
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2576:	84 e9       	ldi	r24, 0x94	; 148
    2578:	80 93 bc 00 	sts	0x00BC, r24
    257c:	08 95       	ret

0000257e <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	60 97       	sbiw	r28, 0x10	; 16
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	e8 2e       	mov	r14, r24
    259c:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    259e:	fe 01       	movw	r30, r28
    25a0:	31 96       	adiw	r30, 0x01	; 1
    25a2:	80 e1       	ldi	r24, 0x10	; 16
    25a4:	df 01       	movw	r26, r30
    25a6:	1d 92       	st	X+, r1
    25a8:	8a 95       	dec	r24
    25aa:	e9 f7       	brne	.-6      	; 0x25a6 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    25ac:	88 e5       	ldi	r24, 0x58	; 88
    25ae:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <m_wii_read+0x3a>
    25b6:	66 c0       	rjmp	.+204    	; 0x2684 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    25b8:	86 e3       	ldi	r24, 0x36	; 54
    25ba:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    25be:	88 23       	and	r24, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <m_wii_read+0x46>
    25c2:	62 c0       	rjmp	.+196    	; 0x2688 <m_wii_read+0x10a>
	end();
    25c4:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25c8:	b8 e0       	ldi	r27, 0x08	; 8
    25ca:	ba 95       	dec	r27
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <m_wii_read+0x4c>
    25ce:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    25d0:	88 e5       	ldi	r24, 0x58	; 88
    25d2:	0e 94 88 12 	call	0x2510	; 0x2510 <start_read>
    25d6:	88 23       	and	r24, r24
    25d8:	09 f4       	brne	.+2      	; 0x25dc <m_wii_read+0x5e>
    25da:	58 c0       	rjmp	.+176    	; 0x268c <m_wii_read+0x10e>
    25dc:	ae 01       	movw	r20, r28
    25de:	4f 5f       	subi	r20, 0xFF	; 255
    25e0:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    25e2:	8e 01       	movw	r16, r28
    25e4:	00 5f       	subi	r16, 0xF0	; 240
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    25e8:	ec eb       	ldi	r30, 0xBC	; 188
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    25ee:	2b eb       	ldi	r18, 0xBB	; 187
    25f0:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    25f2:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	ec f7       	brge	.-6      	; 0x25f4 <m_wii_read+0x76>
		temp[i] = TWDR;
    25fa:	d9 01       	movw	r26, r18
    25fc:	8c 91       	ld	r24, X
    25fe:	da 01       	movw	r26, r20
    2600:	8d 93       	st	X+, r24
    2602:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2604:	a0 17       	cp	r26, r16
    2606:	b1 07       	cpc	r27, r17
    2608:	a1 f7       	brne	.-24     	; 0x25f2 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    260a:	84 e8       	ldi	r24, 0x84	; 132
    260c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2610:	ec eb       	ldi	r30, 0xBC	; 188
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	88 23       	and	r24, r24
    2618:	ec f7       	brge	.-6      	; 0x2614 <m_wii_read+0x96>
	temp[15] = TWDR;
    261a:	80 91 bb 00 	lds	r24, 0x00BB
    261e:	88 8b       	std	Y+16, r24	; 0x10
	end();
    2620:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
    2624:	de 01       	movw	r26, r28
    2626:	14 96       	adiw	r26, 0x04	; 4
    2628:	6e 2d       	mov	r22, r14
    262a:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    262c:	4c 91       	ld	r20, X
    262e:	24 2f       	mov	r18, r20
    2630:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2632:	cd 01       	movw	r24, r26
    2634:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2636:	fc 01       	movw	r30, r24
    2638:	80 81       	ld	r24, Z
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	f0 e1       	ldi	r31, 0x10	; 16
    263e:	2f 9f       	mul	r18, r31
    2640:	80 0d       	add	r24, r0
    2642:	91 1d       	adc	r25, r1
    2644:	11 24       	eor	r1, r1
    2646:	fb 01       	movw	r30, r22
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    264c:	84 2f       	mov	r24, r20
    264e:	80 7c       	andi	r24, 0xC0	; 192
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    265a:	9d 01       	movw	r18, r26
    265c:	21 50       	subi	r18, 0x01	; 1
    265e:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2660:	f9 01       	movw	r30, r18
    2662:	20 81       	ld	r18, Z
    2664:	82 0f       	add	r24, r18
    2666:	91 1d       	adc	r25, r1
    2668:	fb 01       	movw	r30, r22
    266a:	93 83       	std	Z+3, r25	; 0x03
    266c:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    266e:	4f 70       	andi	r20, 0x0F	; 15
    2670:	44 83       	std	Z+4, r20	; 0x04
    2672:	15 82       	std	Z+5, r1	; 0x05
    2674:	13 96       	adiw	r26, 0x03	; 3
    2676:	6a 5f       	subi	r22, 0xFA	; 250
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    267a:	0a 17       	cp	r16, r26
    267c:	1b 07       	cpc	r17, r27
    267e:	b1 f6       	brne	.-84     	; 0x262c <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	05 c0       	rjmp	.+10     	; 0x268e <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	03 c0       	rjmp	.+6      	; 0x268e <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	01 c0       	rjmp	.+2      	; 0x268e <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    268c:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    268e:	60 96       	adiw	r28, 0x10	; 16
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	08 95       	ret

000026a8 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    26a8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    26ac:	88 e5       	ldi	r24, 0x58	; 88
    26ae:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    26b2:	88 23       	and	r24, r24
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <m_wii_open+0x10>
    26b6:	c7 c0       	rjmp	.+398    	; 0x2846 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    26b8:	80 e3       	ldi	r24, 0x30	; 48
    26ba:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    26be:	88 23       	and	r24, r24
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <m_wii_open+0x1c>
    26c2:	c3 c0       	rjmp	.+390    	; 0x284a <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    26ca:	88 23       	and	r24, r24
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <m_wii_open+0x28>
    26ce:	bf c0       	rjmp	.+382    	; 0x284e <m_wii_open+0x1a6>
	end();
    26d0:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26d4:	83 ec       	ldi	r24, 0xC3	; 195
    26d6:	99 e0       	ldi	r25, 0x09	; 9
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <m_wii_open+0x30>
    26dc:	00 c0       	rjmp	.+0      	; 0x26de <m_wii_open+0x36>
    26de:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    26e0:	88 e5       	ldi	r24, 0x58	; 88
    26e2:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    26e6:	88 23       	and	r24, r24
    26e8:	09 f4       	brne	.+2      	; 0x26ec <m_wii_open+0x44>
    26ea:	b3 c0       	rjmp	.+358    	; 0x2852 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    26f2:	88 23       	and	r24, r24
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <m_wii_open+0x50>
    26f6:	af c0       	rjmp	.+350    	; 0x2856 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    26fe:	88 23       	and	r24, r24
    2700:	09 f4       	brne	.+2      	; 0x2704 <m_wii_open+0x5c>
    2702:	ab c0       	rjmp	.+342    	; 0x285a <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    270a:	88 23       	and	r24, r24
    270c:	09 f4       	brne	.+2      	; 0x2710 <m_wii_open+0x68>
    270e:	a7 c0       	rjmp	.+334    	; 0x285e <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    2716:	88 23       	and	r24, r24
    2718:	09 f4       	brne	.+2      	; 0x271c <m_wii_open+0x74>
    271a:	a3 c0       	rjmp	.+326    	; 0x2862 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    2722:	88 23       	and	r24, r24
    2724:	09 f4       	brne	.+2      	; 0x2728 <m_wii_open+0x80>
    2726:	9f c0       	rjmp	.+318    	; 0x2866 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    272e:	88 23       	and	r24, r24
    2730:	09 f4       	brne	.+2      	; 0x2734 <m_wii_open+0x8c>
    2732:	9b c0       	rjmp	.+310    	; 0x286a <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    273a:	88 23       	and	r24, r24
    273c:	09 f4       	brne	.+2      	; 0x2740 <m_wii_open+0x98>
    273e:	97 c0       	rjmp	.+302    	; 0x286e <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2740:	80 e9       	ldi	r24, 0x90	; 144
    2742:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    2746:	88 23       	and	r24, r24
    2748:	09 f4       	brne	.+2      	; 0x274c <m_wii_open+0xa4>
    274a:	93 c0       	rjmp	.+294    	; 0x2872 <m_wii_open+0x1ca>
	end();
    274c:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
    2750:	83 ec       	ldi	r24, 0xC3	; 195
    2752:	99 e0       	ldi	r25, 0x09	; 9
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <m_wii_open+0xac>
    2758:	00 c0       	rjmp	.+0      	; 0x275a <m_wii_open+0xb2>
    275a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    275c:	88 e5       	ldi	r24, 0x58	; 88
    275e:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    2762:	88 23       	and	r24, r24
    2764:	09 f4       	brne	.+2      	; 0x2768 <m_wii_open+0xc0>
    2766:	87 c0       	rjmp	.+270    	; 0x2876 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2768:	87 e0       	ldi	r24, 0x07	; 7
    276a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    276e:	88 23       	and	r24, r24
    2770:	09 f4       	brne	.+2      	; 0x2774 <m_wii_open+0xcc>
    2772:	83 c0       	rjmp	.+262    	; 0x287a <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    277a:	88 23       	and	r24, r24
    277c:	09 f4       	brne	.+2      	; 0x2780 <m_wii_open+0xd8>
    277e:	7f c0       	rjmp	.+254    	; 0x287e <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    2780:	81 e4       	ldi	r24, 0x41	; 65
    2782:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    2786:	88 23       	and	r24, r24
    2788:	09 f4       	brne	.+2      	; 0x278c <m_wii_open+0xe4>
    278a:	7b c0       	rjmp	.+246    	; 0x2882 <m_wii_open+0x1da>
	end();
    278c:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
    2790:	83 ec       	ldi	r24, 0xC3	; 195
    2792:	99 e0       	ldi	r25, 0x09	; 9
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <m_wii_open+0xec>
    2798:	00 c0       	rjmp	.+0      	; 0x279a <m_wii_open+0xf2>
    279a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    279c:	88 e5       	ldi	r24, 0x58	; 88
    279e:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    27a2:	88 23       	and	r24, r24
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <m_wii_open+0x100>
    27a6:	6f c0       	rjmp	.+222    	; 0x2886 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    27a8:	8a e1       	ldi	r24, 0x1A	; 26
    27aa:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    27ae:	88 23       	and	r24, r24
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <m_wii_open+0x10c>
    27b2:	6b c0       	rjmp	.+214    	; 0x288a <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    27b4:	80 e4       	ldi	r24, 0x40	; 64
    27b6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    27ba:	88 23       	and	r24, r24
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <m_wii_open+0x118>
    27be:	67 c0       	rjmp	.+206    	; 0x288e <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    27c6:	88 23       	and	r24, r24
    27c8:	09 f4       	brne	.+2      	; 0x27cc <m_wii_open+0x124>
    27ca:	63 c0       	rjmp	.+198    	; 0x2892 <m_wii_open+0x1ea>
	end();
    27cc:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
    27d0:	83 ec       	ldi	r24, 0xC3	; 195
    27d2:	99 e0       	ldi	r25, 0x09	; 9
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <m_wii_open+0x12c>
    27d8:	00 c0       	rjmp	.+0      	; 0x27da <m_wii_open+0x132>
    27da:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    27dc:	88 e5       	ldi	r24, 0x58	; 88
    27de:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    27e2:	88 23       	and	r24, r24
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <m_wii_open+0x140>
    27e6:	57 c0       	rjmp	.+174    	; 0x2896 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    27e8:	83 e3       	ldi	r24, 0x33	; 51
    27ea:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    27ee:	88 23       	and	r24, r24
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <m_wii_open+0x14c>
    27f2:	53 c0       	rjmp	.+166    	; 0x289a <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    27f4:	83 e0       	ldi	r24, 0x03	; 3
    27f6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    27fa:	88 23       	and	r24, r24
    27fc:	09 f4       	brne	.+2      	; 0x2800 <m_wii_open+0x158>
    27fe:	4f c0       	rjmp	.+158    	; 0x289e <m_wii_open+0x1f6>
	end();
    2800:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
    2804:	83 ec       	ldi	r24, 0xC3	; 195
    2806:	99 e0       	ldi	r25, 0x09	; 9
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <m_wii_open+0x160>
    280c:	00 c0       	rjmp	.+0      	; 0x280e <m_wii_open+0x166>
    280e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2810:	88 e5       	ldi	r24, 0x58	; 88
    2812:	0e 94 a2 12 	call	0x2544	; 0x2544 <start_write>
    2816:	88 23       	and	r24, r24
    2818:	09 f4       	brne	.+2      	; 0x281c <m_wii_open+0x174>
    281a:	43 c0       	rjmp	.+134    	; 0x28a2 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    281c:	80 e3       	ldi	r24, 0x30	; 48
    281e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    2822:	88 23       	and	r24, r24
    2824:	09 f4       	brne	.+2      	; 0x2828 <m_wii_open+0x180>
    2826:	3f c0       	rjmp	.+126    	; 0x28a6 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2828:	88 e0       	ldi	r24, 0x08	; 8
    282a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <send_byte>
    282e:	88 23       	and	r24, r24
    2830:	e1 f1       	breq	.+120    	; 0x28aa <m_wii_open+0x202>
	end();
    2832:	0e 94 bb 12 	call	0x2576	; 0x2576 <end>
    2836:	83 ec       	ldi	r24, 0xC3	; 195
    2838:	99 e0       	ldi	r25, 0x09	; 9
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <m_wii_open+0x192>
    283e:	00 c0       	rjmp	.+0      	; 0x2840 <m_wii_open+0x198>
    2840:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    28aa:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    28ac:	08 95       	ret

000028ae <__subsf3>:
    28ae:	50 58       	subi	r21, 0x80	; 128

000028b0 <__addsf3>:
    28b0:	bb 27       	eor	r27, r27
    28b2:	aa 27       	eor	r26, r26
    28b4:	0e d0       	rcall	.+28     	; 0x28d2 <__addsf3x>
    28b6:	58 c2       	rjmp	.+1200   	; 0x2d68 <__fp_round>
    28b8:	21 d2       	rcall	.+1090   	; 0x2cfc <__fp_pscA>
    28ba:	30 f0       	brcs	.+12     	; 0x28c8 <__addsf3+0x18>
    28bc:	26 d2       	rcall	.+1100   	; 0x2d0a <__fp_pscB>
    28be:	20 f0       	brcs	.+8      	; 0x28c8 <__addsf3+0x18>
    28c0:	31 f4       	brne	.+12     	; 0x28ce <__addsf3+0x1e>
    28c2:	9f 3f       	cpi	r25, 0xFF	; 255
    28c4:	11 f4       	brne	.+4      	; 0x28ca <__addsf3+0x1a>
    28c6:	1e f4       	brtc	.+6      	; 0x28ce <__addsf3+0x1e>
    28c8:	f1 c1       	rjmp	.+994    	; 0x2cac <__fp_nan>
    28ca:	0e f4       	brtc	.+2      	; 0x28ce <__addsf3+0x1e>
    28cc:	e0 95       	com	r30
    28ce:	e7 fb       	bst	r30, 7
    28d0:	e7 c1       	rjmp	.+974    	; 0x2ca0 <__fp_inf>

000028d2 <__addsf3x>:
    28d2:	e9 2f       	mov	r30, r25
    28d4:	6b d2       	rcall	.+1238   	; 0x2dac <__fp_split3>
    28d6:	80 f3       	brcs	.-32     	; 0x28b8 <__addsf3+0x8>
    28d8:	ba 17       	cp	r27, r26
    28da:	62 07       	cpc	r22, r18
    28dc:	73 07       	cpc	r23, r19
    28de:	84 07       	cpc	r24, r20
    28e0:	95 07       	cpc	r25, r21
    28e2:	18 f0       	brcs	.+6      	; 0x28ea <__addsf3x+0x18>
    28e4:	71 f4       	brne	.+28     	; 0x2902 <__addsf3x+0x30>
    28e6:	9e f5       	brtc	.+102    	; 0x294e <__addsf3x+0x7c>
    28e8:	83 c2       	rjmp	.+1286   	; 0x2df0 <__fp_zero>
    28ea:	0e f4       	brtc	.+2      	; 0x28ee <__addsf3x+0x1c>
    28ec:	e0 95       	com	r30
    28ee:	0b 2e       	mov	r0, r27
    28f0:	ba 2f       	mov	r27, r26
    28f2:	a0 2d       	mov	r26, r0
    28f4:	0b 01       	movw	r0, r22
    28f6:	b9 01       	movw	r22, r18
    28f8:	90 01       	movw	r18, r0
    28fa:	0c 01       	movw	r0, r24
    28fc:	ca 01       	movw	r24, r20
    28fe:	a0 01       	movw	r20, r0
    2900:	11 24       	eor	r1, r1
    2902:	ff 27       	eor	r31, r31
    2904:	59 1b       	sub	r21, r25
    2906:	99 f0       	breq	.+38     	; 0x292e <__addsf3x+0x5c>
    2908:	59 3f       	cpi	r21, 0xF9	; 249
    290a:	50 f4       	brcc	.+20     	; 0x2920 <__addsf3x+0x4e>
    290c:	50 3e       	cpi	r21, 0xE0	; 224
    290e:	68 f1       	brcs	.+90     	; 0x296a <__addsf3x+0x98>
    2910:	1a 16       	cp	r1, r26
    2912:	f0 40       	sbci	r31, 0x00	; 0
    2914:	a2 2f       	mov	r26, r18
    2916:	23 2f       	mov	r18, r19
    2918:	34 2f       	mov	r19, r20
    291a:	44 27       	eor	r20, r20
    291c:	58 5f       	subi	r21, 0xF8	; 248
    291e:	f3 cf       	rjmp	.-26     	; 0x2906 <__addsf3x+0x34>
    2920:	46 95       	lsr	r20
    2922:	37 95       	ror	r19
    2924:	27 95       	ror	r18
    2926:	a7 95       	ror	r26
    2928:	f0 40       	sbci	r31, 0x00	; 0
    292a:	53 95       	inc	r21
    292c:	c9 f7       	brne	.-14     	; 0x2920 <__addsf3x+0x4e>
    292e:	7e f4       	brtc	.+30     	; 0x294e <__addsf3x+0x7c>
    2930:	1f 16       	cp	r1, r31
    2932:	ba 0b       	sbc	r27, r26
    2934:	62 0b       	sbc	r22, r18
    2936:	73 0b       	sbc	r23, r19
    2938:	84 0b       	sbc	r24, r20
    293a:	ba f0       	brmi	.+46     	; 0x296a <__addsf3x+0x98>
    293c:	91 50       	subi	r25, 0x01	; 1
    293e:	a1 f0       	breq	.+40     	; 0x2968 <__addsf3x+0x96>
    2940:	ff 0f       	add	r31, r31
    2942:	bb 1f       	adc	r27, r27
    2944:	66 1f       	adc	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	88 1f       	adc	r24, r24
    294a:	c2 f7       	brpl	.-16     	; 0x293c <__addsf3x+0x6a>
    294c:	0e c0       	rjmp	.+28     	; 0x296a <__addsf3x+0x98>
    294e:	ba 0f       	add	r27, r26
    2950:	62 1f       	adc	r22, r18
    2952:	73 1f       	adc	r23, r19
    2954:	84 1f       	adc	r24, r20
    2956:	48 f4       	brcc	.+18     	; 0x296a <__addsf3x+0x98>
    2958:	87 95       	ror	r24
    295a:	77 95       	ror	r23
    295c:	67 95       	ror	r22
    295e:	b7 95       	ror	r27
    2960:	f7 95       	ror	r31
    2962:	9e 3f       	cpi	r25, 0xFE	; 254
    2964:	08 f0       	brcs	.+2      	; 0x2968 <__addsf3x+0x96>
    2966:	b3 cf       	rjmp	.-154    	; 0x28ce <__addsf3+0x1e>
    2968:	93 95       	inc	r25
    296a:	88 0f       	add	r24, r24
    296c:	08 f0       	brcs	.+2      	; 0x2970 <__addsf3x+0x9e>
    296e:	99 27       	eor	r25, r25
    2970:	ee 0f       	add	r30, r30
    2972:	97 95       	ror	r25
    2974:	87 95       	ror	r24
    2976:	08 95       	ret
    2978:	c1 d1       	rcall	.+898    	; 0x2cfc <__fp_pscA>
    297a:	58 f0       	brcs	.+22     	; 0x2992 <__addsf3x+0xc0>
    297c:	80 e8       	ldi	r24, 0x80	; 128
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	09 f4       	brne	.+2      	; 0x2984 <__addsf3x+0xb2>
    2982:	9e ef       	ldi	r25, 0xFE	; 254
    2984:	c2 d1       	rcall	.+900    	; 0x2d0a <__fp_pscB>
    2986:	28 f0       	brcs	.+10     	; 0x2992 <__addsf3x+0xc0>
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	51 e0       	ldi	r21, 0x01	; 1
    298c:	59 f4       	brne	.+22     	; 0x29a4 <atan2+0xe>
    298e:	5e ef       	ldi	r21, 0xFE	; 254
    2990:	09 c0       	rjmp	.+18     	; 0x29a4 <atan2+0xe>
    2992:	8c c1       	rjmp	.+792    	; 0x2cac <__fp_nan>
    2994:	2d c2       	rjmp	.+1114   	; 0x2df0 <__fp_zero>

00002996 <atan2>:
    2996:	e9 2f       	mov	r30, r25
    2998:	e0 78       	andi	r30, 0x80	; 128
    299a:	08 d2       	rcall	.+1040   	; 0x2dac <__fp_split3>
    299c:	68 f3       	brcs	.-38     	; 0x2978 <__addsf3x+0xa6>
    299e:	09 2e       	mov	r0, r25
    29a0:	05 2a       	or	r0, r21
    29a2:	c1 f3       	breq	.-16     	; 0x2994 <__addsf3x+0xc2>
    29a4:	26 17       	cp	r18, r22
    29a6:	37 07       	cpc	r19, r23
    29a8:	48 07       	cpc	r20, r24
    29aa:	59 07       	cpc	r21, r25
    29ac:	38 f0       	brcs	.+14     	; 0x29bc <atan2+0x26>
    29ae:	0e 2e       	mov	r0, r30
    29b0:	07 f8       	bld	r0, 7
    29b2:	e0 25       	eor	r30, r0
    29b4:	69 f0       	breq	.+26     	; 0x29d0 <atan2+0x3a>
    29b6:	e0 25       	eor	r30, r0
    29b8:	e0 64       	ori	r30, 0x40	; 64
    29ba:	0a c0       	rjmp	.+20     	; 0x29d0 <atan2+0x3a>
    29bc:	ef 63       	ori	r30, 0x3F	; 63
    29be:	07 f8       	bld	r0, 7
    29c0:	00 94       	com	r0
    29c2:	07 fa       	bst	r0, 7
    29c4:	db 01       	movw	r26, r22
    29c6:	b9 01       	movw	r22, r18
    29c8:	9d 01       	movw	r18, r26
    29ca:	dc 01       	movw	r26, r24
    29cc:	ca 01       	movw	r24, r20
    29ce:	ad 01       	movw	r20, r26
    29d0:	ef 93       	push	r30
    29d2:	4a d0       	rcall	.+148    	; 0x2a68 <__divsf3_pse>
    29d4:	c9 d1       	rcall	.+914    	; 0x2d68 <__fp_round>
    29d6:	0a d0       	rcall	.+20     	; 0x29ec <atan>
    29d8:	5f 91       	pop	r21
    29da:	55 23       	and	r21, r21
    29dc:	31 f0       	breq	.+12     	; 0x29ea <atan2+0x54>
    29de:	2b ed       	ldi	r18, 0xDB	; 219
    29e0:	3f e0       	ldi	r19, 0x0F	; 15
    29e2:	49 e4       	ldi	r20, 0x49	; 73
    29e4:	50 fd       	sbrc	r21, 0
    29e6:	49 ec       	ldi	r20, 0xC9	; 201
    29e8:	63 cf       	rjmp	.-314    	; 0x28b0 <__addsf3>
    29ea:	08 95       	ret

000029ec <atan>:
    29ec:	df 93       	push	r29
    29ee:	dd 27       	eor	r29, r29
    29f0:	b9 2f       	mov	r27, r25
    29f2:	bf 77       	andi	r27, 0x7F	; 127
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	16 16       	cp	r1, r22
    29fa:	17 06       	cpc	r1, r23
    29fc:	48 07       	cpc	r20, r24
    29fe:	5b 07       	cpc	r21, r27
    2a00:	10 f4       	brcc	.+4      	; 0x2a06 <atan+0x1a>
    2a02:	d9 2f       	mov	r29, r25
    2a04:	00 d2       	rcall	.+1024   	; 0x2e06 <inverse>
    2a06:	9f 93       	push	r25
    2a08:	8f 93       	push	r24
    2a0a:	7f 93       	push	r23
    2a0c:	6f 93       	push	r22
    2a0e:	5b d3       	rcall	.+1718   	; 0x30c6 <square>
    2a10:	ec ea       	ldi	r30, 0xAC	; 172
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	4e d1       	rcall	.+668    	; 0x2cb2 <__fp_powser>
    2a16:	a8 d1       	rcall	.+848    	; 0x2d68 <__fp_round>
    2a18:	2f 91       	pop	r18
    2a1a:	3f 91       	pop	r19
    2a1c:	4f 91       	pop	r20
    2a1e:	5f 91       	pop	r21
    2a20:	b3 d2       	rcall	.+1382   	; 0x2f88 <__mulsf3x>
    2a22:	dd 23       	and	r29, r29
    2a24:	49 f0       	breq	.+18     	; 0x2a38 <atan+0x4c>
    2a26:	90 58       	subi	r25, 0x80	; 128
    2a28:	a2 ea       	ldi	r26, 0xA2	; 162
    2a2a:	2a ed       	ldi	r18, 0xDA	; 218
    2a2c:	3f e0       	ldi	r19, 0x0F	; 15
    2a2e:	49 ec       	ldi	r20, 0xC9	; 201
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	d0 78       	andi	r29, 0x80	; 128
    2a34:	5d 27       	eor	r21, r29
    2a36:	4d df       	rcall	.-358    	; 0x28d2 <__addsf3x>
    2a38:	df 91       	pop	r29
    2a3a:	96 c1       	rjmp	.+812    	; 0x2d68 <__fp_round>

00002a3c <__cmpsf2>:
    2a3c:	0d d1       	rcall	.+538    	; 0x2c58 <__fp_cmp>
    2a3e:	08 f4       	brcc	.+2      	; 0x2a42 <__cmpsf2+0x6>
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	08 95       	ret

00002a44 <cos>:
    2a44:	6a d1       	rcall	.+724    	; 0x2d1a <__fp_rempio2>
    2a46:	e3 95       	inc	r30
    2a48:	a0 c1       	rjmp	.+832    	; 0x2d8a <__fp_sinus>

00002a4a <__divsf3>:
    2a4a:	0c d0       	rcall	.+24     	; 0x2a64 <__divsf3x>
    2a4c:	8d c1       	rjmp	.+794    	; 0x2d68 <__fp_round>
    2a4e:	5d d1       	rcall	.+698    	; 0x2d0a <__fp_pscB>
    2a50:	40 f0       	brcs	.+16     	; 0x2a62 <__divsf3+0x18>
    2a52:	54 d1       	rcall	.+680    	; 0x2cfc <__fp_pscA>
    2a54:	30 f0       	brcs	.+12     	; 0x2a62 <__divsf3+0x18>
    2a56:	21 f4       	brne	.+8      	; 0x2a60 <__divsf3+0x16>
    2a58:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5a:	19 f0       	breq	.+6      	; 0x2a62 <__divsf3+0x18>
    2a5c:	21 c1       	rjmp	.+578    	; 0x2ca0 <__fp_inf>
    2a5e:	51 11       	cpse	r21, r1
    2a60:	c8 c1       	rjmp	.+912    	; 0x2df2 <__fp_szero>
    2a62:	24 c1       	rjmp	.+584    	; 0x2cac <__fp_nan>

00002a64 <__divsf3x>:
    2a64:	a3 d1       	rcall	.+838    	; 0x2dac <__fp_split3>
    2a66:	98 f3       	brcs	.-26     	; 0x2a4e <__divsf3+0x4>

00002a68 <__divsf3_pse>:
    2a68:	99 23       	and	r25, r25
    2a6a:	c9 f3       	breq	.-14     	; 0x2a5e <__divsf3+0x14>
    2a6c:	55 23       	and	r21, r21
    2a6e:	b1 f3       	breq	.-20     	; 0x2a5c <__divsf3+0x12>
    2a70:	95 1b       	sub	r25, r21
    2a72:	55 0b       	sbc	r21, r21
    2a74:	bb 27       	eor	r27, r27
    2a76:	aa 27       	eor	r26, r26
    2a78:	62 17       	cp	r22, r18
    2a7a:	73 07       	cpc	r23, r19
    2a7c:	84 07       	cpc	r24, r20
    2a7e:	38 f0       	brcs	.+14     	; 0x2a8e <__divsf3_pse+0x26>
    2a80:	9f 5f       	subi	r25, 0xFF	; 255
    2a82:	5f 4f       	sbci	r21, 0xFF	; 255
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	44 1f       	adc	r20, r20
    2a8a:	aa 1f       	adc	r26, r26
    2a8c:	a9 f3       	breq	.-22     	; 0x2a78 <__divsf3_pse+0x10>
    2a8e:	33 d0       	rcall	.+102    	; 0x2af6 <__divsf3_pse+0x8e>
    2a90:	0e 2e       	mov	r0, r30
    2a92:	3a f0       	brmi	.+14     	; 0x2aa2 <__divsf3_pse+0x3a>
    2a94:	e0 e8       	ldi	r30, 0x80	; 128
    2a96:	30 d0       	rcall	.+96     	; 0x2af8 <__divsf3_pse+0x90>
    2a98:	91 50       	subi	r25, 0x01	; 1
    2a9a:	50 40       	sbci	r21, 0x00	; 0
    2a9c:	e6 95       	lsr	r30
    2a9e:	00 1c       	adc	r0, r0
    2aa0:	ca f7       	brpl	.-14     	; 0x2a94 <__divsf3_pse+0x2c>
    2aa2:	29 d0       	rcall	.+82     	; 0x2af6 <__divsf3_pse+0x8e>
    2aa4:	fe 2f       	mov	r31, r30
    2aa6:	27 d0       	rcall	.+78     	; 0x2af6 <__divsf3_pse+0x8e>
    2aa8:	66 0f       	add	r22, r22
    2aaa:	77 1f       	adc	r23, r23
    2aac:	88 1f       	adc	r24, r24
    2aae:	bb 1f       	adc	r27, r27
    2ab0:	26 17       	cp	r18, r22
    2ab2:	37 07       	cpc	r19, r23
    2ab4:	48 07       	cpc	r20, r24
    2ab6:	ab 07       	cpc	r26, r27
    2ab8:	b0 e8       	ldi	r27, 0x80	; 128
    2aba:	09 f0       	breq	.+2      	; 0x2abe <__divsf3_pse+0x56>
    2abc:	bb 0b       	sbc	r27, r27
    2abe:	80 2d       	mov	r24, r0
    2ac0:	bf 01       	movw	r22, r30
    2ac2:	ff 27       	eor	r31, r31
    2ac4:	93 58       	subi	r25, 0x83	; 131
    2ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac8:	2a f0       	brmi	.+10     	; 0x2ad4 <__divsf3_pse+0x6c>
    2aca:	9e 3f       	cpi	r25, 0xFE	; 254
    2acc:	51 05       	cpc	r21, r1
    2ace:	68 f0       	brcs	.+26     	; 0x2aea <__divsf3_pse+0x82>
    2ad0:	e7 c0       	rjmp	.+462    	; 0x2ca0 <__fp_inf>
    2ad2:	8f c1       	rjmp	.+798    	; 0x2df2 <__fp_szero>
    2ad4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ad6:	ec f3       	brlt	.-6      	; 0x2ad2 <__divsf3_pse+0x6a>
    2ad8:	98 3e       	cpi	r25, 0xE8	; 232
    2ada:	dc f3       	brlt	.-10     	; 0x2ad2 <__divsf3_pse+0x6a>
    2adc:	86 95       	lsr	r24
    2ade:	77 95       	ror	r23
    2ae0:	67 95       	ror	r22
    2ae2:	b7 95       	ror	r27
    2ae4:	f7 95       	ror	r31
    2ae6:	9f 5f       	subi	r25, 0xFF	; 255
    2ae8:	c9 f7       	brne	.-14     	; 0x2adc <__divsf3_pse+0x74>
    2aea:	88 0f       	add	r24, r24
    2aec:	91 1d       	adc	r25, r1
    2aee:	96 95       	lsr	r25
    2af0:	87 95       	ror	r24
    2af2:	97 f9       	bld	r25, 7
    2af4:	08 95       	ret
    2af6:	e1 e0       	ldi	r30, 0x01	; 1
    2af8:	66 0f       	add	r22, r22
    2afa:	77 1f       	adc	r23, r23
    2afc:	88 1f       	adc	r24, r24
    2afe:	bb 1f       	adc	r27, r27
    2b00:	62 17       	cp	r22, r18
    2b02:	73 07       	cpc	r23, r19
    2b04:	84 07       	cpc	r24, r20
    2b06:	ba 07       	cpc	r27, r26
    2b08:	20 f0       	brcs	.+8      	; 0x2b12 <__divsf3_pse+0xaa>
    2b0a:	62 1b       	sub	r22, r18
    2b0c:	73 0b       	sbc	r23, r19
    2b0e:	84 0b       	sbc	r24, r20
    2b10:	ba 0b       	sbc	r27, r26
    2b12:	ee 1f       	adc	r30, r30
    2b14:	88 f7       	brcc	.-30     	; 0x2af8 <__divsf3_pse+0x90>
    2b16:	e0 95       	com	r30
    2b18:	08 95       	ret
    2b1a:	19 f4       	brne	.+6      	; 0x2b22 <__divsf3_pse+0xba>
    2b1c:	0e f0       	brts	.+2      	; 0x2b20 <__divsf3_pse+0xb8>
    2b1e:	c0 c0       	rjmp	.+384    	; 0x2ca0 <__fp_inf>
    2b20:	67 c1       	rjmp	.+718    	; 0x2df0 <__fp_zero>
    2b22:	c4 c0       	rjmp	.+392    	; 0x2cac <__fp_nan>

00002b24 <exp>:
    2b24:	4b d1       	rcall	.+662    	; 0x2dbc <__fp_splitA>
    2b26:	c8 f3       	brcs	.-14     	; 0x2b1a <__divsf3_pse+0xb2>
    2b28:	96 38       	cpi	r25, 0x86	; 134
    2b2a:	c0 f7       	brcc	.-16     	; 0x2b1c <__divsf3_pse+0xb4>
    2b2c:	07 f8       	bld	r0, 7
    2b2e:	0f 92       	push	r0
    2b30:	e8 94       	clt
    2b32:	2b e3       	ldi	r18, 0x3B	; 59
    2b34:	3a ea       	ldi	r19, 0xAA	; 170
    2b36:	48 eb       	ldi	r20, 0xB8	; 184
    2b38:	5f e7       	ldi	r21, 0x7F	; 127
    2b3a:	28 d2       	rcall	.+1104   	; 0x2f8c <__mulsf3_pse>
    2b3c:	0f 92       	push	r0
    2b3e:	0f 92       	push	r0
    2b40:	0f 92       	push	r0
    2b42:	4d b7       	in	r20, 0x3d	; 61
    2b44:	5e b7       	in	r21, 0x3e	; 62
    2b46:	0f 92       	push	r0
    2b48:	e0 d1       	rcall	.+960    	; 0x2f0a <modf>
    2b4a:	e9 ed       	ldi	r30, 0xD9	; 217
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	b1 d0       	rcall	.+354    	; 0x2cb2 <__fp_powser>
    2b50:	4f 91       	pop	r20
    2b52:	5f 91       	pop	r21
    2b54:	ef 91       	pop	r30
    2b56:	ff 91       	pop	r31
    2b58:	e5 95       	asr	r30
    2b5a:	ee 1f       	adc	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	49 f0       	breq	.+18     	; 0x2b72 <exp+0x4e>
    2b60:	fe 57       	subi	r31, 0x7E	; 126
    2b62:	e0 68       	ori	r30, 0x80	; 128
    2b64:	44 27       	eor	r20, r20
    2b66:	ee 0f       	add	r30, r30
    2b68:	44 1f       	adc	r20, r20
    2b6a:	fa 95       	dec	r31
    2b6c:	e1 f7       	brne	.-8      	; 0x2b66 <exp+0x42>
    2b6e:	41 95       	neg	r20
    2b70:	55 0b       	sbc	r21, r21
    2b72:	52 d1       	rcall	.+676    	; 0x2e18 <ldexp>
    2b74:	0f 90       	pop	r0
    2b76:	07 fe       	sbrs	r0, 7
    2b78:	46 c1       	rjmp	.+652    	; 0x2e06 <inverse>
    2b7a:	08 95       	ret

00002b7c <__fixsfsi>:
    2b7c:	04 d0       	rcall	.+8      	; 0x2b86 <__fixunssfsi>
    2b7e:	68 94       	set
    2b80:	b1 11       	cpse	r27, r1
    2b82:	37 c1       	rjmp	.+622    	; 0x2df2 <__fp_szero>
    2b84:	08 95       	ret

00002b86 <__fixunssfsi>:
    2b86:	1a d1       	rcall	.+564    	; 0x2dbc <__fp_splitA>
    2b88:	88 f0       	brcs	.+34     	; 0x2bac <__fixunssfsi+0x26>
    2b8a:	9f 57       	subi	r25, 0x7F	; 127
    2b8c:	90 f0       	brcs	.+36     	; 0x2bb2 <__fixunssfsi+0x2c>
    2b8e:	b9 2f       	mov	r27, r25
    2b90:	99 27       	eor	r25, r25
    2b92:	b7 51       	subi	r27, 0x17	; 23
    2b94:	a0 f0       	brcs	.+40     	; 0x2bbe <__fixunssfsi+0x38>
    2b96:	d1 f0       	breq	.+52     	; 0x2bcc <__fixunssfsi+0x46>
    2b98:	66 0f       	add	r22, r22
    2b9a:	77 1f       	adc	r23, r23
    2b9c:	88 1f       	adc	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	1a f0       	brmi	.+6      	; 0x2ba8 <__fixunssfsi+0x22>
    2ba2:	ba 95       	dec	r27
    2ba4:	c9 f7       	brne	.-14     	; 0x2b98 <__fixunssfsi+0x12>
    2ba6:	12 c0       	rjmp	.+36     	; 0x2bcc <__fixunssfsi+0x46>
    2ba8:	b1 30       	cpi	r27, 0x01	; 1
    2baa:	81 f0       	breq	.+32     	; 0x2bcc <__fixunssfsi+0x46>
    2bac:	21 d1       	rcall	.+578    	; 0x2df0 <__fp_zero>
    2bae:	b1 e0       	ldi	r27, 0x01	; 1
    2bb0:	08 95       	ret
    2bb2:	1e c1       	rjmp	.+572    	; 0x2df0 <__fp_zero>
    2bb4:	67 2f       	mov	r22, r23
    2bb6:	78 2f       	mov	r23, r24
    2bb8:	88 27       	eor	r24, r24
    2bba:	b8 5f       	subi	r27, 0xF8	; 248
    2bbc:	39 f0       	breq	.+14     	; 0x2bcc <__fixunssfsi+0x46>
    2bbe:	b9 3f       	cpi	r27, 0xF9	; 249
    2bc0:	cc f3       	brlt	.-14     	; 0x2bb4 <__fixunssfsi+0x2e>
    2bc2:	86 95       	lsr	r24
    2bc4:	77 95       	ror	r23
    2bc6:	67 95       	ror	r22
    2bc8:	b3 95       	inc	r27
    2bca:	d9 f7       	brne	.-10     	; 0x2bc2 <__fixunssfsi+0x3c>
    2bcc:	3e f4       	brtc	.+14     	; 0x2bdc <__fixunssfsi+0x56>
    2bce:	90 95       	com	r25
    2bd0:	80 95       	com	r24
    2bd2:	70 95       	com	r23
    2bd4:	61 95       	neg	r22
    2bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bda:	9f 4f       	sbci	r25, 0xFF	; 255
    2bdc:	08 95       	ret

00002bde <__floatunsisf>:
    2bde:	e8 94       	clt
    2be0:	09 c0       	rjmp	.+18     	; 0x2bf4 <__floatsisf+0x12>

00002be2 <__floatsisf>:
    2be2:	97 fb       	bst	r25, 7
    2be4:	3e f4       	brtc	.+14     	; 0x2bf4 <__floatsisf+0x12>
    2be6:	90 95       	com	r25
    2be8:	80 95       	com	r24
    2bea:	70 95       	com	r23
    2bec:	61 95       	neg	r22
    2bee:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf4:	99 23       	and	r25, r25
    2bf6:	a9 f0       	breq	.+42     	; 0x2c22 <__floatsisf+0x40>
    2bf8:	f9 2f       	mov	r31, r25
    2bfa:	96 e9       	ldi	r25, 0x96	; 150
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	93 95       	inc	r25
    2c00:	f6 95       	lsr	r31
    2c02:	87 95       	ror	r24
    2c04:	77 95       	ror	r23
    2c06:	67 95       	ror	r22
    2c08:	b7 95       	ror	r27
    2c0a:	f1 11       	cpse	r31, r1
    2c0c:	f8 cf       	rjmp	.-16     	; 0x2bfe <__floatsisf+0x1c>
    2c0e:	fa f4       	brpl	.+62     	; 0x2c4e <__floatsisf+0x6c>
    2c10:	bb 0f       	add	r27, r27
    2c12:	11 f4       	brne	.+4      	; 0x2c18 <__floatsisf+0x36>
    2c14:	60 ff       	sbrs	r22, 0
    2c16:	1b c0       	rjmp	.+54     	; 0x2c4e <__floatsisf+0x6c>
    2c18:	6f 5f       	subi	r22, 0xFF	; 255
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	16 c0       	rjmp	.+44     	; 0x2c4e <__floatsisf+0x6c>
    2c22:	88 23       	and	r24, r24
    2c24:	11 f0       	breq	.+4      	; 0x2c2a <__floatsisf+0x48>
    2c26:	96 e9       	ldi	r25, 0x96	; 150
    2c28:	11 c0       	rjmp	.+34     	; 0x2c4c <__floatsisf+0x6a>
    2c2a:	77 23       	and	r23, r23
    2c2c:	21 f0       	breq	.+8      	; 0x2c36 <__floatsisf+0x54>
    2c2e:	9e e8       	ldi	r25, 0x8E	; 142
    2c30:	87 2f       	mov	r24, r23
    2c32:	76 2f       	mov	r23, r22
    2c34:	05 c0       	rjmp	.+10     	; 0x2c40 <__floatsisf+0x5e>
    2c36:	66 23       	and	r22, r22
    2c38:	71 f0       	breq	.+28     	; 0x2c56 <__floatsisf+0x74>
    2c3a:	96 e8       	ldi	r25, 0x86	; 134
    2c3c:	86 2f       	mov	r24, r22
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	60 e0       	ldi	r22, 0x00	; 0
    2c42:	2a f0       	brmi	.+10     	; 0x2c4e <__floatsisf+0x6c>
    2c44:	9a 95       	dec	r25
    2c46:	66 0f       	add	r22, r22
    2c48:	77 1f       	adc	r23, r23
    2c4a:	88 1f       	adc	r24, r24
    2c4c:	da f7       	brpl	.-10     	; 0x2c44 <__floatsisf+0x62>
    2c4e:	88 0f       	add	r24, r24
    2c50:	96 95       	lsr	r25
    2c52:	87 95       	ror	r24
    2c54:	97 f9       	bld	r25, 7
    2c56:	08 95       	ret

00002c58 <__fp_cmp>:
    2c58:	99 0f       	add	r25, r25
    2c5a:	00 08       	sbc	r0, r0
    2c5c:	55 0f       	add	r21, r21
    2c5e:	aa 0b       	sbc	r26, r26
    2c60:	e0 e8       	ldi	r30, 0x80	; 128
    2c62:	fe ef       	ldi	r31, 0xFE	; 254
    2c64:	16 16       	cp	r1, r22
    2c66:	17 06       	cpc	r1, r23
    2c68:	e8 07       	cpc	r30, r24
    2c6a:	f9 07       	cpc	r31, r25
    2c6c:	c0 f0       	brcs	.+48     	; 0x2c9e <__fp_cmp+0x46>
    2c6e:	12 16       	cp	r1, r18
    2c70:	13 06       	cpc	r1, r19
    2c72:	e4 07       	cpc	r30, r20
    2c74:	f5 07       	cpc	r31, r21
    2c76:	98 f0       	brcs	.+38     	; 0x2c9e <__fp_cmp+0x46>
    2c78:	62 1b       	sub	r22, r18
    2c7a:	73 0b       	sbc	r23, r19
    2c7c:	84 0b       	sbc	r24, r20
    2c7e:	95 0b       	sbc	r25, r21
    2c80:	39 f4       	brne	.+14     	; 0x2c90 <__fp_cmp+0x38>
    2c82:	0a 26       	eor	r0, r26
    2c84:	61 f0       	breq	.+24     	; 0x2c9e <__fp_cmp+0x46>
    2c86:	23 2b       	or	r18, r19
    2c88:	24 2b       	or	r18, r20
    2c8a:	25 2b       	or	r18, r21
    2c8c:	21 f4       	brne	.+8      	; 0x2c96 <__fp_cmp+0x3e>
    2c8e:	08 95       	ret
    2c90:	0a 26       	eor	r0, r26
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <__fp_cmp+0x3e>
    2c94:	a1 40       	sbci	r26, 0x01	; 1
    2c96:	a6 95       	lsr	r26
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	81 1d       	adc	r24, r1
    2c9c:	81 1d       	adc	r24, r1
    2c9e:	08 95       	ret

00002ca0 <__fp_inf>:
    2ca0:	97 f9       	bld	r25, 7
    2ca2:	9f 67       	ori	r25, 0x7F	; 127
    2ca4:	80 e8       	ldi	r24, 0x80	; 128
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	08 95       	ret

00002cac <__fp_nan>:
    2cac:	9f ef       	ldi	r25, 0xFF	; 255
    2cae:	80 ec       	ldi	r24, 0xC0	; 192
    2cb0:	08 95       	ret

00002cb2 <__fp_powser>:
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	1f 93       	push	r17
    2cb8:	0f 93       	push	r16
    2cba:	ff 92       	push	r15
    2cbc:	ef 92       	push	r14
    2cbe:	df 92       	push	r13
    2cc0:	7b 01       	movw	r14, r22
    2cc2:	8c 01       	movw	r16, r24
    2cc4:	68 94       	set
    2cc6:	05 c0       	rjmp	.+10     	; 0x2cd2 <__fp_powser+0x20>
    2cc8:	da 2e       	mov	r13, r26
    2cca:	ef 01       	movw	r28, r30
    2ccc:	5d d1       	rcall	.+698    	; 0x2f88 <__mulsf3x>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e8 94       	clt
    2cd2:	a5 91       	lpm	r26, Z+
    2cd4:	25 91       	lpm	r18, Z+
    2cd6:	35 91       	lpm	r19, Z+
    2cd8:	45 91       	lpm	r20, Z+
    2cda:	55 91       	lpm	r21, Z+
    2cdc:	ae f3       	brts	.-22     	; 0x2cc8 <__fp_powser+0x16>
    2cde:	ef 01       	movw	r28, r30
    2ce0:	f8 dd       	rcall	.-1040   	; 0x28d2 <__addsf3x>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	97 01       	movw	r18, r14
    2ce6:	a8 01       	movw	r20, r16
    2ce8:	da 94       	dec	r13
    2cea:	79 f7       	brne	.-34     	; 0x2cca <__fp_powser+0x18>
    2cec:	df 90       	pop	r13
    2cee:	ef 90       	pop	r14
    2cf0:	ff 90       	pop	r15
    2cf2:	0f 91       	pop	r16
    2cf4:	1f 91       	pop	r17
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <__fp_pscA>:
    2cfc:	00 24       	eor	r0, r0
    2cfe:	0a 94       	dec	r0
    2d00:	16 16       	cp	r1, r22
    2d02:	17 06       	cpc	r1, r23
    2d04:	18 06       	cpc	r1, r24
    2d06:	09 06       	cpc	r0, r25
    2d08:	08 95       	ret

00002d0a <__fp_pscB>:
    2d0a:	00 24       	eor	r0, r0
    2d0c:	0a 94       	dec	r0
    2d0e:	12 16       	cp	r1, r18
    2d10:	13 06       	cpc	r1, r19
    2d12:	14 06       	cpc	r1, r20
    2d14:	05 06       	cpc	r0, r21
    2d16:	08 95       	ret
    2d18:	c9 cf       	rjmp	.-110    	; 0x2cac <__fp_nan>

00002d1a <__fp_rempio2>:
    2d1a:	50 d0       	rcall	.+160    	; 0x2dbc <__fp_splitA>
    2d1c:	e8 f3       	brcs	.-6      	; 0x2d18 <__fp_pscB+0xe>
    2d1e:	e8 94       	clt
    2d20:	e0 e0       	ldi	r30, 0x00	; 0
    2d22:	bb 27       	eor	r27, r27
    2d24:	9f 57       	subi	r25, 0x7F	; 127
    2d26:	f0 f0       	brcs	.+60     	; 0x2d64 <__fp_rempio2+0x4a>
    2d28:	2a ed       	ldi	r18, 0xDA	; 218
    2d2a:	3f e0       	ldi	r19, 0x0F	; 15
    2d2c:	49 ec       	ldi	r20, 0xC9	; 201
    2d2e:	06 c0       	rjmp	.+12     	; 0x2d3c <__fp_rempio2+0x22>
    2d30:	ee 0f       	add	r30, r30
    2d32:	bb 0f       	add	r27, r27
    2d34:	66 1f       	adc	r22, r22
    2d36:	77 1f       	adc	r23, r23
    2d38:	88 1f       	adc	r24, r24
    2d3a:	28 f0       	brcs	.+10     	; 0x2d46 <__fp_rempio2+0x2c>
    2d3c:	b2 3a       	cpi	r27, 0xA2	; 162
    2d3e:	62 07       	cpc	r22, r18
    2d40:	73 07       	cpc	r23, r19
    2d42:	84 07       	cpc	r24, r20
    2d44:	28 f0       	brcs	.+10     	; 0x2d50 <__fp_rempio2+0x36>
    2d46:	b2 5a       	subi	r27, 0xA2	; 162
    2d48:	62 0b       	sbc	r22, r18
    2d4a:	73 0b       	sbc	r23, r19
    2d4c:	84 0b       	sbc	r24, r20
    2d4e:	e3 95       	inc	r30
    2d50:	9a 95       	dec	r25
    2d52:	72 f7       	brpl	.-36     	; 0x2d30 <__fp_rempio2+0x16>
    2d54:	80 38       	cpi	r24, 0x80	; 128
    2d56:	30 f4       	brcc	.+12     	; 0x2d64 <__fp_rempio2+0x4a>
    2d58:	9a 95       	dec	r25
    2d5a:	bb 0f       	add	r27, r27
    2d5c:	66 1f       	adc	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	88 1f       	adc	r24, r24
    2d62:	d2 f7       	brpl	.-12     	; 0x2d58 <__fp_rempio2+0x3e>
    2d64:	90 48       	sbci	r25, 0x80	; 128
    2d66:	b4 c1       	rjmp	.+872    	; 0x30d0 <__fp_mpack_finite>

00002d68 <__fp_round>:
    2d68:	09 2e       	mov	r0, r25
    2d6a:	03 94       	inc	r0
    2d6c:	00 0c       	add	r0, r0
    2d6e:	11 f4       	brne	.+4      	; 0x2d74 <__fp_round+0xc>
    2d70:	88 23       	and	r24, r24
    2d72:	52 f0       	brmi	.+20     	; 0x2d88 <__fp_round+0x20>
    2d74:	bb 0f       	add	r27, r27
    2d76:	40 f4       	brcc	.+16     	; 0x2d88 <__fp_round+0x20>
    2d78:	bf 2b       	or	r27, r31
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <__fp_round+0x18>
    2d7c:	60 ff       	sbrs	r22, 0
    2d7e:	04 c0       	rjmp	.+8      	; 0x2d88 <__fp_round+0x20>
    2d80:	6f 5f       	subi	r22, 0xFF	; 255
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255
    2d84:	8f 4f       	sbci	r24, 0xFF	; 255
    2d86:	9f 4f       	sbci	r25, 0xFF	; 255
    2d88:	08 95       	ret

00002d8a <__fp_sinus>:
    2d8a:	ef 93       	push	r30
    2d8c:	e0 ff       	sbrs	r30, 0
    2d8e:	06 c0       	rjmp	.+12     	; 0x2d9c <__fp_sinus+0x12>
    2d90:	a2 ea       	ldi	r26, 0xA2	; 162
    2d92:	2a ed       	ldi	r18, 0xDA	; 218
    2d94:	3f e0       	ldi	r19, 0x0F	; 15
    2d96:	49 ec       	ldi	r20, 0xC9	; 201
    2d98:	5f eb       	ldi	r21, 0xBF	; 191
    2d9a:	9b dd       	rcall	.-1226   	; 0x28d2 <__addsf3x>
    2d9c:	e5 df       	rcall	.-54     	; 0x2d68 <__fp_round>
    2d9e:	0f 90       	pop	r0
    2da0:	03 94       	inc	r0
    2da2:	01 fc       	sbrc	r0, 1
    2da4:	90 58       	subi	r25, 0x80	; 128
    2da6:	e1 e0       	ldi	r30, 0x01	; 1
    2da8:	f1 e0       	ldi	r31, 0x01	; 1
    2daa:	a5 c1       	rjmp	.+842    	; 0x30f6 <__fp_powsodd>

00002dac <__fp_split3>:
    2dac:	57 fd       	sbrc	r21, 7
    2dae:	90 58       	subi	r25, 0x80	; 128
    2db0:	44 0f       	add	r20, r20
    2db2:	55 1f       	adc	r21, r21
    2db4:	59 f0       	breq	.+22     	; 0x2dcc <__fp_splitA+0x10>
    2db6:	5f 3f       	cpi	r21, 0xFF	; 255
    2db8:	71 f0       	breq	.+28     	; 0x2dd6 <__fp_splitA+0x1a>
    2dba:	47 95       	ror	r20

00002dbc <__fp_splitA>:
    2dbc:	88 0f       	add	r24, r24
    2dbe:	97 fb       	bst	r25, 7
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	61 f0       	breq	.+24     	; 0x2ddc <__fp_splitA+0x20>
    2dc4:	9f 3f       	cpi	r25, 0xFF	; 255
    2dc6:	79 f0       	breq	.+30     	; 0x2de6 <__fp_splitA+0x2a>
    2dc8:	87 95       	ror	r24
    2dca:	08 95       	ret
    2dcc:	12 16       	cp	r1, r18
    2dce:	13 06       	cpc	r1, r19
    2dd0:	14 06       	cpc	r1, r20
    2dd2:	55 1f       	adc	r21, r21
    2dd4:	f2 cf       	rjmp	.-28     	; 0x2dba <__fp_split3+0xe>
    2dd6:	46 95       	lsr	r20
    2dd8:	f1 df       	rcall	.-30     	; 0x2dbc <__fp_splitA>
    2dda:	08 c0       	rjmp	.+16     	; 0x2dec <__fp_splitA+0x30>
    2ddc:	16 16       	cp	r1, r22
    2dde:	17 06       	cpc	r1, r23
    2de0:	18 06       	cpc	r1, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	f1 cf       	rjmp	.-30     	; 0x2dc8 <__fp_splitA+0xc>
    2de6:	86 95       	lsr	r24
    2de8:	71 05       	cpc	r23, r1
    2dea:	61 05       	cpc	r22, r1
    2dec:	08 94       	sec
    2dee:	08 95       	ret

00002df0 <__fp_zero>:
    2df0:	e8 94       	clt

00002df2 <__fp_szero>:
    2df2:	bb 27       	eor	r27, r27
    2df4:	66 27       	eor	r22, r22
    2df6:	77 27       	eor	r23, r23
    2df8:	cb 01       	movw	r24, r22
    2dfa:	97 f9       	bld	r25, 7
    2dfc:	08 95       	ret

00002dfe <__gesf2>:
    2dfe:	2c df       	rcall	.-424    	; 0x2c58 <__fp_cmp>
    2e00:	08 f4       	brcc	.+2      	; 0x2e04 <__gesf2+0x6>
    2e02:	8f ef       	ldi	r24, 0xFF	; 255
    2e04:	08 95       	ret

00002e06 <inverse>:
    2e06:	9b 01       	movw	r18, r22
    2e08:	ac 01       	movw	r20, r24
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	80 e8       	ldi	r24, 0x80	; 128
    2e10:	9f e3       	ldi	r25, 0x3F	; 63
    2e12:	1b ce       	rjmp	.-970    	; 0x2a4a <__divsf3>
    2e14:	45 cf       	rjmp	.-374    	; 0x2ca0 <__fp_inf>
    2e16:	5a c1       	rjmp	.+692    	; 0x30cc <__fp_mpack>

00002e18 <ldexp>:
    2e18:	d1 df       	rcall	.-94     	; 0x2dbc <__fp_splitA>
    2e1a:	e8 f3       	brcs	.-6      	; 0x2e16 <inverse+0x10>
    2e1c:	99 23       	and	r25, r25
    2e1e:	d9 f3       	breq	.-10     	; 0x2e16 <inverse+0x10>
    2e20:	94 0f       	add	r25, r20
    2e22:	51 1d       	adc	r21, r1
    2e24:	bb f3       	brvs	.-18     	; 0x2e14 <inverse+0xe>
    2e26:	91 50       	subi	r25, 0x01	; 1
    2e28:	50 40       	sbci	r21, 0x00	; 0
    2e2a:	94 f0       	brlt	.+36     	; 0x2e50 <ldexp+0x38>
    2e2c:	59 f0       	breq	.+22     	; 0x2e44 <ldexp+0x2c>
    2e2e:	88 23       	and	r24, r24
    2e30:	32 f0       	brmi	.+12     	; 0x2e3e <ldexp+0x26>
    2e32:	66 0f       	add	r22, r22
    2e34:	77 1f       	adc	r23, r23
    2e36:	88 1f       	adc	r24, r24
    2e38:	91 50       	subi	r25, 0x01	; 1
    2e3a:	50 40       	sbci	r21, 0x00	; 0
    2e3c:	c1 f7       	brne	.-16     	; 0x2e2e <ldexp+0x16>
    2e3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e40:	51 05       	cpc	r21, r1
    2e42:	44 f7       	brge	.-48     	; 0x2e14 <inverse+0xe>
    2e44:	88 0f       	add	r24, r24
    2e46:	91 1d       	adc	r25, r1
    2e48:	96 95       	lsr	r25
    2e4a:	87 95       	ror	r24
    2e4c:	97 f9       	bld	r25, 7
    2e4e:	08 95       	ret
    2e50:	5f 3f       	cpi	r21, 0xFF	; 255
    2e52:	ac f0       	brlt	.+42     	; 0x2e7e <ldexp+0x66>
    2e54:	98 3e       	cpi	r25, 0xE8	; 232
    2e56:	9c f0       	brlt	.+38     	; 0x2e7e <ldexp+0x66>
    2e58:	bb 27       	eor	r27, r27
    2e5a:	86 95       	lsr	r24
    2e5c:	77 95       	ror	r23
    2e5e:	67 95       	ror	r22
    2e60:	b7 95       	ror	r27
    2e62:	08 f4       	brcc	.+2      	; 0x2e66 <ldexp+0x4e>
    2e64:	b1 60       	ori	r27, 0x01	; 1
    2e66:	93 95       	inc	r25
    2e68:	c1 f7       	brne	.-16     	; 0x2e5a <ldexp+0x42>
    2e6a:	bb 0f       	add	r27, r27
    2e6c:	58 f7       	brcc	.-42     	; 0x2e44 <ldexp+0x2c>
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <ldexp+0x5c>
    2e70:	60 ff       	sbrs	r22, 0
    2e72:	e8 cf       	rjmp	.-48     	; 0x2e44 <ldexp+0x2c>
    2e74:	6f 5f       	subi	r22, 0xFF	; 255
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	e3 cf       	rjmp	.-58     	; 0x2e44 <ldexp+0x2c>
    2e7e:	b9 cf       	rjmp	.-142    	; 0x2df2 <__fp_szero>
    2e80:	0e f0       	brts	.+2      	; 0x2e84 <ldexp+0x6c>
    2e82:	24 c1       	rjmp	.+584    	; 0x30cc <__fp_mpack>
    2e84:	13 cf       	rjmp	.-474    	; 0x2cac <__fp_nan>
    2e86:	68 94       	set
    2e88:	0b cf       	rjmp	.-490    	; 0x2ca0 <__fp_inf>

00002e8a <log>:
    2e8a:	98 df       	rcall	.-208    	; 0x2dbc <__fp_splitA>
    2e8c:	c8 f3       	brcs	.-14     	; 0x2e80 <ldexp+0x68>
    2e8e:	99 23       	and	r25, r25
    2e90:	d1 f3       	breq	.-12     	; 0x2e86 <ldexp+0x6e>
    2e92:	c6 f3       	brts	.-16     	; 0x2e84 <ldexp+0x6c>
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	1f 93       	push	r17
    2e9a:	0f 93       	push	r16
    2e9c:	ff 92       	push	r15
    2e9e:	c9 2f       	mov	r28, r25
    2ea0:	dd 27       	eor	r29, r29
    2ea2:	88 23       	and	r24, r24
    2ea4:	2a f0       	brmi	.+10     	; 0x2eb0 <log+0x26>
    2ea6:	21 97       	sbiw	r28, 0x01	; 1
    2ea8:	66 0f       	add	r22, r22
    2eaa:	77 1f       	adc	r23, r23
    2eac:	88 1f       	adc	r24, r24
    2eae:	da f7       	brpl	.-10     	; 0x2ea6 <log+0x1c>
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e8       	ldi	r20, 0x80	; 128
    2eb6:	5f eb       	ldi	r21, 0xBF	; 191
    2eb8:	9f e3       	ldi	r25, 0x3F	; 63
    2eba:	88 39       	cpi	r24, 0x98	; 152
    2ebc:	20 f0       	brcs	.+8      	; 0x2ec6 <log+0x3c>
    2ebe:	80 3e       	cpi	r24, 0xE0	; 224
    2ec0:	30 f0       	brcs	.+12     	; 0x2ece <log+0x44>
    2ec2:	21 96       	adiw	r28, 0x01	; 1
    2ec4:	8f 77       	andi	r24, 0x7F	; 127
    2ec6:	f4 dc       	rcall	.-1560   	; 0x28b0 <__addsf3>
    2ec8:	ef e1       	ldi	r30, 0x1F	; 31
    2eca:	f1 e0       	ldi	r31, 0x01	; 1
    2ecc:	03 c0       	rjmp	.+6      	; 0x2ed4 <log+0x4a>
    2ece:	f0 dc       	rcall	.-1568   	; 0x28b0 <__addsf3>
    2ed0:	ec e4       	ldi	r30, 0x4C	; 76
    2ed2:	f1 e0       	ldi	r31, 0x01	; 1
    2ed4:	ee de       	rcall	.-548    	; 0x2cb2 <__fp_powser>
    2ed6:	8b 01       	movw	r16, r22
    2ed8:	be 01       	movw	r22, r28
    2eda:	ec 01       	movw	r28, r24
    2edc:	fb 2e       	mov	r15, r27
    2ede:	6f 57       	subi	r22, 0x7F	; 127
    2ee0:	71 09       	sbc	r23, r1
    2ee2:	75 95       	asr	r23
    2ee4:	77 1f       	adc	r23, r23
    2ee6:	88 0b       	sbc	r24, r24
    2ee8:	99 0b       	sbc	r25, r25
    2eea:	7b de       	rcall	.-778    	; 0x2be2 <__floatsisf>
    2eec:	28 e1       	ldi	r18, 0x18	; 24
    2eee:	32 e7       	ldi	r19, 0x72	; 114
    2ef0:	41 e3       	ldi	r20, 0x31	; 49
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	49 d0       	rcall	.+146    	; 0x2f88 <__mulsf3x>
    2ef6:	af 2d       	mov	r26, r15
    2ef8:	98 01       	movw	r18, r16
    2efa:	ae 01       	movw	r20, r28
    2efc:	ff 90       	pop	r15
    2efe:	0f 91       	pop	r16
    2f00:	1f 91       	pop	r17
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	e5 dc       	rcall	.-1590   	; 0x28d2 <__addsf3x>
    2f08:	2f cf       	rjmp	.-418    	; 0x2d68 <__fp_round>

00002f0a <modf>:
    2f0a:	fa 01       	movw	r30, r20
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	aa 0f       	add	r26, r26
    2f10:	bb 1f       	adc	r27, r27
    2f12:	9b 01       	movw	r18, r22
    2f14:	ac 01       	movw	r20, r24
    2f16:	bf 57       	subi	r27, 0x7F	; 127
    2f18:	28 f4       	brcc	.+10     	; 0x2f24 <modf+0x1a>
    2f1a:	22 27       	eor	r18, r18
    2f1c:	33 27       	eor	r19, r19
    2f1e:	44 27       	eor	r20, r20
    2f20:	50 78       	andi	r21, 0x80	; 128
    2f22:	1f c0       	rjmp	.+62     	; 0x2f62 <modf+0x58>
    2f24:	b7 51       	subi	r27, 0x17	; 23
    2f26:	88 f4       	brcc	.+34     	; 0x2f4a <modf+0x40>
    2f28:	ab 2f       	mov	r26, r27
    2f2a:	00 24       	eor	r0, r0
    2f2c:	46 95       	lsr	r20
    2f2e:	37 95       	ror	r19
    2f30:	27 95       	ror	r18
    2f32:	01 1c       	adc	r0, r1
    2f34:	a3 95       	inc	r26
    2f36:	d2 f3       	brmi	.-12     	; 0x2f2c <modf+0x22>
    2f38:	00 20       	and	r0, r0
    2f3a:	69 f0       	breq	.+26     	; 0x2f56 <modf+0x4c>
    2f3c:	22 0f       	add	r18, r18
    2f3e:	33 1f       	adc	r19, r19
    2f40:	44 1f       	adc	r20, r20
    2f42:	b3 95       	inc	r27
    2f44:	da f3       	brmi	.-10     	; 0x2f3c <modf+0x32>
    2f46:	0d d0       	rcall	.+26     	; 0x2f62 <modf+0x58>
    2f48:	b2 cc       	rjmp	.-1692   	; 0x28ae <__subsf3>
    2f4a:	61 30       	cpi	r22, 0x01	; 1
    2f4c:	71 05       	cpc	r23, r1
    2f4e:	a0 e8       	ldi	r26, 0x80	; 128
    2f50:	8a 07       	cpc	r24, r26
    2f52:	b9 46       	sbci	r27, 0x69	; 105
    2f54:	30 f4       	brcc	.+12     	; 0x2f62 <modf+0x58>
    2f56:	9b 01       	movw	r18, r22
    2f58:	ac 01       	movw	r20, r24
    2f5a:	66 27       	eor	r22, r22
    2f5c:	77 27       	eor	r23, r23
    2f5e:	88 27       	eor	r24, r24
    2f60:	90 78       	andi	r25, 0x80	; 128
    2f62:	30 96       	adiw	r30, 0x00	; 0
    2f64:	21 f0       	breq	.+8      	; 0x2f6e <modf+0x64>
    2f66:	20 83       	st	Z, r18
    2f68:	31 83       	std	Z+1, r19	; 0x01
    2f6a:	42 83       	std	Z+2, r20	; 0x02
    2f6c:	53 83       	std	Z+3, r21	; 0x03
    2f6e:	08 95       	ret

00002f70 <__mulsf3>:
    2f70:	0b d0       	rcall	.+22     	; 0x2f88 <__mulsf3x>
    2f72:	fa ce       	rjmp	.-524    	; 0x2d68 <__fp_round>
    2f74:	c3 de       	rcall	.-634    	; 0x2cfc <__fp_pscA>
    2f76:	28 f0       	brcs	.+10     	; 0x2f82 <__mulsf3+0x12>
    2f78:	c8 de       	rcall	.-624    	; 0x2d0a <__fp_pscB>
    2f7a:	18 f0       	brcs	.+6      	; 0x2f82 <__mulsf3+0x12>
    2f7c:	95 23       	and	r25, r21
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <__mulsf3+0x12>
    2f80:	8f ce       	rjmp	.-738    	; 0x2ca0 <__fp_inf>
    2f82:	94 ce       	rjmp	.-728    	; 0x2cac <__fp_nan>
    2f84:	11 24       	eor	r1, r1
    2f86:	35 cf       	rjmp	.-406    	; 0x2df2 <__fp_szero>

00002f88 <__mulsf3x>:
    2f88:	11 df       	rcall	.-478    	; 0x2dac <__fp_split3>
    2f8a:	a0 f3       	brcs	.-24     	; 0x2f74 <__mulsf3+0x4>

00002f8c <__mulsf3_pse>:
    2f8c:	95 9f       	mul	r25, r21
    2f8e:	d1 f3       	breq	.-12     	; 0x2f84 <__mulsf3+0x14>
    2f90:	95 0f       	add	r25, r21
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	55 1f       	adc	r21, r21
    2f96:	62 9f       	mul	r22, r18
    2f98:	f0 01       	movw	r30, r0
    2f9a:	72 9f       	mul	r23, r18
    2f9c:	bb 27       	eor	r27, r27
    2f9e:	f0 0d       	add	r31, r0
    2fa0:	b1 1d       	adc	r27, r1
    2fa2:	63 9f       	mul	r22, r19
    2fa4:	aa 27       	eor	r26, r26
    2fa6:	f0 0d       	add	r31, r0
    2fa8:	b1 1d       	adc	r27, r1
    2faa:	aa 1f       	adc	r26, r26
    2fac:	64 9f       	mul	r22, r20
    2fae:	66 27       	eor	r22, r22
    2fb0:	b0 0d       	add	r27, r0
    2fb2:	a1 1d       	adc	r26, r1
    2fb4:	66 1f       	adc	r22, r22
    2fb6:	82 9f       	mul	r24, r18
    2fb8:	22 27       	eor	r18, r18
    2fba:	b0 0d       	add	r27, r0
    2fbc:	a1 1d       	adc	r26, r1
    2fbe:	62 1f       	adc	r22, r18
    2fc0:	73 9f       	mul	r23, r19
    2fc2:	b0 0d       	add	r27, r0
    2fc4:	a1 1d       	adc	r26, r1
    2fc6:	62 1f       	adc	r22, r18
    2fc8:	83 9f       	mul	r24, r19
    2fca:	a0 0d       	add	r26, r0
    2fcc:	61 1d       	adc	r22, r1
    2fce:	22 1f       	adc	r18, r18
    2fd0:	74 9f       	mul	r23, r20
    2fd2:	33 27       	eor	r19, r19
    2fd4:	a0 0d       	add	r26, r0
    2fd6:	61 1d       	adc	r22, r1
    2fd8:	23 1f       	adc	r18, r19
    2fda:	84 9f       	mul	r24, r20
    2fdc:	60 0d       	add	r22, r0
    2fde:	21 1d       	adc	r18, r1
    2fe0:	82 2f       	mov	r24, r18
    2fe2:	76 2f       	mov	r23, r22
    2fe4:	6a 2f       	mov	r22, r26
    2fe6:	11 24       	eor	r1, r1
    2fe8:	9f 57       	subi	r25, 0x7F	; 127
    2fea:	50 40       	sbci	r21, 0x00	; 0
    2fec:	8a f0       	brmi	.+34     	; 0x3010 <__mulsf3_pse+0x84>
    2fee:	e1 f0       	breq	.+56     	; 0x3028 <__mulsf3_pse+0x9c>
    2ff0:	88 23       	and	r24, r24
    2ff2:	4a f0       	brmi	.+18     	; 0x3006 <__mulsf3_pse+0x7a>
    2ff4:	ee 0f       	add	r30, r30
    2ff6:	ff 1f       	adc	r31, r31
    2ff8:	bb 1f       	adc	r27, r27
    2ffa:	66 1f       	adc	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	91 50       	subi	r25, 0x01	; 1
    3002:	50 40       	sbci	r21, 0x00	; 0
    3004:	a9 f7       	brne	.-22     	; 0x2ff0 <__mulsf3_pse+0x64>
    3006:	9e 3f       	cpi	r25, 0xFE	; 254
    3008:	51 05       	cpc	r21, r1
    300a:	70 f0       	brcs	.+28     	; 0x3028 <__mulsf3_pse+0x9c>
    300c:	49 ce       	rjmp	.-878    	; 0x2ca0 <__fp_inf>
    300e:	f1 ce       	rjmp	.-542    	; 0x2df2 <__fp_szero>
    3010:	5f 3f       	cpi	r21, 0xFF	; 255
    3012:	ec f3       	brlt	.-6      	; 0x300e <__mulsf3_pse+0x82>
    3014:	98 3e       	cpi	r25, 0xE8	; 232
    3016:	dc f3       	brlt	.-10     	; 0x300e <__mulsf3_pse+0x82>
    3018:	86 95       	lsr	r24
    301a:	77 95       	ror	r23
    301c:	67 95       	ror	r22
    301e:	b7 95       	ror	r27
    3020:	f7 95       	ror	r31
    3022:	e7 95       	ror	r30
    3024:	9f 5f       	subi	r25, 0xFF	; 255
    3026:	c1 f7       	brne	.-16     	; 0x3018 <__mulsf3_pse+0x8c>
    3028:	fe 2b       	or	r31, r30
    302a:	88 0f       	add	r24, r24
    302c:	91 1d       	adc	r25, r1
    302e:	96 95       	lsr	r25
    3030:	87 95       	ror	r24
    3032:	97 f9       	bld	r25, 7
    3034:	08 95       	ret

00003036 <sin>:
    3036:	9f 93       	push	r25
    3038:	70 de       	rcall	.-800    	; 0x2d1a <__fp_rempio2>
    303a:	0f 90       	pop	r0
    303c:	07 fc       	sbrc	r0, 7
    303e:	ee 5f       	subi	r30, 0xFE	; 254
    3040:	a4 ce       	rjmp	.-696    	; 0x2d8a <__fp_sinus>
    3042:	11 f4       	brne	.+4      	; 0x3048 <sin+0x12>
    3044:	0e f4       	brtc	.+2      	; 0x3048 <sin+0x12>
    3046:	32 ce       	rjmp	.-924    	; 0x2cac <__fp_nan>
    3048:	41 c0       	rjmp	.+130    	; 0x30cc <__fp_mpack>

0000304a <sqrt>:
    304a:	b8 de       	rcall	.-656    	; 0x2dbc <__fp_splitA>
    304c:	d0 f3       	brcs	.-12     	; 0x3042 <sin+0xc>
    304e:	99 23       	and	r25, r25
    3050:	d9 f3       	breq	.-10     	; 0x3048 <sin+0x12>
    3052:	ce f3       	brts	.-14     	; 0x3046 <sin+0x10>
    3054:	9f 57       	subi	r25, 0x7F	; 127
    3056:	55 0b       	sbc	r21, r21
    3058:	87 ff       	sbrs	r24, 7
    305a:	46 d0       	rcall	.+140    	; 0x30e8 <__fp_norm2>
    305c:	00 24       	eor	r0, r0
    305e:	a0 e6       	ldi	r26, 0x60	; 96
    3060:	40 ea       	ldi	r20, 0xA0	; 160
    3062:	90 01       	movw	r18, r0
    3064:	80 58       	subi	r24, 0x80	; 128
    3066:	56 95       	lsr	r21
    3068:	97 95       	ror	r25
    306a:	28 f4       	brcc	.+10     	; 0x3076 <sqrt+0x2c>
    306c:	80 5c       	subi	r24, 0xC0	; 192
    306e:	66 0f       	add	r22, r22
    3070:	77 1f       	adc	r23, r23
    3072:	88 1f       	adc	r24, r24
    3074:	20 f0       	brcs	.+8      	; 0x307e <sqrt+0x34>
    3076:	26 17       	cp	r18, r22
    3078:	37 07       	cpc	r19, r23
    307a:	48 07       	cpc	r20, r24
    307c:	30 f4       	brcc	.+12     	; 0x308a <sqrt+0x40>
    307e:	62 1b       	sub	r22, r18
    3080:	73 0b       	sbc	r23, r19
    3082:	84 0b       	sbc	r24, r20
    3084:	20 29       	or	r18, r0
    3086:	31 29       	or	r19, r1
    3088:	4a 2b       	or	r20, r26
    308a:	a6 95       	lsr	r26
    308c:	17 94       	ror	r1
    308e:	07 94       	ror	r0
    3090:	20 25       	eor	r18, r0
    3092:	31 25       	eor	r19, r1
    3094:	4a 27       	eor	r20, r26
    3096:	58 f7       	brcc	.-42     	; 0x306e <sqrt+0x24>
    3098:	66 0f       	add	r22, r22
    309a:	77 1f       	adc	r23, r23
    309c:	88 1f       	adc	r24, r24
    309e:	20 f0       	brcs	.+8      	; 0x30a8 <sqrt+0x5e>
    30a0:	26 17       	cp	r18, r22
    30a2:	37 07       	cpc	r19, r23
    30a4:	48 07       	cpc	r20, r24
    30a6:	30 f4       	brcc	.+12     	; 0x30b4 <sqrt+0x6a>
    30a8:	62 0b       	sbc	r22, r18
    30aa:	73 0b       	sbc	r23, r19
    30ac:	84 0b       	sbc	r24, r20
    30ae:	20 0d       	add	r18, r0
    30b0:	31 1d       	adc	r19, r1
    30b2:	41 1d       	adc	r20, r1
    30b4:	a0 95       	com	r26
    30b6:	81 f7       	brne	.-32     	; 0x3098 <sqrt+0x4e>
    30b8:	b9 01       	movw	r22, r18
    30ba:	84 2f       	mov	r24, r20
    30bc:	91 58       	subi	r25, 0x81	; 129
    30be:	88 0f       	add	r24, r24
    30c0:	96 95       	lsr	r25
    30c2:	87 95       	ror	r24
    30c4:	08 95       	ret

000030c6 <square>:
    30c6:	9b 01       	movw	r18, r22
    30c8:	ac 01       	movw	r20, r24
    30ca:	52 cf       	rjmp	.-348    	; 0x2f70 <__mulsf3>

000030cc <__fp_mpack>:
    30cc:	9f 3f       	cpi	r25, 0xFF	; 255
    30ce:	31 f0       	breq	.+12     	; 0x30dc <__fp_mpack_finite+0xc>

000030d0 <__fp_mpack_finite>:
    30d0:	91 50       	subi	r25, 0x01	; 1
    30d2:	20 f4       	brcc	.+8      	; 0x30dc <__fp_mpack_finite+0xc>
    30d4:	87 95       	ror	r24
    30d6:	77 95       	ror	r23
    30d8:	67 95       	ror	r22
    30da:	b7 95       	ror	r27
    30dc:	88 0f       	add	r24, r24
    30de:	91 1d       	adc	r25, r1
    30e0:	96 95       	lsr	r25
    30e2:	87 95       	ror	r24
    30e4:	97 f9       	bld	r25, 7
    30e6:	08 95       	ret

000030e8 <__fp_norm2>:
    30e8:	91 50       	subi	r25, 0x01	; 1
    30ea:	50 40       	sbci	r21, 0x00	; 0
    30ec:	66 0f       	add	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	d2 f7       	brpl	.-12     	; 0x30e8 <__fp_norm2>
    30f4:	08 95       	ret

000030f6 <__fp_powsodd>:
    30f6:	9f 93       	push	r25
    30f8:	8f 93       	push	r24
    30fa:	7f 93       	push	r23
    30fc:	6f 93       	push	r22
    30fe:	ff 93       	push	r31
    3100:	ef 93       	push	r30
    3102:	9b 01       	movw	r18, r22
    3104:	ac 01       	movw	r20, r24
    3106:	34 df       	rcall	.-408    	; 0x2f70 <__mulsf3>
    3108:	ef 91       	pop	r30
    310a:	ff 91       	pop	r31
    310c:	d2 dd       	rcall	.-1116   	; 0x2cb2 <__fp_powser>
    310e:	2f 91       	pop	r18
    3110:	3f 91       	pop	r19
    3112:	4f 91       	pop	r20
    3114:	5f 91       	pop	r21
    3116:	2c cf       	rjmp	.-424    	; 0x2f70 <__mulsf3>

00003118 <__divmodhi4>:
    3118:	97 fb       	bst	r25, 7
    311a:	07 2e       	mov	r0, r23
    311c:	16 f4       	brtc	.+4      	; 0x3122 <__divmodhi4+0xa>
    311e:	00 94       	com	r0
    3120:	07 d0       	rcall	.+14     	; 0x3130 <__divmodhi4_neg1>
    3122:	77 fd       	sbrc	r23, 7
    3124:	09 d0       	rcall	.+18     	; 0x3138 <__divmodhi4_neg2>
    3126:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodhi4>
    312a:	07 fc       	sbrc	r0, 7
    312c:	05 d0       	rcall	.+10     	; 0x3138 <__divmodhi4_neg2>
    312e:	3e f4       	brtc	.+14     	; 0x313e <__divmodhi4_exit>

00003130 <__divmodhi4_neg1>:
    3130:	90 95       	com	r25
    3132:	81 95       	neg	r24
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	08 95       	ret

00003138 <__divmodhi4_neg2>:
    3138:	70 95       	com	r23
    313a:	61 95       	neg	r22
    313c:	7f 4f       	sbci	r23, 0xFF	; 255

0000313e <__divmodhi4_exit>:
    313e:	08 95       	ret

00003140 <__udivmodhi4>:
    3140:	aa 1b       	sub	r26, r26
    3142:	bb 1b       	sub	r27, r27
    3144:	51 e1       	ldi	r21, 0x11	; 17
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <__udivmodhi4_ep>

00003148 <__udivmodhi4_loop>:
    3148:	aa 1f       	adc	r26, r26
    314a:	bb 1f       	adc	r27, r27
    314c:	a6 17       	cp	r26, r22
    314e:	b7 07       	cpc	r27, r23
    3150:	10 f0       	brcs	.+4      	; 0x3156 <__udivmodhi4_ep>
    3152:	a6 1b       	sub	r26, r22
    3154:	b7 0b       	sbc	r27, r23

00003156 <__udivmodhi4_ep>:
    3156:	88 1f       	adc	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	5a 95       	dec	r21
    315c:	a9 f7       	brne	.-22     	; 0x3148 <__udivmodhi4_loop>
    315e:	80 95       	com	r24
    3160:	90 95       	com	r25
    3162:	bc 01       	movw	r22, r24
    3164:	cd 01       	movw	r24, r26
    3166:	08 95       	ret

00003168 <itoa>:
    3168:	fb 01       	movw	r30, r22
    316a:	9f 01       	movw	r18, r30
    316c:	e8 94       	clt
    316e:	42 30       	cpi	r20, 0x02	; 2
    3170:	c4 f0       	brlt	.+48     	; 0x31a2 <itoa+0x3a>
    3172:	45 32       	cpi	r20, 0x25	; 37
    3174:	b4 f4       	brge	.+44     	; 0x31a2 <itoa+0x3a>
    3176:	4a 30       	cpi	r20, 0x0A	; 10
    3178:	29 f4       	brne	.+10     	; 0x3184 <itoa+0x1c>
    317a:	97 fb       	bst	r25, 7
    317c:	1e f4       	brtc	.+6      	; 0x3184 <itoa+0x1c>
    317e:	90 95       	com	r25
    3180:	81 95       	neg	r24
    3182:	9f 4f       	sbci	r25, 0xFF	; 255
    3184:	64 2f       	mov	r22, r20
    3186:	77 27       	eor	r23, r23
    3188:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodhi4>
    318c:	80 5d       	subi	r24, 0xD0	; 208
    318e:	8a 33       	cpi	r24, 0x3A	; 58
    3190:	0c f0       	brlt	.+2      	; 0x3194 <itoa+0x2c>
    3192:	89 5d       	subi	r24, 0xD9	; 217
    3194:	81 93       	st	Z+, r24
    3196:	cb 01       	movw	r24, r22
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	a1 f7       	brne	.-24     	; 0x3184 <itoa+0x1c>
    319c:	16 f4       	brtc	.+4      	; 0x31a2 <itoa+0x3a>
    319e:	5d e2       	ldi	r21, 0x2D	; 45
    31a0:	51 93       	st	Z+, r21
    31a2:	10 82       	st	Z, r1
    31a4:	c9 01       	movw	r24, r18
    31a6:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <strrev>

000031aa <strrev>:
    31aa:	dc 01       	movw	r26, r24
    31ac:	fc 01       	movw	r30, r24
    31ae:	67 2f       	mov	r22, r23
    31b0:	71 91       	ld	r23, Z+
    31b2:	77 23       	and	r23, r23
    31b4:	e1 f7       	brne	.-8      	; 0x31ae <strrev+0x4>
    31b6:	32 97       	sbiw	r30, 0x02	; 2
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <strrev+0x18>
    31ba:	7c 91       	ld	r23, X
    31bc:	6d 93       	st	X+, r22
    31be:	70 83       	st	Z, r23
    31c0:	62 91       	ld	r22, -Z
    31c2:	ae 17       	cp	r26, r30
    31c4:	bf 07       	cpc	r27, r31
    31c6:	c8 f3       	brcs	.-14     	; 0x31ba <strrev+0x10>
    31c8:	08 95       	ret

000031ca <_exit>:
    31ca:	f8 94       	cli

000031cc <__stop_program>:
    31cc:	ff cf       	rjmp	.-2      	; 0x31cc <__stop_program>
