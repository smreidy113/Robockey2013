
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000028f8  0000298c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800114  00800114  000029a0  2**0
                  ALLOC
  3 .stab         00004068  00000000  00000000  000029a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b9  00000000  00000000  00006a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007cc1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a0  00000000  00000000  00007cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000287c  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a93  00000000  00000000  0000a80c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011dd  00000000  00000000  0000b29f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008cc  00000000  00000000  0000c47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000081b  00000000  00000000  0000cd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f6d  00000000  00000000  0000d563  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a8  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__ctors_end>
       4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       c:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_3>
      10:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      14:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      18:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      1c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      20:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      28:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_10>
      2c:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_11>
      30:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      34:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      38:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      3c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      40:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      44:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      4c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      50:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      54:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      58:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      5c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      64:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      68:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      6c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      70:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      74:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_29>
      78:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      7c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      80:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      84:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      88:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      8c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      90:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      94:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      98:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      9c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

0000011f <descriptor_list>:
     11f:	00 01 00 00 53 01 12 00 02 00 00 65 01 43 00 03     ....S......e.C..
     12f:	00 00 a8 01 04 01 03 09 04 ac 01 12 02 03 09 04     ................
     13f:	c0 01 06 03 03 09 04 c8 01 08                       ..........

00000149 <endpoint_config_table>:
     149:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000153 <device_descriptor>:
     153:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     163:	03 01                                               ..

00000165 <config1_descriptor>:
     165:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     175:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     185:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     195:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a5:	40 00 00                                            @..

000001a8 <string0>:
     1a8:	04 03 09 04                                         ....

000001ac <string1>:
     1ac:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1bc:	65 00 00 00                                         e...

000001c0 <string2>:
     1c0:	06 03 4d 00 32 00 00 00                             ..M.2...

000001c8 <string3>:
     1c8:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	da e0       	ldi	r29, 0x0A	; 10
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	e8 ef       	ldi	r30, 0xF8	; 248
     1e6:	f8 e2       	ldi	r31, 0x28	; 40
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a4 31       	cpi	r26, 0x14	; 20
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	a4 e1       	ldi	r26, 0x14	; 20
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	ac 3a       	cpi	r26, 0xAC	; 172
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 63 03 	call	0x6c6	; 0x6c6 <main>
     208:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <_exit>

0000020c <__bad_interrupt>:
     20c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000210 <turn>:
		}
		if (changedState) return;
	}
	m_red(OFF);
	game_pause();
}
     210:	8f 92       	push	r8
     212:	9f 92       	push	r9
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	6a 01       	movw	r12, r20
     22a:	7b 01       	movw	r14, r22
     22c:	48 01       	movw	r8, r16
     22e:	59 01       	movw	r10, r18
     230:	2a 9a       	sbi	0x05, 2	; 5
     232:	2b 9a       	sbi	0x05, 3	; 5
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	91 05       	cpc	r25, r1
     238:	81 f5       	brne	.+96     	; 0x29a <turn+0x8a>
     23a:	60 91 96 00 	lds	r22, 0x0096
     23e:	70 91 97 00 	lds	r23, 0x0097

void turn(int dir,float speed, float degree) {
	set(PORTB,2);
	set(PORTB,3);
	if (dir == LEFT) {
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     24a:	a7 01       	movw	r20, r14
     24c:	96 01       	movw	r18, r12
     24e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     252:	0e 94 9d 11 	call	0x233a	; 0x233a <__fixunssfsi>
     256:	70 93 99 00 	sts	0x0099, r23
     25a:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     25e:	c0 91 88 00 	lds	r28, 0x0088
     262:	d0 91 89 00 	lds	r29, 0x0089
     266:	a7 01       	movw	r20, r14
     268:	96 01       	movw	r18, r12
     26a:	c5 01       	movw	r24, r10
     26c:	b4 01       	movw	r22, r8
     26e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     272:	6b 01       	movw	r12, r22
     274:	7c 01       	movw	r14, r24
     276:	be 01       	movw	r22, r28
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     280:	9b 01       	movw	r18, r22
     282:	ac 01       	movw	r20, r24
     284:	c7 01       	movw	r24, r14
     286:	b6 01       	movw	r22, r12
     288:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     28c:	0e 94 9d 11 	call	0x233a	; 0x233a <__fixunssfsi>
     290:	70 93 8b 00 	sts	0x008B, r23
     294:	60 93 8a 00 	sts	0x008A, r22
     298:	31 c0       	rjmp	.+98     	; 0x2fc <turn+0xec>
	}
	
		if (dir == RIGHT) {
     29a:	89 2b       	or	r24, r25
     29c:	79 f5       	brne	.+94     	; 0x2fc <turn+0xec>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     29e:	c0 91 96 00 	lds	r28, 0x0096
     2a2:	d0 91 97 00 	lds	r29, 0x0097
     2a6:	9a 01       	movw	r18, r20
     2a8:	ab 01       	movw	r20, r22
     2aa:	c5 01       	movw	r24, r10
     2ac:	b4 01       	movw	r22, r8
     2ae:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     2b2:	4b 01       	movw	r8, r22
     2b4:	5c 01       	movw	r10, r24
     2b6:	be 01       	movw	r22, r28
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     2c0:	9b 01       	movw	r18, r22
     2c2:	ac 01       	movw	r20, r24
     2c4:	c5 01       	movw	r24, r10
     2c6:	b4 01       	movw	r22, r8
     2c8:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     2cc:	0e 94 9d 11 	call	0x233a	; 0x233a <__fixunssfsi>
     2d0:	70 93 99 00 	sts	0x0099, r23
     2d4:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     2d8:	60 91 88 00 	lds	r22, 0x0088
     2dc:	70 91 89 00 	lds	r23, 0x0089
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     2e8:	a7 01       	movw	r20, r14
     2ea:	96 01       	movw	r18, r12
     2ec:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     2f0:	0e 94 9d 11 	call	0x233a	; 0x233a <__fixunssfsi>
     2f4:	70 93 8b 00 	sts	0x008B, r23
     2f8:	60 93 8a 00 	sts	0x008A, r22
		}
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	08 95       	ret

00000316 <reverse>:

void reverse(){
	OCR1B = OCR1A;
     316:	80 91 88 00 	lds	r24, 0x0088
     31a:	90 91 89 00 	lds	r25, 0x0089
     31e:	90 93 8b 00 	sts	0x008B, r25
     322:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     326:	80 91 96 00 	lds	r24, 0x0096
     32a:	90 91 97 00 	lds	r25, 0x0097
     32e:	90 93 99 00 	sts	0x0099, r25
     332:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     336:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     338:	2b 98       	cbi	0x05, 3	; 5
     33a:	08 95       	ret

0000033c <drive_to_point2>:

void drive_to_puck() {

}

void drive_to_point2(int x, int y) {
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	60 97       	sbiw	r28, 0x10	; 16
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	2c 01       	movw	r4, r24
     352:	4b 01       	movw	r8, r22
	m_green(ON);
     354:	6a 9a       	sbi	0x0d, 2	; 13
     356:	72 98       	cbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     358:	2f ef       	ldi	r18, 0xFF	; 255
     35a:	89 e6       	ldi	r24, 0x69	; 105
     35c:	98 e1       	ldi	r25, 0x18	; 24
     35e:	21 50       	subi	r18, 0x01	; 1
     360:	80 40       	sbci	r24, 0x00	; 0
     362:	90 40       	sbci	r25, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <drive_to_point2+0x22>
     366:	00 c0       	rjmp	.+0      	; 0x368 <drive_to_point2+0x2c>
     368:	00 00       	nop
	m_wait(500);
	float speed_cap = 0.5;
	localize(data);
     36a:	86 e8       	ldi	r24, 0x86	; 134
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0e 94 af 07 	call	0xf5e	; 0xf5e <localize>
	int dir = 0;
	while(1) {
		localize(data);
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     372:	66 24       	eor	r6, r6
     374:	57 fc       	sbrc	r5, 7
     376:	60 94       	com	r6
     378:	76 2c       	mov	r7, r6
     37a:	c4 01       	movw	r24, r8
     37c:	aa 27       	eor	r26, r26
     37e:	97 fd       	sbrc	r25, 7
     380:	a0 95       	com	r26
     382:	ba 2f       	mov	r27, r26
     384:	8d 87       	std	Y+13, r24	; 0x0d
     386:	9e 87       	std	Y+14, r25	; 0x0e
     388:	af 87       	std	Y+15, r26	; 0x0f
     38a:	b8 8b       	std	Y+16, r27	; 0x10
	float dist = 0.0;
	float spd = 0.0;
	float deg = 0.0;
	int dir = 0;
	while(1) {
		localize(data);
     38c:	86 e8       	ldi	r24, 0x86	; 134
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 af 07 	call	0xf5e	; 0xf5e <localize>
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     394:	c3 01       	movw	r24, r6
     396:	b2 01       	movw	r22, r4
     398:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     39c:	20 91 86 01 	lds	r18, 0x0186
     3a0:	30 91 87 01 	lds	r19, 0x0187
     3a4:	40 91 88 01 	lds	r20, 0x0188
     3a8:	50 91 89 01 	lds	r21, 0x0189
     3ac:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
     3b0:	6f 83       	std	Y+7, r22	; 0x07
     3b2:	27 2e       	mov	r2, r23
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	9a 83       	std	Y+2, r25	; 0x02
     3b8:	6d 85       	ldd	r22, Y+13	; 0x0d
     3ba:	7e 85       	ldd	r23, Y+14	; 0x0e
     3bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     3be:	98 89       	ldd	r25, Y+16	; 0x10
     3c0:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     3c4:	aa e8       	ldi	r26, 0x8A	; 138
     3c6:	b1 e0       	ldi	r27, 0x01	; 1
     3c8:	2d 91       	ld	r18, X+
     3ca:	3d 91       	ld	r19, X+
     3cc:	4d 91       	ld	r20, X+
     3ce:	5c 91       	ld	r21, X
     3d0:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
     3d4:	36 2e       	mov	r3, r22
     3d6:	07 2f       	mov	r16, r23
     3d8:	18 2f       	mov	r17, r24
     3da:	9b 83       	std	Y+3, r25	; 0x03
     3dc:	7f 81       	ldd	r23, Y+7	; 0x07
     3de:	99 81       	ldd	r25, Y+1	; 0x01
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	27 2f       	mov	r18, r23
     3e4:	32 2d       	mov	r19, r2
     3e6:	49 2f       	mov	r20, r25
     3e8:	58 2f       	mov	r21, r24
     3ea:	eb 81       	ldd	r30, Y+3	; 0x03
     3ec:	63 2d       	mov	r22, r3
     3ee:	70 2f       	mov	r23, r16
     3f0:	81 2f       	mov	r24, r17
     3f2:	9e 2f       	mov	r25, r30
     3f4:	0e 94 a5 10 	call	0x214a	; 0x214a <atan2>
     3f8:	4b 01       	movw	r8, r22
     3fa:	5c 01       	movw	r10, r24
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	44 eb       	ldi	r20, 0xB4	; 180
     402:	52 e4       	ldi	r21, 0x42	; 66
     404:	ee e8       	ldi	r30, 0x8E	; 142
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	60 81       	ld	r22, Z
     40a:	71 81       	ldd	r23, Z+1	; 0x01
     40c:	82 81       	ldd	r24, Z+2	; 0x02
     40e:	93 81       	ldd	r25, Z+3	; 0x03
     410:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
     414:	6b 01       	movw	r12, r22
     416:	7c 01       	movw	r14, r24
     418:	f7 fa       	bst	r15, 7
     41a:	f0 94       	com	r15
     41c:	f7 f8       	bld	r15, 7
     41e:	f0 94       	com	r15
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	44 e3       	ldi	r20, 0x34	; 52
     426:	53 e4       	ldi	r21, 0x43	; 67
     428:	c5 01       	movw	r24, r10
     42a:	b4 01       	movw	r22, r8
     42c:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     430:	23 ec       	ldi	r18, 0xC3	; 195
     432:	35 ef       	ldi	r19, 0xF5	; 245
     434:	48 e4       	ldi	r20, 0x48	; 72
     436:	50 e4       	ldi	r21, 0x40	; 64
     438:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
     43c:	9b 01       	movw	r18, r22
     43e:	ac 01       	movw	r20, r24
     440:	c7 01       	movw	r24, r14
     442:	b6 01       	movw	r22, r12
     444:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
     448:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     44c:	cb 01       	movw	r24, r22
     44e:	8c 57       	subi	r24, 0x7C	; 124
     450:	9c 4f       	sbci	r25, 0xFC	; 252
     452:	68 e6       	ldi	r22, 0x68	; 104
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	0e 94 21 14 	call	0x2842	; 0x2842 <__divmodhi4>
     45a:	bc 01       	movw	r22, r24
     45c:	64 5b       	subi	r22, 0xB4	; 180
     45e:	71 09       	sbc	r23, r1
     460:	88 27       	eor	r24, r24
     462:	77 fd       	sbrc	r23, 7
     464:	80 95       	com	r24
     466:	98 2f       	mov	r25, r24
     468:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     46c:	86 2e       	mov	r8, r22
     46e:	97 2e       	mov	r9, r23
     470:	a8 2e       	mov	r10, r24
     472:	b9 2e       	mov	r11, r25
		if (angle_dif > 0) {
     474:	ff 24       	eor	r15, r15
     476:	f3 94       	inc	r15
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	a9 01       	movw	r20, r18
     47e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__gesf2>
     482:	18 16       	cp	r1, r24
     484:	0c f0       	brlt	.+2      	; 0x488 <drive_to_point2+0x14c>
     486:	f1 2c       	mov	r15, r1
     488:	f1 e0       	ldi	r31, 0x01	; 1
     48a:	ff 25       	eor	r31, r15
     48c:	fc 87       	std	Y+12, r31	; 0x0c
		else {
			dir = LEFT;
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     48e:	d5 01       	movw	r26, r10
     490:	c4 01       	movw	r24, r8
     492:	bf 77       	andi	r27, 0x7F	; 127
     494:	bc 01       	movw	r22, r24
     496:	cd 01       	movw	r24, r26
     498:	90 58       	subi	r25, 0x80	; 128
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 ef       	ldi	r20, 0xF0	; 240
     4a0:	51 e4       	ldi	r21, 0x41	; 65
     4a2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
     4a6:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <exp>
     4aa:	6b 01       	movw	r12, r22
     4ac:	7c 01       	movw	r14, r24
		//Set distance
		dist = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	23 2d       	mov	r18, r3
     4b2:	30 2f       	mov	r19, r16
     4b4:	41 2f       	mov	r20, r17
     4b6:	58 2f       	mov	r21, r24
     4b8:	63 2d       	mov	r22, r3
     4ba:	70 2f       	mov	r23, r16
     4bc:	81 2f       	mov	r24, r17
     4be:	95 2f       	mov	r25, r21
     4c0:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     4c4:	6b 83       	std	Y+3, r22	; 0x03
     4c6:	7c 83       	std	Y+4, r23	; 0x04
     4c8:	8d 83       	std	Y+5, r24	; 0x05
     4ca:	9e 83       	std	Y+6, r25	; 0x06
     4cc:	7f 81       	ldd	r23, Y+7	; 0x07
     4ce:	99 81       	ldd	r25, Y+1	; 0x01
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	27 2f       	mov	r18, r23
     4d4:	32 2d       	mov	r19, r2
     4d6:	49 2f       	mov	r20, r25
     4d8:	58 2f       	mov	r21, r24
     4da:	67 2f       	mov	r22, r23
     4dc:	72 2d       	mov	r23, r2
     4de:	89 2f       	mov	r24, r25
     4e0:	95 2f       	mov	r25, r21
     4e2:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	6b 81       	ldd	r22, Y+3	; 0x03
     4ec:	7c 81       	ldd	r23, Y+4	; 0x04
     4ee:	8d 81       	ldd	r24, Y+5	; 0x05
     4f0:	9e 81       	ldd	r25, Y+6	; 0x06
     4f2:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
     4f6:	0e 94 ba 13 	call	0x2774	; 0x2774 <sqrt>
     4fa:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     4fe:	88 27       	eor	r24, r24
     500:	77 fd       	sbrc	r23, 7
     502:	80 95       	com	r24
     504:	98 2f       	mov	r25, r24
     506:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     50a:	69 83       	std	Y+1, r22	; 0x01
     50c:	7a 83       	std	Y+2, r23	; 0x02
     50e:	8b 83       	std	Y+3, r24	; 0x03
     510:	9f 83       	std	Y+7, r25	; 0x07
		spd = ((float)dist)/70.0;
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	4c e8       	ldi	r20, 0x8C	; 140
     518:	52 e4       	ldi	r21, 0x42	; 66
     51a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
     51e:	26 2e       	mov	r2, r22
     520:	37 2e       	mov	r3, r23
     522:	08 2f       	mov	r16, r24
     524:	19 2f       	mov	r17, r25
     526:	68 87       	std	Y+8, r22	; 0x08
     528:	79 87       	std	Y+9, r23	; 0x09
     52a:	8a 87       	std	Y+10, r24	; 0x0a
     52c:	9b 87       	std	Y+11, r25	; 0x0b
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     52e:	0e 94 b5 0b 	call	0x176a	; 0x176a <m_usb_rx_char>
     532:	80 93 7b 01 	sts	0x017B, r24

			m_usb_rx_flush();  				//clear buffer
     536:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     53a:	80 91 7b 01 	lds	r24, 0x017B
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	09 f0       	breq	.+2      	; 0x544 <drive_to_point2+0x208>
     542:	50 c0       	rjmp	.+160    	; 0x5e4 <drive_to_point2+0x2a8>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     544:	a2 e9       	ldi	r26, 0x92	; 146
     546:	b1 e0       	ldi	r27, 0x01	; 1
     548:	8d 92       	st	X+, r8
     54a:	9d 92       	st	X+, r9
     54c:	ad 92       	st	X+, r10
     54e:	bc 92       	st	X, r11
     550:	13 97       	sbiw	r26, 0x03	; 3
				data[4] = deg*100.0;
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	48 ec       	ldi	r20, 0xC8	; 200
     558:	52 e4       	ldi	r21, 0x42	; 66
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     562:	e6 e9       	ldi	r30, 0x96	; 150
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	60 83       	st	Z, r22
     568:	71 83       	std	Z+1, r23	; 0x01
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	93 83       	std	Z+3, r25	; 0x03
				data[5] = dist;
     56e:	59 81       	ldd	r21, Y+1	; 0x01
     570:	4a 81       	ldd	r20, Y+2	; 0x02
     572:	3b 81       	ldd	r19, Y+3	; 0x03
     574:	2f 81       	ldd	r18, Y+7	; 0x07
     576:	85 2f       	mov	r24, r21
     578:	94 2f       	mov	r25, r20
     57a:	a3 2f       	mov	r26, r19
     57c:	b2 2f       	mov	r27, r18
     57e:	ea e9       	ldi	r30, 0x9A	; 154
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	80 83       	st	Z, r24
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	a2 83       	std	Z+2, r26	; 0x02
     588:	b3 83       	std	Z+3, r27	; 0x03
				data[6] = spd*100.0;
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	48 ec       	ldi	r20, 0xC8	; 200
     590:	52 e4       	ldi	r21, 0x42	; 66
     592:	62 2d       	mov	r22, r2
     594:	73 2d       	mov	r23, r3
     596:	80 2f       	mov	r24, r16
     598:	91 2f       	mov	r25, r17
     59a:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     59e:	ae e9       	ldi	r26, 0x9E	; 158
     5a0:	b1 e0       	ldi	r27, 0x01	; 1
     5a2:	6d 93       	st	X+, r22
     5a4:	7d 93       	st	X+, r23
     5a6:	8d 93       	st	X+, r24
     5a8:	9c 93       	st	X, r25
     5aa:	13 97       	sbiw	r26, 0x03	; 3
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f6 e8       	ldi	r31, 0x86	; 134
     5b0:	af 2e       	mov	r10, r31
     5b2:	f1 e0       	ldi	r31, 0x01	; 1
     5b4:	bf 2e       	mov	r11, r31
     5b6:	f0 2d       	mov	r31, r0
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     5b8:	f5 01       	movw	r30, r10
     5ba:	61 91       	ld	r22, Z+
     5bc:	71 91       	ld	r23, Z+
     5be:	81 91       	ld	r24, Z+
     5c0:	91 91       	ld	r25, Z+
     5c2:	5f 01       	movw	r10, r30
     5c4:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     5c8:	cb 01       	movw	r24, r22
     5ca:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <m_usb_tx_int>
					m_usb_tx_char('\t');
     5ce:	89 e0       	ldi	r24, 0x09	; 9
     5d0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = dist;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     5d4:	f2 ea       	ldi	r31, 0xA2	; 162
     5d6:	af 16       	cp	r10, r31
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	bf 06       	cpc	r11, r31
     5dc:	69 f7       	brne	.-38     	; 0x5b8 <drive_to_point2+0x27c>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     5de:	8a e0       	ldi	r24, 0x0A	; 10
     5e0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	5f e3       	ldi	r21, 0x3F	; 63
     5ec:	62 2d       	mov	r22, r2
     5ee:	73 2d       	mov	r23, r3
     5f0:	80 2f       	mov	r24, r16
     5f2:	91 2f       	mov	r25, r17
     5f4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__gesf2>
     5f8:	18 16       	cp	r1, r24
     5fa:	2c f4       	brge	.+10     	; 0x606 <drive_to_point2+0x2ca>
     5fc:	18 86       	std	Y+8, r1	; 0x08
     5fe:	19 86       	std	Y+9, r1	; 0x09
     600:	1a 86       	std	Y+10, r1	; 0x0a
     602:	2f e3       	ldi	r18, 0x3F	; 63
     604:	2b 87       	std	Y+11, r18	; 0x0b
		if (dist < 5) {break;}
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 ea       	ldi	r20, 0xA0	; 160
     60c:	50 e4       	ldi	r21, 0x40	; 64
     60e:	b9 81       	ldd	r27, Y+1	; 0x01
     610:	aa 81       	ldd	r26, Y+2	; 0x02
     612:	1b 81       	ldd	r17, Y+3	; 0x03
     614:	0f 81       	ldd	r16, Y+7	; 0x07
     616:	6b 2f       	mov	r22, r27
     618:	7a 2f       	mov	r23, r26
     61a:	81 2f       	mov	r24, r17
     61c:	90 2f       	mov	r25, r16
     61e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__cmpsf2>
     622:	88 23       	and	r24, r24
     624:	7c f0       	brlt	.+30     	; 0x644 <drive_to_point2+0x308>
		turn(dir, spd, deg);
     626:	97 01       	movw	r18, r14
     628:	86 01       	movw	r16, r12
     62a:	f8 85       	ldd	r31, Y+8	; 0x08
     62c:	e9 85       	ldd	r30, Y+9	; 0x09
     62e:	9a 85       	ldd	r25, Y+10	; 0x0a
     630:	8b 85       	ldd	r24, Y+11	; 0x0b
     632:	4f 2f       	mov	r20, r31
     634:	5e 2f       	mov	r21, r30
     636:	69 2f       	mov	r22, r25
     638:	78 2f       	mov	r23, r24
     63a:	8c 85       	ldd	r24, Y+12	; 0x0c
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 08 01 	call	0x210	; 0x210 <turn>
		
	}
     642:	a4 ce       	rjmp	.-696    	; 0x38c <drive_to_point2+0x50>
	reverse();
     644:	0e 94 8b 01 	call	0x316	; 0x316 <reverse>
	OCR1B = 0;
     648:	10 92 8b 00 	sts	0x008B, r1
     64c:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     650:	10 92 99 00 	sts	0x0099, r1
     654:	10 92 98 00 	sts	0x0098, r1
     658:	ff cf       	rjmp	.-2      	; 0x658 <drive_to_point2+0x31c>

0000065a <drive_to_goal>:
	m_red(OFF);
	game_pause();
}

void drive_to_goal() {
	drive_to_point2(30,0);
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	8e e1       	ldi	r24, 0x1E	; 30
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 9e 01 	call	0x33c	; 0x33c <drive_to_point2>

00000666 <shoot>:
}

void shoot() {
		set(PORTB,7);
     666:	2f 9a       	sbi	0x05, 7	; 5
     668:	2f ef       	ldi	r18, 0xFF	; 255
     66a:	81 ee       	ldi	r24, 0xE1	; 225
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <shoot+0x8>
     676:	00 c0       	rjmp	.+0      	; 0x678 <shoot+0x12>
     678:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     67a:	2f 98       	cbi	0x05, 7	; 5
     67c:	08 95       	ret

0000067e <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     67e:	10 92 8b 00 	sts	0x008B, r1
     682:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     686:	10 92 99 00 	sts	0x0099, r1
     68a:	10 92 98 00 	sts	0x0098, r1
	clear(PORTB,2);
     68e:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     690:	2b 98       	cbi	0x05, 3	; 5
     692:	08 95       	ret

00000694 <comm_test>:
	set(PORTB,2);
	set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     694:	5d 9a       	sbi	0x0b, 5	; 11
     696:	2f ef       	ldi	r18, 0xFF	; 255
     698:	89 e6       	ldi	r24, 0x69	; 105
     69a:	98 e1       	ldi	r25, 0x18	; 24
     69c:	21 50       	subi	r18, 0x01	; 1
     69e:	80 40       	sbci	r24, 0x00	; 0
     6a0:	90 40       	sbci	r25, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <comm_test+0x8>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <comm_test+0x12>
     6a6:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     6a8:	5d 98       	cbi	0x0b, 5	; 11
     6aa:	2f ef       	ldi	r18, 0xFF	; 255
     6ac:	89 e6       	ldi	r24, 0x69	; 105
     6ae:	98 e1       	ldi	r25, 0x18	; 24
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	80 40       	sbci	r24, 0x00	; 0
     6b4:	90 40       	sbci	r25, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <comm_test+0x1c>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <comm_test+0x26>
     6ba:	00 00       	nop
	m_wait(500);
	state = 0;
     6bc:	10 92 15 01 	sts	0x0115, r1
     6c0:	10 92 14 01 	sts	0x0114, r1
     6c4:	08 95       	ret

000006c6 <main>:
		*/
}

int main(void)
{
	set(DDRD,5);
     6c6:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     6c8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     6cc:	4a e0       	ldi	r20, 0x0A	; 10
     6ce:	68 e0       	ldi	r22, 0x08	; 8
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     6d6:	e1 e6       	ldi	r30, 0x61	; 97
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 e8       	ldi	r24, 0x80	; 128
     6dc:	80 83       	st	Z, r24
     6de:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     6e0:	85 b5       	in	r24, 0x25	; 37
     6e2:	88 60       	ori	r24, 0x08	; 8
     6e4:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     6e6:	84 b5       	in	r24, 0x24	; 36
     6e8:	82 60       	ori	r24, 0x02	; 2
     6ea:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     6ec:	84 b5       	in	r24, 0x24	; 36
     6ee:	82 60       	ori	r24, 0x02	; 2
     6f0:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     6f2:	84 b5       	in	r24, 0x24	; 36
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     6f8:	84 b5       	in	r24, 0x24	; 36
     6fa:	8f 7e       	andi	r24, 0xEF	; 239
     6fc:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     6fe:	85 b5       	in	r24, 0x25	; 37
     700:	84 60       	ori	r24, 0x04	; 4
     702:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     704:	85 b5       	in	r24, 0x25	; 37
     706:	82 60       	ori	r24, 0x02	; 2
     708:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     70a:	85 b5       	in	r24, 0x25	; 37
     70c:	81 60       	ori	r24, 0x01	; 1
     70e:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     710:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     716:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     718:	e1 e8       	ldi	r30, 0x81	; 129
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	80 61       	ori	r24, 0x10	; 16
     720:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     722:	80 81       	ld	r24, Z
     724:	88 60       	ori	r24, 0x08	; 8
     726:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     728:	a0 e8       	ldi	r26, 0x80	; 128
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	8c 91       	ld	r24, X
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     732:	8c 91       	ld	r24, X
     734:	81 60       	ori	r24, 0x01	; 1
     736:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     738:	8c 91       	ld	r24, X
     73a:	80 62       	ori	r24, 0x20	; 32
     73c:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     73e:	8c 91       	ld	r24, X
     740:	8f 7e       	andi	r24, 0xEF	; 239
     742:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     744:	80 81       	ld	r24, Z
     746:	8b 7f       	andi	r24, 0xFB	; 251
     748:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     74a:	80 81       	ld	r24, Z
     74c:	8d 7f       	andi	r24, 0xFD	; 253
     74e:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     750:	80 81       	ld	r24, Z
     752:	81 60       	ori	r24, 0x01	; 1
     754:	80 83       	st	Z, r24
	
	set(DDRB,6);
     756:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	90 93 89 00 	sts	0x0089, r25
     760:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     764:	10 92 8b 00 	sts	0x008B, r1
     768:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     76c:	e1 e9       	ldi	r30, 0x91	; 145
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	20 81       	ld	r18, Z
     772:	20 61       	ori	r18, 0x10	; 16
     774:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     776:	20 81       	ld	r18, Z
     778:	28 60       	ori	r18, 0x08	; 8
     77a:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     77c:	a0 e9       	ldi	r26, 0x90	; 144
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	2c 91       	ld	r18, X
     782:	22 60       	ori	r18, 0x02	; 2
     784:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     786:	2c 91       	ld	r18, X
     788:	2e 7f       	andi	r18, 0xFE	; 254
     78a:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     78c:	2c 91       	ld	r18, X
     78e:	20 68       	ori	r18, 0x80	; 128
     790:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     792:	2c 91       	ld	r18, X
     794:	2f 7b       	andi	r18, 0xBF	; 191
     796:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     798:	20 81       	ld	r18, Z
     79a:	2b 7f       	andi	r18, 0xFB	; 251
     79c:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     79e:	20 81       	ld	r18, Z
     7a0:	2d 7f       	andi	r18, 0xFD	; 253
     7a2:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     7a4:	20 81       	ld	r18, Z
     7a6:	21 60       	ori	r18, 0x01	; 1
     7a8:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     7aa:	90 93 97 00 	sts	0x0097, r25
     7ae:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     7b2:	10 92 99 00 	sts	0x0099, r1
     7b6:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     7ba:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     7bc:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     7be:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     7c0:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     7c2:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     7c4:	78 94       	sei
	set(ADCSRA,ADIE);
     7c6:	ea e7       	ldi	r30, 0x7A	; 122
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	88 60       	ori	r24, 0x08	; 8
     7ce:	80 83       	st	Z, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     7d0:	ac e7       	ldi	r26, 0x7C	; 124
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	8c 91       	ld	r24, X
     7d6:	8f 77       	andi	r24, 0x7F	; 127
     7d8:	8c 93       	st	X, r24
	clear(ADMUX, REFS0);	//^
     7da:	8c 91       	ld	r24, X
     7dc:	8f 7b       	andi	r24, 0xBF	; 191
     7de:	8c 93       	st	X, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     7e0:	80 81       	ld	r24, Z
     7e2:	84 60       	ori	r24, 0x04	; 4
     7e4:	80 83       	st	Z, r24
	set(ADCSRA, ADPS1);	//^
     7e6:	80 81       	ld	r24, Z
     7e8:	82 60       	ori	r24, 0x02	; 2
     7ea:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);	//^
     7ec:	80 81       	ld	r24, Z
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	80 83       	st	Z, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     7f2:	ae e7       	ldi	r26, 0x7E	; 126
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	8c 91       	ld	r24, X
     7f8:	81 60       	ori	r24, 0x01	; 1
     7fa:	8c 93       	st	X, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
     7fc:	8c 91       	ld	r24, X
     7fe:	82 60       	ori	r24, 0x02	; 2
     800:	8c 93       	st	X, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
     802:	8c 91       	ld	r24, X
     804:	80 61       	ori	r24, 0x10	; 16
     806:	8c 93       	st	X, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
     808:	8c 91       	ld	r24, X
     80a:	80 62       	ori	r24, 0x20	; 32
     80c:	8c 93       	st	X, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
     80e:	8c 91       	ld	r24, X
     810:	80 64       	ori	r24, 0x40	; 64
     812:	8c 93       	st	X, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
     814:	ad e7       	ldi	r26, 0x7D	; 125
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	8c 91       	ld	r24, X
     81a:	81 60       	ori	r24, 0x01	; 1
     81c:	8c 93       	st	X, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
     81e:	8c 91       	ld	r24, X
     820:	82 60       	ori	r24, 0x02	; 2
     822:	8c 93       	st	X, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     824:	80 81       	ld	r24, Z
     826:	80 62       	ori	r24, 0x20	; 32
     828:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     82a:	80 81       	ld	r24, Z
     82c:	80 61       	ori	r24, 0x10	; 16
     82e:	80 83       	st	Z, r24
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     830:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     832:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     834:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     836:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = -3; //set state
     838:	8d ef       	ldi	r24, 0xFD	; 253
     83a:	9f ef       	ldi	r25, 0xFF	; 255
     83c:	90 93 15 01 	sts	0x0115, r25
     840:	80 93 14 01 	sts	0x0114, r24
	long count = 0;
	

	//m_bus_init();
	m_wii_open();
     844:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <m_wii_open>
	m_usb_init();
     848:	0e 94 9c 0b 	call	0x1738	; 0x1738 <m_usb_init>

	


		//switch states
        switch (state) {
     84c:	80 91 14 01 	lds	r24, 0x0114
     850:	90 91 15 01 	lds	r25, 0x0115
     854:	83 30       	cpi	r24, 0x03	; 3
     856:	91 05       	cpc	r25, r1
     858:	a9 f1       	breq	.+106    	; 0x8c4 <main+0x1fe>
     85a:	3c f4       	brge	.+14     	; 0x86a <main+0x1a4>
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	41 f1       	breq	.+80     	; 0x8b0 <main+0x1ea>
     860:	cc f7       	brge	.-14     	; 0x854 <main+0x18e>
     862:	03 96       	adiw	r24, 0x03	; 3
     864:	09 f0       	breq	.+2      	; 0x868 <main+0x1a2>
     866:	4f c0       	rjmp	.+158    	; 0x906 <main+0x240>
     868:	10 c0       	rjmp	.+32     	; 0x88a <main+0x1c4>
     86a:	80 3a       	cpi	r24, 0xA0	; 160
     86c:	91 05       	cpc	r25, r1
     86e:	f1 f1       	breq	.+124    	; 0x8ec <main+0x226>
     870:	24 f4       	brge	.+8      	; 0x87a <main+0x1b4>
     872:	04 97       	sbiw	r24, 0x04	; 4
     874:	09 f0       	breq	.+2      	; 0x878 <main+0x1b2>
     876:	47 c0       	rjmp	.+142    	; 0x906 <main+0x240>
     878:	2b c0       	rjmp	.+86     	; 0x8d0 <main+0x20a>
     87a:	81 3a       	cpi	r24, 0xA1	; 161
     87c:	91 05       	cpc	r25, r1
     87e:	e9 f1       	breq	.+122    	; 0x8fa <main+0x234>
     880:	84 3a       	cpi	r24, 0xA4	; 164
     882:	91 05       	cpc	r25, r1
     884:	09 f0       	breq	.+2      	; 0x888 <main+0x1c2>
     886:	3f c0       	rjmp	.+126    	; 0x906 <main+0x240>
     888:	2a c0       	rjmp	.+84     	; 0x8de <main+0x218>
     88a:	10 92 17 01 	sts	0x0117, r1
     88e:	10 92 16 01 	sts	0x0116, r1
			
			case -3: //test Limit switches
				//m_green(ON);
				if (check(PINB,1)) {
     892:	19 9b       	sbis	0x03, 1	; 3
     894:	03 c0       	rjmp	.+6      	; 0x89c <main+0x1d6>
					
					m_green(ON);
     896:	6a 9a       	sbi	0x0d, 2	; 13
     898:	72 98       	cbi	0x0e, 2	; 14
     89a:	d8 cf       	rjmp	.-80     	; 0x84c <main+0x186>
				}
				
				else if (check(PINB,0)) {
     89c:	18 9b       	sbis	0x03, 0	; 3
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <main+0x1e0>
					
					m_red(ON);
     8a0:	6e 9a       	sbi	0x0d, 6	; 13
     8a2:	76 98       	cbi	0x0e, 6	; 14
     8a4:	d3 cf       	rjmp	.-90     	; 0x84c <main+0x186>
				}
				
				else {
					m_red(OFF);
     8a6:	6e 9a       	sbi	0x0d, 6	; 13
     8a8:	76 9a       	sbi	0x0e, 6	; 14
					m_green(OFF);
     8aa:	6a 9a       	sbi	0x0d, 2	; 13
     8ac:	72 9a       	sbi	0x0e, 2	; 14
     8ae:	ce cf       	rjmp	.-100    	; 0x84c <main+0x186>
     8b0:	10 92 17 01 	sts	0x0117, r1
     8b4:	10 92 16 01 	sts	0x0116, r1
				}
				
			break;

			case 0:
			drive_to_point2(-100,0);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	8c e9       	ldi	r24, 0x9C	; 156
     8be:	9f ef       	ldi	r25, 0xFF	; 255
     8c0:	0e 94 9e 01 	call	0x33c	; 0x33c <drive_to_point2>
     8c4:	10 92 17 01 	sts	0x0117, r1
     8c8:	10 92 16 01 	sts	0x0116, r1
			case 2:
			drive_to_puck();
			break;
			
			case 3:
			drive_to_goal();
     8cc:	0e 94 2d 03 	call	0x65a	; 0x65a <drive_to_goal>
     8d0:	10 92 17 01 	sts	0x0117, r1
     8d4:	10 92 16 01 	sts	0x0116, r1
			break;
			
			case 4:
			shoot();
     8d8:	0e 94 33 03 	call	0x666	; 0x666 <shoot>
			break;	
     8dc:	b7 cf       	rjmp	.-146    	; 0x84c <main+0x186>
     8de:	10 92 17 01 	sts	0x0117, r1
     8e2:	10 92 16 01 	sts	0x0116, r1
			
			case 0xA4:
			game_pause();
     8e6:	0e 94 3f 03 	call	0x67e	; 0x67e <game_pause>
			break;
     8ea:	b0 cf       	rjmp	.-160    	; 0x84c <main+0x186>
     8ec:	10 92 17 01 	sts	0x0117, r1
     8f0:	10 92 16 01 	sts	0x0116, r1
			
			case 0xA0:
			comm_test();
     8f4:	0e 94 4a 03 	call	0x694	; 0x694 <comm_test>
			break;
     8f8:	a9 cf       	rjmp	.-174    	; 0x84c <main+0x186>
     8fa:	10 92 17 01 	sts	0x0117, r1
     8fe:	10 92 16 01 	sts	0x0116, r1
			
			case 0xA1:
			drive_to_goal();
     902:	0e 94 2d 03 	call	0x65a	; 0x65a <drive_to_goal>
     906:	10 92 17 01 	sts	0x0117, r1
     90a:	10 92 16 01 	sts	0x0116, r1
			break;
			
			default:
			game_pause();
     90e:	0e 94 3f 03 	call	0x67e	; 0x67e <game_pause>
			break;
     912:	9c cf       	rjmp	.-200    	; 0x84c <main+0x186>

00000914 <__vector_29>:
		}
        
    }
}

ISR(ADC_vect) {
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
	if (ADC  > 500) {
     924:	80 91 78 00 	lds	r24, 0x0078
     928:	90 91 79 00 	lds	r25, 0x0079
     92c:	85 3f       	cpi	r24, 0xF5	; 245
     92e:	91 40       	sbci	r25, 0x01	; 1
     930:	18 f0       	brcs	.+6      	; 0x938 <__vector_29+0x24>
		m_green(ON);
     932:	6a 9a       	sbi	0x0d, 2	; 13
     934:	72 98       	cbi	0x0e, 2	; 14
     936:	02 c0       	rjmp	.+4      	; 0x93c <__vector_29+0x28>
	}
	
	else {
		m_green(OFF);
     938:	6a 9a       	sbi	0x0d, 2	; 13
     93a:	72 9a       	sbi	0x0e, 2	; 14
	}
}
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <__vector_3>:

ISR(INT2_vect)  {
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
	cli();
     96e:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     970:	6a e0       	ldi	r22, 0x0A	; 10
     972:	8c e7       	ldi	r24, 0x7C	; 124
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 3b 0b 	call	0x1676	; 0x1676 <m_rf_read>
	sei();
     97a:	78 94       	sei
	state=buffer[0];
     97c:	80 91 7c 01 	lds	r24, 0x017C
     980:	80 93 14 01 	sts	0x0114, r24
     984:	10 92 15 01 	sts	0x0115, r1
	changedState = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 17 01 	sts	0x0117, r25
     990:	80 93 16 01 	sts	0x0116, r24
     994:	ff 91       	pop	r31
     996:	ef 91       	pop	r30
     998:	bf 91       	pop	r27
     99a:	af 91       	pop	r26
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	7f 91       	pop	r23
     9a2:	6f 91       	pop	r22
     9a4:	5f 91       	pop	r21
     9a6:	4f 91       	pop	r20
     9a8:	3f 91       	pop	r19
     9aa:	2f 91       	pop	r18
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     9b6:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     9b8:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     9ba:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     9bc:	8c e0       	ldi	r24, 0x0C	; 12
     9be:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     9c2:	e9 e6       	ldi	r30, 0x69	; 105
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	80 62       	ori	r24, 0x20	; 32
     9ca:	80 83       	st	Z, r24
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 7e       	andi	r24, 0xEF	; 239
     9d0:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     9d2:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     9d4:	78 94       	sei
     9d6:	08 95       	ret

000009d8 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	8c 01       	movw	r16, r24
     9e2:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     9e4:	8e e5       	ldi	r24, 0x5E	; 94
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <m_wii_read>
	x[0] = blobs[0];
     9ec:	80 91 5e 01 	lds	r24, 0x015E
     9f0:	90 91 5f 01 	lds	r25, 0x015F
     9f4:	f8 01       	movw	r30, r16
     9f6:	91 83       	std	Z+1, r25	; 0x01
     9f8:	80 83       	st	Z, r24
	x[1] = blobs[3];
     9fa:	80 91 64 01 	lds	r24, 0x0164
     9fe:	90 91 65 01 	lds	r25, 0x0165
     a02:	93 83       	std	Z+3, r25	; 0x03
     a04:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     a06:	80 91 6a 01 	lds	r24, 0x016A
     a0a:	90 91 6b 01 	lds	r25, 0x016B
     a0e:	95 83       	std	Z+5, r25	; 0x05
     a10:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     a12:	80 91 70 01 	lds	r24, 0x0170
     a16:	90 91 71 01 	lds	r25, 0x0171
     a1a:	97 83       	std	Z+7, r25	; 0x07
     a1c:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     a1e:	80 91 60 01 	lds	r24, 0x0160
     a22:	90 91 61 01 	lds	r25, 0x0161
     a26:	99 83       	std	Y+1, r25	; 0x01
     a28:	88 83       	st	Y, r24
	y[1] = blobs[4];
     a2a:	80 91 66 01 	lds	r24, 0x0166
     a2e:	90 91 67 01 	lds	r25, 0x0167
     a32:	9b 83       	std	Y+3, r25	; 0x03
     a34:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     a36:	80 91 6c 01 	lds	r24, 0x016C
     a3a:	90 91 6d 01 	lds	r25, 0x016D
     a3e:	9d 83       	std	Y+5, r25	; 0x05
     a40:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     a42:	80 91 72 01 	lds	r24, 0x0172
     a46:	90 91 73 01 	lds	r25, 0x0173
     a4a:	9f 83       	std	Y+7, r25	; 0x07
     a4c:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <determine_blobs>:

unsigned char determine_blobs() {
     a5a:	2f 92       	push	r2
     a5c:	3f 92       	push	r3
     a5e:	4f 92       	push	r4
     a60:	5f 92       	push	r5
     a62:	6f 92       	push	r6
     a64:	7f 92       	push	r7
     a66:	8f 92       	push	r8
     a68:	9f 92       	push	r9
     a6a:	af 92       	push	r10
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	6c 97       	sbiw	r28, 0x1c	; 28
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     a8e:	10 92 26 01 	sts	0x0126, r1
     a92:	10 92 27 01 	sts	0x0127, r1
     a96:	10 92 28 01 	sts	0x0128, r1
     a9a:	10 92 29 01 	sts	0x0129, r1
	distmin = 30000;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e6       	ldi	r25, 0x60	; 96
     aa2:	aa ee       	ldi	r26, 0xEA	; 234
     aa4:	b6 e4       	ldi	r27, 0x46	; 70
     aa6:	80 93 00 01 	sts	0x0100, r24
     aaa:	90 93 01 01 	sts	0x0101, r25
     aae:	a0 93 02 01 	sts	0x0102, r26
     ab2:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     ab6:	0f 2e       	mov	r0, r31
     ab8:	f8 e3       	ldi	r31, 0x38	; 56
     aba:	cf 2e       	mov	r12, r31
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	df 2e       	mov	r13, r31
     ac0:	f0 2d       	mov	r31, r0
     ac2:	0a e3       	ldi	r16, 0x3A	; 58
     ac4:	11 e0       	ldi	r17, 0x01	; 1
     ac6:	0f 2e       	mov	r0, r31
     ac8:	fc e3       	ldi	r31, 0x3C	; 60
     aca:	ef 2e       	mov	r14, r31
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	ff 2e       	mov	r15, r31
     ad0:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     ad2:	6e e2       	ldi	r22, 0x2E	; 46
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	86 e3       	ldi	r24, 0x36	; 54
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     ade:	80 91 36 01 	lds	r24, 0x0136
     ae2:	90 91 37 01 	lds	r25, 0x0137
     ae6:	8f 3f       	cpi	r24, 0xFF	; 255
     ae8:	93 40       	sbci	r25, 0x03	; 3
     aea:	98 f7       	brcc	.-26     	; 0xad2 <determine_blobs+0x78>
     aec:	f6 01       	movw	r30, r12
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	8f 3f       	cpi	r24, 0xFF	; 255
     af4:	93 40       	sbci	r25, 0x03	; 3
     af6:	68 f7       	brcc	.-38     	; 0xad2 <determine_blobs+0x78>
     af8:	f8 01       	movw	r30, r16
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	8f 3f       	cpi	r24, 0xFF	; 255
     b00:	93 40       	sbci	r25, 0x03	; 3
     b02:	38 f7       	brcc	.-50     	; 0xad2 <determine_blobs+0x78>
     b04:	f7 01       	movw	r30, r14
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	8f 3f       	cpi	r24, 0xFF	; 255
     b0c:	93 40       	sbci	r25, 0x03	; 3
     b0e:	08 f7       	brcc	.-62     	; 0xad2 <determine_blobs+0x78>
     b10:	80 90 2a 01 	lds	r8, 0x012A
     b14:	90 90 2b 01 	lds	r9, 0x012B
     b18:	a0 90 2c 01 	lds	r10, 0x012C
     b1c:	b0 90 2d 01 	lds	r11, 0x012D
     b20:	20 91 26 01 	lds	r18, 0x0126
     b24:	29 83       	std	Y+1, r18	; 0x01
     b26:	30 91 27 01 	lds	r19, 0x0127
     b2a:	3a 83       	std	Y+2, r19	; 0x02
     b2c:	40 91 28 01 	lds	r20, 0x0128
     b30:	4b 83       	std	Y+3, r20	; 0x03
     b32:	50 91 29 01 	lds	r21, 0x0129
     b36:	5c 83       	std	Y+4, r21	; 0x04
     b38:	60 91 20 01 	lds	r22, 0x0120
     b3c:	6b 8b       	std	Y+19, r22	; 0x13
     b3e:	70 91 21 01 	lds	r23, 0x0121
     b42:	7c 8b       	std	Y+20, r23	; 0x14
     b44:	80 91 1e 01 	lds	r24, 0x011E
     b48:	89 8b       	std	Y+17, r24	; 0x11
     b4a:	90 91 1f 01 	lds	r25, 0x011F
     b4e:	9a 8b       	std	Y+18, r25	; 0x12
     b50:	e0 91 22 01 	lds	r30, 0x0122
     b54:	ed 8b       	std	Y+21, r30	; 0x15
     b56:	f0 91 23 01 	lds	r31, 0x0123
     b5a:	fe 8b       	std	Y+22, r31	; 0x16
     b5c:	20 91 24 01 	lds	r18, 0x0124
     b60:	2f 8b       	std	Y+23, r18	; 0x17
     b62:	30 91 25 01 	lds	r19, 0x0125
     b66:	38 8f       	std	Y+24, r19	; 0x18
     b68:	40 91 00 01 	lds	r20, 0x0100
     b6c:	4d 83       	std	Y+5, r20	; 0x05
     b6e:	50 91 01 01 	lds	r21, 0x0101
     b72:	5e 83       	std	Y+6, r21	; 0x06
     b74:	20 90 02 01 	lds	r2, 0x0102
     b78:	30 90 03 01 	lds	r3, 0x0103
     b7c:	60 91 1c 01 	lds	r22, 0x011C
     b80:	69 8f       	std	Y+25, r22	; 0x19
     b82:	70 91 1d 01 	lds	r23, 0x011D
     b86:	7a 8f       	std	Y+26, r23	; 0x1a
     b88:	80 91 1a 01 	lds	r24, 0x011A
     b8c:	90 91 1b 01 	lds	r25, 0x011B
     b90:	98 8b       	std	Y+16, r25	; 0x10
     b92:	8f 87       	std	Y+15, r24	; 0x0f
     b94:	18 86       	std	Y+8, r1	; 0x08
     b96:	1f 82       	std	Y+7, r1	; 0x07
     b98:	c1 2c       	mov	r12, r1
     b9a:	d1 2c       	mov	r13, r1
     b9c:	b9 c0       	rjmp	.+370    	; 0xd10 <__stack+0x211>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     b9e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ba0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     ba2:	e4 15       	cp	r30, r4
     ba4:	f5 05       	cpc	r31, r5
     ba6:	09 f4       	brne	.+2      	; 0xbaa <__stack+0xab>
     ba8:	9c c0       	rjmp	.+312    	; 0xce2 <__stack+0x1e3>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     baa:	e9 85       	ldd	r30, Y+9	; 0x09
     bac:	fa 85       	ldd	r31, Y+10	; 0x0a
     bae:	60 81       	ld	r22, Z
     bb0:	71 81       	ldd	r23, Z+1	; 0x01
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     bba:	6b 01       	movw	r12, r22
     bbc:	7c 01       	movw	r14, r24
     bbe:	f3 01       	movw	r30, r6
     bc0:	60 81       	ld	r22, Z
     bc2:	71 81       	ldd	r23, Z+1	; 0x01
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
     bd8:	c6 2e       	mov	r12, r22
     bda:	d7 2e       	mov	r13, r23
     bdc:	e8 2e       	mov	r14, r24
     bde:	f9 2e       	mov	r15, r25
     be0:	eb 85       	ldd	r30, Y+11	; 0x0b
     be2:	fc 85       	ldd	r31, Y+12	; 0x0c
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     bf0:	4b 01       	movw	r8, r22
     bf2:	5c 01       	movw	r10, r24
     bf4:	f8 01       	movw	r30, r16
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	c5 01       	movw	r24, r10
     c08:	b4 01       	movw	r22, r8
     c0a:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
     c0e:	86 2e       	mov	r8, r22
     c10:	97 2e       	mov	r9, r23
     c12:	a8 2e       	mov	r10, r24
     c14:	b9 2e       	mov	r11, r25
     c16:	2c 2d       	mov	r18, r12
     c18:	3d 2d       	mov	r19, r13
     c1a:	4e 2d       	mov	r20, r14
     c1c:	5f 2d       	mov	r21, r15
     c1e:	6c 2d       	mov	r22, r12
     c20:	7d 2d       	mov	r23, r13
     c22:	8e 2d       	mov	r24, r14
     c24:	9f 2d       	mov	r25, r15
     c26:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     c2a:	6b 01       	movw	r12, r22
     c2c:	7c 01       	movw	r14, r24
     c2e:	28 2d       	mov	r18, r8
     c30:	39 2d       	mov	r19, r9
     c32:	4a 2d       	mov	r20, r10
     c34:	5b 2d       	mov	r21, r11
     c36:	68 2d       	mov	r22, r8
     c38:	79 2d       	mov	r23, r9
     c3a:	8a 2d       	mov	r24, r10
     c3c:	9b 2d       	mov	r25, r11
     c3e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
     c4e:	0e 94 ba 13 	call	0x2774	; 0x2774 <sqrt>
     c52:	86 2e       	mov	r8, r22
     c54:	97 2e       	mov	r9, r23
     c56:	a8 2e       	mov	r10, r24
     c58:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     c5a:	79 81       	ldd	r23, Y+1	; 0x01
     c5c:	6a 81       	ldd	r22, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	27 2f       	mov	r18, r23
     c64:	36 2f       	mov	r19, r22
     c66:	49 2f       	mov	r20, r25
     c68:	58 2f       	mov	r21, r24
     c6a:	68 2d       	mov	r22, r8
     c6c:	79 2d       	mov	r23, r9
     c6e:	8a 2d       	mov	r24, r10
     c70:	9b 2d       	mov	r25, r11
     c72:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__gesf2>
     c76:	18 16       	cp	r1, r24
     c78:	d4 f4       	brge	.+52     	; 0xcae <__stack+0x1af>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	5f e3       	ldi	r21, 0x3F	; 63
     c82:	68 2d       	mov	r22, r8
     c84:	79 2d       	mov	r23, r9
     c86:	8a 2d       	mov	r24, r10
     c88:	9b 2d       	mov	r25, r11
     c8a:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
     c8e:	6d 8b       	std	Y+21, r22	; 0x15
     c90:	7e 8b       	std	Y+22, r23	; 0x16
     c92:	8f 8b       	std	Y+23, r24	; 0x17
     c94:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     c96:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c98:	f9 8b       	std	Y+17, r31	; 0x11
     c9a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c9c:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     c9e:	3d 85       	ldd	r19, Y+13	; 0x0d
     ca0:	3b 8b       	std	Y+19, r19	; 0x13
     ca2:	4e 85       	ldd	r20, Y+14	; 0x0e
     ca4:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     ca6:	89 82       	std	Y+1, r8	; 0x01
     ca8:	9a 82       	std	Y+2, r9	; 0x02
     caa:	ab 82       	std	Y+3, r10	; 0x03
     cac:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     cae:	7d 81       	ldd	r23, Y+5	; 0x05
     cb0:	6e 81       	ldd	r22, Y+6	; 0x06
     cb2:	27 2f       	mov	r18, r23
     cb4:	36 2f       	mov	r19, r22
     cb6:	42 2d       	mov	r20, r2
     cb8:	53 2d       	mov	r21, r3
     cba:	68 2d       	mov	r22, r8
     cbc:	79 2d       	mov	r23, r9
     cbe:	8a 2d       	mov	r24, r10
     cc0:	9b 2d       	mov	r25, r11
     cc2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	64 f4       	brge	.+24     	; 0xce2 <__stack+0x1e3>
						distmin = dist;
						close1 = i;
						close2 = j;
     cca:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ccc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     cce:	78 8b       	std	Y+16, r23	; 0x10
     cd0:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     cd2:	7d 85       	ldd	r23, Y+13	; 0x0d
     cd4:	79 8f       	std	Y+25, r23	; 0x19
     cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
     cd8:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     cda:	8d 82       	std	Y+5, r8	; 0x05
     cdc:	9e 82       	std	Y+6, r9	; 0x06
     cde:	2a 2c       	mov	r2, r10
     ce0:	3b 2c       	mov	r3, r11
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	69 0e       	add	r6, r25
     ce6:	71 1c       	adc	r7, r1
     ce8:	0e 5f       	subi	r16, 0xFE	; 254
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     cec:	eb 8d       	ldd	r30, Y+27	; 0x1b
     cee:	fc 8d       	ldd	r31, Y+28	; 0x1c
     cf0:	31 96       	adiw	r30, 0x01	; 1
     cf2:	fc 8f       	std	Y+28, r31	; 0x1c
     cf4:	eb 8f       	std	Y+27, r30	; 0x1b
     cf6:	34 97       	sbiw	r30, 0x04	; 4
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__stack+0x1fd>
     cfa:	51 cf       	rjmp	.-350    	; 0xb9e <__stack+0x9f>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     cfc:	2f 81       	ldd	r18, Y+7	; 0x07
     cfe:	38 85       	ldd	r19, Y+8	; 0x08
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	38 87       	std	Y+8, r19	; 0x08
     d06:	2f 83       	std	Y+7, r18	; 0x07
     d08:	69 01       	movw	r12, r18
     d0a:	24 30       	cpi	r18, 0x04	; 4
     d0c:	31 05       	cpc	r19, r1
     d0e:	39 f1       	breq	.+78     	; 0xd5e <__stack+0x25f>
				for (int j = i; j < 4; j++) {
     d10:	34 e0       	ldi	r19, 0x04	; 4
     d12:	c3 16       	cp	r12, r19
     d14:	d1 04       	cpc	r13, r1
     d16:	94 f7       	brge	.-28     	; 0xcfc <__stack+0x1fd>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     d18:	86 01       	movw	r16, r12
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     d1e:	00 0f       	add	r16, r16
     d20:	11 1f       	adc	r17, r17
     d22:	0f 2e       	mov	r0, r31
     d24:	f6 e3       	ldi	r31, 0x36	; 54
     d26:	ef 2e       	mov	r14, r31
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	ff 2e       	mov	r15, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	e0 0e       	add	r14, r16
     d30:	f1 1e       	adc	r15, r17
     d32:	02 5d       	subi	r16, 0xD2	; 210
     d34:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     d36:	c6 01       	movw	r24, r12
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	ac 01       	movw	r20, r24
     d3e:	4a 5c       	subi	r20, 0xCA	; 202
     d40:	5e 4f       	sbci	r21, 0xFE	; 254
     d42:	5a 87       	std	Y+10, r21	; 0x0a
     d44:	49 87       	std	Y+9, r20	; 0x09
     d46:	bc 01       	movw	r22, r24
     d48:	62 5d       	subi	r22, 0xD2	; 210
     d4a:	7e 4f       	sbci	r23, 0xFE	; 254
     d4c:	7c 87       	std	Y+12, r23	; 0x0c
     d4e:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     d50:	cd 86       	std	Y+13, r12	; 0x0d
     d52:	de 86       	std	Y+14, r13	; 0x0e
     d54:	dc 8e       	std	Y+28, r13	; 0x1c
     d56:	cb 8e       	std	Y+27, r12	; 0x1b
     d58:	26 01       	movw	r4, r12
     d5a:	37 01       	movw	r6, r14
     d5c:	c7 cf       	rjmp	.-114    	; 0xcec <__stack+0x1ed>
     d5e:	88 2d       	mov	r24, r8
     d60:	99 2d       	mov	r25, r9
     d62:	aa 2d       	mov	r26, r10
     d64:	bb 2d       	mov	r27, r11
     d66:	80 93 2a 01 	sts	0x012A, r24
     d6a:	90 93 2b 01 	sts	0x012B, r25
     d6e:	a0 93 2c 01 	sts	0x012C, r26
     d72:	b0 93 2d 01 	sts	0x012D, r27
     d76:	59 81       	ldd	r21, Y+1	; 0x01
     d78:	4a 81       	ldd	r20, Y+2	; 0x02
     d7a:	3b 81       	ldd	r19, Y+3	; 0x03
     d7c:	2c 81       	ldd	r18, Y+4	; 0x04
     d7e:	85 2f       	mov	r24, r21
     d80:	94 2f       	mov	r25, r20
     d82:	a3 2f       	mov	r26, r19
     d84:	b2 2f       	mov	r27, r18
     d86:	80 93 26 01 	sts	0x0126, r24
     d8a:	90 93 27 01 	sts	0x0127, r25
     d8e:	a0 93 28 01 	sts	0x0128, r26
     d92:	b0 93 29 01 	sts	0x0129, r27
     d96:	7b 89       	ldd	r23, Y+19	; 0x13
     d98:	70 93 20 01 	sts	0x0120, r23
     d9c:	8c 89       	ldd	r24, Y+20	; 0x14
     d9e:	80 93 21 01 	sts	0x0121, r24
     da2:	99 89       	ldd	r25, Y+17	; 0x11
     da4:	90 93 1e 01 	sts	0x011E, r25
     da8:	ea 89       	ldd	r30, Y+18	; 0x12
     daa:	e0 93 1f 01 	sts	0x011F, r30
     dae:	5d 89       	ldd	r21, Y+21	; 0x15
     db0:	4e 89       	ldd	r20, Y+22	; 0x16
     db2:	3f 89       	ldd	r19, Y+23	; 0x17
     db4:	28 8d       	ldd	r18, Y+24	; 0x18
     db6:	85 2f       	mov	r24, r21
     db8:	94 2f       	mov	r25, r20
     dba:	a3 2f       	mov	r26, r19
     dbc:	b2 2f       	mov	r27, r18
     dbe:	80 93 22 01 	sts	0x0122, r24
     dc2:	90 93 23 01 	sts	0x0123, r25
     dc6:	a0 93 24 01 	sts	0x0124, r26
     dca:	b0 93 25 01 	sts	0x0125, r27
     dce:	5d 81       	ldd	r21, Y+5	; 0x05
     dd0:	4e 81       	ldd	r20, Y+6	; 0x06
     dd2:	85 2f       	mov	r24, r21
     dd4:	94 2f       	mov	r25, r20
     dd6:	a2 2d       	mov	r26, r2
     dd8:	b3 2d       	mov	r27, r3
     dda:	80 93 00 01 	sts	0x0100, r24
     dde:	90 93 01 01 	sts	0x0101, r25
     de2:	a0 93 02 01 	sts	0x0102, r26
     de6:	b0 93 03 01 	sts	0x0103, r27
     dea:	f9 8d       	ldd	r31, Y+25	; 0x19
     dec:	f0 93 1c 01 	sts	0x011C, r31
     df0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     df2:	20 93 1d 01 	sts	0x011D, r18
     df6:	3f 85       	ldd	r19, Y+15	; 0x0f
     df8:	30 93 1a 01 	sts	0x011A, r19
     dfc:	48 89       	ldd	r20, Y+16	; 0x10
     dfe:	40 93 1b 01 	sts	0x011B, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     e02:	80 91 20 01 	lds	r24, 0x0120
     e06:	90 91 21 01 	lds	r25, 0x0121
     e0a:	20 91 1c 01 	lds	r18, 0x011C
     e0e:	30 91 1d 01 	lds	r19, 0x011D
     e12:	82 17       	cp	r24, r18
     e14:	93 07       	cpc	r25, r19
     e16:	19 f5       	brne	.+70     	; 0xe5e <__stack+0x35f>
				top = far1;
     e18:	90 93 5d 01 	sts	0x015D, r25
     e1c:	80 93 5c 01 	sts	0x015C, r24
				bottom = far2;
     e20:	40 91 1e 01 	lds	r20, 0x011E
     e24:	50 91 1f 01 	lds	r21, 0x011F
     e28:	50 93 5b 01 	sts	0x015B, r21
     e2c:	40 93 5a 01 	sts	0x015A, r20
				right = close2;
     e30:	20 91 1a 01 	lds	r18, 0x011A
     e34:	30 91 1b 01 	lds	r19, 0x011B
     e38:	30 93 57 01 	sts	0x0157, r19
     e3c:	20 93 56 01 	sts	0x0156, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     e40:	69 e0       	ldi	r22, 0x09	; 9
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	fb 01       	movw	r30, r22
     e46:	e8 1b       	sub	r30, r24
     e48:	f9 0b       	sbc	r31, r25
     e4a:	cf 01       	movw	r24, r30
     e4c:	84 1b       	sub	r24, r20
     e4e:	95 0b       	sbc	r25, r21
     e50:	82 1b       	sub	r24, r18
     e52:	93 0b       	sbc	r25, r19
     e54:	90 93 59 01 	sts	0x0159, r25
     e58:	80 93 58 01 	sts	0x0158, r24
     e5c:	66 c0       	rjmp	.+204    	; 0xf2a <__stack+0x42b>
			}
			else if (far1 == close2) {
     e5e:	4f 85       	ldd	r20, Y+15	; 0x0f
     e60:	58 89       	ldd	r21, Y+16	; 0x10
     e62:	84 17       	cp	r24, r20
     e64:	95 07       	cpc	r25, r21
     e66:	f9 f4       	brne	.+62     	; 0xea6 <__stack+0x3a7>
				top = far1;
     e68:	90 93 5d 01 	sts	0x015D, r25
     e6c:	80 93 5c 01 	sts	0x015C, r24
				bottom = far2;
     e70:	40 91 1e 01 	lds	r20, 0x011E
     e74:	50 91 1f 01 	lds	r21, 0x011F
     e78:	50 93 5b 01 	sts	0x015B, r21
     e7c:	40 93 5a 01 	sts	0x015A, r20
				right = close1;
     e80:	30 93 57 01 	sts	0x0157, r19
     e84:	20 93 56 01 	sts	0x0156, r18
				left = 9 - top - bottom - right;
     e88:	69 e0       	ldi	r22, 0x09	; 9
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	fb 01       	movw	r30, r22
     e8e:	e8 1b       	sub	r30, r24
     e90:	f9 0b       	sbc	r31, r25
     e92:	cf 01       	movw	r24, r30
     e94:	84 1b       	sub	r24, r20
     e96:	95 0b       	sbc	r25, r21
     e98:	82 1b       	sub	r24, r18
     e9a:	93 0b       	sbc	r25, r19
     e9c:	90 93 59 01 	sts	0x0159, r25
     ea0:	80 93 58 01 	sts	0x0158, r24
     ea4:	42 c0       	rjmp	.+132    	; 0xf2a <__stack+0x42b>
			}
			else if (far2 == close1) {
     ea6:	40 91 1e 01 	lds	r20, 0x011E
     eaa:	50 91 1f 01 	lds	r21, 0x011F
     eae:	24 17       	cp	r18, r20
     eb0:	35 07       	cpc	r19, r21
     eb2:	01 f5       	brne	.+64     	; 0xef4 <__stack+0x3f5>
				top = far2;
     eb4:	30 93 5d 01 	sts	0x015D, r19
     eb8:	20 93 5c 01 	sts	0x015C, r18
				bottom = far1;
     ebc:	90 93 5b 01 	sts	0x015B, r25
     ec0:	80 93 5a 01 	sts	0x015A, r24
				right = close2;
     ec4:	4f 85       	ldd	r20, Y+15	; 0x0f
     ec6:	58 89       	ldd	r21, Y+16	; 0x10
     ec8:	50 93 57 01 	sts	0x0157, r21
     ecc:	40 93 56 01 	sts	0x0156, r20
				left = 9 - top - bottom - right;
     ed0:	49 e0       	ldi	r20, 0x09	; 9
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	ba 01       	movw	r22, r20
     ed6:	62 1b       	sub	r22, r18
     ed8:	73 0b       	sbc	r23, r19
     eda:	fb 01       	movw	r30, r22
     edc:	e8 1b       	sub	r30, r24
     ede:	f9 0b       	sbc	r31, r25
     ee0:	cf 01       	movw	r24, r30
     ee2:	2f 85       	ldd	r18, Y+15	; 0x0f
     ee4:	38 89       	ldd	r19, Y+16	; 0x10
     ee6:	82 1b       	sub	r24, r18
     ee8:	93 0b       	sbc	r25, r19
     eea:	90 93 59 01 	sts	0x0159, r25
     eee:	80 93 58 01 	sts	0x0158, r24
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <__stack+0x42b>
			}
			else {
				top = far2;
     ef4:	50 93 5d 01 	sts	0x015D, r21
     ef8:	40 93 5c 01 	sts	0x015C, r20
				bottom = far1;
     efc:	90 93 5b 01 	sts	0x015B, r25
     f00:	80 93 5a 01 	sts	0x015A, r24
				right = close1;
     f04:	30 93 57 01 	sts	0x0157, r19
     f08:	20 93 56 01 	sts	0x0156, r18
				left = 9 - top - bottom - right;
     f0c:	69 e0       	ldi	r22, 0x09	; 9
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	fb 01       	movw	r30, r22
     f12:	e4 1b       	sub	r30, r20
     f14:	f5 0b       	sbc	r31, r21
     f16:	bf 01       	movw	r22, r30
     f18:	68 1b       	sub	r22, r24
     f1a:	79 0b       	sbc	r23, r25
     f1c:	cb 01       	movw	r24, r22
     f1e:	82 1b       	sub	r24, r18
     f20:	93 0b       	sbc	r25, r19
     f22:	90 93 59 01 	sts	0x0159, r25
     f26:	80 93 58 01 	sts	0x0158, r24
			}
		}
	}
	return 1;
}
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	6c 96       	adiw	r28, 0x1c	; 28
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	bf 90       	pop	r11
     f4a:	af 90       	pop	r10
     f4c:	9f 90       	pop	r9
     f4e:	8f 90       	pop	r8
     f50:	7f 90       	pop	r7
     f52:	6f 90       	pop	r6
     f54:	5f 90       	pop	r5
     f56:	4f 90       	pop	r4
     f58:	3f 90       	pop	r3
     f5a:	2f 90       	pop	r2
     f5c:	08 95       	ret

00000f5e <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
     f5e:	2f 92       	push	r2
     f60:	3f 92       	push	r3
     f62:	4f 92       	push	r4
     f64:	5f 92       	push	r5
     f66:	6f 92       	push	r6
     f68:	7f 92       	push	r7
     f6a:	8f 92       	push	r8
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	2d 97       	sbiw	r28, 0x0d	; 13
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	8c 01       	movw	r16, r24
	numlost = 0;
     f94:	10 92 19 01 	sts	0x0119, r1
     f98:	10 92 18 01 	sts	0x0118, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
     f9c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
     fa0:	e0 90 5c 01 	lds	r14, 0x015C
     fa4:	f0 90 5d 01 	lds	r15, 0x015D
     fa8:	f7 01       	movw	r30, r14
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ea 5c       	subi	r30, 0xCA	; 202
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	20 81       	ld	r18, Z
     fb4:	31 81       	ldd	r19, Z+1	; 0x01
     fb6:	3a 83       	std	Y+2, r19	; 0x02
     fb8:	29 83       	std	Y+1, r18	; 0x01
     fba:	2f 3f       	cpi	r18, 0xFF	; 255
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	38 07       	cpc	r19, r24
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <localize+0x66>
     fc2:	ea c2       	rjmp	.+1492   	; 0x1598 <localize+0x63a>
     fc4:	a0 90 5a 01 	lds	r10, 0x015A
     fc8:	b0 90 5b 01 	lds	r11, 0x015B
     fcc:	f5 01       	movw	r30, r10
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ea 5c       	subi	r30, 0xCA	; 202
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	c0 80       	ld	r12, Z
     fd8:	d1 80       	ldd	r13, Z+1	; 0x01
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	c9 16       	cp	r12, r25
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	d9 06       	cpc	r13, r25
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <localize+0x88>
     fe4:	d9 c2       	rjmp	.+1458   	; 0x1598 <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
     fe6:	b9 01       	movw	r22, r18
     fe8:	6c 0d       	add	r22, r12
     fea:	7d 1d       	adc	r23, r13
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1000:	20 91 08 01 	lds	r18, 0x0108
    1004:	30 91 09 01 	lds	r19, 0x0109
    1008:	40 91 0a 01 	lds	r20, 0x010A
    100c:	50 91 0b 01 	lds	r21, 0x010B
    1010:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
    1014:	6d 83       	std	Y+5, r22	; 0x05
    1016:	7e 83       	std	Y+6, r23	; 0x06
    1018:	8f 83       	std	Y+7, r24	; 0x07
    101a:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    101c:	f7 01       	movw	r30, r14
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	e2 5d       	subi	r30, 0xD2	; 210
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	e0 80       	ld	r14, Z
    1028:	f1 80       	ldd	r15, Z+1	; 0x01
    102a:	f5 01       	movw	r30, r10
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	e2 5d       	subi	r30, 0xD2	; 210
    1032:	fe 4f       	sbci	r31, 0xFE	; 254
    1034:	a0 80       	ld	r10, Z
    1036:	b1 80       	ldd	r11, Z+1	; 0x01
    1038:	b5 01       	movw	r22, r10
    103a:	6e 0d       	add	r22, r14
    103c:	7f 1d       	adc	r23, r15
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1052:	20 91 04 01 	lds	r18, 0x0104
    1056:	30 91 05 01 	lds	r19, 0x0105
    105a:	40 91 06 01 	lds	r20, 0x0106
    105e:	50 91 07 01 	lds	r21, 0x0107
    1062:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
    1066:	69 87       	std	Y+9, r22	; 0x09
    1068:	7a 87       	std	Y+10, r23	; 0x0a
    106a:	28 2e       	mov	r2, r24
    106c:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    106e:	b7 01       	movw	r22, r14
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    1078:	2b 01       	movw	r4, r22
    107a:	3c 01       	movw	r6, r24
    107c:	b5 01       	movw	r22, r10
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    1086:	9b 01       	movw	r18, r22
    1088:	ac 01       	movw	r20, r24
    108a:	c3 01       	movw	r24, r6
    108c:	b2 01       	movw	r22, r4
    108e:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
    1092:	4b 01       	movw	r8, r22
    1094:	5c 01       	movw	r10, r24
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	bf 01       	movw	r22, r30
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    10a4:	2b 01       	movw	r4, r22
    10a6:	3c 01       	movw	r6, r24
    10a8:	b6 01       	movw	r22, r12
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	c3 01       	movw	r24, r6
    10b8:	b2 01       	movw	r22, r4
    10ba:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
    10be:	a5 01       	movw	r20, r10
    10c0:	94 01       	movw	r18, r8
    10c2:	0e 94 a5 10 	call	0x214a	; 0x214a <atan2>
    10c6:	4b 01       	movw	r8, r22
    10c8:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    10ca:	7d 81       	ldd	r23, Y+5	; 0x05
    10cc:	6e 81       	ldd	r22, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	88 85       	ldd	r24, Y+8	; 0x08
    10d2:	27 2f       	mov	r18, r23
    10d4:	36 2f       	mov	r19, r22
    10d6:	49 2f       	mov	r20, r25
    10d8:	58 2f       	mov	r21, r24
    10da:	b9 85       	ldd	r27, Y+9	; 0x09
    10dc:	aa 85       	ldd	r26, Y+10	; 0x0a
    10de:	6b 2f       	mov	r22, r27
    10e0:	7a 2f       	mov	r23, r26
    10e2:	82 2d       	mov	r24, r2
    10e4:	93 2d       	mov	r25, r3
    10e6:	0e 94 a5 10 	call	0x214a	; 0x214a <atan2>
    10ea:	2b 01       	movw	r4, r22
    10ec:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    10ee:	7d 81       	ldd	r23, Y+5	; 0x05
    10f0:	6e 81       	ldd	r22, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	88 85       	ldd	r24, Y+8	; 0x08
    10f6:	27 2f       	mov	r18, r23
    10f8:	36 2f       	mov	r19, r22
    10fa:	49 2f       	mov	r20, r25
    10fc:	58 2f       	mov	r21, r24
    10fe:	67 2f       	mov	r22, r23
    1100:	73 2f       	mov	r23, r19
    1102:	89 2f       	mov	r24, r25
    1104:	95 2f       	mov	r25, r21
    1106:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    110a:	6b 01       	movw	r12, r22
    110c:	7c 01       	movw	r14, r24
    110e:	79 85       	ldd	r23, Y+9	; 0x09
    1110:	6a 85       	ldd	r22, Y+10	; 0x0a
    1112:	27 2f       	mov	r18, r23
    1114:	36 2f       	mov	r19, r22
    1116:	42 2d       	mov	r20, r2
    1118:	53 2d       	mov	r21, r3
    111a:	67 2f       	mov	r22, r23
    111c:	73 2f       	mov	r23, r19
    111e:	82 2d       	mov	r24, r2
    1120:	93 2d       	mov	r25, r3
    1122:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c7 01       	movw	r24, r14
    112c:	b6 01       	movw	r22, r12
    112e:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
    1132:	0e 94 ba 13 	call	0x2774	; 0x2774 <sqrt>
    1136:	6b 01       	movw	r12, r22
    1138:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	60 91 3e 01 	lds	r22, 0x013E
    1144:	70 91 3f 01 	lds	r23, 0x013F
    1148:	80 91 40 01 	lds	r24, 0x0140
    114c:	90 91 41 01 	lds	r25, 0x0141
    1150:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__cmpsf2>
    1154:	81 11       	cpse	r24, r1
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <localize+0x20a>
			ai1 = angle;
    1158:	80 92 3e 01 	sts	0x013E, r8
    115c:	90 92 3f 01 	sts	0x013F, r9
    1160:	a0 92 40 01 	sts	0x0140, r10
    1164:	b0 92 41 01 	sts	0x0141, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    1168:	23 e3       	ldi	r18, 0x33	; 51
    116a:	33 e3       	ldi	r19, 0x33	; 51
    116c:	43 e7       	ldi	r20, 0x73	; 115
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	60 91 3e 01 	lds	r22, 0x013E
    1174:	70 91 3f 01 	lds	r23, 0x013F
    1178:	80 91 40 01 	lds	r24, 0x0140
    117c:	90 91 41 01 	lds	r25, 0x0141
    1180:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1184:	4b 01       	movw	r8, r22
    1186:	5c 01       	movw	r10, r24
    1188:	20 ed       	ldi	r18, 0xD0	; 208
    118a:	3c ec       	ldi	r19, 0xCC	; 204
    118c:	4c e4       	ldi	r20, 0x4C	; 76
    118e:	5d e3       	ldi	r21, 0x3D	; 61
    1190:	60 91 4a 01 	lds	r22, 0x014A
    1194:	70 91 4b 01 	lds	r23, 0x014B
    1198:	80 91 4c 01 	lds	r24, 0x014C
    119c:	90 91 4d 01 	lds	r25, 0x014D
    11a0:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	c5 01       	movw	r24, r10
    11aa:	b4 01       	movw	r22, r8
    11ac:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	44 e3       	ldi	r20, 0x34	; 52
    11b6:	53 e4       	ldi	r21, 0x43	; 67
    11b8:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    11bc:	23 ec       	ldi	r18, 0xC3	; 195
    11be:	35 ef       	ldi	r19, 0xF5	; 245
    11c0:	48 e4       	ldi	r20, 0x48	; 72
    11c2:	50 e4       	ldi	r21, 0x40	; 64
    11c4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
    11c8:	86 2e       	mov	r8, r22
    11ca:	97 2e       	mov	r9, r23
    11cc:	a8 2e       	mov	r10, r24
    11ce:	b9 2e       	mov	r11, r25
    11d0:	f8 01       	movw	r30, r16
    11d2:	80 86       	std	Z+8, r8	; 0x08
    11d4:	91 86       	std	Z+9, r9	; 0x09
    11d6:	a2 86       	std	Z+10, r10	; 0x0a
    11d8:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    11da:	23 ec       	ldi	r18, 0xC3	; 195
    11dc:	35 ef       	ldi	r19, 0xF5	; 245
    11de:	48 e4       	ldi	r20, 0x48	; 72
    11e0:	50 e4       	ldi	r21, 0x40	; 64
    11e2:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	44 e3       	ldi	r20, 0x34	; 52
    11ec:	53 e4       	ldi	r21, 0x43	; 67
    11ee:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
    11f2:	9b 01       	movw	r18, r22
    11f4:	ac 01       	movw	r20, r24
    11f6:	62 e5       	ldi	r22, 0x52	; 82
    11f8:	78 eb       	ldi	r23, 0xB8	; 184
    11fa:	86 e9       	ldi	r24, 0x96	; 150
    11fc:	90 e4       	ldi	r25, 0x40	; 64
    11fe:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
    1202:	a3 01       	movw	r20, r6
    1204:	92 01       	movw	r18, r4
    1206:	0e 94 31 10 	call	0x2062	; 0x2062 <__subsf3>
    120a:	86 2e       	mov	r8, r22
    120c:	97 2e       	mov	r9, r23
    120e:	a8 2e       	mov	r10, r24
    1210:	b9 2e       	mov	r11, r25
    1212:	0e 94 b0 13 	call	0x2760	; 0x2760 <sin>
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	c7 01       	movw	r24, r14
    121c:	b6 01       	movw	r22, r12
    121e:	90 58       	subi	r25, 0x80	; 128
    1220:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1224:	29 e3       	ldi	r18, 0x39	; 57
    1226:	3e e8       	ldi	r19, 0x8E	; 142
    1228:	43 ea       	ldi	r20, 0xA3	; 163
    122a:	5e e3       	ldi	r21, 0x3E	; 62
    122c:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1230:	69 83       	std	Y+1, r22	; 0x01
    1232:	7b 87       	std	Y+11, r23	; 0x0b
    1234:	8d 87       	std	Y+13, r24	; 0x0d
    1236:	9c 87       	std	Y+12, r25	; 0x0c
    1238:	47 2f       	mov	r20, r23
    123a:	38 2f       	mov	r19, r24
    123c:	29 2f       	mov	r18, r25
    123e:	86 2f       	mov	r24, r22
    1240:	94 2f       	mov	r25, r20
    1242:	a3 2f       	mov	r26, r19
    1244:	b2 2f       	mov	r27, r18
    1246:	80 93 52 01 	sts	0x0152, r24
    124a:	90 93 53 01 	sts	0x0153, r25
    124e:	a0 93 54 01 	sts	0x0154, r26
    1252:	b0 93 55 01 	sts	0x0155, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1256:	68 2d       	mov	r22, r8
    1258:	79 2d       	mov	r23, r9
    125a:	8a 2d       	mov	r24, r10
    125c:	9b 2d       	mov	r25, r11
    125e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <cos>
    1262:	a7 01       	movw	r20, r14
    1264:	96 01       	movw	r18, r12
    1266:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    126a:	29 e8       	ldi	r18, 0x89	; 137
    126c:	3a ed       	ldi	r19, 0xDA	; 218
    126e:	45 e9       	ldi	r20, 0x95	; 149
    1270:	5e e3       	ldi	r21, 0x3E	; 62
    1272:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1276:	86 2e       	mov	r8, r22
    1278:	97 2e       	mov	r9, r23
    127a:	a8 2e       	mov	r10, r24
    127c:	b9 2e       	mov	r11, r25
    127e:	86 2f       	mov	r24, r22
    1280:	99 2d       	mov	r25, r9
    1282:	aa 2d       	mov	r26, r10
    1284:	bb 2d       	mov	r27, r11
    1286:	80 93 4e 01 	sts	0x014E, r24
    128a:	90 93 4f 01 	sts	0x014F, r25
    128e:	a0 93 50 01 	sts	0x0150, r26
    1292:	b0 93 51 01 	sts	0x0151, r27
		
		if (xi1 == 0 && yi1 == 0) {
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	60 91 46 01 	lds	r22, 0x0146
    12a0:	70 91 47 01 	lds	r23, 0x0147
    12a4:	80 91 48 01 	lds	r24, 0x0148
    12a8:	90 91 49 01 	lds	r25, 0x0149
    12ac:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__cmpsf2>
    12b0:	81 11       	cpse	r24, r1
    12b2:	2b c0       	rjmp	.+86     	; 0x130a <localize+0x3ac>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	60 91 42 01 	lds	r22, 0x0142
    12be:	70 91 43 01 	lds	r23, 0x0143
    12c2:	80 91 44 01 	lds	r24, 0x0144
    12c6:	90 91 45 01 	lds	r25, 0x0145
    12ca:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__cmpsf2>
    12ce:	81 11       	cpse	r24, r1
    12d0:	1c c0       	rjmp	.+56     	; 0x130a <localize+0x3ac>
			xi1 = xi;
    12d2:	59 81       	ldd	r21, Y+1	; 0x01
    12d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    12d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    12d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12da:	85 2f       	mov	r24, r21
    12dc:	94 2f       	mov	r25, r20
    12de:	a3 2f       	mov	r26, r19
    12e0:	b2 2f       	mov	r27, r18
    12e2:	80 93 46 01 	sts	0x0146, r24
    12e6:	90 93 47 01 	sts	0x0147, r25
    12ea:	a0 93 48 01 	sts	0x0148, r26
    12ee:	b0 93 49 01 	sts	0x0149, r27
			yi1 = yi;
    12f2:	88 2d       	mov	r24, r8
    12f4:	99 2d       	mov	r25, r9
    12f6:	aa 2d       	mov	r26, r10
    12f8:	bb 2d       	mov	r27, r11
    12fa:	80 93 42 01 	sts	0x0142, r24
    12fe:	90 93 43 01 	sts	0x0143, r25
    1302:	a0 93 44 01 	sts	0x0144, r26
    1306:	b0 93 45 01 	sts	0x0145, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    130a:	23 e3       	ldi	r18, 0x33	; 51
    130c:	33 e3       	ldi	r19, 0x33	; 51
    130e:	43 e7       	ldi	r20, 0x73	; 115
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	60 91 46 01 	lds	r22, 0x0146
    1316:	70 91 47 01 	lds	r23, 0x0147
    131a:	80 91 48 01 	lds	r24, 0x0148
    131e:	90 91 49 01 	lds	r25, 0x0149
    1322:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1326:	4b 01       	movw	r8, r22
    1328:	5c 01       	movw	r10, r24
    132a:	20 ed       	ldi	r18, 0xD0	; 208
    132c:	3c ec       	ldi	r19, 0xCC	; 204
    132e:	4c e4       	ldi	r20, 0x4C	; 76
    1330:	5d e3       	ldi	r21, 0x3D	; 61
    1332:	b9 81       	ldd	r27, Y+1	; 0x01
    1334:	ab 85       	ldd	r26, Y+11	; 0x0b
    1336:	fd 85       	ldd	r31, Y+13	; 0x0d
    1338:	ec 85       	ldd	r30, Y+12	; 0x0c
    133a:	6b 2f       	mov	r22, r27
    133c:	7a 2f       	mov	r23, r26
    133e:	8f 2f       	mov	r24, r31
    1340:	9e 2f       	mov	r25, r30
    1342:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	c5 01       	movw	r24, r10
    134c:	b4 01       	movw	r22, r8
    134e:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
    1352:	f8 01       	movw	r30, r16
    1354:	60 83       	st	Z, r22
    1356:	71 83       	std	Z+1, r23	; 0x01
    1358:	82 83       	std	Z+2, r24	; 0x02
    135a:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    135c:	80 90 4e 01 	lds	r8, 0x014E
    1360:	90 90 4f 01 	lds	r9, 0x014F
    1364:	a0 90 50 01 	lds	r10, 0x0150
    1368:	b0 90 51 01 	lds	r11, 0x0151
    136c:	23 e3       	ldi	r18, 0x33	; 51
    136e:	33 e3       	ldi	r19, 0x33	; 51
    1370:	43 e7       	ldi	r20, 0x73	; 115
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	60 91 42 01 	lds	r22, 0x0142
    1378:	70 91 43 01 	lds	r23, 0x0143
    137c:	80 91 44 01 	lds	r24, 0x0144
    1380:	90 91 45 01 	lds	r25, 0x0145
    1384:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1388:	69 83       	std	Y+1, r22	; 0x01
    138a:	7a 83       	std	Y+2, r23	; 0x02
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	20 ed       	ldi	r18, 0xD0	; 208
    1392:	3c ec       	ldi	r19, 0xCC	; 204
    1394:	4c e4       	ldi	r20, 0x4C	; 76
    1396:	5d e3       	ldi	r21, 0x3D	; 61
    1398:	c5 01       	movw	r24, r10
    139a:	b4 01       	movw	r22, r8
    139c:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    13a0:	9b 01       	movw	r18, r22
    13a2:	ac 01       	movw	r20, r24
    13a4:	69 81       	ldd	r22, Y+1	; 0x01
    13a6:	7a 81       	ldd	r23, Y+2	; 0x02
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	0e 94 32 10 	call	0x2064	; 0x2064 <__addsf3>
    13b0:	f8 01       	movw	r30, r16
    13b2:	64 83       	std	Z+4, r22	; 0x04
    13b4:	75 83       	std	Z+5, r23	; 0x05
    13b6:	86 83       	std	Z+6, r24	; 0x06
    13b8:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    13ba:	80 91 5c 01 	lds	r24, 0x015C
    13be:	90 91 5d 01 	lds	r25, 0x015D
    13c2:	9c 01       	movw	r18, r24
    13c4:	22 0f       	add	r18, r18
    13c6:	33 1f       	adc	r19, r19
    13c8:	3a 83       	std	Y+2, r19	; 0x02
    13ca:	29 83       	std	Y+1, r18	; 0x01
    13cc:	f9 01       	movw	r30, r18
    13ce:	ea 5c       	subi	r30, 0xCA	; 202
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    13de:	f8 01       	movw	r30, r16
    13e0:	64 87       	std	Z+12, r22	; 0x0c
    13e2:	75 87       	std	Z+13, r23	; 0x0d
    13e4:	86 87       	std	Z+14, r24	; 0x0e
    13e6:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    13e8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ea:	fa 81       	ldd	r31, Y+2	; 0x02
    13ec:	e2 5d       	subi	r30, 0xD2	; 210
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    13fc:	f8 01       	movw	r30, r16
    13fe:	60 8b       	std	Z+16, r22	; 0x10
    1400:	71 8b       	std	Z+17, r23	; 0x11
    1402:	82 8b       	std	Z+18, r24	; 0x12
    1404:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1406:	80 91 5a 01 	lds	r24, 0x015A
    140a:	90 91 5b 01 	lds	r25, 0x015B
    140e:	9c 01       	movw	r18, r24
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	3a 83       	std	Y+2, r19	; 0x02
    1416:	29 83       	std	Y+1, r18	; 0x01
    1418:	f9 01       	movw	r30, r18
    141a:	ea 5c       	subi	r30, 0xCA	; 202
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    142a:	f8 01       	movw	r30, r16
    142c:	64 8b       	std	Z+20, r22	; 0x14
    142e:	75 8b       	std	Z+21, r23	; 0x15
    1430:	86 8b       	std	Z+22, r24	; 0x16
    1432:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1434:	e9 81       	ldd	r30, Y+1	; 0x01
    1436:	fa 81       	ldd	r31, Y+2	; 0x02
    1438:	e2 5d       	subi	r30, 0xD2	; 210
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    1448:	f8 01       	movw	r30, r16
    144a:	60 8f       	std	Z+24, r22	; 0x18
    144c:	71 8f       	std	Z+25, r23	; 0x19
    144e:	82 8f       	std	Z+26, r24	; 0x1a
    1450:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1452:	80 91 56 01 	lds	r24, 0x0156
    1456:	90 91 57 01 	lds	r25, 0x0157
    145a:	9c 01       	movw	r18, r24
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	3a 83       	std	Y+2, r19	; 0x02
    1462:	29 83       	std	Y+1, r18	; 0x01
    1464:	f9 01       	movw	r30, r18
    1466:	ea 5c       	subi	r30, 0xCA	; 202
    1468:	fe 4f       	sbci	r31, 0xFE	; 254
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    1476:	f8 01       	movw	r30, r16
    1478:	64 8f       	std	Z+28, r22	; 0x1c
    147a:	75 8f       	std	Z+29, r23	; 0x1d
    147c:	86 8f       	std	Z+30, r24	; 0x1e
    147e:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	e2 5d       	subi	r30, 0xD2	; 210
    1486:	fe 4f       	sbci	r31, 0xFE	; 254
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    1494:	f8 01       	movw	r30, r16
    1496:	60 a3       	std	Z+32, r22	; 0x20
    1498:	71 a3       	std	Z+33, r23	; 0x21
    149a:	82 a3       	std	Z+34, r24	; 0x22
    149c:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    149e:	80 91 58 01 	lds	r24, 0x0158
    14a2:	90 91 59 01 	lds	r25, 0x0159
    14a6:	9c 01       	movw	r18, r24
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	3a 83       	std	Y+2, r19	; 0x02
    14ae:	29 83       	std	Y+1, r18	; 0x01
    14b0:	f9 01       	movw	r30, r18
    14b2:	ea 5c       	subi	r30, 0xCA	; 202
    14b4:	fe 4f       	sbci	r31, 0xFE	; 254
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    14c2:	f8 01       	movw	r30, r16
    14c4:	64 a3       	std	Z+36, r22	; 0x24
    14c6:	75 a3       	std	Z+37, r23	; 0x25
    14c8:	86 a3       	std	Z+38, r24	; 0x26
    14ca:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	e2 5d       	subi	r30, 0xD2	; 210
    14d2:	fe 4f       	sbci	r31, 0xFE	; 254
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 c9 11 	call	0x2392	; 0x2392 <__floatunsisf>
    14e0:	f8 01       	movw	r30, r16
    14e2:	60 a7       	std	Z+40, r22	; 0x28
    14e4:	71 a7       	std	Z+41, r23	; 0x29
    14e6:	82 a7       	std	Z+42, r24	; 0x2a
    14e8:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	44 e3       	ldi	r20, 0x34	; 52
    14f0:	53 e4       	ldi	r21, 0x43	; 67
    14f2:	c3 01       	movw	r24, r6
    14f4:	b2 01       	movw	r22, r4
    14f6:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    14fa:	23 ec       	ldi	r18, 0xC3	; 195
    14fc:	35 ef       	ldi	r19, 0xF5	; 245
    14fe:	48 e4       	ldi	r20, 0x48	; 72
    1500:	50 e4       	ldi	r21, 0x40	; 64
    1502:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
    1506:	f8 01       	movw	r30, r16
    1508:	64 a7       	std	Z+44, r22	; 0x2c
    150a:	75 a7       	std	Z+45, r23	; 0x2d
    150c:	86 a7       	std	Z+46, r24	; 0x2e
    150e:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    1510:	5d 81       	ldd	r21, Y+5	; 0x05
    1512:	4e 81       	ldd	r20, Y+6	; 0x06
    1514:	3f 81       	ldd	r19, Y+7	; 0x07
    1516:	28 85       	ldd	r18, Y+8	; 0x08
    1518:	85 2f       	mov	r24, r21
    151a:	94 2f       	mov	r25, r20
    151c:	a3 2f       	mov	r26, r19
    151e:	b2 2f       	mov	r27, r18
    1520:	80 ab       	std	Z+48, r24	; 0x30
    1522:	91 ab       	std	Z+49, r25	; 0x31
    1524:	a2 ab       	std	Z+50, r26	; 0x32
    1526:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1528:	59 85       	ldd	r21, Y+9	; 0x09
    152a:	4a 85       	ldd	r20, Y+10	; 0x0a
    152c:	85 2f       	mov	r24, r21
    152e:	94 2f       	mov	r25, r20
    1530:	a2 2d       	mov	r26, r2
    1532:	b3 2d       	mov	r27, r3
    1534:	84 ab       	std	Z+52, r24	; 0x34
    1536:	95 ab       	std	Z+53, r25	; 0x35
    1538:	a6 ab       	std	Z+54, r26	; 0x36
    153a:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    153c:	c0 ae       	std	Z+56, r12	; 0x38
    153e:	d1 ae       	std	Z+57, r13	; 0x39
    1540:	e2 ae       	std	Z+58, r14	; 0x3a
    1542:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1544:	80 91 52 01 	lds	r24, 0x0152
    1548:	90 91 53 01 	lds	r25, 0x0153
    154c:	a0 91 54 01 	lds	r26, 0x0154
    1550:	b0 91 55 01 	lds	r27, 0x0155
    1554:	80 93 46 01 	sts	0x0146, r24
    1558:	90 93 47 01 	sts	0x0147, r25
    155c:	a0 93 48 01 	sts	0x0148, r26
    1560:	b0 93 49 01 	sts	0x0149, r27
		yi1 = yi;
    1564:	80 92 42 01 	sts	0x0142, r8
    1568:	90 92 43 01 	sts	0x0143, r9
    156c:	a0 92 44 01 	sts	0x0144, r10
    1570:	b0 92 45 01 	sts	0x0145, r11
		ai1 = ai;
    1574:	80 91 4a 01 	lds	r24, 0x014A
    1578:	90 91 4b 01 	lds	r25, 0x014B
    157c:	a0 91 4c 01 	lds	r26, 0x014C
    1580:	b0 91 4d 01 	lds	r27, 0x014D
    1584:	80 93 3e 01 	sts	0x013E, r24
    1588:	90 93 3f 01 	sts	0x013F, r25
    158c:	a0 93 40 01 	sts	0x0140, r26
    1590:	b0 93 41 01 	sts	0x0141, r27
		
		return 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	00 c0       	rjmp	.+0      	; 0x1598 <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1598:	2d 96       	adiw	r28, 0x0d	; 13
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	9f 90       	pop	r9
    15ba:	8f 90       	pop	r8
    15bc:	7f 90       	pop	r7
    15be:	6f 90       	pop	r6
    15c0:	5f 90       	pop	r5
    15c2:	4f 90       	pop	r4
    15c4:	3f 90       	pop	r3
    15c6:	2f 90       	pop	r2
    15c8:	08 95       	ret

000015ca <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	18 2f       	mov	r17, r24
    15d2:	d6 2f       	mov	r29, r22
    15d4:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    15d6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    15da:	94 ea       	ldi	r25, 0xA4	; 164
    15dc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    15e0:	ec eb       	ldi	r30, 0xBC	; 188
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	90 81       	ld	r25, Z
    15e6:	99 23       	and	r25, r25
    15e8:	ec f7       	brge	.-6      	; 0x15e4 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    15ea:	90 e5       	ldi	r25, 0x50	; 80
    15ec:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    15f0:	94 e8       	ldi	r25, 0x84	; 132
    15f2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    15f6:	ec eb       	ldi	r30, 0xBC	; 188
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	99 23       	and	r25, r25
    15fe:	ec f7       	brge	.-6      	; 0x15fa <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1600:	90 91 b9 00 	lds	r25, 0x00B9
    1604:	98 7f       	andi	r25, 0xF8	; 248
    1606:	90 32       	cpi	r25, 0x20	; 32
    1608:	29 f4       	brne	.+10     	; 0x1614 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    160a:	84 e9       	ldi	r24, 0x94	; 148
    160c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	2d c0       	rjmp	.+90     	; 0x166e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    161a:	84 e8       	ldi	r24, 0x84	; 132
    161c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1620:	ec eb       	ldi	r30, 0xBC	; 188
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	90 81       	ld	r25, Z
    1626:	99 23       	and	r25, r25
    1628:	ec f7       	brge	.-6      	; 0x1624 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    162a:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    162e:	84 e8       	ldi	r24, 0x84	; 132
    1630:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1634:	ec eb       	ldi	r30, 0xBC	; 188
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	88 23       	and	r24, r24
    163c:	ec f7       	brge	.-6      	; 0x1638 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    163e:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1642:	84 e8       	ldi	r24, 0x84	; 132
    1644:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1648:	ec eb       	ldi	r30, 0xBC	; 188
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	88 23       	and	r24, r24
    1650:	ec f7       	brge	.-6      	; 0x164c <m_rf_open+0x82>
	
	TWDR = packet_length;
    1652:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1656:	84 e8       	ldi	r24, 0x84	; 132
    1658:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    165c:	ec eb       	ldi	r30, 0xBC	; 188
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	88 23       	and	r24, r24
    1664:	ec f7       	brge	.-6      	; 0x1660 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1666:	84 e9       	ldi	r24, 0x94	; 148
    1668:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
}
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	08 95       	ret

00001676 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    167a:	24 ea       	ldi	r18, 0xA4	; 164
    167c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1680:	ec eb       	ldi	r30, 0xBC	; 188
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	20 81       	ld	r18, Z
    1686:	22 23       	and	r18, r18
    1688:	ec f7       	brge	.-6      	; 0x1684 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    168a:	21 e5       	ldi	r18, 0x51	; 81
    168c:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1690:	24 e8       	ldi	r18, 0x84	; 132
    1692:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1696:	ec eb       	ldi	r30, 0xBC	; 188
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	20 81       	ld	r18, Z
    169c:	22 23       	and	r18, r18
    169e:	ec f7       	brge	.-6      	; 0x169a <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    16a0:	20 91 b9 00 	lds	r18, 0x00B9
    16a4:	28 7f       	andi	r18, 0xF8	; 248
    16a6:	28 34       	cpi	r18, 0x48	; 72
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16aa:	84 e9       	ldi	r24, 0x94	; 148
    16ac:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    16b4:	24 ec       	ldi	r18, 0xC4	; 196
    16b6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    16ba:	ec eb       	ldi	r30, 0xBC	; 188
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	20 81       	ld	r18, Z
    16c0:	22 23       	and	r18, r18
    16c2:	ec f7       	brge	.-6      	; 0x16be <m_rf_read+0x48>
	bytes = TWDR;
    16c4:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    16c8:	46 13       	cpse	r20, r22
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	41 50       	subi	r20, 0x01	; 1
    16d0:	51 09       	sbc	r21, r1
    16d2:	14 16       	cp	r1, r20
    16d4:	15 06       	cpc	r1, r21
    16d6:	44 f0       	brlt	.+16     	; 0x16e8 <m_rf_read+0x72>
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	18 c0       	rjmp	.+48     	; 0x170e <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16de:	84 e9       	ldi	r24, 0x94	; 148
    16e0:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	25 c0       	rjmp	.+74     	; 0x1732 <m_rf_read+0xbc>
    16e8:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    16ee:	ec eb       	ldi	r30, 0xBC	; 188
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    16f4:	cb eb       	ldi	r28, 0xBB	; 187
    16f6:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    16f8:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    16fa:	60 81       	ld	r22, Z
    16fc:	66 23       	and	r22, r22
    16fe:	ec f7       	brge	.-6      	; 0x16fa <m_rf_read+0x84>
		buffer[i] = TWDR;
    1700:	68 81       	ld	r22, Y
    1702:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	24 17       	cp	r18, r20
    170a:	35 07       	cpc	r19, r21
    170c:	ac f3       	brlt	.-22     	; 0x16f8 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    170e:	24 e8       	ldi	r18, 0x84	; 132
    1710:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1714:	ec eb       	ldi	r30, 0xBC	; 188
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	20 81       	ld	r18, Z
    171a:	22 23       	and	r18, r18
    171c:	ec f7       	brge	.-6      	; 0x1718 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    171e:	20 91 bb 00 	lds	r18, 0x00BB
    1722:	fc 01       	movw	r30, r24
    1724:	e4 0f       	add	r30, r20
    1726:	f5 1f       	adc	r31, r21
    1728:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    172a:	84 e9       	ldi	r24, 0x94	; 148
    172c:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    173e:	80 ea       	ldi	r24, 0xA0	; 160
    1740:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1744:	82 e1       	ldi	r24, 0x12	; 18
    1746:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1748:	09 b4       	in	r0, 0x29	; 41
    174a:	00 fe       	sbrs	r0, 0
    174c:	fd cf       	rjmp	.-6      	; 0x1748 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    174e:	80 e9       	ldi	r24, 0x90	; 144
    1750:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1754:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1758:	10 92 77 01 	sts	0x0177, r1
	cdc_line_rtsdtr = 0;
    175c:	10 92 78 01 	sts	0x0178, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1760:	8c e0       	ldi	r24, 0x0C	; 12
    1762:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1766:	78 94       	sei
    1768:	08 95       	ret

0000176a <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    176a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    176c:	f8 94       	cli
	if (!usb_configuration) {
    176e:	80 91 77 01 	lds	r24, 0x0177
    1772:	81 11       	cpse	r24, r1
    1774:	03 c0       	rjmp	.+6      	; 0x177c <m_usb_rx_char+0x12>
		SREG = intr_state;
    1776:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    177c:	83 e0       	ldi	r24, 0x03	; 3
    177e:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    1782:	80 91 e8 00 	lds	r24, 0x00E8
    1786:	85 fd       	sbrc	r24, 5
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    178a:	9f bf       	out	0x3f, r25	; 63
		return -1;
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    1790:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    1794:	20 91 e8 00 	lds	r18, 0x00E8
    1798:	25 fd       	sbrc	r18, 5
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <m_usb_rx_char+0x38>
    179c:	2b e6       	ldi	r18, 0x6B	; 107
    179e:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    17a2:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    17a4:	08 95       	ret

000017a6 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    17a6:	80 91 77 01 	lds	r24, 0x0177
    17aa:	88 23       	and	r24, r24
    17ac:	89 f0       	breq	.+34     	; 0x17d0 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    17ae:	2f b7       	in	r18, 0x3f	; 63
		cli();
    17b0:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    17b8:	80 91 e8 00 	lds	r24, 0x00E8
    17bc:	85 ff       	sbrs	r24, 5
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    17c0:	e8 ee       	ldi	r30, 0xE8	; 232
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	9b e6       	ldi	r25, 0x6B	; 107
    17c6:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    17c8:	80 81       	ld	r24, Z
    17ca:	85 fd       	sbrc	r24, 5
    17cc:	fc cf       	rjmp	.-8      	; 0x17c6 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    17ce:	2f bf       	out	0x3f, r18	; 63
    17d0:	08 95       	ret

000017d2 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    17d6:	90 91 77 01 	lds	r25, 0x0177
    17da:	99 23       	and	r25, r25
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <m_usb_tx_char+0xe>
    17de:	4d c0       	rjmp	.+154    	; 0x187a <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    17e0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    17e2:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    17e4:	24 e0       	ldi	r18, 0x04	; 4
    17e6:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    17ea:	20 91 79 01 	lds	r18, 0x0179
    17ee:	22 23       	and	r18, r18
    17f0:	49 f0       	breq	.+18     	; 0x1804 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    17f2:	20 91 e8 00 	lds	r18, 0x00E8
    17f6:	25 fd       	sbrc	r18, 5
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    17fa:	9f bf       	out	0x3f, r25	; 63
			return -1;
    17fc:	8f ef       	ldi	r24, 0xFF	; 255
    17fe:	42 c0       	rjmp	.+132    	; 0x1884 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    1800:	10 92 79 01 	sts	0x0179, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1804:	30 91 e4 00 	lds	r19, 0x00E4
    1808:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    180a:	20 91 e8 00 	lds	r18, 0x00E8
    180e:	25 fd       	sbrc	r18, 5
    1810:	25 c0       	rjmp	.+74     	; 0x185c <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1812:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1814:	90 91 e4 00 	lds	r25, 0x00E4
    1818:	93 17       	cp	r25, r19
    181a:	49 f0       	breq	.+18     	; 0x182e <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    181c:	90 91 77 01 	lds	r25, 0x0177
    1820:	91 11       	cpse	r25, r1
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <m_usb_tx_char+0x70>
    1824:	2c c0       	rjmp	.+88     	; 0x187e <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1826:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1828:	98 81       	ld	r25, Y
    182a:	93 13       	cpse	r25, r19
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 79 01 	sts	0x0179, r24
			return -1;
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	26 c0       	rjmp	.+76     	; 0x1884 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1838:	90 91 77 01 	lds	r25, 0x0177
    183c:	91 11       	cpse	r25, r1
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <m_usb_tx_char+0x7e>
    1840:	20 c0       	rjmp	.+64     	; 0x1882 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1842:	a9 ee       	ldi	r26, 0xE9	; 233
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1848:	e8 ee       	ldi	r30, 0xE8	; 232
    184a:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    184c:	c4 ee       	ldi	r28, 0xE4	; 228
    184e:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    1850:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1852:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1854:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1856:	20 81       	ld	r18, Z
    1858:	25 ff       	sbrs	r18, 5
    185a:	e5 cf       	rjmp	.-54     	; 0x1826 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    185c:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1860:	80 91 e8 00 	lds	r24, 0x00E8
    1864:	85 fd       	sbrc	r24, 5
    1866:	03 c0       	rjmp	.+6      	; 0x186e <m_usb_tx_char+0x9c>
    1868:	8a e3       	ldi	r24, 0x3A	; 58
    186a:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    186e:	85 e0       	ldi	r24, 0x05	; 5
    1870:	80 93 76 01 	sts	0x0176, r24
	SREG = intr_state;
    1874:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <m_usb_tx_char+0xb2>
    1882:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	8f 93       	push	r24
    1896:	9f 93       	push	r25
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    189c:	e1 ee       	ldi	r30, 0xE1	; 225
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
        UDINT = 0;
    18a2:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    18a4:	83 ff       	sbrs	r24, 3
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <__vector_10+0x40>
		UENUM = 0;
    18a8:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    18b2:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    18b6:	92 e1       	ldi	r25, 0x12	; 18
    18b8:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    18bc:	98 e0       	ldi	r25, 0x08	; 8
    18be:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    18c2:	10 92 77 01 	sts	0x0177, r1
		cdc_line_rtsdtr = 0;
    18c6:	10 92 78 01 	sts	0x0178, r1
        }
	if (intbits & (1<<SOFI)) {
    18ca:	82 ff       	sbrs	r24, 2
    18cc:	13 c0       	rjmp	.+38     	; 0x18f4 <__vector_10+0x6a>
		if (usb_configuration) {
    18ce:	80 91 77 01 	lds	r24, 0x0177
    18d2:	88 23       	and	r24, r24
    18d4:	79 f0       	breq	.+30     	; 0x18f4 <__vector_10+0x6a>
			t = transmit_flush_timer;
    18d6:	80 91 76 01 	lds	r24, 0x0176
			if (t) {
    18da:	88 23       	and	r24, r24
    18dc:	59 f0       	breq	.+22     	; 0x18f4 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    18de:	81 50       	subi	r24, 0x01	; 1
    18e0:	80 93 76 01 	sts	0x0176, r24
				if (!t) {
    18e4:	81 11       	cpse	r24, r1
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    18ee:	8a e3       	ldi	r24, 0x3A	; 58
    18f0:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1906:	1f 92       	push	r1
    1908:	0f 92       	push	r0
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	0f 92       	push	r0
    190e:	11 24       	eor	r1, r1
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1930:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1934:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1938:	83 ff       	sbrs	r24, 3
    193a:	51 c1       	rjmp	.+674    	; 0x1bde <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    193c:	e1 ef       	ldi	r30, 0xF1	; 241
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1942:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1944:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1946:	30 81       	ld	r19, Z
    1948:	93 2f       	mov	r25, r19
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	dc 01       	movw	r26, r24
    194e:	a2 2b       	or	r26, r18
    1950:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1952:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1954:	60 81       	ld	r22, Z
    1956:	96 2f       	mov	r25, r22
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	85 2b       	or	r24, r21
                wLength = UEDATX;
    195c:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    195e:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1960:	52 ef       	ldi	r21, 0xF2	; 242
    1962:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1966:	46 30       	cpi	r20, 0x06	; 6
    1968:	09 f0       	breq	.+2      	; 0x196c <__vector_11+0x66>
    196a:	5c c0       	rjmp	.+184    	; 0x1a24 <__vector_11+0x11e>
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    196e:	81 e2       	ldi	r24, 0x21	; 33
    1970:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1974:	3b c1       	rjmp	.+630    	; 0x1bec <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1976:	c6 e0       	ldi	r28, 0x06	; 6
    1978:	4f e1       	ldi	r20, 0x1F	; 31
    197a:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    197c:	fa 01       	movw	r30, r20
    197e:	65 91       	lpm	r22, Z+
    1980:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1982:	26 17       	cp	r18, r22
    1984:	37 07       	cpc	r19, r23
    1986:	19 f0       	breq	.+6      	; 0x198e <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1988:	49 5f       	subi	r20, 0xF9	; 249
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    198c:	20 c0       	rjmp	.+64     	; 0x19ce <__vector_11+0xc8>
				}
				list += 2;
    198e:	fa 01       	movw	r30, r20
    1990:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1992:	65 91       	lpm	r22, Z+
    1994:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1996:	86 17       	cp	r24, r22
    1998:	97 07       	cpc	r25, r23
    199a:	19 f0       	breq	.+6      	; 0x19a2 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    199c:	49 5f       	subi	r20, 0xF9	; 249
    199e:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <__vector_11+0xc8>
				}
				list += 2;
    19a2:	fa 01       	movw	r30, r20
    19a4:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    19a6:	85 91       	lpm	r24, Z+
    19a8:	94 91       	lpm	r25, Z
    19aa:	28 2f       	mov	r18, r24
    19ac:	39 2f       	mov	r19, r25
				list += 2;
    19ae:	fa 01       	movw	r30, r20
    19b0:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    19b2:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    19b4:	9b 2f       	mov	r25, r27
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    19ba:	8f 3f       	cpi	r24, 0xFF	; 255
    19bc:	91 05       	cpc	r25, r1
    19be:	19 f0       	breq	.+6      	; 0x19c6 <__vector_11+0xc0>
    19c0:	10 f0       	brcs	.+4      	; 0x19c6 <__vector_11+0xc0>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	84 17       	cp	r24, r20
    19c8:	28 f4       	brcc	.+10     	; 0x19d4 <__vector_11+0xce>
    19ca:	48 2f       	mov	r20, r24
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <__vector_11+0xce>
    19ce:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    19d0:	a9 f6       	brne	.-86     	; 0x197c <__vector_11+0x76>
    19d2:	cd cf       	rjmp	.-102    	; 0x196e <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    19d4:	c8 ee       	ldi	r28, 0xE8	; 232
    19d6:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19d8:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    19da:	a1 ef       	ldi	r26, 0xF1	; 241
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    19de:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    19e0:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    19e2:	98 2f       	mov	r25, r24
    19e4:	95 70       	andi	r25, 0x05	; 5
    19e6:	e1 f3       	breq	.-8      	; 0x19e0 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    19e8:	82 fd       	sbrc	r24, 2
    19ea:	00 c1       	rjmp	.+512    	; 0x1bec <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    19ec:	64 2f       	mov	r22, r20
    19ee:	41 31       	cpi	r20, 0x11	; 17
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <__vector_11+0xee>
    19f2:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    19f4:	66 23       	and	r22, r22
    19f6:	09 f4       	brne	.+2      	; 0x19fa <__vector_11+0xf4>
    19f8:	f6 c0       	rjmp	.+492    	; 0x1be6 <__vector_11+0x2e0>
    19fa:	c9 01       	movw	r24, r18
    19fc:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    19fe:	fc 01       	movw	r30, r24
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	e4 91       	lpm	r30, Z
    1a04:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1a06:	51 50       	subi	r21, 0x01	; 1
    1a08:	d1 f7       	brne	.-12     	; 0x19fe <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1a0a:	86 2f       	mov	r24, r22
    1a0c:	81 50       	subi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1a16:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a18:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1a1a:	41 11       	cpse	r20, r1
    1a1c:	e1 cf       	rjmp	.-62     	; 0x19e0 <__vector_11+0xda>
    1a1e:	60 31       	cpi	r22, 0x10	; 16
    1a20:	f9 f2       	breq	.-66     	; 0x19e0 <__vector_11+0xda>
    1a22:	e4 c0       	rjmp	.+456    	; 0x1bec <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1a24:	45 30       	cpi	r20, 0x05	; 5
    1a26:	61 f4       	brne	.+24     	; 0x1a40 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a28:	8e ef       	ldi	r24, 0xFE	; 254
    1a2a:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a2e:	e8 ee       	ldi	r30, 0xE8	; 232
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 ff       	sbrs	r24, 0
    1a36:	fd cf       	rjmp	.-6      	; 0x1a32 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1a38:	20 68       	ori	r18, 0x80	; 128
    1a3a:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1a3e:	d6 c0       	rjmp	.+428    	; 0x1bec <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1a40:	49 30       	cpi	r20, 0x09	; 9
    1a42:	a1 f5       	brne	.+104    	; 0x1aac <__vector_11+0x1a6>
    1a44:	71 11       	cpse	r23, r1
    1a46:	5b c0       	rjmp	.+182    	; 0x1afe <__vector_11+0x1f8>
			usb_configuration = wValue;
    1a48:	20 93 77 01 	sts	0x0177, r18
			cdc_line_rtsdtr = 0;
    1a4c:	10 92 78 01 	sts	0x0178, r1
			transmit_flush_timer = 0;
    1a50:	10 92 76 01 	sts	0x0176, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a54:	8e ef       	ldi	r24, 0xFE	; 254
    1a56:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1a5a:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1a5c:	89 e4       	ldi	r24, 0x49	; 73
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1a60:	c9 ee       	ldi	r28, 0xE9	; 233
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1a64:	ab ee       	ldi	r26, 0xEB	; 235
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1a68:	6c ee       	ldi	r22, 0xEC	; 236
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1a6c:	4d ee       	ldi	r20, 0xED	; 237
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1a70:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1a72:	9c 01       	movw	r18, r24
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
    1a78:	fc 01       	movw	r30, r24
    1a7a:	04 91       	lpm	r16, Z
				UECONX = en;
    1a7c:	0c 93       	st	X, r16
				if (en) {
    1a7e:	00 23       	and	r16, r16
    1a80:	59 f0       	breq	.+22     	; 0x1a98 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1a82:	f9 01       	movw	r30, r18
    1a84:	24 91       	lpm	r18, Z
    1a86:	fb 01       	movw	r30, r22
    1a88:	20 83       	st	Z, r18
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    1a8e:	03 96       	adiw	r24, 0x03	; 3
    1a90:	24 91       	lpm	r18, Z
    1a92:	fa 01       	movw	r30, r20
    1a94:	20 83       	st	Z, r18
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1a98:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1a9a:	1f 5f       	subi	r17, 0xFF	; 255
    1a9c:	15 30       	cpi	r17, 0x05	; 5
    1a9e:	41 f7       	brne	.-48     	; 0x1a70 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1aa0:	ea ee       	ldi	r30, 0xEA	; 234
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8e e1       	ldi	r24, 0x1E	; 30
    1aa6:	80 83       	st	Z, r24
        		UERST = 0;
    1aa8:	10 82       	st	Z, r1
			return;
    1aaa:	a0 c0       	rjmp	.+320    	; 0x1bec <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1aac:	48 30       	cpi	r20, 0x08	; 8
    1aae:	81 f4       	brne	.+32     	; 0x1ad0 <__vector_11+0x1ca>
    1ab0:	70 38       	cpi	r23, 0x80	; 128
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <__vector_11+0x1b0>
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ab6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	80 ff       	sbrs	r24, 0
    1abe:	fd cf       	rjmp	.-6      	; 0x1aba <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1ac0:	80 91 77 01 	lds	r24, 0x0177
    1ac4:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ac8:	8e ef       	ldi	r24, 0xFE	; 254
    1aca:	80 93 e8 00 	sts	0x00E8, r24
    1ace:	8e c0       	rjmp	.+284    	; 0x1bec <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1ad0:	41 32       	cpi	r20, 0x21	; 33
    1ad2:	a9 f4       	brne	.+42     	; 0x1afe <__vector_11+0x1f8>
    1ad4:	71 3a       	cpi	r23, 0xA1	; 161
    1ad6:	f1 f5       	brne	.+124    	; 0x1b54 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ad8:	e8 ee       	ldi	r30, 0xE8	; 232
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 ff       	sbrs	r24, 0
    1ae0:	fd cf       	rjmp	.-6      	; 0x1adc <__vector_11+0x1d6>
    1ae2:	ec e0       	ldi	r30, 0x0C	; 12
    1ae4:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1ae6:	a1 ef       	ldi	r26, 0xF1	; 241
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	81 91       	ld	r24, Z+
    1aec:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	e3 31       	cpi	r30, 0x13	; 19
    1af2:	f4 07       	cpc	r31, r20
    1af4:	d1 f7       	brne	.-12     	; 0x1aea <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1af6:	8e ef       	ldi	r24, 0xFE	; 254
    1af8:	80 93 e8 00 	sts	0x00E8, r24
    1afc:	77 c0       	rjmp	.+238    	; 0x1bec <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1afe:	40 32       	cpi	r20, 0x20	; 32
    1b00:	c9 f4       	brne	.+50     	; 0x1b34 <__vector_11+0x22e>
    1b02:	71 32       	cpi	r23, 0x21	; 33
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <__vector_11+0x202>
    1b06:	6b c0       	rjmp	.+214    	; 0x1bde <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1b08:	e8 ee       	ldi	r30, 0xE8	; 232
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 ff       	sbrs	r24, 2
    1b10:	fd cf       	rjmp	.-6      	; 0x1b0c <__vector_11+0x206>
    1b12:	ec e0       	ldi	r30, 0x0C	; 12
    1b14:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1b16:	a1 ef       	ldi	r26, 0xF1	; 241
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	8c 91       	ld	r24, X
    1b1c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1b1e:	51 e0       	ldi	r21, 0x01	; 1
    1b20:	e3 31       	cpi	r30, 0x13	; 19
    1b22:	f5 07       	cpc	r31, r21
    1b24:	d1 f7       	brne	.-12     	; 0x1b1a <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1b26:	e8 ee       	ldi	r30, 0xE8	; 232
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	8b ef       	ldi	r24, 0xFB	; 251
    1b2c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b2e:	8e ef       	ldi	r24, 0xFE	; 254
    1b30:	80 83       	st	Z, r24
    1b32:	5c c0       	rjmp	.+184    	; 0x1bec <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1b34:	42 32       	cpi	r20, 0x22	; 34
    1b36:	71 f4       	brne	.+28     	; 0x1b54 <__vector_11+0x24e>
    1b38:	71 32       	cpi	r23, 0x21	; 33
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <__vector_11+0x238>
    1b3c:	50 c0       	rjmp	.+160    	; 0x1bde <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1b3e:	20 93 78 01 	sts	0x0178, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b42:	e8 ee       	ldi	r30, 0xE8	; 232
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 ff       	sbrs	r24, 0
    1b4a:	fd cf       	rjmp	.-6      	; 0x1b46 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b4c:	8e ef       	ldi	r24, 0xFE	; 254
    1b4e:	80 93 e8 00 	sts	0x00E8, r24
    1b52:	4c c0       	rjmp	.+152    	; 0x1bec <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1b54:	41 11       	cpse	r20, r1
    1b56:	1a c0       	rjmp	.+52     	; 0x1b8c <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b58:	e8 ee       	ldi	r30, 0xE8	; 232
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	20 81       	ld	r18, Z
    1b5e:	20 ff       	sbrs	r18, 0
    1b60:	fd cf       	rjmp	.-6      	; 0x1b5c <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1b62:	72 38       	cpi	r23, 0x82	; 130
    1b64:	51 f4       	brne	.+20     	; 0x1b7a <__vector_11+0x274>
				UENUM = wIndex;
    1b66:	e9 ee       	ldi	r30, 0xE9	; 233
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1b6c:	80 91 eb 00 	lds	r24, 0x00EB
    1b70:	85 fb       	bst	r24, 5
    1b72:	88 27       	eor	r24, r24
    1b74:	80 f9       	bld	r24, 0
				UENUM = 0;
    1b76:	10 82       	st	Z, r1
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1b7c:	e1 ef       	ldi	r30, 0xF1	; 241
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 83       	st	Z, r24
			UEDATX = 0;
    1b82:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b84:	8e ef       	ldi	r24, 0xFE	; 254
    1b86:	80 93 e8 00 	sts	0x00E8, r24
    1b8a:	30 c0       	rjmp	.+96     	; 0x1bec <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1b8c:	41 30       	cpi	r20, 0x01	; 1
    1b8e:	11 f0       	breq	.+4      	; 0x1b94 <__vector_11+0x28e>
    1b90:	43 30       	cpi	r20, 0x03	; 3
    1b92:	29 f5       	brne	.+74     	; 0x1bde <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1b94:	72 30       	cpi	r23, 0x02	; 2
    1b96:	19 f5       	brne	.+70     	; 0x1bde <__vector_11+0x2d8>
    1b98:	23 2b       	or	r18, r19
    1b9a:	09 f5       	brne	.+66     	; 0x1bde <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1b9c:	8f 77       	andi	r24, 0x7F	; 127
    1b9e:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1ba0:	38 2f       	mov	r19, r24
    1ba2:	31 50       	subi	r19, 0x01	; 1
    1ba4:	34 30       	cpi	r19, 0x04	; 4
    1ba6:	d8 f4       	brcc	.+54     	; 0x1bde <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ba8:	3e ef       	ldi	r19, 0xFE	; 254
    1baa:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1bae:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1bb2:	43 30       	cpi	r20, 0x03	; 3
    1bb4:	21 f4       	brne	.+8      	; 0x1bbe <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1bb6:	81 e2       	ldi	r24, 0x21	; 33
    1bb8:	80 93 eb 00 	sts	0x00EB, r24
    1bbc:	17 c0       	rjmp	.+46     	; 0x1bec <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1bbe:	99 e1       	ldi	r25, 0x19	; 25
    1bc0:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	d9 01       	movw	r26, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <__vector_11+0x2ca>
    1bcc:	aa 0f       	add	r26, r26
    1bce:	bb 1f       	adc	r27, r27
    1bd0:	8a 95       	dec	r24
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <__vector_11+0x2c6>
    1bd4:	ea ee       	ldi	r30, 0xEA	; 234
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	a0 83       	st	Z, r26
					UERST = 0;
    1bda:	10 82       	st	Z, r1
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1bde:	81 e2       	ldi	r24, 0x21	; 33
    1be0:	80 93 eb 00 	sts	0x00EB, r24
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1be6:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1be8:	41 11       	cpse	r20, r1
    1bea:	fa ce       	rjmp	.-524    	; 0x19e0 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	9f 91       	pop	r25
    1bfa:	8f 91       	pop	r24
    1bfc:	7f 91       	pop	r23
    1bfe:	6f 91       	pop	r22
    1c00:	5f 91       	pop	r21
    1c02:	4f 91       	pop	r20
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	27 97       	sbiw	r28, 0x07	; 7
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1c32:	8e 01       	movw	r16, r28
    1c34:	0f 5f       	subi	r16, 0xFF	; 255
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	27 e0       	ldi	r18, 0x07	; 7
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	11 92       	st	Z+, r1
    1c3e:	2a 95       	dec	r18
    1c40:	e9 f7       	brne	.-6      	; 0x1c3c <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1c42:	4a e0       	ldi	r20, 0x0A	; 10
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	b8 01       	movw	r22, r16
    1c48:	0e 94 49 14 	call	0x2892	; 0x2892 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1c4c:	7e 01       	movw	r14, r28
    1c4e:	f8 e0       	ldi	r31, 0x08	; 8
    1c50:	ef 0e       	add	r14, r31
    1c52:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1c54:	f8 01       	movw	r30, r16
    1c56:	81 91       	ld	r24, Z+
    1c58:	8f 01       	movw	r16, r30
    1c5a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1c5c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1c60:	0e 15       	cp	r16, r14
    1c62:	1f 05       	cpc	r17, r15
    1c64:	b9 f7       	brne	.-18     	; 0x1c54 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1c66:	27 96       	adiw	r28, 0x07	; 7
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	08 95       	ret

00001c80 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1c84:	ec eb       	ldi	r30, 0xBC	; 188
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 23       	and	r24, r24
    1c8c:	34 f0       	brlt	.+12     	; 0x1c9a <twi_wait+0x1a>
    1c8e:	2f 5f       	subi	r18, 0xFF	; 255
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	29 3e       	cpi	r18, 0xE9	; 233
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	38 07       	cpc	r19, r24
    1c98:	b9 f7       	brne	.-18     	; 0x1c88 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	28 3e       	cpi	r18, 0xE8	; 232
    1c9e:	33 40       	sbci	r19, 0x03	; 3
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <twi_wait+0x24>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1ca4:	08 95       	ret

00001ca6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1ca6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1caa:	84 e8       	ldi	r24, 0x84	; 132
    1cac:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1cb0:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <twi_wait>
    1cb4:	88 23       	and	r24, r24
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1cb8:	80 91 b9 00 	lds	r24, 0x00B9
    1cbc:	88 7f       	andi	r24, 0xF8	; 248
    1cbe:	08 95       	ret
	} else {
		return 0;					// comm failure
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1cc2:	08 95       	ret

00001cc4 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1cc4:	cf 93       	push	r28
    1cc6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1cc8:	94 ea       	ldi	r25, 0xA4	; 164
    1cca:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1cce:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <twi_wait>
    1cd2:	88 23       	and	r24, r24
    1cd4:	61 f0       	breq	.+24     	; 0x1cee <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1cd6:	8c 2f       	mov	r24, r28
    1cd8:	88 0f       	add	r24, r24
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1ce0:	88 34       	cpi	r24, 0x48	; 72
    1ce2:	39 f4       	brne	.+14     	; 0x1cf2 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1ce4:	84 e9       	ldi	r24, 0x94	; 148
    1ce6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	01 c0       	rjmp	.+2      	; 0x1cf4 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
}	
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1cf8:	cf 93       	push	r28
    1cfa:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1cfc:	94 ea       	ldi	r25, 0xA4	; 164
    1cfe:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1d02:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <twi_wait>
    1d06:	88 23       	and	r24, r24
    1d08:	59 f0       	breq	.+22     	; 0x1d20 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1d0a:	8c 2f       	mov	r24, r28
    1d0c:	88 0f       	add	r24, r24
    1d0e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1d12:	80 32       	cpi	r24, 0x20	; 32
    1d14:	39 f4       	brne	.+14     	; 0x1d24 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d16:	84 e9       	ldi	r24, 0x94	; 148
    1d18:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1d24:	81 e0       	ldi	r24, 0x01	; 1
}	
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d2a:	84 e9       	ldi	r24, 0x94	; 148
    1d2c:	80 93 bc 00 	sts	0x00BC, r24
    1d30:	08 95       	ret

00001d32 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	60 97       	sbiw	r28, 0x10	; 16
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	e8 2e       	mov	r14, r24
    1d50:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1d52:	fe 01       	movw	r30, r28
    1d54:	31 96       	adiw	r30, 0x01	; 1
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	df 01       	movw	r26, r30
    1d5a:	1d 92       	st	X+, r1
    1d5c:	8a 95       	dec	r24
    1d5e:	e9 f7       	brne	.-6      	; 0x1d5a <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1d60:	88 e5       	ldi	r24, 0x58	; 88
    1d62:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <m_wii_read+0x3a>
    1d6a:	66 c0       	rjmp	.+204    	; 0x1e38 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1d6c:	86 e3       	ldi	r24, 0x36	; 54
    1d6e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1d72:	88 23       	and	r24, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <m_wii_read+0x46>
    1d76:	62 c0       	rjmp	.+196    	; 0x1e3c <m_wii_read+0x10a>
	end();
    1d78:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d7c:	b8 e0       	ldi	r27, 0x08	; 8
    1d7e:	ba 95       	dec	r27
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <m_wii_read+0x4c>
    1d82:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1d84:	88 e5       	ldi	r24, 0x58	; 88
    1d86:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <start_read>
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <m_wii_read+0x5e>
    1d8e:	58 c0       	rjmp	.+176    	; 0x1e40 <m_wii_read+0x10e>
    1d90:	ae 01       	movw	r20, r28
    1d92:	4f 5f       	subi	r20, 0xFF	; 255
    1d94:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1d96:	8e 01       	movw	r16, r28
    1d98:	00 5f       	subi	r16, 0xF0	; 240
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d9c:	ec eb       	ldi	r30, 0xBC	; 188
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1da2:	2b eb       	ldi	r18, 0xBB	; 187
    1da4:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1da6:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1da8:	80 81       	ld	r24, Z
    1daa:	88 23       	and	r24, r24
    1dac:	ec f7       	brge	.-6      	; 0x1da8 <m_wii_read+0x76>
		temp[i] = TWDR;
    1dae:	d9 01       	movw	r26, r18
    1db0:	8c 91       	ld	r24, X
    1db2:	da 01       	movw	r26, r20
    1db4:	8d 93       	st	X+, r24
    1db6:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1db8:	a0 17       	cp	r26, r16
    1dba:	b1 07       	cpc	r27, r17
    1dbc:	a1 f7       	brne	.-24     	; 0x1da6 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1dbe:	84 e8       	ldi	r24, 0x84	; 132
    1dc0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1dc4:	ec eb       	ldi	r30, 0xBC	; 188
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	88 23       	and	r24, r24
    1dcc:	ec f7       	brge	.-6      	; 0x1dc8 <m_wii_read+0x96>
	temp[15] = TWDR;
    1dce:	80 91 bb 00 	lds	r24, 0x00BB
    1dd2:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1dd4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
    1dd8:	de 01       	movw	r26, r28
    1dda:	14 96       	adiw	r26, 0x04	; 4
    1ddc:	6e 2d       	mov	r22, r14
    1dde:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1de0:	4c 91       	ld	r20, X
    1de2:	24 2f       	mov	r18, r20
    1de4:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1de6:	cd 01       	movw	r24, r26
    1de8:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1dea:	fc 01       	movw	r30, r24
    1dec:	80 81       	ld	r24, Z
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	f0 e1       	ldi	r31, 0x10	; 16
    1df2:	2f 9f       	mul	r18, r31
    1df4:	80 0d       	add	r24, r0
    1df6:	91 1d       	adc	r25, r1
    1df8:	11 24       	eor	r1, r1
    1dfa:	fb 01       	movw	r30, r22
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e00:	84 2f       	mov	r24, r20
    1e02:	80 7c       	andi	r24, 0xC0	; 192
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1e0e:	9d 01       	movw	r18, r26
    1e10:	21 50       	subi	r18, 0x01	; 1
    1e12:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e14:	f9 01       	movw	r30, r18
    1e16:	20 81       	ld	r18, Z
    1e18:	82 0f       	add	r24, r18
    1e1a:	91 1d       	adc	r25, r1
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	93 83       	std	Z+3, r25	; 0x03
    1e20:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1e22:	4f 70       	andi	r20, 0x0F	; 15
    1e24:	44 83       	std	Z+4, r20	; 0x04
    1e26:	15 82       	std	Z+5, r1	; 0x05
    1e28:	13 96       	adiw	r26, 0x03	; 3
    1e2a:	6a 5f       	subi	r22, 0xFA	; 250
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1e2e:	0a 17       	cp	r16, r26
    1e30:	1b 07       	cpc	r17, r27
    1e32:	b1 f6       	brne	.-84     	; 0x1de0 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1e40:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1e42:	60 96       	adiw	r28, 0x10	; 16
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	08 95       	ret

00001e5c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1e5c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1e60:	88 e5       	ldi	r24, 0x58	; 88
    1e62:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1e66:	88 23       	and	r24, r24
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <m_wii_open+0x10>
    1e6a:	c7 c0       	rjmp	.+398    	; 0x1ffa <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1e6c:	80 e3       	ldi	r24, 0x30	; 48
    1e6e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1e72:	88 23       	and	r24, r24
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <m_wii_open+0x1c>
    1e76:	c3 c0       	rjmp	.+390    	; 0x1ffe <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1e7e:	88 23       	and	r24, r24
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <m_wii_open+0x28>
    1e82:	bf c0       	rjmp	.+382    	; 0x2002 <m_wii_open+0x1a6>
	end();
    1e84:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e88:	83 ec       	ldi	r24, 0xC3	; 195
    1e8a:	99 e0       	ldi	r25, 0x09	; 9
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <m_wii_open+0x30>
    1e90:	00 c0       	rjmp	.+0      	; 0x1e92 <m_wii_open+0x36>
    1e92:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1e94:	88 e5       	ldi	r24, 0x58	; 88
    1e96:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1e9a:	88 23       	and	r24, r24
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <m_wii_open+0x44>
    1e9e:	b3 c0       	rjmp	.+358    	; 0x2006 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <m_wii_open+0x50>
    1eaa:	af c0       	rjmp	.+350    	; 0x200a <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <m_wii_open+0x5c>
    1eb6:	ab c0       	rjmp	.+342    	; 0x200e <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1ebe:	88 23       	and	r24, r24
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <m_wii_open+0x68>
    1ec2:	a7 c0       	rjmp	.+334    	; 0x2012 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1eca:	88 23       	and	r24, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <m_wii_open+0x74>
    1ece:	a3 c0       	rjmp	.+326    	; 0x2016 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1ed6:	88 23       	and	r24, r24
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <m_wii_open+0x80>
    1eda:	9f c0       	rjmp	.+318    	; 0x201a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1ee2:	88 23       	and	r24, r24
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <m_wii_open+0x8c>
    1ee6:	9b c0       	rjmp	.+310    	; 0x201e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1eee:	88 23       	and	r24, r24
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <m_wii_open+0x98>
    1ef2:	97 c0       	rjmp	.+302    	; 0x2022 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1ef4:	80 e9       	ldi	r24, 0x90	; 144
    1ef6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1efa:	88 23       	and	r24, r24
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <m_wii_open+0xa4>
    1efe:	93 c0       	rjmp	.+294    	; 0x2026 <m_wii_open+0x1ca>
	end();
    1f00:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
    1f04:	83 ec       	ldi	r24, 0xC3	; 195
    1f06:	99 e0       	ldi	r25, 0x09	; 9
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <m_wii_open+0xac>
    1f0c:	00 c0       	rjmp	.+0      	; 0x1f0e <m_wii_open+0xb2>
    1f0e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1f10:	88 e5       	ldi	r24, 0x58	; 88
    1f12:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1f16:	88 23       	and	r24, r24
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <m_wii_open+0xc0>
    1f1a:	87 c0       	rjmp	.+270    	; 0x202a <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1f1c:	87 e0       	ldi	r24, 0x07	; 7
    1f1e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1f22:	88 23       	and	r24, r24
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <m_wii_open+0xcc>
    1f26:	83 c0       	rjmp	.+262    	; 0x202e <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1f2e:	88 23       	and	r24, r24
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <m_wii_open+0xd8>
    1f32:	7f c0       	rjmp	.+254    	; 0x2032 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1f34:	81 e4       	ldi	r24, 0x41	; 65
    1f36:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1f3a:	88 23       	and	r24, r24
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <m_wii_open+0xe4>
    1f3e:	7b c0       	rjmp	.+246    	; 0x2036 <m_wii_open+0x1da>
	end();
    1f40:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
    1f44:	83 ec       	ldi	r24, 0xC3	; 195
    1f46:	99 e0       	ldi	r25, 0x09	; 9
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <m_wii_open+0xec>
    1f4c:	00 c0       	rjmp	.+0      	; 0x1f4e <m_wii_open+0xf2>
    1f4e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1f50:	88 e5       	ldi	r24, 0x58	; 88
    1f52:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <m_wii_open+0x100>
    1f5a:	6f c0       	rjmp	.+222    	; 0x203a <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1f5c:	8a e1       	ldi	r24, 0x1A	; 26
    1f5e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1f62:	88 23       	and	r24, r24
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <m_wii_open+0x10c>
    1f66:	6b c0       	rjmp	.+214    	; 0x203e <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1f68:	80 e4       	ldi	r24, 0x40	; 64
    1f6a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1f6e:	88 23       	and	r24, r24
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <m_wii_open+0x118>
    1f72:	67 c0       	rjmp	.+206    	; 0x2042 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1f7a:	88 23       	and	r24, r24
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <m_wii_open+0x124>
    1f7e:	63 c0       	rjmp	.+198    	; 0x2046 <m_wii_open+0x1ea>
	end();
    1f80:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
    1f84:	83 ec       	ldi	r24, 0xC3	; 195
    1f86:	99 e0       	ldi	r25, 0x09	; 9
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <m_wii_open+0x12c>
    1f8c:	00 c0       	rjmp	.+0      	; 0x1f8e <m_wii_open+0x132>
    1f8e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f90:	88 e5       	ldi	r24, 0x58	; 88
    1f92:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1f96:	88 23       	and	r24, r24
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <m_wii_open+0x140>
    1f9a:	57 c0       	rjmp	.+174    	; 0x204a <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1f9c:	83 e3       	ldi	r24, 0x33	; 51
    1f9e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1fa2:	88 23       	and	r24, r24
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <m_wii_open+0x14c>
    1fa6:	53 c0       	rjmp	.+166    	; 0x204e <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1fae:	88 23       	and	r24, r24
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <m_wii_open+0x158>
    1fb2:	4f c0       	rjmp	.+158    	; 0x2052 <m_wii_open+0x1f6>
	end();
    1fb4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
    1fb8:	83 ec       	ldi	r24, 0xC3	; 195
    1fba:	99 e0       	ldi	r25, 0x09	; 9
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <m_wii_open+0x160>
    1fc0:	00 c0       	rjmp	.+0      	; 0x1fc2 <m_wii_open+0x166>
    1fc2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1fc4:	88 e5       	ldi	r24, 0x58	; 88
    1fc6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <start_write>
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <m_wii_open+0x174>
    1fce:	43 c0       	rjmp	.+134    	; 0x2056 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1fd0:	80 e3       	ldi	r24, 0x30	; 48
    1fd2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <m_wii_open+0x180>
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1fdc:	88 e0       	ldi	r24, 0x08	; 8
    1fde:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <send_byte>
    1fe2:	88 23       	and	r24, r24
    1fe4:	e1 f1       	breq	.+120    	; 0x205e <m_wii_open+0x202>
	end();
    1fe6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <end>
    1fea:	83 ec       	ldi	r24, 0xC3	; 195
    1fec:	99 e0       	ldi	r25, 0x09	; 9
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <m_wii_open+0x192>
    1ff2:	00 c0       	rjmp	.+0      	; 0x1ff4 <m_wii_open+0x198>
    1ff4:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    205e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2060:	08 95       	ret

00002062 <__subsf3>:
    2062:	50 58       	subi	r21, 0x80	; 128

00002064 <__addsf3>:
    2064:	bb 27       	eor	r27, r27
    2066:	aa 27       	eor	r26, r26
    2068:	0e d0       	rcall	.+28     	; 0x2086 <__addsf3x>
    206a:	58 c2       	rjmp	.+1200   	; 0x251c <__fp_round>
    206c:	21 d2       	rcall	.+1090   	; 0x24b0 <__fp_pscA>
    206e:	30 f0       	brcs	.+12     	; 0x207c <__addsf3+0x18>
    2070:	26 d2       	rcall	.+1100   	; 0x24be <__fp_pscB>
    2072:	20 f0       	brcs	.+8      	; 0x207c <__addsf3+0x18>
    2074:	31 f4       	brne	.+12     	; 0x2082 <__addsf3+0x1e>
    2076:	9f 3f       	cpi	r25, 0xFF	; 255
    2078:	11 f4       	brne	.+4      	; 0x207e <__addsf3+0x1a>
    207a:	1e f4       	brtc	.+6      	; 0x2082 <__addsf3+0x1e>
    207c:	f1 c1       	rjmp	.+994    	; 0x2460 <__fp_nan>
    207e:	0e f4       	brtc	.+2      	; 0x2082 <__addsf3+0x1e>
    2080:	e0 95       	com	r30
    2082:	e7 fb       	bst	r30, 7
    2084:	e7 c1       	rjmp	.+974    	; 0x2454 <__fp_inf>

00002086 <__addsf3x>:
    2086:	e9 2f       	mov	r30, r25
    2088:	6b d2       	rcall	.+1238   	; 0x2560 <__fp_split3>
    208a:	80 f3       	brcs	.-32     	; 0x206c <__addsf3+0x8>
    208c:	ba 17       	cp	r27, r26
    208e:	62 07       	cpc	r22, r18
    2090:	73 07       	cpc	r23, r19
    2092:	84 07       	cpc	r24, r20
    2094:	95 07       	cpc	r25, r21
    2096:	18 f0       	brcs	.+6      	; 0x209e <__addsf3x+0x18>
    2098:	71 f4       	brne	.+28     	; 0x20b6 <__addsf3x+0x30>
    209a:	9e f5       	brtc	.+102    	; 0x2102 <__addsf3x+0x7c>
    209c:	83 c2       	rjmp	.+1286   	; 0x25a4 <__fp_zero>
    209e:	0e f4       	brtc	.+2      	; 0x20a2 <__addsf3x+0x1c>
    20a0:	e0 95       	com	r30
    20a2:	0b 2e       	mov	r0, r27
    20a4:	ba 2f       	mov	r27, r26
    20a6:	a0 2d       	mov	r26, r0
    20a8:	0b 01       	movw	r0, r22
    20aa:	b9 01       	movw	r22, r18
    20ac:	90 01       	movw	r18, r0
    20ae:	0c 01       	movw	r0, r24
    20b0:	ca 01       	movw	r24, r20
    20b2:	a0 01       	movw	r20, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	ff 27       	eor	r31, r31
    20b8:	59 1b       	sub	r21, r25
    20ba:	99 f0       	breq	.+38     	; 0x20e2 <__addsf3x+0x5c>
    20bc:	59 3f       	cpi	r21, 0xF9	; 249
    20be:	50 f4       	brcc	.+20     	; 0x20d4 <__addsf3x+0x4e>
    20c0:	50 3e       	cpi	r21, 0xE0	; 224
    20c2:	68 f1       	brcs	.+90     	; 0x211e <__addsf3x+0x98>
    20c4:	1a 16       	cp	r1, r26
    20c6:	f0 40       	sbci	r31, 0x00	; 0
    20c8:	a2 2f       	mov	r26, r18
    20ca:	23 2f       	mov	r18, r19
    20cc:	34 2f       	mov	r19, r20
    20ce:	44 27       	eor	r20, r20
    20d0:	58 5f       	subi	r21, 0xF8	; 248
    20d2:	f3 cf       	rjmp	.-26     	; 0x20ba <__addsf3x+0x34>
    20d4:	46 95       	lsr	r20
    20d6:	37 95       	ror	r19
    20d8:	27 95       	ror	r18
    20da:	a7 95       	ror	r26
    20dc:	f0 40       	sbci	r31, 0x00	; 0
    20de:	53 95       	inc	r21
    20e0:	c9 f7       	brne	.-14     	; 0x20d4 <__addsf3x+0x4e>
    20e2:	7e f4       	brtc	.+30     	; 0x2102 <__addsf3x+0x7c>
    20e4:	1f 16       	cp	r1, r31
    20e6:	ba 0b       	sbc	r27, r26
    20e8:	62 0b       	sbc	r22, r18
    20ea:	73 0b       	sbc	r23, r19
    20ec:	84 0b       	sbc	r24, r20
    20ee:	ba f0       	brmi	.+46     	; 0x211e <__addsf3x+0x98>
    20f0:	91 50       	subi	r25, 0x01	; 1
    20f2:	a1 f0       	breq	.+40     	; 0x211c <__addsf3x+0x96>
    20f4:	ff 0f       	add	r31, r31
    20f6:	bb 1f       	adc	r27, r27
    20f8:	66 1f       	adc	r22, r22
    20fa:	77 1f       	adc	r23, r23
    20fc:	88 1f       	adc	r24, r24
    20fe:	c2 f7       	brpl	.-16     	; 0x20f0 <__addsf3x+0x6a>
    2100:	0e c0       	rjmp	.+28     	; 0x211e <__addsf3x+0x98>
    2102:	ba 0f       	add	r27, r26
    2104:	62 1f       	adc	r22, r18
    2106:	73 1f       	adc	r23, r19
    2108:	84 1f       	adc	r24, r20
    210a:	48 f4       	brcc	.+18     	; 0x211e <__addsf3x+0x98>
    210c:	87 95       	ror	r24
    210e:	77 95       	ror	r23
    2110:	67 95       	ror	r22
    2112:	b7 95       	ror	r27
    2114:	f7 95       	ror	r31
    2116:	9e 3f       	cpi	r25, 0xFE	; 254
    2118:	08 f0       	brcs	.+2      	; 0x211c <__addsf3x+0x96>
    211a:	b3 cf       	rjmp	.-154    	; 0x2082 <__addsf3+0x1e>
    211c:	93 95       	inc	r25
    211e:	88 0f       	add	r24, r24
    2120:	08 f0       	brcs	.+2      	; 0x2124 <__addsf3x+0x9e>
    2122:	99 27       	eor	r25, r25
    2124:	ee 0f       	add	r30, r30
    2126:	97 95       	ror	r25
    2128:	87 95       	ror	r24
    212a:	08 95       	ret
    212c:	c1 d1       	rcall	.+898    	; 0x24b0 <__fp_pscA>
    212e:	58 f0       	brcs	.+22     	; 0x2146 <__addsf3x+0xc0>
    2130:	80 e8       	ldi	r24, 0x80	; 128
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	09 f4       	brne	.+2      	; 0x2138 <__addsf3x+0xb2>
    2136:	9e ef       	ldi	r25, 0xFE	; 254
    2138:	c2 d1       	rcall	.+900    	; 0x24be <__fp_pscB>
    213a:	28 f0       	brcs	.+10     	; 0x2146 <__addsf3x+0xc0>
    213c:	40 e8       	ldi	r20, 0x80	; 128
    213e:	51 e0       	ldi	r21, 0x01	; 1
    2140:	59 f4       	brne	.+22     	; 0x2158 <atan2+0xe>
    2142:	5e ef       	ldi	r21, 0xFE	; 254
    2144:	09 c0       	rjmp	.+18     	; 0x2158 <atan2+0xe>
    2146:	8c c1       	rjmp	.+792    	; 0x2460 <__fp_nan>
    2148:	2d c2       	rjmp	.+1114   	; 0x25a4 <__fp_zero>

0000214a <atan2>:
    214a:	e9 2f       	mov	r30, r25
    214c:	e0 78       	andi	r30, 0x80	; 128
    214e:	08 d2       	rcall	.+1040   	; 0x2560 <__fp_split3>
    2150:	68 f3       	brcs	.-38     	; 0x212c <__addsf3x+0xa6>
    2152:	09 2e       	mov	r0, r25
    2154:	05 2a       	or	r0, r21
    2156:	c1 f3       	breq	.-16     	; 0x2148 <__addsf3x+0xc2>
    2158:	26 17       	cp	r18, r22
    215a:	37 07       	cpc	r19, r23
    215c:	48 07       	cpc	r20, r24
    215e:	59 07       	cpc	r21, r25
    2160:	38 f0       	brcs	.+14     	; 0x2170 <atan2+0x26>
    2162:	0e 2e       	mov	r0, r30
    2164:	07 f8       	bld	r0, 7
    2166:	e0 25       	eor	r30, r0
    2168:	69 f0       	breq	.+26     	; 0x2184 <atan2+0x3a>
    216a:	e0 25       	eor	r30, r0
    216c:	e0 64       	ori	r30, 0x40	; 64
    216e:	0a c0       	rjmp	.+20     	; 0x2184 <atan2+0x3a>
    2170:	ef 63       	ori	r30, 0x3F	; 63
    2172:	07 f8       	bld	r0, 7
    2174:	00 94       	com	r0
    2176:	07 fa       	bst	r0, 7
    2178:	db 01       	movw	r26, r22
    217a:	b9 01       	movw	r22, r18
    217c:	9d 01       	movw	r18, r26
    217e:	dc 01       	movw	r26, r24
    2180:	ca 01       	movw	r24, r20
    2182:	ad 01       	movw	r20, r26
    2184:	ef 93       	push	r30
    2186:	4a d0       	rcall	.+148    	; 0x221c <__divsf3_pse>
    2188:	c9 d1       	rcall	.+914    	; 0x251c <__fp_round>
    218a:	0a d0       	rcall	.+20     	; 0x21a0 <atan>
    218c:	5f 91       	pop	r21
    218e:	55 23       	and	r21, r21
    2190:	31 f0       	breq	.+12     	; 0x219e <atan2+0x54>
    2192:	2b ed       	ldi	r18, 0xDB	; 219
    2194:	3f e0       	ldi	r19, 0x0F	; 15
    2196:	49 e4       	ldi	r20, 0x49	; 73
    2198:	50 fd       	sbrc	r21, 0
    219a:	49 ec       	ldi	r20, 0xC9	; 201
    219c:	63 cf       	rjmp	.-314    	; 0x2064 <__addsf3>
    219e:	08 95       	ret

000021a0 <atan>:
    21a0:	df 93       	push	r29
    21a2:	dd 27       	eor	r29, r29
    21a4:	b9 2f       	mov	r27, r25
    21a6:	bf 77       	andi	r27, 0x7F	; 127
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	16 16       	cp	r1, r22
    21ae:	17 06       	cpc	r1, r23
    21b0:	48 07       	cpc	r20, r24
    21b2:	5b 07       	cpc	r21, r27
    21b4:	10 f4       	brcc	.+4      	; 0x21ba <atan+0x1a>
    21b6:	d9 2f       	mov	r29, r25
    21b8:	00 d2       	rcall	.+1024   	; 0x25ba <inverse>
    21ba:	9f 93       	push	r25
    21bc:	8f 93       	push	r24
    21be:	7f 93       	push	r23
    21c0:	6f 93       	push	r22
    21c2:	16 d3       	rcall	.+1580   	; 0x27f0 <square>
    21c4:	ec ea       	ldi	r30, 0xAC	; 172
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	4e d1       	rcall	.+668    	; 0x2466 <__fp_powser>
    21ca:	a8 d1       	rcall	.+848    	; 0x251c <__fp_round>
    21cc:	2f 91       	pop	r18
    21ce:	3f 91       	pop	r19
    21d0:	4f 91       	pop	r20
    21d2:	5f 91       	pop	r21
    21d4:	6e d2       	rcall	.+1244   	; 0x26b2 <__mulsf3x>
    21d6:	dd 23       	and	r29, r29
    21d8:	49 f0       	breq	.+18     	; 0x21ec <atan+0x4c>
    21da:	90 58       	subi	r25, 0x80	; 128
    21dc:	a2 ea       	ldi	r26, 0xA2	; 162
    21de:	2a ed       	ldi	r18, 0xDA	; 218
    21e0:	3f e0       	ldi	r19, 0x0F	; 15
    21e2:	49 ec       	ldi	r20, 0xC9	; 201
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	d0 78       	andi	r29, 0x80	; 128
    21e8:	5d 27       	eor	r21, r29
    21ea:	4d df       	rcall	.-358    	; 0x2086 <__addsf3x>
    21ec:	df 91       	pop	r29
    21ee:	96 c1       	rjmp	.+812    	; 0x251c <__fp_round>

000021f0 <__cmpsf2>:
    21f0:	0d d1       	rcall	.+538    	; 0x240c <__fp_cmp>
    21f2:	08 f4       	brcc	.+2      	; 0x21f6 <__cmpsf2+0x6>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	08 95       	ret

000021f8 <cos>:
    21f8:	6a d1       	rcall	.+724    	; 0x24ce <__fp_rempio2>
    21fa:	e3 95       	inc	r30
    21fc:	a0 c1       	rjmp	.+832    	; 0x253e <__fp_sinus>

000021fe <__divsf3>:
    21fe:	0c d0       	rcall	.+24     	; 0x2218 <__divsf3x>
    2200:	8d c1       	rjmp	.+794    	; 0x251c <__fp_round>
    2202:	5d d1       	rcall	.+698    	; 0x24be <__fp_pscB>
    2204:	40 f0       	brcs	.+16     	; 0x2216 <__divsf3+0x18>
    2206:	54 d1       	rcall	.+680    	; 0x24b0 <__fp_pscA>
    2208:	30 f0       	brcs	.+12     	; 0x2216 <__divsf3+0x18>
    220a:	21 f4       	brne	.+8      	; 0x2214 <__divsf3+0x16>
    220c:	5f 3f       	cpi	r21, 0xFF	; 255
    220e:	19 f0       	breq	.+6      	; 0x2216 <__divsf3+0x18>
    2210:	21 c1       	rjmp	.+578    	; 0x2454 <__fp_inf>
    2212:	51 11       	cpse	r21, r1
    2214:	c8 c1       	rjmp	.+912    	; 0x25a6 <__fp_szero>
    2216:	24 c1       	rjmp	.+584    	; 0x2460 <__fp_nan>

00002218 <__divsf3x>:
    2218:	a3 d1       	rcall	.+838    	; 0x2560 <__fp_split3>
    221a:	98 f3       	brcs	.-26     	; 0x2202 <__divsf3+0x4>

0000221c <__divsf3_pse>:
    221c:	99 23       	and	r25, r25
    221e:	c9 f3       	breq	.-14     	; 0x2212 <__divsf3+0x14>
    2220:	55 23       	and	r21, r21
    2222:	b1 f3       	breq	.-20     	; 0x2210 <__divsf3+0x12>
    2224:	95 1b       	sub	r25, r21
    2226:	55 0b       	sbc	r21, r21
    2228:	bb 27       	eor	r27, r27
    222a:	aa 27       	eor	r26, r26
    222c:	62 17       	cp	r22, r18
    222e:	73 07       	cpc	r23, r19
    2230:	84 07       	cpc	r24, r20
    2232:	38 f0       	brcs	.+14     	; 0x2242 <__divsf3_pse+0x26>
    2234:	9f 5f       	subi	r25, 0xFF	; 255
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
    2238:	22 0f       	add	r18, r18
    223a:	33 1f       	adc	r19, r19
    223c:	44 1f       	adc	r20, r20
    223e:	aa 1f       	adc	r26, r26
    2240:	a9 f3       	breq	.-22     	; 0x222c <__divsf3_pse+0x10>
    2242:	33 d0       	rcall	.+102    	; 0x22aa <__divsf3_pse+0x8e>
    2244:	0e 2e       	mov	r0, r30
    2246:	3a f0       	brmi	.+14     	; 0x2256 <__divsf3_pse+0x3a>
    2248:	e0 e8       	ldi	r30, 0x80	; 128
    224a:	30 d0       	rcall	.+96     	; 0x22ac <__divsf3_pse+0x90>
    224c:	91 50       	subi	r25, 0x01	; 1
    224e:	50 40       	sbci	r21, 0x00	; 0
    2250:	e6 95       	lsr	r30
    2252:	00 1c       	adc	r0, r0
    2254:	ca f7       	brpl	.-14     	; 0x2248 <__divsf3_pse+0x2c>
    2256:	29 d0       	rcall	.+82     	; 0x22aa <__divsf3_pse+0x8e>
    2258:	fe 2f       	mov	r31, r30
    225a:	27 d0       	rcall	.+78     	; 0x22aa <__divsf3_pse+0x8e>
    225c:	66 0f       	add	r22, r22
    225e:	77 1f       	adc	r23, r23
    2260:	88 1f       	adc	r24, r24
    2262:	bb 1f       	adc	r27, r27
    2264:	26 17       	cp	r18, r22
    2266:	37 07       	cpc	r19, r23
    2268:	48 07       	cpc	r20, r24
    226a:	ab 07       	cpc	r26, r27
    226c:	b0 e8       	ldi	r27, 0x80	; 128
    226e:	09 f0       	breq	.+2      	; 0x2272 <__divsf3_pse+0x56>
    2270:	bb 0b       	sbc	r27, r27
    2272:	80 2d       	mov	r24, r0
    2274:	bf 01       	movw	r22, r30
    2276:	ff 27       	eor	r31, r31
    2278:	93 58       	subi	r25, 0x83	; 131
    227a:	5f 4f       	sbci	r21, 0xFF	; 255
    227c:	2a f0       	brmi	.+10     	; 0x2288 <__divsf3_pse+0x6c>
    227e:	9e 3f       	cpi	r25, 0xFE	; 254
    2280:	51 05       	cpc	r21, r1
    2282:	68 f0       	brcs	.+26     	; 0x229e <__divsf3_pse+0x82>
    2284:	e7 c0       	rjmp	.+462    	; 0x2454 <__fp_inf>
    2286:	8f c1       	rjmp	.+798    	; 0x25a6 <__fp_szero>
    2288:	5f 3f       	cpi	r21, 0xFF	; 255
    228a:	ec f3       	brlt	.-6      	; 0x2286 <__divsf3_pse+0x6a>
    228c:	98 3e       	cpi	r25, 0xE8	; 232
    228e:	dc f3       	brlt	.-10     	; 0x2286 <__divsf3_pse+0x6a>
    2290:	86 95       	lsr	r24
    2292:	77 95       	ror	r23
    2294:	67 95       	ror	r22
    2296:	b7 95       	ror	r27
    2298:	f7 95       	ror	r31
    229a:	9f 5f       	subi	r25, 0xFF	; 255
    229c:	c9 f7       	brne	.-14     	; 0x2290 <__divsf3_pse+0x74>
    229e:	88 0f       	add	r24, r24
    22a0:	91 1d       	adc	r25, r1
    22a2:	96 95       	lsr	r25
    22a4:	87 95       	ror	r24
    22a6:	97 f9       	bld	r25, 7
    22a8:	08 95       	ret
    22aa:	e1 e0       	ldi	r30, 0x01	; 1
    22ac:	66 0f       	add	r22, r22
    22ae:	77 1f       	adc	r23, r23
    22b0:	88 1f       	adc	r24, r24
    22b2:	bb 1f       	adc	r27, r27
    22b4:	62 17       	cp	r22, r18
    22b6:	73 07       	cpc	r23, r19
    22b8:	84 07       	cpc	r24, r20
    22ba:	ba 07       	cpc	r27, r26
    22bc:	20 f0       	brcs	.+8      	; 0x22c6 <__divsf3_pse+0xaa>
    22be:	62 1b       	sub	r22, r18
    22c0:	73 0b       	sbc	r23, r19
    22c2:	84 0b       	sbc	r24, r20
    22c4:	ba 0b       	sbc	r27, r26
    22c6:	ee 1f       	adc	r30, r30
    22c8:	88 f7       	brcc	.-30     	; 0x22ac <__divsf3_pse+0x90>
    22ca:	e0 95       	com	r30
    22cc:	08 95       	ret
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <__divsf3_pse+0xba>
    22d0:	0e f0       	brts	.+2      	; 0x22d4 <__divsf3_pse+0xb8>
    22d2:	c0 c0       	rjmp	.+384    	; 0x2454 <__fp_inf>
    22d4:	67 c1       	rjmp	.+718    	; 0x25a4 <__fp_zero>
    22d6:	c4 c0       	rjmp	.+392    	; 0x2460 <__fp_nan>

000022d8 <exp>:
    22d8:	4b d1       	rcall	.+662    	; 0x2570 <__fp_splitA>
    22da:	c8 f3       	brcs	.-14     	; 0x22ce <__divsf3_pse+0xb2>
    22dc:	96 38       	cpi	r25, 0x86	; 134
    22de:	c0 f7       	brcc	.-16     	; 0x22d0 <__divsf3_pse+0xb4>
    22e0:	07 f8       	bld	r0, 7
    22e2:	0f 92       	push	r0
    22e4:	e8 94       	clt
    22e6:	2b e3       	ldi	r18, 0x3B	; 59
    22e8:	3a ea       	ldi	r19, 0xAA	; 170
    22ea:	48 eb       	ldi	r20, 0xB8	; 184
    22ec:	5f e7       	ldi	r21, 0x7F	; 127
    22ee:	e3 d1       	rcall	.+966    	; 0x26b6 <__mulsf3_pse>
    22f0:	0f 92       	push	r0
    22f2:	0f 92       	push	r0
    22f4:	0f 92       	push	r0
    22f6:	4d b7       	in	r20, 0x3d	; 61
    22f8:	5e b7       	in	r21, 0x3e	; 62
    22fa:	0f 92       	push	r0
    22fc:	9b d1       	rcall	.+822    	; 0x2634 <modf>
    22fe:	e9 ed       	ldi	r30, 0xD9	; 217
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	b1 d0       	rcall	.+354    	; 0x2466 <__fp_powser>
    2304:	4f 91       	pop	r20
    2306:	5f 91       	pop	r21
    2308:	ef 91       	pop	r30
    230a:	ff 91       	pop	r31
    230c:	e5 95       	asr	r30
    230e:	ee 1f       	adc	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	49 f0       	breq	.+18     	; 0x2326 <exp+0x4e>
    2314:	fe 57       	subi	r31, 0x7E	; 126
    2316:	e0 68       	ori	r30, 0x80	; 128
    2318:	44 27       	eor	r20, r20
    231a:	ee 0f       	add	r30, r30
    231c:	44 1f       	adc	r20, r20
    231e:	fa 95       	dec	r31
    2320:	e1 f7       	brne	.-8      	; 0x231a <exp+0x42>
    2322:	41 95       	neg	r20
    2324:	55 0b       	sbc	r21, r21
    2326:	52 d1       	rcall	.+676    	; 0x25cc <ldexp>
    2328:	0f 90       	pop	r0
    232a:	07 fe       	sbrs	r0, 7
    232c:	46 c1       	rjmp	.+652    	; 0x25ba <inverse>
    232e:	08 95       	ret

00002330 <__fixsfsi>:
    2330:	04 d0       	rcall	.+8      	; 0x233a <__fixunssfsi>
    2332:	68 94       	set
    2334:	b1 11       	cpse	r27, r1
    2336:	37 c1       	rjmp	.+622    	; 0x25a6 <__fp_szero>
    2338:	08 95       	ret

0000233a <__fixunssfsi>:
    233a:	1a d1       	rcall	.+564    	; 0x2570 <__fp_splitA>
    233c:	88 f0       	brcs	.+34     	; 0x2360 <__fixunssfsi+0x26>
    233e:	9f 57       	subi	r25, 0x7F	; 127
    2340:	90 f0       	brcs	.+36     	; 0x2366 <__fixunssfsi+0x2c>
    2342:	b9 2f       	mov	r27, r25
    2344:	99 27       	eor	r25, r25
    2346:	b7 51       	subi	r27, 0x17	; 23
    2348:	a0 f0       	brcs	.+40     	; 0x2372 <__fixunssfsi+0x38>
    234a:	d1 f0       	breq	.+52     	; 0x2380 <__fixunssfsi+0x46>
    234c:	66 0f       	add	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	1a f0       	brmi	.+6      	; 0x235c <__fixunssfsi+0x22>
    2356:	ba 95       	dec	r27
    2358:	c9 f7       	brne	.-14     	; 0x234c <__fixunssfsi+0x12>
    235a:	12 c0       	rjmp	.+36     	; 0x2380 <__fixunssfsi+0x46>
    235c:	b1 30       	cpi	r27, 0x01	; 1
    235e:	81 f0       	breq	.+32     	; 0x2380 <__fixunssfsi+0x46>
    2360:	21 d1       	rcall	.+578    	; 0x25a4 <__fp_zero>
    2362:	b1 e0       	ldi	r27, 0x01	; 1
    2364:	08 95       	ret
    2366:	1e c1       	rjmp	.+572    	; 0x25a4 <__fp_zero>
    2368:	67 2f       	mov	r22, r23
    236a:	78 2f       	mov	r23, r24
    236c:	88 27       	eor	r24, r24
    236e:	b8 5f       	subi	r27, 0xF8	; 248
    2370:	39 f0       	breq	.+14     	; 0x2380 <__fixunssfsi+0x46>
    2372:	b9 3f       	cpi	r27, 0xF9	; 249
    2374:	cc f3       	brlt	.-14     	; 0x2368 <__fixunssfsi+0x2e>
    2376:	86 95       	lsr	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	b3 95       	inc	r27
    237e:	d9 f7       	brne	.-10     	; 0x2376 <__fixunssfsi+0x3c>
    2380:	3e f4       	brtc	.+14     	; 0x2390 <__fixunssfsi+0x56>
    2382:	90 95       	com	r25
    2384:	80 95       	com	r24
    2386:	70 95       	com	r23
    2388:	61 95       	neg	r22
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	8f 4f       	sbci	r24, 0xFF	; 255
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	08 95       	ret

00002392 <__floatunsisf>:
    2392:	e8 94       	clt
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <__floatsisf+0x12>

00002396 <__floatsisf>:
    2396:	97 fb       	bst	r25, 7
    2398:	3e f4       	brtc	.+14     	; 0x23a8 <__floatsisf+0x12>
    239a:	90 95       	com	r25
    239c:	80 95       	com	r24
    239e:	70 95       	com	r23
    23a0:	61 95       	neg	r22
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	99 23       	and	r25, r25
    23aa:	a9 f0       	breq	.+42     	; 0x23d6 <__floatsisf+0x40>
    23ac:	f9 2f       	mov	r31, r25
    23ae:	96 e9       	ldi	r25, 0x96	; 150
    23b0:	bb 27       	eor	r27, r27
    23b2:	93 95       	inc	r25
    23b4:	f6 95       	lsr	r31
    23b6:	87 95       	ror	r24
    23b8:	77 95       	ror	r23
    23ba:	67 95       	ror	r22
    23bc:	b7 95       	ror	r27
    23be:	f1 11       	cpse	r31, r1
    23c0:	f8 cf       	rjmp	.-16     	; 0x23b2 <__floatsisf+0x1c>
    23c2:	fa f4       	brpl	.+62     	; 0x2402 <__floatsisf+0x6c>
    23c4:	bb 0f       	add	r27, r27
    23c6:	11 f4       	brne	.+4      	; 0x23cc <__floatsisf+0x36>
    23c8:	60 ff       	sbrs	r22, 0
    23ca:	1b c0       	rjmp	.+54     	; 0x2402 <__floatsisf+0x6c>
    23cc:	6f 5f       	subi	r22, 0xFF	; 255
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	8f 4f       	sbci	r24, 0xFF	; 255
    23d2:	9f 4f       	sbci	r25, 0xFF	; 255
    23d4:	16 c0       	rjmp	.+44     	; 0x2402 <__floatsisf+0x6c>
    23d6:	88 23       	and	r24, r24
    23d8:	11 f0       	breq	.+4      	; 0x23de <__floatsisf+0x48>
    23da:	96 e9       	ldi	r25, 0x96	; 150
    23dc:	11 c0       	rjmp	.+34     	; 0x2400 <__floatsisf+0x6a>
    23de:	77 23       	and	r23, r23
    23e0:	21 f0       	breq	.+8      	; 0x23ea <__floatsisf+0x54>
    23e2:	9e e8       	ldi	r25, 0x8E	; 142
    23e4:	87 2f       	mov	r24, r23
    23e6:	76 2f       	mov	r23, r22
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <__floatsisf+0x5e>
    23ea:	66 23       	and	r22, r22
    23ec:	71 f0       	breq	.+28     	; 0x240a <__floatsisf+0x74>
    23ee:	96 e8       	ldi	r25, 0x86	; 134
    23f0:	86 2f       	mov	r24, r22
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	2a f0       	brmi	.+10     	; 0x2402 <__floatsisf+0x6c>
    23f8:	9a 95       	dec	r25
    23fa:	66 0f       	add	r22, r22
    23fc:	77 1f       	adc	r23, r23
    23fe:	88 1f       	adc	r24, r24
    2400:	da f7       	brpl	.-10     	; 0x23f8 <__floatsisf+0x62>
    2402:	88 0f       	add	r24, r24
    2404:	96 95       	lsr	r25
    2406:	87 95       	ror	r24
    2408:	97 f9       	bld	r25, 7
    240a:	08 95       	ret

0000240c <__fp_cmp>:
    240c:	99 0f       	add	r25, r25
    240e:	00 08       	sbc	r0, r0
    2410:	55 0f       	add	r21, r21
    2412:	aa 0b       	sbc	r26, r26
    2414:	e0 e8       	ldi	r30, 0x80	; 128
    2416:	fe ef       	ldi	r31, 0xFE	; 254
    2418:	16 16       	cp	r1, r22
    241a:	17 06       	cpc	r1, r23
    241c:	e8 07       	cpc	r30, r24
    241e:	f9 07       	cpc	r31, r25
    2420:	c0 f0       	brcs	.+48     	; 0x2452 <__fp_cmp+0x46>
    2422:	12 16       	cp	r1, r18
    2424:	13 06       	cpc	r1, r19
    2426:	e4 07       	cpc	r30, r20
    2428:	f5 07       	cpc	r31, r21
    242a:	98 f0       	brcs	.+38     	; 0x2452 <__fp_cmp+0x46>
    242c:	62 1b       	sub	r22, r18
    242e:	73 0b       	sbc	r23, r19
    2430:	84 0b       	sbc	r24, r20
    2432:	95 0b       	sbc	r25, r21
    2434:	39 f4       	brne	.+14     	; 0x2444 <__fp_cmp+0x38>
    2436:	0a 26       	eor	r0, r26
    2438:	61 f0       	breq	.+24     	; 0x2452 <__fp_cmp+0x46>
    243a:	23 2b       	or	r18, r19
    243c:	24 2b       	or	r18, r20
    243e:	25 2b       	or	r18, r21
    2440:	21 f4       	brne	.+8      	; 0x244a <__fp_cmp+0x3e>
    2442:	08 95       	ret
    2444:	0a 26       	eor	r0, r26
    2446:	09 f4       	brne	.+2      	; 0x244a <__fp_cmp+0x3e>
    2448:	a1 40       	sbci	r26, 0x01	; 1
    244a:	a6 95       	lsr	r26
    244c:	8f ef       	ldi	r24, 0xFF	; 255
    244e:	81 1d       	adc	r24, r1
    2450:	81 1d       	adc	r24, r1
    2452:	08 95       	ret

00002454 <__fp_inf>:
    2454:	97 f9       	bld	r25, 7
    2456:	9f 67       	ori	r25, 0x7F	; 127
    2458:	80 e8       	ldi	r24, 0x80	; 128
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	08 95       	ret

00002460 <__fp_nan>:
    2460:	9f ef       	ldi	r25, 0xFF	; 255
    2462:	80 ec       	ldi	r24, 0xC0	; 192
    2464:	08 95       	ret

00002466 <__fp_powser>:
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	1f 93       	push	r17
    246c:	0f 93       	push	r16
    246e:	ff 92       	push	r15
    2470:	ef 92       	push	r14
    2472:	df 92       	push	r13
    2474:	7b 01       	movw	r14, r22
    2476:	8c 01       	movw	r16, r24
    2478:	68 94       	set
    247a:	05 c0       	rjmp	.+10     	; 0x2486 <__fp_powser+0x20>
    247c:	da 2e       	mov	r13, r26
    247e:	ef 01       	movw	r28, r30
    2480:	18 d1       	rcall	.+560    	; 0x26b2 <__mulsf3x>
    2482:	fe 01       	movw	r30, r28
    2484:	e8 94       	clt
    2486:	a5 91       	lpm	r26, Z+
    2488:	25 91       	lpm	r18, Z+
    248a:	35 91       	lpm	r19, Z+
    248c:	45 91       	lpm	r20, Z+
    248e:	55 91       	lpm	r21, Z+
    2490:	ae f3       	brts	.-22     	; 0x247c <__fp_powser+0x16>
    2492:	ef 01       	movw	r28, r30
    2494:	f8 dd       	rcall	.-1040   	; 0x2086 <__addsf3x>
    2496:	fe 01       	movw	r30, r28
    2498:	97 01       	movw	r18, r14
    249a:	a8 01       	movw	r20, r16
    249c:	da 94       	dec	r13
    249e:	79 f7       	brne	.-34     	; 0x247e <__fp_powser+0x18>
    24a0:	df 90       	pop	r13
    24a2:	ef 90       	pop	r14
    24a4:	ff 90       	pop	r15
    24a6:	0f 91       	pop	r16
    24a8:	1f 91       	pop	r17
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <__fp_pscA>:
    24b0:	00 24       	eor	r0, r0
    24b2:	0a 94       	dec	r0
    24b4:	16 16       	cp	r1, r22
    24b6:	17 06       	cpc	r1, r23
    24b8:	18 06       	cpc	r1, r24
    24ba:	09 06       	cpc	r0, r25
    24bc:	08 95       	ret

000024be <__fp_pscB>:
    24be:	00 24       	eor	r0, r0
    24c0:	0a 94       	dec	r0
    24c2:	12 16       	cp	r1, r18
    24c4:	13 06       	cpc	r1, r19
    24c6:	14 06       	cpc	r1, r20
    24c8:	05 06       	cpc	r0, r21
    24ca:	08 95       	ret
    24cc:	c9 cf       	rjmp	.-110    	; 0x2460 <__fp_nan>

000024ce <__fp_rempio2>:
    24ce:	50 d0       	rcall	.+160    	; 0x2570 <__fp_splitA>
    24d0:	e8 f3       	brcs	.-6      	; 0x24cc <__fp_pscB+0xe>
    24d2:	e8 94       	clt
    24d4:	e0 e0       	ldi	r30, 0x00	; 0
    24d6:	bb 27       	eor	r27, r27
    24d8:	9f 57       	subi	r25, 0x7F	; 127
    24da:	f0 f0       	brcs	.+60     	; 0x2518 <__fp_rempio2+0x4a>
    24dc:	2a ed       	ldi	r18, 0xDA	; 218
    24de:	3f e0       	ldi	r19, 0x0F	; 15
    24e0:	49 ec       	ldi	r20, 0xC9	; 201
    24e2:	06 c0       	rjmp	.+12     	; 0x24f0 <__fp_rempio2+0x22>
    24e4:	ee 0f       	add	r30, r30
    24e6:	bb 0f       	add	r27, r27
    24e8:	66 1f       	adc	r22, r22
    24ea:	77 1f       	adc	r23, r23
    24ec:	88 1f       	adc	r24, r24
    24ee:	28 f0       	brcs	.+10     	; 0x24fa <__fp_rempio2+0x2c>
    24f0:	b2 3a       	cpi	r27, 0xA2	; 162
    24f2:	62 07       	cpc	r22, r18
    24f4:	73 07       	cpc	r23, r19
    24f6:	84 07       	cpc	r24, r20
    24f8:	28 f0       	brcs	.+10     	; 0x2504 <__fp_rempio2+0x36>
    24fa:	b2 5a       	subi	r27, 0xA2	; 162
    24fc:	62 0b       	sbc	r22, r18
    24fe:	73 0b       	sbc	r23, r19
    2500:	84 0b       	sbc	r24, r20
    2502:	e3 95       	inc	r30
    2504:	9a 95       	dec	r25
    2506:	72 f7       	brpl	.-36     	; 0x24e4 <__fp_rempio2+0x16>
    2508:	80 38       	cpi	r24, 0x80	; 128
    250a:	30 f4       	brcc	.+12     	; 0x2518 <__fp_rempio2+0x4a>
    250c:	9a 95       	dec	r25
    250e:	bb 0f       	add	r27, r27
    2510:	66 1f       	adc	r22, r22
    2512:	77 1f       	adc	r23, r23
    2514:	88 1f       	adc	r24, r24
    2516:	d2 f7       	brpl	.-12     	; 0x250c <__fp_rempio2+0x3e>
    2518:	90 48       	sbci	r25, 0x80	; 128
    251a:	6f c1       	rjmp	.+734    	; 0x27fa <__fp_mpack_finite>

0000251c <__fp_round>:
    251c:	09 2e       	mov	r0, r25
    251e:	03 94       	inc	r0
    2520:	00 0c       	add	r0, r0
    2522:	11 f4       	brne	.+4      	; 0x2528 <__fp_round+0xc>
    2524:	88 23       	and	r24, r24
    2526:	52 f0       	brmi	.+20     	; 0x253c <__fp_round+0x20>
    2528:	bb 0f       	add	r27, r27
    252a:	40 f4       	brcc	.+16     	; 0x253c <__fp_round+0x20>
    252c:	bf 2b       	or	r27, r31
    252e:	11 f4       	brne	.+4      	; 0x2534 <__fp_round+0x18>
    2530:	60 ff       	sbrs	r22, 0
    2532:	04 c0       	rjmp	.+8      	; 0x253c <__fp_round+0x20>
    2534:	6f 5f       	subi	r22, 0xFF	; 255
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8f 4f       	sbci	r24, 0xFF	; 255
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	08 95       	ret

0000253e <__fp_sinus>:
    253e:	ef 93       	push	r30
    2540:	e0 ff       	sbrs	r30, 0
    2542:	06 c0       	rjmp	.+12     	; 0x2550 <__fp_sinus+0x12>
    2544:	a2 ea       	ldi	r26, 0xA2	; 162
    2546:	2a ed       	ldi	r18, 0xDA	; 218
    2548:	3f e0       	ldi	r19, 0x0F	; 15
    254a:	49 ec       	ldi	r20, 0xC9	; 201
    254c:	5f eb       	ldi	r21, 0xBF	; 191
    254e:	9b dd       	rcall	.-1226   	; 0x2086 <__addsf3x>
    2550:	e5 df       	rcall	.-54     	; 0x251c <__fp_round>
    2552:	0f 90       	pop	r0
    2554:	03 94       	inc	r0
    2556:	01 fc       	sbrc	r0, 1
    2558:	90 58       	subi	r25, 0x80	; 128
    255a:	e1 e0       	ldi	r30, 0x01	; 1
    255c:	f1 e0       	ldi	r31, 0x01	; 1
    255e:	60 c1       	rjmp	.+704    	; 0x2820 <__fp_powsodd>

00002560 <__fp_split3>:
    2560:	57 fd       	sbrc	r21, 7
    2562:	90 58       	subi	r25, 0x80	; 128
    2564:	44 0f       	add	r20, r20
    2566:	55 1f       	adc	r21, r21
    2568:	59 f0       	breq	.+22     	; 0x2580 <__fp_splitA+0x10>
    256a:	5f 3f       	cpi	r21, 0xFF	; 255
    256c:	71 f0       	breq	.+28     	; 0x258a <__fp_splitA+0x1a>
    256e:	47 95       	ror	r20

00002570 <__fp_splitA>:
    2570:	88 0f       	add	r24, r24
    2572:	97 fb       	bst	r25, 7
    2574:	99 1f       	adc	r25, r25
    2576:	61 f0       	breq	.+24     	; 0x2590 <__fp_splitA+0x20>
    2578:	9f 3f       	cpi	r25, 0xFF	; 255
    257a:	79 f0       	breq	.+30     	; 0x259a <__fp_splitA+0x2a>
    257c:	87 95       	ror	r24
    257e:	08 95       	ret
    2580:	12 16       	cp	r1, r18
    2582:	13 06       	cpc	r1, r19
    2584:	14 06       	cpc	r1, r20
    2586:	55 1f       	adc	r21, r21
    2588:	f2 cf       	rjmp	.-28     	; 0x256e <__fp_split3+0xe>
    258a:	46 95       	lsr	r20
    258c:	f1 df       	rcall	.-30     	; 0x2570 <__fp_splitA>
    258e:	08 c0       	rjmp	.+16     	; 0x25a0 <__fp_splitA+0x30>
    2590:	16 16       	cp	r1, r22
    2592:	17 06       	cpc	r1, r23
    2594:	18 06       	cpc	r1, r24
    2596:	99 1f       	adc	r25, r25
    2598:	f1 cf       	rjmp	.-30     	; 0x257c <__fp_splitA+0xc>
    259a:	86 95       	lsr	r24
    259c:	71 05       	cpc	r23, r1
    259e:	61 05       	cpc	r22, r1
    25a0:	08 94       	sec
    25a2:	08 95       	ret

000025a4 <__fp_zero>:
    25a4:	e8 94       	clt

000025a6 <__fp_szero>:
    25a6:	bb 27       	eor	r27, r27
    25a8:	66 27       	eor	r22, r22
    25aa:	77 27       	eor	r23, r23
    25ac:	cb 01       	movw	r24, r22
    25ae:	97 f9       	bld	r25, 7
    25b0:	08 95       	ret

000025b2 <__gesf2>:
    25b2:	2c df       	rcall	.-424    	; 0x240c <__fp_cmp>
    25b4:	08 f4       	brcc	.+2      	; 0x25b8 <__gesf2+0x6>
    25b6:	8f ef       	ldi	r24, 0xFF	; 255
    25b8:	08 95       	ret

000025ba <inverse>:
    25ba:	9b 01       	movw	r18, r22
    25bc:	ac 01       	movw	r20, r24
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	80 e8       	ldi	r24, 0x80	; 128
    25c4:	9f e3       	ldi	r25, 0x3F	; 63
    25c6:	1b ce       	rjmp	.-970    	; 0x21fe <__divsf3>
    25c8:	45 cf       	rjmp	.-374    	; 0x2454 <__fp_inf>
    25ca:	15 c1       	rjmp	.+554    	; 0x27f6 <__fp_mpack>

000025cc <ldexp>:
    25cc:	d1 df       	rcall	.-94     	; 0x2570 <__fp_splitA>
    25ce:	e8 f3       	brcs	.-6      	; 0x25ca <inverse+0x10>
    25d0:	99 23       	and	r25, r25
    25d2:	d9 f3       	breq	.-10     	; 0x25ca <inverse+0x10>
    25d4:	94 0f       	add	r25, r20
    25d6:	51 1d       	adc	r21, r1
    25d8:	bb f3       	brvs	.-18     	; 0x25c8 <inverse+0xe>
    25da:	91 50       	subi	r25, 0x01	; 1
    25dc:	50 40       	sbci	r21, 0x00	; 0
    25de:	94 f0       	brlt	.+36     	; 0x2604 <ldexp+0x38>
    25e0:	59 f0       	breq	.+22     	; 0x25f8 <ldexp+0x2c>
    25e2:	88 23       	and	r24, r24
    25e4:	32 f0       	brmi	.+12     	; 0x25f2 <ldexp+0x26>
    25e6:	66 0f       	add	r22, r22
    25e8:	77 1f       	adc	r23, r23
    25ea:	88 1f       	adc	r24, r24
    25ec:	91 50       	subi	r25, 0x01	; 1
    25ee:	50 40       	sbci	r21, 0x00	; 0
    25f0:	c1 f7       	brne	.-16     	; 0x25e2 <ldexp+0x16>
    25f2:	9e 3f       	cpi	r25, 0xFE	; 254
    25f4:	51 05       	cpc	r21, r1
    25f6:	44 f7       	brge	.-48     	; 0x25c8 <inverse+0xe>
    25f8:	88 0f       	add	r24, r24
    25fa:	91 1d       	adc	r25, r1
    25fc:	96 95       	lsr	r25
    25fe:	87 95       	ror	r24
    2600:	97 f9       	bld	r25, 7
    2602:	08 95       	ret
    2604:	5f 3f       	cpi	r21, 0xFF	; 255
    2606:	ac f0       	brlt	.+42     	; 0x2632 <ldexp+0x66>
    2608:	98 3e       	cpi	r25, 0xE8	; 232
    260a:	9c f0       	brlt	.+38     	; 0x2632 <ldexp+0x66>
    260c:	bb 27       	eor	r27, r27
    260e:	86 95       	lsr	r24
    2610:	77 95       	ror	r23
    2612:	67 95       	ror	r22
    2614:	b7 95       	ror	r27
    2616:	08 f4       	brcc	.+2      	; 0x261a <ldexp+0x4e>
    2618:	b1 60       	ori	r27, 0x01	; 1
    261a:	93 95       	inc	r25
    261c:	c1 f7       	brne	.-16     	; 0x260e <ldexp+0x42>
    261e:	bb 0f       	add	r27, r27
    2620:	58 f7       	brcc	.-42     	; 0x25f8 <ldexp+0x2c>
    2622:	11 f4       	brne	.+4      	; 0x2628 <ldexp+0x5c>
    2624:	60 ff       	sbrs	r22, 0
    2626:	e8 cf       	rjmp	.-48     	; 0x25f8 <ldexp+0x2c>
    2628:	6f 5f       	subi	r22, 0xFF	; 255
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	8f 4f       	sbci	r24, 0xFF	; 255
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	e3 cf       	rjmp	.-58     	; 0x25f8 <ldexp+0x2c>
    2632:	b9 cf       	rjmp	.-142    	; 0x25a6 <__fp_szero>

00002634 <modf>:
    2634:	fa 01       	movw	r30, r20
    2636:	dc 01       	movw	r26, r24
    2638:	aa 0f       	add	r26, r26
    263a:	bb 1f       	adc	r27, r27
    263c:	9b 01       	movw	r18, r22
    263e:	ac 01       	movw	r20, r24
    2640:	bf 57       	subi	r27, 0x7F	; 127
    2642:	28 f4       	brcc	.+10     	; 0x264e <modf+0x1a>
    2644:	22 27       	eor	r18, r18
    2646:	33 27       	eor	r19, r19
    2648:	44 27       	eor	r20, r20
    264a:	50 78       	andi	r21, 0x80	; 128
    264c:	1f c0       	rjmp	.+62     	; 0x268c <modf+0x58>
    264e:	b7 51       	subi	r27, 0x17	; 23
    2650:	88 f4       	brcc	.+34     	; 0x2674 <modf+0x40>
    2652:	ab 2f       	mov	r26, r27
    2654:	00 24       	eor	r0, r0
    2656:	46 95       	lsr	r20
    2658:	37 95       	ror	r19
    265a:	27 95       	ror	r18
    265c:	01 1c       	adc	r0, r1
    265e:	a3 95       	inc	r26
    2660:	d2 f3       	brmi	.-12     	; 0x2656 <modf+0x22>
    2662:	00 20       	and	r0, r0
    2664:	69 f0       	breq	.+26     	; 0x2680 <modf+0x4c>
    2666:	22 0f       	add	r18, r18
    2668:	33 1f       	adc	r19, r19
    266a:	44 1f       	adc	r20, r20
    266c:	b3 95       	inc	r27
    266e:	da f3       	brmi	.-10     	; 0x2666 <modf+0x32>
    2670:	0d d0       	rcall	.+26     	; 0x268c <modf+0x58>
    2672:	f7 cc       	rjmp	.-1554   	; 0x2062 <__subsf3>
    2674:	61 30       	cpi	r22, 0x01	; 1
    2676:	71 05       	cpc	r23, r1
    2678:	a0 e8       	ldi	r26, 0x80	; 128
    267a:	8a 07       	cpc	r24, r26
    267c:	b9 46       	sbci	r27, 0x69	; 105
    267e:	30 f4       	brcc	.+12     	; 0x268c <modf+0x58>
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	66 27       	eor	r22, r22
    2686:	77 27       	eor	r23, r23
    2688:	88 27       	eor	r24, r24
    268a:	90 78       	andi	r25, 0x80	; 128
    268c:	30 96       	adiw	r30, 0x00	; 0
    268e:	21 f0       	breq	.+8      	; 0x2698 <modf+0x64>
    2690:	20 83       	st	Z, r18
    2692:	31 83       	std	Z+1, r19	; 0x01
    2694:	42 83       	std	Z+2, r20	; 0x02
    2696:	53 83       	std	Z+3, r21	; 0x03
    2698:	08 95       	ret

0000269a <__mulsf3>:
    269a:	0b d0       	rcall	.+22     	; 0x26b2 <__mulsf3x>
    269c:	3f cf       	rjmp	.-386    	; 0x251c <__fp_round>
    269e:	08 df       	rcall	.-496    	; 0x24b0 <__fp_pscA>
    26a0:	28 f0       	brcs	.+10     	; 0x26ac <__mulsf3+0x12>
    26a2:	0d df       	rcall	.-486    	; 0x24be <__fp_pscB>
    26a4:	18 f0       	brcs	.+6      	; 0x26ac <__mulsf3+0x12>
    26a6:	95 23       	and	r25, r21
    26a8:	09 f0       	breq	.+2      	; 0x26ac <__mulsf3+0x12>
    26aa:	d4 ce       	rjmp	.-600    	; 0x2454 <__fp_inf>
    26ac:	d9 ce       	rjmp	.-590    	; 0x2460 <__fp_nan>
    26ae:	11 24       	eor	r1, r1
    26b0:	7a cf       	rjmp	.-268    	; 0x25a6 <__fp_szero>

000026b2 <__mulsf3x>:
    26b2:	56 df       	rcall	.-340    	; 0x2560 <__fp_split3>
    26b4:	a0 f3       	brcs	.-24     	; 0x269e <__mulsf3+0x4>

000026b6 <__mulsf3_pse>:
    26b6:	95 9f       	mul	r25, r21
    26b8:	d1 f3       	breq	.-12     	; 0x26ae <__mulsf3+0x14>
    26ba:	95 0f       	add	r25, r21
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	55 1f       	adc	r21, r21
    26c0:	62 9f       	mul	r22, r18
    26c2:	f0 01       	movw	r30, r0
    26c4:	72 9f       	mul	r23, r18
    26c6:	bb 27       	eor	r27, r27
    26c8:	f0 0d       	add	r31, r0
    26ca:	b1 1d       	adc	r27, r1
    26cc:	63 9f       	mul	r22, r19
    26ce:	aa 27       	eor	r26, r26
    26d0:	f0 0d       	add	r31, r0
    26d2:	b1 1d       	adc	r27, r1
    26d4:	aa 1f       	adc	r26, r26
    26d6:	64 9f       	mul	r22, r20
    26d8:	66 27       	eor	r22, r22
    26da:	b0 0d       	add	r27, r0
    26dc:	a1 1d       	adc	r26, r1
    26de:	66 1f       	adc	r22, r22
    26e0:	82 9f       	mul	r24, r18
    26e2:	22 27       	eor	r18, r18
    26e4:	b0 0d       	add	r27, r0
    26e6:	a1 1d       	adc	r26, r1
    26e8:	62 1f       	adc	r22, r18
    26ea:	73 9f       	mul	r23, r19
    26ec:	b0 0d       	add	r27, r0
    26ee:	a1 1d       	adc	r26, r1
    26f0:	62 1f       	adc	r22, r18
    26f2:	83 9f       	mul	r24, r19
    26f4:	a0 0d       	add	r26, r0
    26f6:	61 1d       	adc	r22, r1
    26f8:	22 1f       	adc	r18, r18
    26fa:	74 9f       	mul	r23, r20
    26fc:	33 27       	eor	r19, r19
    26fe:	a0 0d       	add	r26, r0
    2700:	61 1d       	adc	r22, r1
    2702:	23 1f       	adc	r18, r19
    2704:	84 9f       	mul	r24, r20
    2706:	60 0d       	add	r22, r0
    2708:	21 1d       	adc	r18, r1
    270a:	82 2f       	mov	r24, r18
    270c:	76 2f       	mov	r23, r22
    270e:	6a 2f       	mov	r22, r26
    2710:	11 24       	eor	r1, r1
    2712:	9f 57       	subi	r25, 0x7F	; 127
    2714:	50 40       	sbci	r21, 0x00	; 0
    2716:	8a f0       	brmi	.+34     	; 0x273a <__mulsf3_pse+0x84>
    2718:	e1 f0       	breq	.+56     	; 0x2752 <__mulsf3_pse+0x9c>
    271a:	88 23       	and	r24, r24
    271c:	4a f0       	brmi	.+18     	; 0x2730 <__mulsf3_pse+0x7a>
    271e:	ee 0f       	add	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	bb 1f       	adc	r27, r27
    2724:	66 1f       	adc	r22, r22
    2726:	77 1f       	adc	r23, r23
    2728:	88 1f       	adc	r24, r24
    272a:	91 50       	subi	r25, 0x01	; 1
    272c:	50 40       	sbci	r21, 0x00	; 0
    272e:	a9 f7       	brne	.-22     	; 0x271a <__mulsf3_pse+0x64>
    2730:	9e 3f       	cpi	r25, 0xFE	; 254
    2732:	51 05       	cpc	r21, r1
    2734:	70 f0       	brcs	.+28     	; 0x2752 <__mulsf3_pse+0x9c>
    2736:	8e ce       	rjmp	.-740    	; 0x2454 <__fp_inf>
    2738:	36 cf       	rjmp	.-404    	; 0x25a6 <__fp_szero>
    273a:	5f 3f       	cpi	r21, 0xFF	; 255
    273c:	ec f3       	brlt	.-6      	; 0x2738 <__mulsf3_pse+0x82>
    273e:	98 3e       	cpi	r25, 0xE8	; 232
    2740:	dc f3       	brlt	.-10     	; 0x2738 <__mulsf3_pse+0x82>
    2742:	86 95       	lsr	r24
    2744:	77 95       	ror	r23
    2746:	67 95       	ror	r22
    2748:	b7 95       	ror	r27
    274a:	f7 95       	ror	r31
    274c:	e7 95       	ror	r30
    274e:	9f 5f       	subi	r25, 0xFF	; 255
    2750:	c1 f7       	brne	.-16     	; 0x2742 <__mulsf3_pse+0x8c>
    2752:	fe 2b       	or	r31, r30
    2754:	88 0f       	add	r24, r24
    2756:	91 1d       	adc	r25, r1
    2758:	96 95       	lsr	r25
    275a:	87 95       	ror	r24
    275c:	97 f9       	bld	r25, 7
    275e:	08 95       	ret

00002760 <sin>:
    2760:	9f 93       	push	r25
    2762:	b5 de       	rcall	.-662    	; 0x24ce <__fp_rempio2>
    2764:	0f 90       	pop	r0
    2766:	07 fc       	sbrc	r0, 7
    2768:	ee 5f       	subi	r30, 0xFE	; 254
    276a:	e9 ce       	rjmp	.-558    	; 0x253e <__fp_sinus>
    276c:	11 f4       	brne	.+4      	; 0x2772 <sin+0x12>
    276e:	0e f4       	brtc	.+2      	; 0x2772 <sin+0x12>
    2770:	77 ce       	rjmp	.-786    	; 0x2460 <__fp_nan>
    2772:	41 c0       	rjmp	.+130    	; 0x27f6 <__fp_mpack>

00002774 <sqrt>:
    2774:	fd de       	rcall	.-518    	; 0x2570 <__fp_splitA>
    2776:	d0 f3       	brcs	.-12     	; 0x276c <sin+0xc>
    2778:	99 23       	and	r25, r25
    277a:	d9 f3       	breq	.-10     	; 0x2772 <sin+0x12>
    277c:	ce f3       	brts	.-14     	; 0x2770 <sin+0x10>
    277e:	9f 57       	subi	r25, 0x7F	; 127
    2780:	55 0b       	sbc	r21, r21
    2782:	87 ff       	sbrs	r24, 7
    2784:	46 d0       	rcall	.+140    	; 0x2812 <__fp_norm2>
    2786:	00 24       	eor	r0, r0
    2788:	a0 e6       	ldi	r26, 0x60	; 96
    278a:	40 ea       	ldi	r20, 0xA0	; 160
    278c:	90 01       	movw	r18, r0
    278e:	80 58       	subi	r24, 0x80	; 128
    2790:	56 95       	lsr	r21
    2792:	97 95       	ror	r25
    2794:	28 f4       	brcc	.+10     	; 0x27a0 <sqrt+0x2c>
    2796:	80 5c       	subi	r24, 0xC0	; 192
    2798:	66 0f       	add	r22, r22
    279a:	77 1f       	adc	r23, r23
    279c:	88 1f       	adc	r24, r24
    279e:	20 f0       	brcs	.+8      	; 0x27a8 <sqrt+0x34>
    27a0:	26 17       	cp	r18, r22
    27a2:	37 07       	cpc	r19, r23
    27a4:	48 07       	cpc	r20, r24
    27a6:	30 f4       	brcc	.+12     	; 0x27b4 <sqrt+0x40>
    27a8:	62 1b       	sub	r22, r18
    27aa:	73 0b       	sbc	r23, r19
    27ac:	84 0b       	sbc	r24, r20
    27ae:	20 29       	or	r18, r0
    27b0:	31 29       	or	r19, r1
    27b2:	4a 2b       	or	r20, r26
    27b4:	a6 95       	lsr	r26
    27b6:	17 94       	ror	r1
    27b8:	07 94       	ror	r0
    27ba:	20 25       	eor	r18, r0
    27bc:	31 25       	eor	r19, r1
    27be:	4a 27       	eor	r20, r26
    27c0:	58 f7       	brcc	.-42     	; 0x2798 <sqrt+0x24>
    27c2:	66 0f       	add	r22, r22
    27c4:	77 1f       	adc	r23, r23
    27c6:	88 1f       	adc	r24, r24
    27c8:	20 f0       	brcs	.+8      	; 0x27d2 <sqrt+0x5e>
    27ca:	26 17       	cp	r18, r22
    27cc:	37 07       	cpc	r19, r23
    27ce:	48 07       	cpc	r20, r24
    27d0:	30 f4       	brcc	.+12     	; 0x27de <sqrt+0x6a>
    27d2:	62 0b       	sbc	r22, r18
    27d4:	73 0b       	sbc	r23, r19
    27d6:	84 0b       	sbc	r24, r20
    27d8:	20 0d       	add	r18, r0
    27da:	31 1d       	adc	r19, r1
    27dc:	41 1d       	adc	r20, r1
    27de:	a0 95       	com	r26
    27e0:	81 f7       	brne	.-32     	; 0x27c2 <sqrt+0x4e>
    27e2:	b9 01       	movw	r22, r18
    27e4:	84 2f       	mov	r24, r20
    27e6:	91 58       	subi	r25, 0x81	; 129
    27e8:	88 0f       	add	r24, r24
    27ea:	96 95       	lsr	r25
    27ec:	87 95       	ror	r24
    27ee:	08 95       	ret

000027f0 <square>:
    27f0:	9b 01       	movw	r18, r22
    27f2:	ac 01       	movw	r20, r24
    27f4:	52 cf       	rjmp	.-348    	; 0x269a <__mulsf3>

000027f6 <__fp_mpack>:
    27f6:	9f 3f       	cpi	r25, 0xFF	; 255
    27f8:	31 f0       	breq	.+12     	; 0x2806 <__fp_mpack_finite+0xc>

000027fa <__fp_mpack_finite>:
    27fa:	91 50       	subi	r25, 0x01	; 1
    27fc:	20 f4       	brcc	.+8      	; 0x2806 <__fp_mpack_finite+0xc>
    27fe:	87 95       	ror	r24
    2800:	77 95       	ror	r23
    2802:	67 95       	ror	r22
    2804:	b7 95       	ror	r27
    2806:	88 0f       	add	r24, r24
    2808:	91 1d       	adc	r25, r1
    280a:	96 95       	lsr	r25
    280c:	87 95       	ror	r24
    280e:	97 f9       	bld	r25, 7
    2810:	08 95       	ret

00002812 <__fp_norm2>:
    2812:	91 50       	subi	r25, 0x01	; 1
    2814:	50 40       	sbci	r21, 0x00	; 0
    2816:	66 0f       	add	r22, r22
    2818:	77 1f       	adc	r23, r23
    281a:	88 1f       	adc	r24, r24
    281c:	d2 f7       	brpl	.-12     	; 0x2812 <__fp_norm2>
    281e:	08 95       	ret

00002820 <__fp_powsodd>:
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	7f 93       	push	r23
    2826:	6f 93       	push	r22
    2828:	ff 93       	push	r31
    282a:	ef 93       	push	r30
    282c:	9b 01       	movw	r18, r22
    282e:	ac 01       	movw	r20, r24
    2830:	34 df       	rcall	.-408    	; 0x269a <__mulsf3>
    2832:	ef 91       	pop	r30
    2834:	ff 91       	pop	r31
    2836:	17 de       	rcall	.-978    	; 0x2466 <__fp_powser>
    2838:	2f 91       	pop	r18
    283a:	3f 91       	pop	r19
    283c:	4f 91       	pop	r20
    283e:	5f 91       	pop	r21
    2840:	2c cf       	rjmp	.-424    	; 0x269a <__mulsf3>

00002842 <__divmodhi4>:
    2842:	97 fb       	bst	r25, 7
    2844:	07 2e       	mov	r0, r23
    2846:	16 f4       	brtc	.+4      	; 0x284c <__divmodhi4+0xa>
    2848:	00 94       	com	r0
    284a:	07 d0       	rcall	.+14     	; 0x285a <__divmodhi4_neg1>
    284c:	77 fd       	sbrc	r23, 7
    284e:	09 d0       	rcall	.+18     	; 0x2862 <__divmodhi4_neg2>
    2850:	0e 94 35 14 	call	0x286a	; 0x286a <__udivmodhi4>
    2854:	07 fc       	sbrc	r0, 7
    2856:	05 d0       	rcall	.+10     	; 0x2862 <__divmodhi4_neg2>
    2858:	3e f4       	brtc	.+14     	; 0x2868 <__divmodhi4_exit>

0000285a <__divmodhi4_neg1>:
    285a:	90 95       	com	r25
    285c:	81 95       	neg	r24
    285e:	9f 4f       	sbci	r25, 0xFF	; 255
    2860:	08 95       	ret

00002862 <__divmodhi4_neg2>:
    2862:	70 95       	com	r23
    2864:	61 95       	neg	r22
    2866:	7f 4f       	sbci	r23, 0xFF	; 255

00002868 <__divmodhi4_exit>:
    2868:	08 95       	ret

0000286a <__udivmodhi4>:
    286a:	aa 1b       	sub	r26, r26
    286c:	bb 1b       	sub	r27, r27
    286e:	51 e1       	ldi	r21, 0x11	; 17
    2870:	07 c0       	rjmp	.+14     	; 0x2880 <__udivmodhi4_ep>

00002872 <__udivmodhi4_loop>:
    2872:	aa 1f       	adc	r26, r26
    2874:	bb 1f       	adc	r27, r27
    2876:	a6 17       	cp	r26, r22
    2878:	b7 07       	cpc	r27, r23
    287a:	10 f0       	brcs	.+4      	; 0x2880 <__udivmodhi4_ep>
    287c:	a6 1b       	sub	r26, r22
    287e:	b7 0b       	sbc	r27, r23

00002880 <__udivmodhi4_ep>:
    2880:	88 1f       	adc	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	5a 95       	dec	r21
    2886:	a9 f7       	brne	.-22     	; 0x2872 <__udivmodhi4_loop>
    2888:	80 95       	com	r24
    288a:	90 95       	com	r25
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	08 95       	ret

00002892 <itoa>:
    2892:	fb 01       	movw	r30, r22
    2894:	9f 01       	movw	r18, r30
    2896:	e8 94       	clt
    2898:	42 30       	cpi	r20, 0x02	; 2
    289a:	c4 f0       	brlt	.+48     	; 0x28cc <itoa+0x3a>
    289c:	45 32       	cpi	r20, 0x25	; 37
    289e:	b4 f4       	brge	.+44     	; 0x28cc <itoa+0x3a>
    28a0:	4a 30       	cpi	r20, 0x0A	; 10
    28a2:	29 f4       	brne	.+10     	; 0x28ae <itoa+0x1c>
    28a4:	97 fb       	bst	r25, 7
    28a6:	1e f4       	brtc	.+6      	; 0x28ae <itoa+0x1c>
    28a8:	90 95       	com	r25
    28aa:	81 95       	neg	r24
    28ac:	9f 4f       	sbci	r25, 0xFF	; 255
    28ae:	64 2f       	mov	r22, r20
    28b0:	77 27       	eor	r23, r23
    28b2:	0e 94 35 14 	call	0x286a	; 0x286a <__udivmodhi4>
    28b6:	80 5d       	subi	r24, 0xD0	; 208
    28b8:	8a 33       	cpi	r24, 0x3A	; 58
    28ba:	0c f0       	brlt	.+2      	; 0x28be <itoa+0x2c>
    28bc:	89 5d       	subi	r24, 0xD9	; 217
    28be:	81 93       	st	Z+, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	a1 f7       	brne	.-24     	; 0x28ae <itoa+0x1c>
    28c6:	16 f4       	brtc	.+4      	; 0x28cc <itoa+0x3a>
    28c8:	5d e2       	ldi	r21, 0x2D	; 45
    28ca:	51 93       	st	Z+, r21
    28cc:	10 82       	st	Z, r1
    28ce:	c9 01       	movw	r24, r18
    28d0:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <strrev>

000028d4 <strrev>:
    28d4:	dc 01       	movw	r26, r24
    28d6:	fc 01       	movw	r30, r24
    28d8:	67 2f       	mov	r22, r23
    28da:	71 91       	ld	r23, Z+
    28dc:	77 23       	and	r23, r23
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <strrev+0x4>
    28e0:	32 97       	sbiw	r30, 0x02	; 2
    28e2:	04 c0       	rjmp	.+8      	; 0x28ec <strrev+0x18>
    28e4:	7c 91       	ld	r23, X
    28e6:	6d 93       	st	X+, r22
    28e8:	70 83       	st	Z, r23
    28ea:	62 91       	ld	r22, -Z
    28ec:	ae 17       	cp	r26, r30
    28ee:	bf 07       	cpc	r27, r31
    28f0:	c8 f3       	brcs	.-14     	; 0x28e4 <strrev+0x10>
    28f2:	08 95       	ret

000028f4 <_exit>:
    28f4:	f8 94       	cli

000028f6 <__stop_program>:
    28f6:	ff cf       	rjmp	.-2      	; 0x28f6 <__stop_program>
