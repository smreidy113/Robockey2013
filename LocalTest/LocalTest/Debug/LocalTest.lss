
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00003284  00003318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800118  00800118  00003330  2**0
                  ALLOC
  3 .stab         000043e0  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001329  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00008a39  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  00008a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d88  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b4d  00000000  00000000  0000baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d4  00000000  00000000  0000c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000900  00000000  00000000  0000d8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000089f  00000000  00000000  0000e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030df  00000000  00000000  0000ea6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00011b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_3>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__vector_10>
      2c:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__vector_11>
      30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_29>
      78:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      7c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      80:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <turn+0xd0>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <getADC+0xb4>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <turn+0x62>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

00000179 <descriptor_list>:
     179:	00 01 00 00 ad 01 12 00 02 00 00 bf 01 43 00 03     .............C..
     189:	00 00 02 02 04 01 03 09 04 06 02 12 02 03 09 04     ................
     199:	1a 02 06 03 03 09 04 22 02 08                       ......."..

000001a3 <endpoint_config_table>:
     1a3:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001ad <device_descriptor>:
     1ad:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1bd:	03 01                                               ..

000001bf <config1_descriptor>:
     1bf:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1cf:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1df:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1ef:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1ff:	40 00 00                                            @..

00000202 <string0>:
     202:	04 03 09 04                                         ....

00000206 <string1>:
     206:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     216:	65 00 00 00                                         e...

0000021a <string2>:
     21a:	06 03 4d 00 32 00 00 00                             ..M.2...

00000222 <string3>:
     222:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e4 e8       	ldi	r30, 0x84	; 132
     240:	f2 e3       	ldi	r31, 0x32	; 50
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a8 31       	cpi	r26, 0x18	; 24
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	a8 e1       	ldi	r26, 0x18	; 24
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a0 3f       	cpi	r26, 0xF0	; 240
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	0e 94 9b 07 	call	0xf36	; 0xf36 <main>
     262:	0c 94 40 19 	jmp	0x3280	; 0x3280 <_exit>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <chooseInput>:
	int maxval = 0;
	int diff = 0;
	float deg = 0.0;

void chooseInput(int i) {
	switch (i) {
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	91 05       	cpc	r25, r1
     26e:	09 f4       	brne	.+2      	; 0x272 <chooseInput+0x8>
     270:	49 c0       	rjmp	.+146    	; 0x304 <chooseInput+0x9a>
     272:	3c f4       	brge	.+14     	; 0x282 <chooseInput+0x18>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	91 05       	cpc	r25, r1
     278:	19 f1       	breq	.+70     	; 0x2c0 <chooseInput+0x56>
     27a:	9c f5       	brge	.+102    	; 0x2e2 <chooseInput+0x78>
     27c:	89 2b       	or	r24, r25
     27e:	79 f0       	breq	.+30     	; 0x29e <chooseInput+0x34>
     280:	08 95       	ret
     282:	85 30       	cpi	r24, 0x05	; 5
     284:	91 05       	cpc	r25, r1
     286:	09 f4       	brne	.+2      	; 0x28a <chooseInput+0x20>
     288:	5f c0       	rjmp	.+190    	; 0x348 <chooseInput+0xde>
     28a:	0c f4       	brge	.+2      	; 0x28e <chooseInput+0x24>
     28c:	4c c0       	rjmp	.+152    	; 0x326 <chooseInput+0xbc>
     28e:	86 30       	cpi	r24, 0x06	; 6
     290:	91 05       	cpc	r25, r1
     292:	09 f4       	brne	.+2      	; 0x296 <chooseInput+0x2c>
     294:	6a c0       	rjmp	.+212    	; 0x36a <chooseInput+0x100>
     296:	07 97       	sbiw	r24, 0x07	; 7
     298:	09 f0       	breq	.+2      	; 0x29c <chooseInput+0x32>
     29a:	88 c0       	rjmp	.+272    	; 0x3ac <chooseInput+0x142>
     29c:	77 c0       	rjmp	.+238    	; 0x38c <chooseInput+0x122>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
     29e:	eb e7       	ldi	r30, 0x7B	; 123
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8f 7d       	andi	r24, 0xDF	; 223
     2a6:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2a8:	ec e7       	ldi	r30, 0x7C	; 124
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	8b 7f       	andi	r24, 0xFB	; 251
     2b0:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2b2:	80 81       	ld	r24, Z
     2b4:	8d 7f       	andi	r24, 0xFD	; 253
     2b6:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2b8:	80 81       	ld	r24, Z
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	80 83       	st	Z, r24

		break;
     2be:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
     2c0:	eb e7       	ldi	r30, 0x7B	; 123
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2ca:	ec e7       	ldi	r30, 0x7C	; 124
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8b 7f       	andi	r24, 0xFB	; 251
     2d2:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2d4:	80 81       	ld	r24, Z
     2d6:	8d 7f       	andi	r24, 0xFD	; 253
     2d8:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     2da:	80 81       	ld	r24, Z
     2dc:	81 60       	ori	r24, 0x01	; 1
     2de:	80 83       	st	Z, r24

		break;
     2e0:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
     2e2:	eb e7       	ldi	r30, 0x7B	; 123
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8f 7d       	andi	r24, 0xDF	; 223
     2ea:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     2ec:	ec e7       	ldi	r30, 0x7C	; 124
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	84 60       	ori	r24, 0x04	; 4
     2f4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2f6:	80 81       	ld	r24, Z
     2f8:	8d 7f       	andi	r24, 0xFD	; 253
     2fa:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2fc:	80 81       	ld	r24, Z
     2fe:	8e 7f       	andi	r24, 0xFE	; 254
     300:	80 83       	st	Z, r24

		break;
     302:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
     304:	eb e7       	ldi	r30, 0x7B	; 123
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8f 7d       	andi	r24, 0xDF	; 223
     30c:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     30e:	ec e7       	ldi	r30, 0x7C	; 124
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	84 60       	ori	r24, 0x04	; 4
     316:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     318:	80 81       	ld	r24, Z
     31a:	8d 7f       	andi	r24, 0xFD	; 253
     31c:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
		break;
     324:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
     326:	eb e7       	ldi	r30, 0x7B	; 123
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     330:	ec e7       	ldi	r30, 0x7C	; 124
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	84 60       	ori	r24, 0x04	; 4
     338:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
     33a:	80 81       	ld	r24, Z
     33c:	82 60       	ori	r24, 0x02	; 2
     33e:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     340:	80 81       	ld	r24, Z
     342:	8e 7f       	andi	r24, 0xFE	; 254
     344:	80 83       	st	Z, r24
		break;
     346:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
     348:	eb e7       	ldi	r30, 0x7B	; 123
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     352:	ec e7       	ldi	r30, 0x7C	; 124
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8b 7f       	andi	r24, 0xFB	; 251
     35a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     35c:	80 81       	ld	r24, Z
     35e:	8d 7f       	andi	r24, 0xFD	; 253
     360:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     362:	80 81       	ld	r24, Z
     364:	8e 7f       	andi	r24, 0xFE	; 254
     366:	80 83       	st	Z, r24
		break;
     368:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
     36a:	eb e7       	ldi	r30, 0x7B	; 123
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	80 62       	ori	r24, 0x20	; 32
     372:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     374:	ec e7       	ldi	r30, 0x7C	; 124
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8b 7f       	andi	r24, 0xFB	; 251
     37c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     37e:	80 81       	ld	r24, Z
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     384:	80 81       	ld	r24, Z
     386:	81 60       	ori	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
		break;
     38a:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
     38c:	eb e7       	ldi	r30, 0x7B	; 123
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	8f 7d       	andi	r24, 0xDF	; 223
     394:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
     396:	ec e7       	ldi	r30, 0x7C	; 124
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
     3a0:	80 81       	ld	r24, Z
     3a2:	82 60       	ori	r24, 0x02	; 2
     3a4:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
     3a6:	80 81       	ld	r24, Z
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	80 83       	st	Z, r24
     3ac:	08 95       	ret

000003ae <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
     3ae:	80 91 26 01 	lds	r24, 0x0126
     3b2:	90 91 27 01 	lds	r25, 0x0127
     3b6:	89 2b       	or	r24, r25
     3b8:	09 f4       	brne	.+2      	; 0x3bc <getADC+0xe>
     3ba:	9c c0       	rjmp	.+312    	; 0x4f4 <getADC+0x146>
		switch (flag) {
     3bc:	80 91 52 01 	lds	r24, 0x0152
     3c0:	90 91 53 01 	lds	r25, 0x0153
     3c4:	83 30       	cpi	r24, 0x03	; 3
     3c6:	91 05       	cpc	r25, r1
     3c8:	71 f1       	breq	.+92     	; 0x426 <getADC+0x78>
     3ca:	3c f4       	brge	.+14     	; 0x3da <getADC+0x2c>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	91 05       	cpc	r25, r1
     3d0:	c1 f0       	breq	.+48     	; 0x402 <getADC+0x54>
     3d2:	04 f5       	brge	.+64     	; 0x414 <getADC+0x66>
     3d4:	89 2b       	or	r24, r25
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <getADC+0x42>
     3d8:	52 c0       	rjmp	.+164    	; 0x47e <getADC+0xd0>
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	91 05       	cpc	r25, r1
     3de:	a9 f1       	breq	.+106    	; 0x44a <getADC+0x9c>
     3e0:	5c f1       	brlt	.+86     	; 0x438 <getADC+0x8a>
     3e2:	86 30       	cpi	r24, 0x06	; 6
     3e4:	91 05       	cpc	r25, r1
     3e6:	d1 f1       	breq	.+116    	; 0x45c <getADC+0xae>
     3e8:	07 97       	sbiw	r24, 0x07	; 7
     3ea:	09 f0       	breq	.+2      	; 0x3ee <getADC+0x40>
     3ec:	48 c0       	rjmp	.+144    	; 0x47e <getADC+0xd0>
     3ee:	3f c0       	rjmp	.+126    	; 0x46e <getADC+0xc0>
			case 0:
			ADC0 = ADC;
     3f0:	80 91 78 00 	lds	r24, 0x0078
     3f4:	90 91 79 00 	lds	r25, 0x0079
     3f8:	90 93 37 01 	sts	0x0137, r25
     3fc:	80 93 36 01 	sts	0x0136, r24
			break;
     400:	3e c0       	rjmp	.+124    	; 0x47e <getADC+0xd0>
			case 1:
			ADC1 = ADC;
     402:	80 91 78 00 	lds	r24, 0x0078
     406:	90 91 79 00 	lds	r25, 0x0079
     40a:	90 93 35 01 	sts	0x0135, r25
     40e:	80 93 34 01 	sts	0x0134, r24
			break;
     412:	35 c0       	rjmp	.+106    	; 0x47e <getADC+0xd0>
			case 2:
			ADC2 = ADC;
     414:	80 91 78 00 	lds	r24, 0x0078
     418:	90 91 79 00 	lds	r25, 0x0079
     41c:	90 93 33 01 	sts	0x0133, r25
     420:	80 93 32 01 	sts	0x0132, r24
			break;
     424:	2c c0       	rjmp	.+88     	; 0x47e <getADC+0xd0>
			case 3:
			ADC3 = ADC;
     426:	80 91 78 00 	lds	r24, 0x0078
     42a:	90 91 79 00 	lds	r25, 0x0079
     42e:	90 93 31 01 	sts	0x0131, r25
     432:	80 93 30 01 	sts	0x0130, r24
			break;
     436:	23 c0       	rjmp	.+70     	; 0x47e <getADC+0xd0>
			case 4:
			ADC4 = ADC;
     438:	80 91 78 00 	lds	r24, 0x0078
     43c:	90 91 79 00 	lds	r25, 0x0079
     440:	90 93 2f 01 	sts	0x012F, r25
     444:	80 93 2e 01 	sts	0x012E, r24
			break;
     448:	1a c0       	rjmp	.+52     	; 0x47e <getADC+0xd0>
			case 5:
			ADC5 = ADC;
     44a:	80 91 78 00 	lds	r24, 0x0078
     44e:	90 91 79 00 	lds	r25, 0x0079
     452:	90 93 2d 01 	sts	0x012D, r25
     456:	80 93 2c 01 	sts	0x012C, r24
			break;
     45a:	11 c0       	rjmp	.+34     	; 0x47e <getADC+0xd0>
			case 6:
			ADC6 = ADC;
     45c:	80 91 78 00 	lds	r24, 0x0078
     460:	90 91 79 00 	lds	r25, 0x0079
     464:	90 93 2b 01 	sts	0x012B, r25
     468:	80 93 2a 01 	sts	0x012A, r24
			break;
     46c:	08 c0       	rjmp	.+16     	; 0x47e <getADC+0xd0>
			case 7:
			ADC7 = ADC;
     46e:	80 91 78 00 	lds	r24, 0x0078
     472:	90 91 79 00 	lds	r25, 0x0079
     476:	90 93 29 01 	sts	0x0129, r25
     47a:	80 93 28 01 	sts	0x0128, r24
			break;
		}
			clear(ADCSRA, ADEN);	//Enable/Start conversion
     47e:	ea e7       	ldi	r30, 0x7A	; 122
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 77       	andi	r24, 0x7F	; 127
     486:	80 83       	st	Z, r24
			clear(ADCSRA, ADSC);	//^
     488:	80 81       	ld	r24, Z
     48a:	8f 7b       	andi	r24, 0xBF	; 191
     48c:	80 83       	st	Z, r24
			clear(ADCSRA, ADATE);
     48e:	80 81       	ld	r24, Z
     490:	8f 7d       	andi	r24, 0xDF	; 223
     492:	80 83       	st	Z, r24
			clear(ADCSRA, ADIF);
     494:	80 81       	ld	r24, Z
     496:	8f 7e       	andi	r24, 0xEF	; 239
     498:	80 83       	st	Z, r24
			if (flag >= 0 && flag < 8) {
     49a:	80 91 52 01 	lds	r24, 0x0152
     49e:	90 91 53 01 	lds	r25, 0x0153
     4a2:	88 30       	cpi	r24, 0x08	; 8
     4a4:	91 05       	cpc	r25, r1
     4a6:	a0 f4       	brcc	.+40     	; 0x4d0 <getADC+0x122>
				flag = (flag + 1) % 8;
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	9c 01       	movw	r18, r24
     4ac:	27 70       	andi	r18, 0x07	; 7
     4ae:	30 78       	andi	r19, 0x80	; 128
     4b0:	33 23       	and	r19, r19
     4b2:	34 f4       	brge	.+12     	; 0x4c0 <getADC+0x112>
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	31 09       	sbc	r19, r1
     4b8:	28 6f       	ori	r18, 0xF8	; 248
     4ba:	3f 6f       	ori	r19, 0xFF	; 255
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	20 93 52 01 	sts	0x0152, r18
     4c4:	30 93 53 01 	sts	0x0153, r19
				chooseInput(flag);
     4c8:	82 2f       	mov	r24, r18
     4ca:	93 2f       	mov	r25, r19
     4cc:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
			}
			set(ADCSRA, ADATE);	//Set trigger to free-running mode
     4d0:	ea e7       	ldi	r30, 0x7A	; 122
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	80 83       	st	Z, r24
			set(ADCSRA, ADEN);	//Enable/Start conversion
     4da:	80 81       	ld	r24, Z
     4dc:	80 68       	ori	r24, 0x80	; 128
     4de:	80 83       	st	Z, r24
			set(ADCSRA, ADSC);	//^
     4e0:	80 81       	ld	r24, Z
     4e2:	80 64       	ori	r24, 0x40	; 64
     4e4:	80 83       	st	Z, r24
			
			set(ADCSRA, ADIF);	//Enable reading results
     4e6:	80 81       	ld	r24, Z
     4e8:	80 61       	ori	r24, 0x10	; 16
     4ea:	80 83       	st	Z, r24
			conversion = 0;
     4ec:	10 92 27 01 	sts	0x0127, r1
     4f0:	10 92 26 01 	sts	0x0126, r1
	}

	ADCarr[0] = ADC0;
     4f4:	80 91 36 01 	lds	r24, 0x0136
     4f8:	90 91 37 01 	lds	r25, 0x0137
     4fc:	90 93 43 01 	sts	0x0143, r25
     500:	80 93 42 01 	sts	0x0142, r24
	ADCarr[1] = ADC1;
     504:	80 91 34 01 	lds	r24, 0x0134
     508:	90 91 35 01 	lds	r25, 0x0135
     50c:	90 93 45 01 	sts	0x0145, r25
     510:	80 93 44 01 	sts	0x0144, r24
	ADCarr[2] = ADC2;
     514:	80 91 32 01 	lds	r24, 0x0132
     518:	90 91 33 01 	lds	r25, 0x0133
     51c:	90 93 47 01 	sts	0x0147, r25
     520:	80 93 46 01 	sts	0x0146, r24
	ADCarr[3] = ADC3;
     524:	80 91 30 01 	lds	r24, 0x0130
     528:	90 91 31 01 	lds	r25, 0x0131
     52c:	90 93 49 01 	sts	0x0149, r25
     530:	80 93 48 01 	sts	0x0148, r24
	ADCarr[4] = ADC4;
     534:	80 91 2e 01 	lds	r24, 0x012E
     538:	90 91 2f 01 	lds	r25, 0x012F
     53c:	90 93 4b 01 	sts	0x014B, r25
     540:	80 93 4a 01 	sts	0x014A, r24
	ADCarr[5] = ADC5;
     544:	80 91 2c 01 	lds	r24, 0x012C
     548:	90 91 2d 01 	lds	r25, 0x012D
     54c:	90 93 4d 01 	sts	0x014D, r25
     550:	80 93 4c 01 	sts	0x014C, r24
	ADCarr[6] = ADC6;
     554:	80 91 2a 01 	lds	r24, 0x012A
     558:	90 91 2b 01 	lds	r25, 0x012B
     55c:	90 93 4f 01 	sts	0x014F, r25
     560:	80 93 4e 01 	sts	0x014E, r24
	ADCarr[7] = ADC7;
     564:	80 91 28 01 	lds	r24, 0x0128
     568:	90 91 29 01 	lds	r25, 0x0129
     56c:	90 93 51 01 	sts	0x0151, r25
     570:	80 93 50 01 	sts	0x0150, r24
     574:	08 95       	ret

00000576 <reportADC>:
	
	
}

void reportADC() {
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29

	m_red(ON);
     582:	6e 9a       	sbi	0x0d, 6	; 13
     584:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     586:	6a 9a       	sbi	0x0d, 2	; 13
     588:	72 98       	cbi	0x0e, 2	; 14


	m_red(OFF);
     58a:	6e 9a       	sbi	0x0d, 6	; 13
     58c:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     58e:	6a 9a       	sbi	0x0d, 2	; 13
     590:	72 9a       	sbi	0x0e, 2	; 14
	float diff = 0.0;

	
	

	getADC();
     592:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
     596:	e2 e4       	ldi	r30, 0x42	; 66
     598:	f1 e0       	ldi	r31, 0x01	; 1
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 8; i++) {
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
	
	

	getADC();
	index = 0;
	maxval = 0;
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0

	
	

	getADC();
	index = 0;
     5a2:	c0 e0       	ldi	r28, 0x00	; 0
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 8; i++) {
		if (ADCarr[i] > maxval) {
     5a6:	21 91       	ld	r18, Z+
     5a8:	31 91       	ld	r19, Z+
     5aa:	42 17       	cp	r20, r18
     5ac:	53 07       	cpc	r21, r19
     5ae:	14 f4       	brge	.+4      	; 0x5b4 <reportADC+0x3e>
			index = i;
			maxval = ADCarr[i];
     5b0:	a9 01       	movw	r20, r18
	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 8; i++) {
		if (ADCarr[i] > maxval) {
     5b2:	ec 01       	movw	r28, r24

	getADC();
	index = 0;
	maxval = 0;
	//m_green(TOGGLE);
	for(int i = 0; i < 8; i++) {
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	88 30       	cpi	r24, 0x08	; 8
     5b8:	91 05       	cpc	r25, r1
     5ba:	a9 f7       	brne	.-22     	; 0x5a6 <reportADC+0x30>
		if (ADCarr[i] > maxval) {
			index = i;
			maxval = ADCarr[i];
		}
	}
	switch (index) {
     5bc:	20 97       	sbiw	r28, 0x00	; 0
     5be:	29 f0       	breq	.+10     	; 0x5ca <reportADC+0x54>
     5c0:	c6 30       	cpi	r28, 0x06	; 6
     5c2:	d1 05       	cpc	r29, r1
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <reportADC+0x52>
     5c6:	4b c0       	rjmp	.+150    	; 0x65e <reportADC+0xe8>
     5c8:	25 c0       	rjmp	.+74     	; 0x614 <reportADC+0x9e>
		case 0:
		diff = ADCarr[0] - ADCarr[6];
     5ca:	60 91 42 01 	lds	r22, 0x0142
     5ce:	70 91 43 01 	lds	r23, 0x0143
     5d2:	80 91 4e 01 	lds	r24, 0x014E
     5d6:	90 91 4f 01 	lds	r25, 0x014F
     5da:	68 1b       	sub	r22, r24
     5dc:	79 0b       	sbc	r23, r25
     5de:	88 27       	eor	r24, r24
     5e0:	77 fd       	sbrc	r23, 7
     5e2:	80 95       	com	r24
     5e4:	98 2f       	mov	r25, r24
     5e6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
		deg = exp(-1.0*fabs(((float)diff))/400.0);
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	bf 77       	andi	r27, 0x7F	; 127
     5f0:	bc 01       	movw	r22, r24
     5f2:	cd 01       	movw	r24, r26
     5f4:	90 58       	subi	r25, 0x80	; 128
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	48 ec       	ldi	r20, 0xC8	; 200
     5fc:	53 e4       	ldi	r21, 0x43	; 67
     5fe:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     602:	0e 94 ed 15 	call	0x2bda	; 0x2bda <exp>
     606:	6b 01       	movw	r12, r22
     608:	7c 01       	movw	r14, r24
		m_green(ON);
     60a:	6a 9a       	sbi	0x0d, 2	; 13
     60c:	72 98       	cbi	0x0e, 2	; 14
		m_red(OFF);
     60e:	6e 9a       	sbi	0x0d, 6	; 13
     610:	76 9a       	sbi	0x0e, 6	; 14
     612:	2c c0       	rjmp	.+88     	; 0x66c <reportADC+0xf6>
		break;
		case 6:
		diff = ADCarr[6] - ADCarr[0];
     614:	60 91 4e 01 	lds	r22, 0x014E
     618:	70 91 4f 01 	lds	r23, 0x014F
     61c:	80 91 42 01 	lds	r24, 0x0142
     620:	90 91 43 01 	lds	r25, 0x0143
     624:	68 1b       	sub	r22, r24
     626:	79 0b       	sbc	r23, r25
     628:	88 27       	eor	r24, r24
     62a:	77 fd       	sbrc	r23, 7
     62c:	80 95       	com	r24
     62e:	98 2f       	mov	r25, r24
     630:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
		deg = exp(-1.0*fabs(((float)diff))/400.0);
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	bf 77       	andi	r27, 0x7F	; 127
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	90 58       	subi	r25, 0x80	; 128
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	48 ec       	ldi	r20, 0xC8	; 200
     646:	53 e4       	ldi	r21, 0x43	; 67
     648:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     64c:	0e 94 ed 15 	call	0x2bda	; 0x2bda <exp>
     650:	6b 01       	movw	r12, r22
     652:	7c 01       	movw	r14, r24
		m_green(OFF);
     654:	6a 9a       	sbi	0x0d, 2	; 13
     656:	72 9a       	sbi	0x0e, 2	; 14
		m_red(ON);
     658:	6e 9a       	sbi	0x0d, 6	; 13
     65a:	76 98       	cbi	0x0e, 6	; 14
     65c:	07 c0       	rjmp	.+14     	; 0x66c <reportADC+0xf6>
		break;
		default:
		m_green(ON);
     65e:	6a 9a       	sbi	0x0d, 2	; 13
     660:	72 98       	cbi	0x0e, 2	; 14
		m_red(ON);
     662:	6e 9a       	sbi	0x0d, 6	; 13
     664:	76 98       	cbi	0x0e, 6	; 14
	m_green(OFF);

	char rx_buffer; //computer interactions
	int index = 0;
	int maxval = 0;
	float deg = 0.0;
     666:	c1 2c       	mov	r12, r1
     668:	d1 2c       	mov	r13, r1
     66a:	76 01       	movw	r14, r12

		//m_usb_rx_flush();  				//clear buffer

		//if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			m_usb_tx_int(ADCarr[0]);
     66c:	80 91 42 01 	lds	r24, 0x0142
     670:	90 91 43 01 	lds	r25, 0x0143
     674:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     678:	89 e0       	ldi	r24, 0x09	; 9
     67a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[1]);
     67e:	80 91 44 01 	lds	r24, 0x0144
     682:	90 91 45 01 	lds	r25, 0x0145
     686:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     68a:	89 e0       	ldi	r24, 0x09	; 9
     68c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[2]);
     690:	80 91 46 01 	lds	r24, 0x0146
     694:	90 91 47 01 	lds	r25, 0x0147
     698:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     69c:	89 e0       	ldi	r24, 0x09	; 9
     69e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[3]);
     6a2:	80 91 48 01 	lds	r24, 0x0148
     6a6:	90 91 49 01 	lds	r25, 0x0149
     6aa:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[4]);
     6b4:	80 91 4a 01 	lds	r24, 0x014A
     6b8:	90 91 4b 01 	lds	r25, 0x014B
     6bc:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     6c0:	89 e0       	ldi	r24, 0x09	; 9
     6c2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[5]);
     6c6:	80 91 4c 01 	lds	r24, 0x014C
     6ca:	90 91 4d 01 	lds	r25, 0x014D
     6ce:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     6d2:	89 e0       	ldi	r24, 0x09	; 9
     6d4:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[6]);
     6d8:	80 91 4e 01 	lds	r24, 0x014E
     6dc:	90 91 4f 01 	lds	r25, 0x014F
     6e0:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     6e4:	89 e0       	ldi	r24, 0x09	; 9
     6e6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(ADCarr[7]);
     6ea:	80 91 50 01 	lds	r24, 0x0150
     6ee:	90 91 51 01 	lds	r25, 0x0151
     6f2:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     6f6:	89 e0       	ldi	r24, 0x09	; 9
     6f8:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int(index);
     6fc:	ce 01       	movw	r24, r28
     6fe:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			m_usb_tx_int((int)(deg*100));
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	48 ec       	ldi	r20, 0xC8	; 200
     70e:	52 e4       	ldi	r21, 0x42	; 66
     710:	c7 01       	movw	r24, r14
     712:	b6 01       	movw	r22, r12
     714:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     718:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__fixsfsi>
     71c:	cb 01       	movw	r24, r22
     71e:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
			m_usb_tx_char('\t');
     722:	89 e0       	ldi	r24, 0x09	; 9
     724:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>

		//}
		m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     728:	8a e0       	ldi	r24, 0x0A	; 10
     72a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
		//}
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <rotate>:

void rotate(int dir, float speed) {
	OCR1B = OCR1A;
     73c:	20 91 88 00 	lds	r18, 0x0088
     740:	30 91 89 00 	lds	r19, 0x0089
     744:	30 93 8b 00 	sts	0x008B, r19
     748:	20 93 8a 00 	sts	0x008A, r18
	OCR3A = ICR3;
     74c:	20 91 96 00 	lds	r18, 0x0096
     750:	30 91 97 00 	lds	r19, 0x0097
     754:	30 93 99 00 	sts	0x0099, r19
     758:	20 93 98 00 	sts	0x0098, r18
	if (dir == RIGHT) {
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	19 f4       	brne	.+6      	; 0x766 <rotate+0x2a>
		set(PORTB,2);
     760:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     762:	2b 98       	cbi	0x05, 3	; 5
     764:	08 95       	ret
	}
	else if (dir == LEFT) {
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	11 f4       	brne	.+4      	; 0x76e <rotate+0x32>
		clear(PORTB,2);
     76a:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     76c:	2b 9a       	sbi	0x05, 3	; 5
     76e:	08 95       	ret

00000770 <turn>:
	}
}

void turn(int dir,float speed, float degree) {
     770:	8f 92       	push	r8
     772:	9f 92       	push	r9
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	6a 01       	movw	r12, r20
     78a:	7b 01       	movw	r14, r22
     78c:	48 01       	movw	r8, r16
     78e:	59 01       	movw	r10, r18
	set(PORTB,2);
     790:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     792:	2b 9a       	sbi	0x05, 3	; 5
	if (dir == LEFT) {
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	91 05       	cpc	r25, r1
     798:	81 f5       	brne	.+96     	; 0x7fa <turn+0x8a>
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     79a:	60 91 96 00 	lds	r22, 0x0096
     79e:	70 91 97 00 	lds	r23, 0x0097
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
     7aa:	a7 01       	movw	r20, r14
     7ac:	96 01       	movw	r18, r12
     7ae:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     7b2:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__fixunssfsi>
     7b6:	70 93 99 00 	sts	0x0099, r23
     7ba:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     7be:	c0 91 88 00 	lds	r28, 0x0088
     7c2:	d0 91 89 00 	lds	r29, 0x0089
     7c6:	a7 01       	movw	r20, r14
     7c8:	96 01       	movw	r18, r12
     7ca:	c5 01       	movw	r24, r10
     7cc:	b4 01       	movw	r22, r8
     7ce:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
     7d6:	be 01       	movw	r22, r28
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     7ec:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__fixunssfsi>
     7f0:	70 93 8b 00 	sts	0x008B, r23
     7f4:	60 93 8a 00 	sts	0x008A, r22
     7f8:	31 c0       	rjmp	.+98     	; 0x85c <turn+0xec>
	}
	
		if (dir == RIGHT) {
     7fa:	89 2b       	or	r24, r25
     7fc:	79 f5       	brne	.+94     	; 0x85c <turn+0xec>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     7fe:	c0 91 96 00 	lds	r28, 0x0096
     802:	d0 91 97 00 	lds	r29, 0x0097
     806:	9a 01       	movw	r18, r20
     808:	ab 01       	movw	r20, r22
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	be 01       	movw	r22, r28
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     82c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__fixunssfsi>
     830:	70 93 99 00 	sts	0x0099, r23
     834:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     838:	60 91 88 00 	lds	r22, 0x0088
     83c:	70 91 89 00 	lds	r23, 0x0089
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
     848:	a7 01       	movw	r20, r14
     84a:	96 01       	movw	r18, r12
     84c:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     850:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__fixunssfsi>
     854:	70 93 8b 00 	sts	0x008B, r23
     858:	60 93 8a 00 	sts	0x008A, r22
		}
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	9f 90       	pop	r9
     872:	8f 90       	pop	r8
     874:	08 95       	ret

00000876 <reverse>:

void reverse(){
	OCR1B = OCR1A;
     876:	80 91 88 00 	lds	r24, 0x0088
     87a:	90 91 89 00 	lds	r25, 0x0089
     87e:	90 93 8b 00 	sts	0x008B, r25
     882:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     886:	80 91 96 00 	lds	r24, 0x0096
     88a:	90 91 97 00 	lds	r25, 0x0097
     88e:	90 93 99 00 	sts	0x0099, r25
     892:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     896:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     898:	2b 98       	cbi	0x05, 3	; 5
     89a:	08 95       	ret

0000089c <drive_to_puck>:

void findPuck() {
	//TODO: Implement code
}

void drive_to_puck() {
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
		getADC();
     8a0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	e2 e4       	ldi	r30, 0x42	; 66
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
		index = 0;
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
			if (ADCarr[i] > maxval) {
     8b4:	21 91       	ld	r18, Z+
     8b6:	31 91       	ld	r19, Z+
     8b8:	42 17       	cp	r20, r18
     8ba:	53 07       	cpc	r21, r19
     8bc:	14 f4       	brge	.+4      	; 0x8c2 <drive_to_puck+0x26>
				index = i;
     8be:	bc 01       	movw	r22, r24
				maxval = ADCarr[i];
     8c0:	a9 01       	movw	r20, r18

void drive_to_puck() {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	87 30       	cpi	r24, 0x07	; 7
     8c6:	91 05       	cpc	r25, r1
     8c8:	a9 f7       	brne	.-22     	; 0x8b4 <drive_to_puck+0x18>
     8ca:	50 93 3f 01 	sts	0x013F, r21
     8ce:	40 93 3e 01 	sts	0x013E, r20
     8d2:	60 93 40 01 	sts	0x0140, r22
     8d6:	70 93 41 01 	sts	0x0141, r23
			if (ADCarr[i] > maxval) {
				index = i;
				maxval = ADCarr[i];
			}
		}
		switch (index) {
     8da:	63 30       	cpi	r22, 0x03	; 3
     8dc:	71 05       	cpc	r23, r1
     8de:	09 f4       	brne	.+2      	; 0x8e2 <drive_to_puck+0x46>
     8e0:	86 c0       	rjmp	.+268    	; 0x9ee <drive_to_puck+0x152>
     8e2:	4c f4       	brge	.+18     	; 0x8f6 <drive_to_puck+0x5a>
     8e4:	61 30       	cpi	r22, 0x01	; 1
     8e6:	71 05       	cpc	r23, r1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <drive_to_puck+0x50>
     8ea:	68 c0       	rjmp	.+208    	; 0x9bc <drive_to_puck+0x120>
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <drive_to_puck+0x54>
     8ee:	73 c0       	rjmp	.+230    	; 0x9d6 <drive_to_puck+0x13a>
     8f0:	67 2b       	or	r22, r23
     8f2:	61 f0       	breq	.+24     	; 0x90c <drive_to_puck+0x70>
     8f4:	09 c1       	rjmp	.+530    	; 0xb08 <__stack+0x9>
     8f6:	65 30       	cpi	r22, 0x05	; 5
     8f8:	71 05       	cpc	r23, r1
     8fa:	09 f4       	brne	.+2      	; 0x8fe <drive_to_puck+0x62>
     8fc:	a1 c0       	rjmp	.+322    	; 0xa40 <drive_to_puck+0x1a4>
     8fe:	0c f4       	brge	.+2      	; 0x902 <drive_to_puck+0x66>
     900:	93 c0       	rjmp	.+294    	; 0xa28 <drive_to_puck+0x18c>
     902:	66 30       	cpi	r22, 0x06	; 6
     904:	71 05       	cpc	r23, r1
     906:	09 f0       	breq	.+2      	; 0x90a <drive_to_puck+0x6e>
     908:	ff c0       	rjmp	.+510    	; 0xb08 <__stack+0x9>
     90a:	a7 c0       	rjmp	.+334    	; 0xa5a <drive_to_puck+0x1be>
			case 0: 
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     90c:	00 91 42 01 	lds	r16, 0x0142
     910:	10 91 43 01 	lds	r17, 0x0143
     914:	b8 01       	movw	r22, r16
     916:	88 27       	eor	r24, r24
     918:	77 fd       	sbrc	r23, 7
     91a:	80 95       	com	r24
     91c:	98 2f       	mov	r25, r24
     91e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     922:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <log>
     926:	90 58       	subi	r25, 0x80	; 128
     928:	2e ea       	ldi	r18, 0xAE	; 174
     92a:	37 e4       	ldi	r19, 0x47	; 71
     92c:	43 eb       	ldi	r20, 0xB3	; 179
     92e:	52 e4       	ldi	r21, 0x42	; 66
     930:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     934:	2f e1       	ldi	r18, 0x1F	; 31
     936:	35 e2       	ldi	r19, 0x25	; 37
     938:	46 e2       	ldi	r20, 0x26	; 38
     93a:	54 e4       	ldi	r21, 0x44	; 68
     93c:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
     940:	60 93 ba 01 	sts	0x01BA, r22
     944:	70 93 bb 01 	sts	0x01BB, r23
     948:	80 93 bc 01 	sts	0x01BC, r24
     94c:	90 93 bd 01 	sts	0x01BD, r25
				diff = ADCarr[0] - ADCarr[6];
     950:	80 91 4e 01 	lds	r24, 0x014E
     954:	90 91 4f 01 	lds	r25, 0x014F
     958:	b8 01       	movw	r22, r16
     95a:	68 1b       	sub	r22, r24
     95c:	79 0b       	sbc	r23, r25
     95e:	70 93 3d 01 	sts	0x013D, r23
     962:	60 93 3c 01 	sts	0x013C, r22
				deg = exp(-1.0*(fabs((float)diff))/70.0);
     966:	88 27       	eor	r24, r24
     968:	77 fd       	sbrc	r23, 7
     96a:	80 95       	com	r24
     96c:	98 2f       	mov	r25, r24
     96e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	bf 77       	andi	r27, 0x7F	; 127
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	90 58       	subi	r25, 0x80	; 128
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	4c e8       	ldi	r20, 0x8C	; 140
     984:	52 e4       	ldi	r21, 0x42	; 66
     986:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     98a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <exp>
     98e:	8b 01       	movw	r16, r22
     990:	9c 01       	movw	r18, r24
     992:	60 93 38 01 	sts	0x0138, r22
     996:	70 93 39 01 	sts	0x0139, r23
     99a:	80 93 3a 01 	sts	0x013A, r24
     99e:	90 93 3b 01 	sts	0x013B, r25
				turn(RIGHT,1.0,deg);
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e8       	ldi	r22, 0x80	; 128
     9a8:	7f e3       	ldi	r23, 0x3F	; 63
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
				m_green(ON);
     9b2:	6a 9a       	sbi	0x0d, 2	; 13
     9b4:	72 98       	cbi	0x0e, 2	; 14
				m_red(OFF);
     9b6:	6e 9a       	sbi	0x0d, 6	; 13
     9b8:	76 9a       	sbi	0x0e, 6	; 14
     9ba:	aa c0       	rjmp	.+340    	; 0xb10 <__stack+0x11>
				break;
			case 1:
				turn(RIGHT,1.0,0.15);
     9bc:	0a e9       	ldi	r16, 0x9A	; 154
     9be:	19 e9       	ldi	r17, 0x99	; 153
     9c0:	29 e1       	ldi	r18, 0x19	; 25
     9c2:	3e e3       	ldi	r19, 0x3E	; 62
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e8       	ldi	r22, 0x80	; 128
     9ca:	7f e3       	ldi	r23, 0x3F	; 63
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
				break;
     9d4:	9d c0       	rjmp	.+314    	; 0xb10 <__stack+0x11>
			case 2:
				turn(RIGHT,1.0,0);
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	98 01       	movw	r18, r16
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	60 e8       	ldi	r22, 0x80	; 128
     9e2:	7f e3       	ldi	r23, 0x3F	; 63
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
				break;
     9ec:	91 c0       	rjmp	.+290    	; 0xb10 <__stack+0x11>
			case 3:
				if (ADCarr[2] > ADCarr[4]) {
     9ee:	20 91 46 01 	lds	r18, 0x0146
     9f2:	30 91 47 01 	lds	r19, 0x0147
     9f6:	80 91 4a 01 	lds	r24, 0x014A
     9fa:	90 91 4b 01 	lds	r25, 0x014B
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	4c f4       	brge	.+18     	; 0xa16 <drive_to_puck+0x17a>
					rotate(RIGHT, 1);
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e8       	ldi	r22, 0x80	; 128
     a0a:	7f e3       	ldi	r23, 0x3F	; 63
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 9e 03 	call	0x73c	; 0x73c <rotate>
     a14:	7d c0       	rjmp	.+250    	; 0xb10 <__stack+0x11>
				}
				else {
					rotate(LEFT, 1);
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	60 e8       	ldi	r22, 0x80	; 128
     a1c:	7f e3       	ldi	r23, 0x3F	; 63
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 9e 03 	call	0x73c	; 0x73c <rotate>
     a26:	74 c0       	rjmp	.+232    	; 0xb10 <__stack+0x11>
				}
				break;
			case 4:
				turn(LEFT,1.0,0);
     a28:	00 e0       	ldi	r16, 0x00	; 0
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	98 01       	movw	r18, r16
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	60 e8       	ldi	r22, 0x80	; 128
     a34:	7f e3       	ldi	r23, 0x3F	; 63
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
				break;
     a3e:	68 c0       	rjmp	.+208    	; 0xb10 <__stack+0x11>
			case 5:
				turn(LEFT,1.0,0.15);
     a40:	0a e9       	ldi	r16, 0x9A	; 154
     a42:	19 e9       	ldi	r17, 0x99	; 153
     a44:	29 e1       	ldi	r18, 0x19	; 25
     a46:	3e e3       	ldi	r19, 0x3E	; 62
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e8       	ldi	r22, 0x80	; 128
     a4e:	7f e3       	ldi	r23, 0x3F	; 63
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
				break;
     a58:	5b c0       	rjmp	.+182    	; 0xb10 <__stack+0x11>
			case 6:
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     a5a:	00 91 42 01 	lds	r16, 0x0142
     a5e:	10 91 43 01 	lds	r17, 0x0143
     a62:	b8 01       	movw	r22, r16
     a64:	88 27       	eor	r24, r24
     a66:	77 fd       	sbrc	r23, 7
     a68:	80 95       	com	r24
     a6a:	98 2f       	mov	r25, r24
     a6c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     a70:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <log>
     a74:	90 58       	subi	r25, 0x80	; 128
     a76:	2e ea       	ldi	r18, 0xAE	; 174
     a78:	37 e4       	ldi	r19, 0x47	; 71
     a7a:	43 eb       	ldi	r20, 0xB3	; 179
     a7c:	52 e4       	ldi	r21, 0x42	; 66
     a7e:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     a82:	2f e1       	ldi	r18, 0x1F	; 31
     a84:	35 e2       	ldi	r19, 0x25	; 37
     a86:	46 e2       	ldi	r20, 0x26	; 38
     a88:	54 e4       	ldi	r21, 0x44	; 68
     a8a:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
     a8e:	60 93 ba 01 	sts	0x01BA, r22
     a92:	70 93 bb 01 	sts	0x01BB, r23
     a96:	80 93 bc 01 	sts	0x01BC, r24
     a9a:	90 93 bd 01 	sts	0x01BD, r25
				diff = ADCarr[6] - ADCarr[0];
     a9e:	60 91 4e 01 	lds	r22, 0x014E
     aa2:	70 91 4f 01 	lds	r23, 0x014F
     aa6:	60 1b       	sub	r22, r16
     aa8:	71 0b       	sbc	r23, r17
     aaa:	70 93 3d 01 	sts	0x013D, r23
     aae:	60 93 3c 01 	sts	0x013C, r22
				deg = exp(-1.0*(fabs((float)diff))/70.0);
     ab2:	88 27       	eor	r24, r24
     ab4:	77 fd       	sbrc	r23, 7
     ab6:	80 95       	com	r24
     ab8:	98 2f       	mov	r25, r24
     aba:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	bf 77       	andi	r27, 0x7F	; 127
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	90 58       	subi	r25, 0x80	; 128
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4c e8       	ldi	r20, 0x8C	; 140
     ad0:	52 e4       	ldi	r21, 0x42	; 66
     ad2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     ad6:	0e 94 ed 15 	call	0x2bda	; 0x2bda <exp>
     ada:	8b 01       	movw	r16, r22
     adc:	9c 01       	movw	r18, r24
     ade:	60 93 38 01 	sts	0x0138, r22
     ae2:	70 93 39 01 	sts	0x0139, r23
     ae6:	80 93 3a 01 	sts	0x013A, r24
     aea:	90 93 3b 01 	sts	0x013B, r25
				turn(LEFT,1.0,deg);
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	60 e8       	ldi	r22, 0x80	; 128
     af4:	7f e3       	ldi	r23, 0x3F	; 63
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
				m_green(OFF);
     afe:	6a 9a       	sbi	0x0d, 2	; 13
     b00:	72 9a       	sbi	0x0e, 2	; 14
				m_red(ON);
     b02:	6e 9a       	sbi	0x0d, 6	; 13
     b04:	76 98       	cbi	0x0e, 6	; 14
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <__stack+0x11>
				break;
			default:
				m_red(ON);
     b08:	6e 9a       	sbi	0x0d, 6	; 13
     b0a:	76 98       	cbi	0x0e, 6	; 14
				m_green(ON);
     b0c:	6a 9a       	sbi	0x0d, 2	; 13
     b0e:	72 98       	cbi	0x0e, 2	; 14
				break;
		}
	//}
}
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <drive_to_point2>:
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     b16:	4f 92       	push	r4
     b18:	5f 92       	push	r5
     b1a:	6f 92       	push	r6
     b1c:	7f 92       	push	r7
     b1e:	8f 92       	push	r8
     b20:	9f 92       	push	r9
     b22:	af 92       	push	r10
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ec 01       	movw	r28, r24
     b38:	7b 01       	movw	r14, r22
	m_green(ON);
     b3a:	6a 9a       	sbi	0x0d, 2	; 13
     b3c:	72 98       	cbi	0x0e, 2	; 14
	//m_wait(500);

	//while(1) {
		localize(data);
     b3e:	8a ec       	ldi	r24, 0xCA	; 202
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 30 0c 	call	0x1860	; 0x1860 <localize>
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     b46:	be 01       	movw	r22, r28
     b48:	88 27       	eor	r24, r24
     b4a:	77 fd       	sbrc	r23, 7
     b4c:	80 95       	com	r24
     b4e:	98 2f       	mov	r25, r24
     b50:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     b54:	20 91 ca 01 	lds	r18, 0x01CA
     b58:	30 91 cb 01 	lds	r19, 0x01CB
     b5c:	40 91 cc 01 	lds	r20, 0x01CC
     b60:	50 91 cd 01 	lds	r21, 0x01CD
     b64:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
     b68:	06 2f       	mov	r16, r22
     b6a:	17 2f       	mov	r17, r23
     b6c:	d8 2f       	mov	r29, r24
     b6e:	c9 2f       	mov	r28, r25
     b70:	b7 01       	movw	r22, r14
     b72:	88 27       	eor	r24, r24
     b74:	77 fd       	sbrc	r23, 7
     b76:	80 95       	com	r24
     b78:	98 2f       	mov	r25, r24
     b7a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     b7e:	20 91 ce 01 	lds	r18, 0x01CE
     b82:	30 91 cf 01 	lds	r19, 0x01CF
     b86:	40 91 d0 01 	lds	r20, 0x01D0
     b8a:	50 91 d1 01 	lds	r21, 0x01D1
     b8e:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
     b92:	c6 2e       	mov	r12, r22
     b94:	d7 2e       	mov	r13, r23
     b96:	e8 2e       	mov	r14, r24
     b98:	f9 2e       	mov	r15, r25
     b9a:	20 2f       	mov	r18, r16
     b9c:	31 2f       	mov	r19, r17
     b9e:	4d 2f       	mov	r20, r29
     ba0:	5c 2f       	mov	r21, r28
     ba2:	6c 2d       	mov	r22, r12
     ba4:	7d 2d       	mov	r23, r13
     ba6:	8e 2d       	mov	r24, r14
     ba8:	9f 2d       	mov	r25, r15
     baa:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <atan2>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	44 eb       	ldi	r20, 0xB4	; 180
     bb8:	52 e4       	ldi	r21, 0x42	; 66
     bba:	60 91 d2 01 	lds	r22, 0x01D2
     bbe:	70 91 d3 01 	lds	r23, 0x01D3
     bc2:	80 91 d4 01 	lds	r24, 0x01D4
     bc6:	90 91 d5 01 	lds	r25, 0x01D5
     bca:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
     bce:	4b 01       	movw	r8, r22
     bd0:	5c 01       	movw	r10, r24
     bd2:	b7 fa       	bst	r11, 7
     bd4:	b0 94       	com	r11
     bd6:	b7 f8       	bld	r11, 7
     bd8:	b0 94       	com	r11
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	44 e3       	ldi	r20, 0x34	; 52
     be0:	53 e4       	ldi	r21, 0x43	; 67
     be2:	c3 01       	movw	r24, r6
     be4:	b2 01       	movw	r22, r4
     be6:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     bea:	23 ec       	ldi	r18, 0xC3	; 195
     bec:	35 ef       	ldi	r19, 0xF5	; 245
     bee:	48 e4       	ldi	r20, 0x48	; 72
     bf0:	50 e4       	ldi	r21, 0x40	; 64
     bf2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c5 01       	movw	r24, r10
     bfc:	b4 01       	movw	r22, r8
     bfe:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
     c02:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__fixsfsi>
     c06:	cb 01       	movw	r24, r22
     c08:	8c 57       	subi	r24, 0x7C	; 124
     c0a:	9c 4f       	sbci	r25, 0xFC	; 252
     c0c:	68 e6       	ldi	r22, 0x68	; 104
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__divmodhi4>
     c14:	bc 01       	movw	r22, r24
     c16:	64 5b       	subi	r22, 0xB4	; 180
     c18:	71 09       	sbc	r23, r1
     c1a:	88 27       	eor	r24, r24
     c1c:	77 fd       	sbrc	r23, 7
     c1e:	80 95       	com	r24
     c20:	98 2f       	mov	r25, r24
     c22:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     c26:	4b 01       	movw	r8, r22
     c28:	5c 01       	movw	r10, r24
     c2a:	60 93 22 01 	sts	0x0122, r22
     c2e:	70 93 23 01 	sts	0x0123, r23
     c32:	80 93 24 01 	sts	0x0124, r24
     c36:	90 93 25 01 	sts	0x0125, r25
		if (angle_dif > 0) {
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	a9 01       	movw	r20, r18
     c40:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	2c f4       	brge	.+10     	; 0xc52 <drive_to_point2+0x13c>
			dir = RIGHT;
     c48:	10 92 19 01 	sts	0x0119, r1
     c4c:	10 92 18 01 	sts	0x0118, r1
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <drive_to_point2+0x148>
		}
		else {
			dir = LEFT;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 19 01 	sts	0x0119, r25
     c5a:	80 93 18 01 	sts	0x0118, r24
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     c5e:	e8 94       	clt
     c60:	b7 f8       	bld	r11, 7
     c62:	c5 01       	movw	r24, r10
     c64:	b4 01       	movw	r22, r8
     c66:	90 58       	subi	r25, 0x80	; 128
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 ef       	ldi	r20, 0xF0	; 240
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     c74:	0e 94 ed 15 	call	0x2bda	; 0x2bda <exp>
     c78:	60 93 38 01 	sts	0x0138, r22
     c7c:	70 93 39 01 	sts	0x0139, r23
     c80:	80 93 3a 01 	sts	0x013A, r24
     c84:	90 93 3b 01 	sts	0x013B, r25
		//Set distance
		distance = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     c88:	2c 2d       	mov	r18, r12
     c8a:	3d 2d       	mov	r19, r13
     c8c:	4e 2d       	mov	r20, r14
     c8e:	5f 2d       	mov	r21, r15
     c90:	6c 2d       	mov	r22, r12
     c92:	7d 2d       	mov	r23, r13
     c94:	8e 2d       	mov	r24, r14
     c96:	9f 2d       	mov	r25, r15
     c98:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     c9c:	6b 01       	movw	r12, r22
     c9e:	7c 01       	movw	r14, r24
     ca0:	20 2f       	mov	r18, r16
     ca2:	31 2f       	mov	r19, r17
     ca4:	4d 2f       	mov	r20, r29
     ca6:	5c 2f       	mov	r21, r28
     ca8:	60 2f       	mov	r22, r16
     caa:	71 2f       	mov	r23, r17
     cac:	8d 2f       	mov	r24, r29
     cae:	9c 2f       	mov	r25, r28
     cb0:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
     cc0:	0e 94 80 18 	call	0x3100	; 0x3100 <sqrt>
     cc4:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__fixsfsi>
     cc8:	88 27       	eor	r24, r24
     cca:	77 fd       	sbrc	r23, 7
     ccc:	80 95       	com	r24
     cce:	98 2f       	mov	r25, r24
     cd0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     cd4:	60 93 1e 01 	sts	0x011E, r22
     cd8:	70 93 1f 01 	sts	0x011F, r23
     cdc:	80 93 20 01 	sts	0x0120, r24
     ce0:	90 93 21 01 	sts	0x0121, r25
		spd = ((float)distance)/70.0;
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4c e8       	ldi	r20, 0x8C	; 140
     cea:	52 e4       	ldi	r21, 0x42	; 66
     cec:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
     cf0:	60 93 1a 01 	sts	0x011A, r22
     cf4:	70 93 1b 01 	sts	0x011B, r23
     cf8:	80 93 1c 01 	sts	0x011C, r24
     cfc:	90 93 1d 01 	sts	0x011D, r25
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     d00:	0e 94 36 10 	call	0x206c	; 0x206c <m_usb_rx_char>
     d04:	80 93 bf 01 	sts	0x01BF, r24

			m_usb_rx_flush();  				//clear buffer
     d08:	0e 94 54 10 	call	0x20a8	; 0x20a8 <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     d0c:	80 91 bf 01 	lds	r24, 0x01BF
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f0       	breq	.+2      	; 0xd16 <drive_to_point2+0x200>
     d14:	62 c0       	rjmp	.+196    	; 0xdda <drive_to_point2+0x2c4>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     d16:	80 91 22 01 	lds	r24, 0x0122
     d1a:	90 91 23 01 	lds	r25, 0x0123
     d1e:	a0 91 24 01 	lds	r26, 0x0124
     d22:	b0 91 25 01 	lds	r27, 0x0125
     d26:	80 93 d6 01 	sts	0x01D6, r24
     d2a:	90 93 d7 01 	sts	0x01D7, r25
     d2e:	a0 93 d8 01 	sts	0x01D8, r26
     d32:	b0 93 d9 01 	sts	0x01D9, r27
				data[4] = deg*100.0;
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	48 ec       	ldi	r20, 0xC8	; 200
     d3c:	52 e4       	ldi	r21, 0x42	; 66
     d3e:	60 91 38 01 	lds	r22, 0x0138
     d42:	70 91 39 01 	lds	r23, 0x0139
     d46:	80 91 3a 01 	lds	r24, 0x013A
     d4a:	90 91 3b 01 	lds	r25, 0x013B
     d4e:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     d52:	60 93 da 01 	sts	0x01DA, r22
     d56:	70 93 db 01 	sts	0x01DB, r23
     d5a:	80 93 dc 01 	sts	0x01DC, r24
     d5e:	90 93 dd 01 	sts	0x01DD, r25
				data[5] = distance;
     d62:	80 91 1e 01 	lds	r24, 0x011E
     d66:	90 91 1f 01 	lds	r25, 0x011F
     d6a:	a0 91 20 01 	lds	r26, 0x0120
     d6e:	b0 91 21 01 	lds	r27, 0x0121
     d72:	80 93 de 01 	sts	0x01DE, r24
     d76:	90 93 df 01 	sts	0x01DF, r25
     d7a:	a0 93 e0 01 	sts	0x01E0, r26
     d7e:	b0 93 e1 01 	sts	0x01E1, r27
				data[6] = spd*100.0;
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	48 ec       	ldi	r20, 0xC8	; 200
     d88:	52 e4       	ldi	r21, 0x42	; 66
     d8a:	60 91 1a 01 	lds	r22, 0x011A
     d8e:	70 91 1b 01 	lds	r23, 0x011B
     d92:	80 91 1c 01 	lds	r24, 0x011C
     d96:	90 91 1d 01 	lds	r25, 0x011D
     d9a:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
     d9e:	60 93 e2 01 	sts	0x01E2, r22
     da2:	70 93 e3 01 	sts	0x01E3, r23
     da6:	80 93 e4 01 	sts	0x01E4, r24
     daa:	90 93 e5 01 	sts	0x01E5, r25
     dae:	ca ec       	ldi	r28, 0xCA	; 202
     db0:	d1 e0       	ldi	r29, 0x01	; 1
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     db2:	06 ee       	ldi	r16, 0xE6	; 230
     db4:	11 e0       	ldi	r17, 0x01	; 1
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     db6:	69 91       	ld	r22, Y+
     db8:	79 91       	ld	r23, Y+
     dba:	89 91       	ld	r24, Y+
     dbc:	99 91       	ld	r25, Y+
     dbe:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__fixsfsi>
     dc2:	cb 01       	movw	r24, r22
     dc4:	0e 94 8c 12 	call	0x2518	; 0x2518 <m_usb_tx_int>
					m_usb_tx_char('\t');
     dc8:	89 e0       	ldi	r24, 0x09	; 9
     dca:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     dce:	c0 17       	cp	r28, r16
     dd0:	d1 07       	cpc	r29, r17
     dd2:	89 f7       	brne	.-30     	; 0xdb6 <drive_to_point2+0x2a0>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     dd4:	8a e0       	ldi	r24, 0x0A	; 10
     dd6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     dda:	c0 90 00 01 	lds	r12, 0x0100
     dde:	d0 90 01 01 	lds	r13, 0x0101
     de2:	e0 90 02 01 	lds	r14, 0x0102
     de6:	f0 90 03 01 	lds	r15, 0x0103
     dea:	a7 01       	movw	r20, r14
     dec:	96 01       	movw	r18, r12
     dee:	60 91 1a 01 	lds	r22, 0x011A
     df2:	70 91 1b 01 	lds	r23, 0x011B
     df6:	80 91 1c 01 	lds	r24, 0x011C
     dfa:	90 91 1d 01 	lds	r25, 0x011D
     dfe:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__gesf2>
     e02:	18 16       	cp	r1, r24
     e04:	44 f4       	brge	.+16     	; 0xe16 <drive_to_point2+0x300>
     e06:	c0 92 1a 01 	sts	0x011A, r12
     e0a:	d0 92 1b 01 	sts	0x011B, r13
     e0e:	e0 92 1c 01 	sts	0x011C, r14
     e12:	f0 92 1d 01 	sts	0x011D, r15
		turn(dir, spd, deg);
     e16:	00 91 38 01 	lds	r16, 0x0138
     e1a:	10 91 39 01 	lds	r17, 0x0139
     e1e:	20 91 3a 01 	lds	r18, 0x013A
     e22:	30 91 3b 01 	lds	r19, 0x013B
     e26:	40 91 1a 01 	lds	r20, 0x011A
     e2a:	50 91 1b 01 	lds	r21, 0x011B
     e2e:	60 91 1c 01 	lds	r22, 0x011C
     e32:	70 91 1d 01 	lds	r23, 0x011D
     e36:	80 91 18 01 	lds	r24, 0x0118
     e3a:	90 91 19 01 	lds	r25, 0x0119
     e3e:	0e 94 b8 03 	call	0x770	; 0x770 <turn>
		
	//}
	if (distance < 10) {
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	60 91 1e 01 	lds	r22, 0x011E
     e4e:	70 91 1f 01 	lds	r23, 0x011F
     e52:	80 91 20 01 	lds	r24, 0x0120
     e56:	90 91 21 01 	lds	r25, 0x0121
     e5a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__cmpsf2>
     e5e:	88 23       	and	r24, r24
     e60:	84 f4       	brge	.+32     	; 0xe82 <drive_to_point2+0x36c>
		m_red(ON);
     e62:	6e 9a       	sbi	0x0d, 6	; 13
     e64:	76 98       	cbi	0x0e, 6	; 14
		reverse();
     e66:	0e 94 3b 04 	call	0x876	; 0x876 <reverse>
		OCR1B = 0;
     e6a:	10 92 8b 00 	sts	0x008B, r1
     e6e:	10 92 8a 00 	sts	0x008A, r1
		OCR3A = 0;
     e72:	10 92 99 00 	sts	0x0099, r1
     e76:	10 92 98 00 	sts	0x0098, r1
		state = 0;
     e7a:	10 92 55 01 	sts	0x0155, r1
     e7e:	10 92 54 01 	sts	0x0154, r1
	}
}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	7f 90       	pop	r7
     e9c:	6f 90       	pop	r6
     e9e:	5f 90       	pop	r5
     ea0:	4f 90       	pop	r4
     ea2:	08 95       	ret

00000ea4 <drive_to_goalA>:

void drive_to_goalA() {
	drive_to_point2(GOALBX,GOALBY);
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	83 e7       	ldi	r24, 0x73	; 115
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 8b 05 	call	0xb16	; 0xb16 <drive_to_point2>
     eb0:	08 95       	ret

00000eb2 <drive_to_goalB>:
}

void drive_to_goalB() {
	drive_to_point2(GOALAX,GOALAY);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	8d e8       	ldi	r24, 0x8D	; 141
     eb8:	9f ef       	ldi	r25, 0xFF	; 255
     eba:	0e 94 8b 05 	call	0xb16	; 0xb16 <drive_to_point2>
     ebe:	08 95       	ret

00000ec0 <shoot>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec0:	2f ef       	ldi	r18, 0xFF	; 255
     ec2:	83 ed       	ldi	r24, 0xD3	; 211
     ec4:	90 e3       	ldi	r25, 0x30	; 48
     ec6:	21 50       	subi	r18, 0x01	; 1
     ec8:	80 40       	sbci	r24, 0x00	; 0
     eca:	90 40       	sbci	r25, 0x00	; 0
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <shoot+0x6>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <shoot+0x10>
     ed0:	00 00       	nop
}

void shoot() {
	m_wait(1000);
	m_red(ON);
     ed2:	6e 9a       	sbi	0x0d, 6	; 13
     ed4:	76 98       	cbi	0x0e, 6	; 14
	set(PORTB,7);
     ed6:	2f 9a       	sbi	0x05, 7	; 5
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	81 ee       	ldi	r24, 0xE1	; 225
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	21 50       	subi	r18, 0x01	; 1
     ee0:	80 40       	sbci	r24, 0x00	; 0
     ee2:	90 40       	sbci	r25, 0x00	; 0
     ee4:	e1 f7       	brne	.-8      	; 0xede <shoot+0x1e>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <shoot+0x28>
     ee8:	00 00       	nop
	m_wait(100);
	clear(PORTB,7);
     eea:	2f 98       	cbi	0x05, 7	; 5
	m_red(OFF);
     eec:	6e 9a       	sbi	0x0d, 6	; 13
     eee:	76 9a       	sbi	0x0e, 6	; 14
     ef0:	08 95       	ret

00000ef2 <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     ef2:	10 92 8b 00 	sts	0x008B, r1
     ef6:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     efa:	10 92 99 00 	sts	0x0099, r1
     efe:	10 92 98 00 	sts	0x0098, r1
     f02:	08 95       	ret

00000f04 <comm_test>:
	//set(PORTB,2);
	//set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     f04:	5d 9a       	sbi	0x0b, 5	; 11
     f06:	2f ef       	ldi	r18, 0xFF	; 255
     f08:	89 e6       	ldi	r24, 0x69	; 105
     f0a:	98 e1       	ldi	r25, 0x18	; 24
     f0c:	21 50       	subi	r18, 0x01	; 1
     f0e:	80 40       	sbci	r24, 0x00	; 0
     f10:	90 40       	sbci	r25, 0x00	; 0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <comm_test+0x8>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <comm_test+0x12>
     f16:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     f18:	5d 98       	cbi	0x0b, 5	; 11
     f1a:	2f ef       	ldi	r18, 0xFF	; 255
     f1c:	89 e6       	ldi	r24, 0x69	; 105
     f1e:	98 e1       	ldi	r25, 0x18	; 24
     f20:	21 50       	subi	r18, 0x01	; 1
     f22:	80 40       	sbci	r24, 0x00	; 0
     f24:	90 40       	sbci	r25, 0x00	; 0
     f26:	e1 f7       	brne	.-8      	; 0xf20 <comm_test+0x1c>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <comm_test+0x26>
     f2a:	00 00       	nop
	m_wait(500);
	state = 0;
     f2c:	10 92 55 01 	sts	0x0155, r1
     f30:	10 92 54 01 	sts	0x0154, r1
     f34:	08 95       	ret

00000f36 <main>:

}

int main(void)
{
	set(DDRD,5);
     f36:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     f38:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     f3c:	4a e0       	ldi	r20, 0x0A	; 10
     f3e:	68 e0       	ldi	r22, 0x08	; 8
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     f46:	e1 e6       	ldi	r30, 0x61	; 97
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	80 83       	st	Z, r24
     f4e:	10 82       	st	Z, r1
	
	m_disableJTAG();
     f50:	85 bf       	out	0x35, r24	; 53
     f52:	85 bf       	out	0x35, r24	; 53
// 	
// 	set(TCCR0B, CS02);
// 	set(TCCR0B, CS01);
// 	set(TCCR0B, CS00);
// 	
	set(DDRB,7);
     f54:	27 9a       	sbi	0x04, 7	; 4
// 	OCR0A = 0xFF;
// 	OCR0B = 0xff;
// 	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     f56:	e1 e8       	ldi	r30, 0x81	; 129
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 61       	ori	r24, 0x10	; 16
     f5e:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     f60:	80 81       	ld	r24, Z
     f62:	88 60       	ori	r24, 0x08	; 8
     f64:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     f66:	a0 e8       	ldi	r26, 0x80	; 128
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	8c 91       	ld	r24, X
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     f70:	8c 91       	ld	r24, X
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     f76:	8c 91       	ld	r24, X
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     f7c:	8c 91       	ld	r24, X
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     f82:	80 81       	ld	r24, Z
     f84:	8b 7f       	andi	r24, 0xFB	; 251
     f86:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     f88:	80 81       	ld	r24, Z
     f8a:	8d 7f       	andi	r24, 0xFD	; 253
     f8c:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
	
	set(DDRB,6);
     f94:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	90 93 89 00 	sts	0x0089, r25
     f9e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     fa2:	10 92 8b 00 	sts	0x008B, r1
     fa6:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     faa:	e1 e9       	ldi	r30, 0x91	; 145
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	20 81       	ld	r18, Z
     fb0:	20 61       	ori	r18, 0x10	; 16
     fb2:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     fb4:	20 81       	ld	r18, Z
     fb6:	28 60       	ori	r18, 0x08	; 8
     fb8:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     fba:	a0 e9       	ldi	r26, 0x90	; 144
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	2c 91       	ld	r18, X
     fc0:	22 60       	ori	r18, 0x02	; 2
     fc2:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     fc4:	2c 91       	ld	r18, X
     fc6:	2e 7f       	andi	r18, 0xFE	; 254
     fc8:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     fca:	2c 91       	ld	r18, X
     fcc:	20 68       	ori	r18, 0x80	; 128
     fce:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     fd0:	2c 91       	ld	r18, X
     fd2:	2f 7b       	andi	r18, 0xBF	; 191
     fd4:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     fd6:	20 81       	ld	r18, Z
     fd8:	2b 7f       	andi	r18, 0xFB	; 251
     fda:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     fdc:	20 81       	ld	r18, Z
     fde:	2d 7f       	andi	r18, 0xFD	; 253
     fe0:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     fe2:	20 81       	ld	r18, Z
     fe4:	21 60       	ori	r18, 0x01	; 1
     fe6:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     fe8:	90 93 97 00 	sts	0x0097, r25
     fec:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     ff0:	10 92 99 00 	sts	0x0099, r1
     ff4:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     ff8:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     ffa:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     ffc:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     ffe:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
    1000:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
    1002:	78 94       	sei
	set(ADCSRA, ADIE);
    1004:	ca e7       	ldi	r28, 0x7A	; 122
    1006:	d0 e0       	ldi	r29, 0x00	; 0
    1008:	88 81       	ld	r24, Y
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	88 83       	st	Y, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
    100e:	ec e7       	ldi	r30, 0x7C	; 124
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 77       	andi	r24, 0x7F	; 127
    1016:	80 83       	st	Z, r24
	clear(ADMUX, REFS0);	//^
    1018:	80 81       	ld	r24, Z
    101a:	8f 7b       	andi	r24, 0xBF	; 191
    101c:	80 83       	st	Z, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
    101e:	88 81       	ld	r24, Y
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	88 83       	st	Y, r24
	set(ADCSRA, ADPS1);	//^
    1024:	88 81       	ld	r24, Y
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	88 83       	st	Y, r24
	set(ADCSRA, ADPS0);	//^
    102a:	88 81       	ld	r24, Y
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	88 83       	st	Y, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
    1030:	ee e7       	ldi	r30, 0x7E	; 126
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	80 83       	st	Z, r24
	set(DIDR0, ADC1D),
    103a:	80 81       	ld	r24, Z
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	80 83       	st	Z, r24
	set(DIDR0, ADC4D);
    1040:	80 81       	ld	r24, Z
    1042:	80 61       	ori	r24, 0x10	; 16
    1044:	80 83       	st	Z, r24
	set(DIDR0, ADC5D);
    1046:	80 81       	ld	r24, Z
    1048:	80 62       	ori	r24, 0x20	; 32
    104a:	80 83       	st	Z, r24
	set(DIDR0, ADC6D);
    104c:	80 81       	ld	r24, Z
    104e:	80 64       	ori	r24, 0x40	; 64
    1050:	80 83       	st	Z, r24
	set(DIDR0, ADC7D);
    1052:	80 81       	ld	r24, Z
    1054:	80 68       	ori	r24, 0x80	; 128
    1056:	80 83       	st	Z, r24
	set(DIDR2, ADC8D);
    1058:	ed e7       	ldi	r30, 0x7D	; 125
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	80 83       	st	Z, r24
	set(DIDR2, ADC9D);
    1062:	80 81       	ld	r24, Z
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	80 83       	st	Z, r24
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
    1068:	88 81       	ld	r24, Y
    106a:	80 62       	ori	r24, 0x20	; 32
    106c:	88 83       	st	Y, r24
	
	chooseInput(0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
    1076:	88 81       	ld	r24, Y
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	88 83       	st	Y, r24
	set(ADCSRA, ADSC);	//^
    107c:	88 81       	ld	r24, Y
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	88 83       	st	Y, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
    1082:	88 81       	ld	r24, Y
    1084:	80 61       	ori	r24, 0x10	; 16
    1086:	88 83       	st	Y, r24
	
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
    1088:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
    108a:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
    108c:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
    108e:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 2; //set state
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 55 01 	sts	0x0155, r25
    1098:	80 93 54 01 	sts	0x0154, r24
		m_usb_init(); // connect usb
		while(!m_usb_isconnected());  //wait for connection
	}

	//m_bus_init();
	m_wii_open();
    109c:	0e 94 af 13 	call	0x275e	; 0x275e <m_wii_open>
	m_usb_init();
    10a0:	0e 94 1d 10 	call	0x203a	; 0x203a <m_usb_init>
    {
		changedState = 0;
		
		//Detect weather we have the puck
		getADC();
		if (ADCarr[7] > 500) {
    10a4:	c0 e5       	ldi	r28, 0x50	; 80
    10a6:	d1 e0       	ldi	r29, 0x01	; 1
			set(PORTD,5);
			iHaveThePuck = 1;
    10a8:	77 24       	eor	r7, r7
    10aa:	73 94       	inc	r7
			break;
			
			case 69:
				set(PORTB,2);
				set(PORTB,3);
				OCR1B = OCR1A;
    10ac:	0f 2e       	mov	r0, r31
    10ae:	f8 e8       	ldi	r31, 0x88	; 136
    10b0:	af 2e       	mov	r10, r31
    10b2:	b1 2c       	mov	r11, r1
    10b4:	f0 2d       	mov	r31, r0
    10b6:	0f 2e       	mov	r0, r31
    10b8:	fa e8       	ldi	r31, 0x8A	; 138
    10ba:	cf 2e       	mov	r12, r31
    10bc:	d1 2c       	mov	r13, r1
    10be:	f0 2d       	mov	r31, r0
				OCR3A = ICR3;
    10c0:	0f 2e       	mov	r0, r31
    10c2:	f6 e9       	ldi	r31, 0x96	; 150
    10c4:	ef 2e       	mov	r14, r31
    10c6:	f1 2c       	mov	r15, r1
    10c8:	f0 2d       	mov	r31, r0
    10ca:	08 e9       	ldi	r16, 0x98	; 152
    10cc:	10 e0       	ldi	r17, 0x00	; 0
		//switch states
        switch (state) {
			
			case -2:
			getADC();
			if (ADCarr[0] > 500) {
    10ce:	0f 2e       	mov	r0, r31
    10d0:	f2 e4       	ldi	r31, 0x42	; 66
    10d2:	8f 2e       	mov	r8, r31
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	9f 2e       	mov	r9, r31
    10d8:	f0 2d       	mov	r31, r0
	m_usb_init();
	//local_init();

    while(1)
    {
		changedState = 0;
    10da:	10 92 56 01 	sts	0x0156, r1
		
		//Detect weather we have the puck
		getADC();
    10de:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
		if (ADCarr[7] > 500) {
    10e2:	88 81       	ld	r24, Y
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	85 3f       	cpi	r24, 0xF5	; 245
    10e8:	91 40       	sbci	r25, 0x01	; 1
    10ea:	24 f0       	brlt	.+8      	; 0x10f4 <main+0x1be>
			set(PORTD,5);
    10ec:	5d 9a       	sbi	0x0b, 5	; 11
			iHaveThePuck = 1;
    10ee:	70 92 57 01 	sts	0x0157, r7
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <main+0x1c4>
		} else {
			clear(PORTD,5);
    10f4:	5d 98       	cbi	0x0b, 5	; 11
			iHaveThePuck = 0;
    10f6:	10 92 57 01 	sts	0x0157, r1
// 			state = 2;
// 		}
	

		//switch states
        switch (state) {
    10fa:	80 91 54 01 	lds	r24, 0x0154
    10fe:	90 91 55 01 	lds	r25, 0x0155
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <main+0x1d4>
    1108:	60 c0       	rjmp	.+192    	; 0x11ca <main+0x294>
    110a:	ac f4       	brge	.+42     	; 0x1136 <main+0x200>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	21 f3       	breq	.-56     	; 0x10da <main+0x1a4>
    1112:	54 f4       	brge	.+20     	; 0x1128 <main+0x1f2>
    1114:	8f 3f       	cpi	r24, 0xFF	; 255
    1116:	ef ef       	ldi	r30, 0xFF	; 255
    1118:	9e 07       	cpc	r25, r30
    111a:	c1 f1       	breq	.+112    	; 0x118c <main+0x256>
    111c:	0c f0       	brlt	.+2      	; 0x1120 <main+0x1ea>
    111e:	45 c0       	rjmp	.+138    	; 0x11aa <main+0x274>
    1120:	02 96       	adiw	r24, 0x02	; 2
    1122:	09 f0       	breq	.+2      	; 0x1126 <main+0x1f0>
    1124:	7e c0       	rjmp	.+252    	; 0x1222 <main+0x2ec>
    1126:	24 c0       	rjmp	.+72     	; 0x1170 <main+0x23a>
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <main+0x1fa>
    112e:	43 c0       	rjmp	.+134    	; 0x11b6 <main+0x280>
    1130:	0c f0       	brlt	.+2      	; 0x1134 <main+0x1fe>
    1132:	44 c0       	rjmp	.+136    	; 0x11bc <main+0x286>
    1134:	3d c0       	rjmp	.+122    	; 0x11b0 <main+0x27a>
    1136:	81 3a       	cpi	r24, 0xA1	; 161
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <main+0x208>
    113c:	57 c0       	rjmp	.+174    	; 0x11ec <main+0x2b6>
    113e:	6c f4       	brge	.+26     	; 0x115a <main+0x224>
    1140:	86 34       	cpi	r24, 0x46	; 70
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <main+0x212>
    1146:	6a c0       	rjmp	.+212    	; 0x121c <main+0x2e6>
    1148:	80 3a       	cpi	r24, 0xA0	; 160
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <main+0x21a>
    114e:	4b c0       	rjmp	.+150    	; 0x11e6 <main+0x2b0>
    1150:	85 34       	cpi	r24, 0x45	; 69
    1152:	91 05       	cpc	r25, r1
    1154:	09 f0       	breq	.+2      	; 0x1158 <main+0x222>
    1156:	65 c0       	rjmp	.+202    	; 0x1222 <main+0x2ec>
    1158:	52 c0       	rjmp	.+164    	; 0x11fe <main+0x2c8>
    115a:	83 3a       	cpi	r24, 0xA3	; 163
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <main+0x22c>
    1160:	4b c0       	rjmp	.+150    	; 0x11f8 <main+0x2c2>
    1162:	0c f4       	brge	.+2      	; 0x1166 <main+0x230>
    1164:	46 c0       	rjmp	.+140    	; 0x11f2 <main+0x2bc>
    1166:	84 3a       	cpi	r24, 0xA4	; 164
    1168:	91 05       	cpc	r25, r1
    116a:	09 f0       	breq	.+2      	; 0x116e <main+0x238>
    116c:	5a c0       	rjmp	.+180    	; 0x1222 <main+0x2ec>
    116e:	38 c0       	rjmp	.+112    	; 0x11e0 <main+0x2aa>
			
			case -2:
			getADC();
    1170:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
			if (ADCarr[0] > 500) {
    1174:	f4 01       	movw	r30, r8
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	85 3f       	cpi	r24, 0xF5	; 245
    117c:	91 40       	sbci	r25, 0x01	; 1
    117e:	1c f0       	brlt	.+6      	; 0x1186 <main+0x250>
				m_green(ON);
    1180:	6a 9a       	sbi	0x0d, 2	; 13
    1182:	72 98       	cbi	0x0e, 2	; 14
    1184:	aa cf       	rjmp	.-172    	; 0x10da <main+0x1a4>
			}
			else {m_green(OFF)}
    1186:	6a 9a       	sbi	0x0d, 2	; 13
    1188:	72 9a       	sbi	0x0e, 2	; 14
    118a:	a7 cf       	rjmp	.-178    	; 0x10da <main+0x1a4>
			break;
			
			case -1: //test Limit switches
				//m_green(ON);
				if (check(PINB,1)) {
    118c:	19 9b       	sbis	0x03, 1	; 3
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <main+0x260>
					
					m_green(ON);
    1190:	6a 9a       	sbi	0x0d, 2	; 13
    1192:	72 98       	cbi	0x0e, 2	; 14
    1194:	a2 cf       	rjmp	.-188    	; 0x10da <main+0x1a4>
				}
				
				else if (check(PINB,0)) {
    1196:	18 9b       	sbis	0x03, 0	; 3
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <main+0x26a>
					
					m_red(ON);
    119a:	6e 9a       	sbi	0x0d, 6	; 13
    119c:	76 98       	cbi	0x0e, 6	; 14
    119e:	9d cf       	rjmp	.-198    	; 0x10da <main+0x1a4>
				}
				
				else {
					m_red(OFF);
    11a0:	6e 9a       	sbi	0x0d, 6	; 13
    11a2:	76 9a       	sbi	0x0e, 6	; 14
					m_green(OFF);
    11a4:	6a 9a       	sbi	0x0d, 2	; 13
    11a6:	72 9a       	sbi	0x0e, 2	; 14
    11a8:	98 cf       	rjmp	.-208    	; 0x10da <main+0x1a4>
				
			break;

			case 0:
			//drive_to_point2(-100,0);
			game_pause();
    11aa:	0e 94 79 07 	call	0xef2	; 0xef2 <game_pause>
			break;
    11ae:	95 cf       	rjmp	.-214    	; 0x10da <main+0x1a4>
			findPuck();
			break;
			
			case 2:
			//m_red(ON);
			drive_to_puck();
    11b0:	0e 94 4e 04 	call	0x89c	; 0x89c <drive_to_puck>
			break;
    11b4:	92 cf       	rjmp	.-220    	; 0x10da <main+0x1a4>
			
			case 3:
			drive_to_goalA();
    11b6:	0e 94 52 07 	call	0xea4	; 0xea4 <drive_to_goalA>
			break;
    11ba:	8f cf       	rjmp	.-226    	; 0x10da <main+0x1a4>
			
			case 4:
			shoot();
    11bc:	0e 94 60 07 	call	0xec0	; 0xec0 <shoot>
			state =  0;
    11c0:	10 92 55 01 	sts	0x0155, r1
    11c4:	10 92 54 01 	sts	0x0154, r1
			break;	
    11c8:	88 cf       	rjmp	.-240    	; 0x10da <main+0x1a4>
			
			case 5:
			getADC();
    11ca:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
			if (ADCarr[7] > 500) {
    11ce:	88 81       	ld	r24, Y
    11d0:	99 81       	ldd	r25, Y+1	; 0x01
    11d2:	85 3f       	cpi	r24, 0xF5	; 245
    11d4:	91 40       	sbci	r25, 0x01	; 1
    11d6:	14 f0       	brlt	.+4      	; 0x11dc <main+0x2a6>
				set(PORTD,5);
    11d8:	5d 9a       	sbi	0x0b, 5	; 11
    11da:	7f cf       	rjmp	.-258    	; 0x10da <main+0x1a4>
			} else {
				clear(PORTD,5);
    11dc:	5d 98       	cbi	0x0b, 5	; 11
    11de:	7d cf       	rjmp	.-262    	; 0x10da <main+0x1a4>
			}
			break;
			
			case 0xA4:
			game_pause();
    11e0:	0e 94 79 07 	call	0xef2	; 0xef2 <game_pause>
			break;
    11e4:	7a cf       	rjmp	.-268    	; 0x10da <main+0x1a4>
			
			case 0xA0:
			comm_test();
    11e6:	0e 94 82 07 	call	0xf04	; 0xf04 <comm_test>
			break;
    11ea:	77 cf       	rjmp	.-274    	; 0x10da <main+0x1a4>
			
			case 0xA1:
			drive_to_goalA();
    11ec:	0e 94 52 07 	call	0xea4	; 0xea4 <drive_to_goalA>
			break;
    11f0:	74 cf       	rjmp	.-280    	; 0x10da <main+0x1a4>
			
			case 0xA2:
			drive_to_goalA();
    11f2:	0e 94 52 07 	call	0xea4	; 0xea4 <drive_to_goalA>
			break;
    11f6:	71 cf       	rjmp	.-286    	; 0x10da <main+0x1a4>
			
			case 0xA3:
			drive_to_goalB();
    11f8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <drive_to_goalB>
			break;
    11fc:	6e cf       	rjmp	.-292    	; 0x10da <main+0x1a4>
			
			case 69:
				set(PORTB,2);
    11fe:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
    1200:	2b 9a       	sbi	0x05, 3	; 5
				OCR1B = OCR1A;
    1202:	f5 01       	movw	r30, r10
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	f6 01       	movw	r30, r12
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
				OCR3A = ICR3;
    120e:	f7 01       	movw	r30, r14
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	f8 01       	movw	r30, r16
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
				break;
    121a:	5f cf       	rjmp	.-322    	; 0x10da <main+0x1a4>
				
			case 70:
				reportADC();
    121c:	0e 94 bb 02 	call	0x576	; 0x576 <reportADC>
				break;
    1220:	5c cf       	rjmp	.-328    	; 0x10da <main+0x1a4>
			
			default:
			game_pause();
    1222:	0e 94 79 07 	call	0xef2	; 0xef2 <game_pause>
			break;
    1226:	59 cf       	rjmp	.-334    	; 0x10da <main+0x1a4>

00001228 <__vector_3>:
        
    }
}


ISR(INT2_vect)  {
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
	cli();
    124a:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
    124c:	6a e0       	ldi	r22, 0x0A	; 10
    124e:	80 ec       	ldi	r24, 0xC0	; 192
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <m_rf_read>
	sei();
    1256:	78 94       	sei
	state=buffer[0];
    1258:	80 91 c0 01 	lds	r24, 0x01C0
    125c:	80 93 54 01 	sts	0x0154, r24
    1260:	10 92 55 01 	sts	0x0155, r1
	changedState = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 56 01 	sts	0x0156, r24
}
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_29>:

ISR(ADC_vect) {
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
	cli();
    129a:	f8 94       	cli
	conversion = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	90 93 27 01 	sts	0x0127, r25
    12a4:	80 93 26 01 	sts	0x0126, r24
	sei();
    12a8:	78 94       	sei
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    12b8:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    12ba:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    12bc:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    12be:	8c e0       	ldi	r24, 0x0C	; 12
    12c0:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    12c4:	e9 e6       	ldi	r30, 0x69	; 105
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 62       	ori	r24, 0x20	; 32
    12cc:	80 83       	st	Z, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7e       	andi	r24, 0xEF	; 239
    12d2:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    12d4:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    12d6:	78 94       	sei
    12d8:	08 95       	ret

000012da <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	8c 01       	movw	r16, r24
    12e4:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
    12e6:	8e e9       	ldi	r24, 0x9E	; 158
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 1a 13 	call	0x2634	; 0x2634 <m_wii_read>
	x[0] = blobs[0];
    12ee:	80 91 9e 01 	lds	r24, 0x019E
    12f2:	90 91 9f 01 	lds	r25, 0x019F
    12f6:	f8 01       	movw	r30, r16
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	80 83       	st	Z, r24
	x[1] = blobs[3];
    12fc:	80 91 a4 01 	lds	r24, 0x01A4
    1300:	90 91 a5 01 	lds	r25, 0x01A5
    1304:	93 83       	std	Z+3, r25	; 0x03
    1306:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
    1308:	80 91 aa 01 	lds	r24, 0x01AA
    130c:	90 91 ab 01 	lds	r25, 0x01AB
    1310:	95 83       	std	Z+5, r25	; 0x05
    1312:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
    1314:	80 91 b0 01 	lds	r24, 0x01B0
    1318:	90 91 b1 01 	lds	r25, 0x01B1
    131c:	97 83       	std	Z+7, r25	; 0x07
    131e:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
    1320:	80 91 a0 01 	lds	r24, 0x01A0
    1324:	90 91 a1 01 	lds	r25, 0x01A1
    1328:	99 83       	std	Y+1, r25	; 0x01
    132a:	88 83       	st	Y, r24
	y[1] = blobs[4];
    132c:	80 91 a6 01 	lds	r24, 0x01A6
    1330:	90 91 a7 01 	lds	r25, 0x01A7
    1334:	9b 83       	std	Y+3, r25	; 0x03
    1336:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
    1338:	80 91 ac 01 	lds	r24, 0x01AC
    133c:	90 91 ad 01 	lds	r25, 0x01AD
    1340:	9d 83       	std	Y+5, r25	; 0x05
    1342:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
    1344:	80 91 b2 01 	lds	r24, 0x01B2
    1348:	90 91 b3 01 	lds	r25, 0x01B3
    134c:	9f 83       	std	Y+7, r25	; 0x07
    134e:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <determine_blobs>:

unsigned char determine_blobs() {
    135c:	2f 92       	push	r2
    135e:	3f 92       	push	r3
    1360:	4f 92       	push	r4
    1362:	5f 92       	push	r5
    1364:	6f 92       	push	r6
    1366:	7f 92       	push	r7
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	6c 97       	sbiw	r28, 0x1c	; 28
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
    1390:	10 92 66 01 	sts	0x0166, r1
    1394:	10 92 67 01 	sts	0x0167, r1
    1398:	10 92 68 01 	sts	0x0168, r1
    139c:	10 92 69 01 	sts	0x0169, r1
	distmin = 30000;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e6       	ldi	r25, 0x60	; 96
    13a4:	aa ee       	ldi	r26, 0xEA	; 234
    13a6:	b6 e4       	ldi	r27, 0x46	; 70
    13a8:	80 93 04 01 	sts	0x0104, r24
    13ac:	90 93 05 01 	sts	0x0105, r25
    13b0:	a0 93 06 01 	sts	0x0106, r26
    13b4:	b0 93 07 01 	sts	0x0107, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    13b8:	0f 2e       	mov	r0, r31
    13ba:	f8 e7       	ldi	r31, 0x78	; 120
    13bc:	cf 2e       	mov	r12, r31
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	df 2e       	mov	r13, r31
    13c2:	f0 2d       	mov	r31, r0
    13c4:	0a e7       	ldi	r16, 0x7A	; 122
    13c6:	11 e0       	ldi	r17, 0x01	; 1
    13c8:	0f 2e       	mov	r0, r31
    13ca:	fc e7       	ldi	r31, 0x7C	; 124
    13cc:	ef 2e       	mov	r14, r31
    13ce:	f1 e0       	ldi	r31, 0x01	; 1
    13d0:	ff 2e       	mov	r15, r31
    13d2:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
    13d4:	6e e6       	ldi	r22, 0x6E	; 110
    13d6:	71 e0       	ldi	r23, 0x01	; 1
    13d8:	86 e7       	ldi	r24, 0x76	; 118
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 6d 09 	call	0x12da	; 0x12da <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    13e0:	80 91 76 01 	lds	r24, 0x0176
    13e4:	90 91 77 01 	lds	r25, 0x0177
    13e8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ea:	93 40       	sbci	r25, 0x03	; 3
    13ec:	98 f7       	brcc	.-26     	; 0x13d4 <determine_blobs+0x78>
    13ee:	f6 01       	movw	r30, r12
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	8f 3f       	cpi	r24, 0xFF	; 255
    13f6:	93 40       	sbci	r25, 0x03	; 3
    13f8:	68 f7       	brcc	.-38     	; 0x13d4 <determine_blobs+0x78>
    13fa:	f8 01       	movw	r30, r16
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	93 40       	sbci	r25, 0x03	; 3
    1404:	38 f7       	brcc	.-50     	; 0x13d4 <determine_blobs+0x78>
    1406:	f7 01       	movw	r30, r14
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	93 40       	sbci	r25, 0x03	; 3
    1410:	08 f7       	brcc	.-62     	; 0x13d4 <determine_blobs+0x78>
    1412:	80 90 6a 01 	lds	r8, 0x016A
    1416:	90 90 6b 01 	lds	r9, 0x016B
    141a:	a0 90 6c 01 	lds	r10, 0x016C
    141e:	b0 90 6d 01 	lds	r11, 0x016D
    1422:	20 91 66 01 	lds	r18, 0x0166
    1426:	29 83       	std	Y+1, r18	; 0x01
    1428:	30 91 67 01 	lds	r19, 0x0167
    142c:	3a 83       	std	Y+2, r19	; 0x02
    142e:	40 91 68 01 	lds	r20, 0x0168
    1432:	4b 83       	std	Y+3, r20	; 0x03
    1434:	50 91 69 01 	lds	r21, 0x0169
    1438:	5c 83       	std	Y+4, r21	; 0x04
    143a:	60 91 60 01 	lds	r22, 0x0160
    143e:	6b 8b       	std	Y+19, r22	; 0x13
    1440:	70 91 61 01 	lds	r23, 0x0161
    1444:	7c 8b       	std	Y+20, r23	; 0x14
    1446:	80 91 5e 01 	lds	r24, 0x015E
    144a:	89 8b       	std	Y+17, r24	; 0x11
    144c:	90 91 5f 01 	lds	r25, 0x015F
    1450:	9a 8b       	std	Y+18, r25	; 0x12
    1452:	e0 91 62 01 	lds	r30, 0x0162
    1456:	ed 8b       	std	Y+21, r30	; 0x15
    1458:	f0 91 63 01 	lds	r31, 0x0163
    145c:	fe 8b       	std	Y+22, r31	; 0x16
    145e:	20 91 64 01 	lds	r18, 0x0164
    1462:	2f 8b       	std	Y+23, r18	; 0x17
    1464:	30 91 65 01 	lds	r19, 0x0165
    1468:	38 8f       	std	Y+24, r19	; 0x18
    146a:	40 91 04 01 	lds	r20, 0x0104
    146e:	4d 83       	std	Y+5, r20	; 0x05
    1470:	50 91 05 01 	lds	r21, 0x0105
    1474:	5e 83       	std	Y+6, r21	; 0x06
    1476:	20 90 06 01 	lds	r2, 0x0106
    147a:	30 90 07 01 	lds	r3, 0x0107
    147e:	60 91 5c 01 	lds	r22, 0x015C
    1482:	69 8f       	std	Y+25, r22	; 0x19
    1484:	70 91 5d 01 	lds	r23, 0x015D
    1488:	7a 8f       	std	Y+26, r23	; 0x1a
    148a:	80 91 5a 01 	lds	r24, 0x015A
    148e:	90 91 5b 01 	lds	r25, 0x015B
    1492:	98 8b       	std	Y+16, r25	; 0x10
    1494:	8f 87       	std	Y+15, r24	; 0x0f
    1496:	18 86       	std	Y+8, r1	; 0x08
    1498:	1f 82       	std	Y+7, r1	; 0x07
    149a:	c1 2c       	mov	r12, r1
    149c:	d1 2c       	mov	r13, r1
    149e:	b9 c0       	rjmp	.+370    	; 0x1612 <determine_blobs+0x2b6>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
    14a0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    14a2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    14a4:	e4 15       	cp	r30, r4
    14a6:	f5 05       	cpc	r31, r5
    14a8:	09 f4       	brne	.+2      	; 0x14ac <determine_blobs+0x150>
    14aa:	9c c0       	rjmp	.+312    	; 0x15e4 <determine_blobs+0x288>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    14ac:	e9 85       	ldd	r30, Y+9	; 0x09
    14ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    14bc:	6b 01       	movw	r12, r22
    14be:	7c 01       	movw	r14, r24
    14c0:	f3 01       	movw	r30, r6
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	c7 01       	movw	r24, r14
    14d4:	b6 01       	movw	r22, r12
    14d6:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    14da:	c6 2e       	mov	r12, r22
    14dc:	d7 2e       	mov	r13, r23
    14de:	e8 2e       	mov	r14, r24
    14e0:	f9 2e       	mov	r15, r25
    14e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    14f2:	4b 01       	movw	r8, r22
    14f4:	5c 01       	movw	r10, r24
    14f6:	f8 01       	movw	r30, r16
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1510:	86 2e       	mov	r8, r22
    1512:	97 2e       	mov	r9, r23
    1514:	a8 2e       	mov	r10, r24
    1516:	b9 2e       	mov	r11, r25
    1518:	2c 2d       	mov	r18, r12
    151a:	3d 2d       	mov	r19, r13
    151c:	4e 2d       	mov	r20, r14
    151e:	5f 2d       	mov	r21, r15
    1520:	6c 2d       	mov	r22, r12
    1522:	7d 2d       	mov	r23, r13
    1524:	8e 2d       	mov	r24, r14
    1526:	9f 2d       	mov	r25, r15
    1528:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    152c:	6b 01       	movw	r12, r22
    152e:	7c 01       	movw	r14, r24
    1530:	28 2d       	mov	r18, r8
    1532:	39 2d       	mov	r19, r9
    1534:	4a 2d       	mov	r20, r10
    1536:	5b 2d       	mov	r21, r11
    1538:	68 2d       	mov	r22, r8
    153a:	79 2d       	mov	r23, r9
    153c:	8a 2d       	mov	r24, r10
    153e:	9b 2d       	mov	r25, r11
    1540:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	c7 01       	movw	r24, r14
    154a:	b6 01       	movw	r22, r12
    154c:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1550:	0e 94 80 18 	call	0x3100	; 0x3100 <sqrt>
    1554:	86 2e       	mov	r8, r22
    1556:	97 2e       	mov	r9, r23
    1558:	a8 2e       	mov	r10, r24
    155a:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
    155c:	79 81       	ldd	r23, Y+1	; 0x01
    155e:	6a 81       	ldd	r22, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	27 2f       	mov	r18, r23
    1566:	36 2f       	mov	r19, r22
    1568:	49 2f       	mov	r20, r25
    156a:	58 2f       	mov	r21, r24
    156c:	68 2d       	mov	r22, r8
    156e:	79 2d       	mov	r23, r9
    1570:	8a 2d       	mov	r24, r10
    1572:	9b 2d       	mov	r25, r11
    1574:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__gesf2>
    1578:	18 16       	cp	r1, r24
    157a:	d4 f4       	brge	.+52     	; 0x15b0 <determine_blobs+0x254>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	68 2d       	mov	r22, r8
    1586:	79 2d       	mov	r23, r9
    1588:	8a 2d       	mov	r24, r10
    158a:	9b 2d       	mov	r25, r11
    158c:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1590:	6d 8b       	std	Y+21, r22	; 0x15
    1592:	7e 8b       	std	Y+22, r23	; 0x16
    1594:	8f 8b       	std	Y+23, r24	; 0x17
    1596:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
    1598:	fb 8d       	ldd	r31, Y+27	; 0x1b
    159a:	f9 8b       	std	Y+17, r31	; 0x11
    159c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    159e:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
    15a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    15a2:	3b 8b       	std	Y+19, r19	; 0x13
    15a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    15a6:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
    15a8:	89 82       	std	Y+1, r8	; 0x01
    15aa:	9a 82       	std	Y+2, r9	; 0x02
    15ac:	ab 82       	std	Y+3, r10	; 0x03
    15ae:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
    15b0:	7d 81       	ldd	r23, Y+5	; 0x05
    15b2:	6e 81       	ldd	r22, Y+6	; 0x06
    15b4:	27 2f       	mov	r18, r23
    15b6:	36 2f       	mov	r19, r22
    15b8:	42 2d       	mov	r20, r2
    15ba:	53 2d       	mov	r21, r3
    15bc:	68 2d       	mov	r22, r8
    15be:	79 2d       	mov	r23, r9
    15c0:	8a 2d       	mov	r24, r10
    15c2:	9b 2d       	mov	r25, r11
    15c4:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__cmpsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	64 f4       	brge	.+24     	; 0x15e4 <determine_blobs+0x288>
						distmin = dist;
						close1 = i;
						close2 = j;
    15cc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    15ce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    15d0:	78 8b       	std	Y+16, r23	; 0x10
    15d2:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    15d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    15d6:	79 8f       	std	Y+25, r23	; 0x19
    15d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15da:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
    15dc:	8d 82       	std	Y+5, r8	; 0x05
    15de:	9e 82       	std	Y+6, r9	; 0x06
    15e0:	2a 2c       	mov	r2, r10
    15e2:	3b 2c       	mov	r3, r11
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	69 0e       	add	r6, r25
    15e8:	71 1c       	adc	r7, r1
    15ea:	0e 5f       	subi	r16, 0xFE	; 254
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
    15ee:	eb 8d       	ldd	r30, Y+27	; 0x1b
    15f0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    15f2:	31 96       	adiw	r30, 0x01	; 1
    15f4:	fc 8f       	std	Y+28, r31	; 0x1c
    15f6:	eb 8f       	std	Y+27, r30	; 0x1b
    15f8:	34 97       	sbiw	r30, 0x04	; 4
    15fa:	09 f0       	breq	.+2      	; 0x15fe <determine_blobs+0x2a2>
    15fc:	51 cf       	rjmp	.-350    	; 0x14a0 <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
    15fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1600:	38 85       	ldd	r19, Y+8	; 0x08
    1602:	2f 5f       	subi	r18, 0xFF	; 255
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	38 87       	std	Y+8, r19	; 0x08
    1608:	2f 83       	std	Y+7, r18	; 0x07
    160a:	69 01       	movw	r12, r18
    160c:	24 30       	cpi	r18, 0x04	; 4
    160e:	31 05       	cpc	r19, r1
    1610:	39 f1       	breq	.+78     	; 0x1660 <determine_blobs+0x304>
				for (int j = i; j < 4; j++) {
    1612:	34 e0       	ldi	r19, 0x04	; 4
    1614:	c3 16       	cp	r12, r19
    1616:	d1 04       	cpc	r13, r1
    1618:	94 f7       	brge	.-28     	; 0x15fe <determine_blobs+0x2a2>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    161a:	86 01       	movw	r16, r12
    161c:	0f 5f       	subi	r16, 0xFF	; 255
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
    1620:	00 0f       	add	r16, r16
    1622:	11 1f       	adc	r17, r17
    1624:	0f 2e       	mov	r0, r31
    1626:	f6 e7       	ldi	r31, 0x76	; 118
    1628:	ef 2e       	mov	r14, r31
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	ff 2e       	mov	r15, r31
    162e:	f0 2d       	mov	r31, r0
    1630:	e0 0e       	add	r14, r16
    1632:	f1 1e       	adc	r15, r17
    1634:	02 59       	subi	r16, 0x92	; 146
    1636:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    1638:	c6 01       	movw	r24, r12
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	ac 01       	movw	r20, r24
    1640:	4a 58       	subi	r20, 0x8A	; 138
    1642:	5e 4f       	sbci	r21, 0xFE	; 254
    1644:	5a 87       	std	Y+10, r21	; 0x0a
    1646:	49 87       	std	Y+9, r20	; 0x09
    1648:	bc 01       	movw	r22, r24
    164a:	62 59       	subi	r22, 0x92	; 146
    164c:	7e 4f       	sbci	r23, 0xFE	; 254
    164e:	7c 87       	std	Y+12, r23	; 0x0c
    1650:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    1652:	cd 86       	std	Y+13, r12	; 0x0d
    1654:	de 86       	std	Y+14, r13	; 0x0e
    1656:	dc 8e       	std	Y+28, r13	; 0x1c
    1658:	cb 8e       	std	Y+27, r12	; 0x1b
    165a:	26 01       	movw	r4, r12
    165c:	37 01       	movw	r6, r14
    165e:	c7 cf       	rjmp	.-114    	; 0x15ee <determine_blobs+0x292>
    1660:	88 2d       	mov	r24, r8
    1662:	99 2d       	mov	r25, r9
    1664:	aa 2d       	mov	r26, r10
    1666:	bb 2d       	mov	r27, r11
    1668:	80 93 6a 01 	sts	0x016A, r24
    166c:	90 93 6b 01 	sts	0x016B, r25
    1670:	a0 93 6c 01 	sts	0x016C, r26
    1674:	b0 93 6d 01 	sts	0x016D, r27
    1678:	59 81       	ldd	r21, Y+1	; 0x01
    167a:	4a 81       	ldd	r20, Y+2	; 0x02
    167c:	3b 81       	ldd	r19, Y+3	; 0x03
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	85 2f       	mov	r24, r21
    1682:	94 2f       	mov	r25, r20
    1684:	a3 2f       	mov	r26, r19
    1686:	b2 2f       	mov	r27, r18
    1688:	80 93 66 01 	sts	0x0166, r24
    168c:	90 93 67 01 	sts	0x0167, r25
    1690:	a0 93 68 01 	sts	0x0168, r26
    1694:	b0 93 69 01 	sts	0x0169, r27
    1698:	7b 89       	ldd	r23, Y+19	; 0x13
    169a:	70 93 60 01 	sts	0x0160, r23
    169e:	8c 89       	ldd	r24, Y+20	; 0x14
    16a0:	80 93 61 01 	sts	0x0161, r24
    16a4:	99 89       	ldd	r25, Y+17	; 0x11
    16a6:	90 93 5e 01 	sts	0x015E, r25
    16aa:	ea 89       	ldd	r30, Y+18	; 0x12
    16ac:	e0 93 5f 01 	sts	0x015F, r30
    16b0:	5d 89       	ldd	r21, Y+21	; 0x15
    16b2:	4e 89       	ldd	r20, Y+22	; 0x16
    16b4:	3f 89       	ldd	r19, Y+23	; 0x17
    16b6:	28 8d       	ldd	r18, Y+24	; 0x18
    16b8:	85 2f       	mov	r24, r21
    16ba:	94 2f       	mov	r25, r20
    16bc:	a3 2f       	mov	r26, r19
    16be:	b2 2f       	mov	r27, r18
    16c0:	80 93 62 01 	sts	0x0162, r24
    16c4:	90 93 63 01 	sts	0x0163, r25
    16c8:	a0 93 64 01 	sts	0x0164, r26
    16cc:	b0 93 65 01 	sts	0x0165, r27
    16d0:	5d 81       	ldd	r21, Y+5	; 0x05
    16d2:	4e 81       	ldd	r20, Y+6	; 0x06
    16d4:	85 2f       	mov	r24, r21
    16d6:	94 2f       	mov	r25, r20
    16d8:	a2 2d       	mov	r26, r2
    16da:	b3 2d       	mov	r27, r3
    16dc:	80 93 04 01 	sts	0x0104, r24
    16e0:	90 93 05 01 	sts	0x0105, r25
    16e4:	a0 93 06 01 	sts	0x0106, r26
    16e8:	b0 93 07 01 	sts	0x0107, r27
    16ec:	f9 8d       	ldd	r31, Y+25	; 0x19
    16ee:	f0 93 5c 01 	sts	0x015C, r31
    16f2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16f4:	20 93 5d 01 	sts	0x015D, r18
    16f8:	3f 85       	ldd	r19, Y+15	; 0x0f
    16fa:	30 93 5a 01 	sts	0x015A, r19
    16fe:	48 89       	ldd	r20, Y+16	; 0x10
    1700:	40 93 5b 01 	sts	0x015B, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
    1704:	80 91 60 01 	lds	r24, 0x0160
    1708:	90 91 61 01 	lds	r25, 0x0161
    170c:	20 91 5c 01 	lds	r18, 0x015C
    1710:	30 91 5d 01 	lds	r19, 0x015D
    1714:	82 17       	cp	r24, r18
    1716:	93 07       	cpc	r25, r19
    1718:	19 f5       	brne	.+70     	; 0x1760 <determine_blobs+0x404>
				top = far1;
    171a:	90 93 9d 01 	sts	0x019D, r25
    171e:	80 93 9c 01 	sts	0x019C, r24
				bottom = far2;
    1722:	40 91 5e 01 	lds	r20, 0x015E
    1726:	50 91 5f 01 	lds	r21, 0x015F
    172a:	50 93 9b 01 	sts	0x019B, r21
    172e:	40 93 9a 01 	sts	0x019A, r20
				right = close2;
    1732:	20 91 5a 01 	lds	r18, 0x015A
    1736:	30 91 5b 01 	lds	r19, 0x015B
    173a:	30 93 97 01 	sts	0x0197, r19
    173e:	20 93 96 01 	sts	0x0196, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
    1742:	69 e0       	ldi	r22, 0x09	; 9
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	fb 01       	movw	r30, r22
    1748:	e8 1b       	sub	r30, r24
    174a:	f9 0b       	sbc	r31, r25
    174c:	cf 01       	movw	r24, r30
    174e:	84 1b       	sub	r24, r20
    1750:	95 0b       	sbc	r25, r21
    1752:	82 1b       	sub	r24, r18
    1754:	93 0b       	sbc	r25, r19
    1756:	90 93 99 01 	sts	0x0199, r25
    175a:	80 93 98 01 	sts	0x0198, r24
    175e:	66 c0       	rjmp	.+204    	; 0x182c <determine_blobs+0x4d0>
			}
			else if (far1 == close2) {
    1760:	4f 85       	ldd	r20, Y+15	; 0x0f
    1762:	58 89       	ldd	r21, Y+16	; 0x10
    1764:	84 17       	cp	r24, r20
    1766:	95 07       	cpc	r25, r21
    1768:	f9 f4       	brne	.+62     	; 0x17a8 <determine_blobs+0x44c>
				top = far1;
    176a:	90 93 9d 01 	sts	0x019D, r25
    176e:	80 93 9c 01 	sts	0x019C, r24
				bottom = far2;
    1772:	40 91 5e 01 	lds	r20, 0x015E
    1776:	50 91 5f 01 	lds	r21, 0x015F
    177a:	50 93 9b 01 	sts	0x019B, r21
    177e:	40 93 9a 01 	sts	0x019A, r20
				right = close1;
    1782:	30 93 97 01 	sts	0x0197, r19
    1786:	20 93 96 01 	sts	0x0196, r18
				left = 9 - top - bottom - right;
    178a:	69 e0       	ldi	r22, 0x09	; 9
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	fb 01       	movw	r30, r22
    1790:	e8 1b       	sub	r30, r24
    1792:	f9 0b       	sbc	r31, r25
    1794:	cf 01       	movw	r24, r30
    1796:	84 1b       	sub	r24, r20
    1798:	95 0b       	sbc	r25, r21
    179a:	82 1b       	sub	r24, r18
    179c:	93 0b       	sbc	r25, r19
    179e:	90 93 99 01 	sts	0x0199, r25
    17a2:	80 93 98 01 	sts	0x0198, r24
    17a6:	42 c0       	rjmp	.+132    	; 0x182c <determine_blobs+0x4d0>
			}
			else if (far2 == close1) {
    17a8:	40 91 5e 01 	lds	r20, 0x015E
    17ac:	50 91 5f 01 	lds	r21, 0x015F
    17b0:	24 17       	cp	r18, r20
    17b2:	35 07       	cpc	r19, r21
    17b4:	01 f5       	brne	.+64     	; 0x17f6 <determine_blobs+0x49a>
				top = far2;
    17b6:	30 93 9d 01 	sts	0x019D, r19
    17ba:	20 93 9c 01 	sts	0x019C, r18
				bottom = far1;
    17be:	90 93 9b 01 	sts	0x019B, r25
    17c2:	80 93 9a 01 	sts	0x019A, r24
				right = close2;
    17c6:	4f 85       	ldd	r20, Y+15	; 0x0f
    17c8:	58 89       	ldd	r21, Y+16	; 0x10
    17ca:	50 93 97 01 	sts	0x0197, r21
    17ce:	40 93 96 01 	sts	0x0196, r20
				left = 9 - top - bottom - right;
    17d2:	49 e0       	ldi	r20, 0x09	; 9
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	ba 01       	movw	r22, r20
    17d8:	62 1b       	sub	r22, r18
    17da:	73 0b       	sbc	r23, r19
    17dc:	fb 01       	movw	r30, r22
    17de:	e8 1b       	sub	r30, r24
    17e0:	f9 0b       	sbc	r31, r25
    17e2:	cf 01       	movw	r24, r30
    17e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    17e6:	38 89       	ldd	r19, Y+16	; 0x10
    17e8:	82 1b       	sub	r24, r18
    17ea:	93 0b       	sbc	r25, r19
    17ec:	90 93 99 01 	sts	0x0199, r25
    17f0:	80 93 98 01 	sts	0x0198, r24
    17f4:	1b c0       	rjmp	.+54     	; 0x182c <determine_blobs+0x4d0>
			}
			else {
				top = far2;
    17f6:	50 93 9d 01 	sts	0x019D, r21
    17fa:	40 93 9c 01 	sts	0x019C, r20
				bottom = far1;
    17fe:	90 93 9b 01 	sts	0x019B, r25
    1802:	80 93 9a 01 	sts	0x019A, r24
				right = close1;
    1806:	30 93 97 01 	sts	0x0197, r19
    180a:	20 93 96 01 	sts	0x0196, r18
				left = 9 - top - bottom - right;
    180e:	69 e0       	ldi	r22, 0x09	; 9
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	fb 01       	movw	r30, r22
    1814:	e4 1b       	sub	r30, r20
    1816:	f5 0b       	sbc	r31, r21
    1818:	bf 01       	movw	r22, r30
    181a:	68 1b       	sub	r22, r24
    181c:	79 0b       	sbc	r23, r25
    181e:	cb 01       	movw	r24, r22
    1820:	82 1b       	sub	r24, r18
    1822:	93 0b       	sbc	r25, r19
    1824:	90 93 99 01 	sts	0x0199, r25
    1828:	80 93 98 01 	sts	0x0198, r24
			}
		}
	}
	return 1;
}
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	6c 96       	adiw	r28, 0x1c	; 28
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	bf 90       	pop	r11
    184c:	af 90       	pop	r10
    184e:	9f 90       	pop	r9
    1850:	8f 90       	pop	r8
    1852:	7f 90       	pop	r7
    1854:	6f 90       	pop	r6
    1856:	5f 90       	pop	r5
    1858:	4f 90       	pop	r4
    185a:	3f 90       	pop	r3
    185c:	2f 90       	pop	r2
    185e:	08 95       	ret

00001860 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    1860:	2f 92       	push	r2
    1862:	3f 92       	push	r3
    1864:	4f 92       	push	r4
    1866:	5f 92       	push	r5
    1868:	6f 92       	push	r6
    186a:	7f 92       	push	r7
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	2d 97       	sbiw	r28, 0x0d	; 13
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	8c 01       	movw	r16, r24
	numlost = 0;
    1896:	10 92 59 01 	sts	0x0159, r1
    189a:	10 92 58 01 	sts	0x0158, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    189e:	0e 94 ae 09 	call	0x135c	; 0x135c <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    18a2:	e0 90 9c 01 	lds	r14, 0x019C
    18a6:	f0 90 9d 01 	lds	r15, 0x019D
    18aa:	f7 01       	movw	r30, r14
    18ac:	ee 0f       	add	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	ea 58       	subi	r30, 0x8A	; 138
    18b2:	fe 4f       	sbci	r31, 0xFE	; 254
    18b4:	20 81       	ld	r18, Z
    18b6:	31 81       	ldd	r19, Z+1	; 0x01
    18b8:	3a 83       	std	Y+2, r19	; 0x02
    18ba:	29 83       	std	Y+1, r18	; 0x01
    18bc:	2f 3f       	cpi	r18, 0xFF	; 255
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	38 07       	cpc	r19, r24
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <localize+0x66>
    18c4:	ea c2       	rjmp	.+1492   	; 0x1e9a <localize+0x63a>
    18c6:	a0 90 9a 01 	lds	r10, 0x019A
    18ca:	b0 90 9b 01 	lds	r11, 0x019B
    18ce:	f5 01       	movw	r30, r10
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	ea 58       	subi	r30, 0x8A	; 138
    18d6:	fe 4f       	sbci	r31, 0xFE	; 254
    18d8:	c0 80       	ld	r12, Z
    18da:	d1 80       	ldd	r13, Z+1	; 0x01
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	c9 16       	cp	r12, r25
    18e0:	93 e0       	ldi	r25, 0x03	; 3
    18e2:	d9 06       	cpc	r13, r25
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <localize+0x88>
    18e6:	d9 c2       	rjmp	.+1458   	; 0x1e9a <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    18e8:	b9 01       	movw	r22, r18
    18ea:	6c 0d       	add	r22, r12
    18ec:	7d 1d       	adc	r23, r13
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	5f e3       	ldi	r21, 0x3F	; 63
    18fe:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1902:	20 91 0c 01 	lds	r18, 0x010C
    1906:	30 91 0d 01 	lds	r19, 0x010D
    190a:	40 91 0e 01 	lds	r20, 0x010E
    190e:	50 91 0f 01 	lds	r21, 0x010F
    1912:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1916:	6d 83       	std	Y+5, r22	; 0x05
    1918:	7e 83       	std	Y+6, r23	; 0x06
    191a:	8f 83       	std	Y+7, r24	; 0x07
    191c:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    191e:	f7 01       	movw	r30, r14
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e2 59       	subi	r30, 0x92	; 146
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	e0 80       	ld	r14, Z
    192a:	f1 80       	ldd	r15, Z+1	; 0x01
    192c:	f5 01       	movw	r30, r10
    192e:	ee 0f       	add	r30, r30
    1930:	ff 1f       	adc	r31, r31
    1932:	e2 59       	subi	r30, 0x92	; 146
    1934:	fe 4f       	sbci	r31, 0xFE	; 254
    1936:	a0 80       	ld	r10, Z
    1938:	b1 80       	ldd	r11, Z+1	; 0x01
    193a:	b5 01       	movw	r22, r10
    193c:	6e 0d       	add	r22, r14
    193e:	7f 1d       	adc	r23, r15
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1954:	20 91 08 01 	lds	r18, 0x0108
    1958:	30 91 09 01 	lds	r19, 0x0109
    195c:	40 91 0a 01 	lds	r20, 0x010A
    1960:	50 91 0b 01 	lds	r21, 0x010B
    1964:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1968:	69 87       	std	Y+9, r22	; 0x09
    196a:	7a 87       	std	Y+10, r23	; 0x0a
    196c:	28 2e       	mov	r2, r24
    196e:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    1970:	b7 01       	movw	r22, r14
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    197a:	2b 01       	movw	r4, r22
    197c:	3c 01       	movw	r6, r24
    197e:	b5 01       	movw	r22, r10
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	c3 01       	movw	r24, r6
    198e:	b2 01       	movw	r22, r4
    1990:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1994:	4b 01       	movw	r8, r22
    1996:	5c 01       	movw	r10, r24
    1998:	e9 81       	ldd	r30, Y+1	; 0x01
    199a:	fa 81       	ldd	r31, Y+2	; 0x02
    199c:	bf 01       	movw	r22, r30
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    19a6:	2b 01       	movw	r4, r22
    19a8:	3c 01       	movw	r6, r24
    19aa:	b6 01       	movw	r22, r12
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    19b4:	9b 01       	movw	r18, r22
    19b6:	ac 01       	movw	r20, r24
    19b8:	c3 01       	movw	r24, r6
    19ba:	b2 01       	movw	r22, r4
    19bc:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    19c0:	a5 01       	movw	r20, r10
    19c2:	94 01       	movw	r18, r8
    19c4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <atan2>
    19c8:	4b 01       	movw	r8, r22
    19ca:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    19cc:	7d 81       	ldd	r23, Y+5	; 0x05
    19ce:	6e 81       	ldd	r22, Y+6	; 0x06
    19d0:	9f 81       	ldd	r25, Y+7	; 0x07
    19d2:	88 85       	ldd	r24, Y+8	; 0x08
    19d4:	27 2f       	mov	r18, r23
    19d6:	36 2f       	mov	r19, r22
    19d8:	49 2f       	mov	r20, r25
    19da:	58 2f       	mov	r21, r24
    19dc:	b9 85       	ldd	r27, Y+9	; 0x09
    19de:	aa 85       	ldd	r26, Y+10	; 0x0a
    19e0:	6b 2f       	mov	r22, r27
    19e2:	7a 2f       	mov	r23, r26
    19e4:	82 2d       	mov	r24, r2
    19e6:	93 2d       	mov	r25, r3
    19e8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <atan2>
    19ec:	2b 01       	movw	r4, r22
    19ee:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    19f0:	7d 81       	ldd	r23, Y+5	; 0x05
    19f2:	6e 81       	ldd	r22, Y+6	; 0x06
    19f4:	9f 81       	ldd	r25, Y+7	; 0x07
    19f6:	88 85       	ldd	r24, Y+8	; 0x08
    19f8:	27 2f       	mov	r18, r23
    19fa:	36 2f       	mov	r19, r22
    19fc:	49 2f       	mov	r20, r25
    19fe:	58 2f       	mov	r21, r24
    1a00:	67 2f       	mov	r22, r23
    1a02:	73 2f       	mov	r23, r19
    1a04:	89 2f       	mov	r24, r25
    1a06:	95 2f       	mov	r25, r21
    1a08:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1a0c:	6b 01       	movw	r12, r22
    1a0e:	7c 01       	movw	r14, r24
    1a10:	79 85       	ldd	r23, Y+9	; 0x09
    1a12:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a14:	27 2f       	mov	r18, r23
    1a16:	36 2f       	mov	r19, r22
    1a18:	42 2d       	mov	r20, r2
    1a1a:	53 2d       	mov	r21, r3
    1a1c:	67 2f       	mov	r22, r23
    1a1e:	73 2f       	mov	r23, r19
    1a20:	82 2d       	mov	r24, r2
    1a22:	93 2d       	mov	r25, r3
    1a24:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	b6 01       	movw	r22, r12
    1a30:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1a34:	0e 94 80 18 	call	0x3100	; 0x3100 <sqrt>
    1a38:	6b 01       	movw	r12, r22
    1a3a:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	a9 01       	movw	r20, r18
    1a42:	60 91 7e 01 	lds	r22, 0x017E
    1a46:	70 91 7f 01 	lds	r23, 0x017F
    1a4a:	80 91 80 01 	lds	r24, 0x0180
    1a4e:	90 91 81 01 	lds	r25, 0x0181
    1a52:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__cmpsf2>
    1a56:	81 11       	cpse	r24, r1
    1a58:	08 c0       	rjmp	.+16     	; 0x1a6a <localize+0x20a>
			ai1 = angle;
    1a5a:	80 92 7e 01 	sts	0x017E, r8
    1a5e:	90 92 7f 01 	sts	0x017F, r9
    1a62:	a0 92 80 01 	sts	0x0180, r10
    1a66:	b0 92 81 01 	sts	0x0181, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    1a6a:	23 e3       	ldi	r18, 0x33	; 51
    1a6c:	33 e3       	ldi	r19, 0x33	; 51
    1a6e:	43 e7       	ldi	r20, 0x73	; 115
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	60 91 7e 01 	lds	r22, 0x017E
    1a76:	70 91 7f 01 	lds	r23, 0x017F
    1a7a:	80 91 80 01 	lds	r24, 0x0180
    1a7e:	90 91 81 01 	lds	r25, 0x0181
    1a82:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1a86:	4b 01       	movw	r8, r22
    1a88:	5c 01       	movw	r10, r24
    1a8a:	20 ed       	ldi	r18, 0xD0	; 208
    1a8c:	3c ec       	ldi	r19, 0xCC	; 204
    1a8e:	4c e4       	ldi	r20, 0x4C	; 76
    1a90:	5d e3       	ldi	r21, 0x3D	; 61
    1a92:	60 91 8a 01 	lds	r22, 0x018A
    1a96:	70 91 8b 01 	lds	r23, 0x018B
    1a9a:	80 91 8c 01 	lds	r24, 0x018C
    1a9e:	90 91 8d 01 	lds	r25, 0x018D
    1aa2:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	c5 01       	movw	r24, r10
    1aac:	b4 01       	movw	r22, r8
    1aae:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	44 e3       	ldi	r20, 0x34	; 52
    1ab8:	53 e4       	ldi	r21, 0x43	; 67
    1aba:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1abe:	23 ec       	ldi	r18, 0xC3	; 195
    1ac0:	35 ef       	ldi	r19, 0xF5	; 245
    1ac2:	48 e4       	ldi	r20, 0x48	; 72
    1ac4:	50 e4       	ldi	r21, 0x40	; 64
    1ac6:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
    1aca:	86 2e       	mov	r8, r22
    1acc:	97 2e       	mov	r9, r23
    1ace:	a8 2e       	mov	r10, r24
    1ad0:	b9 2e       	mov	r11, r25
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	80 86       	std	Z+8, r8	; 0x08
    1ad6:	91 86       	std	Z+9, r9	; 0x09
    1ad8:	a2 86       	std	Z+10, r10	; 0x0a
    1ada:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1adc:	23 ec       	ldi	r18, 0xC3	; 195
    1ade:	35 ef       	ldi	r19, 0xF5	; 245
    1ae0:	48 e4       	ldi	r20, 0x48	; 72
    1ae2:	50 e4       	ldi	r21, 0x40	; 64
    1ae4:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	44 e3       	ldi	r20, 0x34	; 52
    1aee:	53 e4       	ldi	r21, 0x43	; 67
    1af0:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
    1af4:	9b 01       	movw	r18, r22
    1af6:	ac 01       	movw	r20, r24
    1af8:	62 e5       	ldi	r22, 0x52	; 82
    1afa:	78 eb       	ldi	r23, 0xB8	; 184
    1afc:	86 e9       	ldi	r24, 0x96	; 150
    1afe:	90 e4       	ldi	r25, 0x40	; 64
    1b00:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1b04:	a3 01       	movw	r20, r6
    1b06:	92 01       	movw	r18, r4
    1b08:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1b0c:	86 2e       	mov	r8, r22
    1b0e:	97 2e       	mov	r9, r23
    1b10:	a8 2e       	mov	r10, r24
    1b12:	b9 2e       	mov	r11, r25
    1b14:	0e 94 76 18 	call	0x30ec	; 0x30ec <sin>
    1b18:	9b 01       	movw	r18, r22
    1b1a:	ac 01       	movw	r20, r24
    1b1c:	c7 01       	movw	r24, r14
    1b1e:	b6 01       	movw	r22, r12
    1b20:	90 58       	subi	r25, 0x80	; 128
    1b22:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1b26:	29 e3       	ldi	r18, 0x39	; 57
    1b28:	3e e8       	ldi	r19, 0x8E	; 142
    1b2a:	43 ea       	ldi	r20, 0xA3	; 163
    1b2c:	5e e3       	ldi	r21, 0x3E	; 62
    1b2e:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7b 87       	std	Y+11, r23	; 0x0b
    1b36:	8d 87       	std	Y+13, r24	; 0x0d
    1b38:	9c 87       	std	Y+12, r25	; 0x0c
    1b3a:	47 2f       	mov	r20, r23
    1b3c:	38 2f       	mov	r19, r24
    1b3e:	29 2f       	mov	r18, r25
    1b40:	86 2f       	mov	r24, r22
    1b42:	94 2f       	mov	r25, r20
    1b44:	a3 2f       	mov	r26, r19
    1b46:	b2 2f       	mov	r27, r18
    1b48:	80 93 92 01 	sts	0x0192, r24
    1b4c:	90 93 93 01 	sts	0x0193, r25
    1b50:	a0 93 94 01 	sts	0x0194, r26
    1b54:	b0 93 95 01 	sts	0x0195, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1b58:	68 2d       	mov	r22, r8
    1b5a:	79 2d       	mov	r23, r9
    1b5c:	8a 2d       	mov	r24, r10
    1b5e:	9b 2d       	mov	r25, r11
    1b60:	0e 94 7d 15 	call	0x2afa	; 0x2afa <cos>
    1b64:	a7 01       	movw	r20, r14
    1b66:	96 01       	movw	r18, r12
    1b68:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1b6c:	29 e8       	ldi	r18, 0x89	; 137
    1b6e:	3a ed       	ldi	r19, 0xDA	; 218
    1b70:	45 e9       	ldi	r20, 0x95	; 149
    1b72:	5e e3       	ldi	r21, 0x3E	; 62
    1b74:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1b78:	86 2e       	mov	r8, r22
    1b7a:	97 2e       	mov	r9, r23
    1b7c:	a8 2e       	mov	r10, r24
    1b7e:	b9 2e       	mov	r11, r25
    1b80:	86 2f       	mov	r24, r22
    1b82:	99 2d       	mov	r25, r9
    1b84:	aa 2d       	mov	r26, r10
    1b86:	bb 2d       	mov	r27, r11
    1b88:	80 93 8e 01 	sts	0x018E, r24
    1b8c:	90 93 8f 01 	sts	0x018F, r25
    1b90:	a0 93 90 01 	sts	0x0190, r26
    1b94:	b0 93 91 01 	sts	0x0191, r27
		
		if (xi1 == 0 && yi1 == 0) {
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	60 91 86 01 	lds	r22, 0x0186
    1ba2:	70 91 87 01 	lds	r23, 0x0187
    1ba6:	80 91 88 01 	lds	r24, 0x0188
    1baa:	90 91 89 01 	lds	r25, 0x0189
    1bae:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__cmpsf2>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	2b c0       	rjmp	.+86     	; 0x1c0c <localize+0x3ac>
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	a9 01       	movw	r20, r18
    1bbc:	60 91 82 01 	lds	r22, 0x0182
    1bc0:	70 91 83 01 	lds	r23, 0x0183
    1bc4:	80 91 84 01 	lds	r24, 0x0184
    1bc8:	90 91 85 01 	lds	r25, 0x0185
    1bcc:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__cmpsf2>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	1c c0       	rjmp	.+56     	; 0x1c0c <localize+0x3ac>
			xi1 = xi;
    1bd4:	59 81       	ldd	r21, Y+1	; 0x01
    1bd6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bd8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1bda:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bdc:	85 2f       	mov	r24, r21
    1bde:	94 2f       	mov	r25, r20
    1be0:	a3 2f       	mov	r26, r19
    1be2:	b2 2f       	mov	r27, r18
    1be4:	80 93 86 01 	sts	0x0186, r24
    1be8:	90 93 87 01 	sts	0x0187, r25
    1bec:	a0 93 88 01 	sts	0x0188, r26
    1bf0:	b0 93 89 01 	sts	0x0189, r27
			yi1 = yi;
    1bf4:	88 2d       	mov	r24, r8
    1bf6:	99 2d       	mov	r25, r9
    1bf8:	aa 2d       	mov	r26, r10
    1bfa:	bb 2d       	mov	r27, r11
    1bfc:	80 93 82 01 	sts	0x0182, r24
    1c00:	90 93 83 01 	sts	0x0183, r25
    1c04:	a0 93 84 01 	sts	0x0184, r26
    1c08:	b0 93 85 01 	sts	0x0185, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    1c0c:	23 e3       	ldi	r18, 0x33	; 51
    1c0e:	33 e3       	ldi	r19, 0x33	; 51
    1c10:	43 e7       	ldi	r20, 0x73	; 115
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	60 91 86 01 	lds	r22, 0x0186
    1c18:	70 91 87 01 	lds	r23, 0x0187
    1c1c:	80 91 88 01 	lds	r24, 0x0188
    1c20:	90 91 89 01 	lds	r25, 0x0189
    1c24:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1c28:	4b 01       	movw	r8, r22
    1c2a:	5c 01       	movw	r10, r24
    1c2c:	20 ed       	ldi	r18, 0xD0	; 208
    1c2e:	3c ec       	ldi	r19, 0xCC	; 204
    1c30:	4c e4       	ldi	r20, 0x4C	; 76
    1c32:	5d e3       	ldi	r21, 0x3D	; 61
    1c34:	b9 81       	ldd	r27, Y+1	; 0x01
    1c36:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c38:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c3a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c3c:	6b 2f       	mov	r22, r27
    1c3e:	7a 2f       	mov	r23, r26
    1c40:	8f 2f       	mov	r24, r31
    1c42:	9e 2f       	mov	r25, r30
    1c44:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1c48:	9b 01       	movw	r18, r22
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	c5 01       	movw	r24, r10
    1c4e:	b4 01       	movw	r22, r8
    1c50:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1c54:	f8 01       	movw	r30, r16
    1c56:	60 83       	st	Z, r22
    1c58:	71 83       	std	Z+1, r23	; 0x01
    1c5a:	82 83       	std	Z+2, r24	; 0x02
    1c5c:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    1c5e:	80 90 8e 01 	lds	r8, 0x018E
    1c62:	90 90 8f 01 	lds	r9, 0x018F
    1c66:	a0 90 90 01 	lds	r10, 0x0190
    1c6a:	b0 90 91 01 	lds	r11, 0x0191
    1c6e:	23 e3       	ldi	r18, 0x33	; 51
    1c70:	33 e3       	ldi	r19, 0x33	; 51
    1c72:	43 e7       	ldi	r20, 0x73	; 115
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	60 91 82 01 	lds	r22, 0x0182
    1c7a:	70 91 83 01 	lds	r23, 0x0183
    1c7e:	80 91 84 01 	lds	r24, 0x0184
    1c82:	90 91 85 01 	lds	r25, 0x0185
    1c86:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1c8a:	69 83       	std	Y+1, r22	; 0x01
    1c8c:	7a 83       	std	Y+2, r23	; 0x02
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	20 ed       	ldi	r18, 0xD0	; 208
    1c94:	3c ec       	ldi	r19, 0xCC	; 204
    1c96:	4c e4       	ldi	r20, 0x4C	; 76
    1c98:	5d e3       	ldi	r21, 0x3D	; 61
    1c9a:	c5 01       	movw	r24, r10
    1c9c:	b4 01       	movw	r22, r8
    1c9e:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1ca2:	9b 01       	movw	r18, r22
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	69 81       	ldd	r22, Y+1	; 0x01
    1ca8:	7a 81       	ldd	r23, Y+2	; 0x02
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	64 83       	std	Z+4, r22	; 0x04
    1cb6:	75 83       	std	Z+5, r23	; 0x05
    1cb8:	86 83       	std	Z+6, r24	; 0x06
    1cba:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1cbc:	80 91 9c 01 	lds	r24, 0x019C
    1cc0:	90 91 9d 01 	lds	r25, 0x019D
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	3a 83       	std	Y+2, r19	; 0x02
    1ccc:	29 83       	std	Y+1, r18	; 0x01
    1cce:	f9 01       	movw	r30, r18
    1cd0:	ea 58       	subi	r30, 0x8A	; 138
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	64 87       	std	Z+12, r22	; 0x0c
    1ce4:	75 87       	std	Z+13, r23	; 0x0d
    1ce6:	86 87       	std	Z+14, r24	; 0x0e
    1ce8:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1cea:	e9 81       	ldd	r30, Y+1	; 0x01
    1cec:	fa 81       	ldd	r31, Y+2	; 0x02
    1cee:	e2 59       	subi	r30, 0x92	; 146
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1cfe:	f8 01       	movw	r30, r16
    1d00:	60 8b       	std	Z+16, r22	; 0x10
    1d02:	71 8b       	std	Z+17, r23	; 0x11
    1d04:	82 8b       	std	Z+18, r24	; 0x12
    1d06:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1d08:	80 91 9a 01 	lds	r24, 0x019A
    1d0c:	90 91 9b 01 	lds	r25, 0x019B
    1d10:	9c 01       	movw	r18, r24
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	3a 83       	std	Y+2, r19	; 0x02
    1d18:	29 83       	std	Y+1, r18	; 0x01
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	ea 58       	subi	r30, 0x8A	; 138
    1d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	64 8b       	std	Z+20, r22	; 0x14
    1d30:	75 8b       	std	Z+21, r23	; 0x15
    1d32:	86 8b       	std	Z+22, r24	; 0x16
    1d34:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	e2 59       	subi	r30, 0x92	; 146
    1d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	60 8f       	std	Z+24, r22	; 0x18
    1d4e:	71 8f       	std	Z+25, r23	; 0x19
    1d50:	82 8f       	std	Z+26, r24	; 0x1a
    1d52:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1d54:	80 91 96 01 	lds	r24, 0x0196
    1d58:	90 91 97 01 	lds	r25, 0x0197
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	3a 83       	std	Y+2, r19	; 0x02
    1d64:	29 83       	std	Y+1, r18	; 0x01
    1d66:	f9 01       	movw	r30, r18
    1d68:	ea 58       	subi	r30, 0x8A	; 138
    1d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1d78:	f8 01       	movw	r30, r16
    1d7a:	64 8f       	std	Z+28, r22	; 0x1c
    1d7c:	75 8f       	std	Z+29, r23	; 0x1d
    1d7e:	86 8f       	std	Z+30, r24	; 0x1e
    1d80:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1d82:	e9 81       	ldd	r30, Y+1	; 0x01
    1d84:	fa 81       	ldd	r31, Y+2	; 0x02
    1d86:	e2 59       	subi	r30, 0x92	; 146
    1d88:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1d96:	f8 01       	movw	r30, r16
    1d98:	60 a3       	std	Z+32, r22	; 0x20
    1d9a:	71 a3       	std	Z+33, r23	; 0x21
    1d9c:	82 a3       	std	Z+34, r24	; 0x22
    1d9e:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1da0:	80 91 98 01 	lds	r24, 0x0198
    1da4:	90 91 99 01 	lds	r25, 0x0199
    1da8:	9c 01       	movw	r18, r24
    1daa:	22 0f       	add	r18, r18
    1dac:	33 1f       	adc	r19, r19
    1dae:	3a 83       	std	Y+2, r19	; 0x02
    1db0:	29 83       	std	Y+1, r18	; 0x01
    1db2:	f9 01       	movw	r30, r18
    1db4:	ea 58       	subi	r30, 0x8A	; 138
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	64 a3       	std	Z+36, r22	; 0x24
    1dc8:	75 a3       	std	Z+37, r23	; 0x25
    1dca:	86 a3       	std	Z+38, r24	; 0x26
    1dcc:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1dce:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd2:	e2 59       	subi	r30, 0x92	; 146
    1dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__floatunsisf>
    1de2:	f8 01       	movw	r30, r16
    1de4:	60 a7       	std	Z+40, r22	; 0x28
    1de6:	71 a7       	std	Z+41, r23	; 0x29
    1de8:	82 a7       	std	Z+42, r24	; 0x2a
    1dea:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	44 e3       	ldi	r20, 0x34	; 52
    1df2:	53 e4       	ldi	r21, 0x43	; 67
    1df4:	c3 01       	movw	r24, r6
    1df6:	b2 01       	movw	r22, r4
    1df8:	0e 94 13 18 	call	0x3026	; 0x3026 <__mulsf3>
    1dfc:	23 ec       	ldi	r18, 0xC3	; 195
    1dfe:	35 ef       	ldi	r19, 0xF5	; 245
    1e00:	48 e4       	ldi	r20, 0x48	; 72
    1e02:	50 e4       	ldi	r21, 0x40	; 64
    1e04:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__divsf3>
    1e08:	f8 01       	movw	r30, r16
    1e0a:	64 a7       	std	Z+44, r22	; 0x2c
    1e0c:	75 a7       	std	Z+45, r23	; 0x2d
    1e0e:	86 a7       	std	Z+46, r24	; 0x2e
    1e10:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    1e12:	5d 81       	ldd	r21, Y+5	; 0x05
    1e14:	4e 81       	ldd	r20, Y+6	; 0x06
    1e16:	3f 81       	ldd	r19, Y+7	; 0x07
    1e18:	28 85       	ldd	r18, Y+8	; 0x08
    1e1a:	85 2f       	mov	r24, r21
    1e1c:	94 2f       	mov	r25, r20
    1e1e:	a3 2f       	mov	r26, r19
    1e20:	b2 2f       	mov	r27, r18
    1e22:	80 ab       	std	Z+48, r24	; 0x30
    1e24:	91 ab       	std	Z+49, r25	; 0x31
    1e26:	a2 ab       	std	Z+50, r26	; 0x32
    1e28:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1e2a:	59 85       	ldd	r21, Y+9	; 0x09
    1e2c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e2e:	85 2f       	mov	r24, r21
    1e30:	94 2f       	mov	r25, r20
    1e32:	a2 2d       	mov	r26, r2
    1e34:	b3 2d       	mov	r27, r3
    1e36:	84 ab       	std	Z+52, r24	; 0x34
    1e38:	95 ab       	std	Z+53, r25	; 0x35
    1e3a:	a6 ab       	std	Z+54, r26	; 0x36
    1e3c:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    1e3e:	c0 ae       	std	Z+56, r12	; 0x38
    1e40:	d1 ae       	std	Z+57, r13	; 0x39
    1e42:	e2 ae       	std	Z+58, r14	; 0x3a
    1e44:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1e46:	80 91 92 01 	lds	r24, 0x0192
    1e4a:	90 91 93 01 	lds	r25, 0x0193
    1e4e:	a0 91 94 01 	lds	r26, 0x0194
    1e52:	b0 91 95 01 	lds	r27, 0x0195
    1e56:	80 93 86 01 	sts	0x0186, r24
    1e5a:	90 93 87 01 	sts	0x0187, r25
    1e5e:	a0 93 88 01 	sts	0x0188, r26
    1e62:	b0 93 89 01 	sts	0x0189, r27
		yi1 = yi;
    1e66:	80 92 82 01 	sts	0x0182, r8
    1e6a:	90 92 83 01 	sts	0x0183, r9
    1e6e:	a0 92 84 01 	sts	0x0184, r10
    1e72:	b0 92 85 01 	sts	0x0185, r11
		ai1 = ai;
    1e76:	80 91 8a 01 	lds	r24, 0x018A
    1e7a:	90 91 8b 01 	lds	r25, 0x018B
    1e7e:	a0 91 8c 01 	lds	r26, 0x018C
    1e82:	b0 91 8d 01 	lds	r27, 0x018D
    1e86:	80 93 7e 01 	sts	0x017E, r24
    1e8a:	90 93 7f 01 	sts	0x017F, r25
    1e8e:	a0 93 80 01 	sts	0x0180, r26
    1e92:	b0 93 81 01 	sts	0x0181, r27
		
		return 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	00 c0       	rjmp	.+0      	; 0x1e9a <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1e9a:	2d 96       	adiw	r28, 0x0d	; 13
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	ff 90       	pop	r15
    1eb0:	ef 90       	pop	r14
    1eb2:	df 90       	pop	r13
    1eb4:	cf 90       	pop	r12
    1eb6:	bf 90       	pop	r11
    1eb8:	af 90       	pop	r10
    1eba:	9f 90       	pop	r9
    1ebc:	8f 90       	pop	r8
    1ebe:	7f 90       	pop	r7
    1ec0:	6f 90       	pop	r6
    1ec2:	5f 90       	pop	r5
    1ec4:	4f 90       	pop	r4
    1ec6:	3f 90       	pop	r3
    1ec8:	2f 90       	pop	r2
    1eca:	08 95       	ret

00001ecc <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	18 2f       	mov	r17, r24
    1ed4:	d6 2f       	mov	r29, r22
    1ed6:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1ed8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1edc:	94 ea       	ldi	r25, 0xA4	; 164
    1ede:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1ee2:	ec eb       	ldi	r30, 0xBC	; 188
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	90 81       	ld	r25, Z
    1ee8:	99 23       	and	r25, r25
    1eea:	ec f7       	brge	.-6      	; 0x1ee6 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1eec:	90 e5       	ldi	r25, 0x50	; 80
    1eee:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ef2:	94 e8       	ldi	r25, 0x84	; 132
    1ef4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1ef8:	ec eb       	ldi	r30, 0xBC	; 188
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	90 81       	ld	r25, Z
    1efe:	99 23       	and	r25, r25
    1f00:	ec f7       	brge	.-6      	; 0x1efc <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1f02:	90 91 b9 00 	lds	r25, 0x00B9
    1f06:	98 7f       	andi	r25, 0xF8	; 248
    1f08:	90 32       	cpi	r25, 0x20	; 32
    1f0a:	29 f4       	brne	.+10     	; 0x1f16 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1f0c:	84 e9       	ldi	r24, 0x94	; 148
    1f0e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	2d c0       	rjmp	.+90     	; 0x1f70 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f1c:	84 e8       	ldi	r24, 0x84	; 132
    1f1e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1f22:	ec eb       	ldi	r30, 0xBC	; 188
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	90 81       	ld	r25, Z
    1f28:	99 23       	and	r25, r25
    1f2a:	ec f7       	brge	.-6      	; 0x1f26 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1f2c:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f30:	84 e8       	ldi	r24, 0x84	; 132
    1f32:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1f36:	ec eb       	ldi	r30, 0xBC	; 188
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 23       	and	r24, r24
    1f3e:	ec f7       	brge	.-6      	; 0x1f3a <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1f40:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f44:	84 e8       	ldi	r24, 0x84	; 132
    1f46:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1f4a:	ec eb       	ldi	r30, 0xBC	; 188
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 23       	and	r24, r24
    1f52:	ec f7       	brge	.-6      	; 0x1f4e <m_rf_open+0x82>
	
	TWDR = packet_length;
    1f54:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f58:	84 e8       	ldi	r24, 0x84	; 132
    1f5a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1f5e:	ec eb       	ldi	r30, 0xBC	; 188
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	88 23       	and	r24, r24
    1f66:	ec f7       	brge	.-6      	; 0x1f62 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f68:	84 e9       	ldi	r24, 0x94	; 148
    1f6a:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
}
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	08 95       	ret

00001f78 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1f7c:	24 ea       	ldi	r18, 0xA4	; 164
    1f7e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1f82:	ec eb       	ldi	r30, 0xBC	; 188
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	20 81       	ld	r18, Z
    1f88:	22 23       	and	r18, r18
    1f8a:	ec f7       	brge	.-6      	; 0x1f86 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1f8c:	21 e5       	ldi	r18, 0x51	; 81
    1f8e:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f92:	24 e8       	ldi	r18, 0x84	; 132
    1f94:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1f98:	ec eb       	ldi	r30, 0xBC	; 188
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	20 81       	ld	r18, Z
    1f9e:	22 23       	and	r18, r18
    1fa0:	ec f7       	brge	.-6      	; 0x1f9c <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1fa2:	20 91 b9 00 	lds	r18, 0x00B9
    1fa6:	28 7f       	andi	r18, 0xF8	; 248
    1fa8:	28 34       	cpi	r18, 0x48	; 72
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1fac:	84 e9       	ldi	r24, 0x94	; 148
    1fae:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1fb6:	24 ec       	ldi	r18, 0xC4	; 196
    1fb8:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1fbc:	ec eb       	ldi	r30, 0xBC	; 188
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	20 81       	ld	r18, Z
    1fc2:	22 23       	and	r18, r18
    1fc4:	ec f7       	brge	.-6      	; 0x1fc0 <m_rf_read+0x48>
	bytes = TWDR;
    1fc6:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1fca:	46 13       	cpse	r20, r22
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	41 50       	subi	r20, 0x01	; 1
    1fd2:	51 09       	sbc	r21, r1
    1fd4:	14 16       	cp	r1, r20
    1fd6:	15 06       	cpc	r1, r21
    1fd8:	44 f0       	brlt	.+16     	; 0x1fea <m_rf_read+0x72>
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	18 c0       	rjmp	.+48     	; 0x2010 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1fe0:	84 e9       	ldi	r24, 0x94	; 148
    1fe2:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	25 c0       	rjmp	.+74     	; 0x2034 <m_rf_read+0xbc>
    1fea:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ff0:	ec eb       	ldi	r30, 0xBC	; 188
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1ff6:	cb eb       	ldi	r28, 0xBB	; 187
    1ff8:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ffa:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1ffc:	60 81       	ld	r22, Z
    1ffe:	66 23       	and	r22, r22
    2000:	ec f7       	brge	.-6      	; 0x1ffc <m_rf_read+0x84>
		buffer[i] = TWDR;
    2002:	68 81       	ld	r22, Y
    2004:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2006:	2f 5f       	subi	r18, 0xFF	; 255
    2008:	3f 4f       	sbci	r19, 0xFF	; 255
    200a:	24 17       	cp	r18, r20
    200c:	35 07       	cpc	r19, r21
    200e:	ac f3       	brlt	.-22     	; 0x1ffa <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2010:	24 e8       	ldi	r18, 0x84	; 132
    2012:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2016:	ec eb       	ldi	r30, 0xBC	; 188
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	20 81       	ld	r18, Z
    201c:	22 23       	and	r18, r18
    201e:	ec f7       	brge	.-6      	; 0x201a <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    2020:	20 91 bb 00 	lds	r18, 0x00BB
    2024:	fc 01       	movw	r30, r24
    2026:	e4 0f       	add	r30, r20
    2028:	f5 1f       	adc	r31, r21
    202a:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    202c:	84 e9       	ldi	r24, 0x94	; 148
    202e:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    2040:	80 ea       	ldi	r24, 0xA0	; 160
    2042:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2046:	82 e1       	ldi	r24, 0x12	; 18
    2048:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    204a:	09 b4       	in	r0, 0x29	; 41
    204c:	00 fe       	sbrs	r0, 0
    204e:	fd cf       	rjmp	.-6      	; 0x204a <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    2050:	80 e9       	ldi	r24, 0x90	; 144
    2052:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2056:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    205a:	10 92 b7 01 	sts	0x01B7, r1
	cdc_line_rtsdtr = 0;
    205e:	10 92 b8 01 	sts	0x01B8, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    2062:	8c e0       	ldi	r24, 0x0C	; 12
    2064:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2068:	78 94       	sei
    206a:	08 95       	ret

0000206c <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    206c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    206e:	f8 94       	cli
	if (!usb_configuration) {
    2070:	80 91 b7 01 	lds	r24, 0x01B7
    2074:	81 11       	cpse	r24, r1
    2076:	03 c0       	rjmp	.+6      	; 0x207e <m_usb_rx_char+0x12>
		SREG = intr_state;
    2078:	9f bf       	out	0x3f, r25	; 63
		return -1;
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    2084:	80 91 e8 00 	lds	r24, 0x00E8
    2088:	85 fd       	sbrc	r24, 5
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    208c:	9f bf       	out	0x3f, r25	; 63
		return -1;
    208e:	8f ef       	ldi	r24, 0xFF	; 255
    2090:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    2092:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    2096:	20 91 e8 00 	lds	r18, 0x00E8
    209a:	25 fd       	sbrc	r18, 5
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <m_usb_rx_char+0x38>
    209e:	2b e6       	ldi	r18, 0x6B	; 107
    20a0:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    20a4:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    20a6:	08 95       	ret

000020a8 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    20a8:	80 91 b7 01 	lds	r24, 0x01B7
    20ac:	88 23       	and	r24, r24
    20ae:	89 f0       	breq	.+34     	; 0x20d2 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    20b0:	2f b7       	in	r18, 0x3f	; 63
		cli();
    20b2:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    20ba:	80 91 e8 00 	lds	r24, 0x00E8
    20be:	85 ff       	sbrs	r24, 5
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    20c2:	e8 ee       	ldi	r30, 0xE8	; 232
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	9b e6       	ldi	r25, 0x6B	; 107
    20c8:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    20ca:	80 81       	ld	r24, Z
    20cc:	85 fd       	sbrc	r24, 5
    20ce:	fc cf       	rjmp	.-8      	; 0x20c8 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    20d0:	2f bf       	out	0x3f, r18	; 63
    20d2:	08 95       	ret

000020d4 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    20d8:	90 91 b7 01 	lds	r25, 0x01B7
    20dc:	99 23       	and	r25, r25
    20de:	09 f4       	brne	.+2      	; 0x20e2 <m_usb_tx_char+0xe>
    20e0:	4d c0       	rjmp	.+154    	; 0x217c <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    20e2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    20e4:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    20e6:	24 e0       	ldi	r18, 0x04	; 4
    20e8:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    20ec:	20 91 b9 01 	lds	r18, 0x01B9
    20f0:	22 23       	and	r18, r18
    20f2:	49 f0       	breq	.+18     	; 0x2106 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    20f4:	20 91 e8 00 	lds	r18, 0x00E8
    20f8:	25 fd       	sbrc	r18, 5
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    20fc:	9f bf       	out	0x3f, r25	; 63
			return -1;
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	42 c0       	rjmp	.+132    	; 0x2186 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    2102:	10 92 b9 01 	sts	0x01B9, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2106:	30 91 e4 00 	lds	r19, 0x00E4
    210a:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    210c:	20 91 e8 00 	lds	r18, 0x00E8
    2110:	25 fd       	sbrc	r18, 5
    2112:	25 c0       	rjmp	.+74     	; 0x215e <m_usb_tx_char+0x8a>
		SREG = intr_state;
    2114:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2116:	90 91 e4 00 	lds	r25, 0x00E4
    211a:	93 17       	cp	r25, r19
    211c:	49 f0       	breq	.+18     	; 0x2130 <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    211e:	90 91 b7 01 	lds	r25, 0x01B7
    2122:	91 11       	cpse	r25, r1
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <m_usb_tx_char+0x70>
    2126:	2c c0       	rjmp	.+88     	; 0x2180 <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2128:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    212a:	98 81       	ld	r25, Y
    212c:	93 13       	cpse	r25, r19
    212e:	05 c0       	rjmp	.+10     	; 0x213a <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	80 93 b9 01 	sts	0x01B9, r24
			return -1;
    2136:	8f ef       	ldi	r24, 0xFF	; 255
    2138:	26 c0       	rjmp	.+76     	; 0x2186 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    213a:	90 91 b7 01 	lds	r25, 0x01B7
    213e:	91 11       	cpse	r25, r1
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <m_usb_tx_char+0x7e>
    2142:	20 c0       	rjmp	.+64     	; 0x2184 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2144:	a9 ee       	ldi	r26, 0xE9	; 233
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    214a:	e8 ee       	ldi	r30, 0xE8	; 232
    214c:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    214e:	c4 ee       	ldi	r28, 0xE4	; 228
    2150:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    2152:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2154:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2156:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2158:	20 81       	ld	r18, Z
    215a:	25 ff       	sbrs	r18, 5
    215c:	e5 cf       	rjmp	.-54     	; 0x2128 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    215e:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2162:	80 91 e8 00 	lds	r24, 0x00E8
    2166:	85 fd       	sbrc	r24, 5
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <m_usb_tx_char+0x9c>
    216a:	8a e3       	ldi	r24, 0x3A	; 58
    216c:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2170:	85 e0       	ldi	r24, 0x05	; 5
    2172:	80 93 b6 01 	sts	0x01B6, r24
	SREG = intr_state;
    2176:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <m_usb_tx_char+0xb2>
    2184:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    218c:	1f 92       	push	r1
    218e:	0f 92       	push	r0
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	0f 92       	push	r0
    2194:	11 24       	eor	r1, r1
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	ef 93       	push	r30
    219c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    219e:	e1 ee       	ldi	r30, 0xE1	; 225
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
        UDINT = 0;
    21a4:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    21a6:	83 ff       	sbrs	r24, 3
    21a8:	11 c0       	rjmp	.+34     	; 0x21cc <__vector_10+0x40>
		UENUM = 0;
    21aa:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    21b4:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    21b8:	92 e1       	ldi	r25, 0x12	; 18
    21ba:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    21be:	98 e0       	ldi	r25, 0x08	; 8
    21c0:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    21c4:	10 92 b7 01 	sts	0x01B7, r1
		cdc_line_rtsdtr = 0;
    21c8:	10 92 b8 01 	sts	0x01B8, r1
        }
	if (intbits & (1<<SOFI)) {
    21cc:	82 ff       	sbrs	r24, 2
    21ce:	13 c0       	rjmp	.+38     	; 0x21f6 <__vector_10+0x6a>
		if (usb_configuration) {
    21d0:	80 91 b7 01 	lds	r24, 0x01B7
    21d4:	88 23       	and	r24, r24
    21d6:	79 f0       	breq	.+30     	; 0x21f6 <__vector_10+0x6a>
			t = transmit_flush_timer;
    21d8:	80 91 b6 01 	lds	r24, 0x01B6
			if (t) {
    21dc:	88 23       	and	r24, r24
    21de:	59 f0       	breq	.+22     	; 0x21f6 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    21e0:	81 50       	subi	r24, 0x01	; 1
    21e2:	80 93 b6 01 	sts	0x01B6, r24
				if (!t) {
    21e6:	81 11       	cpse	r24, r1
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    21f0:	8a e3       	ldi	r24, 0x3A	; 58
    21f2:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    21f6:	ff 91       	pop	r31
    21f8:	ef 91       	pop	r30
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	0f 90       	pop	r0
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	0f 90       	pop	r0
    2204:	1f 90       	pop	r1
    2206:	18 95       	reti

00002208 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2208:	1f 92       	push	r1
    220a:	0f 92       	push	r0
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	0f 92       	push	r0
    2210:	11 24       	eor	r1, r1
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	2f 93       	push	r18
    2218:	3f 93       	push	r19
    221a:	4f 93       	push	r20
    221c:	5f 93       	push	r21
    221e:	6f 93       	push	r22
    2220:	7f 93       	push	r23
    2222:	8f 93       	push	r24
    2224:	9f 93       	push	r25
    2226:	af 93       	push	r26
    2228:	bf 93       	push	r27
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	ef 93       	push	r30
    2230:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2232:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2236:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    223a:	83 ff       	sbrs	r24, 3
    223c:	51 c1       	rjmp	.+674    	; 0x24e0 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    223e:	e1 ef       	ldi	r30, 0xF1	; 241
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    2244:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2246:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2248:	30 81       	ld	r19, Z
    224a:	93 2f       	mov	r25, r19
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	dc 01       	movw	r26, r24
    2250:	a2 2b       	or	r26, r18
    2252:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    2254:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    2256:	60 81       	ld	r22, Z
    2258:	96 2f       	mov	r25, r22
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	85 2b       	or	r24, r21
                wLength = UEDATX;
    225e:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    2260:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2262:	52 ef       	ldi	r21, 0xF2	; 242
    2264:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    2268:	46 30       	cpi	r20, 0x06	; 6
    226a:	09 f0       	breq	.+2      	; 0x226e <__vector_11+0x66>
    226c:	5c c0       	rjmp	.+184    	; 0x2326 <__vector_11+0x11e>
    226e:	04 c0       	rjmp	.+8      	; 0x2278 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2270:	81 e2       	ldi	r24, 0x21	; 33
    2272:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2276:	3b c1       	rjmp	.+630    	; 0x24ee <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2278:	c6 e0       	ldi	r28, 0x06	; 6
    227a:	49 e7       	ldi	r20, 0x79	; 121
    227c:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    227e:	fa 01       	movw	r30, r20
    2280:	65 91       	lpm	r22, Z+
    2282:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    2284:	26 17       	cp	r18, r22
    2286:	37 07       	cpc	r19, r23
    2288:	19 f0       	breq	.+6      	; 0x2290 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    228a:	49 5f       	subi	r20, 0xF9	; 249
    228c:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    228e:	20 c0       	rjmp	.+64     	; 0x22d0 <__vector_11+0xc8>
				}
				list += 2;
    2290:	fa 01       	movw	r30, r20
    2292:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2294:	65 91       	lpm	r22, Z+
    2296:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2298:	86 17       	cp	r24, r22
    229a:	97 07       	cpc	r25, r23
    229c:	19 f0       	breq	.+6      	; 0x22a4 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    229e:	49 5f       	subi	r20, 0xF9	; 249
    22a0:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    22a2:	16 c0       	rjmp	.+44     	; 0x22d0 <__vector_11+0xc8>
				}
				list += 2;
    22a4:	fa 01       	movw	r30, r20
    22a6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    22a8:	85 91       	lpm	r24, Z+
    22aa:	94 91       	lpm	r25, Z
    22ac:	28 2f       	mov	r18, r24
    22ae:	39 2f       	mov	r19, r25
				list += 2;
    22b0:	fa 01       	movw	r30, r20
    22b2:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    22b4:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    22b6:	9b 2f       	mov	r25, r27
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    22bc:	8f 3f       	cpi	r24, 0xFF	; 255
    22be:	91 05       	cpc	r25, r1
    22c0:	19 f0       	breq	.+6      	; 0x22c8 <__vector_11+0xc0>
    22c2:	10 f0       	brcs	.+4      	; 0x22c8 <__vector_11+0xc0>
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	84 17       	cp	r24, r20
    22ca:	28 f4       	brcc	.+10     	; 0x22d6 <__vector_11+0xce>
    22cc:	48 2f       	mov	r20, r24
    22ce:	03 c0       	rjmp	.+6      	; 0x22d6 <__vector_11+0xce>
    22d0:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    22d2:	a9 f6       	brne	.-86     	; 0x227e <__vector_11+0x76>
    22d4:	cd cf       	rjmp	.-102    	; 0x2270 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    22d6:	c8 ee       	ldi	r28, 0xE8	; 232
    22d8:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    22da:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    22dc:	a1 ef       	ldi	r26, 0xF1	; 241
    22de:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    22e0:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    22e2:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    22e4:	98 2f       	mov	r25, r24
    22e6:	95 70       	andi	r25, 0x05	; 5
    22e8:	e1 f3       	breq	.-8      	; 0x22e2 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    22ea:	82 fd       	sbrc	r24, 2
    22ec:	00 c1       	rjmp	.+512    	; 0x24ee <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    22ee:	64 2f       	mov	r22, r20
    22f0:	41 31       	cpi	r20, 0x11	; 17
    22f2:	08 f0       	brcs	.+2      	; 0x22f6 <__vector_11+0xee>
    22f4:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    22f6:	66 23       	and	r22, r22
    22f8:	09 f4       	brne	.+2      	; 0x22fc <__vector_11+0xf4>
    22fa:	f6 c0       	rjmp	.+492    	; 0x24e8 <__vector_11+0x2e0>
    22fc:	c9 01       	movw	r24, r18
    22fe:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    2300:	fc 01       	movw	r30, r24
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	e4 91       	lpm	r30, Z
    2306:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2308:	51 50       	subi	r21, 0x01	; 1
    230a:	d1 f7       	brne	.-12     	; 0x2300 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    230c:	86 2f       	mov	r24, r22
    230e:	81 50       	subi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	28 0f       	add	r18, r24
    2316:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2318:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    231a:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    231c:	41 11       	cpse	r20, r1
    231e:	e1 cf       	rjmp	.-62     	; 0x22e2 <__vector_11+0xda>
    2320:	60 31       	cpi	r22, 0x10	; 16
    2322:	f9 f2       	breq	.-66     	; 0x22e2 <__vector_11+0xda>
    2324:	e4 c0       	rjmp	.+456    	; 0x24ee <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2326:	45 30       	cpi	r20, 0x05	; 5
    2328:	61 f4       	brne	.+24     	; 0x2342 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    232a:	8e ef       	ldi	r24, 0xFE	; 254
    232c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2330:	e8 ee       	ldi	r30, 0xE8	; 232
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	80 ff       	sbrs	r24, 0
    2338:	fd cf       	rjmp	.-6      	; 0x2334 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    233a:	20 68       	ori	r18, 0x80	; 128
    233c:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2340:	d6 c0       	rjmp	.+428    	; 0x24ee <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2342:	49 30       	cpi	r20, 0x09	; 9
    2344:	a1 f5       	brne	.+104    	; 0x23ae <__vector_11+0x1a6>
    2346:	71 11       	cpse	r23, r1
    2348:	5b c0       	rjmp	.+182    	; 0x2400 <__vector_11+0x1f8>
			usb_configuration = wValue;
    234a:	20 93 b7 01 	sts	0x01B7, r18
			cdc_line_rtsdtr = 0;
    234e:	10 92 b8 01 	sts	0x01B8, r1
			transmit_flush_timer = 0;
    2352:	10 92 b6 01 	sts	0x01B6, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2356:	8e ef       	ldi	r24, 0xFE	; 254
    2358:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    235c:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    235e:	83 ea       	ldi	r24, 0xA3	; 163
    2360:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    2362:	c9 ee       	ldi	r28, 0xE9	; 233
    2364:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2366:	ab ee       	ldi	r26, 0xEB	; 235
    2368:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    236a:	6c ee       	ldi	r22, 0xEC	; 236
    236c:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    236e:	4d ee       	ldi	r20, 0xED	; 237
    2370:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2372:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2374:	9c 01       	movw	r18, r24
    2376:	2f 5f       	subi	r18, 0xFF	; 255
    2378:	3f 4f       	sbci	r19, 0xFF	; 255
    237a:	fc 01       	movw	r30, r24
    237c:	04 91       	lpm	r16, Z
				UECONX = en;
    237e:	0c 93       	st	X, r16
				if (en) {
    2380:	00 23       	and	r16, r16
    2382:	59 f0       	breq	.+22     	; 0x239a <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    2384:	f9 01       	movw	r30, r18
    2386:	24 91       	lpm	r18, Z
    2388:	fb 01       	movw	r30, r22
    238a:	20 83       	st	Z, r18
    238c:	fc 01       	movw	r30, r24
    238e:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    2390:	03 96       	adiw	r24, 0x03	; 3
    2392:	24 91       	lpm	r18, Z
    2394:	fa 01       	movw	r30, r20
    2396:	20 83       	st	Z, r18
    2398:	01 c0       	rjmp	.+2      	; 0x239c <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    239a:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    239c:	1f 5f       	subi	r17, 0xFF	; 255
    239e:	15 30       	cpi	r17, 0x05	; 5
    23a0:	41 f7       	brne	.-48     	; 0x2372 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    23a2:	ea ee       	ldi	r30, 0xEA	; 234
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	8e e1       	ldi	r24, 0x1E	; 30
    23a8:	80 83       	st	Z, r24
        		UERST = 0;
    23aa:	10 82       	st	Z, r1
			return;
    23ac:	a0 c0       	rjmp	.+320    	; 0x24ee <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    23ae:	48 30       	cpi	r20, 0x08	; 8
    23b0:	81 f4       	brne	.+32     	; 0x23d2 <__vector_11+0x1ca>
    23b2:	70 38       	cpi	r23, 0x80	; 128
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <__vector_11+0x1b0>
    23b6:	3f c0       	rjmp	.+126    	; 0x2436 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    23b8:	e8 ee       	ldi	r30, 0xE8	; 232
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	80 ff       	sbrs	r24, 0
    23c0:	fd cf       	rjmp	.-6      	; 0x23bc <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    23c2:	80 91 b7 01 	lds	r24, 0x01B7
    23c6:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    23ca:	8e ef       	ldi	r24, 0xFE	; 254
    23cc:	80 93 e8 00 	sts	0x00E8, r24
    23d0:	8e c0       	rjmp	.+284    	; 0x24ee <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    23d2:	41 32       	cpi	r20, 0x21	; 33
    23d4:	a9 f4       	brne	.+42     	; 0x2400 <__vector_11+0x1f8>
    23d6:	71 3a       	cpi	r23, 0xA1	; 161
    23d8:	f1 f5       	brne	.+124    	; 0x2456 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    23da:	e8 ee       	ldi	r30, 0xE8	; 232
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 ff       	sbrs	r24, 0
    23e2:	fd cf       	rjmp	.-6      	; 0x23de <__vector_11+0x1d6>
    23e4:	e0 e1       	ldi	r30, 0x10	; 16
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    23e8:	a1 ef       	ldi	r26, 0xF1	; 241
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	81 91       	ld	r24, Z+
    23ee:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	e7 31       	cpi	r30, 0x17	; 23
    23f4:	f4 07       	cpc	r31, r20
    23f6:	d1 f7       	brne	.-12     	; 0x23ec <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    23f8:	8e ef       	ldi	r24, 0xFE	; 254
    23fa:	80 93 e8 00 	sts	0x00E8, r24
    23fe:	77 c0       	rjmp	.+238    	; 0x24ee <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2400:	40 32       	cpi	r20, 0x20	; 32
    2402:	c9 f4       	brne	.+50     	; 0x2436 <__vector_11+0x22e>
    2404:	71 32       	cpi	r23, 0x21	; 33
    2406:	09 f0       	breq	.+2      	; 0x240a <__vector_11+0x202>
    2408:	6b c0       	rjmp	.+214    	; 0x24e0 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    240a:	e8 ee       	ldi	r30, 0xE8	; 232
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	82 ff       	sbrs	r24, 2
    2412:	fd cf       	rjmp	.-6      	; 0x240e <__vector_11+0x206>
    2414:	e0 e1       	ldi	r30, 0x10	; 16
    2416:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2418:	a1 ef       	ldi	r26, 0xF1	; 241
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	8c 91       	ld	r24, X
    241e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2420:	51 e0       	ldi	r21, 0x01	; 1
    2422:	e7 31       	cpi	r30, 0x17	; 23
    2424:	f5 07       	cpc	r31, r21
    2426:	d1 f7       	brne	.-12     	; 0x241c <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2428:	e8 ee       	ldi	r30, 0xE8	; 232
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	8b ef       	ldi	r24, 0xFB	; 251
    242e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2430:	8e ef       	ldi	r24, 0xFE	; 254
    2432:	80 83       	st	Z, r24
    2434:	5c c0       	rjmp	.+184    	; 0x24ee <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2436:	42 32       	cpi	r20, 0x22	; 34
    2438:	71 f4       	brne	.+28     	; 0x2456 <__vector_11+0x24e>
    243a:	71 32       	cpi	r23, 0x21	; 33
    243c:	09 f0       	breq	.+2      	; 0x2440 <__vector_11+0x238>
    243e:	50 c0       	rjmp	.+160    	; 0x24e0 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    2440:	20 93 b8 01 	sts	0x01B8, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2444:	e8 ee       	ldi	r30, 0xE8	; 232
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 ff       	sbrs	r24, 0
    244c:	fd cf       	rjmp	.-6      	; 0x2448 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    244e:	8e ef       	ldi	r24, 0xFE	; 254
    2450:	80 93 e8 00 	sts	0x00E8, r24
    2454:	4c c0       	rjmp	.+152    	; 0x24ee <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2456:	41 11       	cpse	r20, r1
    2458:	1a c0       	rjmp	.+52     	; 0x248e <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    245a:	e8 ee       	ldi	r30, 0xE8	; 232
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	20 81       	ld	r18, Z
    2460:	20 ff       	sbrs	r18, 0
    2462:	fd cf       	rjmp	.-6      	; 0x245e <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2464:	72 38       	cpi	r23, 0x82	; 130
    2466:	51 f4       	brne	.+20     	; 0x247c <__vector_11+0x274>
				UENUM = wIndex;
    2468:	e9 ee       	ldi	r30, 0xE9	; 233
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    246e:	80 91 eb 00 	lds	r24, 0x00EB
    2472:	85 fb       	bst	r24, 5
    2474:	88 27       	eor	r24, r24
    2476:	80 f9       	bld	r24, 0
				UENUM = 0;
    2478:	10 82       	st	Z, r1
    247a:	01 c0       	rjmp	.+2      	; 0x247e <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    247c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    247e:	e1 ef       	ldi	r30, 0xF1	; 241
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 83       	st	Z, r24
			UEDATX = 0;
    2484:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2486:	8e ef       	ldi	r24, 0xFE	; 254
    2488:	80 93 e8 00 	sts	0x00E8, r24
    248c:	30 c0       	rjmp	.+96     	; 0x24ee <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    248e:	41 30       	cpi	r20, 0x01	; 1
    2490:	11 f0       	breq	.+4      	; 0x2496 <__vector_11+0x28e>
    2492:	43 30       	cpi	r20, 0x03	; 3
    2494:	29 f5       	brne	.+74     	; 0x24e0 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    2496:	72 30       	cpi	r23, 0x02	; 2
    2498:	19 f5       	brne	.+70     	; 0x24e0 <__vector_11+0x2d8>
    249a:	23 2b       	or	r18, r19
    249c:	09 f5       	brne	.+66     	; 0x24e0 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    249e:	8f 77       	andi	r24, 0x7F	; 127
    24a0:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    24a2:	38 2f       	mov	r19, r24
    24a4:	31 50       	subi	r19, 0x01	; 1
    24a6:	34 30       	cpi	r19, 0x04	; 4
    24a8:	d8 f4       	brcc	.+54     	; 0x24e0 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    24aa:	3e ef       	ldi	r19, 0xFE	; 254
    24ac:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    24b0:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    24b4:	43 30       	cpi	r20, 0x03	; 3
    24b6:	21 f4       	brne	.+8      	; 0x24c0 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    24b8:	81 e2       	ldi	r24, 0x21	; 33
    24ba:	80 93 eb 00 	sts	0x00EB, r24
    24be:	17 c0       	rjmp	.+46     	; 0x24ee <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    24c0:	99 e1       	ldi	r25, 0x19	; 25
    24c2:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    24c6:	21 e0       	ldi	r18, 0x01	; 1
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	d9 01       	movw	r26, r18
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <__vector_11+0x2ca>
    24ce:	aa 0f       	add	r26, r26
    24d0:	bb 1f       	adc	r27, r27
    24d2:	8a 95       	dec	r24
    24d4:	e2 f7       	brpl	.-8      	; 0x24ce <__vector_11+0x2c6>
    24d6:	ea ee       	ldi	r30, 0xEA	; 234
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	a0 83       	st	Z, r26
					UERST = 0;
    24dc:	10 82       	st	Z, r1
    24de:	07 c0       	rjmp	.+14     	; 0x24ee <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    24e0:	81 e2       	ldi	r24, 0x21	; 33
    24e2:	80 93 eb 00 	sts	0x00EB, r24
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    24e8:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    24ea:	41 11       	cpse	r20, r1
    24ec:	fa ce       	rjmp	.-524    	; 0x22e2 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	bf 91       	pop	r27
    24f8:	af 91       	pop	r26
    24fa:	9f 91       	pop	r25
    24fc:	8f 91       	pop	r24
    24fe:	7f 91       	pop	r23
    2500:	6f 91       	pop	r22
    2502:	5f 91       	pop	r21
    2504:	4f 91       	pop	r20
    2506:	3f 91       	pop	r19
    2508:	2f 91       	pop	r18
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	27 97       	sbiw	r28, 0x07	; 7
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    2534:	8e 01       	movw	r16, r28
    2536:	0f 5f       	subi	r16, 0xFF	; 255
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	27 e0       	ldi	r18, 0x07	; 7
    253c:	f8 01       	movw	r30, r16
    253e:	11 92       	st	Z+, r1
    2540:	2a 95       	dec	r18
    2542:	e9 f7       	brne	.-6      	; 0x253e <m_usb_tx_int+0x26>
	itoa(i,string,10);
    2544:	4a e0       	ldi	r20, 0x0A	; 10
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	b8 01       	movw	r22, r16
    254a:	0e 94 0f 19 	call	0x321e	; 0x321e <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    254e:	7e 01       	movw	r14, r28
    2550:	f8 e0       	ldi	r31, 0x08	; 8
    2552:	ef 0e       	add	r14, r31
    2554:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2556:	f8 01       	movw	r30, r16
    2558:	81 91       	ld	r24, Z+
    255a:	8f 01       	movw	r16, r30
    255c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    255e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2562:	0e 15       	cp	r16, r14
    2564:	1f 05       	cpc	r17, r15
    2566:	b9 f7       	brne	.-18     	; 0x2556 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2568:	27 96       	adiw	r28, 0x07	; 7
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	08 95       	ret

00002582 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2586:	ec eb       	ldi	r30, 0xBC	; 188
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 23       	and	r24, r24
    258e:	34 f0       	brlt	.+12     	; 0x259c <twi_wait+0x1a>
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	29 3e       	cpi	r18, 0xE9	; 233
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	38 07       	cpc	r19, r24
    259a:	b9 f7       	brne	.-18     	; 0x258a <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	28 3e       	cpi	r18, 0xE8	; 232
    25a0:	33 40       	sbci	r19, 0x03	; 3
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <twi_wait+0x24>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    25a6:	08 95       	ret

000025a8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    25a8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    25ac:	84 e8       	ldi	r24, 0x84	; 132
    25ae:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    25b2:	0e 94 c1 12 	call	0x2582	; 0x2582 <twi_wait>
    25b6:	88 23       	and	r24, r24
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    25ba:	80 91 b9 00 	lds	r24, 0x00B9
    25be:	88 7f       	andi	r24, 0xF8	; 248
    25c0:	08 95       	ret
	} else {
		return 0;					// comm failure
    25c2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    25c4:	08 95       	ret

000025c6 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    25c6:	cf 93       	push	r28
    25c8:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    25ca:	94 ea       	ldi	r25, 0xA4	; 164
    25cc:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    25d0:	0e 94 c1 12 	call	0x2582	; 0x2582 <twi_wait>
    25d4:	88 23       	and	r24, r24
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    25d8:	8c 2f       	mov	r24, r28
    25da:	88 0f       	add	r24, r24
    25dc:	8f 5f       	subi	r24, 0xFF	; 255
    25de:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    25e2:	88 34       	cpi	r24, 0x48	; 72
    25e4:	39 f4       	brne	.+14     	; 0x25f4 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    25e6:	84 e9       	ldi	r24, 0x94	; 148
    25e8:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    25f4:	81 e0       	ldi	r24, 0x01	; 1
}	
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    25fa:	cf 93       	push	r28
    25fc:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    25fe:	94 ea       	ldi	r25, 0xA4	; 164
    2600:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2604:	0e 94 c1 12 	call	0x2582	; 0x2582 <twi_wait>
    2608:	88 23       	and	r24, r24
    260a:	59 f0       	breq	.+22     	; 0x2622 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    260c:	8c 2f       	mov	r24, r28
    260e:	88 0f       	add	r24, r24
    2610:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2614:	80 32       	cpi	r24, 0x20	; 32
    2616:	39 f4       	brne	.+14     	; 0x2626 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2618:	84 e9       	ldi	r24, 0x94	; 148
    261a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2626:	81 e0       	ldi	r24, 0x01	; 1
}	
    2628:	cf 91       	pop	r28
    262a:	08 95       	ret

0000262c <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    262c:	84 e9       	ldi	r24, 0x94	; 148
    262e:	80 93 bc 00 	sts	0x00BC, r24
    2632:	08 95       	ret

00002634 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	60 97       	sbiw	r28, 0x10	; 16
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	e8 2e       	mov	r14, r24
    2652:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2654:	fe 01       	movw	r30, r28
    2656:	31 96       	adiw	r30, 0x01	; 1
    2658:	80 e1       	ldi	r24, 0x10	; 16
    265a:	df 01       	movw	r26, r30
    265c:	1d 92       	st	X+, r1
    265e:	8a 95       	dec	r24
    2660:	e9 f7       	brne	.-6      	; 0x265c <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2662:	88 e5       	ldi	r24, 0x58	; 88
    2664:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    2668:	88 23       	and	r24, r24
    266a:	09 f4       	brne	.+2      	; 0x266e <m_wii_read+0x3a>
    266c:	66 c0       	rjmp	.+204    	; 0x273a <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    266e:	86 e3       	ldi	r24, 0x36	; 54
    2670:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2674:	88 23       	and	r24, r24
    2676:	09 f4       	brne	.+2      	; 0x267a <m_wii_read+0x46>
    2678:	62 c0       	rjmp	.+196    	; 0x273e <m_wii_read+0x10a>
	end();
    267a:	0e 94 16 13 	call	0x262c	; 0x262c <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    267e:	b8 e0       	ldi	r27, 0x08	; 8
    2680:	ba 95       	dec	r27
    2682:	f1 f7       	brne	.-4      	; 0x2680 <m_wii_read+0x4c>
    2684:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2686:	88 e5       	ldi	r24, 0x58	; 88
    2688:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <start_read>
    268c:	88 23       	and	r24, r24
    268e:	09 f4       	brne	.+2      	; 0x2692 <m_wii_read+0x5e>
    2690:	58 c0       	rjmp	.+176    	; 0x2742 <m_wii_read+0x10e>
    2692:	ae 01       	movw	r20, r28
    2694:	4f 5f       	subi	r20, 0xFF	; 255
    2696:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2698:	8e 01       	movw	r16, r28
    269a:	00 5f       	subi	r16, 0xF0	; 240
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    269e:	ec eb       	ldi	r30, 0xBC	; 188
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    26a4:	2b eb       	ldi	r18, 0xBB	; 187
    26a6:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26a8:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	ec f7       	brge	.-6      	; 0x26aa <m_wii_read+0x76>
		temp[i] = TWDR;
    26b0:	d9 01       	movw	r26, r18
    26b2:	8c 91       	ld	r24, X
    26b4:	da 01       	movw	r26, r20
    26b6:	8d 93       	st	X+, r24
    26b8:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    26ba:	a0 17       	cp	r26, r16
    26bc:	b1 07       	cpc	r27, r17
    26be:	a1 f7       	brne	.-24     	; 0x26a8 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    26c0:	84 e8       	ldi	r24, 0x84	; 132
    26c2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26c6:	ec eb       	ldi	r30, 0xBC	; 188
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 23       	and	r24, r24
    26ce:	ec f7       	brge	.-6      	; 0x26ca <m_wii_read+0x96>
	temp[15] = TWDR;
    26d0:	80 91 bb 00 	lds	r24, 0x00BB
    26d4:	88 8b       	std	Y+16, r24	; 0x10
	end();
    26d6:	0e 94 16 13 	call	0x262c	; 0x262c <end>
    26da:	de 01       	movw	r26, r28
    26dc:	14 96       	adiw	r26, 0x04	; 4
    26de:	6e 2d       	mov	r22, r14
    26e0:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    26e2:	4c 91       	ld	r20, X
    26e4:	24 2f       	mov	r18, r20
    26e6:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    26e8:	cd 01       	movw	r24, r26
    26ea:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    26ec:	fc 01       	movw	r30, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	f0 e1       	ldi	r31, 0x10	; 16
    26f4:	2f 9f       	mul	r18, r31
    26f6:	80 0d       	add	r24, r0
    26f8:	91 1d       	adc	r25, r1
    26fa:	11 24       	eor	r1, r1
    26fc:	fb 01       	movw	r30, r22
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2702:	84 2f       	mov	r24, r20
    2704:	80 7c       	andi	r24, 0xC0	; 192
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2710:	9d 01       	movw	r18, r26
    2712:	21 50       	subi	r18, 0x01	; 1
    2714:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2716:	f9 01       	movw	r30, r18
    2718:	20 81       	ld	r18, Z
    271a:	82 0f       	add	r24, r18
    271c:	91 1d       	adc	r25, r1
    271e:	fb 01       	movw	r30, r22
    2720:	93 83       	std	Z+3, r25	; 0x03
    2722:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2724:	4f 70       	andi	r20, 0x0F	; 15
    2726:	44 83       	std	Z+4, r20	; 0x04
    2728:	15 82       	std	Z+5, r1	; 0x05
    272a:	13 96       	adiw	r26, 0x03	; 3
    272c:	6a 5f       	subi	r22, 0xFA	; 250
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2730:	0a 17       	cp	r16, r26
    2732:	1b 07       	cpc	r17, r27
    2734:	b1 f6       	brne	.-84     	; 0x26e2 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2742:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2744:	60 96       	adiw	r28, 0x10	; 16
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	08 95       	ret

0000275e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    275e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2762:	88 e5       	ldi	r24, 0x58	; 88
    2764:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <m_wii_open+0x10>
    276c:	c7 c0       	rjmp	.+398    	; 0x28fc <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2774:	88 23       	and	r24, r24
    2776:	09 f4       	brne	.+2      	; 0x277a <m_wii_open+0x1c>
    2778:	c3 c0       	rjmp	.+390    	; 0x2900 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <m_wii_open+0x28>
    2784:	bf c0       	rjmp	.+382    	; 0x2904 <m_wii_open+0x1a6>
	end();
    2786:	0e 94 16 13 	call	0x262c	; 0x262c <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    278a:	83 ec       	ldi	r24, 0xC3	; 195
    278c:	99 e0       	ldi	r25, 0x09	; 9
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <m_wii_open+0x30>
    2792:	00 c0       	rjmp	.+0      	; 0x2794 <m_wii_open+0x36>
    2794:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2796:	88 e5       	ldi	r24, 0x58	; 88
    2798:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    279c:	88 23       	and	r24, r24
    279e:	09 f4       	brne	.+2      	; 0x27a2 <m_wii_open+0x44>
    27a0:	b3 c0       	rjmp	.+358    	; 0x2908 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <m_wii_open+0x50>
    27ac:	af c0       	rjmp	.+350    	; 0x290c <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27b4:	88 23       	and	r24, r24
    27b6:	09 f4       	brne	.+2      	; 0x27ba <m_wii_open+0x5c>
    27b8:	ab c0       	rjmp	.+342    	; 0x2910 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27c0:	88 23       	and	r24, r24
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <m_wii_open+0x68>
    27c4:	a7 c0       	rjmp	.+334    	; 0x2914 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27cc:	88 23       	and	r24, r24
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <m_wii_open+0x74>
    27d0:	a3 c0       	rjmp	.+326    	; 0x2918 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27d8:	88 23       	and	r24, r24
    27da:	09 f4       	brne	.+2      	; 0x27de <m_wii_open+0x80>
    27dc:	9f c0       	rjmp	.+318    	; 0x291c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27e4:	88 23       	and	r24, r24
    27e6:	09 f4       	brne	.+2      	; 0x27ea <m_wii_open+0x8c>
    27e8:	9b c0       	rjmp	.+310    	; 0x2920 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27f0:	88 23       	and	r24, r24
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <m_wii_open+0x98>
    27f4:	97 c0       	rjmp	.+302    	; 0x2924 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    27f6:	80 e9       	ldi	r24, 0x90	; 144
    27f8:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    27fc:	88 23       	and	r24, r24
    27fe:	09 f4       	brne	.+2      	; 0x2802 <m_wii_open+0xa4>
    2800:	93 c0       	rjmp	.+294    	; 0x2928 <m_wii_open+0x1ca>
	end();
    2802:	0e 94 16 13 	call	0x262c	; 0x262c <end>
    2806:	83 ec       	ldi	r24, 0xC3	; 195
    2808:	99 e0       	ldi	r25, 0x09	; 9
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <m_wii_open+0xac>
    280e:	00 c0       	rjmp	.+0      	; 0x2810 <m_wii_open+0xb2>
    2810:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2812:	88 e5       	ldi	r24, 0x58	; 88
    2814:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    2818:	88 23       	and	r24, r24
    281a:	09 f4       	brne	.+2      	; 0x281e <m_wii_open+0xc0>
    281c:	87 c0       	rjmp	.+270    	; 0x292c <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    281e:	87 e0       	ldi	r24, 0x07	; 7
    2820:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <m_wii_open+0xcc>
    2828:	83 c0       	rjmp	.+262    	; 0x2930 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2830:	88 23       	and	r24, r24
    2832:	09 f4       	brne	.+2      	; 0x2836 <m_wii_open+0xd8>
    2834:	7f c0       	rjmp	.+254    	; 0x2934 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    2836:	81 e4       	ldi	r24, 0x41	; 65
    2838:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    283c:	88 23       	and	r24, r24
    283e:	09 f4       	brne	.+2      	; 0x2842 <m_wii_open+0xe4>
    2840:	7b c0       	rjmp	.+246    	; 0x2938 <m_wii_open+0x1da>
	end();
    2842:	0e 94 16 13 	call	0x262c	; 0x262c <end>
    2846:	83 ec       	ldi	r24, 0xC3	; 195
    2848:	99 e0       	ldi	r25, 0x09	; 9
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <m_wii_open+0xec>
    284e:	00 c0       	rjmp	.+0      	; 0x2850 <m_wii_open+0xf2>
    2850:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2852:	88 e5       	ldi	r24, 0x58	; 88
    2854:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    2858:	88 23       	and	r24, r24
    285a:	09 f4       	brne	.+2      	; 0x285e <m_wii_open+0x100>
    285c:	6f c0       	rjmp	.+222    	; 0x293c <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    285e:	8a e1       	ldi	r24, 0x1A	; 26
    2860:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2864:	88 23       	and	r24, r24
    2866:	09 f4       	brne	.+2      	; 0x286a <m_wii_open+0x10c>
    2868:	6b c0       	rjmp	.+214    	; 0x2940 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    286a:	80 e4       	ldi	r24, 0x40	; 64
    286c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    2870:	88 23       	and	r24, r24
    2872:	09 f4       	brne	.+2      	; 0x2876 <m_wii_open+0x118>
    2874:	67 c0       	rjmp	.+206    	; 0x2944 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    287c:	88 23       	and	r24, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <m_wii_open+0x124>
    2880:	63 c0       	rjmp	.+198    	; 0x2948 <m_wii_open+0x1ea>
	end();
    2882:	0e 94 16 13 	call	0x262c	; 0x262c <end>
    2886:	83 ec       	ldi	r24, 0xC3	; 195
    2888:	99 e0       	ldi	r25, 0x09	; 9
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <m_wii_open+0x12c>
    288e:	00 c0       	rjmp	.+0      	; 0x2890 <m_wii_open+0x132>
    2890:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2892:	88 e5       	ldi	r24, 0x58	; 88
    2894:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    2898:	88 23       	and	r24, r24
    289a:	09 f4       	brne	.+2      	; 0x289e <m_wii_open+0x140>
    289c:	57 c0       	rjmp	.+174    	; 0x294c <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    289e:	83 e3       	ldi	r24, 0x33	; 51
    28a0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    28a4:	88 23       	and	r24, r24
    28a6:	09 f4       	brne	.+2      	; 0x28aa <m_wii_open+0x14c>
    28a8:	53 c0       	rjmp	.+166    	; 0x2950 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    28b0:	88 23       	and	r24, r24
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <m_wii_open+0x158>
    28b4:	4f c0       	rjmp	.+158    	; 0x2954 <m_wii_open+0x1f6>
	end();
    28b6:	0e 94 16 13 	call	0x262c	; 0x262c <end>
    28ba:	83 ec       	ldi	r24, 0xC3	; 195
    28bc:	99 e0       	ldi	r25, 0x09	; 9
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <m_wii_open+0x160>
    28c2:	00 c0       	rjmp	.+0      	; 0x28c4 <m_wii_open+0x166>
    28c4:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28c6:	88 e5       	ldi	r24, 0x58	; 88
    28c8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <start_write>
    28cc:	88 23       	and	r24, r24
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <m_wii_open+0x174>
    28d0:	43 c0       	rjmp	.+134    	; 0x2958 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    28d2:	80 e3       	ldi	r24, 0x30	; 48
    28d4:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    28d8:	88 23       	and	r24, r24
    28da:	09 f4       	brne	.+2      	; 0x28de <m_wii_open+0x180>
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    28de:	88 e0       	ldi	r24, 0x08	; 8
    28e0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <send_byte>
    28e4:	88 23       	and	r24, r24
    28e6:	e1 f1       	breq	.+120    	; 0x2960 <m_wii_open+0x202>
	end();
    28e8:	0e 94 16 13 	call	0x262c	; 0x262c <end>
    28ec:	83 ec       	ldi	r24, 0xC3	; 195
    28ee:	99 e0       	ldi	r25, 0x09	; 9
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <m_wii_open+0x192>
    28f4:	00 c0       	rjmp	.+0      	; 0x28f6 <m_wii_open+0x198>
    28f6:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2960:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2962:	08 95       	ret

00002964 <__subsf3>:
    2964:	50 58       	subi	r21, 0x80	; 128

00002966 <__addsf3>:
    2966:	bb 27       	eor	r27, r27
    2968:	aa 27       	eor	r26, r26
    296a:	0e d0       	rcall	.+28     	; 0x2988 <__addsf3x>
    296c:	58 c2       	rjmp	.+1200   	; 0x2e1e <__fp_round>
    296e:	21 d2       	rcall	.+1090   	; 0x2db2 <__fp_pscA>
    2970:	30 f0       	brcs	.+12     	; 0x297e <__addsf3+0x18>
    2972:	26 d2       	rcall	.+1100   	; 0x2dc0 <__fp_pscB>
    2974:	20 f0       	brcs	.+8      	; 0x297e <__addsf3+0x18>
    2976:	31 f4       	brne	.+12     	; 0x2984 <__addsf3+0x1e>
    2978:	9f 3f       	cpi	r25, 0xFF	; 255
    297a:	11 f4       	brne	.+4      	; 0x2980 <__addsf3+0x1a>
    297c:	1e f4       	brtc	.+6      	; 0x2984 <__addsf3+0x1e>
    297e:	f1 c1       	rjmp	.+994    	; 0x2d62 <__fp_nan>
    2980:	0e f4       	brtc	.+2      	; 0x2984 <__addsf3+0x1e>
    2982:	e0 95       	com	r30
    2984:	e7 fb       	bst	r30, 7
    2986:	e7 c1       	rjmp	.+974    	; 0x2d56 <__fp_inf>

00002988 <__addsf3x>:
    2988:	e9 2f       	mov	r30, r25
    298a:	6b d2       	rcall	.+1238   	; 0x2e62 <__fp_split3>
    298c:	80 f3       	brcs	.-32     	; 0x296e <__addsf3+0x8>
    298e:	ba 17       	cp	r27, r26
    2990:	62 07       	cpc	r22, r18
    2992:	73 07       	cpc	r23, r19
    2994:	84 07       	cpc	r24, r20
    2996:	95 07       	cpc	r25, r21
    2998:	18 f0       	brcs	.+6      	; 0x29a0 <__addsf3x+0x18>
    299a:	71 f4       	brne	.+28     	; 0x29b8 <__addsf3x+0x30>
    299c:	9e f5       	brtc	.+102    	; 0x2a04 <__addsf3x+0x7c>
    299e:	83 c2       	rjmp	.+1286   	; 0x2ea6 <__fp_zero>
    29a0:	0e f4       	brtc	.+2      	; 0x29a4 <__addsf3x+0x1c>
    29a2:	e0 95       	com	r30
    29a4:	0b 2e       	mov	r0, r27
    29a6:	ba 2f       	mov	r27, r26
    29a8:	a0 2d       	mov	r26, r0
    29aa:	0b 01       	movw	r0, r22
    29ac:	b9 01       	movw	r22, r18
    29ae:	90 01       	movw	r18, r0
    29b0:	0c 01       	movw	r0, r24
    29b2:	ca 01       	movw	r24, r20
    29b4:	a0 01       	movw	r20, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	ff 27       	eor	r31, r31
    29ba:	59 1b       	sub	r21, r25
    29bc:	99 f0       	breq	.+38     	; 0x29e4 <__addsf3x+0x5c>
    29be:	59 3f       	cpi	r21, 0xF9	; 249
    29c0:	50 f4       	brcc	.+20     	; 0x29d6 <__addsf3x+0x4e>
    29c2:	50 3e       	cpi	r21, 0xE0	; 224
    29c4:	68 f1       	brcs	.+90     	; 0x2a20 <__addsf3x+0x98>
    29c6:	1a 16       	cp	r1, r26
    29c8:	f0 40       	sbci	r31, 0x00	; 0
    29ca:	a2 2f       	mov	r26, r18
    29cc:	23 2f       	mov	r18, r19
    29ce:	34 2f       	mov	r19, r20
    29d0:	44 27       	eor	r20, r20
    29d2:	58 5f       	subi	r21, 0xF8	; 248
    29d4:	f3 cf       	rjmp	.-26     	; 0x29bc <__addsf3x+0x34>
    29d6:	46 95       	lsr	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	a7 95       	ror	r26
    29de:	f0 40       	sbci	r31, 0x00	; 0
    29e0:	53 95       	inc	r21
    29e2:	c9 f7       	brne	.-14     	; 0x29d6 <__addsf3x+0x4e>
    29e4:	7e f4       	brtc	.+30     	; 0x2a04 <__addsf3x+0x7c>
    29e6:	1f 16       	cp	r1, r31
    29e8:	ba 0b       	sbc	r27, r26
    29ea:	62 0b       	sbc	r22, r18
    29ec:	73 0b       	sbc	r23, r19
    29ee:	84 0b       	sbc	r24, r20
    29f0:	ba f0       	brmi	.+46     	; 0x2a20 <__addsf3x+0x98>
    29f2:	91 50       	subi	r25, 0x01	; 1
    29f4:	a1 f0       	breq	.+40     	; 0x2a1e <__addsf3x+0x96>
    29f6:	ff 0f       	add	r31, r31
    29f8:	bb 1f       	adc	r27, r27
    29fa:	66 1f       	adc	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	c2 f7       	brpl	.-16     	; 0x29f2 <__addsf3x+0x6a>
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <__addsf3x+0x98>
    2a04:	ba 0f       	add	r27, r26
    2a06:	62 1f       	adc	r22, r18
    2a08:	73 1f       	adc	r23, r19
    2a0a:	84 1f       	adc	r24, r20
    2a0c:	48 f4       	brcc	.+18     	; 0x2a20 <__addsf3x+0x98>
    2a0e:	87 95       	ror	r24
    2a10:	77 95       	ror	r23
    2a12:	67 95       	ror	r22
    2a14:	b7 95       	ror	r27
    2a16:	f7 95       	ror	r31
    2a18:	9e 3f       	cpi	r25, 0xFE	; 254
    2a1a:	08 f0       	brcs	.+2      	; 0x2a1e <__addsf3x+0x96>
    2a1c:	b3 cf       	rjmp	.-154    	; 0x2984 <__addsf3+0x1e>
    2a1e:	93 95       	inc	r25
    2a20:	88 0f       	add	r24, r24
    2a22:	08 f0       	brcs	.+2      	; 0x2a26 <__addsf3x+0x9e>
    2a24:	99 27       	eor	r25, r25
    2a26:	ee 0f       	add	r30, r30
    2a28:	97 95       	ror	r25
    2a2a:	87 95       	ror	r24
    2a2c:	08 95       	ret
    2a2e:	c1 d1       	rcall	.+898    	; 0x2db2 <__fp_pscA>
    2a30:	58 f0       	brcs	.+22     	; 0x2a48 <__addsf3x+0xc0>
    2a32:	80 e8       	ldi	r24, 0x80	; 128
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <__addsf3x+0xb2>
    2a38:	9e ef       	ldi	r25, 0xFE	; 254
    2a3a:	c2 d1       	rcall	.+900    	; 0x2dc0 <__fp_pscB>
    2a3c:	28 f0       	brcs	.+10     	; 0x2a48 <__addsf3x+0xc0>
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	51 e0       	ldi	r21, 0x01	; 1
    2a42:	59 f4       	brne	.+22     	; 0x2a5a <atan2+0xe>
    2a44:	5e ef       	ldi	r21, 0xFE	; 254
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <atan2+0xe>
    2a48:	8c c1       	rjmp	.+792    	; 0x2d62 <__fp_nan>
    2a4a:	2d c2       	rjmp	.+1114   	; 0x2ea6 <__fp_zero>

00002a4c <atan2>:
    2a4c:	e9 2f       	mov	r30, r25
    2a4e:	e0 78       	andi	r30, 0x80	; 128
    2a50:	08 d2       	rcall	.+1040   	; 0x2e62 <__fp_split3>
    2a52:	68 f3       	brcs	.-38     	; 0x2a2e <__addsf3x+0xa6>
    2a54:	09 2e       	mov	r0, r25
    2a56:	05 2a       	or	r0, r21
    2a58:	c1 f3       	breq	.-16     	; 0x2a4a <__addsf3x+0xc2>
    2a5a:	26 17       	cp	r18, r22
    2a5c:	37 07       	cpc	r19, r23
    2a5e:	48 07       	cpc	r20, r24
    2a60:	59 07       	cpc	r21, r25
    2a62:	38 f0       	brcs	.+14     	; 0x2a72 <atan2+0x26>
    2a64:	0e 2e       	mov	r0, r30
    2a66:	07 f8       	bld	r0, 7
    2a68:	e0 25       	eor	r30, r0
    2a6a:	69 f0       	breq	.+26     	; 0x2a86 <atan2+0x3a>
    2a6c:	e0 25       	eor	r30, r0
    2a6e:	e0 64       	ori	r30, 0x40	; 64
    2a70:	0a c0       	rjmp	.+20     	; 0x2a86 <atan2+0x3a>
    2a72:	ef 63       	ori	r30, 0x3F	; 63
    2a74:	07 f8       	bld	r0, 7
    2a76:	00 94       	com	r0
    2a78:	07 fa       	bst	r0, 7
    2a7a:	db 01       	movw	r26, r22
    2a7c:	b9 01       	movw	r22, r18
    2a7e:	9d 01       	movw	r18, r26
    2a80:	dc 01       	movw	r26, r24
    2a82:	ca 01       	movw	r24, r20
    2a84:	ad 01       	movw	r20, r26
    2a86:	ef 93       	push	r30
    2a88:	4a d0       	rcall	.+148    	; 0x2b1e <__divsf3_pse>
    2a8a:	c9 d1       	rcall	.+914    	; 0x2e1e <__fp_round>
    2a8c:	0a d0       	rcall	.+20     	; 0x2aa2 <atan>
    2a8e:	5f 91       	pop	r21
    2a90:	55 23       	and	r21, r21
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <atan2+0x54>
    2a94:	2b ed       	ldi	r18, 0xDB	; 219
    2a96:	3f e0       	ldi	r19, 0x0F	; 15
    2a98:	49 e4       	ldi	r20, 0x49	; 73
    2a9a:	50 fd       	sbrc	r21, 0
    2a9c:	49 ec       	ldi	r20, 0xC9	; 201
    2a9e:	63 cf       	rjmp	.-314    	; 0x2966 <__addsf3>
    2aa0:	08 95       	ret

00002aa2 <atan>:
    2aa2:	df 93       	push	r29
    2aa4:	dd 27       	eor	r29, r29
    2aa6:	b9 2f       	mov	r27, r25
    2aa8:	bf 77       	andi	r27, 0x7F	; 127
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	16 16       	cp	r1, r22
    2ab0:	17 06       	cpc	r1, r23
    2ab2:	48 07       	cpc	r20, r24
    2ab4:	5b 07       	cpc	r21, r27
    2ab6:	10 f4       	brcc	.+4      	; 0x2abc <atan+0x1a>
    2ab8:	d9 2f       	mov	r29, r25
    2aba:	00 d2       	rcall	.+1024   	; 0x2ebc <inverse>
    2abc:	9f 93       	push	r25
    2abe:	8f 93       	push	r24
    2ac0:	7f 93       	push	r23
    2ac2:	6f 93       	push	r22
    2ac4:	5b d3       	rcall	.+1718   	; 0x317c <square>
    2ac6:	ec ea       	ldi	r30, 0xAC	; 172
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	4e d1       	rcall	.+668    	; 0x2d68 <__fp_powser>
    2acc:	a8 d1       	rcall	.+848    	; 0x2e1e <__fp_round>
    2ace:	2f 91       	pop	r18
    2ad0:	3f 91       	pop	r19
    2ad2:	4f 91       	pop	r20
    2ad4:	5f 91       	pop	r21
    2ad6:	b3 d2       	rcall	.+1382   	; 0x303e <__mulsf3x>
    2ad8:	dd 23       	and	r29, r29
    2ada:	49 f0       	breq	.+18     	; 0x2aee <atan+0x4c>
    2adc:	90 58       	subi	r25, 0x80	; 128
    2ade:	a2 ea       	ldi	r26, 0xA2	; 162
    2ae0:	2a ed       	ldi	r18, 0xDA	; 218
    2ae2:	3f e0       	ldi	r19, 0x0F	; 15
    2ae4:	49 ec       	ldi	r20, 0xC9	; 201
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	d0 78       	andi	r29, 0x80	; 128
    2aea:	5d 27       	eor	r21, r29
    2aec:	4d df       	rcall	.-358    	; 0x2988 <__addsf3x>
    2aee:	df 91       	pop	r29
    2af0:	96 c1       	rjmp	.+812    	; 0x2e1e <__fp_round>

00002af2 <__cmpsf2>:
    2af2:	0d d1       	rcall	.+538    	; 0x2d0e <__fp_cmp>
    2af4:	08 f4       	brcc	.+2      	; 0x2af8 <__cmpsf2+0x6>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	08 95       	ret

00002afa <cos>:
    2afa:	6a d1       	rcall	.+724    	; 0x2dd0 <__fp_rempio2>
    2afc:	e3 95       	inc	r30
    2afe:	a0 c1       	rjmp	.+832    	; 0x2e40 <__fp_sinus>

00002b00 <__divsf3>:
    2b00:	0c d0       	rcall	.+24     	; 0x2b1a <__divsf3x>
    2b02:	8d c1       	rjmp	.+794    	; 0x2e1e <__fp_round>
    2b04:	5d d1       	rcall	.+698    	; 0x2dc0 <__fp_pscB>
    2b06:	40 f0       	brcs	.+16     	; 0x2b18 <__divsf3+0x18>
    2b08:	54 d1       	rcall	.+680    	; 0x2db2 <__fp_pscA>
    2b0a:	30 f0       	brcs	.+12     	; 0x2b18 <__divsf3+0x18>
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <__divsf3+0x16>
    2b0e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b10:	19 f0       	breq	.+6      	; 0x2b18 <__divsf3+0x18>
    2b12:	21 c1       	rjmp	.+578    	; 0x2d56 <__fp_inf>
    2b14:	51 11       	cpse	r21, r1
    2b16:	c8 c1       	rjmp	.+912    	; 0x2ea8 <__fp_szero>
    2b18:	24 c1       	rjmp	.+584    	; 0x2d62 <__fp_nan>

00002b1a <__divsf3x>:
    2b1a:	a3 d1       	rcall	.+838    	; 0x2e62 <__fp_split3>
    2b1c:	98 f3       	brcs	.-26     	; 0x2b04 <__divsf3+0x4>

00002b1e <__divsf3_pse>:
    2b1e:	99 23       	and	r25, r25
    2b20:	c9 f3       	breq	.-14     	; 0x2b14 <__divsf3+0x14>
    2b22:	55 23       	and	r21, r21
    2b24:	b1 f3       	breq	.-20     	; 0x2b12 <__divsf3+0x12>
    2b26:	95 1b       	sub	r25, r21
    2b28:	55 0b       	sbc	r21, r21
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	aa 27       	eor	r26, r26
    2b2e:	62 17       	cp	r22, r18
    2b30:	73 07       	cpc	r23, r19
    2b32:	84 07       	cpc	r24, r20
    2b34:	38 f0       	brcs	.+14     	; 0x2b44 <__divsf3_pse+0x26>
    2b36:	9f 5f       	subi	r25, 0xFF	; 255
    2b38:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3a:	22 0f       	add	r18, r18
    2b3c:	33 1f       	adc	r19, r19
    2b3e:	44 1f       	adc	r20, r20
    2b40:	aa 1f       	adc	r26, r26
    2b42:	a9 f3       	breq	.-22     	; 0x2b2e <__divsf3_pse+0x10>
    2b44:	33 d0       	rcall	.+102    	; 0x2bac <__divsf3_pse+0x8e>
    2b46:	0e 2e       	mov	r0, r30
    2b48:	3a f0       	brmi	.+14     	; 0x2b58 <__divsf3_pse+0x3a>
    2b4a:	e0 e8       	ldi	r30, 0x80	; 128
    2b4c:	30 d0       	rcall	.+96     	; 0x2bae <__divsf3_pse+0x90>
    2b4e:	91 50       	subi	r25, 0x01	; 1
    2b50:	50 40       	sbci	r21, 0x00	; 0
    2b52:	e6 95       	lsr	r30
    2b54:	00 1c       	adc	r0, r0
    2b56:	ca f7       	brpl	.-14     	; 0x2b4a <__divsf3_pse+0x2c>
    2b58:	29 d0       	rcall	.+82     	; 0x2bac <__divsf3_pse+0x8e>
    2b5a:	fe 2f       	mov	r31, r30
    2b5c:	27 d0       	rcall	.+78     	; 0x2bac <__divsf3_pse+0x8e>
    2b5e:	66 0f       	add	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	88 1f       	adc	r24, r24
    2b64:	bb 1f       	adc	r27, r27
    2b66:	26 17       	cp	r18, r22
    2b68:	37 07       	cpc	r19, r23
    2b6a:	48 07       	cpc	r20, r24
    2b6c:	ab 07       	cpc	r26, r27
    2b6e:	b0 e8       	ldi	r27, 0x80	; 128
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <__divsf3_pse+0x56>
    2b72:	bb 0b       	sbc	r27, r27
    2b74:	80 2d       	mov	r24, r0
    2b76:	bf 01       	movw	r22, r30
    2b78:	ff 27       	eor	r31, r31
    2b7a:	93 58       	subi	r25, 0x83	; 131
    2b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7e:	2a f0       	brmi	.+10     	; 0x2b8a <__divsf3_pse+0x6c>
    2b80:	9e 3f       	cpi	r25, 0xFE	; 254
    2b82:	51 05       	cpc	r21, r1
    2b84:	68 f0       	brcs	.+26     	; 0x2ba0 <__divsf3_pse+0x82>
    2b86:	e7 c0       	rjmp	.+462    	; 0x2d56 <__fp_inf>
    2b88:	8f c1       	rjmp	.+798    	; 0x2ea8 <__fp_szero>
    2b8a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b8c:	ec f3       	brlt	.-6      	; 0x2b88 <__divsf3_pse+0x6a>
    2b8e:	98 3e       	cpi	r25, 0xE8	; 232
    2b90:	dc f3       	brlt	.-10     	; 0x2b88 <__divsf3_pse+0x6a>
    2b92:	86 95       	lsr	r24
    2b94:	77 95       	ror	r23
    2b96:	67 95       	ror	r22
    2b98:	b7 95       	ror	r27
    2b9a:	f7 95       	ror	r31
    2b9c:	9f 5f       	subi	r25, 0xFF	; 255
    2b9e:	c9 f7       	brne	.-14     	; 0x2b92 <__divsf3_pse+0x74>
    2ba0:	88 0f       	add	r24, r24
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	96 95       	lsr	r25
    2ba6:	87 95       	ror	r24
    2ba8:	97 f9       	bld	r25, 7
    2baa:	08 95       	ret
    2bac:	e1 e0       	ldi	r30, 0x01	; 1
    2bae:	66 0f       	add	r22, r22
    2bb0:	77 1f       	adc	r23, r23
    2bb2:	88 1f       	adc	r24, r24
    2bb4:	bb 1f       	adc	r27, r27
    2bb6:	62 17       	cp	r22, r18
    2bb8:	73 07       	cpc	r23, r19
    2bba:	84 07       	cpc	r24, r20
    2bbc:	ba 07       	cpc	r27, r26
    2bbe:	20 f0       	brcs	.+8      	; 0x2bc8 <__divsf3_pse+0xaa>
    2bc0:	62 1b       	sub	r22, r18
    2bc2:	73 0b       	sbc	r23, r19
    2bc4:	84 0b       	sbc	r24, r20
    2bc6:	ba 0b       	sbc	r27, r26
    2bc8:	ee 1f       	adc	r30, r30
    2bca:	88 f7       	brcc	.-30     	; 0x2bae <__divsf3_pse+0x90>
    2bcc:	e0 95       	com	r30
    2bce:	08 95       	ret
    2bd0:	19 f4       	brne	.+6      	; 0x2bd8 <__divsf3_pse+0xba>
    2bd2:	0e f0       	brts	.+2      	; 0x2bd6 <__divsf3_pse+0xb8>
    2bd4:	c0 c0       	rjmp	.+384    	; 0x2d56 <__fp_inf>
    2bd6:	67 c1       	rjmp	.+718    	; 0x2ea6 <__fp_zero>
    2bd8:	c4 c0       	rjmp	.+392    	; 0x2d62 <__fp_nan>

00002bda <exp>:
    2bda:	4b d1       	rcall	.+662    	; 0x2e72 <__fp_splitA>
    2bdc:	c8 f3       	brcs	.-14     	; 0x2bd0 <__divsf3_pse+0xb2>
    2bde:	96 38       	cpi	r25, 0x86	; 134
    2be0:	c0 f7       	brcc	.-16     	; 0x2bd2 <__divsf3_pse+0xb4>
    2be2:	07 f8       	bld	r0, 7
    2be4:	0f 92       	push	r0
    2be6:	e8 94       	clt
    2be8:	2b e3       	ldi	r18, 0x3B	; 59
    2bea:	3a ea       	ldi	r19, 0xAA	; 170
    2bec:	48 eb       	ldi	r20, 0xB8	; 184
    2bee:	5f e7       	ldi	r21, 0x7F	; 127
    2bf0:	28 d2       	rcall	.+1104   	; 0x3042 <__mulsf3_pse>
    2bf2:	0f 92       	push	r0
    2bf4:	0f 92       	push	r0
    2bf6:	0f 92       	push	r0
    2bf8:	4d b7       	in	r20, 0x3d	; 61
    2bfa:	5e b7       	in	r21, 0x3e	; 62
    2bfc:	0f 92       	push	r0
    2bfe:	e0 d1       	rcall	.+960    	; 0x2fc0 <modf>
    2c00:	e9 ed       	ldi	r30, 0xD9	; 217
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	b1 d0       	rcall	.+354    	; 0x2d68 <__fp_powser>
    2c06:	4f 91       	pop	r20
    2c08:	5f 91       	pop	r21
    2c0a:	ef 91       	pop	r30
    2c0c:	ff 91       	pop	r31
    2c0e:	e5 95       	asr	r30
    2c10:	ee 1f       	adc	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	49 f0       	breq	.+18     	; 0x2c28 <exp+0x4e>
    2c16:	fe 57       	subi	r31, 0x7E	; 126
    2c18:	e0 68       	ori	r30, 0x80	; 128
    2c1a:	44 27       	eor	r20, r20
    2c1c:	ee 0f       	add	r30, r30
    2c1e:	44 1f       	adc	r20, r20
    2c20:	fa 95       	dec	r31
    2c22:	e1 f7       	brne	.-8      	; 0x2c1c <exp+0x42>
    2c24:	41 95       	neg	r20
    2c26:	55 0b       	sbc	r21, r21
    2c28:	52 d1       	rcall	.+676    	; 0x2ece <ldexp>
    2c2a:	0f 90       	pop	r0
    2c2c:	07 fe       	sbrs	r0, 7
    2c2e:	46 c1       	rjmp	.+652    	; 0x2ebc <inverse>
    2c30:	08 95       	ret

00002c32 <__fixsfsi>:
    2c32:	04 d0       	rcall	.+8      	; 0x2c3c <__fixunssfsi>
    2c34:	68 94       	set
    2c36:	b1 11       	cpse	r27, r1
    2c38:	37 c1       	rjmp	.+622    	; 0x2ea8 <__fp_szero>
    2c3a:	08 95       	ret

00002c3c <__fixunssfsi>:
    2c3c:	1a d1       	rcall	.+564    	; 0x2e72 <__fp_splitA>
    2c3e:	88 f0       	brcs	.+34     	; 0x2c62 <__fixunssfsi+0x26>
    2c40:	9f 57       	subi	r25, 0x7F	; 127
    2c42:	90 f0       	brcs	.+36     	; 0x2c68 <__fixunssfsi+0x2c>
    2c44:	b9 2f       	mov	r27, r25
    2c46:	99 27       	eor	r25, r25
    2c48:	b7 51       	subi	r27, 0x17	; 23
    2c4a:	a0 f0       	brcs	.+40     	; 0x2c74 <__fixunssfsi+0x38>
    2c4c:	d1 f0       	breq	.+52     	; 0x2c82 <__fixunssfsi+0x46>
    2c4e:	66 0f       	add	r22, r22
    2c50:	77 1f       	adc	r23, r23
    2c52:	88 1f       	adc	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	1a f0       	brmi	.+6      	; 0x2c5e <__fixunssfsi+0x22>
    2c58:	ba 95       	dec	r27
    2c5a:	c9 f7       	brne	.-14     	; 0x2c4e <__fixunssfsi+0x12>
    2c5c:	12 c0       	rjmp	.+36     	; 0x2c82 <__fixunssfsi+0x46>
    2c5e:	b1 30       	cpi	r27, 0x01	; 1
    2c60:	81 f0       	breq	.+32     	; 0x2c82 <__fixunssfsi+0x46>
    2c62:	21 d1       	rcall	.+578    	; 0x2ea6 <__fp_zero>
    2c64:	b1 e0       	ldi	r27, 0x01	; 1
    2c66:	08 95       	ret
    2c68:	1e c1       	rjmp	.+572    	; 0x2ea6 <__fp_zero>
    2c6a:	67 2f       	mov	r22, r23
    2c6c:	78 2f       	mov	r23, r24
    2c6e:	88 27       	eor	r24, r24
    2c70:	b8 5f       	subi	r27, 0xF8	; 248
    2c72:	39 f0       	breq	.+14     	; 0x2c82 <__fixunssfsi+0x46>
    2c74:	b9 3f       	cpi	r27, 0xF9	; 249
    2c76:	cc f3       	brlt	.-14     	; 0x2c6a <__fixunssfsi+0x2e>
    2c78:	86 95       	lsr	r24
    2c7a:	77 95       	ror	r23
    2c7c:	67 95       	ror	r22
    2c7e:	b3 95       	inc	r27
    2c80:	d9 f7       	brne	.-10     	; 0x2c78 <__fixunssfsi+0x3c>
    2c82:	3e f4       	brtc	.+14     	; 0x2c92 <__fixunssfsi+0x56>
    2c84:	90 95       	com	r25
    2c86:	80 95       	com	r24
    2c88:	70 95       	com	r23
    2c8a:	61 95       	neg	r22
    2c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c90:	9f 4f       	sbci	r25, 0xFF	; 255
    2c92:	08 95       	ret

00002c94 <__floatunsisf>:
    2c94:	e8 94       	clt
    2c96:	09 c0       	rjmp	.+18     	; 0x2caa <__floatsisf+0x12>

00002c98 <__floatsisf>:
    2c98:	97 fb       	bst	r25, 7
    2c9a:	3e f4       	brtc	.+14     	; 0x2caa <__floatsisf+0x12>
    2c9c:	90 95       	com	r25
    2c9e:	80 95       	com	r24
    2ca0:	70 95       	com	r23
    2ca2:	61 95       	neg	r22
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    2caa:	99 23       	and	r25, r25
    2cac:	a9 f0       	breq	.+42     	; 0x2cd8 <__floatsisf+0x40>
    2cae:	f9 2f       	mov	r31, r25
    2cb0:	96 e9       	ldi	r25, 0x96	; 150
    2cb2:	bb 27       	eor	r27, r27
    2cb4:	93 95       	inc	r25
    2cb6:	f6 95       	lsr	r31
    2cb8:	87 95       	ror	r24
    2cba:	77 95       	ror	r23
    2cbc:	67 95       	ror	r22
    2cbe:	b7 95       	ror	r27
    2cc0:	f1 11       	cpse	r31, r1
    2cc2:	f8 cf       	rjmp	.-16     	; 0x2cb4 <__floatsisf+0x1c>
    2cc4:	fa f4       	brpl	.+62     	; 0x2d04 <__floatsisf+0x6c>
    2cc6:	bb 0f       	add	r27, r27
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <__floatsisf+0x36>
    2cca:	60 ff       	sbrs	r22, 0
    2ccc:	1b c0       	rjmp	.+54     	; 0x2d04 <__floatsisf+0x6c>
    2cce:	6f 5f       	subi	r22, 0xFF	; 255
    2cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd6:	16 c0       	rjmp	.+44     	; 0x2d04 <__floatsisf+0x6c>
    2cd8:	88 23       	and	r24, r24
    2cda:	11 f0       	breq	.+4      	; 0x2ce0 <__floatsisf+0x48>
    2cdc:	96 e9       	ldi	r25, 0x96	; 150
    2cde:	11 c0       	rjmp	.+34     	; 0x2d02 <__floatsisf+0x6a>
    2ce0:	77 23       	and	r23, r23
    2ce2:	21 f0       	breq	.+8      	; 0x2cec <__floatsisf+0x54>
    2ce4:	9e e8       	ldi	r25, 0x8E	; 142
    2ce6:	87 2f       	mov	r24, r23
    2ce8:	76 2f       	mov	r23, r22
    2cea:	05 c0       	rjmp	.+10     	; 0x2cf6 <__floatsisf+0x5e>
    2cec:	66 23       	and	r22, r22
    2cee:	71 f0       	breq	.+28     	; 0x2d0c <__floatsisf+0x74>
    2cf0:	96 e8       	ldi	r25, 0x86	; 134
    2cf2:	86 2f       	mov	r24, r22
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	2a f0       	brmi	.+10     	; 0x2d04 <__floatsisf+0x6c>
    2cfa:	9a 95       	dec	r25
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	da f7       	brpl	.-10     	; 0x2cfa <__floatsisf+0x62>
    2d04:	88 0f       	add	r24, r24
    2d06:	96 95       	lsr	r25
    2d08:	87 95       	ror	r24
    2d0a:	97 f9       	bld	r25, 7
    2d0c:	08 95       	ret

00002d0e <__fp_cmp>:
    2d0e:	99 0f       	add	r25, r25
    2d10:	00 08       	sbc	r0, r0
    2d12:	55 0f       	add	r21, r21
    2d14:	aa 0b       	sbc	r26, r26
    2d16:	e0 e8       	ldi	r30, 0x80	; 128
    2d18:	fe ef       	ldi	r31, 0xFE	; 254
    2d1a:	16 16       	cp	r1, r22
    2d1c:	17 06       	cpc	r1, r23
    2d1e:	e8 07       	cpc	r30, r24
    2d20:	f9 07       	cpc	r31, r25
    2d22:	c0 f0       	brcs	.+48     	; 0x2d54 <__fp_cmp+0x46>
    2d24:	12 16       	cp	r1, r18
    2d26:	13 06       	cpc	r1, r19
    2d28:	e4 07       	cpc	r30, r20
    2d2a:	f5 07       	cpc	r31, r21
    2d2c:	98 f0       	brcs	.+38     	; 0x2d54 <__fp_cmp+0x46>
    2d2e:	62 1b       	sub	r22, r18
    2d30:	73 0b       	sbc	r23, r19
    2d32:	84 0b       	sbc	r24, r20
    2d34:	95 0b       	sbc	r25, r21
    2d36:	39 f4       	brne	.+14     	; 0x2d46 <__fp_cmp+0x38>
    2d38:	0a 26       	eor	r0, r26
    2d3a:	61 f0       	breq	.+24     	; 0x2d54 <__fp_cmp+0x46>
    2d3c:	23 2b       	or	r18, r19
    2d3e:	24 2b       	or	r18, r20
    2d40:	25 2b       	or	r18, r21
    2d42:	21 f4       	brne	.+8      	; 0x2d4c <__fp_cmp+0x3e>
    2d44:	08 95       	ret
    2d46:	0a 26       	eor	r0, r26
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <__fp_cmp+0x3e>
    2d4a:	a1 40       	sbci	r26, 0x01	; 1
    2d4c:	a6 95       	lsr	r26
    2d4e:	8f ef       	ldi	r24, 0xFF	; 255
    2d50:	81 1d       	adc	r24, r1
    2d52:	81 1d       	adc	r24, r1
    2d54:	08 95       	ret

00002d56 <__fp_inf>:
    2d56:	97 f9       	bld	r25, 7
    2d58:	9f 67       	ori	r25, 0x7F	; 127
    2d5a:	80 e8       	ldi	r24, 0x80	; 128
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	08 95       	ret

00002d62 <__fp_nan>:
    2d62:	9f ef       	ldi	r25, 0xFF	; 255
    2d64:	80 ec       	ldi	r24, 0xC0	; 192
    2d66:	08 95       	ret

00002d68 <__fp_powser>:
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	1f 93       	push	r17
    2d6e:	0f 93       	push	r16
    2d70:	ff 92       	push	r15
    2d72:	ef 92       	push	r14
    2d74:	df 92       	push	r13
    2d76:	7b 01       	movw	r14, r22
    2d78:	8c 01       	movw	r16, r24
    2d7a:	68 94       	set
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <__fp_powser+0x20>
    2d7e:	da 2e       	mov	r13, r26
    2d80:	ef 01       	movw	r28, r30
    2d82:	5d d1       	rcall	.+698    	; 0x303e <__mulsf3x>
    2d84:	fe 01       	movw	r30, r28
    2d86:	e8 94       	clt
    2d88:	a5 91       	lpm	r26, Z+
    2d8a:	25 91       	lpm	r18, Z+
    2d8c:	35 91       	lpm	r19, Z+
    2d8e:	45 91       	lpm	r20, Z+
    2d90:	55 91       	lpm	r21, Z+
    2d92:	ae f3       	brts	.-22     	; 0x2d7e <__fp_powser+0x16>
    2d94:	ef 01       	movw	r28, r30
    2d96:	f8 dd       	rcall	.-1040   	; 0x2988 <__addsf3x>
    2d98:	fe 01       	movw	r30, r28
    2d9a:	97 01       	movw	r18, r14
    2d9c:	a8 01       	movw	r20, r16
    2d9e:	da 94       	dec	r13
    2da0:	79 f7       	brne	.-34     	; 0x2d80 <__fp_powser+0x18>
    2da2:	df 90       	pop	r13
    2da4:	ef 90       	pop	r14
    2da6:	ff 90       	pop	r15
    2da8:	0f 91       	pop	r16
    2daa:	1f 91       	pop	r17
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <__fp_pscA>:
    2db2:	00 24       	eor	r0, r0
    2db4:	0a 94       	dec	r0
    2db6:	16 16       	cp	r1, r22
    2db8:	17 06       	cpc	r1, r23
    2dba:	18 06       	cpc	r1, r24
    2dbc:	09 06       	cpc	r0, r25
    2dbe:	08 95       	ret

00002dc0 <__fp_pscB>:
    2dc0:	00 24       	eor	r0, r0
    2dc2:	0a 94       	dec	r0
    2dc4:	12 16       	cp	r1, r18
    2dc6:	13 06       	cpc	r1, r19
    2dc8:	14 06       	cpc	r1, r20
    2dca:	05 06       	cpc	r0, r21
    2dcc:	08 95       	ret
    2dce:	c9 cf       	rjmp	.-110    	; 0x2d62 <__fp_nan>

00002dd0 <__fp_rempio2>:
    2dd0:	50 d0       	rcall	.+160    	; 0x2e72 <__fp_splitA>
    2dd2:	e8 f3       	brcs	.-6      	; 0x2dce <__fp_pscB+0xe>
    2dd4:	e8 94       	clt
    2dd6:	e0 e0       	ldi	r30, 0x00	; 0
    2dd8:	bb 27       	eor	r27, r27
    2dda:	9f 57       	subi	r25, 0x7F	; 127
    2ddc:	f0 f0       	brcs	.+60     	; 0x2e1a <__fp_rempio2+0x4a>
    2dde:	2a ed       	ldi	r18, 0xDA	; 218
    2de0:	3f e0       	ldi	r19, 0x0F	; 15
    2de2:	49 ec       	ldi	r20, 0xC9	; 201
    2de4:	06 c0       	rjmp	.+12     	; 0x2df2 <__fp_rempio2+0x22>
    2de6:	ee 0f       	add	r30, r30
    2de8:	bb 0f       	add	r27, r27
    2dea:	66 1f       	adc	r22, r22
    2dec:	77 1f       	adc	r23, r23
    2dee:	88 1f       	adc	r24, r24
    2df0:	28 f0       	brcs	.+10     	; 0x2dfc <__fp_rempio2+0x2c>
    2df2:	b2 3a       	cpi	r27, 0xA2	; 162
    2df4:	62 07       	cpc	r22, r18
    2df6:	73 07       	cpc	r23, r19
    2df8:	84 07       	cpc	r24, r20
    2dfa:	28 f0       	brcs	.+10     	; 0x2e06 <__fp_rempio2+0x36>
    2dfc:	b2 5a       	subi	r27, 0xA2	; 162
    2dfe:	62 0b       	sbc	r22, r18
    2e00:	73 0b       	sbc	r23, r19
    2e02:	84 0b       	sbc	r24, r20
    2e04:	e3 95       	inc	r30
    2e06:	9a 95       	dec	r25
    2e08:	72 f7       	brpl	.-36     	; 0x2de6 <__fp_rempio2+0x16>
    2e0a:	80 38       	cpi	r24, 0x80	; 128
    2e0c:	30 f4       	brcc	.+12     	; 0x2e1a <__fp_rempio2+0x4a>
    2e0e:	9a 95       	dec	r25
    2e10:	bb 0f       	add	r27, r27
    2e12:	66 1f       	adc	r22, r22
    2e14:	77 1f       	adc	r23, r23
    2e16:	88 1f       	adc	r24, r24
    2e18:	d2 f7       	brpl	.-12     	; 0x2e0e <__fp_rempio2+0x3e>
    2e1a:	90 48       	sbci	r25, 0x80	; 128
    2e1c:	b4 c1       	rjmp	.+872    	; 0x3186 <__fp_mpack_finite>

00002e1e <__fp_round>:
    2e1e:	09 2e       	mov	r0, r25
    2e20:	03 94       	inc	r0
    2e22:	00 0c       	add	r0, r0
    2e24:	11 f4       	brne	.+4      	; 0x2e2a <__fp_round+0xc>
    2e26:	88 23       	and	r24, r24
    2e28:	52 f0       	brmi	.+20     	; 0x2e3e <__fp_round+0x20>
    2e2a:	bb 0f       	add	r27, r27
    2e2c:	40 f4       	brcc	.+16     	; 0x2e3e <__fp_round+0x20>
    2e2e:	bf 2b       	or	r27, r31
    2e30:	11 f4       	brne	.+4      	; 0x2e36 <__fp_round+0x18>
    2e32:	60 ff       	sbrs	r22, 0
    2e34:	04 c0       	rjmp	.+8      	; 0x2e3e <__fp_round+0x20>
    2e36:	6f 5f       	subi	r22, 0xFF	; 255
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3e:	08 95       	ret

00002e40 <__fp_sinus>:
    2e40:	ef 93       	push	r30
    2e42:	e0 ff       	sbrs	r30, 0
    2e44:	06 c0       	rjmp	.+12     	; 0x2e52 <__fp_sinus+0x12>
    2e46:	a2 ea       	ldi	r26, 0xA2	; 162
    2e48:	2a ed       	ldi	r18, 0xDA	; 218
    2e4a:	3f e0       	ldi	r19, 0x0F	; 15
    2e4c:	49 ec       	ldi	r20, 0xC9	; 201
    2e4e:	5f eb       	ldi	r21, 0xBF	; 191
    2e50:	9b dd       	rcall	.-1226   	; 0x2988 <__addsf3x>
    2e52:	e5 df       	rcall	.-54     	; 0x2e1e <__fp_round>
    2e54:	0f 90       	pop	r0
    2e56:	03 94       	inc	r0
    2e58:	01 fc       	sbrc	r0, 1
    2e5a:	90 58       	subi	r25, 0x80	; 128
    2e5c:	e1 e0       	ldi	r30, 0x01	; 1
    2e5e:	f1 e0       	ldi	r31, 0x01	; 1
    2e60:	a5 c1       	rjmp	.+842    	; 0x31ac <__fp_powsodd>

00002e62 <__fp_split3>:
    2e62:	57 fd       	sbrc	r21, 7
    2e64:	90 58       	subi	r25, 0x80	; 128
    2e66:	44 0f       	add	r20, r20
    2e68:	55 1f       	adc	r21, r21
    2e6a:	59 f0       	breq	.+22     	; 0x2e82 <__fp_splitA+0x10>
    2e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e6e:	71 f0       	breq	.+28     	; 0x2e8c <__fp_splitA+0x1a>
    2e70:	47 95       	ror	r20

00002e72 <__fp_splitA>:
    2e72:	88 0f       	add	r24, r24
    2e74:	97 fb       	bst	r25, 7
    2e76:	99 1f       	adc	r25, r25
    2e78:	61 f0       	breq	.+24     	; 0x2e92 <__fp_splitA+0x20>
    2e7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e7c:	79 f0       	breq	.+30     	; 0x2e9c <__fp_splitA+0x2a>
    2e7e:	87 95       	ror	r24
    2e80:	08 95       	ret
    2e82:	12 16       	cp	r1, r18
    2e84:	13 06       	cpc	r1, r19
    2e86:	14 06       	cpc	r1, r20
    2e88:	55 1f       	adc	r21, r21
    2e8a:	f2 cf       	rjmp	.-28     	; 0x2e70 <__fp_split3+0xe>
    2e8c:	46 95       	lsr	r20
    2e8e:	f1 df       	rcall	.-30     	; 0x2e72 <__fp_splitA>
    2e90:	08 c0       	rjmp	.+16     	; 0x2ea2 <__fp_splitA+0x30>
    2e92:	16 16       	cp	r1, r22
    2e94:	17 06       	cpc	r1, r23
    2e96:	18 06       	cpc	r1, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	f1 cf       	rjmp	.-30     	; 0x2e7e <__fp_splitA+0xc>
    2e9c:	86 95       	lsr	r24
    2e9e:	71 05       	cpc	r23, r1
    2ea0:	61 05       	cpc	r22, r1
    2ea2:	08 94       	sec
    2ea4:	08 95       	ret

00002ea6 <__fp_zero>:
    2ea6:	e8 94       	clt

00002ea8 <__fp_szero>:
    2ea8:	bb 27       	eor	r27, r27
    2eaa:	66 27       	eor	r22, r22
    2eac:	77 27       	eor	r23, r23
    2eae:	cb 01       	movw	r24, r22
    2eb0:	97 f9       	bld	r25, 7
    2eb2:	08 95       	ret

00002eb4 <__gesf2>:
    2eb4:	2c df       	rcall	.-424    	; 0x2d0e <__fp_cmp>
    2eb6:	08 f4       	brcc	.+2      	; 0x2eba <__gesf2+0x6>
    2eb8:	8f ef       	ldi	r24, 0xFF	; 255
    2eba:	08 95       	ret

00002ebc <inverse>:
    2ebc:	9b 01       	movw	r18, r22
    2ebe:	ac 01       	movw	r20, r24
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	80 e8       	ldi	r24, 0x80	; 128
    2ec6:	9f e3       	ldi	r25, 0x3F	; 63
    2ec8:	1b ce       	rjmp	.-970    	; 0x2b00 <__divsf3>
    2eca:	45 cf       	rjmp	.-374    	; 0x2d56 <__fp_inf>
    2ecc:	5a c1       	rjmp	.+692    	; 0x3182 <__fp_mpack>

00002ece <ldexp>:
    2ece:	d1 df       	rcall	.-94     	; 0x2e72 <__fp_splitA>
    2ed0:	e8 f3       	brcs	.-6      	; 0x2ecc <inverse+0x10>
    2ed2:	99 23       	and	r25, r25
    2ed4:	d9 f3       	breq	.-10     	; 0x2ecc <inverse+0x10>
    2ed6:	94 0f       	add	r25, r20
    2ed8:	51 1d       	adc	r21, r1
    2eda:	bb f3       	brvs	.-18     	; 0x2eca <inverse+0xe>
    2edc:	91 50       	subi	r25, 0x01	; 1
    2ede:	50 40       	sbci	r21, 0x00	; 0
    2ee0:	94 f0       	brlt	.+36     	; 0x2f06 <ldexp+0x38>
    2ee2:	59 f0       	breq	.+22     	; 0x2efa <ldexp+0x2c>
    2ee4:	88 23       	and	r24, r24
    2ee6:	32 f0       	brmi	.+12     	; 0x2ef4 <ldexp+0x26>
    2ee8:	66 0f       	add	r22, r22
    2eea:	77 1f       	adc	r23, r23
    2eec:	88 1f       	adc	r24, r24
    2eee:	91 50       	subi	r25, 0x01	; 1
    2ef0:	50 40       	sbci	r21, 0x00	; 0
    2ef2:	c1 f7       	brne	.-16     	; 0x2ee4 <ldexp+0x16>
    2ef4:	9e 3f       	cpi	r25, 0xFE	; 254
    2ef6:	51 05       	cpc	r21, r1
    2ef8:	44 f7       	brge	.-48     	; 0x2eca <inverse+0xe>
    2efa:	88 0f       	add	r24, r24
    2efc:	91 1d       	adc	r25, r1
    2efe:	96 95       	lsr	r25
    2f00:	87 95       	ror	r24
    2f02:	97 f9       	bld	r25, 7
    2f04:	08 95       	ret
    2f06:	5f 3f       	cpi	r21, 0xFF	; 255
    2f08:	ac f0       	brlt	.+42     	; 0x2f34 <ldexp+0x66>
    2f0a:	98 3e       	cpi	r25, 0xE8	; 232
    2f0c:	9c f0       	brlt	.+38     	; 0x2f34 <ldexp+0x66>
    2f0e:	bb 27       	eor	r27, r27
    2f10:	86 95       	lsr	r24
    2f12:	77 95       	ror	r23
    2f14:	67 95       	ror	r22
    2f16:	b7 95       	ror	r27
    2f18:	08 f4       	brcc	.+2      	; 0x2f1c <ldexp+0x4e>
    2f1a:	b1 60       	ori	r27, 0x01	; 1
    2f1c:	93 95       	inc	r25
    2f1e:	c1 f7       	brne	.-16     	; 0x2f10 <ldexp+0x42>
    2f20:	bb 0f       	add	r27, r27
    2f22:	58 f7       	brcc	.-42     	; 0x2efa <ldexp+0x2c>
    2f24:	11 f4       	brne	.+4      	; 0x2f2a <ldexp+0x5c>
    2f26:	60 ff       	sbrs	r22, 0
    2f28:	e8 cf       	rjmp	.-48     	; 0x2efa <ldexp+0x2c>
    2f2a:	6f 5f       	subi	r22, 0xFF	; 255
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	e3 cf       	rjmp	.-58     	; 0x2efa <ldexp+0x2c>
    2f34:	b9 cf       	rjmp	.-142    	; 0x2ea8 <__fp_szero>
    2f36:	0e f0       	brts	.+2      	; 0x2f3a <ldexp+0x6c>
    2f38:	24 c1       	rjmp	.+584    	; 0x3182 <__fp_mpack>
    2f3a:	13 cf       	rjmp	.-474    	; 0x2d62 <__fp_nan>
    2f3c:	68 94       	set
    2f3e:	0b cf       	rjmp	.-490    	; 0x2d56 <__fp_inf>

00002f40 <log>:
    2f40:	98 df       	rcall	.-208    	; 0x2e72 <__fp_splitA>
    2f42:	c8 f3       	brcs	.-14     	; 0x2f36 <ldexp+0x68>
    2f44:	99 23       	and	r25, r25
    2f46:	d1 f3       	breq	.-12     	; 0x2f3c <ldexp+0x6e>
    2f48:	c6 f3       	brts	.-16     	; 0x2f3a <ldexp+0x6c>
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	1f 93       	push	r17
    2f50:	0f 93       	push	r16
    2f52:	ff 92       	push	r15
    2f54:	c9 2f       	mov	r28, r25
    2f56:	dd 27       	eor	r29, r29
    2f58:	88 23       	and	r24, r24
    2f5a:	2a f0       	brmi	.+10     	; 0x2f66 <log+0x26>
    2f5c:	21 97       	sbiw	r28, 0x01	; 1
    2f5e:	66 0f       	add	r22, r22
    2f60:	77 1f       	adc	r23, r23
    2f62:	88 1f       	adc	r24, r24
    2f64:	da f7       	brpl	.-10     	; 0x2f5c <log+0x1c>
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f eb       	ldi	r21, 0xBF	; 191
    2f6e:	9f e3       	ldi	r25, 0x3F	; 63
    2f70:	88 39       	cpi	r24, 0x98	; 152
    2f72:	20 f0       	brcs	.+8      	; 0x2f7c <log+0x3c>
    2f74:	80 3e       	cpi	r24, 0xE0	; 224
    2f76:	30 f0       	brcs	.+12     	; 0x2f84 <log+0x44>
    2f78:	21 96       	adiw	r28, 0x01	; 1
    2f7a:	8f 77       	andi	r24, 0x7F	; 127
    2f7c:	f4 dc       	rcall	.-1560   	; 0x2966 <__addsf3>
    2f7e:	ef e1       	ldi	r30, 0x1F	; 31
    2f80:	f1 e0       	ldi	r31, 0x01	; 1
    2f82:	03 c0       	rjmp	.+6      	; 0x2f8a <log+0x4a>
    2f84:	f0 dc       	rcall	.-1568   	; 0x2966 <__addsf3>
    2f86:	ec e4       	ldi	r30, 0x4C	; 76
    2f88:	f1 e0       	ldi	r31, 0x01	; 1
    2f8a:	ee de       	rcall	.-548    	; 0x2d68 <__fp_powser>
    2f8c:	8b 01       	movw	r16, r22
    2f8e:	be 01       	movw	r22, r28
    2f90:	ec 01       	movw	r28, r24
    2f92:	fb 2e       	mov	r15, r27
    2f94:	6f 57       	subi	r22, 0x7F	; 127
    2f96:	71 09       	sbc	r23, r1
    2f98:	75 95       	asr	r23
    2f9a:	77 1f       	adc	r23, r23
    2f9c:	88 0b       	sbc	r24, r24
    2f9e:	99 0b       	sbc	r25, r25
    2fa0:	7b de       	rcall	.-778    	; 0x2c98 <__floatsisf>
    2fa2:	28 e1       	ldi	r18, 0x18	; 24
    2fa4:	32 e7       	ldi	r19, 0x72	; 114
    2fa6:	41 e3       	ldi	r20, 0x31	; 49
    2fa8:	5f e3       	ldi	r21, 0x3F	; 63
    2faa:	49 d0       	rcall	.+146    	; 0x303e <__mulsf3x>
    2fac:	af 2d       	mov	r26, r15
    2fae:	98 01       	movw	r18, r16
    2fb0:	ae 01       	movw	r20, r28
    2fb2:	ff 90       	pop	r15
    2fb4:	0f 91       	pop	r16
    2fb6:	1f 91       	pop	r17
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	e5 dc       	rcall	.-1590   	; 0x2988 <__addsf3x>
    2fbe:	2f cf       	rjmp	.-418    	; 0x2e1e <__fp_round>

00002fc0 <modf>:
    2fc0:	fa 01       	movw	r30, r20
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	aa 0f       	add	r26, r26
    2fc6:	bb 1f       	adc	r27, r27
    2fc8:	9b 01       	movw	r18, r22
    2fca:	ac 01       	movw	r20, r24
    2fcc:	bf 57       	subi	r27, 0x7F	; 127
    2fce:	28 f4       	brcc	.+10     	; 0x2fda <modf+0x1a>
    2fd0:	22 27       	eor	r18, r18
    2fd2:	33 27       	eor	r19, r19
    2fd4:	44 27       	eor	r20, r20
    2fd6:	50 78       	andi	r21, 0x80	; 128
    2fd8:	1f c0       	rjmp	.+62     	; 0x3018 <modf+0x58>
    2fda:	b7 51       	subi	r27, 0x17	; 23
    2fdc:	88 f4       	brcc	.+34     	; 0x3000 <modf+0x40>
    2fde:	ab 2f       	mov	r26, r27
    2fe0:	00 24       	eor	r0, r0
    2fe2:	46 95       	lsr	r20
    2fe4:	37 95       	ror	r19
    2fe6:	27 95       	ror	r18
    2fe8:	01 1c       	adc	r0, r1
    2fea:	a3 95       	inc	r26
    2fec:	d2 f3       	brmi	.-12     	; 0x2fe2 <modf+0x22>
    2fee:	00 20       	and	r0, r0
    2ff0:	69 f0       	breq	.+26     	; 0x300c <modf+0x4c>
    2ff2:	22 0f       	add	r18, r18
    2ff4:	33 1f       	adc	r19, r19
    2ff6:	44 1f       	adc	r20, r20
    2ff8:	b3 95       	inc	r27
    2ffa:	da f3       	brmi	.-10     	; 0x2ff2 <modf+0x32>
    2ffc:	0d d0       	rcall	.+26     	; 0x3018 <modf+0x58>
    2ffe:	b2 cc       	rjmp	.-1692   	; 0x2964 <__subsf3>
    3000:	61 30       	cpi	r22, 0x01	; 1
    3002:	71 05       	cpc	r23, r1
    3004:	a0 e8       	ldi	r26, 0x80	; 128
    3006:	8a 07       	cpc	r24, r26
    3008:	b9 46       	sbci	r27, 0x69	; 105
    300a:	30 f4       	brcc	.+12     	; 0x3018 <modf+0x58>
    300c:	9b 01       	movw	r18, r22
    300e:	ac 01       	movw	r20, r24
    3010:	66 27       	eor	r22, r22
    3012:	77 27       	eor	r23, r23
    3014:	88 27       	eor	r24, r24
    3016:	90 78       	andi	r25, 0x80	; 128
    3018:	30 96       	adiw	r30, 0x00	; 0
    301a:	21 f0       	breq	.+8      	; 0x3024 <modf+0x64>
    301c:	20 83       	st	Z, r18
    301e:	31 83       	std	Z+1, r19	; 0x01
    3020:	42 83       	std	Z+2, r20	; 0x02
    3022:	53 83       	std	Z+3, r21	; 0x03
    3024:	08 95       	ret

00003026 <__mulsf3>:
    3026:	0b d0       	rcall	.+22     	; 0x303e <__mulsf3x>
    3028:	fa ce       	rjmp	.-524    	; 0x2e1e <__fp_round>
    302a:	c3 de       	rcall	.-634    	; 0x2db2 <__fp_pscA>
    302c:	28 f0       	brcs	.+10     	; 0x3038 <__mulsf3+0x12>
    302e:	c8 de       	rcall	.-624    	; 0x2dc0 <__fp_pscB>
    3030:	18 f0       	brcs	.+6      	; 0x3038 <__mulsf3+0x12>
    3032:	95 23       	and	r25, r21
    3034:	09 f0       	breq	.+2      	; 0x3038 <__mulsf3+0x12>
    3036:	8f ce       	rjmp	.-738    	; 0x2d56 <__fp_inf>
    3038:	94 ce       	rjmp	.-728    	; 0x2d62 <__fp_nan>
    303a:	11 24       	eor	r1, r1
    303c:	35 cf       	rjmp	.-406    	; 0x2ea8 <__fp_szero>

0000303e <__mulsf3x>:
    303e:	11 df       	rcall	.-478    	; 0x2e62 <__fp_split3>
    3040:	a0 f3       	brcs	.-24     	; 0x302a <__mulsf3+0x4>

00003042 <__mulsf3_pse>:
    3042:	95 9f       	mul	r25, r21
    3044:	d1 f3       	breq	.-12     	; 0x303a <__mulsf3+0x14>
    3046:	95 0f       	add	r25, r21
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	55 1f       	adc	r21, r21
    304c:	62 9f       	mul	r22, r18
    304e:	f0 01       	movw	r30, r0
    3050:	72 9f       	mul	r23, r18
    3052:	bb 27       	eor	r27, r27
    3054:	f0 0d       	add	r31, r0
    3056:	b1 1d       	adc	r27, r1
    3058:	63 9f       	mul	r22, r19
    305a:	aa 27       	eor	r26, r26
    305c:	f0 0d       	add	r31, r0
    305e:	b1 1d       	adc	r27, r1
    3060:	aa 1f       	adc	r26, r26
    3062:	64 9f       	mul	r22, r20
    3064:	66 27       	eor	r22, r22
    3066:	b0 0d       	add	r27, r0
    3068:	a1 1d       	adc	r26, r1
    306a:	66 1f       	adc	r22, r22
    306c:	82 9f       	mul	r24, r18
    306e:	22 27       	eor	r18, r18
    3070:	b0 0d       	add	r27, r0
    3072:	a1 1d       	adc	r26, r1
    3074:	62 1f       	adc	r22, r18
    3076:	73 9f       	mul	r23, r19
    3078:	b0 0d       	add	r27, r0
    307a:	a1 1d       	adc	r26, r1
    307c:	62 1f       	adc	r22, r18
    307e:	83 9f       	mul	r24, r19
    3080:	a0 0d       	add	r26, r0
    3082:	61 1d       	adc	r22, r1
    3084:	22 1f       	adc	r18, r18
    3086:	74 9f       	mul	r23, r20
    3088:	33 27       	eor	r19, r19
    308a:	a0 0d       	add	r26, r0
    308c:	61 1d       	adc	r22, r1
    308e:	23 1f       	adc	r18, r19
    3090:	84 9f       	mul	r24, r20
    3092:	60 0d       	add	r22, r0
    3094:	21 1d       	adc	r18, r1
    3096:	82 2f       	mov	r24, r18
    3098:	76 2f       	mov	r23, r22
    309a:	6a 2f       	mov	r22, r26
    309c:	11 24       	eor	r1, r1
    309e:	9f 57       	subi	r25, 0x7F	; 127
    30a0:	50 40       	sbci	r21, 0x00	; 0
    30a2:	8a f0       	brmi	.+34     	; 0x30c6 <__mulsf3_pse+0x84>
    30a4:	e1 f0       	breq	.+56     	; 0x30de <__mulsf3_pse+0x9c>
    30a6:	88 23       	and	r24, r24
    30a8:	4a f0       	brmi	.+18     	; 0x30bc <__mulsf3_pse+0x7a>
    30aa:	ee 0f       	add	r30, r30
    30ac:	ff 1f       	adc	r31, r31
    30ae:	bb 1f       	adc	r27, r27
    30b0:	66 1f       	adc	r22, r22
    30b2:	77 1f       	adc	r23, r23
    30b4:	88 1f       	adc	r24, r24
    30b6:	91 50       	subi	r25, 0x01	; 1
    30b8:	50 40       	sbci	r21, 0x00	; 0
    30ba:	a9 f7       	brne	.-22     	; 0x30a6 <__mulsf3_pse+0x64>
    30bc:	9e 3f       	cpi	r25, 0xFE	; 254
    30be:	51 05       	cpc	r21, r1
    30c0:	70 f0       	brcs	.+28     	; 0x30de <__mulsf3_pse+0x9c>
    30c2:	49 ce       	rjmp	.-878    	; 0x2d56 <__fp_inf>
    30c4:	f1 ce       	rjmp	.-542    	; 0x2ea8 <__fp_szero>
    30c6:	5f 3f       	cpi	r21, 0xFF	; 255
    30c8:	ec f3       	brlt	.-6      	; 0x30c4 <__mulsf3_pse+0x82>
    30ca:	98 3e       	cpi	r25, 0xE8	; 232
    30cc:	dc f3       	brlt	.-10     	; 0x30c4 <__mulsf3_pse+0x82>
    30ce:	86 95       	lsr	r24
    30d0:	77 95       	ror	r23
    30d2:	67 95       	ror	r22
    30d4:	b7 95       	ror	r27
    30d6:	f7 95       	ror	r31
    30d8:	e7 95       	ror	r30
    30da:	9f 5f       	subi	r25, 0xFF	; 255
    30dc:	c1 f7       	brne	.-16     	; 0x30ce <__mulsf3_pse+0x8c>
    30de:	fe 2b       	or	r31, r30
    30e0:	88 0f       	add	r24, r24
    30e2:	91 1d       	adc	r25, r1
    30e4:	96 95       	lsr	r25
    30e6:	87 95       	ror	r24
    30e8:	97 f9       	bld	r25, 7
    30ea:	08 95       	ret

000030ec <sin>:
    30ec:	9f 93       	push	r25
    30ee:	70 de       	rcall	.-800    	; 0x2dd0 <__fp_rempio2>
    30f0:	0f 90       	pop	r0
    30f2:	07 fc       	sbrc	r0, 7
    30f4:	ee 5f       	subi	r30, 0xFE	; 254
    30f6:	a4 ce       	rjmp	.-696    	; 0x2e40 <__fp_sinus>
    30f8:	11 f4       	brne	.+4      	; 0x30fe <sin+0x12>
    30fa:	0e f4       	brtc	.+2      	; 0x30fe <sin+0x12>
    30fc:	32 ce       	rjmp	.-924    	; 0x2d62 <__fp_nan>
    30fe:	41 c0       	rjmp	.+130    	; 0x3182 <__fp_mpack>

00003100 <sqrt>:
    3100:	b8 de       	rcall	.-656    	; 0x2e72 <__fp_splitA>
    3102:	d0 f3       	brcs	.-12     	; 0x30f8 <sin+0xc>
    3104:	99 23       	and	r25, r25
    3106:	d9 f3       	breq	.-10     	; 0x30fe <sin+0x12>
    3108:	ce f3       	brts	.-14     	; 0x30fc <sin+0x10>
    310a:	9f 57       	subi	r25, 0x7F	; 127
    310c:	55 0b       	sbc	r21, r21
    310e:	87 ff       	sbrs	r24, 7
    3110:	46 d0       	rcall	.+140    	; 0x319e <__fp_norm2>
    3112:	00 24       	eor	r0, r0
    3114:	a0 e6       	ldi	r26, 0x60	; 96
    3116:	40 ea       	ldi	r20, 0xA0	; 160
    3118:	90 01       	movw	r18, r0
    311a:	80 58       	subi	r24, 0x80	; 128
    311c:	56 95       	lsr	r21
    311e:	97 95       	ror	r25
    3120:	28 f4       	brcc	.+10     	; 0x312c <sqrt+0x2c>
    3122:	80 5c       	subi	r24, 0xC0	; 192
    3124:	66 0f       	add	r22, r22
    3126:	77 1f       	adc	r23, r23
    3128:	88 1f       	adc	r24, r24
    312a:	20 f0       	brcs	.+8      	; 0x3134 <sqrt+0x34>
    312c:	26 17       	cp	r18, r22
    312e:	37 07       	cpc	r19, r23
    3130:	48 07       	cpc	r20, r24
    3132:	30 f4       	brcc	.+12     	; 0x3140 <sqrt+0x40>
    3134:	62 1b       	sub	r22, r18
    3136:	73 0b       	sbc	r23, r19
    3138:	84 0b       	sbc	r24, r20
    313a:	20 29       	or	r18, r0
    313c:	31 29       	or	r19, r1
    313e:	4a 2b       	or	r20, r26
    3140:	a6 95       	lsr	r26
    3142:	17 94       	ror	r1
    3144:	07 94       	ror	r0
    3146:	20 25       	eor	r18, r0
    3148:	31 25       	eor	r19, r1
    314a:	4a 27       	eor	r20, r26
    314c:	58 f7       	brcc	.-42     	; 0x3124 <sqrt+0x24>
    314e:	66 0f       	add	r22, r22
    3150:	77 1f       	adc	r23, r23
    3152:	88 1f       	adc	r24, r24
    3154:	20 f0       	brcs	.+8      	; 0x315e <sqrt+0x5e>
    3156:	26 17       	cp	r18, r22
    3158:	37 07       	cpc	r19, r23
    315a:	48 07       	cpc	r20, r24
    315c:	30 f4       	brcc	.+12     	; 0x316a <sqrt+0x6a>
    315e:	62 0b       	sbc	r22, r18
    3160:	73 0b       	sbc	r23, r19
    3162:	84 0b       	sbc	r24, r20
    3164:	20 0d       	add	r18, r0
    3166:	31 1d       	adc	r19, r1
    3168:	41 1d       	adc	r20, r1
    316a:	a0 95       	com	r26
    316c:	81 f7       	brne	.-32     	; 0x314e <sqrt+0x4e>
    316e:	b9 01       	movw	r22, r18
    3170:	84 2f       	mov	r24, r20
    3172:	91 58       	subi	r25, 0x81	; 129
    3174:	88 0f       	add	r24, r24
    3176:	96 95       	lsr	r25
    3178:	87 95       	ror	r24
    317a:	08 95       	ret

0000317c <square>:
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
    3180:	52 cf       	rjmp	.-348    	; 0x3026 <__mulsf3>

00003182 <__fp_mpack>:
    3182:	9f 3f       	cpi	r25, 0xFF	; 255
    3184:	31 f0       	breq	.+12     	; 0x3192 <__fp_mpack_finite+0xc>

00003186 <__fp_mpack_finite>:
    3186:	91 50       	subi	r25, 0x01	; 1
    3188:	20 f4       	brcc	.+8      	; 0x3192 <__fp_mpack_finite+0xc>
    318a:	87 95       	ror	r24
    318c:	77 95       	ror	r23
    318e:	67 95       	ror	r22
    3190:	b7 95       	ror	r27
    3192:	88 0f       	add	r24, r24
    3194:	91 1d       	adc	r25, r1
    3196:	96 95       	lsr	r25
    3198:	87 95       	ror	r24
    319a:	97 f9       	bld	r25, 7
    319c:	08 95       	ret

0000319e <__fp_norm2>:
    319e:	91 50       	subi	r25, 0x01	; 1
    31a0:	50 40       	sbci	r21, 0x00	; 0
    31a2:	66 0f       	add	r22, r22
    31a4:	77 1f       	adc	r23, r23
    31a6:	88 1f       	adc	r24, r24
    31a8:	d2 f7       	brpl	.-12     	; 0x319e <__fp_norm2>
    31aa:	08 95       	ret

000031ac <__fp_powsodd>:
    31ac:	9f 93       	push	r25
    31ae:	8f 93       	push	r24
    31b0:	7f 93       	push	r23
    31b2:	6f 93       	push	r22
    31b4:	ff 93       	push	r31
    31b6:	ef 93       	push	r30
    31b8:	9b 01       	movw	r18, r22
    31ba:	ac 01       	movw	r20, r24
    31bc:	34 df       	rcall	.-408    	; 0x3026 <__mulsf3>
    31be:	ef 91       	pop	r30
    31c0:	ff 91       	pop	r31
    31c2:	d2 dd       	rcall	.-1116   	; 0x2d68 <__fp_powser>
    31c4:	2f 91       	pop	r18
    31c6:	3f 91       	pop	r19
    31c8:	4f 91       	pop	r20
    31ca:	5f 91       	pop	r21
    31cc:	2c cf       	rjmp	.-424    	; 0x3026 <__mulsf3>

000031ce <__divmodhi4>:
    31ce:	97 fb       	bst	r25, 7
    31d0:	07 2e       	mov	r0, r23
    31d2:	16 f4       	brtc	.+4      	; 0x31d8 <__divmodhi4+0xa>
    31d4:	00 94       	com	r0
    31d6:	07 d0       	rcall	.+14     	; 0x31e6 <__divmodhi4_neg1>
    31d8:	77 fd       	sbrc	r23, 7
    31da:	09 d0       	rcall	.+18     	; 0x31ee <__divmodhi4_neg2>
    31dc:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__udivmodhi4>
    31e0:	07 fc       	sbrc	r0, 7
    31e2:	05 d0       	rcall	.+10     	; 0x31ee <__divmodhi4_neg2>
    31e4:	3e f4       	brtc	.+14     	; 0x31f4 <__divmodhi4_exit>

000031e6 <__divmodhi4_neg1>:
    31e6:	90 95       	com	r25
    31e8:	81 95       	neg	r24
    31ea:	9f 4f       	sbci	r25, 0xFF	; 255
    31ec:	08 95       	ret

000031ee <__divmodhi4_neg2>:
    31ee:	70 95       	com	r23
    31f0:	61 95       	neg	r22
    31f2:	7f 4f       	sbci	r23, 0xFF	; 255

000031f4 <__divmodhi4_exit>:
    31f4:	08 95       	ret

000031f6 <__udivmodhi4>:
    31f6:	aa 1b       	sub	r26, r26
    31f8:	bb 1b       	sub	r27, r27
    31fa:	51 e1       	ldi	r21, 0x11	; 17
    31fc:	07 c0       	rjmp	.+14     	; 0x320c <__udivmodhi4_ep>

000031fe <__udivmodhi4_loop>:
    31fe:	aa 1f       	adc	r26, r26
    3200:	bb 1f       	adc	r27, r27
    3202:	a6 17       	cp	r26, r22
    3204:	b7 07       	cpc	r27, r23
    3206:	10 f0       	brcs	.+4      	; 0x320c <__udivmodhi4_ep>
    3208:	a6 1b       	sub	r26, r22
    320a:	b7 0b       	sbc	r27, r23

0000320c <__udivmodhi4_ep>:
    320c:	88 1f       	adc	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	5a 95       	dec	r21
    3212:	a9 f7       	brne	.-22     	; 0x31fe <__udivmodhi4_loop>
    3214:	80 95       	com	r24
    3216:	90 95       	com	r25
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	08 95       	ret

0000321e <itoa>:
    321e:	fb 01       	movw	r30, r22
    3220:	9f 01       	movw	r18, r30
    3222:	e8 94       	clt
    3224:	42 30       	cpi	r20, 0x02	; 2
    3226:	c4 f0       	brlt	.+48     	; 0x3258 <itoa+0x3a>
    3228:	45 32       	cpi	r20, 0x25	; 37
    322a:	b4 f4       	brge	.+44     	; 0x3258 <itoa+0x3a>
    322c:	4a 30       	cpi	r20, 0x0A	; 10
    322e:	29 f4       	brne	.+10     	; 0x323a <itoa+0x1c>
    3230:	97 fb       	bst	r25, 7
    3232:	1e f4       	brtc	.+6      	; 0x323a <itoa+0x1c>
    3234:	90 95       	com	r25
    3236:	81 95       	neg	r24
    3238:	9f 4f       	sbci	r25, 0xFF	; 255
    323a:	64 2f       	mov	r22, r20
    323c:	77 27       	eor	r23, r23
    323e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__udivmodhi4>
    3242:	80 5d       	subi	r24, 0xD0	; 208
    3244:	8a 33       	cpi	r24, 0x3A	; 58
    3246:	0c f0       	brlt	.+2      	; 0x324a <itoa+0x2c>
    3248:	89 5d       	subi	r24, 0xD9	; 217
    324a:	81 93       	st	Z+, r24
    324c:	cb 01       	movw	r24, r22
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	a1 f7       	brne	.-24     	; 0x323a <itoa+0x1c>
    3252:	16 f4       	brtc	.+4      	; 0x3258 <itoa+0x3a>
    3254:	5d e2       	ldi	r21, 0x2D	; 45
    3256:	51 93       	st	Z+, r21
    3258:	10 82       	st	Z, r1
    325a:	c9 01       	movw	r24, r18
    325c:	0c 94 30 19 	jmp	0x3260	; 0x3260 <strrev>

00003260 <strrev>:
    3260:	dc 01       	movw	r26, r24
    3262:	fc 01       	movw	r30, r24
    3264:	67 2f       	mov	r22, r23
    3266:	71 91       	ld	r23, Z+
    3268:	77 23       	and	r23, r23
    326a:	e1 f7       	brne	.-8      	; 0x3264 <strrev+0x4>
    326c:	32 97       	sbiw	r30, 0x02	; 2
    326e:	04 c0       	rjmp	.+8      	; 0x3278 <strrev+0x18>
    3270:	7c 91       	ld	r23, X
    3272:	6d 93       	st	X+, r22
    3274:	70 83       	st	Z, r23
    3276:	62 91       	ld	r22, -Z
    3278:	ae 17       	cp	r26, r30
    327a:	bf 07       	cpc	r27, r31
    327c:	c8 f3       	brcs	.-14     	; 0x3270 <strrev+0x10>
    327e:	08 95       	ret

00003280 <_exit>:
    3280:	f8 94       	cli

00003282 <__stop_program>:
    3282:	ff cf       	rjmp	.-2      	; 0x3282 <__stop_program>
