
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000025d6  0000266a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800114  00800114  0000267e  2**0
                  ALLOC
  3 .stab         000037ec  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f3  00000000  00000000  00005e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006f5f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00006f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020d2  00000000  00000000  00007176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000861  00000000  00000000  00009248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000da3  00000000  00000000  00009aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005fc  00000000  00000000  0000a84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006b9  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000027ec  00000000  00000000  0000b501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000200  00000000  00000000  0000dced  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_10>
      2c:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__vector_11>
      30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      90:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      94:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      98:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      9c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 0a       	sbc	r3, r31

000000f7 <__c.1837>:
      f7:	0a 00                                               ..

000000f9 <descriptor_list>:
      f9:	00 01 00 00 2d 01 12 00 02 00 00 3f 01 43 00 03     ....-......?.C..
     109:	00 00 82 01 04 01 03 09 04 86 01 12 02 03 09 04     ................
     119:	9a 01 06 03 03 09 04 a2 01 08                       ..........

00000123 <endpoint_config_table>:
     123:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012d <device_descriptor>:
     12d:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13d:	03 01                                               ..

0000013f <config1_descriptor>:
     13f:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14f:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15f:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16f:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17f:	40 00 00                                            @..

00000182 <string0>:
     182:	04 03 09 04                                         ....

00000186 <string1>:
     186:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     196:	65 00 00 00                                         e...

0000019a <string2>:
     19a:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a2 <string3>:
     1a2:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	e6 ed       	ldi	r30, 0xD6	; 214
     1c0:	f5 e2       	ldi	r31, 0x25	; 37
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	a4 31       	cpi	r26, 0x14	; 20
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	a4 e1       	ldi	r26, 0x14	; 20
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	ac 37       	cpi	r26, 0x7C	; 124
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
     1e2:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <main>:


 int main(void){
	 
	 //MATLAB PLOTTING STUFFS*****************************************************************
	m_clockdivide(0);
     1ea:	e1 e6       	ldi	r30, 0x61	; 97
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 e8       	ldi	r24, 0x80	; 128
     1f0:	80 83       	st	Z, r24
     1f2:	10 82       	st	Z, r1
		 
	long count = 0;
	
	m_red(ON);
     1f4:	6e 9a       	sbi	0x0d, 6	; 13
     1f6:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     1f8:	6a 9a       	sbi	0x0d, 2	; 13
     1fa:	72 98       	cbi	0x0e, 2	; 14

	m_bus_init();
     1fc:	0e 94 3a 01 	call	0x274	; 0x274 <m_bus_init>
	m_wii_open();
     200:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <m_wii_open>
	m_usb_init(); // connect usb
     204:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <m_usb_init>
	while(!m_usb_isconnected()){};  //wait for connection
     208:	0e 94 ed 0a 	call	0x15da	; 0x15da <m_usb_isconnected>
     20c:	88 23       	and	r24, r24
     20e:	e1 f3       	breq	.-8      	; 0x208 <main+0x1e>
		
	local_init();
     210:	0e 94 b3 03 	call	0x766	; 0x766 <local_init>

	m_red(OFF);
     214:	6e 9a       	sbi	0x0d, 6	; 13
     216:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     218:	6a 9a       	sbi	0x0d, 2	; 13
     21a:	72 9a       	sbi	0x0e, 2	; 14
 #define CLOCK 0
 
 //long count = 0;


 int main(void){
     21c:	0c e7       	ldi	r16, 0x7C	; 124
     21e:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	84 e3       	ldi	r24, 0x34	; 52
     224:	9c e0       	ldi	r25, 0x0C	; 12
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x3c>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x46>
     230:	00 00       	nop
	i = 0;
	*/
	
	while(1){
		m_wait(250);
		m_red(ON);
     232:	6e 9a       	sbi	0x0d, 6	; 13
     234:	76 98       	cbi	0x0e, 6	; 14
		//m_green(OFF);
		localize(data);
     236:	80 e6       	ldi	r24, 0x60	; 96
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 bd 03 	call	0x77a	; 0x77a <localize>
		m_red(OFF);
     23e:	6e 9a       	sbi	0x0d, 6	; 13
     240:	76 9a       	sbi	0x0e, 6	; 14
     242:	c0 e6       	ldi	r28, 0x60	; 96
     244:	d1 e0       	ldi	r29, 0x01	; 1
			//m_wii_read(blobs);
			/*data[0] = 50;
			data[1] = 50;*/
			//m_usb_tx_string("hi");
			for (i = 0 ; i < 7 ; i++){
			m_usb_tx_int((int)data[i]);
     246:	69 91       	ld	r22, Y+
     248:	79 91       	ld	r23, Y+
     24a:	89 91       	ld	r24, Y+
     24c:	99 91       	ld	r25, Y+
     24e:	0e 94 84 10 	call	0x2108	; 0x2108 <__fixsfsi>
     252:	cb 01       	movw	r24, r22
     254:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <m_usb_tx_int>
			m_usb_tx_char('\t');
     258:	89 e0       	ldi	r24, 0x09	; 9
     25a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <m_usb_tx_char>
			*/
			//m_wii_read(blobs);
			/*data[0] = 50;
			data[1] = 50;*/
			//m_usb_tx_string("hi");
			for (i = 0 ; i < 7 ; i++){
     25e:	c0 17       	cp	r28, r16
     260:	d1 07       	cpc	r29, r17
     262:	89 f7       	brne	.-30     	; 0x246 <main+0x5c>
			m_usb_tx_int((int)data[i]);
			m_usb_tx_char('\t');

			}
			//m_usb_tx_int((int)(data[2]));
			m_usb_tx_string("\n");
     264:	87 ef       	ldi	r24, 0xF7	; 247
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <print_P>
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     26c:	8a e0       	ldi	r24, 0x0A	; 10
     26e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <m_usb_tx_char>
			m_usb_tx_int(data[6]);
			m_usb_tx_string("\tangle: ");
			m_usb_tx_int((int) (((float) atan2(((double) (data[3]-data[4])),((double) (data[5]-data[6])))) * 180.0 / 3.14));
			m_usb_tx_string("\n");*/
		}
	}	 
     272:	d6 cf       	rjmp	.-84     	; 0x220 <main+0x36>

00000274 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     274:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     276:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     278:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     27a:	8c e0       	ldi	r24, 0x0C	; 12
     27c:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     280:	e9 e6       	ldi	r30, 0x69	; 105
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	80 62       	ori	r24, 0x20	; 32
     288:	80 83       	st	Z, r24
     28a:	80 81       	ld	r24, Z
     28c:	8f 7e       	andi	r24, 0xEF	; 239
     28e:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     290:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     292:	78 94       	sei
     294:	08 95       	ret

00000296 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	8c 01       	movw	r16, r24
     2a0:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     2a2:	84 e4       	ldi	r24, 0x44	; 68
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <m_wii_read>
	x[0] = blobs[0];
     2aa:	80 91 44 01 	lds	r24, 0x0144
     2ae:	90 91 45 01 	lds	r25, 0x0145
     2b2:	f8 01       	movw	r30, r16
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	80 83       	st	Z, r24
	x[1] = blobs[3];
     2b8:	80 91 4a 01 	lds	r24, 0x014A
     2bc:	90 91 4b 01 	lds	r25, 0x014B
     2c0:	93 83       	std	Z+3, r25	; 0x03
     2c2:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     2c4:	80 91 50 01 	lds	r24, 0x0150
     2c8:	90 91 51 01 	lds	r25, 0x0151
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     2d0:	80 91 56 01 	lds	r24, 0x0156
     2d4:	90 91 57 01 	lds	r25, 0x0157
     2d8:	97 83       	std	Z+7, r25	; 0x07
     2da:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     2dc:	80 91 46 01 	lds	r24, 0x0146
     2e0:	90 91 47 01 	lds	r25, 0x0147
     2e4:	99 83       	std	Y+1, r25	; 0x01
     2e6:	88 83       	st	Y, r24
	y[1] = blobs[4];
     2e8:	80 91 4c 01 	lds	r24, 0x014C
     2ec:	90 91 4d 01 	lds	r25, 0x014D
     2f0:	9b 83       	std	Y+3, r25	; 0x03
     2f2:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     2f4:	80 91 52 01 	lds	r24, 0x0152
     2f8:	90 91 53 01 	lds	r25, 0x0153
     2fc:	9d 83       	std	Y+5, r25	; 0x05
     2fe:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     300:	80 91 58 01 	lds	r24, 0x0158
     304:	90 91 59 01 	lds	r25, 0x0159
     308:	9f 83       	std	Y+7, r25	; 0x07
     30a:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <determine_blobs>:

unsigned char determine_blobs() {
     318:	2f 92       	push	r2
     31a:	3f 92       	push	r3
     31c:	4f 92       	push	r4
     31e:	5f 92       	push	r5
     320:	6f 92       	push	r6
     322:	7f 92       	push	r7
     324:	8f 92       	push	r8
     326:	9f 92       	push	r9
     328:	af 92       	push	r10
     32a:	bf 92       	push	r11
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	66 97       	sbiw	r28, 0x16	; 22
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     34c:	10 92 24 01 	sts	0x0124, r1
     350:	10 92 25 01 	sts	0x0125, r1
     354:	10 92 26 01 	sts	0x0126, r1
     358:	10 92 27 01 	sts	0x0127, r1
	distmin = 1023;
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 ec       	ldi	r25, 0xC0	; 192
     360:	af e7       	ldi	r26, 0x7F	; 127
     362:	b4 e4       	ldi	r27, 0x44	; 68
     364:	80 93 00 01 	sts	0x0100, r24
     368:	90 93 01 01 	sts	0x0101, r25
     36c:	a0 93 02 01 	sts	0x0102, r26
     370:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     374:	0f 2e       	mov	r0, r31
     376:	f6 e3       	ldi	r31, 0x36	; 54
     378:	cf 2e       	mov	r12, r31
     37a:	f1 e0       	ldi	r31, 0x01	; 1
     37c:	df 2e       	mov	r13, r31
     37e:	f0 2d       	mov	r31, r0
     380:	08 e3       	ldi	r16, 0x38	; 56
     382:	11 e0       	ldi	r17, 0x01	; 1
     384:	0f 2e       	mov	r0, r31
     386:	fa e3       	ldi	r31, 0x3A	; 58
     388:	ef 2e       	mov	r14, r31
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	ff 2e       	mov	r15, r31
     38e:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 1023;
	while (exit == 0) {
		getData(x, y);
     390:	6c e2       	ldi	r22, 0x2C	; 44
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	84 e3       	ldi	r24, 0x34	; 52
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 4b 01 	call	0x296	; 0x296 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     39c:	80 91 34 01 	lds	r24, 0x0134
     3a0:	90 91 35 01 	lds	r25, 0x0135
     3a4:	8f 3f       	cpi	r24, 0xFF	; 255
     3a6:	93 40       	sbci	r25, 0x03	; 3
     3a8:	98 f7       	brcc	.-26     	; 0x390 <determine_blobs+0x78>
     3aa:	d6 01       	movw	r26, r12
     3ac:	8d 91       	ld	r24, X+
     3ae:	9c 91       	ld	r25, X
     3b0:	8f 3f       	cpi	r24, 0xFF	; 255
     3b2:	93 40       	sbci	r25, 0x03	; 3
     3b4:	68 f7       	brcc	.-38     	; 0x390 <determine_blobs+0x78>
     3b6:	f8 01       	movw	r30, r16
     3b8:	80 81       	ld	r24, Z
     3ba:	91 81       	ldd	r25, Z+1	; 0x01
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	93 40       	sbci	r25, 0x03	; 3
     3c0:	38 f7       	brcc	.-50     	; 0x390 <determine_blobs+0x78>
     3c2:	d7 01       	movw	r26, r14
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ca:	93 40       	sbci	r25, 0x03	; 3
     3cc:	08 f7       	brcc	.-62     	; 0x390 <determine_blobs+0x78>
     3ce:	60 90 28 01 	lds	r6, 0x0128
     3d2:	70 90 29 01 	lds	r7, 0x0129
     3d6:	80 90 2a 01 	lds	r8, 0x012A
     3da:	90 90 2b 01 	lds	r9, 0x012B
     3de:	d0 90 24 01 	lds	r13, 0x0124
     3e2:	c0 90 25 01 	lds	r12, 0x0125
     3e6:	40 90 26 01 	lds	r4, 0x0126
     3ea:	50 90 27 01 	lds	r5, 0x0127
     3ee:	e0 91 1e 01 	lds	r30, 0x011E
     3f2:	ed 87       	std	Y+13, r30	; 0x0d
     3f4:	f0 91 1f 01 	lds	r31, 0x011F
     3f8:	fe 87       	std	Y+14, r31	; 0x0e
     3fa:	20 91 1c 01 	lds	r18, 0x011C
     3fe:	2b 87       	std	Y+11, r18	; 0x0b
     400:	30 91 1d 01 	lds	r19, 0x011D
     404:	3c 87       	std	Y+12, r19	; 0x0c
     406:	40 91 20 01 	lds	r20, 0x0120
     40a:	49 8b       	std	Y+17, r20	; 0x11
     40c:	50 91 21 01 	lds	r21, 0x0121
     410:	5a 8b       	std	Y+18, r21	; 0x12
     412:	60 91 22 01 	lds	r22, 0x0122
     416:	6b 8b       	std	Y+19, r22	; 0x13
     418:	70 91 23 01 	lds	r23, 0x0123
     41c:	7c 8b       	std	Y+20, r23	; 0x14
     41e:	f0 90 00 01 	lds	r15, 0x0100
     422:	e0 90 01 01 	lds	r14, 0x0101
     426:	20 90 02 01 	lds	r2, 0x0102
     42a:	30 90 03 01 	lds	r3, 0x0103
     42e:	80 91 1a 01 	lds	r24, 0x011A
     432:	8f 87       	std	Y+15, r24	; 0x0f
     434:	90 91 1b 01 	lds	r25, 0x011B
     438:	98 8b       	std	Y+16, r25	; 0x10
     43a:	a0 91 18 01 	lds	r26, 0x0118
     43e:	b0 91 19 01 	lds	r27, 0x0119
     442:	ba 87       	std	Y+10, r27	; 0x0a
     444:	a9 87       	std	Y+9, r26	; 0x09
     446:	18 86       	std	Y+8, r1	; 0x08
     448:	1f 82       	std	Y+7, r1	; 0x07
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	77 c0       	rjmp	.+238    	; 0x53e <determine_blobs+0x226>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
     450:	f8 01       	movw	r30, r16
     452:	81 91       	ld	r24, Z+
     454:	91 91       	ld	r25, Z+
     456:	8f 01       	movw	r16, r30
     458:	2b 81       	ldd	r18, Y+3	; 0x03
     45a:	3c 81       	ldd	r19, Y+4	; 0x04
     45c:	28 1b       	sub	r18, r24
     45e:	39 0b       	sbc	r19, r25
     460:	c9 01       	movw	r24, r18
     462:	a9 81       	ldd	r26, Y+1	; 0x01
     464:	ba 81       	ldd	r27, Y+2	; 0x02
     466:	2d 91       	ld	r18, X+
     468:	3d 91       	ld	r19, X+
     46a:	ba 83       	std	Y+2, r27	; 0x02
     46c:	a9 83       	std	Y+1, r26	; 0x01
     46e:	ed 81       	ldd	r30, Y+5	; 0x05
     470:	fe 81       	ldd	r31, Y+6	; 0x06
     472:	e2 1b       	sub	r30, r18
     474:	f3 0b       	sbc	r31, r19
     476:	ee 9f       	mul	r30, r30
     478:	b0 01       	movw	r22, r0
     47a:	ef 9f       	mul	r30, r31
     47c:	70 0d       	add	r23, r0
     47e:	70 0d       	add	r23, r0
     480:	11 24       	eor	r1, r1
     482:	88 9f       	mul	r24, r24
     484:	90 01       	movw	r18, r0
     486:	89 9f       	mul	r24, r25
     488:	30 0d       	add	r19, r0
     48a:	30 0d       	add	r19, r0
     48c:	11 24       	eor	r1, r1
     48e:	62 0f       	add	r22, r18
     490:	73 1f       	adc	r23, r19
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     49a:	0e 94 19 12 	call	0x2432	; 0x2432 <sqrt>
     49e:	66 2e       	mov	r6, r22
     4a0:	77 2e       	mov	r7, r23
     4a2:	88 2e       	mov	r8, r24
     4a4:	99 2e       	mov	r9, r25
					if (dist > distmax) {
     4a6:	2d 2d       	mov	r18, r13
     4a8:	3c 2d       	mov	r19, r12
     4aa:	44 2d       	mov	r20, r4
     4ac:	55 2d       	mov	r21, r5
     4ae:	66 2d       	mov	r22, r6
     4b0:	77 2d       	mov	r23, r7
     4b2:	88 2d       	mov	r24, r8
     4b4:	99 2d       	mov	r25, r9
     4b6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     4ba:	18 16       	cp	r1, r24
     4bc:	c4 f4       	brge	.+48     	; 0x4ee <determine_blobs+0x1d6>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	5f e3       	ldi	r21, 0x3F	; 63
     4c6:	66 2d       	mov	r22, r6
     4c8:	77 2d       	mov	r23, r7
     4ca:	88 2d       	mov	r24, r8
     4cc:	99 2d       	mov	r25, r9
     4ce:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     4d2:	69 8b       	std	Y+17, r22	; 0x11
     4d4:	7a 8b       	std	Y+18, r23	; 0x12
     4d6:	8b 8b       	std	Y+19, r24	; 0x13
     4d8:	9c 8b       	std	Y+20, r25	; 0x14
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     4da:	fd 89       	ldd	r31, Y+21	; 0x15
     4dc:	fb 87       	std	Y+11, r31	; 0x0b
     4de:	2e 89       	ldd	r18, Y+22	; 0x16
     4e0:	2c 87       	std	Y+12, r18	; 0x0c
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     4e2:	ad 86       	std	Y+13, r10	; 0x0d
     4e4:	be 86       	std	Y+14, r11	; 0x0e
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
     4e6:	d6 2c       	mov	r13, r6
     4e8:	c7 2c       	mov	r12, r7
     4ea:	48 2c       	mov	r4, r8
     4ec:	59 2c       	mov	r5, r9
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     4ee:	26 2d       	mov	r18, r6
     4f0:	37 2d       	mov	r19, r7
     4f2:	48 2d       	mov	r20, r8
     4f4:	59 2d       	mov	r21, r9
     4f6:	6f 2d       	mov	r22, r15
     4f8:	7e 2d       	mov	r23, r14
     4fa:	82 2d       	mov	r24, r2
     4fc:	93 2d       	mov	r25, r3
     4fe:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     502:	18 16       	cp	r1, r24
     504:	54 f4       	brge	.+20     	; 0x51a <determine_blobs+0x202>
						distmin = dist;
						close1 = i;
						close2 = j;
     506:	4d 89       	ldd	r20, Y+21	; 0x15
     508:	5e 89       	ldd	r21, Y+22	; 0x16
     50a:	5a 87       	std	Y+10, r21	; 0x0a
     50c:	49 87       	std	Y+9, r20	; 0x09
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     50e:	af 86       	std	Y+15, r10	; 0x0f
     510:	b8 8a       	std	Y+16, r11	; 0x10
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     512:	f6 2c       	mov	r15, r6
     514:	e7 2c       	mov	r14, r7
     516:	28 2c       	mov	r2, r8
     518:	39 2c       	mov	r3, r9
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     51a:	6d 89       	ldd	r22, Y+21	; 0x15
     51c:	7e 89       	ldd	r23, Y+22	; 0x16
     51e:	6f 5f       	subi	r22, 0xFF	; 255
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	7e 8b       	std	Y+22, r23	; 0x16
     524:	6d 8b       	std	Y+21, r22	; 0x15
     526:	64 30       	cpi	r22, 0x04	; 4
     528:	71 05       	cpc	r23, r1
     52a:	09 f0       	breq	.+2      	; 0x52e <determine_blobs+0x216>
     52c:	91 cf       	rjmp	.-222    	; 0x450 <determine_blobs+0x138>
	distmin = 1023;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     52e:	8f 81       	ldd	r24, Y+7	; 0x07
     530:	98 85       	ldd	r25, Y+8	; 0x08
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	98 87       	std	Y+8, r25	; 0x08
     536:	8f 83       	std	Y+7, r24	; 0x07
     538:	84 30       	cpi	r24, 0x04	; 4
     53a:	91 05       	cpc	r25, r1
     53c:	e1 f0       	breq	.+56     	; 0x576 <determine_blobs+0x25e>
				for (int j = i; j < 4; j++) {
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	91 05       	cpc	r25, r1
     542:	ac f7       	brge	.-22     	; 0x52e <determine_blobs+0x216>
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
     544:	fc 01       	movw	r30, r24
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	8f 01       	movw	r16, r30
     54c:	0c 5c       	subi	r16, 0xCC	; 204
     54e:	1e 4f       	sbci	r17, 0xFE	; 254
     550:	d8 01       	movw	r26, r16
     552:	0d 90       	ld	r0, X+
     554:	bc 91       	ld	r27, X
     556:	a0 2d       	mov	r26, r0
     558:	bc 83       	std	Y+4, r27	; 0x04
     55a:	ab 83       	std	Y+3, r26	; 0x03
     55c:	e4 5d       	subi	r30, 0xD4	; 212
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	20 81       	ld	r18, Z
     562:	31 81       	ldd	r19, Z+1	; 0x01
     564:	3e 83       	std	Y+6, r19	; 0x06
     566:	2d 83       	std	Y+5, r18	; 0x05
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     568:	fa 83       	std	Y+2, r31	; 0x02
     56a:	e9 83       	std	Y+1, r30	; 0x01
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     56c:	a8 2e       	mov	r10, r24
     56e:	b9 2e       	mov	r11, r25
     570:	9e 8b       	std	Y+22, r25	; 0x16
     572:	8d 8b       	std	Y+21, r24	; 0x15
     574:	6d cf       	rjmp	.-294    	; 0x450 <determine_blobs+0x138>
     576:	86 2d       	mov	r24, r6
     578:	97 2d       	mov	r25, r7
     57a:	a8 2d       	mov	r26, r8
     57c:	b9 2d       	mov	r27, r9
     57e:	80 93 28 01 	sts	0x0128, r24
     582:	90 93 29 01 	sts	0x0129, r25
     586:	a0 93 2a 01 	sts	0x012A, r26
     58a:	b0 93 2b 01 	sts	0x012B, r27
     58e:	8d 2d       	mov	r24, r13
     590:	9c 2d       	mov	r25, r12
     592:	a4 2d       	mov	r26, r4
     594:	b5 2d       	mov	r27, r5
     596:	80 93 24 01 	sts	0x0124, r24
     59a:	90 93 25 01 	sts	0x0125, r25
     59e:	a0 93 26 01 	sts	0x0126, r26
     5a2:	b0 93 27 01 	sts	0x0127, r27
     5a6:	3d 85       	ldd	r19, Y+13	; 0x0d
     5a8:	30 93 1e 01 	sts	0x011E, r19
     5ac:	4e 85       	ldd	r20, Y+14	; 0x0e
     5ae:	40 93 1f 01 	sts	0x011F, r20
     5b2:	5b 85       	ldd	r21, Y+11	; 0x0b
     5b4:	50 93 1c 01 	sts	0x011C, r21
     5b8:	6c 85       	ldd	r22, Y+12	; 0x0c
     5ba:	60 93 1d 01 	sts	0x011D, r22
     5be:	59 89       	ldd	r21, Y+17	; 0x11
     5c0:	4a 89       	ldd	r20, Y+18	; 0x12
     5c2:	3b 89       	ldd	r19, Y+19	; 0x13
     5c4:	2c 89       	ldd	r18, Y+20	; 0x14
     5c6:	85 2f       	mov	r24, r21
     5c8:	94 2f       	mov	r25, r20
     5ca:	a3 2f       	mov	r26, r19
     5cc:	b2 2f       	mov	r27, r18
     5ce:	80 93 20 01 	sts	0x0120, r24
     5d2:	90 93 21 01 	sts	0x0121, r25
     5d6:	a0 93 22 01 	sts	0x0122, r26
     5da:	b0 93 23 01 	sts	0x0123, r27
     5de:	8f 2d       	mov	r24, r15
     5e0:	9e 2d       	mov	r25, r14
     5e2:	a2 2d       	mov	r26, r2
     5e4:	b3 2d       	mov	r27, r3
     5e6:	80 93 00 01 	sts	0x0100, r24
     5ea:	90 93 01 01 	sts	0x0101, r25
     5ee:	a0 93 02 01 	sts	0x0102, r26
     5f2:	b0 93 03 01 	sts	0x0103, r27
     5f6:	7f 85       	ldd	r23, Y+15	; 0x0f
     5f8:	70 93 1a 01 	sts	0x011A, r23
     5fc:	88 89       	ldd	r24, Y+16	; 0x10
     5fe:	80 93 1b 01 	sts	0x011B, r24
     602:	99 85       	ldd	r25, Y+9	; 0x09
     604:	90 93 18 01 	sts	0x0118, r25
     608:	aa 85       	ldd	r26, Y+10	; 0x0a
     60a:	a0 93 19 01 	sts	0x0119, r26
						close1 = i;
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     60e:	80 91 1e 01 	lds	r24, 0x011E
     612:	90 91 1f 01 	lds	r25, 0x011F
     616:	20 91 1a 01 	lds	r18, 0x011A
     61a:	30 91 1b 01 	lds	r19, 0x011B
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	19 f5       	brne	.+70     	; 0x66a <determine_blobs+0x352>
				top = far1;
     624:	90 93 43 01 	sts	0x0143, r25
     628:	80 93 42 01 	sts	0x0142, r24
				bottom = far2;
     62c:	40 91 1c 01 	lds	r20, 0x011C
     630:	50 91 1d 01 	lds	r21, 0x011D
     634:	50 93 41 01 	sts	0x0141, r21
     638:	40 93 40 01 	sts	0x0140, r20
				right = close2;
     63c:	20 91 18 01 	lds	r18, 0x0118
     640:	30 91 19 01 	lds	r19, 0x0119
     644:	30 93 3d 01 	sts	0x013D, r19
     648:	20 93 3c 01 	sts	0x013C, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 10 - top - bottom - right;
     64c:	6a e0       	ldi	r22, 0x0A	; 10
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	fb 01       	movw	r30, r22
     652:	e8 1b       	sub	r30, r24
     654:	f9 0b       	sbc	r31, r25
     656:	cf 01       	movw	r24, r30
     658:	84 1b       	sub	r24, r20
     65a:	95 0b       	sbc	r25, r21
     65c:	82 1b       	sub	r24, r18
     65e:	93 0b       	sbc	r25, r19
     660:	90 93 3f 01 	sts	0x013F, r25
     664:	80 93 3e 01 	sts	0x013E, r24
     668:	64 c0       	rjmp	.+200    	; 0x732 <determine_blobs+0x41a>
			}
			else if (far1 == close2) {
     66a:	49 85       	ldd	r20, Y+9	; 0x09
     66c:	5a 85       	ldd	r21, Y+10	; 0x0a
     66e:	84 17       	cp	r24, r20
     670:	95 07       	cpc	r25, r21
     672:	f9 f4       	brne	.+62     	; 0x6b2 <determine_blobs+0x39a>
				top = far1;
     674:	90 93 43 01 	sts	0x0143, r25
     678:	80 93 42 01 	sts	0x0142, r24
				bottom = far2;
     67c:	40 91 1c 01 	lds	r20, 0x011C
     680:	50 91 1d 01 	lds	r21, 0x011D
     684:	50 93 41 01 	sts	0x0141, r21
     688:	40 93 40 01 	sts	0x0140, r20
				right = close1;
     68c:	30 93 3d 01 	sts	0x013D, r19
     690:	20 93 3c 01 	sts	0x013C, r18
				left = 10 - top - bottom - right;
     694:	6a e0       	ldi	r22, 0x0A	; 10
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	db 01       	movw	r26, r22
     69a:	a8 1b       	sub	r26, r24
     69c:	b9 0b       	sbc	r27, r25
     69e:	cd 01       	movw	r24, r26
     6a0:	84 1b       	sub	r24, r20
     6a2:	95 0b       	sbc	r25, r21
     6a4:	82 1b       	sub	r24, r18
     6a6:	93 0b       	sbc	r25, r19
     6a8:	90 93 3f 01 	sts	0x013F, r25
     6ac:	80 93 3e 01 	sts	0x013E, r24
     6b0:	40 c0       	rjmp	.+128    	; 0x732 <determine_blobs+0x41a>
			}
			else if (far2 == close1) {
     6b2:	40 91 1c 01 	lds	r20, 0x011C
     6b6:	50 91 1d 01 	lds	r21, 0x011D
     6ba:	24 17       	cp	r18, r20
     6bc:	35 07       	cpc	r19, r21
     6be:	f1 f4       	brne	.+60     	; 0x6fc <determine_blobs+0x3e4>
				top = far2;
     6c0:	30 93 43 01 	sts	0x0143, r19
     6c4:	20 93 42 01 	sts	0x0142, r18
				bottom = far1;
     6c8:	90 93 41 01 	sts	0x0141, r25
     6cc:	80 93 40 01 	sts	0x0140, r24
				right = close2;
     6d0:	e9 85       	ldd	r30, Y+9	; 0x09
     6d2:	fa 85       	ldd	r31, Y+10	; 0x0a
     6d4:	f0 93 3d 01 	sts	0x013D, r31
     6d8:	e0 93 3c 01 	sts	0x013C, r30
				left = 10 - top - bottom - right;
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	ba 01       	movw	r22, r20
     6e2:	62 1b       	sub	r22, r18
     6e4:	73 0b       	sbc	r23, r19
     6e6:	db 01       	movw	r26, r22
     6e8:	a8 1b       	sub	r26, r24
     6ea:	b9 0b       	sbc	r27, r25
     6ec:	cd 01       	movw	r24, r26
     6ee:	8e 1b       	sub	r24, r30
     6f0:	9f 0b       	sbc	r25, r31
     6f2:	90 93 3f 01 	sts	0x013F, r25
     6f6:	80 93 3e 01 	sts	0x013E, r24
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <determine_blobs+0x41a>
			}
			else {
				top = far2;
     6fc:	50 93 43 01 	sts	0x0143, r21
     700:	40 93 42 01 	sts	0x0142, r20
				bottom = far1;
     704:	90 93 41 01 	sts	0x0141, r25
     708:	80 93 40 01 	sts	0x0140, r24
				right = close1;
     70c:	30 93 3d 01 	sts	0x013D, r19
     710:	20 93 3c 01 	sts	0x013C, r18
				left = 10 - top - bottom - right;
     714:	6a e0       	ldi	r22, 0x0A	; 10
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	fb 01       	movw	r30, r22
     71a:	e4 1b       	sub	r30, r20
     71c:	f5 0b       	sbc	r31, r21
     71e:	bf 01       	movw	r22, r30
     720:	68 1b       	sub	r22, r24
     722:	79 0b       	sbc	r23, r25
     724:	cb 01       	movw	r24, r22
     726:	82 1b       	sub	r24, r18
     728:	93 0b       	sbc	r25, r19
     72a:	90 93 3f 01 	sts	0x013F, r25
     72e:	80 93 3e 01 	sts	0x013E, r24
			}
		}
	}
	return 1;
}
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	66 96       	adiw	r28, 0x16	; 22
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	bf 90       	pop	r11
     752:	af 90       	pop	r10
     754:	9f 90       	pop	r9
     756:	8f 90       	pop	r8
     758:	7f 90       	pop	r7
     75a:	6f 90       	pop	r6
     75c:	5f 90       	pop	r5
     75e:	4f 90       	pop	r4
     760:	3f 90       	pop	r3
     762:	2f 90       	pop	r2
     764:	08 95       	ret

00000766 <local_init>:

unsigned char local_init() {
	m_wii_open();
     766:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <m_wii_open>
	
	m_wii_read(blobs);
     76a:	84 e4       	ldi	r24, 0x44	; 68
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <m_wii_read>
	

	//Determine indices of all top, bottom, left, right points
	determine_blobs();
     772:	0e 94 8c 01 	call	0x318	; 0x318 <determine_blobs>
	
	return 1;
}
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	08 95       	ret

0000077a <localize>:
	data[0] = blobs[0];
	data[1] = blobs[1];
	data[2] = 1.0;
}

unsigned char localize (float* data) {
     77a:	2f 92       	push	r2
     77c:	3f 92       	push	r3
     77e:	4f 92       	push	r4
     780:	5f 92       	push	r5
     782:	6f 92       	push	r6
     784:	7f 92       	push	r7
     786:	8f 92       	push	r8
     788:	9f 92       	push	r9
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	6e 97       	sbiw	r28, 0x1e	; 30
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	89 83       	std	Y+1, r24	; 0x01
	//m_wii_read(blobs);
	//determine_blobs();
	getData(x,y);
     7b2:	6c e2       	ldi	r22, 0x2C	; 44
     7b4:	71 e0       	ldi	r23, 0x01	; 1
     7b6:	84 e3       	ldi	r24, 0x34	; 52
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 4b 01 	call	0x296	; 0x296 <getData>
	numlost = 0;
     7be:	10 92 17 01 	sts	0x0117, r1
     7c2:	10 92 16 01 	sts	0x0116, r1
	
	if (recalibrate == 1) {
     7c6:	80 91 14 01 	lds	r24, 0x0114
     7ca:	90 91 15 01 	lds	r25, 0x0115
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <localize+0x5a>
     7d2:	c8 c6       	rjmp	.+3472   	; 0x1564 <__stack+0xa65>
		determine_blobs();
     7d4:	0e 94 8c 01 	call	0x318	; 0x318 <determine_blobs>
		recalibrate = 0;
     7d8:	10 92 15 01 	sts	0x0115, r1
     7dc:	10 92 14 01 	sts	0x0114, r1
     7e0:	c1 c6       	rjmp	.+3458   	; 0x1564 <__stack+0xa65>
	float theta_top_right = (float) atan2((double) 11.655, (double) (14.5+8.741));
	float theta_bottom_left = (float) atan2((double)10.563, (double) (14.5+2.483));
	float theta_bottom_right = (float) atan2((double) 11.655, (double) (14.5-8.741));

	for (int i = 0; i < 4; i++) {
		if (x[i] >= 1023) numlost++;
     7e2:	21 91       	ld	r18, Z+
     7e4:	31 91       	ld	r19, Z+
     7e6:	2f 3f       	cpi	r18, 0xFF	; 255
     7e8:	33 40       	sbci	r19, 0x03	; 3
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <localize+0x74>
     7ec:	01 96       	adiw	r24, 0x01	; 1
	float theta_top_left= (float) atan2((double) (14.5-2.483), (double) 10.563);
	float theta_top_right = (float) atan2((double) 11.655, (double) (14.5+8.741));
	float theta_bottom_left = (float) atan2((double)10.563, (double) (14.5+2.483));
	float theta_bottom_right = (float) atan2((double) 11.655, (double) (14.5-8.741));

	for (int i = 0; i < 4; i++) {
     7ee:	e4 17       	cp	r30, r20
     7f0:	f5 07       	cpc	r31, r21
     7f2:	b9 f7       	brne	.-18     	; 0x7e2 <localize+0x68>
     7f4:	80 93 16 01 	sts	0x0116, r24
     7f8:	90 93 17 01 	sts	0x0117, r25
		if (x[i] >= 1023) numlost++;
	}
	
	if (numlost >= 2) {
     7fc:	02 97       	sbiw	r24, 0x02	; 2
     7fe:	44 f0       	brlt	.+16     	; 0x810 <localize+0x96>
		recalibrate = 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 15 01 	sts	0x0115, r25
     808:	80 93 14 01 	sts	0x0114, r24
		return 0;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	b3 c6       	rjmp	.+3430   	; 0x1576 <__stack+0xa77>
	}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
     810:	e0 90 42 01 	lds	r14, 0x0142
     814:	f0 90 43 01 	lds	r15, 0x0143
     818:	f7 01       	movw	r30, r14
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ec 5c       	subi	r30, 0xCC	; 204
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	60 80       	ld	r6, Z
     824:	71 80       	ldd	r7, Z+1	; 0x01
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	68 16       	cp	r6, r24
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	78 06       	cpc	r7, r24
     82e:	08 f0       	brcs	.+2      	; 0x832 <localize+0xb8>
     830:	f7 c3       	rjmp	.+2030   	; 0x1020 <__stack+0x521>
     832:	a0 90 40 01 	lds	r10, 0x0140
     836:	b0 90 41 01 	lds	r11, 0x0141
     83a:	f5 01       	movw	r30, r10
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ec 5c       	subi	r30, 0xCC	; 204
     842:	fe 4f       	sbci	r31, 0xFE	; 254
     844:	c0 80       	ld	r12, Z
     846:	d1 80       	ldd	r13, Z+1	; 0x01
     848:	9f ef       	ldi	r25, 0xFF	; 255
     84a:	c9 16       	cp	r12, r25
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	d9 06       	cpc	r13, r25
     850:	08 f0       	brcs	.+2      	; 0x854 <localize+0xda>
     852:	43 c1       	rjmp	.+646    	; 0xada <localize+0x360>
		//calculate and store pixel-space position and orientation
		posx = (float) ((128.0/1023.0)*((float)(x[top]+x[bottom]))/2.0-rcenterx);
     854:	20 90 08 01 	lds	r2, 0x0108
     858:	30 90 09 01 	lds	r3, 0x0109
     85c:	40 90 0a 01 	lds	r4, 0x010A
     860:	50 90 0b 01 	lds	r5, 0x010B
     864:	b6 01       	movw	r22, r12
     866:	66 0d       	add	r22, r6
     868:	77 1d       	adc	r23, r7
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     872:	28 e0       	ldi	r18, 0x08	; 8
     874:	30 e2       	ldi	r19, 0x20	; 32
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	5e e3       	ldi	r21, 0x3E	; 62
     87a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	5f e3       	ldi	r21, 0x3F	; 63
     886:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     88a:	a2 01       	movw	r20, r4
     88c:	91 01       	movw	r18, r2
     88e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     892:	68 8f       	std	Y+24, r22	; 0x18
     894:	7f 8b       	std	Y+23, r23	; 0x17
     896:	18 2f       	mov	r17, r24
     898:	09 2f       	mov	r16, r25
		posy = (float) ((96.0/1023.0)*((float)(y[top]+y[bottom]))/2.0-rcentery);
     89a:	f7 01       	movw	r30, r14
     89c:	ee 0f       	add	r30, r30
     89e:	ff 1f       	adc	r31, r31
     8a0:	e4 5d       	subi	r30, 0xD4	; 212
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	80 80       	ld	r8, Z
     8a6:	91 80       	ldd	r9, Z+1	; 0x01
     8a8:	f5 01       	movw	r30, r10
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	e4 5d       	subi	r30, 0xD4	; 212
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e0 80       	ld	r14, Z
     8b4:	f1 80       	ldd	r15, Z+1	; 0x01
     8b6:	b7 01       	movw	r22, r14
     8b8:	68 0d       	add	r22, r8
     8ba:	79 1d       	adc	r23, r9
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     8c4:	2c e0       	ldi	r18, 0x0C	; 12
     8c6:	30 e3       	ldi	r19, 0x30	; 48
     8c8:	40 ec       	ldi	r20, 0xC0	; 192
     8ca:	5d e3       	ldi	r21, 0x3D	; 61
     8cc:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     8dc:	20 91 04 01 	lds	r18, 0x0104
     8e0:	30 91 05 01 	lds	r19, 0x0105
     8e4:	40 91 06 01 	lds	r20, 0x0106
     8e8:	50 91 07 01 	lds	r21, 0x0107
     8ec:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     8f0:	6b 83       	std	Y+3, r22	; 0x03
     8f2:	7f 83       	std	Y+7, r23	; 0x07
     8f4:	8b 87       	std	Y+11, r24	; 0x0b
     8f6:	9f 87       	std	Y+15, r25	; 0x0f
		
		//calculate and store angle
		angle = (float) atan2(((double) ((int)x[top]-(int)x[bottom])),((double) ((int)y[top]-(int)y[bottom])));
     8f8:	b4 01       	movw	r22, r8
     8fa:	6e 19       	sub	r22, r14
     8fc:	7f 09       	sbc	r23, r15
     8fe:	88 27       	eor	r24, r24
     900:	77 fd       	sbrc	r23, 7
     902:	80 95       	com	r24
     904:	98 2f       	mov	r25, r24
     906:	0e 94 b7 10 	call	0x216e	; 0x216e <__floatsisf>
     90a:	4b 01       	movw	r8, r22
     90c:	5c 01       	movw	r10, r24
     90e:	b3 01       	movw	r22, r6
     910:	6c 19       	sub	r22, r12
     912:	7d 09       	sbc	r23, r13
     914:	88 27       	eor	r24, r24
     916:	77 fd       	sbrc	r23, 7
     918:	80 95       	com	r24
     91a:	98 2f       	mov	r25, r24
     91c:	0e 94 b7 10 	call	0x216e	; 0x216e <__floatsisf>
     920:	a5 01       	movw	r20, r10
     922:	94 01       	movw	r18, r8
     924:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
     928:	6b 01       	movw	r12, r22
     92a:	7c 01       	movw	r14, r24
		phi = -1.0 * ((float) atan2((double) posy, (double) posx));
     92c:	78 8d       	ldd	r23, Y+24	; 0x18
     92e:	6f 89       	ldd	r22, Y+23	; 0x17
     930:	27 2f       	mov	r18, r23
     932:	36 2f       	mov	r19, r22
     934:	41 2f       	mov	r20, r17
     936:	50 2f       	mov	r21, r16
     938:	bb 81       	ldd	r27, Y+3	; 0x03
     93a:	af 81       	ldd	r26, Y+7	; 0x07
     93c:	bb 84       	ldd	r11, Y+11	; 0x0b
     93e:	af 84       	ldd	r10, Y+15	; 0x0f
     940:	6b 2f       	mov	r22, r27
     942:	7a 2f       	mov	r23, r26
     944:	8b 2d       	mov	r24, r11
     946:	9a 2d       	mov	r25, r10
     948:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
     94c:	6b 8b       	std	Y+19, r22	; 0x13
     94e:	7c 8b       	std	Y+20, r23	; 0x14
     950:	8d 8b       	std	Y+21, r24	; 0x15
     952:	9e 8b       	std	Y+22, r25	; 0x16
		
		r = (float) sqrt((double)(posx*posx + posy*posy));
     954:	78 8d       	ldd	r23, Y+24	; 0x18
     956:	6f 89       	ldd	r22, Y+23	; 0x17
     958:	27 2f       	mov	r18, r23
     95a:	36 2f       	mov	r19, r22
     95c:	41 2f       	mov	r20, r17
     95e:	50 2f       	mov	r21, r16
     960:	67 2f       	mov	r22, r23
     962:	73 2f       	mov	r23, r19
     964:	81 2f       	mov	r24, r17
     966:	90 2f       	mov	r25, r16
     968:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     96c:	4b 01       	movw	r8, r22
     96e:	5c 01       	movw	r10, r24
     970:	7b 81       	ldd	r23, Y+3	; 0x03
     972:	6f 81       	ldd	r22, Y+7	; 0x07
     974:	9b 85       	ldd	r25, Y+11	; 0x0b
     976:	8f 85       	ldd	r24, Y+15	; 0x0f
     978:	27 2f       	mov	r18, r23
     97a:	36 2f       	mov	r19, r22
     97c:	49 2f       	mov	r20, r25
     97e:	58 2f       	mov	r21, r24
     980:	67 2f       	mov	r22, r23
     982:	73 2f       	mov	r23, r19
     984:	89 2f       	mov	r24, r25
     986:	95 2f       	mov	r25, r21
     988:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	c5 01       	movw	r24, r10
     992:	b4 01       	movw	r22, r8
     994:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     998:	0e 94 19 12 	call	0x2432	; 0x2432 <sqrt>
     99c:	4b 01       	movw	r8, r22
     99e:	5c 01       	movw	r10, r24
		
		
		data[0] = rcenterx - r * (float) cos((double) (angle - phi));
     9a0:	2b 89       	ldd	r18, Y+19	; 0x13
     9a2:	3c 89       	ldd	r19, Y+20	; 0x14
     9a4:	4d 89       	ldd	r20, Y+21	; 0x15
     9a6:	5e 89       	ldd	r21, Y+22	; 0x16
     9a8:	c7 01       	movw	r24, r14
     9aa:	b6 01       	movw	r22, r12
     9ac:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     9b0:	06 2f       	mov	r16, r22
     9b2:	17 2f       	mov	r17, r23
     9b4:	68 2e       	mov	r6, r24
     9b6:	79 2e       	mov	r7, r25
     9b8:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
     9bc:	a5 01       	movw	r20, r10
     9be:	94 01       	movw	r18, r8
     9c0:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     9c4:	9b 01       	movw	r18, r22
     9c6:	ac 01       	movw	r20, r24
     9c8:	c2 01       	movw	r24, r4
     9ca:	b1 01       	movw	r22, r2
     9cc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     9d0:	a9 81       	ldd	r26, Y+1	; 0x01
     9d2:	ba 81       	ldd	r27, Y+2	; 0x02
     9d4:	6d 93       	st	X+, r22
     9d6:	7d 93       	st	X+, r23
     9d8:	8d 93       	st	X+, r24
     9da:	9c 93       	st	X, r25
     9dc:	13 97       	sbiw	r26, 0x03	; 3
		data[1] = rcentery + r * (float) sin((double) (angle - phi));
     9de:	60 2f       	mov	r22, r16
     9e0:	71 2f       	mov	r23, r17
     9e2:	86 2d       	mov	r24, r6
     9e4:	97 2d       	mov	r25, r7
     9e6:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
     9ea:	a5 01       	movw	r20, r10
     9ec:	94 01       	movw	r18, r8
     9ee:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     9f2:	20 91 04 01 	lds	r18, 0x0104
     9f6:	30 91 05 01 	lds	r19, 0x0105
     9fa:	40 91 06 01 	lds	r20, 0x0106
     9fe:	50 91 07 01 	lds	r21, 0x0107
     a02:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     a06:	e9 81       	ldd	r30, Y+1	; 0x01
     a08:	fa 81       	ldd	r31, Y+2	; 0x02
     a0a:	64 83       	std	Z+4, r22	; 0x04
     a0c:	75 83       	std	Z+5, r23	; 0x05
     a0e:	86 83       	std	Z+6, r24	; 0x06
     a10:	97 83       	std	Z+7, r25	; 0x07
		data[2] = angle * 180.0 / 3.14;
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	44 e3       	ldi	r20, 0x34	; 52
     a18:	53 e4       	ldi	r21, 0x43	; 67
     a1a:	c7 01       	movw	r24, r14
     a1c:	b6 01       	movw	r22, r12
     a1e:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     a22:	23 ec       	ldi	r18, 0xC3	; 195
     a24:	35 ef       	ldi	r19, 0xF5	; 245
     a26:	48 e4       	ldi	r20, 0x48	; 72
     a28:	50 e4       	ldi	r21, 0x40	; 64
     a2a:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
     a2e:	a9 81       	ldd	r26, Y+1	; 0x01
     a30:	ba 81       	ldd	r27, Y+2	; 0x02
     a32:	18 96       	adiw	r26, 0x08	; 8
     a34:	6d 93       	st	X+, r22
     a36:	7d 93       	st	X+, r23
     a38:	8d 93       	st	X+, r24
     a3a:	9c 93       	st	X, r25
     a3c:	1b 97       	sbiw	r26, 0x0b	; 11
		data[3] = x[top];
     a3e:	00 91 42 01 	lds	r16, 0x0142
     a42:	10 91 43 01 	lds	r17, 0x0143
     a46:	00 0f       	add	r16, r16
     a48:	11 1f       	adc	r17, r17
     a4a:	f8 01       	movw	r30, r16
     a4c:	ec 5c       	subi	r30, 0xCC	; 204
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     a5c:	e9 81       	ldd	r30, Y+1	; 0x01
     a5e:	fa 81       	ldd	r31, Y+2	; 0x02
     a60:	64 87       	std	Z+12, r22	; 0x0c
     a62:	75 87       	std	Z+13, r23	; 0x0d
     a64:	86 87       	std	Z+14, r24	; 0x0e
     a66:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = x[bottom];
     a68:	e0 90 40 01 	lds	r14, 0x0140
     a6c:	f0 90 41 01 	lds	r15, 0x0141
     a70:	ee 0c       	add	r14, r14
     a72:	ff 1c       	adc	r15, r15
     a74:	f7 01       	movw	r30, r14
     a76:	ec 5c       	subi	r30, 0xCC	; 204
     a78:	fe 4f       	sbci	r31, 0xFE	; 254
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     a86:	a9 81       	ldd	r26, Y+1	; 0x01
     a88:	ba 81       	ldd	r27, Y+2	; 0x02
     a8a:	50 96       	adiw	r26, 0x10	; 16
     a8c:	6d 93       	st	X+, r22
     a8e:	7d 93       	st	X+, r23
     a90:	8d 93       	st	X+, r24
     a92:	9c 93       	st	X, r25
     a94:	53 97       	sbiw	r26, 0x13	; 19
		data[5] = y[top];
     a96:	f8 01       	movw	r30, r16
     a98:	e4 5d       	subi	r30, 0xD4	; 212
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	60 81       	ld	r22, Z
     a9e:	71 81       	ldd	r23, Z+1	; 0x01
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     aa8:	e9 81       	ldd	r30, Y+1	; 0x01
     aaa:	fa 81       	ldd	r31, Y+2	; 0x02
     aac:	64 8b       	std	Z+20, r22	; 0x14
     aae:	75 8b       	std	Z+21, r23	; 0x15
     ab0:	86 8b       	std	Z+22, r24	; 0x16
     ab2:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
     ab4:	f7 01       	movw	r30, r14
     ab6:	e4 5d       	subi	r30, 0xD4	; 212
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	60 81       	ld	r22, Z
     abc:	71 81       	ldd	r23, Z+1	; 0x01
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     ac6:	a9 81       	ldd	r26, Y+1	; 0x01
     ac8:	ba 81       	ldd	r27, Y+2	; 0x02
     aca:	58 96       	adiw	r26, 0x18	; 24
     acc:	6d 93       	st	X+, r22
     ace:	7d 93       	st	X+, r23
     ad0:	8d 93       	st	X+, r24
     ad2:	9c 93       	st	X, r25
     ad4:	5b 97       	sbiw	r26, 0x1b	; 27
		return 1;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	4e c5       	rjmp	.+2716   	; 0x1576 <__stack+0xa77>
	}
	
	else if (x[top] < 1023 && x[left] < 1023) {
     ada:	80 91 3e 01 	lds	r24, 0x013E
     ade:	90 91 3f 01 	lds	r25, 0x013F
     ae2:	fc 01       	movw	r30, r24
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ec 5c       	subi	r30, 0xCC	; 204
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	00 81       	ld	r16, Z
     aee:	11 81       	ldd	r17, Z+1	; 0x01
     af0:	0f 3f       	cpi	r16, 0xFF	; 255
     af2:	b3 e0       	ldi	r27, 0x03	; 3
     af4:	1b 07       	cpc	r17, r27
     af6:	08 f0       	brcs	.+2      	; 0xafa <localize+0x380>
     af8:	40 c1       	rjmp	.+640    	; 0xd7a <__stack+0x27b>
		beta = (float) atan2(((double) (x[top]-x[left])), ((double) (y[top]-y[left])));
     afa:	f7 01       	movw	r30, r14
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	e4 5d       	subi	r30, 0xD4	; 212
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	20 81       	ld	r18, Z
     b06:	31 81       	ldd	r19, Z+1	; 0x01
     b08:	3c 83       	std	Y+4, r19	; 0x04
     b0a:	2b 83       	std	Y+3, r18	; 0x03
     b0c:	fc 01       	movw	r30, r24
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	e4 5d       	subi	r30, 0xD4	; 212
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	b9 01       	movw	r22, r18
     b1c:	68 1b       	sub	r22, r24
     b1e:	79 0b       	sbc	r23, r25
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     b28:	6b 01       	movw	r12, r22
     b2a:	7c 01       	movw	r14, r24
     b2c:	b3 01       	movw	r22, r6
     b2e:	60 1b       	sub	r22, r16
     b30:	71 0b       	sbc	r23, r17
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     b3a:	a7 01       	movw	r20, r14
     b3c:	96 01       	movw	r18, r12
     b3e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
     b42:	4b 01       	movw	r8, r22
     b44:	5c 01       	movw	r10, r24
		
		//this theta is constant, considering defining it as such
		//to save calculation time
		posx = rcenterx - (128.0/1023.0)*((float)x[top]-dcenter * (float)sin((double) (theta_top_left-beta)));
     b46:	c0 90 08 01 	lds	r12, 0x0108
     b4a:	d0 90 09 01 	lds	r13, 0x0109
     b4e:	e0 90 0a 01 	lds	r14, 0x010A
     b52:	f0 90 0b 01 	lds	r15, 0x010B
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	6d e1       	ldi	r22, 0x1D	; 29
     b5c:	76 e8       	ldi	r23, 0x86	; 134
     b5e:	89 e5       	ldi	r24, 0x59	; 89
     b60:	9f e3       	ldi	r25, 0x3F	; 63
     b62:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     b66:	36 2e       	mov	r3, r22
     b68:	27 2e       	mov	r2, r23
     b6a:	8b 87       	std	Y+11, r24	; 0x0b
     b6c:	9f 87       	std	Y+15, r25	; 0x0f
     b6e:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
     b72:	6b 8b       	std	Y+19, r22	; 0x13
     b74:	7c 8b       	std	Y+20, r23	; 0x14
     b76:	8d 8b       	std	Y+21, r24	; 0x15
     b78:	9e 8b       	std	Y+22, r25	; 0x16
     b7a:	80 91 20 01 	lds	r24, 0x0120
     b7e:	90 91 21 01 	lds	r25, 0x0121
     b82:	a0 91 22 01 	lds	r26, 0x0122
     b86:	b0 91 23 01 	lds	r27, 0x0123
     b8a:	8f 83       	std	Y+7, r24	; 0x07
     b8c:	98 87       	std	Y+8, r25	; 0x08
     b8e:	a9 87       	std	Y+9, r26	; 0x09
     b90:	ba 87       	std	Y+10, r27	; 0x0a
     b92:	b3 01       	movw	r22, r6
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     b9c:	2b 01       	movw	r4, r22
     b9e:	3c 01       	movw	r6, r24
     ba0:	2f 81       	ldd	r18, Y+7	; 0x07
     ba2:	38 85       	ldd	r19, Y+8	; 0x08
     ba4:	49 85       	ldd	r20, Y+9	; 0x09
     ba6:	5a 85       	ldd	r21, Y+10	; 0x0a
     ba8:	6b 89       	ldd	r22, Y+19	; 0x13
     baa:	7c 89       	ldd	r23, Y+20	; 0x14
     bac:	8d 89       	ldd	r24, Y+21	; 0x15
     bae:	9e 89       	ldd	r25, Y+22	; 0x16
     bb0:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     bb4:	9b 01       	movw	r18, r22
     bb6:	ac 01       	movw	r20, r24
     bb8:	c3 01       	movw	r24, r6
     bba:	b2 01       	movw	r22, r4
     bbc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     bc0:	28 e0       	ldi	r18, 0x08	; 8
     bc2:	30 e2       	ldi	r19, 0x20	; 32
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	5e e3       	ldi	r21, 0x3E	; 62
     bc8:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     bd8:	6b 8b       	std	Y+19, r22	; 0x13
     bda:	7f 8b       	std	Y+23, r23	; 0x17
     bdc:	18 2f       	mov	r17, r24
     bde:	09 2f       	mov	r16, r25
		posy = rcentery - (96.0/1023.0)*((float)y[top]+0.5*dcenter * (float)cos((double) (theta_top_left-beta)));
     be0:	3b 85       	ldd	r19, Y+11	; 0x0b
     be2:	2f 85       	ldd	r18, Y+15	; 0x0f
     be4:	63 2d       	mov	r22, r3
     be6:	72 2d       	mov	r23, r2
     be8:	83 2f       	mov	r24, r19
     bea:	92 2f       	mov	r25, r18
     bec:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
     bf0:	6b 87       	std	Y+11, r22	; 0x0b
     bf2:	7c 87       	std	Y+12, r23	; 0x0c
     bf4:	8d 87       	std	Y+13, r24	; 0x0d
     bf6:	9e 87       	std	Y+14, r25	; 0x0e
     bf8:	ab 81       	ldd	r26, Y+3	; 0x03
     bfa:	bc 81       	ldd	r27, Y+4	; 0x04
     bfc:	bd 01       	movw	r22, r26
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     c06:	2b 01       	movw	r4, r22
     c08:	3c 01       	movw	r6, r24
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	5f e3       	ldi	r21, 0x3F	; 63
     c12:	6f 81       	ldd	r22, Y+7	; 0x07
     c14:	78 85       	ldd	r23, Y+8	; 0x08
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     c1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     c20:	3c 85       	ldd	r19, Y+12	; 0x0c
     c22:	4d 85       	ldd	r20, Y+13	; 0x0d
     c24:	5e 85       	ldd	r21, Y+14	; 0x0e
     c26:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     c2a:	9b 01       	movw	r18, r22
     c2c:	ac 01       	movw	r20, r24
     c2e:	c3 01       	movw	r24, r6
     c30:	b2 01       	movw	r22, r4
     c32:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     c36:	2c e0       	ldi	r18, 0x0C	; 12
     c38:	30 e3       	ldi	r19, 0x30	; 48
     c3a:	40 ec       	ldi	r20, 0xC0	; 192
     c3c:	5d e3       	ldi	r21, 0x3D	; 61
     c3e:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	60 91 04 01 	lds	r22, 0x0104
     c4a:	70 91 05 01 	lds	r23, 0x0105
     c4e:	80 91 06 01 	lds	r24, 0x0106
     c52:	90 91 07 01 	lds	r25, 0x0107
     c56:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     c5a:	46 2e       	mov	r4, r22
     c5c:	57 2e       	mov	r5, r23
     c5e:	68 2e       	mov	r6, r24
     c60:	79 2e       	mov	r7, r25
		
		angle = theta_top_left + beta;
     c62:	2d e1       	ldi	r18, 0x1D	; 29
     c64:	36 e8       	ldi	r19, 0x86	; 134
     c66:	49 e5       	ldi	r20, 0x59	; 89
     c68:	5f e3       	ldi	r21, 0x3F	; 63
     c6a:	c5 01       	movw	r24, r10
     c6c:	b4 01       	movw	r22, r8
     c6e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     c72:	36 2e       	mov	r3, r22
     c74:	27 2e       	mov	r2, r23
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	9f 83       	std	Y+7, r25	; 0x07
		phi = -1.0 * (float) atan2((double)posy, (double)posx);
     c7a:	7b 89       	ldd	r23, Y+19	; 0x13
     c7c:	6f 89       	ldd	r22, Y+23	; 0x17
     c7e:	27 2f       	mov	r18, r23
     c80:	36 2f       	mov	r19, r22
     c82:	41 2f       	mov	r20, r17
     c84:	50 2f       	mov	r21, r16
     c86:	64 2d       	mov	r22, r4
     c88:	75 2d       	mov	r23, r5
     c8a:	86 2d       	mov	r24, r6
     c8c:	97 2d       	mov	r25, r7
     c8e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
     c92:	4b 01       	movw	r8, r22
     c94:	5c 01       	movw	r10, r24
		
		r = (float) sqrt((double)((posx*posx)+(posy*posy)));
     c96:	7b 89       	ldd	r23, Y+19	; 0x13
     c98:	6f 89       	ldd	r22, Y+23	; 0x17
     c9a:	27 2f       	mov	r18, r23
     c9c:	36 2f       	mov	r19, r22
     c9e:	41 2f       	mov	r20, r17
     ca0:	50 2f       	mov	r21, r16
     ca2:	67 2f       	mov	r22, r23
     ca4:	73 2f       	mov	r23, r19
     ca6:	81 2f       	mov	r24, r17
     ca8:	90 2f       	mov	r25, r16
     caa:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     cae:	6b 87       	std	Y+11, r22	; 0x0b
     cb0:	7c 87       	std	Y+12, r23	; 0x0c
     cb2:	8d 87       	std	Y+13, r24	; 0x0d
     cb4:	9e 87       	std	Y+14, r25	; 0x0e
     cb6:	24 2d       	mov	r18, r4
     cb8:	35 2d       	mov	r19, r5
     cba:	46 2d       	mov	r20, r6
     cbc:	57 2d       	mov	r21, r7
     cbe:	64 2d       	mov	r22, r4
     cc0:	75 2d       	mov	r23, r5
     cc2:	86 2d       	mov	r24, r6
     cc4:	97 2d       	mov	r25, r7
     cc6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     cca:	9b 01       	movw	r18, r22
     ccc:	ac 01       	movw	r20, r24
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     cda:	0e 94 19 12 	call	0x2432	; 0x2432 <sqrt>
     cde:	2b 01       	movw	r4, r22
     ce0:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * (float)cos((double) (angle-phi));
     ce2:	a5 01       	movw	r20, r10
     ce4:	94 01       	movw	r18, r8
     ce6:	eb 81       	ldd	r30, Y+3	; 0x03
     ce8:	1f 81       	ldd	r17, Y+7	; 0x07
     cea:	63 2d       	mov	r22, r3
     cec:	72 2d       	mov	r23, r2
     cee:	8e 2f       	mov	r24, r30
     cf0:	91 2f       	mov	r25, r17
     cf2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     cf6:	06 2f       	mov	r16, r22
     cf8:	17 2f       	mov	r17, r23
     cfa:	a8 2e       	mov	r10, r24
     cfc:	b9 2e       	mov	r11, r25
     cfe:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
     d02:	a3 01       	movw	r20, r6
     d04:	92 01       	movw	r18, r4
     d06:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	c7 01       	movw	r24, r14
     d10:	b6 01       	movw	r22, r12
     d12:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     d16:	e9 81       	ldd	r30, Y+1	; 0x01
     d18:	fa 81       	ldd	r31, Y+2	; 0x02
     d1a:	60 83       	st	Z, r22
     d1c:	71 83       	std	Z+1, r23	; 0x01
     d1e:	82 83       	std	Z+2, r24	; 0x02
     d20:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery - r * (float)sin((double) (angle-phi));
     d22:	60 2f       	mov	r22, r16
     d24:	71 2f       	mov	r23, r17
     d26:	8a 2d       	mov	r24, r10
     d28:	9b 2d       	mov	r25, r11
     d2a:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
     d2e:	a3 01       	movw	r20, r6
     d30:	92 01       	movw	r18, r4
     d32:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	60 91 04 01 	lds	r22, 0x0104
     d3e:	70 91 05 01 	lds	r23, 0x0105
     d42:	80 91 06 01 	lds	r24, 0x0106
     d46:	90 91 07 01 	lds	r25, 0x0107
     d4a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     d4e:	a9 81       	ldd	r26, Y+1	; 0x01
     d50:	ba 81       	ldd	r27, Y+2	; 0x02
     d52:	14 96       	adiw	r26, 0x04	; 4
     d54:	6d 93       	st	X+, r22
     d56:	7d 93       	st	X+, r23
     d58:	8d 93       	st	X+, r24
     d5a:	9c 93       	st	X, r25
     d5c:	17 97       	sbiw	r26, 0x07	; 7
		data[2] = angle;
     d5e:	3b 81       	ldd	r19, Y+3	; 0x03
     d60:	2f 81       	ldd	r18, Y+7	; 0x07
     d62:	83 2d       	mov	r24, r3
     d64:	92 2d       	mov	r25, r2
     d66:	a3 2f       	mov	r26, r19
     d68:	b2 2f       	mov	r27, r18
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	80 87       	std	Z+8, r24	; 0x08
     d70:	91 87       	std	Z+9, r25	; 0x09
     d72:	a2 87       	std	Z+10, r26	; 0x0a
     d74:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	fe c3       	rjmp	.+2044   	; 0x1576 <__stack+0xa77>
	}
	
	else if (x[top] < 1023 && x[right] < 1023) {
     d7a:	80 91 3c 01 	lds	r24, 0x013C
     d7e:	90 91 3d 01 	lds	r25, 0x013D
     d82:	fc 01       	movw	r30, r24
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ec 5c       	subi	r30, 0xCC	; 204
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	00 81       	ld	r16, Z
     d8e:	11 81       	ldd	r17, Z+1	; 0x01
     d90:	0f 3f       	cpi	r16, 0xFF	; 255
     d92:	f3 e0       	ldi	r31, 0x03	; 3
     d94:	1f 07       	cpc	r17, r31
     d96:	08 f0       	brcs	.+2      	; 0xd9a <__stack+0x29b>
     d98:	df c3       	rjmp	.+1982   	; 0x1558 <__stack+0xa59>
		beta = (float)atan2((double) (x[top]-x[right]),(double) (y[top]-y[right]));
     d9a:	f7 01       	movw	r30, r14
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	e4 5d       	subi	r30, 0xD4	; 212
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	20 80       	ld	r2, Z
     da6:	31 80       	ldd	r3, Z+1	; 0x01
     da8:	fc 01       	movw	r30, r24
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	e4 5d       	subi	r30, 0xD4	; 212
     db0:	fe 4f       	sbci	r31, 0xFE	; 254
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	b1 01       	movw	r22, r2
     db8:	68 1b       	sub	r22, r24
     dba:	79 0b       	sbc	r23, r25
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     dc4:	6b 01       	movw	r12, r22
     dc6:	7c 01       	movw	r14, r24
     dc8:	b3 01       	movw	r22, r6
     dca:	60 1b       	sub	r22, r16
     dcc:	71 0b       	sbc	r23, r17
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     dd6:	a7 01       	movw	r20, r14
     dd8:	96 01       	movw	r18, r12
     dda:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
     dde:	4b 01       	movw	r8, r22
     de0:	5c 01       	movw	r10, r24

		posx = rcenterx - (128.0/1023.0)*((float)x[top]+0.5*dcenter * (float)sin((double) (theta_top_right-beta)));
     de2:	c0 90 08 01 	lds	r12, 0x0108
     de6:	d0 90 09 01 	lds	r13, 0x0109
     dea:	e0 90 0a 01 	lds	r14, 0x010A
     dee:	f0 90 0b 01 	lds	r15, 0x010B
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	60 91 20 01 	lds	r22, 0x0120
     dfe:	70 91 21 01 	lds	r23, 0x0121
     e02:	80 91 22 01 	lds	r24, 0x0122
     e06:	90 91 23 01 	lds	r25, 0x0123
     e0a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     e0e:	6b 83       	std	Y+3, r22	; 0x03
     e10:	7f 83       	std	Y+7, r23	; 0x07
     e12:	8b 87       	std	Y+11, r24	; 0x0b
     e14:	9f 87       	std	Y+15, r25	; 0x0f
     e16:	a5 01       	movw	r20, r10
     e18:	94 01       	movw	r18, r8
     e1a:	67 ec       	ldi	r22, 0xC7	; 199
     e1c:	7e ef       	ldi	r23, 0xFE	; 254
     e1e:	8d ee       	ldi	r24, 0xED	; 237
     e20:	9e e3       	ldi	r25, 0x3E	; 62
     e22:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     e26:	6b 8b       	std	Y+19, r22	; 0x13
     e28:	7f 8b       	std	Y+23, r23	; 0x17
     e2a:	88 8f       	std	Y+24, r24	; 0x18
     e2c:	99 8f       	std	Y+25, r25	; 0x19
     e2e:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
     e32:	6a 8f       	std	Y+26, r22	; 0x1a
     e34:	7b 8f       	std	Y+27, r23	; 0x1b
     e36:	8c 8f       	std	Y+28, r24	; 0x1c
     e38:	9d 8f       	std	Y+29, r25	; 0x1d
     e3a:	b3 01       	movw	r22, r6
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     e44:	2b 01       	movw	r4, r22
     e46:	3c 01       	movw	r6, r24
     e48:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e4a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     e4c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e4e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     e50:	bb 81       	ldd	r27, Y+3	; 0x03
     e52:	af 81       	ldd	r26, Y+7	; 0x07
     e54:	eb 85       	ldd	r30, Y+11	; 0x0b
     e56:	1f 85       	ldd	r17, Y+15	; 0x0f
     e58:	6b 2f       	mov	r22, r27
     e5a:	7a 2f       	mov	r23, r26
     e5c:	8e 2f       	mov	r24, r30
     e5e:	91 2f       	mov	r25, r17
     e60:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c3 01       	movw	r24, r6
     e6a:	b2 01       	movw	r22, r4
     e6c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     e70:	28 e0       	ldi	r18, 0x08	; 8
     e72:	30 e2       	ldi	r19, 0x20	; 32
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	5e e3       	ldi	r21, 0x3E	; 62
     e78:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     e88:	6e 8f       	std	Y+30, r22	; 0x1e
     e8a:	7a 8f       	std	Y+26, r23	; 0x1a
     e8c:	18 2f       	mov	r17, r24
     e8e:	09 2f       	mov	r16, r25
		posy = rcentery - (96.0/1023.0)*((float)y[top]-0.5*dcenter * (float)cos((double)  (theta_top_right-beta)));
     e90:	5b 89       	ldd	r21, Y+19	; 0x13
     e92:	4f 89       	ldd	r20, Y+23	; 0x17
     e94:	38 8d       	ldd	r19, Y+24	; 0x18
     e96:	29 8d       	ldd	r18, Y+25	; 0x19
     e98:	65 2f       	mov	r22, r21
     e9a:	74 2f       	mov	r23, r20
     e9c:	83 2f       	mov	r24, r19
     e9e:	92 2f       	mov	r25, r18
     ea0:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
     ea4:	2b 01       	movw	r4, r22
     ea6:	3c 01       	movw	r6, r24
     ea8:	b1 01       	movw	r22, r2
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
     eb2:	6b 8b       	std	Y+19, r22	; 0x13
     eb4:	7c 8b       	std	Y+20, r23	; 0x14
     eb6:	8d 8b       	std	Y+21, r24	; 0x15
     eb8:	9e 8b       	std	Y+22, r25	; 0x16
     eba:	a3 01       	movw	r20, r6
     ebc:	92 01       	movw	r18, r4
     ebe:	bb 81       	ldd	r27, Y+3	; 0x03
     ec0:	af 81       	ldd	r26, Y+7	; 0x07
     ec2:	7b 84       	ldd	r7, Y+11	; 0x0b
     ec4:	6f 84       	ldd	r6, Y+15	; 0x0f
     ec6:	6b 2f       	mov	r22, r27
     ec8:	7a 2f       	mov	r23, r26
     eca:	87 2d       	mov	r24, r7
     ecc:	96 2d       	mov	r25, r6
     ece:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	6b 89       	ldd	r22, Y+19	; 0x13
     ed8:	7c 89       	ldd	r23, Y+20	; 0x14
     eda:	8d 89       	ldd	r24, Y+21	; 0x15
     edc:	9e 89       	ldd	r25, Y+22	; 0x16
     ede:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     ee2:	2c e0       	ldi	r18, 0x0C	; 12
     ee4:	30 e3       	ldi	r19, 0x30	; 48
     ee6:	40 ec       	ldi	r20, 0xC0	; 192
     ee8:	5d e3       	ldi	r21, 0x3D	; 61
     eea:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	60 91 04 01 	lds	r22, 0x0104
     ef6:	70 91 05 01 	lds	r23, 0x0105
     efa:	80 91 06 01 	lds	r24, 0x0106
     efe:	90 91 07 01 	lds	r25, 0x0107
     f02:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     f06:	46 2e       	mov	r4, r22
     f08:	57 2e       	mov	r5, r23
     f0a:	68 2e       	mov	r6, r24
     f0c:	79 2e       	mov	r7, r25
		
		angle = -1.0 * theta_top_right - beta;
     f0e:	a5 01       	movw	r20, r10
     f10:	94 01       	movw	r18, r8
     f12:	67 ec       	ldi	r22, 0xC7	; 199
     f14:	7e ef       	ldi	r23, 0xFE	; 254
     f16:	8d ee       	ldi	r24, 0xED	; 237
     f18:	9e eb       	ldi	r25, 0xBE	; 190
     f1a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     f1e:	36 2e       	mov	r3, r22
     f20:	27 2e       	mov	r2, r23
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	9f 83       	std	Y+7, r25	; 0x07
		phi = -1.0 * (float) atan2((double)posy,(double)posx);
     f26:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f28:	6a 8d       	ldd	r22, Y+26	; 0x1a
     f2a:	27 2f       	mov	r18, r23
     f2c:	36 2f       	mov	r19, r22
     f2e:	41 2f       	mov	r20, r17
     f30:	50 2f       	mov	r21, r16
     f32:	64 2d       	mov	r22, r4
     f34:	75 2d       	mov	r23, r5
     f36:	86 2d       	mov	r24, r6
     f38:	97 2d       	mov	r25, r7
     f3a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
     f3e:	4b 01       	movw	r8, r22
     f40:	5c 01       	movw	r10, r24
		
		r = (float) sqrt((double) ((posx*posx)+(posy*posy)));
     f42:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f44:	6a 8d       	ldd	r22, Y+26	; 0x1a
     f46:	27 2f       	mov	r18, r23
     f48:	36 2f       	mov	r19, r22
     f4a:	41 2f       	mov	r20, r17
     f4c:	50 2f       	mov	r21, r16
     f4e:	67 2f       	mov	r22, r23
     f50:	73 2f       	mov	r23, r19
     f52:	81 2f       	mov	r24, r17
     f54:	90 2f       	mov	r25, r16
     f56:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     f5a:	6b 87       	std	Y+11, r22	; 0x0b
     f5c:	7c 87       	std	Y+12, r23	; 0x0c
     f5e:	8d 87       	std	Y+13, r24	; 0x0d
     f60:	9e 87       	std	Y+14, r25	; 0x0e
     f62:	24 2d       	mov	r18, r4
     f64:	35 2d       	mov	r19, r5
     f66:	46 2d       	mov	r20, r6
     f68:	57 2d       	mov	r21, r7
     f6a:	64 2d       	mov	r22, r4
     f6c:	75 2d       	mov	r23, r5
     f6e:	86 2d       	mov	r24, r6
     f70:	97 2d       	mov	r25, r7
     f72:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     f76:	9b 01       	movw	r18, r22
     f78:	ac 01       	movw	r20, r24
     f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f80:	9e 85       	ldd	r25, Y+14	; 0x0e
     f82:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     f86:	0e 94 19 12 	call	0x2432	; 0x2432 <sqrt>
     f8a:	2b 01       	movw	r4, r22
     f8c:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * (float)cos((double) (angle - phi));
     f8e:	a5 01       	movw	r20, r10
     f90:	94 01       	movw	r18, r8
     f92:	eb 81       	ldd	r30, Y+3	; 0x03
     f94:	1f 81       	ldd	r17, Y+7	; 0x07
     f96:	63 2d       	mov	r22, r3
     f98:	72 2d       	mov	r23, r2
     f9a:	8e 2f       	mov	r24, r30
     f9c:	91 2f       	mov	r25, r17
     f9e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
     fa2:	06 2f       	mov	r16, r22
     fa4:	17 2f       	mov	r17, r23
     fa6:	a8 2e       	mov	r10, r24
     fa8:	b9 2e       	mov	r11, r25
     faa:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
     fae:	a3 01       	movw	r20, r6
     fb0:	92 01       	movw	r18, r4
     fb2:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	c7 01       	movw	r24, r14
     fbc:	b6 01       	movw	r22, r12
     fbe:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     fc2:	a9 81       	ldd	r26, Y+1	; 0x01
     fc4:	ba 81       	ldd	r27, Y+2	; 0x02
     fc6:	6d 93       	st	X+, r22
     fc8:	7d 93       	st	X+, r23
     fca:	8d 93       	st	X+, r24
     fcc:	9c 93       	st	X, r25
     fce:	13 97       	sbiw	r26, 0x03	; 3
		data[1] = rcentery - r * (float)sin((double) (angle - phi));
     fd0:	60 2f       	mov	r22, r16
     fd2:	71 2f       	mov	r23, r17
     fd4:	8a 2d       	mov	r24, r10
     fd6:	9b 2d       	mov	r25, r11
     fd8:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
     fdc:	a3 01       	movw	r20, r6
     fde:	92 01       	movw	r18, r4
     fe0:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	60 91 04 01 	lds	r22, 0x0104
     fec:	70 91 05 01 	lds	r23, 0x0105
     ff0:	80 91 06 01 	lds	r24, 0x0106
     ff4:	90 91 07 01 	lds	r25, 0x0107
     ff8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
     ffc:	e9 81       	ldd	r30, Y+1	; 0x01
     ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    1000:	64 83       	std	Z+4, r22	; 0x04
    1002:	75 83       	std	Z+5, r23	; 0x05
    1004:	86 83       	std	Z+6, r24	; 0x06
    1006:	97 83       	std	Z+7, r25	; 0x07
		data[2] = angle;
    1008:	3b 81       	ldd	r19, Y+3	; 0x03
    100a:	2f 81       	ldd	r18, Y+7	; 0x07
    100c:	83 2d       	mov	r24, r3
    100e:	92 2d       	mov	r25, r2
    1010:	a3 2f       	mov	r26, r19
    1012:	b2 2f       	mov	r27, r18
    1014:	80 87       	std	Z+8, r24	; 0x08
    1016:	91 87       	std	Z+9, r25	; 0x09
    1018:	a2 87       	std	Z+10, r26	; 0x0a
    101a:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	ab c2       	rjmp	.+1366   	; 0x1576 <__stack+0xa77>
	}
	
	else if (x[bottom] < 1023 && x[left] < 1023) {
    1020:	80 91 40 01 	lds	r24, 0x0140
    1024:	90 91 41 01 	lds	r25, 0x0141
    1028:	fc 01       	movw	r30, r24
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ec 5c       	subi	r30, 0xCC	; 204
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	60 80       	ld	r6, Z
    1034:	71 80       	ldd	r7, Z+1	; 0x01
    1036:	ff ef       	ldi	r31, 0xFF	; 255
    1038:	6f 16       	cp	r6, r31
    103a:	f3 e0       	ldi	r31, 0x03	; 3
    103c:	7f 06       	cpc	r7, r31
    103e:	08 f0       	brcs	.+2      	; 0x1042 <__stack+0x543>
    1040:	8d c2       	rjmp	.+1306   	; 0x155c <__stack+0xa5d>
    1042:	20 91 3e 01 	lds	r18, 0x013E
    1046:	30 91 3f 01 	lds	r19, 0x013F
    104a:	f9 01       	movw	r30, r18
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	ec 5c       	subi	r30, 0xCC	; 204
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	00 81       	ld	r16, Z
    1056:	11 81       	ldd	r17, Z+1	; 0x01
    1058:	0f 3f       	cpi	r16, 0xFF	; 255
    105a:	43 e0       	ldi	r20, 0x03	; 3
    105c:	14 07       	cpc	r17, r20
    105e:	08 f0       	brcs	.+2      	; 0x1062 <__stack+0x563>
    1060:	3b c1       	rjmp	.+630    	; 0x12d8 <__stack+0x7d9>
		beta = (float)atan2((double) (x[bottom]-x[left]),(double) (y[bottom]-y[left]));
    1062:	fc 01       	movw	r30, r24
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	e4 5d       	subi	r30, 0xD4	; 212
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	8b 83       	std	Y+3, r24	; 0x03
    1074:	f9 01       	movw	r30, r18
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	e4 5d       	subi	r30, 0xD4	; 212
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	6b 81       	ldd	r22, Y+3	; 0x03
    1084:	7c 81       	ldd	r23, Y+4	; 0x04
    1086:	68 1b       	sub	r22, r24
    1088:	79 0b       	sbc	r23, r25
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    1092:	6b 01       	movw	r12, r22
    1094:	7c 01       	movw	r14, r24
    1096:	b3 01       	movw	r22, r6
    1098:	60 1b       	sub	r22, r16
    109a:	71 0b       	sbc	r23, r17
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    10a4:	a7 01       	movw	r20, r14
    10a6:	96 01       	movw	r18, r12
    10a8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
    10ac:	4b 01       	movw	r8, r22
    10ae:	5c 01       	movw	r10, r24

		posx = rcenterx - (128.0/1023.0)*((float)x[bottom]+dcenter*(float)sin((double) (theta_bottom_left-beta)));
    10b0:	c0 90 08 01 	lds	r12, 0x0108
    10b4:	d0 90 09 01 	lds	r13, 0x0109
    10b8:	e0 90 0a 01 	lds	r14, 0x010A
    10bc:	f0 90 0b 01 	lds	r15, 0x010B
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	6b e9       	ldi	r22, 0x9B	; 155
    10c6:	71 e7       	ldi	r23, 0x71	; 113
    10c8:	8e e0       	ldi	r24, 0x0E	; 14
    10ca:	9f e3       	ldi	r25, 0x3F	; 63
    10cc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    10d0:	36 2e       	mov	r3, r22
    10d2:	27 2e       	mov	r2, r23
    10d4:	8b 87       	std	Y+11, r24	; 0x0b
    10d6:	9f 87       	std	Y+15, r25	; 0x0f
    10d8:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
    10dc:	6b 8b       	std	Y+19, r22	; 0x13
    10de:	7c 8b       	std	Y+20, r23	; 0x14
    10e0:	8d 8b       	std	Y+21, r24	; 0x15
    10e2:	9e 8b       	std	Y+22, r25	; 0x16
    10e4:	80 91 20 01 	lds	r24, 0x0120
    10e8:	90 91 21 01 	lds	r25, 0x0121
    10ec:	a0 91 22 01 	lds	r26, 0x0122
    10f0:	b0 91 23 01 	lds	r27, 0x0123
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	98 87       	std	Y+8, r25	; 0x08
    10f8:	a9 87       	std	Y+9, r26	; 0x09
    10fa:	ba 87       	std	Y+10, r27	; 0x0a
    10fc:	b3 01       	movw	r22, r6
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    1106:	2b 01       	movw	r4, r22
    1108:	3c 01       	movw	r6, r24
    110a:	2f 81       	ldd	r18, Y+7	; 0x07
    110c:	38 85       	ldd	r19, Y+8	; 0x08
    110e:	49 85       	ldd	r20, Y+9	; 0x09
    1110:	5a 85       	ldd	r21, Y+10	; 0x0a
    1112:	6b 89       	ldd	r22, Y+19	; 0x13
    1114:	7c 89       	ldd	r23, Y+20	; 0x14
    1116:	8d 89       	ldd	r24, Y+21	; 0x15
    1118:	9e 89       	ldd	r25, Y+22	; 0x16
    111a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    111e:	9b 01       	movw	r18, r22
    1120:	ac 01       	movw	r20, r24
    1122:	c3 01       	movw	r24, r6
    1124:	b2 01       	movw	r22, r4
    1126:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
    112a:	28 e0       	ldi	r18, 0x08	; 8
    112c:	30 e2       	ldi	r19, 0x20	; 32
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	5e e3       	ldi	r21, 0x3E	; 62
    1132:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	c7 01       	movw	r24, r14
    113c:	b6 01       	movw	r22, r12
    113e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1142:	6b 8b       	std	Y+19, r22	; 0x13
    1144:	7f 8b       	std	Y+23, r23	; 0x17
    1146:	18 2f       	mov	r17, r24
    1148:	09 2f       	mov	r16, r25
		posy = rcentery - (96.0/1023.0)*((float)y[bottom]-dcenter*(float)cos((double) (theta_bottom_left-beta)));
    114a:	3b 85       	ldd	r19, Y+11	; 0x0b
    114c:	2f 85       	ldd	r18, Y+15	; 0x0f
    114e:	63 2d       	mov	r22, r3
    1150:	72 2d       	mov	r23, r2
    1152:	83 2f       	mov	r24, r19
    1154:	92 2f       	mov	r25, r18
    1156:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
    115a:	2b 01       	movw	r4, r22
    115c:	3c 01       	movw	r6, r24
    115e:	ab 81       	ldd	r26, Y+3	; 0x03
    1160:	bc 81       	ldd	r27, Y+4	; 0x04
    1162:	bd 01       	movw	r22, r26
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    116c:	6b 83       	std	Y+3, r22	; 0x03
    116e:	7c 83       	std	Y+4, r23	; 0x04
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	a3 01       	movw	r20, r6
    1176:	92 01       	movw	r18, r4
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	6b 81       	ldd	r22, Y+3	; 0x03
    118a:	7c 81       	ldd	r23, Y+4	; 0x04
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1194:	2c e0       	ldi	r18, 0x0C	; 12
    1196:	30 e3       	ldi	r19, 0x30	; 48
    1198:	40 ec       	ldi	r20, 0xC0	; 192
    119a:	5d e3       	ldi	r21, 0x3D	; 61
    119c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	60 91 04 01 	lds	r22, 0x0104
    11a8:	70 91 05 01 	lds	r23, 0x0105
    11ac:	80 91 06 01 	lds	r24, 0x0106
    11b0:	90 91 07 01 	lds	r25, 0x0107
    11b4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    11b8:	46 2e       	mov	r4, r22
    11ba:	57 2e       	mov	r5, r23
    11bc:	68 2e       	mov	r6, r24
    11be:	79 2e       	mov	r7, r25
		
		angle = -1.0 *3.14/2.0 + theta_bottom_left - beta;
    11c0:	a5 01       	movw	r20, r10
    11c2:	94 01       	movw	r18, r8
    11c4:	66 ef       	ldi	r22, 0xF6	; 246
    11c6:	7c eb       	ldi	r23, 0xBC	; 188
    11c8:	81 e8       	ldi	r24, 0x81	; 129
    11ca:	9f eb       	ldi	r25, 0xBF	; 191
    11cc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    11d0:	36 2e       	mov	r3, r22
    11d2:	27 2e       	mov	r2, r23
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	9f 83       	std	Y+7, r25	; 0x07
		phi = -1.0 * (float)atan2((double)posy,(double)posx);
    11d8:	7b 89       	ldd	r23, Y+19	; 0x13
    11da:	6f 89       	ldd	r22, Y+23	; 0x17
    11dc:	27 2f       	mov	r18, r23
    11de:	36 2f       	mov	r19, r22
    11e0:	41 2f       	mov	r20, r17
    11e2:	50 2f       	mov	r21, r16
    11e4:	64 2d       	mov	r22, r4
    11e6:	75 2d       	mov	r23, r5
    11e8:	86 2d       	mov	r24, r6
    11ea:	97 2d       	mov	r25, r7
    11ec:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
    11f0:	4b 01       	movw	r8, r22
    11f2:	5c 01       	movw	r10, r24
		
		r = (float)sqrt((double) ((posx*posx)+(posy*posy)));
    11f4:	7b 89       	ldd	r23, Y+19	; 0x13
    11f6:	6f 89       	ldd	r22, Y+23	; 0x17
    11f8:	27 2f       	mov	r18, r23
    11fa:	36 2f       	mov	r19, r22
    11fc:	41 2f       	mov	r20, r17
    11fe:	50 2f       	mov	r21, r16
    1200:	67 2f       	mov	r22, r23
    1202:	73 2f       	mov	r23, r19
    1204:	81 2f       	mov	r24, r17
    1206:	90 2f       	mov	r25, r16
    1208:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    120c:	6b 87       	std	Y+11, r22	; 0x0b
    120e:	7c 87       	std	Y+12, r23	; 0x0c
    1210:	8d 87       	std	Y+13, r24	; 0x0d
    1212:	9e 87       	std	Y+14, r25	; 0x0e
    1214:	24 2d       	mov	r18, r4
    1216:	35 2d       	mov	r19, r5
    1218:	46 2d       	mov	r20, r6
    121a:	57 2d       	mov	r21, r7
    121c:	64 2d       	mov	r22, r4
    121e:	75 2d       	mov	r23, r5
    1220:	86 2d       	mov	r24, r6
    1222:	97 2d       	mov	r25, r7
    1224:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
    1238:	0e 94 19 12 	call	0x2432	; 0x2432 <sqrt>
    123c:	2b 01       	movw	r4, r22
    123e:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * (float)cos((double) (angle - phi));
    1240:	a5 01       	movw	r20, r10
    1242:	94 01       	movw	r18, r8
    1244:	eb 81       	ldd	r30, Y+3	; 0x03
    1246:	1f 81       	ldd	r17, Y+7	; 0x07
    1248:	63 2d       	mov	r22, r3
    124a:	72 2d       	mov	r23, r2
    124c:	8e 2f       	mov	r24, r30
    124e:	91 2f       	mov	r25, r17
    1250:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
    1254:	06 2f       	mov	r16, r22
    1256:	17 2f       	mov	r17, r23
    1258:	a8 2e       	mov	r10, r24
    125a:	b9 2e       	mov	r11, r25
    125c:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
    1260:	a3 01       	movw	r20, r6
    1262:	92 01       	movw	r18, r4
    1264:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1268:	9b 01       	movw	r18, r22
    126a:	ac 01       	movw	r20, r24
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	60 83       	st	Z, r22
    127a:	71 83       	std	Z+1, r23	; 0x01
    127c:	82 83       	std	Z+2, r24	; 0x02
    127e:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery - r * (float)sin((double) (angle - phi));
    1280:	60 2f       	mov	r22, r16
    1282:	71 2f       	mov	r23, r17
    1284:	8a 2d       	mov	r24, r10
    1286:	9b 2d       	mov	r25, r11
    1288:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
    128c:	a3 01       	movw	r20, r6
    128e:	92 01       	movw	r18, r4
    1290:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	60 91 04 01 	lds	r22, 0x0104
    129c:	70 91 05 01 	lds	r23, 0x0105
    12a0:	80 91 06 01 	lds	r24, 0x0106
    12a4:	90 91 07 01 	lds	r25, 0x0107
    12a8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    12ac:	a9 81       	ldd	r26, Y+1	; 0x01
    12ae:	ba 81       	ldd	r27, Y+2	; 0x02
    12b0:	14 96       	adiw	r26, 0x04	; 4
    12b2:	6d 93       	st	X+, r22
    12b4:	7d 93       	st	X+, r23
    12b6:	8d 93       	st	X+, r24
    12b8:	9c 93       	st	X, r25
    12ba:	17 97       	sbiw	r26, 0x07	; 7
		data[2] = angle;
    12bc:	3b 81       	ldd	r19, Y+3	; 0x03
    12be:	2f 81       	ldd	r18, Y+7	; 0x07
    12c0:	83 2d       	mov	r24, r3
    12c2:	92 2d       	mov	r25, r2
    12c4:	a3 2f       	mov	r26, r19
    12c6:	b2 2f       	mov	r27, r18
    12c8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ca:	fa 81       	ldd	r31, Y+2	; 0x02
    12cc:	80 87       	std	Z+8, r24	; 0x08
    12ce:	91 87       	std	Z+9, r25	; 0x09
    12d0:	a2 87       	std	Z+10, r26	; 0x0a
    12d2:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	4f c1       	rjmp	.+670    	; 0x1576 <__stack+0xa77>
	}
	
	else if (x[bottom] < 1023 && x[right] < 1023) {
    12d8:	20 91 3c 01 	lds	r18, 0x013C
    12dc:	30 91 3d 01 	lds	r19, 0x013D
    12e0:	f9 01       	movw	r30, r18
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	ec 5c       	subi	r30, 0xCC	; 204
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	00 81       	ld	r16, Z
    12ec:	11 81       	ldd	r17, Z+1	; 0x01
    12ee:	0f 3f       	cpi	r16, 0xFF	; 255
    12f0:	f3 e0       	ldi	r31, 0x03	; 3
    12f2:	1f 07       	cpc	r17, r31
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__stack+0x7f9>
    12f6:	34 c1       	rjmp	.+616    	; 0x1560 <__stack+0xa61>
		beta = (float)atan2((double) (x[bottom]-x[right]), (double) (y[bottom]-y[right]));
    12f8:	fc 01       	movw	r30, r24
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	e4 5d       	subi	r30, 0xD4	; 212
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	20 80       	ld	r2, Z
    1304:	31 80       	ldd	r3, Z+1	; 0x01
    1306:	f9 01       	movw	r30, r18
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	e4 5d       	subi	r30, 0xD4	; 212
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	80 81       	ld	r24, Z
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	b1 01       	movw	r22, r2
    1316:	68 1b       	sub	r22, r24
    1318:	79 0b       	sbc	r23, r25
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    1322:	6b 01       	movw	r12, r22
    1324:	7c 01       	movw	r14, r24
    1326:	b3 01       	movw	r22, r6
    1328:	60 1b       	sub	r22, r16
    132a:	71 0b       	sbc	r23, r17
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    1334:	a7 01       	movw	r20, r14
    1336:	96 01       	movw	r18, r12
    1338:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
    133c:	4b 01       	movw	r8, r22
    133e:	5c 01       	movw	r10, r24

		posx = rcenterx - (128.0/1023.0)*((float)x[bottom]+0.5*dcenter*(float)sin((double) (theta_bottom_right-beta)));
    1340:	c0 90 08 01 	lds	r12, 0x0108
    1344:	d0 90 09 01 	lds	r13, 0x0109
    1348:	e0 90 0a 01 	lds	r14, 0x010A
    134c:	f0 90 0b 01 	lds	r15, 0x010B
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	60 91 20 01 	lds	r22, 0x0120
    135c:	70 91 21 01 	lds	r23, 0x0121
    1360:	80 91 22 01 	lds	r24, 0x0122
    1364:	90 91 23 01 	lds	r25, 0x0123
    1368:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    136c:	69 8f       	std	Y+25, r22	; 0x19
    136e:	7f 87       	std	Y+15, r23	; 0x0f
    1370:	8b 8b       	std	Y+19, r24	; 0x13
    1372:	9f 8b       	std	Y+23, r25	; 0x17
    1374:	a5 01       	movw	r20, r10
    1376:	94 01       	movw	r18, r8
    1378:	6b e7       	ldi	r22, 0x7B	; 123
    137a:	71 e5       	ldi	r23, 0x51	; 81
    137c:	8e e8       	ldi	r24, 0x8E	; 142
    137e:	9f e3       	ldi	r25, 0x3F	; 63
    1380:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1384:	68 8f       	std	Y+24, r22	; 0x18
    1386:	7b 83       	std	Y+3, r23	; 0x03
    1388:	8f 83       	std	Y+7, r24	; 0x07
    138a:	9b 87       	std	Y+11, r25	; 0x0b
    138c:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
    1390:	4b 01       	movw	r8, r22
    1392:	5c 01       	movw	r10, r24
    1394:	b3 01       	movw	r22, r6
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    139e:	2b 01       	movw	r4, r22
    13a0:	3c 01       	movw	r6, r24
    13a2:	a5 01       	movw	r20, r10
    13a4:	94 01       	movw	r18, r8
    13a6:	b9 8d       	ldd	r27, Y+25	; 0x19
    13a8:	af 85       	ldd	r26, Y+15	; 0x0f
    13aa:	1b 89       	ldd	r17, Y+19	; 0x13
    13ac:	0f 89       	ldd	r16, Y+23	; 0x17
    13ae:	6b 2f       	mov	r22, r27
    13b0:	7a 2f       	mov	r23, r26
    13b2:	81 2f       	mov	r24, r17
    13b4:	90 2f       	mov	r25, r16
    13b6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
    13c6:	28 e0       	ldi	r18, 0x08	; 8
    13c8:	30 e2       	ldi	r19, 0x20	; 32
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	5e e3       	ldi	r21, 0x3E	; 62
    13ce:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    13d2:	9b 01       	movw	r18, r22
    13d4:	ac 01       	movw	r20, r24
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    13de:	66 2e       	mov	r6, r22
    13e0:	77 2e       	mov	r7, r23
    13e2:	08 2f       	mov	r16, r24
    13e4:	19 2f       	mov	r17, r25
		posy = rcentery - (96.0/1023.0)*(y[bottom]-0.5*dcenter*(float)cos((double) (theta_bottom_right-beta)));
    13e6:	58 8d       	ldd	r21, Y+24	; 0x18
    13e8:	4b 81       	ldd	r20, Y+3	; 0x03
    13ea:	3f 81       	ldd	r19, Y+7	; 0x07
    13ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    13ee:	65 2f       	mov	r22, r21
    13f0:	74 2f       	mov	r23, r20
    13f2:	83 2f       	mov	r24, r19
    13f4:	92 2f       	mov	r25, r18
    13f6:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
    13fa:	4b 01       	movw	r8, r22
    13fc:	5c 01       	movw	r10, r24
    13fe:	b1 01       	movw	r22, r2
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatunsisf>
    1408:	1b 01       	movw	r2, r22
    140a:	2c 01       	movw	r4, r24
    140c:	a5 01       	movw	r20, r10
    140e:	94 01       	movw	r18, r8
    1410:	b9 8d       	ldd	r27, Y+25	; 0x19
    1412:	af 85       	ldd	r26, Y+15	; 0x0f
    1414:	bb 88       	ldd	r11, Y+19	; 0x13
    1416:	af 88       	ldd	r10, Y+23	; 0x17
    1418:	6b 2f       	mov	r22, r27
    141a:	7a 2f       	mov	r23, r26
    141c:	8b 2d       	mov	r24, r11
    141e:	9a 2d       	mov	r25, r10
    1420:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	c2 01       	movw	r24, r4
    142a:	b1 01       	movw	r22, r2
    142c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1430:	2c e0       	ldi	r18, 0x0C	; 12
    1432:	30 e3       	ldi	r19, 0x30	; 48
    1434:	40 ec       	ldi	r20, 0xC0	; 192
    1436:	5d e3       	ldi	r21, 0x3D	; 61
    1438:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    143c:	9b 01       	movw	r18, r22
    143e:	ac 01       	movw	r20, r24
    1440:	60 91 04 01 	lds	r22, 0x0104
    1444:	70 91 05 01 	lds	r23, 0x0105
    1448:	80 91 06 01 	lds	r24, 0x0106
    144c:	90 91 07 01 	lds	r25, 0x0107
    1450:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1454:	36 2e       	mov	r3, r22
    1456:	47 2e       	mov	r4, r23
    1458:	58 2e       	mov	r5, r24
    145a:	29 2e       	mov	r2, r25
		
		angle = theta_bottom_right - beta;
		phi = -1.0 * (float)atan2((double)posy,(double)posx);
    145c:	26 2d       	mov	r18, r6
    145e:	37 2d       	mov	r19, r7
    1460:	40 2f       	mov	r20, r16
    1462:	51 2f       	mov	r21, r17
    1464:	63 2d       	mov	r22, r3
    1466:	74 2d       	mov	r23, r4
    1468:	85 2d       	mov	r24, r5
    146a:	92 2d       	mov	r25, r2
    146c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <atan2>
    1470:	4b 01       	movw	r8, r22
    1472:	5c 01       	movw	r10, r24
		
		r = (float)sqrt((double) ((posx*posx)+(posy*posy)));
    1474:	26 2d       	mov	r18, r6
    1476:	37 2d       	mov	r19, r7
    1478:	40 2f       	mov	r20, r16
    147a:	51 2f       	mov	r21, r17
    147c:	66 2d       	mov	r22, r6
    147e:	77 2d       	mov	r23, r7
    1480:	80 2f       	mov	r24, r16
    1482:	91 2f       	mov	r25, r17
    1484:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1488:	6f 87       	std	Y+15, r22	; 0x0f
    148a:	78 8b       	std	Y+16, r23	; 0x10
    148c:	89 8b       	std	Y+17, r24	; 0x11
    148e:	9a 8b       	std	Y+18, r25	; 0x12
    1490:	23 2d       	mov	r18, r3
    1492:	34 2d       	mov	r19, r4
    1494:	45 2d       	mov	r20, r5
    1496:	52 2d       	mov	r21, r2
    1498:	63 2d       	mov	r22, r3
    149a:	74 2d       	mov	r23, r4
    149c:	85 2d       	mov	r24, r5
    149e:	92 2d       	mov	r25, r2
    14a0:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
    14a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    14aa:	78 89       	ldd	r23, Y+16	; 0x10
    14ac:	89 89       	ldd	r24, Y+17	; 0x11
    14ae:	9a 89       	ldd	r25, Y+18	; 0x12
    14b0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
    14b4:	0e 94 19 12 	call	0x2432	; 0x2432 <sqrt>
    14b8:	2b 01       	movw	r4, r22
    14ba:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * (float)cos((double)(angle - phi));
    14bc:	a5 01       	movw	r20, r10
    14be:	94 01       	movw	r18, r8
    14c0:	b8 8d       	ldd	r27, Y+24	; 0x18
    14c2:	ab 81       	ldd	r26, Y+3	; 0x03
    14c4:	ef 81       	ldd	r30, Y+7	; 0x07
    14c6:	1b 85       	ldd	r17, Y+11	; 0x0b
    14c8:	6b 2f       	mov	r22, r27
    14ca:	7a 2f       	mov	r23, r26
    14cc:	8e 2f       	mov	r24, r30
    14ce:	91 2f       	mov	r25, r17
    14d0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__addsf3>
    14d4:	b6 2e       	mov	r11, r22
    14d6:	07 2f       	mov	r16, r23
    14d8:	18 2f       	mov	r17, r24
    14da:	a9 2e       	mov	r10, r25
    14dc:	81 2f       	mov	r24, r17
    14de:	0e 94 19 10 	call	0x2032	; 0x2032 <cos>
    14e2:	a3 01       	movw	r20, r6
    14e4:	92 01       	movw	r18, r4
    14e6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c7 01       	movw	r24, r14
    14f0:	b6 01       	movw	r22, r12
    14f2:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    14f6:	a9 81       	ldd	r26, Y+1	; 0x01
    14f8:	ba 81       	ldd	r27, Y+2	; 0x02
    14fa:	6d 93       	st	X+, r22
    14fc:	7d 93       	st	X+, r23
    14fe:	8d 93       	st	X+, r24
    1500:	9c 93       	st	X, r25
    1502:	13 97       	sbiw	r26, 0x03	; 3
		data[1] = rcentery - r * (float)sin((double)(angle - phi));
    1504:	6b 2d       	mov	r22, r11
    1506:	70 2f       	mov	r23, r16
    1508:	81 2f       	mov	r24, r17
    150a:	9a 2d       	mov	r25, r10
    150c:	0e 94 0f 12 	call	0x241e	; 0x241e <sin>
    1510:	a3 01       	movw	r20, r6
    1512:	92 01       	movw	r18, r4
    1514:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1518:	9b 01       	movw	r18, r22
    151a:	ac 01       	movw	r20, r24
    151c:	60 91 04 01 	lds	r22, 0x0104
    1520:	70 91 05 01 	lds	r23, 0x0105
    1524:	80 91 06 01 	lds	r24, 0x0106
    1528:	90 91 07 01 	lds	r25, 0x0107
    152c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__subsf3>
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	64 83       	std	Z+4, r22	; 0x04
    1536:	75 83       	std	Z+5, r23	; 0x05
    1538:	86 83       	std	Z+6, r24	; 0x06
    153a:	97 83       	std	Z+7, r25	; 0x07
		data[2] = angle;
    153c:	58 8d       	ldd	r21, Y+24	; 0x18
    153e:	4b 81       	ldd	r20, Y+3	; 0x03
    1540:	3f 81       	ldd	r19, Y+7	; 0x07
    1542:	2b 85       	ldd	r18, Y+11	; 0x0b
    1544:	85 2f       	mov	r24, r21
    1546:	94 2f       	mov	r25, r20
    1548:	a3 2f       	mov	r26, r19
    154a:	b2 2f       	mov	r27, r18
    154c:	80 87       	std	Z+8, r24	; 0x08
    154e:	91 87       	std	Z+9, r25	; 0x09
    1550:	a2 87       	std	Z+10, r26	; 0x0a
    1552:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <__stack+0xa77>
	}
	
	return 0;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0d c0       	rjmp	.+26     	; 0x1576 <__stack+0xa77>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0b c0       	rjmp	.+22     	; 0x1576 <__stack+0xa77>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <__stack+0xa77>
    1564:	80 91 16 01 	lds	r24, 0x0116
    1568:	90 91 17 01 	lds	r25, 0x0117
    156c:	e4 e3       	ldi	r30, 0x34	; 52
    156e:	f1 e0       	ldi	r31, 0x01	; 1
	data[0] = blobs[0];
	data[1] = blobs[1];
	data[2] = 1.0;
}

unsigned char localize (float* data) {
    1570:	4c e3       	ldi	r20, 0x3C	; 60
    1572:	51 e0       	ldi	r21, 0x01	; 1
    1574:	36 c9       	rjmp	.-3476   	; 0x7e2 <localize+0x68>
		data[2] = angle;
		return 1;
	}
	
	return 0;
    1576:	6e 96       	adiw	r28, 0x1e	; 30
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	3f 90       	pop	r3
    15a4:	2f 90       	pop	r2
    15a6:	08 95       	ret

000015a8 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    15ae:	80 ea       	ldi	r24, 0xA0	; 160
    15b0:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    15b4:	82 e1       	ldi	r24, 0x12	; 18
    15b6:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    15b8:	09 b4       	in	r0, 0x29	; 41
    15ba:	00 fe       	sbrs	r0, 0
    15bc:	fd cf       	rjmp	.-6      	; 0x15b8 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    15be:	80 e9       	ldi	r24, 0x90	; 144
    15c0:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    15c4:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    15c8:	10 92 5d 01 	sts	0x015D, r1
	cdc_line_rtsdtr = 0;
    15cc:	10 92 5e 01 	sts	0x015E, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    15d0:	8c e0       	ldi	r24, 0x0C	; 12
    15d2:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    15d6:	78 94       	sei
    15d8:	08 95       	ret

000015da <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    15da:	80 91 5d 01 	lds	r24, 0x015D
}
    15de:	08 95       	ret

000015e0 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    15e4:	90 91 5d 01 	lds	r25, 0x015D
    15e8:	99 23       	and	r25, r25
    15ea:	09 f4       	brne	.+2      	; 0x15ee <m_usb_tx_char+0xe>
    15ec:	4d c0       	rjmp	.+154    	; 0x1688 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    15ee:	9f b7       	in	r25, 0x3f	; 63
	cli();
    15f0:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    15f2:	24 e0       	ldi	r18, 0x04	; 4
    15f4:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    15f8:	20 91 5f 01 	lds	r18, 0x015F
    15fc:	22 23       	and	r18, r18
    15fe:	49 f0       	breq	.+18     	; 0x1612 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1600:	20 91 e8 00 	lds	r18, 0x00E8
    1604:	25 fd       	sbrc	r18, 5
    1606:	03 c0       	rjmp	.+6      	; 0x160e <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1608:	9f bf       	out	0x3f, r25	; 63
			return -1;
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	42 c0       	rjmp	.+132    	; 0x1692 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    160e:	10 92 5f 01 	sts	0x015F, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1612:	30 91 e4 00 	lds	r19, 0x00E4
    1616:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1618:	20 91 e8 00 	lds	r18, 0x00E8
    161c:	25 fd       	sbrc	r18, 5
    161e:	25 c0       	rjmp	.+74     	; 0x166a <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1620:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1622:	90 91 e4 00 	lds	r25, 0x00E4
    1626:	93 17       	cp	r25, r19
    1628:	49 f0       	breq	.+18     	; 0x163c <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    162a:	90 91 5d 01 	lds	r25, 0x015D
    162e:	91 11       	cpse	r25, r1
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <m_usb_tx_char+0x70>
    1632:	2c c0       	rjmp	.+88     	; 0x168c <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1634:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1636:	98 81       	ld	r25, Y
    1638:	93 13       	cpse	r25, r19
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 5f 01 	sts	0x015F, r24
			return -1;
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	26 c0       	rjmp	.+76     	; 0x1692 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1646:	90 91 5d 01 	lds	r25, 0x015D
    164a:	91 11       	cpse	r25, r1
    164c:	08 c0       	rjmp	.+16     	; 0x165e <m_usb_tx_char+0x7e>
    164e:	20 c0       	rjmp	.+64     	; 0x1690 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1650:	a9 ee       	ldi	r26, 0xE9	; 233
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1656:	e8 ee       	ldi	r30, 0xE8	; 232
    1658:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    165a:	c4 ee       	ldi	r28, 0xE4	; 228
    165c:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    165e:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1660:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1662:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1664:	20 81       	ld	r18, Z
    1666:	25 ff       	sbrs	r18, 5
    1668:	e5 cf       	rjmp	.-54     	; 0x1634 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    166a:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    166e:	80 91 e8 00 	lds	r24, 0x00E8
    1672:	85 fd       	sbrc	r24, 5
    1674:	03 c0       	rjmp	.+6      	; 0x167c <m_usb_tx_char+0x9c>
    1676:	8a e3       	ldi	r24, 0x3A	; 58
    1678:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    167c:	85 e0       	ldi	r24, 0x05	; 5
    167e:	80 93 5c 01 	sts	0x015C, r24
	SREG = intr_state;
    1682:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <m_usb_tx_char+0xb2>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	8f 93       	push	r24
    16a4:	9f 93       	push	r25
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    16aa:	e1 ee       	ldi	r30, 0xE1	; 225
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
        UDINT = 0;
    16b0:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    16b2:	83 ff       	sbrs	r24, 3
    16b4:	11 c0       	rjmp	.+34     	; 0x16d8 <__vector_10+0x40>
		UENUM = 0;
    16b6:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    16c0:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    16c4:	92 e1       	ldi	r25, 0x12	; 18
    16c6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    16ca:	98 e0       	ldi	r25, 0x08	; 8
    16cc:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    16d0:	10 92 5d 01 	sts	0x015D, r1
		cdc_line_rtsdtr = 0;
    16d4:	10 92 5e 01 	sts	0x015E, r1
        }
	if (intbits & (1<<SOFI)) {
    16d8:	82 ff       	sbrs	r24, 2
    16da:	13 c0       	rjmp	.+38     	; 0x1702 <__vector_10+0x6a>
		if (usb_configuration) {
    16dc:	80 91 5d 01 	lds	r24, 0x015D
    16e0:	88 23       	and	r24, r24
    16e2:	79 f0       	breq	.+30     	; 0x1702 <__vector_10+0x6a>
			t = transmit_flush_timer;
    16e4:	80 91 5c 01 	lds	r24, 0x015C
			if (t) {
    16e8:	88 23       	and	r24, r24
    16ea:	59 f0       	breq	.+22     	; 0x1702 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    16ec:	81 50       	subi	r24, 0x01	; 1
    16ee:	80 93 5c 01 	sts	0x015C, r24
				if (!t) {
    16f2:	81 11       	cpse	r24, r1
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    16fc:	8a e3       	ldi	r24, 0x3A	; 58
    16fe:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti

00001714 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	2f 93       	push	r18
    1724:	3f 93       	push	r19
    1726:	4f 93       	push	r20
    1728:	5f 93       	push	r21
    172a:	6f 93       	push	r22
    172c:	7f 93       	push	r23
    172e:	8f 93       	push	r24
    1730:	9f 93       	push	r25
    1732:	af 93       	push	r26
    1734:	bf 93       	push	r27
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    173e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1742:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1746:	83 ff       	sbrs	r24, 3
    1748:	51 c1       	rjmp	.+674    	; 0x19ec <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    174a:	e1 ef       	ldi	r30, 0xF1	; 241
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1750:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1752:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1754:	30 81       	ld	r19, Z
    1756:	93 2f       	mov	r25, r19
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	dc 01       	movw	r26, r24
    175c:	a2 2b       	or	r26, r18
    175e:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1760:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1762:	60 81       	ld	r22, Z
    1764:	96 2f       	mov	r25, r22
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	85 2b       	or	r24, r21
                wLength = UEDATX;
    176a:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    176c:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    176e:	52 ef       	ldi	r21, 0xF2	; 242
    1770:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1774:	46 30       	cpi	r20, 0x06	; 6
    1776:	09 f0       	breq	.+2      	; 0x177a <__vector_11+0x66>
    1778:	5c c0       	rjmp	.+184    	; 0x1832 <__vector_11+0x11e>
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    177c:	81 e2       	ldi	r24, 0x21	; 33
    177e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1782:	3b c1       	rjmp	.+630    	; 0x19fa <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1784:	c6 e0       	ldi	r28, 0x06	; 6
    1786:	49 ef       	ldi	r20, 0xF9	; 249
    1788:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    178a:	fa 01       	movw	r30, r20
    178c:	65 91       	lpm	r22, Z+
    178e:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1790:	26 17       	cp	r18, r22
    1792:	37 07       	cpc	r19, r23
    1794:	19 f0       	breq	.+6      	; 0x179c <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1796:	49 5f       	subi	r20, 0xF9	; 249
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    179a:	20 c0       	rjmp	.+64     	; 0x17dc <__vector_11+0xc8>
				}
				list += 2;
    179c:	fa 01       	movw	r30, r20
    179e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    17a0:	65 91       	lpm	r22, Z+
    17a2:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    17a4:	86 17       	cp	r24, r22
    17a6:	97 07       	cpc	r25, r23
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    17aa:	49 5f       	subi	r20, 0xF9	; 249
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    17ae:	16 c0       	rjmp	.+44     	; 0x17dc <__vector_11+0xc8>
				}
				list += 2;
    17b0:	fa 01       	movw	r30, r20
    17b2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    17b4:	85 91       	lpm	r24, Z+
    17b6:	94 91       	lpm	r25, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	39 2f       	mov	r19, r25
				list += 2;
    17bc:	fa 01       	movw	r30, r20
    17be:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    17c0:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    17c2:	9b 2f       	mov	r25, r27
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    17c8:	8f 3f       	cpi	r24, 0xFF	; 255
    17ca:	91 05       	cpc	r25, r1
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <__vector_11+0xc0>
    17ce:	10 f0       	brcs	.+4      	; 0x17d4 <__vector_11+0xc0>
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	84 17       	cp	r24, r20
    17d6:	28 f4       	brcc	.+10     	; 0x17e2 <__vector_11+0xce>
    17d8:	48 2f       	mov	r20, r24
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <__vector_11+0xce>
    17dc:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    17de:	a9 f6       	brne	.-86     	; 0x178a <__vector_11+0x76>
    17e0:	cd cf       	rjmp	.-102    	; 0x177c <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17e2:	c8 ee       	ldi	r28, 0xE8	; 232
    17e4:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17e6:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    17e8:	a1 ef       	ldi	r26, 0xF1	; 241
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17ec:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17ee:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    17f0:	98 2f       	mov	r25, r24
    17f2:	95 70       	andi	r25, 0x05	; 5
    17f4:	e1 f3       	breq	.-8      	; 0x17ee <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    17f6:	82 fd       	sbrc	r24, 2
    17f8:	00 c1       	rjmp	.+512    	; 0x19fa <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17fa:	64 2f       	mov	r22, r20
    17fc:	41 31       	cpi	r20, 0x11	; 17
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <__vector_11+0xee>
    1800:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1802:	66 23       	and	r22, r22
    1804:	09 f4       	brne	.+2      	; 0x1808 <__vector_11+0xf4>
    1806:	f6 c0       	rjmp	.+492    	; 0x19f4 <__vector_11+0x2e0>
    1808:	c9 01       	movw	r24, r18
    180a:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    180c:	fc 01       	movw	r30, r24
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	e4 91       	lpm	r30, Z
    1812:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1814:	51 50       	subi	r21, 0x01	; 1
    1816:	d1 f7       	brne	.-12     	; 0x180c <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1818:	86 2f       	mov	r24, r22
    181a:	81 50       	subi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	28 0f       	add	r18, r24
    1822:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1824:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1826:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1828:	41 11       	cpse	r20, r1
    182a:	e1 cf       	rjmp	.-62     	; 0x17ee <__vector_11+0xda>
    182c:	60 31       	cpi	r22, 0x10	; 16
    182e:	f9 f2       	breq	.-66     	; 0x17ee <__vector_11+0xda>
    1830:	e4 c0       	rjmp	.+456    	; 0x19fa <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1832:	45 30       	cpi	r20, 0x05	; 5
    1834:	61 f4       	brne	.+24     	; 0x184e <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1836:	8e ef       	ldi	r24, 0xFE	; 254
    1838:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    183c:	e8 ee       	ldi	r30, 0xE8	; 232
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	80 ff       	sbrs	r24, 0
    1844:	fd cf       	rjmp	.-6      	; 0x1840 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1846:	20 68       	ori	r18, 0x80	; 128
    1848:	20 93 e3 00 	sts	0x00E3, r18
			return;
    184c:	d6 c0       	rjmp	.+428    	; 0x19fa <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    184e:	49 30       	cpi	r20, 0x09	; 9
    1850:	a1 f5       	brne	.+104    	; 0x18ba <__vector_11+0x1a6>
    1852:	71 11       	cpse	r23, r1
    1854:	5b c0       	rjmp	.+182    	; 0x190c <__vector_11+0x1f8>
			usb_configuration = wValue;
    1856:	20 93 5d 01 	sts	0x015D, r18
			cdc_line_rtsdtr = 0;
    185a:	10 92 5e 01 	sts	0x015E, r1
			transmit_flush_timer = 0;
    185e:	10 92 5c 01 	sts	0x015C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1862:	8e ef       	ldi	r24, 0xFE	; 254
    1864:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1868:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    186a:	83 e2       	ldi	r24, 0x23	; 35
    186c:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    186e:	c9 ee       	ldi	r28, 0xE9	; 233
    1870:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1872:	ab ee       	ldi	r26, 0xEB	; 235
    1874:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1876:	6c ee       	ldi	r22, 0xEC	; 236
    1878:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    187a:	4d ee       	ldi	r20, 0xED	; 237
    187c:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    187e:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1880:	9c 01       	movw	r18, r24
    1882:	2f 5f       	subi	r18, 0xFF	; 255
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
    1886:	fc 01       	movw	r30, r24
    1888:	04 91       	lpm	r16, Z
				UECONX = en;
    188a:	0c 93       	st	X, r16
				if (en) {
    188c:	00 23       	and	r16, r16
    188e:	59 f0       	breq	.+22     	; 0x18a6 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1890:	f9 01       	movw	r30, r18
    1892:	24 91       	lpm	r18, Z
    1894:	fb 01       	movw	r30, r22
    1896:	20 83       	st	Z, r18
    1898:	fc 01       	movw	r30, r24
    189a:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    189c:	03 96       	adiw	r24, 0x03	; 3
    189e:	24 91       	lpm	r18, Z
    18a0:	fa 01       	movw	r30, r20
    18a2:	20 83       	st	Z, r18
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    18a6:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    18a8:	1f 5f       	subi	r17, 0xFF	; 255
    18aa:	15 30       	cpi	r17, 0x05	; 5
    18ac:	41 f7       	brne	.-48     	; 0x187e <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    18ae:	ea ee       	ldi	r30, 0xEA	; 234
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8e e1       	ldi	r24, 0x1E	; 30
    18b4:	80 83       	st	Z, r24
        		UERST = 0;
    18b6:	10 82       	st	Z, r1
			return;
    18b8:	a0 c0       	rjmp	.+320    	; 0x19fa <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    18ba:	48 30       	cpi	r20, 0x08	; 8
    18bc:	81 f4       	brne	.+32     	; 0x18de <__vector_11+0x1ca>
    18be:	70 38       	cpi	r23, 0x80	; 128
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <__vector_11+0x1b0>
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18c4:	e8 ee       	ldi	r30, 0xE8	; 232
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 ff       	sbrs	r24, 0
    18cc:	fd cf       	rjmp	.-6      	; 0x18c8 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    18ce:	80 91 5d 01 	lds	r24, 0x015D
    18d2:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18d6:	8e ef       	ldi	r24, 0xFE	; 254
    18d8:	80 93 e8 00 	sts	0x00E8, r24
    18dc:	8e c0       	rjmp	.+284    	; 0x19fa <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    18de:	41 32       	cpi	r20, 0x21	; 33
    18e0:	a9 f4       	brne	.+42     	; 0x190c <__vector_11+0x1f8>
    18e2:	71 3a       	cpi	r23, 0xA1	; 161
    18e4:	f1 f5       	brne	.+124    	; 0x1962 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18e6:	e8 ee       	ldi	r30, 0xE8	; 232
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 ff       	sbrs	r24, 0
    18ee:	fd cf       	rjmp	.-6      	; 0x18ea <__vector_11+0x1d6>
    18f0:	ec e0       	ldi	r30, 0x0C	; 12
    18f2:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    18f4:	a1 ef       	ldi	r26, 0xF1	; 241
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	81 91       	ld	r24, Z+
    18fa:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	e3 31       	cpi	r30, 0x13	; 19
    1900:	f4 07       	cpc	r31, r20
    1902:	d1 f7       	brne	.-12     	; 0x18f8 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1904:	8e ef       	ldi	r24, 0xFE	; 254
    1906:	80 93 e8 00 	sts	0x00E8, r24
    190a:	77 c0       	rjmp	.+238    	; 0x19fa <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    190c:	40 32       	cpi	r20, 0x20	; 32
    190e:	c9 f4       	brne	.+50     	; 0x1942 <__vector_11+0x22e>
    1910:	71 32       	cpi	r23, 0x21	; 33
    1912:	09 f0       	breq	.+2      	; 0x1916 <__vector_11+0x202>
    1914:	6b c0       	rjmp	.+214    	; 0x19ec <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1916:	e8 ee       	ldi	r30, 0xE8	; 232
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	82 ff       	sbrs	r24, 2
    191e:	fd cf       	rjmp	.-6      	; 0x191a <__vector_11+0x206>
    1920:	ec e0       	ldi	r30, 0x0C	; 12
    1922:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1924:	a1 ef       	ldi	r26, 0xF1	; 241
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	8c 91       	ld	r24, X
    192a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    192c:	51 e0       	ldi	r21, 0x01	; 1
    192e:	e3 31       	cpi	r30, 0x13	; 19
    1930:	f5 07       	cpc	r31, r21
    1932:	d1 f7       	brne	.-12     	; 0x1928 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1934:	e8 ee       	ldi	r30, 0xE8	; 232
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8b ef       	ldi	r24, 0xFB	; 251
    193a:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    193c:	8e ef       	ldi	r24, 0xFE	; 254
    193e:	80 83       	st	Z, r24
    1940:	5c c0       	rjmp	.+184    	; 0x19fa <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1942:	42 32       	cpi	r20, 0x22	; 34
    1944:	71 f4       	brne	.+28     	; 0x1962 <__vector_11+0x24e>
    1946:	71 32       	cpi	r23, 0x21	; 33
    1948:	09 f0       	breq	.+2      	; 0x194c <__vector_11+0x238>
    194a:	50 c0       	rjmp	.+160    	; 0x19ec <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    194c:	20 93 5e 01 	sts	0x015E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1950:	e8 ee       	ldi	r30, 0xE8	; 232
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 ff       	sbrs	r24, 0
    1958:	fd cf       	rjmp	.-6      	; 0x1954 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    195a:	8e ef       	ldi	r24, 0xFE	; 254
    195c:	80 93 e8 00 	sts	0x00E8, r24
    1960:	4c c0       	rjmp	.+152    	; 0x19fa <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1962:	41 11       	cpse	r20, r1
    1964:	1a c0       	rjmp	.+52     	; 0x199a <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1966:	e8 ee       	ldi	r30, 0xE8	; 232
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	20 81       	ld	r18, Z
    196c:	20 ff       	sbrs	r18, 0
    196e:	fd cf       	rjmp	.-6      	; 0x196a <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1970:	72 38       	cpi	r23, 0x82	; 130
    1972:	51 f4       	brne	.+20     	; 0x1988 <__vector_11+0x274>
				UENUM = wIndex;
    1974:	e9 ee       	ldi	r30, 0xE9	; 233
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    197a:	80 91 eb 00 	lds	r24, 0x00EB
    197e:	85 fb       	bst	r24, 5
    1980:	88 27       	eor	r24, r24
    1982:	80 f9       	bld	r24, 0
				UENUM = 0;
    1984:	10 82       	st	Z, r1
    1986:	01 c0       	rjmp	.+2      	; 0x198a <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1988:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    198a:	e1 ef       	ldi	r30, 0xF1	; 241
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 83       	st	Z, r24
			UEDATX = 0;
    1990:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1992:	8e ef       	ldi	r24, 0xFE	; 254
    1994:	80 93 e8 00 	sts	0x00E8, r24
    1998:	30 c0       	rjmp	.+96     	; 0x19fa <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    199a:	41 30       	cpi	r20, 0x01	; 1
    199c:	11 f0       	breq	.+4      	; 0x19a2 <__vector_11+0x28e>
    199e:	43 30       	cpi	r20, 0x03	; 3
    19a0:	29 f5       	brne	.+74     	; 0x19ec <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    19a2:	72 30       	cpi	r23, 0x02	; 2
    19a4:	19 f5       	brne	.+70     	; 0x19ec <__vector_11+0x2d8>
    19a6:	23 2b       	or	r18, r19
    19a8:	09 f5       	brne	.+66     	; 0x19ec <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    19aa:	8f 77       	andi	r24, 0x7F	; 127
    19ac:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    19ae:	38 2f       	mov	r19, r24
    19b0:	31 50       	subi	r19, 0x01	; 1
    19b2:	34 30       	cpi	r19, 0x04	; 4
    19b4:	d8 f4       	brcc	.+54     	; 0x19ec <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19b6:	3e ef       	ldi	r19, 0xFE	; 254
    19b8:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    19bc:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    19c0:	43 30       	cpi	r20, 0x03	; 3
    19c2:	21 f4       	brne	.+8      	; 0x19cc <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    19c4:	81 e2       	ldi	r24, 0x21	; 33
    19c6:	80 93 eb 00 	sts	0x00EB, r24
    19ca:	17 c0       	rjmp	.+46     	; 0x19fa <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    19cc:	99 e1       	ldi	r25, 0x19	; 25
    19ce:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    19d2:	21 e0       	ldi	r18, 0x01	; 1
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	d9 01       	movw	r26, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <__vector_11+0x2ca>
    19da:	aa 0f       	add	r26, r26
    19dc:	bb 1f       	adc	r27, r27
    19de:	8a 95       	dec	r24
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <__vector_11+0x2c6>
    19e2:	ea ee       	ldi	r30, 0xEA	; 234
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	a0 83       	st	Z, r26
					UERST = 0;
    19e8:	10 82       	st	Z, r1
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    19ec:	81 e2       	ldi	r24, 0x21	; 33
    19ee:	80 93 eb 00 	sts	0x00EB, r24
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19f4:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    19f6:	41 11       	cpse	r20, r1
    19f8:	fa ce       	rjmp	.-524    	; 0x17ee <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	7f 91       	pop	r23
    1a0c:	6f 91       	pop	r22
    1a0e:	5f 91       	pop	r21
    1a10:	4f 91       	pop	r20
    1a12:	3f 91       	pop	r19
    1a14:	2f 91       	pop	r18
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	0f 90       	pop	r0
    1a20:	1f 90       	pop	r1
    1a22:	18 95       	reti

00001a24 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	21 96       	adiw	r28, 0x01	; 1
    1a2e:	fc 01       	movw	r30, r24
    1a30:	14 91       	lpm	r17, Z
		if (!c) break;
    1a32:	11 23       	and	r17, r17
    1a34:	69 f0       	breq	.+26     	; 0x1a50 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    1a36:	1a 30       	cpi	r17, 0x0A	; 10
    1a38:	19 f4       	brne	.+6      	; 0x1a40 <print_P+0x1c>
    1a3a:	8d e0       	ldi	r24, 0x0D	; 13
    1a3c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <m_usb_tx_char>
		usb_tx_char(c);
    1a40:	81 2f       	mov	r24, r17
    1a42:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a46:	fe 01       	movw	r30, r28
    1a48:	21 96       	adiw	r28, 0x01	; 1
    1a4a:	14 91       	lpm	r17, Z
		if (!c) break;
    1a4c:	11 11       	cpse	r17, r1
    1a4e:	f3 cf       	rjmp	.-26     	; 0x1a36 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	08 95       	ret

00001a58 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	27 97       	sbiw	r28, 0x07	; 7
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1a74:	8e 01       	movw	r16, r28
    1a76:	0f 5f       	subi	r16, 0xFF	; 255
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	27 e0       	ldi	r18, 0x07	; 7
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	11 92       	st	Z+, r1
    1a80:	2a 95       	dec	r18
    1a82:	e9 f7       	brne	.-6      	; 0x1a7e <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1a84:	4a e0       	ldi	r20, 0x0A	; 10
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	b8 01       	movw	r22, r16
    1a8a:	0e 94 a4 12 	call	0x2548	; 0x2548 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1a8e:	7e 01       	movw	r14, r28
    1a90:	f8 e0       	ldi	r31, 0x08	; 8
    1a92:	ef 0e       	add	r14, r31
    1a94:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1a96:	f8 01       	movw	r30, r16
    1a98:	81 91       	ld	r24, Z+
    1a9a:	8f 01       	movw	r16, r30
    1a9c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1a9e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1aa2:	0e 15       	cp	r16, r14
    1aa4:	1f 05       	cpc	r17, r15
    1aa6:	b9 f7       	brne	.-18     	; 0x1a96 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1aa8:	27 96       	adiw	r28, 0x07	; 7
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	08 95       	ret

00001ac2 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1ac6:	ec eb       	ldi	r30, 0xBC	; 188
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 23       	and	r24, r24
    1ace:	34 f0       	brlt	.+12     	; 0x1adc <twi_wait+0x1a>
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	29 3e       	cpi	r18, 0xE9	; 233
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	38 07       	cpc	r19, r24
    1ada:	b9 f7       	brne	.-18     	; 0x1aca <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	28 3e       	cpi	r18, 0xE8	; 232
    1ae0:	33 40       	sbci	r19, 0x03	; 3
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <twi_wait+0x24>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1ae6:	08 95       	ret

00001ae8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1ae8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1aec:	84 e8       	ldi	r24, 0x84	; 132
    1aee:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1af2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <twi_wait>
    1af6:	88 23       	and	r24, r24
    1af8:	21 f0       	breq	.+8      	; 0x1b02 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1afa:	80 91 b9 00 	lds	r24, 0x00B9
    1afe:	88 7f       	andi	r24, 0xF8	; 248
    1b00:	08 95       	ret
	} else {
		return 0;					// comm failure
    1b02:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1b04:	08 95       	ret

00001b06 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1b06:	cf 93       	push	r28
    1b08:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b0a:	94 ea       	ldi	r25, 0xA4	; 164
    1b0c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1b10:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <twi_wait>
    1b14:	88 23       	and	r24, r24
    1b16:	61 f0       	breq	.+24     	; 0x1b30 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1b18:	8c 2f       	mov	r24, r28
    1b1a:	88 0f       	add	r24, r24
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1b22:	88 34       	cpi	r24, 0x48	; 72
    1b24:	39 f4       	brne	.+14     	; 0x1b34 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b26:	84 e9       	ldi	r24, 0x94	; 148
    1b28:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1b34:	81 e0       	ldi	r24, 0x01	; 1
}	
    1b36:	cf 91       	pop	r28
    1b38:	08 95       	ret

00001b3a <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1b3a:	cf 93       	push	r28
    1b3c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b3e:	94 ea       	ldi	r25, 0xA4	; 164
    1b40:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1b44:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <twi_wait>
    1b48:	88 23       	and	r24, r24
    1b4a:	59 f0       	breq	.+22     	; 0x1b62 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1b4c:	8c 2f       	mov	r24, r28
    1b4e:	88 0f       	add	r24, r24
    1b50:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1b54:	80 32       	cpi	r24, 0x20	; 32
    1b56:	39 f4       	brne	.+14     	; 0x1b66 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b58:	84 e9       	ldi	r24, 0x94	; 148
    1b5a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1b66:	81 e0       	ldi	r24, 0x01	; 1
}	
    1b68:	cf 91       	pop	r28
    1b6a:	08 95       	ret

00001b6c <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1b6c:	84 e9       	ldi	r24, 0x94	; 148
    1b6e:	80 93 bc 00 	sts	0x00BC, r24
    1b72:	08 95       	ret

00001b74 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	60 97       	sbiw	r28, 0x10	; 16
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	e8 2e       	mov	r14, r24
    1b92:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1b94:	fe 01       	movw	r30, r28
    1b96:	31 96       	adiw	r30, 0x01	; 1
    1b98:	80 e1       	ldi	r24, 0x10	; 16
    1b9a:	df 01       	movw	r26, r30
    1b9c:	1d 92       	st	X+, r1
    1b9e:	8a 95       	dec	r24
    1ba0:	e9 f7       	brne	.-6      	; 0x1b9c <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1ba2:	88 e5       	ldi	r24, 0x58	; 88
    1ba4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <m_wii_read+0x3a>
    1bac:	66 c0       	rjmp	.+204    	; 0x1c7a <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1bae:	86 e3       	ldi	r24, 0x36	; 54
    1bb0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <m_wii_read+0x46>
    1bb8:	62 c0       	rjmp	.+196    	; 0x1c7e <m_wii_read+0x10a>
	end();
    1bba:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bbe:	b8 e0       	ldi	r27, 0x08	; 8
    1bc0:	ba 95       	dec	r27
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <m_wii_read+0x4c>
    1bc4:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1bc6:	88 e5       	ldi	r24, 0x58	; 88
    1bc8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <start_read>
    1bcc:	88 23       	and	r24, r24
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <m_wii_read+0x5e>
    1bd0:	58 c0       	rjmp	.+176    	; 0x1c82 <m_wii_read+0x10e>
    1bd2:	ae 01       	movw	r20, r28
    1bd4:	4f 5f       	subi	r20, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1bd8:	8e 01       	movw	r16, r28
    1bda:	00 5f       	subi	r16, 0xF0	; 240
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1bde:	ec eb       	ldi	r30, 0xBC	; 188
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1be4:	2b eb       	ldi	r18, 0xBB	; 187
    1be6:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1be8:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	ec f7       	brge	.-6      	; 0x1bea <m_wii_read+0x76>
		temp[i] = TWDR;
    1bf0:	d9 01       	movw	r26, r18
    1bf2:	8c 91       	ld	r24, X
    1bf4:	da 01       	movw	r26, r20
    1bf6:	8d 93       	st	X+, r24
    1bf8:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1bfa:	a0 17       	cp	r26, r16
    1bfc:	b1 07       	cpc	r27, r17
    1bfe:	a1 f7       	brne	.-24     	; 0x1be8 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1c00:	84 e8       	ldi	r24, 0x84	; 132
    1c02:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1c06:	ec eb       	ldi	r30, 0xBC	; 188
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 23       	and	r24, r24
    1c0e:	ec f7       	brge	.-6      	; 0x1c0a <m_wii_read+0x96>
	temp[15] = TWDR;
    1c10:	80 91 bb 00 	lds	r24, 0x00BB
    1c14:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1c16:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
    1c1a:	de 01       	movw	r26, r28
    1c1c:	14 96       	adiw	r26, 0x04	; 4
    1c1e:	6e 2d       	mov	r22, r14
    1c20:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1c22:	4c 91       	ld	r20, X
    1c24:	24 2f       	mov	r18, r20
    1c26:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1c28:	cd 01       	movw	r24, r26
    1c2a:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	80 81       	ld	r24, Z
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	f0 e1       	ldi	r31, 0x10	; 16
    1c34:	2f 9f       	mul	r18, r31
    1c36:	80 0d       	add	r24, r0
    1c38:	91 1d       	adc	r25, r1
    1c3a:	11 24       	eor	r1, r1
    1c3c:	fb 01       	movw	r30, r22
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1c42:	84 2f       	mov	r24, r20
    1c44:	80 7c       	andi	r24, 0xC0	; 192
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1c50:	9d 01       	movw	r18, r26
    1c52:	21 50       	subi	r18, 0x01	; 1
    1c54:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1c56:	f9 01       	movw	r30, r18
    1c58:	20 81       	ld	r18, Z
    1c5a:	82 0f       	add	r24, r18
    1c5c:	91 1d       	adc	r25, r1
    1c5e:	fb 01       	movw	r30, r22
    1c60:	93 83       	std	Z+3, r25	; 0x03
    1c62:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1c64:	4f 70       	andi	r20, 0x0F	; 15
    1c66:	44 83       	std	Z+4, r20	; 0x04
    1c68:	15 82       	std	Z+5, r1	; 0x05
    1c6a:	13 96       	adiw	r26, 0x03	; 3
    1c6c:	6a 5f       	subi	r22, 0xFA	; 250
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1c70:	0a 17       	cp	r16, r26
    1c72:	1b 07       	cpc	r17, r27
    1c74:	b1 f6       	brne	.-84     	; 0x1c22 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1c82:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1c84:	60 96       	adiw	r28, 0x10	; 16
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	08 95       	ret

00001c9e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1c9e:	0e 94 3a 01 	call	0x274	; 0x274 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1ca2:	88 e5       	ldi	r24, 0x58	; 88
    1ca4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1ca8:	88 23       	and	r24, r24
    1caa:	09 f4       	brne	.+2      	; 0x1cae <m_wii_open+0x10>
    1cac:	c7 c0       	rjmp	.+398    	; 0x1e3c <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1cae:	80 e3       	ldi	r24, 0x30	; 48
    1cb0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <m_wii_open+0x1c>
    1cb8:	c3 c0       	rjmp	.+390    	; 0x1e40 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1cc0:	88 23       	and	r24, r24
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <m_wii_open+0x28>
    1cc4:	bf c0       	rjmp	.+382    	; 0x1e44 <m_wii_open+0x1a6>
	end();
    1cc6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cca:	83 ec       	ldi	r24, 0xC3	; 195
    1ccc:	99 e0       	ldi	r25, 0x09	; 9
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <m_wii_open+0x30>
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <m_wii_open+0x36>
    1cd4:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1cd6:	88 e5       	ldi	r24, 0x58	; 88
    1cd8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <m_wii_open+0x44>
    1ce0:	b3 c0       	rjmp	.+358    	; 0x1e48 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1ce8:	88 23       	and	r24, r24
    1cea:	09 f4       	brne	.+2      	; 0x1cee <m_wii_open+0x50>
    1cec:	af c0       	rjmp	.+350    	; 0x1e4c <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <m_wii_open+0x5c>
    1cf8:	ab c0       	rjmp	.+342    	; 0x1e50 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d00:	88 23       	and	r24, r24
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <m_wii_open+0x68>
    1d04:	a7 c0       	rjmp	.+334    	; 0x1e54 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d0c:	88 23       	and	r24, r24
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <m_wii_open+0x74>
    1d10:	a3 c0       	rjmp	.+326    	; 0x1e58 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d18:	88 23       	and	r24, r24
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <m_wii_open+0x80>
    1d1c:	9f c0       	rjmp	.+318    	; 0x1e5c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d24:	88 23       	and	r24, r24
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <m_wii_open+0x8c>
    1d28:	9b c0       	rjmp	.+310    	; 0x1e60 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d30:	88 23       	and	r24, r24
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <m_wii_open+0x98>
    1d34:	97 c0       	rjmp	.+302    	; 0x1e64 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1d36:	80 e9       	ldi	r24, 0x90	; 144
    1d38:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <m_wii_open+0xa4>
    1d40:	93 c0       	rjmp	.+294    	; 0x1e68 <m_wii_open+0x1ca>
	end();
    1d42:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
    1d46:	83 ec       	ldi	r24, 0xC3	; 195
    1d48:	99 e0       	ldi	r25, 0x09	; 9
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <m_wii_open+0xac>
    1d4e:	00 c0       	rjmp	.+0      	; 0x1d50 <m_wii_open+0xb2>
    1d50:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1d52:	88 e5       	ldi	r24, 0x58	; 88
    1d54:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <m_wii_open+0xc0>
    1d5c:	87 c0       	rjmp	.+270    	; 0x1e6c <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1d5e:	87 e0       	ldi	r24, 0x07	; 7
    1d60:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <m_wii_open+0xcc>
    1d68:	83 c0       	rjmp	.+262    	; 0x1e70 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d70:	88 23       	and	r24, r24
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <m_wii_open+0xd8>
    1d74:	7f c0       	rjmp	.+254    	; 0x1e74 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1d76:	81 e4       	ldi	r24, 0x41	; 65
    1d78:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <m_wii_open+0xe4>
    1d80:	7b c0       	rjmp	.+246    	; 0x1e78 <m_wii_open+0x1da>
	end();
    1d82:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
    1d86:	83 ec       	ldi	r24, 0xC3	; 195
    1d88:	99 e0       	ldi	r25, 0x09	; 9
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <m_wii_open+0xec>
    1d8e:	00 c0       	rjmp	.+0      	; 0x1d90 <m_wii_open+0xf2>
    1d90:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1d92:	88 e5       	ldi	r24, 0x58	; 88
    1d94:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <m_wii_open+0x100>
    1d9c:	6f c0       	rjmp	.+222    	; 0x1e7c <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1d9e:	8a e1       	ldi	r24, 0x1A	; 26
    1da0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1da4:	88 23       	and	r24, r24
    1da6:	09 f4       	brne	.+2      	; 0x1daa <m_wii_open+0x10c>
    1da8:	6b c0       	rjmp	.+214    	; 0x1e80 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1daa:	80 e4       	ldi	r24, 0x40	; 64
    1dac:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1db0:	88 23       	and	r24, r24
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <m_wii_open+0x118>
    1db4:	67 c0       	rjmp	.+206    	; 0x1e84 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <m_wii_open+0x124>
    1dc0:	63 c0       	rjmp	.+198    	; 0x1e88 <m_wii_open+0x1ea>
	end();
    1dc2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
    1dc6:	83 ec       	ldi	r24, 0xC3	; 195
    1dc8:	99 e0       	ldi	r25, 0x09	; 9
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <m_wii_open+0x12c>
    1dce:	00 c0       	rjmp	.+0      	; 0x1dd0 <m_wii_open+0x132>
    1dd0:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1dd2:	88 e5       	ldi	r24, 0x58	; 88
    1dd4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1dd8:	88 23       	and	r24, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <m_wii_open+0x140>
    1ddc:	57 c0       	rjmp	.+174    	; 0x1e8c <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1dde:	83 e3       	ldi	r24, 0x33	; 51
    1de0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1de4:	88 23       	and	r24, r24
    1de6:	09 f4       	brne	.+2      	; 0x1dea <m_wii_open+0x14c>
    1de8:	53 c0       	rjmp	.+166    	; 0x1e90 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1df0:	88 23       	and	r24, r24
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <m_wii_open+0x158>
    1df4:	4f c0       	rjmp	.+158    	; 0x1e94 <m_wii_open+0x1f6>
	end();
    1df6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
    1dfa:	83 ec       	ldi	r24, 0xC3	; 195
    1dfc:	99 e0       	ldi	r25, 0x09	; 9
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <m_wii_open+0x160>
    1e02:	00 c0       	rjmp	.+0      	; 0x1e04 <m_wii_open+0x166>
    1e04:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1e06:	88 e5       	ldi	r24, 0x58	; 88
    1e08:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <start_write>
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <m_wii_open+0x174>
    1e10:	43 c0       	rjmp	.+134    	; 0x1e98 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1e12:	80 e3       	ldi	r24, 0x30	; 48
    1e14:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1e18:	88 23       	and	r24, r24
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <m_wii_open+0x180>
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1e1e:	88 e0       	ldi	r24, 0x08	; 8
    1e20:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <send_byte>
    1e24:	88 23       	and	r24, r24
    1e26:	e1 f1       	breq	.+120    	; 0x1ea0 <m_wii_open+0x202>
	end();
    1e28:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <end>
    1e2c:	83 ec       	ldi	r24, 0xC3	; 195
    1e2e:	99 e0       	ldi	r25, 0x09	; 9
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <m_wii_open+0x192>
    1e34:	00 c0       	rjmp	.+0      	; 0x1e36 <m_wii_open+0x198>
    1e36:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1ea2:	08 95       	ret

00001ea4 <__subsf3>:
    1ea4:	50 58       	subi	r21, 0x80	; 128

00001ea6 <__addsf3>:
    1ea6:	bb 27       	eor	r27, r27
    1ea8:	aa 27       	eor	r26, r26
    1eaa:	0e d0       	rcall	.+28     	; 0x1ec8 <__addsf3x>
    1eac:	ff c1       	rjmp	.+1022   	; 0x22ac <__fp_round>
    1eae:	c8 d1       	rcall	.+912    	; 0x2240 <__fp_pscA>
    1eb0:	30 f0       	brcs	.+12     	; 0x1ebe <__addsf3+0x18>
    1eb2:	cd d1       	rcall	.+922    	; 0x224e <__fp_pscB>
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <__addsf3+0x18>
    1eb6:	31 f4       	brne	.+12     	; 0x1ec4 <__addsf3+0x1e>
    1eb8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <__addsf3+0x1a>
    1ebc:	1e f4       	brtc	.+6      	; 0x1ec4 <__addsf3+0x1e>
    1ebe:	98 c1       	rjmp	.+816    	; 0x21f0 <__fp_nan>
    1ec0:	0e f4       	brtc	.+2      	; 0x1ec4 <__addsf3+0x1e>
    1ec2:	e0 95       	com	r30
    1ec4:	e7 fb       	bst	r30, 7
    1ec6:	8e c1       	rjmp	.+796    	; 0x21e4 <__fp_inf>

00001ec8 <__addsf3x>:
    1ec8:	e9 2f       	mov	r30, r25
    1eca:	12 d2       	rcall	.+1060   	; 0x22f0 <__fp_split3>
    1ecc:	80 f3       	brcs	.-32     	; 0x1eae <__addsf3+0x8>
    1ece:	ba 17       	cp	r27, r26
    1ed0:	62 07       	cpc	r22, r18
    1ed2:	73 07       	cpc	r23, r19
    1ed4:	84 07       	cpc	r24, r20
    1ed6:	95 07       	cpc	r25, r21
    1ed8:	18 f0       	brcs	.+6      	; 0x1ee0 <__addsf3x+0x18>
    1eda:	71 f4       	brne	.+28     	; 0x1ef8 <__addsf3x+0x30>
    1edc:	9e f5       	brtc	.+102    	; 0x1f44 <__addsf3x+0x7c>
    1ede:	2a c2       	rjmp	.+1108   	; 0x2334 <__fp_zero>
    1ee0:	0e f4       	brtc	.+2      	; 0x1ee4 <__addsf3x+0x1c>
    1ee2:	e0 95       	com	r30
    1ee4:	0b 2e       	mov	r0, r27
    1ee6:	ba 2f       	mov	r27, r26
    1ee8:	a0 2d       	mov	r26, r0
    1eea:	0b 01       	movw	r0, r22
    1eec:	b9 01       	movw	r22, r18
    1eee:	90 01       	movw	r18, r0
    1ef0:	0c 01       	movw	r0, r24
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	a0 01       	movw	r20, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	ff 27       	eor	r31, r31
    1efa:	59 1b       	sub	r21, r25
    1efc:	99 f0       	breq	.+38     	; 0x1f24 <__addsf3x+0x5c>
    1efe:	59 3f       	cpi	r21, 0xF9	; 249
    1f00:	50 f4       	brcc	.+20     	; 0x1f16 <__addsf3x+0x4e>
    1f02:	50 3e       	cpi	r21, 0xE0	; 224
    1f04:	68 f1       	brcs	.+90     	; 0x1f60 <__addsf3x+0x98>
    1f06:	1a 16       	cp	r1, r26
    1f08:	f0 40       	sbci	r31, 0x00	; 0
    1f0a:	a2 2f       	mov	r26, r18
    1f0c:	23 2f       	mov	r18, r19
    1f0e:	34 2f       	mov	r19, r20
    1f10:	44 27       	eor	r20, r20
    1f12:	58 5f       	subi	r21, 0xF8	; 248
    1f14:	f3 cf       	rjmp	.-26     	; 0x1efc <__addsf3x+0x34>
    1f16:	46 95       	lsr	r20
    1f18:	37 95       	ror	r19
    1f1a:	27 95       	ror	r18
    1f1c:	a7 95       	ror	r26
    1f1e:	f0 40       	sbci	r31, 0x00	; 0
    1f20:	53 95       	inc	r21
    1f22:	c9 f7       	brne	.-14     	; 0x1f16 <__addsf3x+0x4e>
    1f24:	7e f4       	brtc	.+30     	; 0x1f44 <__addsf3x+0x7c>
    1f26:	1f 16       	cp	r1, r31
    1f28:	ba 0b       	sbc	r27, r26
    1f2a:	62 0b       	sbc	r22, r18
    1f2c:	73 0b       	sbc	r23, r19
    1f2e:	84 0b       	sbc	r24, r20
    1f30:	ba f0       	brmi	.+46     	; 0x1f60 <__addsf3x+0x98>
    1f32:	91 50       	subi	r25, 0x01	; 1
    1f34:	a1 f0       	breq	.+40     	; 0x1f5e <__addsf3x+0x96>
    1f36:	ff 0f       	add	r31, r31
    1f38:	bb 1f       	adc	r27, r27
    1f3a:	66 1f       	adc	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	88 1f       	adc	r24, r24
    1f40:	c2 f7       	brpl	.-16     	; 0x1f32 <__addsf3x+0x6a>
    1f42:	0e c0       	rjmp	.+28     	; 0x1f60 <__addsf3x+0x98>
    1f44:	ba 0f       	add	r27, r26
    1f46:	62 1f       	adc	r22, r18
    1f48:	73 1f       	adc	r23, r19
    1f4a:	84 1f       	adc	r24, r20
    1f4c:	48 f4       	brcc	.+18     	; 0x1f60 <__addsf3x+0x98>
    1f4e:	87 95       	ror	r24
    1f50:	77 95       	ror	r23
    1f52:	67 95       	ror	r22
    1f54:	b7 95       	ror	r27
    1f56:	f7 95       	ror	r31
    1f58:	9e 3f       	cpi	r25, 0xFE	; 254
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <__addsf3x+0x96>
    1f5c:	b3 cf       	rjmp	.-154    	; 0x1ec4 <__addsf3+0x1e>
    1f5e:	93 95       	inc	r25
    1f60:	88 0f       	add	r24, r24
    1f62:	08 f0       	brcs	.+2      	; 0x1f66 <__addsf3x+0x9e>
    1f64:	99 27       	eor	r25, r25
    1f66:	ee 0f       	add	r30, r30
    1f68:	97 95       	ror	r25
    1f6a:	87 95       	ror	r24
    1f6c:	08 95       	ret
    1f6e:	68 d1       	rcall	.+720    	; 0x2240 <__fp_pscA>
    1f70:	58 f0       	brcs	.+22     	; 0x1f88 <__addsf3x+0xc0>
    1f72:	80 e8       	ldi	r24, 0x80	; 128
    1f74:	91 e0       	ldi	r25, 0x01	; 1
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <__addsf3x+0xb2>
    1f78:	9e ef       	ldi	r25, 0xFE	; 254
    1f7a:	69 d1       	rcall	.+722    	; 0x224e <__fp_pscB>
    1f7c:	28 f0       	brcs	.+10     	; 0x1f88 <__addsf3x+0xc0>
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	51 e0       	ldi	r21, 0x01	; 1
    1f82:	59 f4       	brne	.+22     	; 0x1f9a <atan2+0xe>
    1f84:	5e ef       	ldi	r21, 0xFE	; 254
    1f86:	09 c0       	rjmp	.+18     	; 0x1f9a <atan2+0xe>
    1f88:	33 c1       	rjmp	.+614    	; 0x21f0 <__fp_nan>
    1f8a:	d4 c1       	rjmp	.+936    	; 0x2334 <__fp_zero>

00001f8c <atan2>:
    1f8c:	e9 2f       	mov	r30, r25
    1f8e:	e0 78       	andi	r30, 0x80	; 128
    1f90:	af d1       	rcall	.+862    	; 0x22f0 <__fp_split3>
    1f92:	68 f3       	brcs	.-38     	; 0x1f6e <__addsf3x+0xa6>
    1f94:	09 2e       	mov	r0, r25
    1f96:	05 2a       	or	r0, r21
    1f98:	c1 f3       	breq	.-16     	; 0x1f8a <__addsf3x+0xc2>
    1f9a:	26 17       	cp	r18, r22
    1f9c:	37 07       	cpc	r19, r23
    1f9e:	48 07       	cpc	r20, r24
    1fa0:	59 07       	cpc	r21, r25
    1fa2:	38 f0       	brcs	.+14     	; 0x1fb2 <atan2+0x26>
    1fa4:	0e 2e       	mov	r0, r30
    1fa6:	07 f8       	bld	r0, 7
    1fa8:	e0 25       	eor	r30, r0
    1faa:	69 f0       	breq	.+26     	; 0x1fc6 <atan2+0x3a>
    1fac:	e0 25       	eor	r30, r0
    1fae:	e0 64       	ori	r30, 0x40	; 64
    1fb0:	0a c0       	rjmp	.+20     	; 0x1fc6 <atan2+0x3a>
    1fb2:	ef 63       	ori	r30, 0x3F	; 63
    1fb4:	07 f8       	bld	r0, 7
    1fb6:	00 94       	com	r0
    1fb8:	07 fa       	bst	r0, 7
    1fba:	db 01       	movw	r26, r22
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	9d 01       	movw	r18, r26
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	ca 01       	movw	r24, r20
    1fc4:	ad 01       	movw	r20, r26
    1fc6:	ef 93       	push	r30
    1fc8:	46 d0       	rcall	.+140    	; 0x2056 <__divsf3_pse>
    1fca:	70 d1       	rcall	.+736    	; 0x22ac <__fp_round>
    1fcc:	0a d0       	rcall	.+20     	; 0x1fe2 <atan>
    1fce:	5f 91       	pop	r21
    1fd0:	55 23       	and	r21, r21
    1fd2:	31 f0       	breq	.+12     	; 0x1fe0 <atan2+0x54>
    1fd4:	2b ed       	ldi	r18, 0xDB	; 219
    1fd6:	3f e0       	ldi	r19, 0x0F	; 15
    1fd8:	49 e4       	ldi	r20, 0x49	; 73
    1fda:	50 fd       	sbrc	r21, 0
    1fdc:	49 ec       	ldi	r20, 0xC9	; 201
    1fde:	63 cf       	rjmp	.-314    	; 0x1ea6 <__addsf3>
    1fe0:	08 95       	ret

00001fe2 <atan>:
    1fe2:	df 93       	push	r29
    1fe4:	dd 27       	eor	r29, r29
    1fe6:	b9 2f       	mov	r27, r25
    1fe8:	bf 77       	andi	r27, 0x7F	; 127
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	16 16       	cp	r1, r22
    1ff0:	17 06       	cpc	r1, r23
    1ff2:	48 07       	cpc	r20, r24
    1ff4:	5b 07       	cpc	r21, r27
    1ff6:	10 f4       	brcc	.+4      	; 0x1ffc <atan+0x1a>
    1ff8:	d9 2f       	mov	r29, r25
    1ffa:	a7 d1       	rcall	.+846    	; 0x234a <inverse>
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	7f 93       	push	r23
    2002:	6f 93       	push	r22
    2004:	54 d2       	rcall	.+1192   	; 0x24ae <square>
    2006:	ec ea       	ldi	r30, 0xAC	; 172
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	f5 d0       	rcall	.+490    	; 0x21f6 <__fp_powser>
    200c:	4f d1       	rcall	.+670    	; 0x22ac <__fp_round>
    200e:	2f 91       	pop	r18
    2010:	3f 91       	pop	r19
    2012:	4f 91       	pop	r20
    2014:	5f 91       	pop	r21
    2016:	ac d1       	rcall	.+856    	; 0x2370 <__mulsf3x>
    2018:	dd 23       	and	r29, r29
    201a:	49 f0       	breq	.+18     	; 0x202e <atan+0x4c>
    201c:	90 58       	subi	r25, 0x80	; 128
    201e:	a2 ea       	ldi	r26, 0xA2	; 162
    2020:	2a ed       	ldi	r18, 0xDA	; 218
    2022:	3f e0       	ldi	r19, 0x0F	; 15
    2024:	49 ec       	ldi	r20, 0xC9	; 201
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	d0 78       	andi	r29, 0x80	; 128
    202a:	5d 27       	eor	r21, r29
    202c:	4d df       	rcall	.-358    	; 0x1ec8 <__addsf3x>
    202e:	df 91       	pop	r29
    2030:	3d c1       	rjmp	.+634    	; 0x22ac <__fp_round>

00002032 <cos>:
    2032:	15 d1       	rcall	.+554    	; 0x225e <__fp_rempio2>
    2034:	e3 95       	inc	r30
    2036:	4b c1       	rjmp	.+662    	; 0x22ce <__fp_sinus>

00002038 <__divsf3>:
    2038:	0c d0       	rcall	.+24     	; 0x2052 <__divsf3x>
    203a:	38 c1       	rjmp	.+624    	; 0x22ac <__fp_round>
    203c:	08 d1       	rcall	.+528    	; 0x224e <__fp_pscB>
    203e:	40 f0       	brcs	.+16     	; 0x2050 <__divsf3+0x18>
    2040:	ff d0       	rcall	.+510    	; 0x2240 <__fp_pscA>
    2042:	30 f0       	brcs	.+12     	; 0x2050 <__divsf3+0x18>
    2044:	21 f4       	brne	.+8      	; 0x204e <__divsf3+0x16>
    2046:	5f 3f       	cpi	r21, 0xFF	; 255
    2048:	19 f0       	breq	.+6      	; 0x2050 <__divsf3+0x18>
    204a:	cc c0       	rjmp	.+408    	; 0x21e4 <__fp_inf>
    204c:	51 11       	cpse	r21, r1
    204e:	73 c1       	rjmp	.+742    	; 0x2336 <__fp_szero>
    2050:	cf c0       	rjmp	.+414    	; 0x21f0 <__fp_nan>

00002052 <__divsf3x>:
    2052:	4e d1       	rcall	.+668    	; 0x22f0 <__fp_split3>
    2054:	98 f3       	brcs	.-26     	; 0x203c <__divsf3+0x4>

00002056 <__divsf3_pse>:
    2056:	99 23       	and	r25, r25
    2058:	c9 f3       	breq	.-14     	; 0x204c <__divsf3+0x14>
    205a:	55 23       	and	r21, r21
    205c:	b1 f3       	breq	.-20     	; 0x204a <__divsf3+0x12>
    205e:	95 1b       	sub	r25, r21
    2060:	55 0b       	sbc	r21, r21
    2062:	bb 27       	eor	r27, r27
    2064:	aa 27       	eor	r26, r26
    2066:	62 17       	cp	r22, r18
    2068:	73 07       	cpc	r23, r19
    206a:	84 07       	cpc	r24, r20
    206c:	38 f0       	brcs	.+14     	; 0x207c <__divsf3_pse+0x26>
    206e:	9f 5f       	subi	r25, 0xFF	; 255
    2070:	5f 4f       	sbci	r21, 0xFF	; 255
    2072:	22 0f       	add	r18, r18
    2074:	33 1f       	adc	r19, r19
    2076:	44 1f       	adc	r20, r20
    2078:	aa 1f       	adc	r26, r26
    207a:	a9 f3       	breq	.-22     	; 0x2066 <__divsf3_pse+0x10>
    207c:	33 d0       	rcall	.+102    	; 0x20e4 <__divsf3_pse+0x8e>
    207e:	0e 2e       	mov	r0, r30
    2080:	3a f0       	brmi	.+14     	; 0x2090 <__divsf3_pse+0x3a>
    2082:	e0 e8       	ldi	r30, 0x80	; 128
    2084:	30 d0       	rcall	.+96     	; 0x20e6 <__divsf3_pse+0x90>
    2086:	91 50       	subi	r25, 0x01	; 1
    2088:	50 40       	sbci	r21, 0x00	; 0
    208a:	e6 95       	lsr	r30
    208c:	00 1c       	adc	r0, r0
    208e:	ca f7       	brpl	.-14     	; 0x2082 <__divsf3_pse+0x2c>
    2090:	29 d0       	rcall	.+82     	; 0x20e4 <__divsf3_pse+0x8e>
    2092:	fe 2f       	mov	r31, r30
    2094:	27 d0       	rcall	.+78     	; 0x20e4 <__divsf3_pse+0x8e>
    2096:	66 0f       	add	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	bb 1f       	adc	r27, r27
    209e:	26 17       	cp	r18, r22
    20a0:	37 07       	cpc	r19, r23
    20a2:	48 07       	cpc	r20, r24
    20a4:	ab 07       	cpc	r26, r27
    20a6:	b0 e8       	ldi	r27, 0x80	; 128
    20a8:	09 f0       	breq	.+2      	; 0x20ac <__divsf3_pse+0x56>
    20aa:	bb 0b       	sbc	r27, r27
    20ac:	80 2d       	mov	r24, r0
    20ae:	bf 01       	movw	r22, r30
    20b0:	ff 27       	eor	r31, r31
    20b2:	93 58       	subi	r25, 0x83	; 131
    20b4:	5f 4f       	sbci	r21, 0xFF	; 255
    20b6:	2a f0       	brmi	.+10     	; 0x20c2 <__divsf3_pse+0x6c>
    20b8:	9e 3f       	cpi	r25, 0xFE	; 254
    20ba:	51 05       	cpc	r21, r1
    20bc:	68 f0       	brcs	.+26     	; 0x20d8 <__divsf3_pse+0x82>
    20be:	92 c0       	rjmp	.+292    	; 0x21e4 <__fp_inf>
    20c0:	3a c1       	rjmp	.+628    	; 0x2336 <__fp_szero>
    20c2:	5f 3f       	cpi	r21, 0xFF	; 255
    20c4:	ec f3       	brlt	.-6      	; 0x20c0 <__divsf3_pse+0x6a>
    20c6:	98 3e       	cpi	r25, 0xE8	; 232
    20c8:	dc f3       	brlt	.-10     	; 0x20c0 <__divsf3_pse+0x6a>
    20ca:	86 95       	lsr	r24
    20cc:	77 95       	ror	r23
    20ce:	67 95       	ror	r22
    20d0:	b7 95       	ror	r27
    20d2:	f7 95       	ror	r31
    20d4:	9f 5f       	subi	r25, 0xFF	; 255
    20d6:	c9 f7       	brne	.-14     	; 0x20ca <__divsf3_pse+0x74>
    20d8:	88 0f       	add	r24, r24
    20da:	91 1d       	adc	r25, r1
    20dc:	96 95       	lsr	r25
    20de:	87 95       	ror	r24
    20e0:	97 f9       	bld	r25, 7
    20e2:	08 95       	ret
    20e4:	e1 e0       	ldi	r30, 0x01	; 1
    20e6:	66 0f       	add	r22, r22
    20e8:	77 1f       	adc	r23, r23
    20ea:	88 1f       	adc	r24, r24
    20ec:	bb 1f       	adc	r27, r27
    20ee:	62 17       	cp	r22, r18
    20f0:	73 07       	cpc	r23, r19
    20f2:	84 07       	cpc	r24, r20
    20f4:	ba 07       	cpc	r27, r26
    20f6:	20 f0       	brcs	.+8      	; 0x2100 <__divsf3_pse+0xaa>
    20f8:	62 1b       	sub	r22, r18
    20fa:	73 0b       	sbc	r23, r19
    20fc:	84 0b       	sbc	r24, r20
    20fe:	ba 0b       	sbc	r27, r26
    2100:	ee 1f       	adc	r30, r30
    2102:	88 f7       	brcc	.-30     	; 0x20e6 <__divsf3_pse+0x90>
    2104:	e0 95       	com	r30
    2106:	08 95       	ret

00002108 <__fixsfsi>:
    2108:	04 d0       	rcall	.+8      	; 0x2112 <__fixunssfsi>
    210a:	68 94       	set
    210c:	b1 11       	cpse	r27, r1
    210e:	13 c1       	rjmp	.+550    	; 0x2336 <__fp_szero>
    2110:	08 95       	ret

00002112 <__fixunssfsi>:
    2112:	f6 d0       	rcall	.+492    	; 0x2300 <__fp_splitA>
    2114:	88 f0       	brcs	.+34     	; 0x2138 <__fixunssfsi+0x26>
    2116:	9f 57       	subi	r25, 0x7F	; 127
    2118:	90 f0       	brcs	.+36     	; 0x213e <__fixunssfsi+0x2c>
    211a:	b9 2f       	mov	r27, r25
    211c:	99 27       	eor	r25, r25
    211e:	b7 51       	subi	r27, 0x17	; 23
    2120:	a0 f0       	brcs	.+40     	; 0x214a <__fixunssfsi+0x38>
    2122:	d1 f0       	breq	.+52     	; 0x2158 <__fixunssfsi+0x46>
    2124:	66 0f       	add	r22, r22
    2126:	77 1f       	adc	r23, r23
    2128:	88 1f       	adc	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	1a f0       	brmi	.+6      	; 0x2134 <__fixunssfsi+0x22>
    212e:	ba 95       	dec	r27
    2130:	c9 f7       	brne	.-14     	; 0x2124 <__fixunssfsi+0x12>
    2132:	12 c0       	rjmp	.+36     	; 0x2158 <__fixunssfsi+0x46>
    2134:	b1 30       	cpi	r27, 0x01	; 1
    2136:	81 f0       	breq	.+32     	; 0x2158 <__fixunssfsi+0x46>
    2138:	fd d0       	rcall	.+506    	; 0x2334 <__fp_zero>
    213a:	b1 e0       	ldi	r27, 0x01	; 1
    213c:	08 95       	ret
    213e:	fa c0       	rjmp	.+500    	; 0x2334 <__fp_zero>
    2140:	67 2f       	mov	r22, r23
    2142:	78 2f       	mov	r23, r24
    2144:	88 27       	eor	r24, r24
    2146:	b8 5f       	subi	r27, 0xF8	; 248
    2148:	39 f0       	breq	.+14     	; 0x2158 <__fixunssfsi+0x46>
    214a:	b9 3f       	cpi	r27, 0xF9	; 249
    214c:	cc f3       	brlt	.-14     	; 0x2140 <__fixunssfsi+0x2e>
    214e:	86 95       	lsr	r24
    2150:	77 95       	ror	r23
    2152:	67 95       	ror	r22
    2154:	b3 95       	inc	r27
    2156:	d9 f7       	brne	.-10     	; 0x214e <__fixunssfsi+0x3c>
    2158:	3e f4       	brtc	.+14     	; 0x2168 <__fixunssfsi+0x56>
    215a:	90 95       	com	r25
    215c:	80 95       	com	r24
    215e:	70 95       	com	r23
    2160:	61 95       	neg	r22
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	08 95       	ret

0000216a <__floatunsisf>:
    216a:	e8 94       	clt
    216c:	09 c0       	rjmp	.+18     	; 0x2180 <__floatsisf+0x12>

0000216e <__floatsisf>:
    216e:	97 fb       	bst	r25, 7
    2170:	3e f4       	brtc	.+14     	; 0x2180 <__floatsisf+0x12>
    2172:	90 95       	com	r25
    2174:	80 95       	com	r24
    2176:	70 95       	com	r23
    2178:	61 95       	neg	r22
    217a:	7f 4f       	sbci	r23, 0xFF	; 255
    217c:	8f 4f       	sbci	r24, 0xFF	; 255
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	99 23       	and	r25, r25
    2182:	a9 f0       	breq	.+42     	; 0x21ae <__floatsisf+0x40>
    2184:	f9 2f       	mov	r31, r25
    2186:	96 e9       	ldi	r25, 0x96	; 150
    2188:	bb 27       	eor	r27, r27
    218a:	93 95       	inc	r25
    218c:	f6 95       	lsr	r31
    218e:	87 95       	ror	r24
    2190:	77 95       	ror	r23
    2192:	67 95       	ror	r22
    2194:	b7 95       	ror	r27
    2196:	f1 11       	cpse	r31, r1
    2198:	f8 cf       	rjmp	.-16     	; 0x218a <__floatsisf+0x1c>
    219a:	fa f4       	brpl	.+62     	; 0x21da <__floatsisf+0x6c>
    219c:	bb 0f       	add	r27, r27
    219e:	11 f4       	brne	.+4      	; 0x21a4 <__floatsisf+0x36>
    21a0:	60 ff       	sbrs	r22, 0
    21a2:	1b c0       	rjmp	.+54     	; 0x21da <__floatsisf+0x6c>
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	8f 4f       	sbci	r24, 0xFF	; 255
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	16 c0       	rjmp	.+44     	; 0x21da <__floatsisf+0x6c>
    21ae:	88 23       	and	r24, r24
    21b0:	11 f0       	breq	.+4      	; 0x21b6 <__floatsisf+0x48>
    21b2:	96 e9       	ldi	r25, 0x96	; 150
    21b4:	11 c0       	rjmp	.+34     	; 0x21d8 <__floatsisf+0x6a>
    21b6:	77 23       	and	r23, r23
    21b8:	21 f0       	breq	.+8      	; 0x21c2 <__floatsisf+0x54>
    21ba:	9e e8       	ldi	r25, 0x8E	; 142
    21bc:	87 2f       	mov	r24, r23
    21be:	76 2f       	mov	r23, r22
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <__floatsisf+0x5e>
    21c2:	66 23       	and	r22, r22
    21c4:	71 f0       	breq	.+28     	; 0x21e2 <__floatsisf+0x74>
    21c6:	96 e8       	ldi	r25, 0x86	; 134
    21c8:	86 2f       	mov	r24, r22
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	2a f0       	brmi	.+10     	; 0x21da <__floatsisf+0x6c>
    21d0:	9a 95       	dec	r25
    21d2:	66 0f       	add	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	88 1f       	adc	r24, r24
    21d8:	da f7       	brpl	.-10     	; 0x21d0 <__floatsisf+0x62>
    21da:	88 0f       	add	r24, r24
    21dc:	96 95       	lsr	r25
    21de:	87 95       	ror	r24
    21e0:	97 f9       	bld	r25, 7
    21e2:	08 95       	ret

000021e4 <__fp_inf>:
    21e4:	97 f9       	bld	r25, 7
    21e6:	9f 67       	ori	r25, 0x7F	; 127
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	08 95       	ret

000021f0 <__fp_nan>:
    21f0:	9f ef       	ldi	r25, 0xFF	; 255
    21f2:	80 ec       	ldi	r24, 0xC0	; 192
    21f4:	08 95       	ret

000021f6 <__fp_powser>:
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	1f 93       	push	r17
    21fc:	0f 93       	push	r16
    21fe:	ff 92       	push	r15
    2200:	ef 92       	push	r14
    2202:	df 92       	push	r13
    2204:	7b 01       	movw	r14, r22
    2206:	8c 01       	movw	r16, r24
    2208:	68 94       	set
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <__fp_powser+0x20>
    220c:	da 2e       	mov	r13, r26
    220e:	ef 01       	movw	r28, r30
    2210:	af d0       	rcall	.+350    	; 0x2370 <__mulsf3x>
    2212:	fe 01       	movw	r30, r28
    2214:	e8 94       	clt
    2216:	a5 91       	lpm	r26, Z+
    2218:	25 91       	lpm	r18, Z+
    221a:	35 91       	lpm	r19, Z+
    221c:	45 91       	lpm	r20, Z+
    221e:	55 91       	lpm	r21, Z+
    2220:	ae f3       	brts	.-22     	; 0x220c <__fp_powser+0x16>
    2222:	ef 01       	movw	r28, r30
    2224:	51 de       	rcall	.-862    	; 0x1ec8 <__addsf3x>
    2226:	fe 01       	movw	r30, r28
    2228:	97 01       	movw	r18, r14
    222a:	a8 01       	movw	r20, r16
    222c:	da 94       	dec	r13
    222e:	79 f7       	brne	.-34     	; 0x220e <__fp_powser+0x18>
    2230:	df 90       	pop	r13
    2232:	ef 90       	pop	r14
    2234:	ff 90       	pop	r15
    2236:	0f 91       	pop	r16
    2238:	1f 91       	pop	r17
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <__fp_pscA>:
    2240:	00 24       	eor	r0, r0
    2242:	0a 94       	dec	r0
    2244:	16 16       	cp	r1, r22
    2246:	17 06       	cpc	r1, r23
    2248:	18 06       	cpc	r1, r24
    224a:	09 06       	cpc	r0, r25
    224c:	08 95       	ret

0000224e <__fp_pscB>:
    224e:	00 24       	eor	r0, r0
    2250:	0a 94       	dec	r0
    2252:	12 16       	cp	r1, r18
    2254:	13 06       	cpc	r1, r19
    2256:	14 06       	cpc	r1, r20
    2258:	05 06       	cpc	r0, r21
    225a:	08 95       	ret
    225c:	c9 cf       	rjmp	.-110    	; 0x21f0 <__fp_nan>

0000225e <__fp_rempio2>:
    225e:	50 d0       	rcall	.+160    	; 0x2300 <__fp_splitA>
    2260:	e8 f3       	brcs	.-6      	; 0x225c <__fp_pscB+0xe>
    2262:	e8 94       	clt
    2264:	e0 e0       	ldi	r30, 0x00	; 0
    2266:	bb 27       	eor	r27, r27
    2268:	9f 57       	subi	r25, 0x7F	; 127
    226a:	f0 f0       	brcs	.+60     	; 0x22a8 <__fp_rempio2+0x4a>
    226c:	2a ed       	ldi	r18, 0xDA	; 218
    226e:	3f e0       	ldi	r19, 0x0F	; 15
    2270:	49 ec       	ldi	r20, 0xC9	; 201
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <__fp_rempio2+0x22>
    2274:	ee 0f       	add	r30, r30
    2276:	bb 0f       	add	r27, r27
    2278:	66 1f       	adc	r22, r22
    227a:	77 1f       	adc	r23, r23
    227c:	88 1f       	adc	r24, r24
    227e:	28 f0       	brcs	.+10     	; 0x228a <__fp_rempio2+0x2c>
    2280:	b2 3a       	cpi	r27, 0xA2	; 162
    2282:	62 07       	cpc	r22, r18
    2284:	73 07       	cpc	r23, r19
    2286:	84 07       	cpc	r24, r20
    2288:	28 f0       	brcs	.+10     	; 0x2294 <__fp_rempio2+0x36>
    228a:	b2 5a       	subi	r27, 0xA2	; 162
    228c:	62 0b       	sbc	r22, r18
    228e:	73 0b       	sbc	r23, r19
    2290:	84 0b       	sbc	r24, r20
    2292:	e3 95       	inc	r30
    2294:	9a 95       	dec	r25
    2296:	72 f7       	brpl	.-36     	; 0x2274 <__fp_rempio2+0x16>
    2298:	80 38       	cpi	r24, 0x80	; 128
    229a:	30 f4       	brcc	.+12     	; 0x22a8 <__fp_rempio2+0x4a>
    229c:	9a 95       	dec	r25
    229e:	bb 0f       	add	r27, r27
    22a0:	66 1f       	adc	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	d2 f7       	brpl	.-12     	; 0x229c <__fp_rempio2+0x3e>
    22a8:	90 48       	sbci	r25, 0x80	; 128
    22aa:	2a c1       	rjmp	.+596    	; 0x2500 <__fp_mpack_finite>

000022ac <__fp_round>:
    22ac:	09 2e       	mov	r0, r25
    22ae:	03 94       	inc	r0
    22b0:	00 0c       	add	r0, r0
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <__fp_round+0xc>
    22b4:	88 23       	and	r24, r24
    22b6:	52 f0       	brmi	.+20     	; 0x22cc <__fp_round+0x20>
    22b8:	bb 0f       	add	r27, r27
    22ba:	40 f4       	brcc	.+16     	; 0x22cc <__fp_round+0x20>
    22bc:	bf 2b       	or	r27, r31
    22be:	11 f4       	brne	.+4      	; 0x22c4 <__fp_round+0x18>
    22c0:	60 ff       	sbrs	r22, 0
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <__fp_round+0x20>
    22c4:	6f 5f       	subi	r22, 0xFF	; 255
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	08 95       	ret

000022ce <__fp_sinus>:
    22ce:	ef 93       	push	r30
    22d0:	e0 ff       	sbrs	r30, 0
    22d2:	06 c0       	rjmp	.+12     	; 0x22e0 <__fp_sinus+0x12>
    22d4:	a2 ea       	ldi	r26, 0xA2	; 162
    22d6:	2a ed       	ldi	r18, 0xDA	; 218
    22d8:	3f e0       	ldi	r19, 0x0F	; 15
    22da:	49 ec       	ldi	r20, 0xC9	; 201
    22dc:	5f eb       	ldi	r21, 0xBF	; 191
    22de:	f4 dd       	rcall	.-1048   	; 0x1ec8 <__addsf3x>
    22e0:	e5 df       	rcall	.-54     	; 0x22ac <__fp_round>
    22e2:	0f 90       	pop	r0
    22e4:	03 94       	inc	r0
    22e6:	01 fc       	sbrc	r0, 1
    22e8:	90 58       	subi	r25, 0x80	; 128
    22ea:	e9 ed       	ldi	r30, 0xD9	; 217
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	1b c1       	rjmp	.+566    	; 0x2526 <__fp_powsodd>

000022f0 <__fp_split3>:
    22f0:	57 fd       	sbrc	r21, 7
    22f2:	90 58       	subi	r25, 0x80	; 128
    22f4:	44 0f       	add	r20, r20
    22f6:	55 1f       	adc	r21, r21
    22f8:	59 f0       	breq	.+22     	; 0x2310 <__fp_splitA+0x10>
    22fa:	5f 3f       	cpi	r21, 0xFF	; 255
    22fc:	71 f0       	breq	.+28     	; 0x231a <__fp_splitA+0x1a>
    22fe:	47 95       	ror	r20

00002300 <__fp_splitA>:
    2300:	88 0f       	add	r24, r24
    2302:	97 fb       	bst	r25, 7
    2304:	99 1f       	adc	r25, r25
    2306:	61 f0       	breq	.+24     	; 0x2320 <__fp_splitA+0x20>
    2308:	9f 3f       	cpi	r25, 0xFF	; 255
    230a:	79 f0       	breq	.+30     	; 0x232a <__fp_splitA+0x2a>
    230c:	87 95       	ror	r24
    230e:	08 95       	ret
    2310:	12 16       	cp	r1, r18
    2312:	13 06       	cpc	r1, r19
    2314:	14 06       	cpc	r1, r20
    2316:	55 1f       	adc	r21, r21
    2318:	f2 cf       	rjmp	.-28     	; 0x22fe <__fp_split3+0xe>
    231a:	46 95       	lsr	r20
    231c:	f1 df       	rcall	.-30     	; 0x2300 <__fp_splitA>
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <__fp_splitA+0x30>
    2320:	16 16       	cp	r1, r22
    2322:	17 06       	cpc	r1, r23
    2324:	18 06       	cpc	r1, r24
    2326:	99 1f       	adc	r25, r25
    2328:	f1 cf       	rjmp	.-30     	; 0x230c <__fp_splitA+0xc>
    232a:	86 95       	lsr	r24
    232c:	71 05       	cpc	r23, r1
    232e:	61 05       	cpc	r22, r1
    2330:	08 94       	sec
    2332:	08 95       	ret

00002334 <__fp_zero>:
    2334:	e8 94       	clt

00002336 <__fp_szero>:
    2336:	bb 27       	eor	r27, r27
    2338:	66 27       	eor	r22, r22
    233a:	77 27       	eor	r23, r23
    233c:	cb 01       	movw	r24, r22
    233e:	97 f9       	bld	r25, 7
    2340:	08 95       	ret

00002342 <__gesf2>:
    2342:	b8 d0       	rcall	.+368    	; 0x24b4 <__fp_cmp>
    2344:	08 f4       	brcc	.+2      	; 0x2348 <__gesf2+0x6>
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	08 95       	ret

0000234a <inverse>:
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	80 e8       	ldi	r24, 0x80	; 128
    2354:	9f e3       	ldi	r25, 0x3F	; 63
    2356:	70 ce       	rjmp	.-800    	; 0x2038 <__divsf3>

00002358 <__mulsf3>:
    2358:	0b d0       	rcall	.+22     	; 0x2370 <__mulsf3x>
    235a:	a8 cf       	rjmp	.-176    	; 0x22ac <__fp_round>
    235c:	71 df       	rcall	.-286    	; 0x2240 <__fp_pscA>
    235e:	28 f0       	brcs	.+10     	; 0x236a <__mulsf3+0x12>
    2360:	76 df       	rcall	.-276    	; 0x224e <__fp_pscB>
    2362:	18 f0       	brcs	.+6      	; 0x236a <__mulsf3+0x12>
    2364:	95 23       	and	r25, r21
    2366:	09 f0       	breq	.+2      	; 0x236a <__mulsf3+0x12>
    2368:	3d cf       	rjmp	.-390    	; 0x21e4 <__fp_inf>
    236a:	42 cf       	rjmp	.-380    	; 0x21f0 <__fp_nan>
    236c:	11 24       	eor	r1, r1
    236e:	e3 cf       	rjmp	.-58     	; 0x2336 <__fp_szero>

00002370 <__mulsf3x>:
    2370:	bf df       	rcall	.-130    	; 0x22f0 <__fp_split3>
    2372:	a0 f3       	brcs	.-24     	; 0x235c <__mulsf3+0x4>

00002374 <__mulsf3_pse>:
    2374:	95 9f       	mul	r25, r21
    2376:	d1 f3       	breq	.-12     	; 0x236c <__mulsf3+0x14>
    2378:	95 0f       	add	r25, r21
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	55 1f       	adc	r21, r21
    237e:	62 9f       	mul	r22, r18
    2380:	f0 01       	movw	r30, r0
    2382:	72 9f       	mul	r23, r18
    2384:	bb 27       	eor	r27, r27
    2386:	f0 0d       	add	r31, r0
    2388:	b1 1d       	adc	r27, r1
    238a:	63 9f       	mul	r22, r19
    238c:	aa 27       	eor	r26, r26
    238e:	f0 0d       	add	r31, r0
    2390:	b1 1d       	adc	r27, r1
    2392:	aa 1f       	adc	r26, r26
    2394:	64 9f       	mul	r22, r20
    2396:	66 27       	eor	r22, r22
    2398:	b0 0d       	add	r27, r0
    239a:	a1 1d       	adc	r26, r1
    239c:	66 1f       	adc	r22, r22
    239e:	82 9f       	mul	r24, r18
    23a0:	22 27       	eor	r18, r18
    23a2:	b0 0d       	add	r27, r0
    23a4:	a1 1d       	adc	r26, r1
    23a6:	62 1f       	adc	r22, r18
    23a8:	73 9f       	mul	r23, r19
    23aa:	b0 0d       	add	r27, r0
    23ac:	a1 1d       	adc	r26, r1
    23ae:	62 1f       	adc	r22, r18
    23b0:	83 9f       	mul	r24, r19
    23b2:	a0 0d       	add	r26, r0
    23b4:	61 1d       	adc	r22, r1
    23b6:	22 1f       	adc	r18, r18
    23b8:	74 9f       	mul	r23, r20
    23ba:	33 27       	eor	r19, r19
    23bc:	a0 0d       	add	r26, r0
    23be:	61 1d       	adc	r22, r1
    23c0:	23 1f       	adc	r18, r19
    23c2:	84 9f       	mul	r24, r20
    23c4:	60 0d       	add	r22, r0
    23c6:	21 1d       	adc	r18, r1
    23c8:	82 2f       	mov	r24, r18
    23ca:	76 2f       	mov	r23, r22
    23cc:	6a 2f       	mov	r22, r26
    23ce:	11 24       	eor	r1, r1
    23d0:	9f 57       	subi	r25, 0x7F	; 127
    23d2:	50 40       	sbci	r21, 0x00	; 0
    23d4:	8a f0       	brmi	.+34     	; 0x23f8 <__mulsf3_pse+0x84>
    23d6:	e1 f0       	breq	.+56     	; 0x2410 <__mulsf3_pse+0x9c>
    23d8:	88 23       	and	r24, r24
    23da:	4a f0       	brmi	.+18     	; 0x23ee <__mulsf3_pse+0x7a>
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	bb 1f       	adc	r27, r27
    23e2:	66 1f       	adc	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	91 50       	subi	r25, 0x01	; 1
    23ea:	50 40       	sbci	r21, 0x00	; 0
    23ec:	a9 f7       	brne	.-22     	; 0x23d8 <__mulsf3_pse+0x64>
    23ee:	9e 3f       	cpi	r25, 0xFE	; 254
    23f0:	51 05       	cpc	r21, r1
    23f2:	70 f0       	brcs	.+28     	; 0x2410 <__mulsf3_pse+0x9c>
    23f4:	f7 ce       	rjmp	.-530    	; 0x21e4 <__fp_inf>
    23f6:	9f cf       	rjmp	.-194    	; 0x2336 <__fp_szero>
    23f8:	5f 3f       	cpi	r21, 0xFF	; 255
    23fa:	ec f3       	brlt	.-6      	; 0x23f6 <__mulsf3_pse+0x82>
    23fc:	98 3e       	cpi	r25, 0xE8	; 232
    23fe:	dc f3       	brlt	.-10     	; 0x23f6 <__mulsf3_pse+0x82>
    2400:	86 95       	lsr	r24
    2402:	77 95       	ror	r23
    2404:	67 95       	ror	r22
    2406:	b7 95       	ror	r27
    2408:	f7 95       	ror	r31
    240a:	e7 95       	ror	r30
    240c:	9f 5f       	subi	r25, 0xFF	; 255
    240e:	c1 f7       	brne	.-16     	; 0x2400 <__mulsf3_pse+0x8c>
    2410:	fe 2b       	or	r31, r30
    2412:	88 0f       	add	r24, r24
    2414:	91 1d       	adc	r25, r1
    2416:	96 95       	lsr	r25
    2418:	87 95       	ror	r24
    241a:	97 f9       	bld	r25, 7
    241c:	08 95       	ret

0000241e <sin>:
    241e:	9f 93       	push	r25
    2420:	1e df       	rcall	.-452    	; 0x225e <__fp_rempio2>
    2422:	0f 90       	pop	r0
    2424:	07 fc       	sbrc	r0, 7
    2426:	ee 5f       	subi	r30, 0xFE	; 254
    2428:	52 cf       	rjmp	.-348    	; 0x22ce <__fp_sinus>
    242a:	11 f4       	brne	.+4      	; 0x2430 <sin+0x12>
    242c:	0e f4       	brtc	.+2      	; 0x2430 <sin+0x12>
    242e:	e0 ce       	rjmp	.-576    	; 0x21f0 <__fp_nan>
    2430:	65 c0       	rjmp	.+202    	; 0x24fc <__fp_mpack>

00002432 <sqrt>:
    2432:	66 df       	rcall	.-308    	; 0x2300 <__fp_splitA>
    2434:	d0 f3       	brcs	.-12     	; 0x242a <sin+0xc>
    2436:	99 23       	and	r25, r25
    2438:	d9 f3       	breq	.-10     	; 0x2430 <sin+0x12>
    243a:	ce f3       	brts	.-14     	; 0x242e <sin+0x10>
    243c:	9f 57       	subi	r25, 0x7F	; 127
    243e:	55 0b       	sbc	r21, r21
    2440:	87 ff       	sbrs	r24, 7
    2442:	6a d0       	rcall	.+212    	; 0x2518 <__fp_norm2>
    2444:	00 24       	eor	r0, r0
    2446:	a0 e6       	ldi	r26, 0x60	; 96
    2448:	40 ea       	ldi	r20, 0xA0	; 160
    244a:	90 01       	movw	r18, r0
    244c:	80 58       	subi	r24, 0x80	; 128
    244e:	56 95       	lsr	r21
    2450:	97 95       	ror	r25
    2452:	28 f4       	brcc	.+10     	; 0x245e <sqrt+0x2c>
    2454:	80 5c       	subi	r24, 0xC0	; 192
    2456:	66 0f       	add	r22, r22
    2458:	77 1f       	adc	r23, r23
    245a:	88 1f       	adc	r24, r24
    245c:	20 f0       	brcs	.+8      	; 0x2466 <sqrt+0x34>
    245e:	26 17       	cp	r18, r22
    2460:	37 07       	cpc	r19, r23
    2462:	48 07       	cpc	r20, r24
    2464:	30 f4       	brcc	.+12     	; 0x2472 <sqrt+0x40>
    2466:	62 1b       	sub	r22, r18
    2468:	73 0b       	sbc	r23, r19
    246a:	84 0b       	sbc	r24, r20
    246c:	20 29       	or	r18, r0
    246e:	31 29       	or	r19, r1
    2470:	4a 2b       	or	r20, r26
    2472:	a6 95       	lsr	r26
    2474:	17 94       	ror	r1
    2476:	07 94       	ror	r0
    2478:	20 25       	eor	r18, r0
    247a:	31 25       	eor	r19, r1
    247c:	4a 27       	eor	r20, r26
    247e:	58 f7       	brcc	.-42     	; 0x2456 <sqrt+0x24>
    2480:	66 0f       	add	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	88 1f       	adc	r24, r24
    2486:	20 f0       	brcs	.+8      	; 0x2490 <sqrt+0x5e>
    2488:	26 17       	cp	r18, r22
    248a:	37 07       	cpc	r19, r23
    248c:	48 07       	cpc	r20, r24
    248e:	30 f4       	brcc	.+12     	; 0x249c <sqrt+0x6a>
    2490:	62 0b       	sbc	r22, r18
    2492:	73 0b       	sbc	r23, r19
    2494:	84 0b       	sbc	r24, r20
    2496:	20 0d       	add	r18, r0
    2498:	31 1d       	adc	r19, r1
    249a:	41 1d       	adc	r20, r1
    249c:	a0 95       	com	r26
    249e:	81 f7       	brne	.-32     	; 0x2480 <sqrt+0x4e>
    24a0:	b9 01       	movw	r22, r18
    24a2:	84 2f       	mov	r24, r20
    24a4:	91 58       	subi	r25, 0x81	; 129
    24a6:	88 0f       	add	r24, r24
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	08 95       	ret

000024ae <square>:
    24ae:	9b 01       	movw	r18, r22
    24b0:	ac 01       	movw	r20, r24
    24b2:	52 cf       	rjmp	.-348    	; 0x2358 <__mulsf3>

000024b4 <__fp_cmp>:
    24b4:	99 0f       	add	r25, r25
    24b6:	00 08       	sbc	r0, r0
    24b8:	55 0f       	add	r21, r21
    24ba:	aa 0b       	sbc	r26, r26
    24bc:	e0 e8       	ldi	r30, 0x80	; 128
    24be:	fe ef       	ldi	r31, 0xFE	; 254
    24c0:	16 16       	cp	r1, r22
    24c2:	17 06       	cpc	r1, r23
    24c4:	e8 07       	cpc	r30, r24
    24c6:	f9 07       	cpc	r31, r25
    24c8:	c0 f0       	brcs	.+48     	; 0x24fa <__fp_cmp+0x46>
    24ca:	12 16       	cp	r1, r18
    24cc:	13 06       	cpc	r1, r19
    24ce:	e4 07       	cpc	r30, r20
    24d0:	f5 07       	cpc	r31, r21
    24d2:	98 f0       	brcs	.+38     	; 0x24fa <__fp_cmp+0x46>
    24d4:	62 1b       	sub	r22, r18
    24d6:	73 0b       	sbc	r23, r19
    24d8:	84 0b       	sbc	r24, r20
    24da:	95 0b       	sbc	r25, r21
    24dc:	39 f4       	brne	.+14     	; 0x24ec <__fp_cmp+0x38>
    24de:	0a 26       	eor	r0, r26
    24e0:	61 f0       	breq	.+24     	; 0x24fa <__fp_cmp+0x46>
    24e2:	23 2b       	or	r18, r19
    24e4:	24 2b       	or	r18, r20
    24e6:	25 2b       	or	r18, r21
    24e8:	21 f4       	brne	.+8      	; 0x24f2 <__fp_cmp+0x3e>
    24ea:	08 95       	ret
    24ec:	0a 26       	eor	r0, r26
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <__fp_cmp+0x3e>
    24f0:	a1 40       	sbci	r26, 0x01	; 1
    24f2:	a6 95       	lsr	r26
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	81 1d       	adc	r24, r1
    24f8:	81 1d       	adc	r24, r1
    24fa:	08 95       	ret

000024fc <__fp_mpack>:
    24fc:	9f 3f       	cpi	r25, 0xFF	; 255
    24fe:	31 f0       	breq	.+12     	; 0x250c <__fp_mpack_finite+0xc>

00002500 <__fp_mpack_finite>:
    2500:	91 50       	subi	r25, 0x01	; 1
    2502:	20 f4       	brcc	.+8      	; 0x250c <__fp_mpack_finite+0xc>
    2504:	87 95       	ror	r24
    2506:	77 95       	ror	r23
    2508:	67 95       	ror	r22
    250a:	b7 95       	ror	r27
    250c:	88 0f       	add	r24, r24
    250e:	91 1d       	adc	r25, r1
    2510:	96 95       	lsr	r25
    2512:	87 95       	ror	r24
    2514:	97 f9       	bld	r25, 7
    2516:	08 95       	ret

00002518 <__fp_norm2>:
    2518:	91 50       	subi	r25, 0x01	; 1
    251a:	50 40       	sbci	r21, 0x00	; 0
    251c:	66 0f       	add	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	88 1f       	adc	r24, r24
    2522:	d2 f7       	brpl	.-12     	; 0x2518 <__fp_norm2>
    2524:	08 95       	ret

00002526 <__fp_powsodd>:
    2526:	9f 93       	push	r25
    2528:	8f 93       	push	r24
    252a:	7f 93       	push	r23
    252c:	6f 93       	push	r22
    252e:	ff 93       	push	r31
    2530:	ef 93       	push	r30
    2532:	9b 01       	movw	r18, r22
    2534:	ac 01       	movw	r20, r24
    2536:	10 df       	rcall	.-480    	; 0x2358 <__mulsf3>
    2538:	ef 91       	pop	r30
    253a:	ff 91       	pop	r31
    253c:	5c de       	rcall	.-840    	; 0x21f6 <__fp_powser>
    253e:	2f 91       	pop	r18
    2540:	3f 91       	pop	r19
    2542:	4f 91       	pop	r20
    2544:	5f 91       	pop	r21
    2546:	08 cf       	rjmp	.-496    	; 0x2358 <__mulsf3>

00002548 <itoa>:
    2548:	fb 01       	movw	r30, r22
    254a:	9f 01       	movw	r18, r30
    254c:	e8 94       	clt
    254e:	42 30       	cpi	r20, 0x02	; 2
    2550:	c4 f0       	brlt	.+48     	; 0x2582 <itoa+0x3a>
    2552:	45 32       	cpi	r20, 0x25	; 37
    2554:	b4 f4       	brge	.+44     	; 0x2582 <itoa+0x3a>
    2556:	4a 30       	cpi	r20, 0x0A	; 10
    2558:	29 f4       	brne	.+10     	; 0x2564 <itoa+0x1c>
    255a:	97 fb       	bst	r25, 7
    255c:	1e f4       	brtc	.+6      	; 0x2564 <itoa+0x1c>
    255e:	90 95       	com	r25
    2560:	81 95       	neg	r24
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	64 2f       	mov	r22, r20
    2566:	77 27       	eor	r23, r23
    2568:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__udivmodhi4>
    256c:	80 5d       	subi	r24, 0xD0	; 208
    256e:	8a 33       	cpi	r24, 0x3A	; 58
    2570:	0c f0       	brlt	.+2      	; 0x2574 <itoa+0x2c>
    2572:	89 5d       	subi	r24, 0xD9	; 217
    2574:	81 93       	st	Z+, r24
    2576:	cb 01       	movw	r24, r22
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	a1 f7       	brne	.-24     	; 0x2564 <itoa+0x1c>
    257c:	16 f4       	brtc	.+4      	; 0x2582 <itoa+0x3a>
    257e:	5d e2       	ldi	r21, 0x2D	; 45
    2580:	51 93       	st	Z+, r21
    2582:	10 82       	st	Z, r1
    2584:	c9 01       	movw	r24, r18
    2586:	0c 94 c5 12 	jmp	0x258a	; 0x258a <strrev>

0000258a <strrev>:
    258a:	dc 01       	movw	r26, r24
    258c:	fc 01       	movw	r30, r24
    258e:	67 2f       	mov	r22, r23
    2590:	71 91       	ld	r23, Z+
    2592:	77 23       	and	r23, r23
    2594:	e1 f7       	brne	.-8      	; 0x258e <strrev+0x4>
    2596:	32 97       	sbiw	r30, 0x02	; 2
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <strrev+0x18>
    259a:	7c 91       	ld	r23, X
    259c:	6d 93       	st	X+, r22
    259e:	70 83       	st	Z, r23
    25a0:	62 91       	ld	r22, -Z
    25a2:	ae 17       	cp	r26, r30
    25a4:	bf 07       	cpc	r27, r31
    25a6:	c8 f3       	brcs	.-14     	; 0x259a <strrev+0x10>
    25a8:	08 95       	ret

000025aa <__udivmodhi4>:
    25aa:	aa 1b       	sub	r26, r26
    25ac:	bb 1b       	sub	r27, r27
    25ae:	51 e1       	ldi	r21, 0x11	; 17
    25b0:	07 c0       	rjmp	.+14     	; 0x25c0 <__udivmodhi4_ep>

000025b2 <__udivmodhi4_loop>:
    25b2:	aa 1f       	adc	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	a6 17       	cp	r26, r22
    25b8:	b7 07       	cpc	r27, r23
    25ba:	10 f0       	brcs	.+4      	; 0x25c0 <__udivmodhi4_ep>
    25bc:	a6 1b       	sub	r26, r22
    25be:	b7 0b       	sbc	r27, r23

000025c0 <__udivmodhi4_ep>:
    25c0:	88 1f       	adc	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	5a 95       	dec	r21
    25c6:	a9 f7       	brne	.-22     	; 0x25b2 <__udivmodhi4_loop>
    25c8:	80 95       	com	r24
    25ca:	90 95       	com	r25
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	08 95       	ret

000025d2 <_exit>:
    25d2:	f8 94       	cli

000025d4 <__stop_program>:
    25d4:	ff cf       	rjmp	.-2      	; 0x25d4 <__stop_program>
