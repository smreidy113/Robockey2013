
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002fd8  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800118  00800118  00003084  2**0
                  ALLOC
  3 .stab         000043e0  00000000  00000000  00003084  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001329  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000878d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  000087bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002db8  00000000  00000000  00008a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b60  00000000  00000000  0000b82c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012cc  00000000  00000000  0000c38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000900  00000000  00000000  0000d658  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008ad  00000000  00000000  0000df58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030d5  00000000  00000000  0000e805  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  000118da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_3>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__vector_10>
      2c:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_11>
      30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_29>
      78:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      7c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      80:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <drive_to_puck+0x138>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <getADC+0xb4>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <drive_to_puck+0xca>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

00000179 <descriptor_list>:
     179:	00 01 00 00 ad 01 12 00 02 00 00 bf 01 43 00 03     .............C..
     189:	00 00 02 02 04 01 03 09 04 06 02 12 02 03 09 04     ................
     199:	1a 02 06 03 03 09 04 22 02 08                       ......."..

000001a3 <endpoint_config_table>:
     1a3:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001ad <device_descriptor>:
     1ad:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1bd:	03 01                                               ..

000001bf <config1_descriptor>:
     1bf:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1cf:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1df:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1ef:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1ff:	40 00 00                                            @..

00000202 <string0>:
     202:	04 03 09 04                                         ....

00000206 <string1>:
     206:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     216:	65 00 00 00                                         e...

0000021a <string2>:
     21a:	06 03 4d 00 32 00 00 00                             ..M.2...

00000222 <string3>:
     222:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e8 ed       	ldi	r30, 0xD8	; 216
     240:	ff e2       	ldi	r31, 0x2F	; 47
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a8 31       	cpi	r26, 0x18	; 24
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	a8 e1       	ldi	r26, 0x18	; 24
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a0 3f       	cpi	r26, 0xF0	; 240
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <main>
     262:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <_exit>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <chooseInput>:
	int maxval = 0;
	int diff = 0;
	float deg = 0.0;

void chooseInput(int i) {
	switch (i) {
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	91 05       	cpc	r25, r1
     26e:	09 f4       	brne	.+2      	; 0x272 <chooseInput+0x8>
     270:	49 c0       	rjmp	.+146    	; 0x304 <chooseInput+0x9a>
     272:	3c f4       	brge	.+14     	; 0x282 <chooseInput+0x18>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	91 05       	cpc	r25, r1
     278:	19 f1       	breq	.+70     	; 0x2c0 <chooseInput+0x56>
     27a:	9c f5       	brge	.+102    	; 0x2e2 <chooseInput+0x78>
     27c:	89 2b       	or	r24, r25
     27e:	79 f0       	breq	.+30     	; 0x29e <chooseInput+0x34>
     280:	08 95       	ret
     282:	85 30       	cpi	r24, 0x05	; 5
     284:	91 05       	cpc	r25, r1
     286:	09 f4       	brne	.+2      	; 0x28a <chooseInput+0x20>
     288:	5f c0       	rjmp	.+190    	; 0x348 <chooseInput+0xde>
     28a:	0c f4       	brge	.+2      	; 0x28e <chooseInput+0x24>
     28c:	4c c0       	rjmp	.+152    	; 0x326 <chooseInput+0xbc>
     28e:	86 30       	cpi	r24, 0x06	; 6
     290:	91 05       	cpc	r25, r1
     292:	09 f4       	brne	.+2      	; 0x296 <chooseInput+0x2c>
     294:	6a c0       	rjmp	.+212    	; 0x36a <chooseInput+0x100>
     296:	07 97       	sbiw	r24, 0x07	; 7
     298:	09 f0       	breq	.+2      	; 0x29c <chooseInput+0x32>
     29a:	88 c0       	rjmp	.+272    	; 0x3ac <chooseInput+0x142>
     29c:	77 c0       	rjmp	.+238    	; 0x38c <chooseInput+0x122>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
     29e:	eb e7       	ldi	r30, 0x7B	; 123
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8f 7d       	andi	r24, 0xDF	; 223
     2a6:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2a8:	ec e7       	ldi	r30, 0x7C	; 124
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	8b 7f       	andi	r24, 0xFB	; 251
     2b0:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2b2:	80 81       	ld	r24, Z
     2b4:	8d 7f       	andi	r24, 0xFD	; 253
     2b6:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2b8:	80 81       	ld	r24, Z
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	80 83       	st	Z, r24

		break;
     2be:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
     2c0:	eb e7       	ldi	r30, 0x7B	; 123
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2ca:	ec e7       	ldi	r30, 0x7C	; 124
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8b 7f       	andi	r24, 0xFB	; 251
     2d2:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2d4:	80 81       	ld	r24, Z
     2d6:	8d 7f       	andi	r24, 0xFD	; 253
     2d8:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     2da:	80 81       	ld	r24, Z
     2dc:	81 60       	ori	r24, 0x01	; 1
     2de:	80 83       	st	Z, r24

		break;
     2e0:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
     2e2:	eb e7       	ldi	r30, 0x7B	; 123
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8f 7d       	andi	r24, 0xDF	; 223
     2ea:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     2ec:	ec e7       	ldi	r30, 0x7C	; 124
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	84 60       	ori	r24, 0x04	; 4
     2f4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2f6:	80 81       	ld	r24, Z
     2f8:	8d 7f       	andi	r24, 0xFD	; 253
     2fa:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2fc:	80 81       	ld	r24, Z
     2fe:	8e 7f       	andi	r24, 0xFE	; 254
     300:	80 83       	st	Z, r24

		break;
     302:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
     304:	eb e7       	ldi	r30, 0x7B	; 123
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8f 7d       	andi	r24, 0xDF	; 223
     30c:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     30e:	ec e7       	ldi	r30, 0x7C	; 124
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	84 60       	ori	r24, 0x04	; 4
     316:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     318:	80 81       	ld	r24, Z
     31a:	8d 7f       	andi	r24, 0xFD	; 253
     31c:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
		break;
     324:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
     326:	eb e7       	ldi	r30, 0x7B	; 123
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     330:	ec e7       	ldi	r30, 0x7C	; 124
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	84 60       	ori	r24, 0x04	; 4
     338:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
     33a:	80 81       	ld	r24, Z
     33c:	82 60       	ori	r24, 0x02	; 2
     33e:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     340:	80 81       	ld	r24, Z
     342:	8e 7f       	andi	r24, 0xFE	; 254
     344:	80 83       	st	Z, r24
		break;
     346:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
     348:	eb e7       	ldi	r30, 0x7B	; 123
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     352:	ec e7       	ldi	r30, 0x7C	; 124
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8b 7f       	andi	r24, 0xFB	; 251
     35a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     35c:	80 81       	ld	r24, Z
     35e:	8d 7f       	andi	r24, 0xFD	; 253
     360:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     362:	80 81       	ld	r24, Z
     364:	8e 7f       	andi	r24, 0xFE	; 254
     366:	80 83       	st	Z, r24
		break;
     368:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
     36a:	eb e7       	ldi	r30, 0x7B	; 123
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	80 62       	ori	r24, 0x20	; 32
     372:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     374:	ec e7       	ldi	r30, 0x7C	; 124
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8b 7f       	andi	r24, 0xFB	; 251
     37c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     37e:	80 81       	ld	r24, Z
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     384:	80 81       	ld	r24, Z
     386:	81 60       	ori	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
		break;
     38a:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
     38c:	eb e7       	ldi	r30, 0x7B	; 123
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	8f 7d       	andi	r24, 0xDF	; 223
     394:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
     396:	ec e7       	ldi	r30, 0x7C	; 124
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
     3a0:	80 81       	ld	r24, Z
     3a2:	82 60       	ori	r24, 0x02	; 2
     3a4:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
     3a6:	80 81       	ld	r24, Z
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	80 83       	st	Z, r24
     3ac:	08 95       	ret

000003ae <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
     3ae:	80 91 26 01 	lds	r24, 0x0126
     3b2:	90 91 27 01 	lds	r25, 0x0127
     3b6:	89 2b       	or	r24, r25
     3b8:	09 f4       	brne	.+2      	; 0x3bc <getADC+0xe>
     3ba:	9c c0       	rjmp	.+312    	; 0x4f4 <getADC+0x146>
		switch (flag) {
     3bc:	80 91 52 01 	lds	r24, 0x0152
     3c0:	90 91 53 01 	lds	r25, 0x0153
     3c4:	83 30       	cpi	r24, 0x03	; 3
     3c6:	91 05       	cpc	r25, r1
     3c8:	71 f1       	breq	.+92     	; 0x426 <getADC+0x78>
     3ca:	3c f4       	brge	.+14     	; 0x3da <getADC+0x2c>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	91 05       	cpc	r25, r1
     3d0:	c1 f0       	breq	.+48     	; 0x402 <getADC+0x54>
     3d2:	04 f5       	brge	.+64     	; 0x414 <getADC+0x66>
     3d4:	89 2b       	or	r24, r25
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <getADC+0x42>
     3d8:	52 c0       	rjmp	.+164    	; 0x47e <getADC+0xd0>
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	91 05       	cpc	r25, r1
     3de:	a9 f1       	breq	.+106    	; 0x44a <getADC+0x9c>
     3e0:	5c f1       	brlt	.+86     	; 0x438 <getADC+0x8a>
     3e2:	86 30       	cpi	r24, 0x06	; 6
     3e4:	91 05       	cpc	r25, r1
     3e6:	d1 f1       	breq	.+116    	; 0x45c <getADC+0xae>
     3e8:	07 97       	sbiw	r24, 0x07	; 7
     3ea:	09 f0       	breq	.+2      	; 0x3ee <getADC+0x40>
     3ec:	48 c0       	rjmp	.+144    	; 0x47e <getADC+0xd0>
     3ee:	3f c0       	rjmp	.+126    	; 0x46e <getADC+0xc0>
			case 0:
			ADC0 = ADC;
     3f0:	80 91 78 00 	lds	r24, 0x0078
     3f4:	90 91 79 00 	lds	r25, 0x0079
     3f8:	90 93 37 01 	sts	0x0137, r25
     3fc:	80 93 36 01 	sts	0x0136, r24
			break;
     400:	3e c0       	rjmp	.+124    	; 0x47e <getADC+0xd0>
			case 1:
			ADC1 = ADC;
     402:	80 91 78 00 	lds	r24, 0x0078
     406:	90 91 79 00 	lds	r25, 0x0079
     40a:	90 93 35 01 	sts	0x0135, r25
     40e:	80 93 34 01 	sts	0x0134, r24
			break;
     412:	35 c0       	rjmp	.+106    	; 0x47e <getADC+0xd0>
			case 2:
			ADC2 = ADC;
     414:	80 91 78 00 	lds	r24, 0x0078
     418:	90 91 79 00 	lds	r25, 0x0079
     41c:	90 93 33 01 	sts	0x0133, r25
     420:	80 93 32 01 	sts	0x0132, r24
			break;
     424:	2c c0       	rjmp	.+88     	; 0x47e <getADC+0xd0>
			case 3:
			ADC3 = ADC;
     426:	80 91 78 00 	lds	r24, 0x0078
     42a:	90 91 79 00 	lds	r25, 0x0079
     42e:	90 93 31 01 	sts	0x0131, r25
     432:	80 93 30 01 	sts	0x0130, r24
			break;
     436:	23 c0       	rjmp	.+70     	; 0x47e <getADC+0xd0>
			case 4:
			ADC4 = ADC;
     438:	80 91 78 00 	lds	r24, 0x0078
     43c:	90 91 79 00 	lds	r25, 0x0079
     440:	90 93 2f 01 	sts	0x012F, r25
     444:	80 93 2e 01 	sts	0x012E, r24
			break;
     448:	1a c0       	rjmp	.+52     	; 0x47e <getADC+0xd0>
			case 5:
			ADC5 = ADC;
     44a:	80 91 78 00 	lds	r24, 0x0078
     44e:	90 91 79 00 	lds	r25, 0x0079
     452:	90 93 2d 01 	sts	0x012D, r25
     456:	80 93 2c 01 	sts	0x012C, r24
			break;
     45a:	11 c0       	rjmp	.+34     	; 0x47e <getADC+0xd0>
			case 6:
			ADC6 = ADC;
     45c:	80 91 78 00 	lds	r24, 0x0078
     460:	90 91 79 00 	lds	r25, 0x0079
     464:	90 93 2b 01 	sts	0x012B, r25
     468:	80 93 2a 01 	sts	0x012A, r24
			break;
     46c:	08 c0       	rjmp	.+16     	; 0x47e <getADC+0xd0>
			case 7:
			ADC7 = ADC;
     46e:	80 91 78 00 	lds	r24, 0x0078
     472:	90 91 79 00 	lds	r25, 0x0079
     476:	90 93 29 01 	sts	0x0129, r25
     47a:	80 93 28 01 	sts	0x0128, r24
			break;
		}
			clear(ADCSRA, ADEN);	//Enable/Start conversion
     47e:	ea e7       	ldi	r30, 0x7A	; 122
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 77       	andi	r24, 0x7F	; 127
     486:	80 83       	st	Z, r24
			clear(ADCSRA, ADSC);	//^
     488:	80 81       	ld	r24, Z
     48a:	8f 7b       	andi	r24, 0xBF	; 191
     48c:	80 83       	st	Z, r24
			clear(ADCSRA, ADATE);
     48e:	80 81       	ld	r24, Z
     490:	8f 7d       	andi	r24, 0xDF	; 223
     492:	80 83       	st	Z, r24
			clear(ADCSRA, ADIF);
     494:	80 81       	ld	r24, Z
     496:	8f 7e       	andi	r24, 0xEF	; 239
     498:	80 83       	st	Z, r24
			if (flag >= 0 && flag < 8) {
     49a:	80 91 52 01 	lds	r24, 0x0152
     49e:	90 91 53 01 	lds	r25, 0x0153
     4a2:	88 30       	cpi	r24, 0x08	; 8
     4a4:	91 05       	cpc	r25, r1
     4a6:	a0 f4       	brcc	.+40     	; 0x4d0 <getADC+0x122>
				flag = (flag + 1) % 8;
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	9c 01       	movw	r18, r24
     4ac:	27 70       	andi	r18, 0x07	; 7
     4ae:	30 78       	andi	r19, 0x80	; 128
     4b0:	33 23       	and	r19, r19
     4b2:	34 f4       	brge	.+12     	; 0x4c0 <getADC+0x112>
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	31 09       	sbc	r19, r1
     4b8:	28 6f       	ori	r18, 0xF8	; 248
     4ba:	3f 6f       	ori	r19, 0xFF	; 255
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	20 93 52 01 	sts	0x0152, r18
     4c4:	30 93 53 01 	sts	0x0153, r19
				chooseInput(flag);
     4c8:	82 2f       	mov	r24, r18
     4ca:	93 2f       	mov	r25, r19
     4cc:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
			}
			set(ADCSRA, ADATE);	//Set trigger to free-running mode
     4d0:	ea e7       	ldi	r30, 0x7A	; 122
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	80 83       	st	Z, r24
			set(ADCSRA, ADEN);	//Enable/Start conversion
     4da:	80 81       	ld	r24, Z
     4dc:	80 68       	ori	r24, 0x80	; 128
     4de:	80 83       	st	Z, r24
			set(ADCSRA, ADSC);	//^
     4e0:	80 81       	ld	r24, Z
     4e2:	80 64       	ori	r24, 0x40	; 64
     4e4:	80 83       	st	Z, r24
			
			set(ADCSRA, ADIF);	//Enable reading results
     4e6:	80 81       	ld	r24, Z
     4e8:	80 61       	ori	r24, 0x10	; 16
     4ea:	80 83       	st	Z, r24
			conversion = 0;
     4ec:	10 92 27 01 	sts	0x0127, r1
     4f0:	10 92 26 01 	sts	0x0126, r1
	}

	ADCarr[0] = ADC0;
     4f4:	80 91 36 01 	lds	r24, 0x0136
     4f8:	90 91 37 01 	lds	r25, 0x0137
     4fc:	90 93 43 01 	sts	0x0143, r25
     500:	80 93 42 01 	sts	0x0142, r24
	ADCarr[1] = ADC1;
     504:	80 91 34 01 	lds	r24, 0x0134
     508:	90 91 35 01 	lds	r25, 0x0135
     50c:	90 93 45 01 	sts	0x0145, r25
     510:	80 93 44 01 	sts	0x0144, r24
	ADCarr[2] = ADC2;
     514:	80 91 32 01 	lds	r24, 0x0132
     518:	90 91 33 01 	lds	r25, 0x0133
     51c:	90 93 47 01 	sts	0x0147, r25
     520:	80 93 46 01 	sts	0x0146, r24
	ADCarr[3] = ADC3;
     524:	80 91 30 01 	lds	r24, 0x0130
     528:	90 91 31 01 	lds	r25, 0x0131
     52c:	90 93 49 01 	sts	0x0149, r25
     530:	80 93 48 01 	sts	0x0148, r24
	ADCarr[4] = ADC4;
     534:	80 91 2e 01 	lds	r24, 0x012E
     538:	90 91 2f 01 	lds	r25, 0x012F
     53c:	90 93 4b 01 	sts	0x014B, r25
     540:	80 93 4a 01 	sts	0x014A, r24
	ADCarr[5] = ADC5;
     544:	80 91 2c 01 	lds	r24, 0x012C
     548:	90 91 2d 01 	lds	r25, 0x012D
     54c:	90 93 4d 01 	sts	0x014D, r25
     550:	80 93 4c 01 	sts	0x014C, r24
	ADCarr[6] = ADC6;
     554:	80 91 2a 01 	lds	r24, 0x012A
     558:	90 91 2b 01 	lds	r25, 0x012B
     55c:	90 93 4f 01 	sts	0x014F, r25
     560:	80 93 4e 01 	sts	0x014E, r24
	ADCarr[7] = ADC7;
     564:	80 91 28 01 	lds	r24, 0x0128
     568:	90 91 29 01 	lds	r25, 0x0129
     56c:	90 93 51 01 	sts	0x0151, r25
     570:	80 93 50 01 	sts	0x0150, r24
     574:	08 95       	ret

00000576 <rotate>:
		m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
		//}
}

void rotate(int dir, float speed) {
	OCR1B = OCR1A;
     576:	20 91 88 00 	lds	r18, 0x0088
     57a:	30 91 89 00 	lds	r19, 0x0089
     57e:	30 93 8b 00 	sts	0x008B, r19
     582:	20 93 8a 00 	sts	0x008A, r18
	OCR3A = ICR3;
     586:	20 91 96 00 	lds	r18, 0x0096
     58a:	30 91 97 00 	lds	r19, 0x0097
     58e:	30 93 99 00 	sts	0x0099, r19
     592:	20 93 98 00 	sts	0x0098, r18
	if (dir == RIGHT) {
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	19 f4       	brne	.+6      	; 0x5a0 <rotate+0x2a>
		set(PORTB,2);
     59a:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     59c:	2b 98       	cbi	0x05, 3	; 5
     59e:	08 95       	ret
	}
	else if (dir == LEFT) {
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <rotate+0x32>
		clear(PORTB,2);
     5a4:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     5a6:	2b 9a       	sbi	0x05, 3	; 5
     5a8:	08 95       	ret

000005aa <turn>:
	}
}

void turn(int dir,float speed, float degree) {
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	6a 01       	movw	r12, r20
     5c6:	7b 01       	movw	r14, r22
     5c8:	48 01       	movw	r8, r16
     5ca:	59 01       	movw	r10, r18
	set(PORTB,2);
     5cc:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     5ce:	2b 9a       	sbi	0x05, 3	; 5
	if(iHaveThePuck && degree < 0.27) {
     5d0:	80 91 57 01 	lds	r24, 0x0157
     5d4:	88 23       	and	r24, r24
     5d6:	a1 f0       	breq	.+40     	; 0x600 <turn+0x56>
     5d8:	21 e7       	ldi	r18, 0x71	; 113
     5da:	3d e3       	ldi	r19, 0x3D	; 61
     5dc:	4a e8       	ldi	r20, 0x8A	; 138
     5de:	5e e3       	ldi	r21, 0x3E	; 62
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 23 14 	call	0x2846	; 0x2846 <__cmpsf2>
     5e8:	88 23       	and	r24, r24
     5ea:	54 f4       	brge	.+20     	; 0x600 <turn+0x56>
		degree = 0.27;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f1 e7       	ldi	r31, 0x71	; 113
     5f0:	8f 2e       	mov	r8, r31
     5f2:	fd e3       	ldi	r31, 0x3D	; 61
     5f4:	9f 2e       	mov	r9, r31
     5f6:	fa e8       	ldi	r31, 0x8A	; 138
     5f8:	af 2e       	mov	r10, r31
     5fa:	fe e3       	ldi	r31, 0x3E	; 62
     5fc:	bf 2e       	mov	r11, r31
     5fe:	f0 2d       	mov	r31, r0
	}
	if (dir == LEFT) {
     600:	c1 30       	cpi	r28, 0x01	; 1
     602:	d1 05       	cpc	r29, r1
     604:	81 f5       	brne	.+96     	; 0x666 <turn+0xbc>
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     606:	60 91 96 00 	lds	r22, 0x0096
     60a:	70 91 97 00 	lds	r23, 0x0097
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
     616:	a7 01       	movw	r20, r14
     618:	96 01       	movw	r18, r12
     61a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     61e:	0e 94 c8 14 	call	0x2990	; 0x2990 <__fixunssfsi>
     622:	70 93 99 00 	sts	0x0099, r23
     626:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     62a:	c0 91 88 00 	lds	r28, 0x0088
     62e:	d0 91 89 00 	lds	r29, 0x0089
     632:	a7 01       	movw	r20, r14
     634:	96 01       	movw	r18, r12
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
     642:	be 01       	movw	r22, r28
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
     64c:	9b 01       	movw	r18, r22
     64e:	ac 01       	movw	r20, r24
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     658:	0e 94 c8 14 	call	0x2990	; 0x2990 <__fixunssfsi>
     65c:	70 93 8b 00 	sts	0x008B, r23
     660:	60 93 8a 00 	sts	0x008A, r22
     664:	31 c0       	rjmp	.+98     	; 0x6c8 <turn+0x11e>
	}
	
		if (dir == RIGHT) {
     666:	cd 2b       	or	r28, r29
     668:	79 f5       	brne	.+94     	; 0x6c8 <turn+0x11e>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     66a:	c0 91 96 00 	lds	r28, 0x0096
     66e:	d0 91 97 00 	lds	r29, 0x0097
     672:	a7 01       	movw	r20, r14
     674:	96 01       	movw	r18, r12
     676:	c5 01       	movw	r24, r10
     678:	b4 01       	movw	r22, r8
     67a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     67e:	4b 01       	movw	r8, r22
     680:	5c 01       	movw	r10, r24
     682:	be 01       	movw	r22, r28
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
     68c:	9b 01       	movw	r18, r22
     68e:	ac 01       	movw	r20, r24
     690:	c5 01       	movw	r24, r10
     692:	b4 01       	movw	r22, r8
     694:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     698:	0e 94 c8 14 	call	0x2990	; 0x2990 <__fixunssfsi>
     69c:	70 93 99 00 	sts	0x0099, r23
     6a0:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     6a4:	60 91 88 00 	lds	r22, 0x0088
     6a8:	70 91 89 00 	lds	r23, 0x0089
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
     6b4:	a7 01       	movw	r20, r14
     6b6:	96 01       	movw	r18, r12
     6b8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     6bc:	0e 94 c8 14 	call	0x2990	; 0x2990 <__fixunssfsi>
     6c0:	70 93 8b 00 	sts	0x008B, r23
     6c4:	60 93 8a 00 	sts	0x008A, r22
		}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	9f 90       	pop	r9
     6de:	8f 90       	pop	r8
     6e0:	08 95       	ret

000006e2 <reverse>:

void reverse(){
	OCR1B = OCR1A;
     6e2:	80 91 88 00 	lds	r24, 0x0088
     6e6:	90 91 89 00 	lds	r25, 0x0089
     6ea:	90 93 8b 00 	sts	0x008B, r25
     6ee:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     6f2:	80 91 96 00 	lds	r24, 0x0096
     6f6:	90 91 97 00 	lds	r25, 0x0097
     6fa:	90 93 99 00 	sts	0x0099, r25
     6fe:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     702:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     704:	2b 98       	cbi	0x05, 3	; 5
     706:	08 95       	ret

00000708 <drive_to_puck>:

void findPuck() {
	//TODO: Implement code
}

void drive_to_puck() {
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
		getADC();
     70c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	e2 e4       	ldi	r30, 0x42	; 66
     716:	f1 e0       	ldi	r31, 0x01	; 1
		index = 0;
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
			if (ADCarr[i] > maxval) {
     720:	21 91       	ld	r18, Z+
     722:	31 91       	ld	r19, Z+
     724:	42 17       	cp	r20, r18
     726:	53 07       	cpc	r21, r19
     728:	14 f4       	brge	.+4      	; 0x72e <drive_to_puck+0x26>
				index = i;
     72a:	bc 01       	movw	r22, r24
				maxval = ADCarr[i];
     72c:	a9 01       	movw	r20, r18

void drive_to_puck() {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	87 30       	cpi	r24, 0x07	; 7
     732:	91 05       	cpc	r25, r1
     734:	a9 f7       	brne	.-22     	; 0x720 <drive_to_puck+0x18>
     736:	50 93 3f 01 	sts	0x013F, r21
     73a:	40 93 3e 01 	sts	0x013E, r20
     73e:	60 93 40 01 	sts	0x0140, r22
     742:	70 93 41 01 	sts	0x0141, r23
			if (ADCarr[i] > maxval) {
				index = i;
				maxval = ADCarr[i];
			}
		}
		switch (index) {
     746:	63 30       	cpi	r22, 0x03	; 3
     748:	71 05       	cpc	r23, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <drive_to_puck+0x46>
     74c:	b0 c0       	rjmp	.+352    	; 0x8ae <drive_to_puck+0x1a6>
     74e:	4c f4       	brge	.+18     	; 0x762 <drive_to_puck+0x5a>
     750:	61 30       	cpi	r22, 0x01	; 1
     752:	71 05       	cpc	r23, r1
     754:	09 f4       	brne	.+2      	; 0x758 <drive_to_puck+0x50>
     756:	64 c0       	rjmp	.+200    	; 0x820 <drive_to_puck+0x118>
     758:	0c f0       	brlt	.+2      	; 0x75c <drive_to_puck+0x54>
     75a:	86 c0       	rjmp	.+268    	; 0x868 <drive_to_puck+0x160>
     75c:	67 2b       	or	r22, r23
     75e:	61 f0       	breq	.+24     	; 0x778 <drive_to_puck+0x70>
     760:	5c c1       	rjmp	.+696    	; 0xa1a <drive_to_puck+0x312>
     762:	65 30       	cpi	r22, 0x05	; 5
     764:	71 05       	cpc	r23, r1
     766:	09 f4       	brne	.+2      	; 0x76a <drive_to_puck+0x62>
     768:	e2 c0       	rjmp	.+452    	; 0x92e <drive_to_puck+0x226>
     76a:	0c f4       	brge	.+2      	; 0x76e <drive_to_puck+0x66>
     76c:	bd c0       	rjmp	.+378    	; 0x8e8 <drive_to_puck+0x1e0>
     76e:	66 30       	cpi	r22, 0x06	; 6
     770:	71 05       	cpc	r23, r1
     772:	09 f0       	breq	.+2      	; 0x776 <drive_to_puck+0x6e>
     774:	52 c1       	rjmp	.+676    	; 0xa1a <drive_to_puck+0x312>
     776:	ff c0       	rjmp	.+510    	; 0x976 <drive_to_puck+0x26e>
			case 0: 
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     778:	00 91 42 01 	lds	r16, 0x0142
     77c:	10 91 43 01 	lds	r17, 0x0143
     780:	b8 01       	movw	r22, r16
     782:	88 27       	eor	r24, r24
     784:	77 fd       	sbrc	r23, 7
     786:	80 95       	com	r24
     788:	98 2f       	mov	r25, r24
     78a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     78e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <log>
     792:	90 58       	subi	r25, 0x80	; 128
     794:	2e ea       	ldi	r18, 0xAE	; 174
     796:	37 e4       	ldi	r19, 0x47	; 71
     798:	43 eb       	ldi	r20, 0xB3	; 179
     79a:	52 e4       	ldi	r21, 0x42	; 66
     79c:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     7a0:	2f e1       	ldi	r18, 0x1F	; 31
     7a2:	35 e2       	ldi	r19, 0x25	; 37
     7a4:	46 e2       	ldi	r20, 0x26	; 38
     7a6:	54 e4       	ldi	r21, 0x44	; 68
     7a8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
     7ac:	60 93 ba 01 	sts	0x01BA, r22
     7b0:	70 93 bb 01 	sts	0x01BB, r23
     7b4:	80 93 bc 01 	sts	0x01BC, r24
     7b8:	90 93 bd 01 	sts	0x01BD, r25
				diff = ADCarr[0] - ADCarr[6];
     7bc:	80 91 4e 01 	lds	r24, 0x014E
     7c0:	90 91 4f 01 	lds	r25, 0x014F
     7c4:	b8 01       	movw	r22, r16
     7c6:	68 1b       	sub	r22, r24
     7c8:	79 0b       	sbc	r23, r25
     7ca:	70 93 3d 01 	sts	0x013D, r23
     7ce:	60 93 3c 01 	sts	0x013C, r22
				deg = exp(-1.0*(fabs((float)diff))/40.0);
     7d2:	88 27       	eor	r24, r24
     7d4:	77 fd       	sbrc	r23, 7
     7d6:	80 95       	com	r24
     7d8:	98 2f       	mov	r25, r24
     7da:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	bf 77       	andi	r27, 0x7F	; 127
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	90 58       	subi	r25, 0x80	; 128
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e2       	ldi	r20, 0x20	; 32
     7f0:	52 e4       	ldi	r21, 0x42	; 66
     7f2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
     7f6:	0e 94 97 14 	call	0x292e	; 0x292e <exp>
     7fa:	8b 01       	movw	r16, r22
     7fc:	9c 01       	movw	r18, r24
     7fe:	60 93 38 01 	sts	0x0138, r22
     802:	70 93 39 01 	sts	0x0139, r23
     806:	80 93 3a 01 	sts	0x013A, r24
     80a:	90 93 3b 01 	sts	0x013B, r25
				turn(RIGHT,1.0,deg);
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	60 e8       	ldi	r22, 0x80	; 128
     814:	7f e3       	ldi	r23, 0x3F	; 63
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
				//m_green(ON);
				//m_red(OFF);
				break;
     81e:	fd c0       	rjmp	.+506    	; 0xa1a <drive_to_puck+0x312>
			case 1:
				if (ADCarr[1] > 800 && ADCarr[2] > 800) {
     820:	80 91 44 01 	lds	r24, 0x0144
     824:	90 91 45 01 	lds	r25, 0x0145
     828:	81 32       	cpi	r24, 0x21	; 33
     82a:	93 40       	sbci	r25, 0x03	; 3
     82c:	84 f0       	brlt	.+32     	; 0x84e <drive_to_puck+0x146>
     82e:	80 91 46 01 	lds	r24, 0x0146
     832:	90 91 47 01 	lds	r25, 0x0147
     836:	81 32       	cpi	r24, 0x21	; 33
     838:	93 40       	sbci	r25, 0x03	; 3
     83a:	4c f0       	brlt	.+18     	; 0x84e <drive_to_puck+0x146>
					rotate(LEFT,1);
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e8       	ldi	r22, 0x80	; 128
     842:	7f e3       	ldi	r23, 0x3F	; 63
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     84c:	e6 c0       	rjmp	.+460    	; 0xa1a <drive_to_puck+0x312>
				}else {
				turn(RIGHT,1.0,0.05);
     84e:	0d ec       	ldi	r16, 0xCD	; 205
     850:	1c ec       	ldi	r17, 0xCC	; 204
     852:	2c e4       	ldi	r18, 0x4C	; 76
     854:	3d e3       	ldi	r19, 0x3D	; 61
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	60 e8       	ldi	r22, 0x80	; 128
     85c:	7f e3       	ldi	r23, 0x3F	; 63
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     866:	d9 c0       	rjmp	.+434    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 2:
				if (ADCarr[1] > 800 && ADCarr[2] > 800) {
     868:	80 91 44 01 	lds	r24, 0x0144
     86c:	90 91 45 01 	lds	r25, 0x0145
     870:	81 32       	cpi	r24, 0x21	; 33
     872:	93 40       	sbci	r25, 0x03	; 3
     874:	84 f0       	brlt	.+32     	; 0x896 <drive_to_puck+0x18e>
     876:	80 91 46 01 	lds	r24, 0x0146
     87a:	90 91 47 01 	lds	r25, 0x0147
     87e:	81 32       	cpi	r24, 0x21	; 33
     880:	93 40       	sbci	r25, 0x03	; 3
     882:	4c f0       	brlt	.+18     	; 0x896 <drive_to_puck+0x18e>
					rotate(LEFT,1);
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e8       	ldi	r22, 0x80	; 128
     88a:	7f e3       	ldi	r23, 0x3F	; 63
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     894:	c2 c0       	rjmp	.+388    	; 0xa1a <drive_to_puck+0x312>
				}else {
					turn(RIGHT,1.0,0);
     896:	00 e0       	ldi	r16, 0x00	; 0
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	98 01       	movw	r18, r16
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e8       	ldi	r22, 0x80	; 128
     8a2:	7f e3       	ldi	r23, 0x3F	; 63
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     8ac:	b6 c0       	rjmp	.+364    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 3:
				if (ADCarr[2] > ADCarr[4]) {
     8ae:	20 91 46 01 	lds	r18, 0x0146
     8b2:	30 91 47 01 	lds	r19, 0x0147
     8b6:	80 91 4a 01 	lds	r24, 0x014A
     8ba:	90 91 4b 01 	lds	r25, 0x014B
     8be:	82 17       	cp	r24, r18
     8c0:	93 07       	cpc	r25, r19
     8c2:	4c f4       	brge	.+18     	; 0x8d6 <drive_to_puck+0x1ce>
					rotate(RIGHT, 1);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e8       	ldi	r22, 0x80	; 128
     8ca:	7f e3       	ldi	r23, 0x3F	; 63
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     8d4:	a2 c0       	rjmp	.+324    	; 0xa1a <drive_to_puck+0x312>
				}
				else {
					rotate(LEFT, 1);
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	60 e8       	ldi	r22, 0x80	; 128
     8dc:	7f e3       	ldi	r23, 0x3F	; 63
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     8e6:	99 c0       	rjmp	.+306    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 4:
				if (ADCarr[4] > 800 && ADCarr[5] > 800) {
     8e8:	80 91 4a 01 	lds	r24, 0x014A
     8ec:	90 91 4b 01 	lds	r25, 0x014B
     8f0:	81 32       	cpi	r24, 0x21	; 33
     8f2:	93 40       	sbci	r25, 0x03	; 3
     8f4:	84 f0       	brlt	.+32     	; 0x916 <drive_to_puck+0x20e>
     8f6:	80 91 4c 01 	lds	r24, 0x014C
     8fa:	90 91 4d 01 	lds	r25, 0x014D
     8fe:	81 32       	cpi	r24, 0x21	; 33
     900:	93 40       	sbci	r25, 0x03	; 3
     902:	4c f0       	brlt	.+18     	; 0x916 <drive_to_puck+0x20e>
					rotate(LEFT,1);
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	60 e8       	ldi	r22, 0x80	; 128
     90a:	7f e3       	ldi	r23, 0x3F	; 63
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     914:	82 c0       	rjmp	.+260    	; 0xa1a <drive_to_puck+0x312>
				}
				else {
					turn(LEFT,1.0,0);
     916:	00 e0       	ldi	r16, 0x00	; 0
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	98 01       	movw	r18, r16
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e8       	ldi	r22, 0x80	; 128
     922:	7f e3       	ldi	r23, 0x3F	; 63
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     92c:	76 c0       	rjmp	.+236    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 5:
				if (ADCarr[4] > 800 && ADCarr[5] > 800) {
     92e:	80 91 4a 01 	lds	r24, 0x014A
     932:	90 91 4b 01 	lds	r25, 0x014B
     936:	81 32       	cpi	r24, 0x21	; 33
     938:	93 40       	sbci	r25, 0x03	; 3
     93a:	84 f0       	brlt	.+32     	; 0x95c <drive_to_puck+0x254>
     93c:	80 91 4c 01 	lds	r24, 0x014C
     940:	90 91 4d 01 	lds	r25, 0x014D
     944:	81 32       	cpi	r24, 0x21	; 33
     946:	93 40       	sbci	r25, 0x03	; 3
     948:	4c f0       	brlt	.+18     	; 0x95c <drive_to_puck+0x254>
					rotate(LEFT,1);
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e8       	ldi	r22, 0x80	; 128
     950:	7f e3       	ldi	r23, 0x3F	; 63
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     95a:	5f c0       	rjmp	.+190    	; 0xa1a <drive_to_puck+0x312>
				}else {
					turn(LEFT,1.0,0.15);
     95c:	0a e9       	ldi	r16, 0x9A	; 154
     95e:	19 e9       	ldi	r17, 0x99	; 153
     960:	29 e1       	ldi	r18, 0x19	; 25
     962:	3e e3       	ldi	r19, 0x3E	; 62
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	60 e8       	ldi	r22, 0x80	; 128
     96a:	7f e3       	ldi	r23, 0x3F	; 63
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 6:
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     976:	00 91 42 01 	lds	r16, 0x0142
     97a:	10 91 43 01 	lds	r17, 0x0143
     97e:	b8 01       	movw	r22, r16
     980:	88 27       	eor	r24, r24
     982:	77 fd       	sbrc	r23, 7
     984:	80 95       	com	r24
     986:	98 2f       	mov	r25, r24
     988:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     98c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <log>
     990:	90 58       	subi	r25, 0x80	; 128
     992:	2e ea       	ldi	r18, 0xAE	; 174
     994:	37 e4       	ldi	r19, 0x47	; 71
     996:	43 eb       	ldi	r20, 0xB3	; 179
     998:	52 e4       	ldi	r21, 0x42	; 66
     99a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     99e:	2f e1       	ldi	r18, 0x1F	; 31
     9a0:	35 e2       	ldi	r19, 0x25	; 37
     9a2:	46 e2       	ldi	r20, 0x26	; 38
     9a4:	54 e4       	ldi	r21, 0x44	; 68
     9a6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
     9aa:	60 93 ba 01 	sts	0x01BA, r22
     9ae:	70 93 bb 01 	sts	0x01BB, r23
     9b2:	80 93 bc 01 	sts	0x01BC, r24
     9b6:	90 93 bd 01 	sts	0x01BD, r25
				diff = ADCarr[6] - ADCarr[0];
     9ba:	60 91 4e 01 	lds	r22, 0x014E
     9be:	70 91 4f 01 	lds	r23, 0x014F
     9c2:	60 1b       	sub	r22, r16
     9c4:	71 0b       	sbc	r23, r17
     9c6:	70 93 3d 01 	sts	0x013D, r23
     9ca:	60 93 3c 01 	sts	0x013C, r22
				deg = exp(-1.0*(fabs((float)diff))/70.0);
     9ce:	88 27       	eor	r24, r24
     9d0:	77 fd       	sbrc	r23, 7
     9d2:	80 95       	com	r24
     9d4:	98 2f       	mov	r25, r24
     9d6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	bf 77       	andi	r27, 0x7F	; 127
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	90 58       	subi	r25, 0x80	; 128
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	4c e8       	ldi	r20, 0x8C	; 140
     9ec:	52 e4       	ldi	r21, 0x42	; 66
     9ee:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
     9f2:	0e 94 97 14 	call	0x292e	; 0x292e <exp>
     9f6:	8b 01       	movw	r16, r22
     9f8:	9c 01       	movw	r18, r24
     9fa:	60 93 38 01 	sts	0x0138, r22
     9fe:	70 93 39 01 	sts	0x0139, r23
     a02:	80 93 3a 01 	sts	0x013A, r24
     a06:	90 93 3b 01 	sts	0x013B, r25
				turn(LEFT,1.0,deg);
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e8       	ldi	r22, 0x80	; 128
     a10:	7f e3       	ldi	r23, 0x3F	; 63
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
				//m_red(ON);
				//m_green(ON);
				break;
		}
	//}
}
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <drive_to_point2>:
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	7b 01       	movw	r14, r22
	m_green(ON);
     a42:	6a 9a       	sbi	0x0d, 2	; 13
     a44:	72 98       	cbi	0x0e, 2	; 14

	//while(1) {
		//localize(data);
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     a46:	bc 01       	movw	r22, r24
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     a54:	20 91 ca 01 	lds	r18, 0x01CA
     a58:	30 91 cb 01 	lds	r19, 0x01CB
     a5c:	40 91 cc 01 	lds	r20, 0x01CC
     a60:	50 91 cd 01 	lds	r21, 0x01CD
     a64:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
     a68:	06 2f       	mov	r16, r22
     a6a:	17 2f       	mov	r17, r23
     a6c:	d8 2f       	mov	r29, r24
     a6e:	c9 2f       	mov	r28, r25
     a70:	b7 01       	movw	r22, r14
     a72:	88 27       	eor	r24, r24
     a74:	77 fd       	sbrc	r23, 7
     a76:	80 95       	com	r24
     a78:	98 2f       	mov	r25, r24
     a7a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     a7e:	20 91 ce 01 	lds	r18, 0x01CE
     a82:	30 91 cf 01 	lds	r19, 0x01CF
     a86:	40 91 d0 01 	lds	r20, 0x01D0
     a8a:	50 91 d1 01 	lds	r21, 0x01D1
     a8e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
     a92:	c6 2e       	mov	r12, r22
     a94:	d7 2e       	mov	r13, r23
     a96:	e8 2e       	mov	r14, r24
     a98:	f9 2e       	mov	r15, r25
     a9a:	20 2f       	mov	r18, r16
     a9c:	31 2f       	mov	r19, r17
     a9e:	4d 2f       	mov	r20, r29
     aa0:	5c 2f       	mov	r21, r28
     aa2:	6c 2d       	mov	r22, r12
     aa4:	7d 2d       	mov	r23, r13
     aa6:	8e 2d       	mov	r24, r14
     aa8:	9f 2d       	mov	r25, r15
     aaa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <atan2>
     aae:	2b 01       	movw	r4, r22
     ab0:	3c 01       	movw	r6, r24
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	44 eb       	ldi	r20, 0xB4	; 180
     ab8:	52 e4       	ldi	r21, 0x42	; 66
     aba:	60 91 d2 01 	lds	r22, 0x01D2
     abe:	70 91 d3 01 	lds	r23, 0x01D3
     ac2:	80 91 d4 01 	lds	r24, 0x01D4
     ac6:	90 91 d5 01 	lds	r25, 0x01D5
     aca:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
     ace:	4b 01       	movw	r8, r22
     ad0:	5c 01       	movw	r10, r24
     ad2:	b7 fa       	bst	r11, 7
     ad4:	b0 94       	com	r11
     ad6:	b7 f8       	bld	r11, 7
     ad8:	b0 94       	com	r11
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	44 e3       	ldi	r20, 0x34	; 52
     ae0:	53 e4       	ldi	r21, 0x43	; 67
     ae2:	c3 01       	movw	r24, r6
     ae4:	b2 01       	movw	r22, r4
     ae6:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     aea:	23 ec       	ldi	r18, 0xC3	; 195
     aec:	35 ef       	ldi	r19, 0xF5	; 245
     aee:	48 e4       	ldi	r20, 0x48	; 72
     af0:	50 e4       	ldi	r21, 0x40	; 64
     af2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	c5 01       	movw	r24, r10
     afc:	b4 01       	movw	r22, r8
     afe:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
     b02:	0e 94 c3 14 	call	0x2986	; 0x2986 <__fixsfsi>
     b06:	cb 01       	movw	r24, r22
     b08:	8c 57       	subi	r24, 0x7C	; 124
     b0a:	9c 4f       	sbci	r25, 0xFC	; 252
     b0c:	68 e6       	ldi	r22, 0x68	; 104
     b0e:	71 e0       	ldi	r23, 0x01	; 1
     b10:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__divmodhi4>
     b14:	bc 01       	movw	r22, r24
     b16:	64 5b       	subi	r22, 0xB4	; 180
     b18:	71 09       	sbc	r23, r1
     b1a:	88 27       	eor	r24, r24
     b1c:	77 fd       	sbrc	r23, 7
     b1e:	80 95       	com	r24
     b20:	98 2f       	mov	r25, r24
     b22:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     b26:	4b 01       	movw	r8, r22
     b28:	5c 01       	movw	r10, r24
     b2a:	60 93 22 01 	sts	0x0122, r22
     b2e:	70 93 23 01 	sts	0x0123, r23
     b32:	80 93 24 01 	sts	0x0124, r24
     b36:	90 93 25 01 	sts	0x0125, r25
		if (abs(angle_dif) < 5) {
			//shoot();
			//game_pause();
		}
		if (angle_dif > 0) {
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	a9 01       	movw	r20, r18
     b40:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__gesf2>
     b44:	18 16       	cp	r1, r24
     b46:	2c f4       	brge	.+10     	; 0xb52 <__stack+0x53>
			dir = RIGHT;
     b48:	10 92 19 01 	sts	0x0119, r1
     b4c:	10 92 18 01 	sts	0x0118, r1
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <__stack+0x5f>
		}
		else {
			dir = LEFT;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	90 93 19 01 	sts	0x0119, r25
     b5a:	80 93 18 01 	sts	0x0118, r24
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     b5e:	e8 94       	clt
     b60:	b7 f8       	bld	r11, 7
     b62:	c5 01       	movw	r24, r10
     b64:	b4 01       	movw	r22, r8
     b66:	90 58       	subi	r25, 0x80	; 128
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 ef       	ldi	r20, 0xF0	; 240
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
     b74:	0e 94 97 14 	call	0x292e	; 0x292e <exp>
     b78:	60 93 38 01 	sts	0x0138, r22
     b7c:	70 93 39 01 	sts	0x0139, r23
     b80:	80 93 3a 01 	sts	0x013A, r24
     b84:	90 93 3b 01 	sts	0x013B, r25
		//Set distance
		distance = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     b88:	2c 2d       	mov	r18, r12
     b8a:	3d 2d       	mov	r19, r13
     b8c:	4e 2d       	mov	r20, r14
     b8e:	5f 2d       	mov	r21, r15
     b90:	6c 2d       	mov	r22, r12
     b92:	7d 2d       	mov	r23, r13
     b94:	8e 2d       	mov	r24, r14
     b96:	9f 2d       	mov	r25, r15
     b98:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     b9c:	6b 01       	movw	r12, r22
     b9e:	7c 01       	movw	r14, r24
     ba0:	20 2f       	mov	r18, r16
     ba2:	31 2f       	mov	r19, r17
     ba4:	4d 2f       	mov	r20, r29
     ba6:	5c 2f       	mov	r21, r28
     ba8:	60 2f       	mov	r22, r16
     baa:	71 2f       	mov	r23, r17
     bac:	8d 2f       	mov	r24, r29
     bae:	9c 2f       	mov	r25, r28
     bb0:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     bb4:	9b 01       	movw	r18, r22
     bb6:	ac 01       	movw	r20, r24
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
     bc0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <sqrt>
     bc4:	0e 94 c3 14 	call	0x2986	; 0x2986 <__fixsfsi>
     bc8:	88 27       	eor	r24, r24
     bca:	77 fd       	sbrc	r23, 7
     bcc:	80 95       	com	r24
     bce:	98 2f       	mov	r25, r24
     bd0:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__floatsisf>
     bd4:	60 93 1e 01 	sts	0x011E, r22
     bd8:	70 93 1f 01 	sts	0x011F, r23
     bdc:	80 93 20 01 	sts	0x0120, r24
     be0:	90 93 21 01 	sts	0x0121, r25
		spd = ((float)distance)/70.0;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4c e8       	ldi	r20, 0x8C	; 140
     bea:	52 e4       	ldi	r21, 0x42	; 66
     bec:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
     bf0:	60 93 1a 01 	sts	0x011A, r22
     bf4:	70 93 1b 01 	sts	0x011B, r23
     bf8:	80 93 1c 01 	sts	0x011C, r24
     bfc:	90 93 1d 01 	sts	0x011D, r25
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     c00:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <m_usb_rx_char>
     c04:	80 93 bf 01 	sts	0x01BF, r24

			m_usb_rx_flush();  				//clear buffer
     c08:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     c0c:	80 91 bf 01 	lds	r24, 0x01BF
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	09 f0       	breq	.+2      	; 0xc16 <__stack+0x117>
     c14:	62 c0       	rjmp	.+196    	; 0xcda <__stack+0x1db>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     c16:	80 91 22 01 	lds	r24, 0x0122
     c1a:	90 91 23 01 	lds	r25, 0x0123
     c1e:	a0 91 24 01 	lds	r26, 0x0124
     c22:	b0 91 25 01 	lds	r27, 0x0125
     c26:	80 93 d6 01 	sts	0x01D6, r24
     c2a:	90 93 d7 01 	sts	0x01D7, r25
     c2e:	a0 93 d8 01 	sts	0x01D8, r26
     c32:	b0 93 d9 01 	sts	0x01D9, r27
				data[4] = deg*100.0;
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	48 ec       	ldi	r20, 0xC8	; 200
     c3c:	52 e4       	ldi	r21, 0x42	; 66
     c3e:	60 91 38 01 	lds	r22, 0x0138
     c42:	70 91 39 01 	lds	r23, 0x0139
     c46:	80 91 3a 01 	lds	r24, 0x013A
     c4a:	90 91 3b 01 	lds	r25, 0x013B
     c4e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     c52:	60 93 da 01 	sts	0x01DA, r22
     c56:	70 93 db 01 	sts	0x01DB, r23
     c5a:	80 93 dc 01 	sts	0x01DC, r24
     c5e:	90 93 dd 01 	sts	0x01DD, r25
				data[5] = distance;
     c62:	80 91 1e 01 	lds	r24, 0x011E
     c66:	90 91 1f 01 	lds	r25, 0x011F
     c6a:	a0 91 20 01 	lds	r26, 0x0120
     c6e:	b0 91 21 01 	lds	r27, 0x0121
     c72:	80 93 de 01 	sts	0x01DE, r24
     c76:	90 93 df 01 	sts	0x01DF, r25
     c7a:	a0 93 e0 01 	sts	0x01E0, r26
     c7e:	b0 93 e1 01 	sts	0x01E1, r27
				data[6] = spd*100.0;
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	48 ec       	ldi	r20, 0xC8	; 200
     c88:	52 e4       	ldi	r21, 0x42	; 66
     c8a:	60 91 1a 01 	lds	r22, 0x011A
     c8e:	70 91 1b 01 	lds	r23, 0x011B
     c92:	80 91 1c 01 	lds	r24, 0x011C
     c96:	90 91 1d 01 	lds	r25, 0x011D
     c9a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
     c9e:	60 93 e2 01 	sts	0x01E2, r22
     ca2:	70 93 e3 01 	sts	0x01E3, r23
     ca6:	80 93 e4 01 	sts	0x01E4, r24
     caa:	90 93 e5 01 	sts	0x01E5, r25
     cae:	ca ec       	ldi	r28, 0xCA	; 202
     cb0:	d1 e0       	ldi	r29, 0x01	; 1
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     cb2:	06 ee       	ldi	r16, 0xE6	; 230
     cb4:	11 e0       	ldi	r17, 0x01	; 1
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     cb6:	69 91       	ld	r22, Y+
     cb8:	79 91       	ld	r23, Y+
     cba:	89 91       	ld	r24, Y+
     cbc:	99 91       	ld	r25, Y+
     cbe:	0e 94 c3 14 	call	0x2986	; 0x2986 <__fixsfsi>
     cc2:	cb 01       	movw	r24, r22
     cc4:	0e 94 36 11 	call	0x226c	; 0x226c <m_usb_tx_int>
					m_usb_tx_char('\t');
     cc8:	89 e0       	ldi	r24, 0x09	; 9
     cca:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     cce:	c0 17       	cp	r28, r16
     cd0:	d1 07       	cpc	r29, r17
     cd2:	89 f7       	brne	.-30     	; 0xcb6 <__stack+0x1b7>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     cda:	c0 90 00 01 	lds	r12, 0x0100
     cde:	d0 90 01 01 	lds	r13, 0x0101
     ce2:	e0 90 02 01 	lds	r14, 0x0102
     ce6:	f0 90 03 01 	lds	r15, 0x0103
     cea:	a7 01       	movw	r20, r14
     cec:	96 01       	movw	r18, r12
     cee:	60 91 1a 01 	lds	r22, 0x011A
     cf2:	70 91 1b 01 	lds	r23, 0x011B
     cf6:	80 91 1c 01 	lds	r24, 0x011C
     cfa:	90 91 1d 01 	lds	r25, 0x011D
     cfe:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__gesf2>
     d02:	18 16       	cp	r1, r24
     d04:	44 f4       	brge	.+16     	; 0xd16 <__stack+0x217>
     d06:	c0 92 1a 01 	sts	0x011A, r12
     d0a:	d0 92 1b 01 	sts	0x011B, r13
     d0e:	e0 92 1c 01 	sts	0x011C, r14
     d12:	f0 92 1d 01 	sts	0x011D, r15
		turn(dir, spd, deg);
     d16:	00 91 38 01 	lds	r16, 0x0138
     d1a:	10 91 39 01 	lds	r17, 0x0139
     d1e:	20 91 3a 01 	lds	r18, 0x013A
     d22:	30 91 3b 01 	lds	r19, 0x013B
     d26:	40 91 1a 01 	lds	r20, 0x011A
     d2a:	50 91 1b 01 	lds	r21, 0x011B
     d2e:	60 91 1c 01 	lds	r22, 0x011C
     d32:	70 91 1d 01 	lds	r23, 0x011D
     d36:	80 91 18 01 	lds	r24, 0x0118
     d3a:	90 91 19 01 	lds	r25, 0x0119
     d3e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
		
	//}
	if (distance < 10) {
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	60 91 1e 01 	lds	r22, 0x011E
     d4e:	70 91 1f 01 	lds	r23, 0x011F
     d52:	80 91 20 01 	lds	r24, 0x0120
     d56:	90 91 21 01 	lds	r25, 0x0121
     d5a:	0e 94 23 14 	call	0x2846	; 0x2846 <__cmpsf2>
     d5e:	88 23       	and	r24, r24
     d60:	84 f4       	brge	.+32     	; 0xd82 <__stack+0x283>
		m_red(ON);
     d62:	6e 9a       	sbi	0x0d, 6	; 13
     d64:	76 98       	cbi	0x0e, 6	; 14
		reverse();
     d66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <reverse>
		OCR1B = 0;
     d6a:	10 92 8b 00 	sts	0x008B, r1
     d6e:	10 92 8a 00 	sts	0x008A, r1
		OCR3A = 0;
     d72:	10 92 99 00 	sts	0x0099, r1
     d76:	10 92 98 00 	sts	0x0098, r1
		state = 0;
     d7a:	10 92 55 01 	sts	0x0155, r1
     d7e:	10 92 54 01 	sts	0x0154, r1
	}
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	7f 90       	pop	r7
     d9c:	6f 90       	pop	r6
     d9e:	5f 90       	pop	r5
     da0:	4f 90       	pop	r4
     da2:	08 95       	ret

00000da4 <drive_to_goalB>:
void drive_to_goalA() {
	drive_to_point2(GOALAX,GOALAY);
}

void drive_to_goalB() {
	drive_to_point2(GOALBX,GOALBY);
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	83 e7       	ldi	r24, 0x73	; 115
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 10 05 	call	0xa20	; 0xa20 <drive_to_point2>
     db0:	08 95       	ret

00000db2 <main>:
float prevx = 0.0;
float prevy = 0.0;
*/
int main(void)
{
	set(DDRD,5);
     db2:	55 9a       	sbi	0x0a, 5	; 10
	set(DDRD,3);
     db4:	53 9a       	sbi	0x0a, 3	; 10
	//wireless stuffs
	m_bus_init();
     db6:	0e 94 13 08 	call	0x1026	; 0x1026 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     dba:	4a e0       	ldi	r20, 0x0A	; 10
     dbc:	68 e0       	ldi	r22, 0x08	; 8
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     dc4:	e1 e6       	ldi	r30, 0x61	; 97
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	80 83       	st	Z, r24
     dcc:	10 82       	st	Z, r1
	
	m_disableJTAG();
     dce:	85 bf       	out	0x35, r24	; 53
     dd0:	85 bf       	out	0x35, r24	; 53
// 	
// 	set(TCCR0B, CS02);
// 	set(TCCR0B, CS01);
// 	set(TCCR0B, CS00);
// 	
	set(DDRB,7);
     dd2:	27 9a       	sbi	0x04, 7	; 4
// 	OCR0A = 0xFF;
// 	OCR0B = 0xff;
// 	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     dd4:	e1 e8       	ldi	r30, 0x81	; 129
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 61       	ori	r24, 0x10	; 16
     ddc:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     dde:	80 81       	ld	r24, Z
     de0:	88 60       	ori	r24, 0x08	; 8
     de2:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     de4:	a0 e8       	ldi	r26, 0x80	; 128
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	8c 91       	ld	r24, X
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     dee:	8c 91       	ld	r24, X
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     df4:	8c 91       	ld	r24, X
     df6:	80 62       	ori	r24, 0x20	; 32
     df8:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     dfa:	8c 91       	ld	r24, X
     dfc:	8f 7e       	andi	r24, 0xEF	; 239
     dfe:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     e00:	80 81       	ld	r24, Z
     e02:	8b 7f       	andi	r24, 0xFB	; 251
     e04:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     e06:	80 81       	ld	r24, Z
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	80 83       	st	Z, r24
	
	set(DDRB,6);
     e12:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	9f ef       	ldi	r25, 0xFF	; 255
     e18:	90 93 89 00 	sts	0x0089, r25
     e1c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     e20:	10 92 8b 00 	sts	0x008B, r1
     e24:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     e28:	e1 e9       	ldi	r30, 0x91	; 145
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	20 81       	ld	r18, Z
     e2e:	20 61       	ori	r18, 0x10	; 16
     e30:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     e32:	20 81       	ld	r18, Z
     e34:	28 60       	ori	r18, 0x08	; 8
     e36:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     e38:	a0 e9       	ldi	r26, 0x90	; 144
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	2c 91       	ld	r18, X
     e3e:	22 60       	ori	r18, 0x02	; 2
     e40:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     e42:	2c 91       	ld	r18, X
     e44:	2e 7f       	andi	r18, 0xFE	; 254
     e46:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     e48:	2c 91       	ld	r18, X
     e4a:	20 68       	ori	r18, 0x80	; 128
     e4c:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     e4e:	2c 91       	ld	r18, X
     e50:	2f 7b       	andi	r18, 0xBF	; 191
     e52:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     e54:	20 81       	ld	r18, Z
     e56:	2b 7f       	andi	r18, 0xFB	; 251
     e58:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     e5a:	20 81       	ld	r18, Z
     e5c:	2d 7f       	andi	r18, 0xFD	; 253
     e5e:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     e60:	20 81       	ld	r18, Z
     e62:	21 60       	ori	r18, 0x01	; 1
     e64:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     e66:	90 93 97 00 	sts	0x0097, r25
     e6a:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     e6e:	10 92 99 00 	sts	0x0099, r1
     e72:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     e76:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     e78:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     e7a:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     e7c:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     e7e:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     e80:	78 94       	sei
	set(ADCSRA, ADIE);
     e82:	ca e7       	ldi	r28, 0x7A	; 122
     e84:	d0 e0       	ldi	r29, 0x00	; 0
     e86:	88 81       	ld	r24, Y
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	88 83       	st	Y, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     e8c:	ec e7       	ldi	r30, 0x7C	; 124
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	80 83       	st	Z, r24
	clear(ADMUX, REFS0);	//^
     e96:	80 81       	ld	r24, Z
     e98:	8f 7b       	andi	r24, 0xBF	; 191
     e9a:	80 83       	st	Z, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     e9c:	88 81       	ld	r24, Y
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	88 83       	st	Y, r24
	set(ADCSRA, ADPS1);	//^
     ea2:	88 81       	ld	r24, Y
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	88 83       	st	Y, r24
	set(ADCSRA, ADPS0);	//^
     ea8:	88 81       	ld	r24, Y
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	88 83       	st	Y, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     eae:	ee e7       	ldi	r30, 0x7E	; 126
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	80 83       	st	Z, r24
	set(DIDR0, ADC1D),
     eb8:	80 81       	ld	r24, Z
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	80 83       	st	Z, r24
	set(DIDR0, ADC4D);
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	80 83       	st	Z, r24
	set(DIDR0, ADC5D);
     ec4:	80 81       	ld	r24, Z
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	80 83       	st	Z, r24
	set(DIDR0, ADC6D);
     eca:	80 81       	ld	r24, Z
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	80 83       	st	Z, r24
	set(DIDR0, ADC7D);
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	80 83       	st	Z, r24
	set(DIDR2, ADC8D);
     ed6:	ed e7       	ldi	r30, 0x7D	; 125
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 83       	st	Z, r24
	set(DIDR2, ADC9D);
     ee0:	80 81       	ld	r24, Z
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	80 83       	st	Z, r24
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     ee6:	88 81       	ld	r24, Y
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	88 83       	st	Y, r24
	
	chooseInput(0);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
     ef4:	88 81       	ld	r24, Y
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	88 83       	st	Y, r24
	set(ADCSRA, ADSC);	//^
     efa:	88 81       	ld	r24, Y
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	88 83       	st	Y, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     f00:	88 81       	ld	r24, Y
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	88 83       	st	Y, r24
	
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     f06:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     f08:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     f0a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     f0c:	29 98       	cbi	0x05, 1	; 5
	 
	//int state; // state variable
	state = 2; //set state
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 55 01 	sts	0x0155, r25
     f16:	80 93 54 01 	sts	0x0154, r24
			m_usb_init(); // connect usb
			while(!m_usb_isconnected());  //wait for connection
	}

	//m_bus_init();
	m_wii_open();
     f1a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <m_wii_open>
	//m_usb_init();
	local_init();
     f1e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <local_init>
			prevy = data[1];
			loccounter = 0;
		}*/
		//loccounter++;
		localize(data);
		toggle(PORTD,3);
     f22:	68 94       	set
     f24:	dd 24       	eor	r13, r13
     f26:	d3 f8       	bld	r13, 3
		changedState = 0;
		angle_dif = 0;
		
		//Detect weather we have the puck
		getADC();
		if (ADCarr[7] > 500) {
     f28:	c0 e5       	ldi	r28, 0x50	; 80
     f2a:	d1 e0       	ldi	r29, 0x01	; 1
			set(PORTD,5);
			iHaveThePuck = 1;
     f2c:	cc 24       	eor	r12, r12
     f2e:	c3 94       	inc	r12
			clear(PORTD,5);
			iHaveThePuck = 0;
		}
		
		if(iHaveThePuck) {
			state = 0xA3;
     f30:	0f 2e       	mov	r0, r31
     f32:	f3 ea       	ldi	r31, 0xA3	; 163
     f34:	ef 2e       	mov	r14, r31
     f36:	f1 2c       	mov	r15, r1
     f38:	f0 2d       	mov	r31, r0
		}
		else {
			state = 2;
     f3a:	02 e0       	ldi	r16, 0x02	; 2
     f3c:	10 e0       	ldi	r17, 0x00	; 0
			prevx = data[0];
			prevy = data[1];
			loccounter = 0;
		}*/
		//loccounter++;
		localize(data);
     f3e:	8a ec       	ldi	r24, 0xCA	; 202
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <localize>
		toggle(PORTD,3);
     f46:	8b b1       	in	r24, 0x0b	; 11
     f48:	8d 25       	eor	r24, r13
     f4a:	8b b9       	out	0x0b, r24	; 11
		changedState = 0;
     f4c:	10 92 56 01 	sts	0x0156, r1
		angle_dif = 0;
     f50:	10 92 22 01 	sts	0x0122, r1
     f54:	10 92 23 01 	sts	0x0123, r1
     f58:	10 92 24 01 	sts	0x0124, r1
     f5c:	10 92 25 01 	sts	0x0125, r1
		
		//Detect weather we have the puck
		getADC();
     f60:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
		if (ADCarr[7] > 500) {
     f64:	88 81       	ld	r24, Y
     f66:	99 81       	ldd	r25, Y+1	; 0x01
     f68:	85 3f       	cpi	r24, 0xF5	; 245
     f6a:	91 40       	sbci	r25, 0x01	; 1
     f6c:	54 f0       	brlt	.+20     	; 0xf82 <main+0x1d0>
			set(PORTD,5);
     f6e:	5d 9a       	sbi	0x0b, 5	; 11
			iHaveThePuck = 1;
     f70:	c0 92 57 01 	sts	0x0157, r12
			clear(PORTD,5);
			iHaveThePuck = 0;
		}
		
		if(iHaveThePuck) {
			state = 0xA3;
     f74:	f0 92 55 01 	sts	0x0155, r15
     f78:	e0 92 54 01 	sts	0x0154, r14
			case 0xA2:
			drive_to_goalA();
			break;
			
			case 0xA3:
			drive_to_goalB();
     f7c:	0e 94 d2 06 	call	0xda4	; 0xda4 <drive_to_goalB>
			break;
     f80:	de cf       	rjmp	.-68     	; 0xf3e <main+0x18c>
		getADC();
		if (ADCarr[7] > 500) {
			set(PORTD,5);
			iHaveThePuck = 1;
		} else {
			clear(PORTD,5);
     f82:	5d 98       	cbi	0x0b, 5	; 11
			iHaveThePuck = 0;
     f84:	10 92 57 01 	sts	0x0157, r1
		
		if(iHaveThePuck) {
			state = 0xA3;
		}
		else {
			state = 2;
     f88:	10 93 55 01 	sts	0x0155, r17
     f8c:	00 93 54 01 	sts	0x0154, r16
			findPuck();
			break;
			
			case 2:
			//m_red(ON);
			drive_to_puck();
     f90:	0e 94 84 03 	call	0x708	; 0x708 <drive_to_puck>
			break;
     f94:	d4 cf       	rjmp	.-88     	; 0xf3e <main+0x18c>

00000f96 <__vector_3>:
        
    }
}


ISR(INT2_vect)  {
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
	cli();
     fb8:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     fba:	6a e0       	ldi	r22, 0x0A	; 10
     fbc:	80 ec       	ldi	r24, 0xC0	; 192
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <m_rf_read>
	sei();
     fc4:	78 94       	sei
	state=buffer[0];
     fc6:	80 91 c0 01 	lds	r24, 0x01C0
     fca:	80 93 54 01 	sts	0x0154, r24
     fce:	10 92 55 01 	sts	0x0155, r1
	changedState = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 56 01 	sts	0x0156, r24
}
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	bf 91       	pop	r27
     fde:	af 91       	pop	r26
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	7f 91       	pop	r23
     fe6:	6f 91       	pop	r22
     fe8:	5f 91       	pop	r21
     fea:	4f 91       	pop	r20
     fec:	3f 91       	pop	r19
     fee:	2f 91       	pop	r18
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_29>:

ISR(ADC_vect) {
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
	cli();
    1008:	f8 94       	cli
	conversion = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	90 93 27 01 	sts	0x0127, r25
    1012:	80 93 26 01 	sts	0x0126, r24
	sei();
    1016:	78 94       	sei
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1026:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1028:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    102a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    102c:	8c e0       	ldi	r24, 0x0C	; 12
    102e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1032:	e9 e6       	ldi	r30, 0x69	; 105
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 62       	ori	r24, 0x20	; 32
    103a:	80 83       	st	Z, r24
    103c:	80 81       	ld	r24, Z
    103e:	8f 7e       	andi	r24, 0xEF	; 239
    1040:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1042:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1044:	78 94       	sei
    1046:	08 95       	ret

00001048 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	8c 01       	movw	r16, r24
    1052:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
    1054:	8e e9       	ldi	r24, 0x9E	; 158
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 c4 11 	call	0x2388	; 0x2388 <m_wii_read>
	x[0] = blobs[0];
    105c:	80 91 9e 01 	lds	r24, 0x019E
    1060:	90 91 9f 01 	lds	r25, 0x019F
    1064:	f8 01       	movw	r30, r16
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
	x[1] = blobs[3];
    106a:	80 91 a4 01 	lds	r24, 0x01A4
    106e:	90 91 a5 01 	lds	r25, 0x01A5
    1072:	93 83       	std	Z+3, r25	; 0x03
    1074:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
    1076:	80 91 aa 01 	lds	r24, 0x01AA
    107a:	90 91 ab 01 	lds	r25, 0x01AB
    107e:	95 83       	std	Z+5, r25	; 0x05
    1080:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
    1082:	80 91 b0 01 	lds	r24, 0x01B0
    1086:	90 91 b1 01 	lds	r25, 0x01B1
    108a:	97 83       	std	Z+7, r25	; 0x07
    108c:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
    108e:	80 91 a0 01 	lds	r24, 0x01A0
    1092:	90 91 a1 01 	lds	r25, 0x01A1
    1096:	99 83       	std	Y+1, r25	; 0x01
    1098:	88 83       	st	Y, r24
	y[1] = blobs[4];
    109a:	80 91 a6 01 	lds	r24, 0x01A6
    109e:	90 91 a7 01 	lds	r25, 0x01A7
    10a2:	9b 83       	std	Y+3, r25	; 0x03
    10a4:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
    10a6:	80 91 ac 01 	lds	r24, 0x01AC
    10aa:	90 91 ad 01 	lds	r25, 0x01AD
    10ae:	9d 83       	std	Y+5, r25	; 0x05
    10b0:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
    10b2:	80 91 b2 01 	lds	r24, 0x01B2
    10b6:	90 91 b3 01 	lds	r25, 0x01B3
    10ba:	9f 83       	std	Y+7, r25	; 0x07
    10bc:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <determine_blobs>:

unsigned char determine_blobs() {
    10ca:	2f 92       	push	r2
    10cc:	3f 92       	push	r3
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	6c 97       	sbiw	r28, 0x1c	; 28
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
    10fe:	10 92 66 01 	sts	0x0166, r1
    1102:	10 92 67 01 	sts	0x0167, r1
    1106:	10 92 68 01 	sts	0x0168, r1
    110a:	10 92 69 01 	sts	0x0169, r1
	distmin = 30000;
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e6       	ldi	r25, 0x60	; 96
    1112:	aa ee       	ldi	r26, 0xEA	; 234
    1114:	b6 e4       	ldi	r27, 0x46	; 70
    1116:	80 93 04 01 	sts	0x0104, r24
    111a:	90 93 05 01 	sts	0x0105, r25
    111e:	a0 93 06 01 	sts	0x0106, r26
    1122:	b0 93 07 01 	sts	0x0107, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    1126:	0f 2e       	mov	r0, r31
    1128:	f8 e7       	ldi	r31, 0x78	; 120
    112a:	cf 2e       	mov	r12, r31
    112c:	f1 e0       	ldi	r31, 0x01	; 1
    112e:	df 2e       	mov	r13, r31
    1130:	f0 2d       	mov	r31, r0
    1132:	0a e7       	ldi	r16, 0x7A	; 122
    1134:	11 e0       	ldi	r17, 0x01	; 1
    1136:	0f 2e       	mov	r0, r31
    1138:	fc e7       	ldi	r31, 0x7C	; 124
    113a:	ef 2e       	mov	r14, r31
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	ff 2e       	mov	r15, r31
    1140:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
    1142:	6e e6       	ldi	r22, 0x6E	; 110
    1144:	71 e0       	ldi	r23, 0x01	; 1
    1146:	86 e7       	ldi	r24, 0x76	; 118
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 24 08 	call	0x1048	; 0x1048 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    114e:	80 91 76 01 	lds	r24, 0x0176
    1152:	90 91 77 01 	lds	r25, 0x0177
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	93 40       	sbci	r25, 0x03	; 3
    115a:	98 f7       	brcc	.-26     	; 0x1142 <determine_blobs+0x78>
    115c:	f6 01       	movw	r30, r12
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	93 40       	sbci	r25, 0x03	; 3
    1166:	68 f7       	brcc	.-38     	; 0x1142 <determine_blobs+0x78>
    1168:	f8 01       	movw	r30, r16
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	8f 3f       	cpi	r24, 0xFF	; 255
    1170:	93 40       	sbci	r25, 0x03	; 3
    1172:	38 f7       	brcc	.-50     	; 0x1142 <determine_blobs+0x78>
    1174:	f7 01       	movw	r30, r14
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	93 40       	sbci	r25, 0x03	; 3
    117e:	08 f7       	brcc	.-62     	; 0x1142 <determine_blobs+0x78>
    1180:	80 90 6a 01 	lds	r8, 0x016A
    1184:	90 90 6b 01 	lds	r9, 0x016B
    1188:	a0 90 6c 01 	lds	r10, 0x016C
    118c:	b0 90 6d 01 	lds	r11, 0x016D
    1190:	20 91 66 01 	lds	r18, 0x0166
    1194:	29 83       	std	Y+1, r18	; 0x01
    1196:	30 91 67 01 	lds	r19, 0x0167
    119a:	3a 83       	std	Y+2, r19	; 0x02
    119c:	40 91 68 01 	lds	r20, 0x0168
    11a0:	4b 83       	std	Y+3, r20	; 0x03
    11a2:	50 91 69 01 	lds	r21, 0x0169
    11a6:	5c 83       	std	Y+4, r21	; 0x04
    11a8:	60 91 60 01 	lds	r22, 0x0160
    11ac:	6b 8b       	std	Y+19, r22	; 0x13
    11ae:	70 91 61 01 	lds	r23, 0x0161
    11b2:	7c 8b       	std	Y+20, r23	; 0x14
    11b4:	80 91 5e 01 	lds	r24, 0x015E
    11b8:	89 8b       	std	Y+17, r24	; 0x11
    11ba:	90 91 5f 01 	lds	r25, 0x015F
    11be:	9a 8b       	std	Y+18, r25	; 0x12
    11c0:	e0 91 62 01 	lds	r30, 0x0162
    11c4:	ed 8b       	std	Y+21, r30	; 0x15
    11c6:	f0 91 63 01 	lds	r31, 0x0163
    11ca:	fe 8b       	std	Y+22, r31	; 0x16
    11cc:	20 91 64 01 	lds	r18, 0x0164
    11d0:	2f 8b       	std	Y+23, r18	; 0x17
    11d2:	30 91 65 01 	lds	r19, 0x0165
    11d6:	38 8f       	std	Y+24, r19	; 0x18
    11d8:	40 91 04 01 	lds	r20, 0x0104
    11dc:	4d 83       	std	Y+5, r20	; 0x05
    11de:	50 91 05 01 	lds	r21, 0x0105
    11e2:	5e 83       	std	Y+6, r21	; 0x06
    11e4:	20 90 06 01 	lds	r2, 0x0106
    11e8:	30 90 07 01 	lds	r3, 0x0107
    11ec:	60 91 5c 01 	lds	r22, 0x015C
    11f0:	69 8f       	std	Y+25, r22	; 0x19
    11f2:	70 91 5d 01 	lds	r23, 0x015D
    11f6:	7a 8f       	std	Y+26, r23	; 0x1a
    11f8:	80 91 5a 01 	lds	r24, 0x015A
    11fc:	90 91 5b 01 	lds	r25, 0x015B
    1200:	98 8b       	std	Y+16, r25	; 0x10
    1202:	8f 87       	std	Y+15, r24	; 0x0f
    1204:	18 86       	std	Y+8, r1	; 0x08
    1206:	1f 82       	std	Y+7, r1	; 0x07
    1208:	c1 2c       	mov	r12, r1
    120a:	d1 2c       	mov	r13, r1
    120c:	b9 c0       	rjmp	.+370    	; 0x1380 <determine_blobs+0x2b6>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
    120e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1210:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1212:	e4 15       	cp	r30, r4
    1214:	f5 05       	cpc	r31, r5
    1216:	09 f4       	brne	.+2      	; 0x121a <determine_blobs+0x150>
    1218:	9c c0       	rjmp	.+312    	; 0x1352 <determine_blobs+0x288>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    121a:	e9 85       	ldd	r30, Y+9	; 0x09
    121c:	fa 85       	ldd	r31, Y+10	; 0x0a
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    122a:	6b 01       	movw	r12, r22
    122c:	7c 01       	movw	r14, r24
    122e:	f3 01       	movw	r30, r6
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	c7 01       	movw	r24, r14
    1242:	b6 01       	movw	r22, r12
    1244:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    1248:	c6 2e       	mov	r12, r22
    124a:	d7 2e       	mov	r13, r23
    124c:	e8 2e       	mov	r14, r24
    124e:	f9 2e       	mov	r15, r25
    1250:	eb 85       	ldd	r30, Y+11	; 0x0b
    1252:	fc 85       	ldd	r31, Y+12	; 0x0c
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1260:	4b 01       	movw	r8, r22
    1262:	5c 01       	movw	r10, r24
    1264:	f8 01       	movw	r30, r16
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	c5 01       	movw	r24, r10
    1278:	b4 01       	movw	r22, r8
    127a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    127e:	86 2e       	mov	r8, r22
    1280:	97 2e       	mov	r9, r23
    1282:	a8 2e       	mov	r10, r24
    1284:	b9 2e       	mov	r11, r25
    1286:	2c 2d       	mov	r18, r12
    1288:	3d 2d       	mov	r19, r13
    128a:	4e 2d       	mov	r20, r14
    128c:	5f 2d       	mov	r21, r15
    128e:	6c 2d       	mov	r22, r12
    1290:	7d 2d       	mov	r23, r13
    1292:	8e 2d       	mov	r24, r14
    1294:	9f 2d       	mov	r25, r15
    1296:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    129a:	6b 01       	movw	r12, r22
    129c:	7c 01       	movw	r14, r24
    129e:	28 2d       	mov	r18, r8
    12a0:	39 2d       	mov	r19, r9
    12a2:	4a 2d       	mov	r20, r10
    12a4:	5b 2d       	mov	r21, r11
    12a6:	68 2d       	mov	r22, r8
    12a8:	79 2d       	mov	r23, r9
    12aa:	8a 2d       	mov	r24, r10
    12ac:	9b 2d       	mov	r25, r11
    12ae:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	c7 01       	movw	r24, r14
    12b8:	b6 01       	movw	r22, r12
    12ba:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
    12be:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <sqrt>
    12c2:	86 2e       	mov	r8, r22
    12c4:	97 2e       	mov	r9, r23
    12c6:	a8 2e       	mov	r10, r24
    12c8:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
    12ca:	79 81       	ldd	r23, Y+1	; 0x01
    12cc:	6a 81       	ldd	r22, Y+2	; 0x02
    12ce:	9b 81       	ldd	r25, Y+3	; 0x03
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	27 2f       	mov	r18, r23
    12d4:	36 2f       	mov	r19, r22
    12d6:	49 2f       	mov	r20, r25
    12d8:	58 2f       	mov	r21, r24
    12da:	68 2d       	mov	r22, r8
    12dc:	79 2d       	mov	r23, r9
    12de:	8a 2d       	mov	r24, r10
    12e0:	9b 2d       	mov	r25, r11
    12e2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__gesf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	d4 f4       	brge	.+52     	; 0x131e <determine_blobs+0x254>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	68 2d       	mov	r22, r8
    12f4:	79 2d       	mov	r23, r9
    12f6:	8a 2d       	mov	r24, r10
    12f8:	9b 2d       	mov	r25, r11
    12fa:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
    1306:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1308:	f9 8b       	std	Y+17, r31	; 0x11
    130a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    130c:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
    130e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1310:	3b 8b       	std	Y+19, r19	; 0x13
    1312:	4e 85       	ldd	r20, Y+14	; 0x0e
    1314:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
    1316:	89 82       	std	Y+1, r8	; 0x01
    1318:	9a 82       	std	Y+2, r9	; 0x02
    131a:	ab 82       	std	Y+3, r10	; 0x03
    131c:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
    131e:	7d 81       	ldd	r23, Y+5	; 0x05
    1320:	6e 81       	ldd	r22, Y+6	; 0x06
    1322:	27 2f       	mov	r18, r23
    1324:	36 2f       	mov	r19, r22
    1326:	42 2d       	mov	r20, r2
    1328:	53 2d       	mov	r21, r3
    132a:	68 2d       	mov	r22, r8
    132c:	79 2d       	mov	r23, r9
    132e:	8a 2d       	mov	r24, r10
    1330:	9b 2d       	mov	r25, r11
    1332:	0e 94 23 14 	call	0x2846	; 0x2846 <__cmpsf2>
    1336:	88 23       	and	r24, r24
    1338:	64 f4       	brge	.+24     	; 0x1352 <determine_blobs+0x288>
						distmin = dist;
						close1 = i;
						close2 = j;
    133a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    133c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    133e:	78 8b       	std	Y+16, r23	; 0x10
    1340:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    1342:	7d 85       	ldd	r23, Y+13	; 0x0d
    1344:	79 8f       	std	Y+25, r23	; 0x19
    1346:	8e 85       	ldd	r24, Y+14	; 0x0e
    1348:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
    134a:	8d 82       	std	Y+5, r8	; 0x05
    134c:	9e 82       	std	Y+6, r9	; 0x06
    134e:	2a 2c       	mov	r2, r10
    1350:	3b 2c       	mov	r3, r11
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	69 0e       	add	r6, r25
    1356:	71 1c       	adc	r7, r1
    1358:	0e 5f       	subi	r16, 0xFE	; 254
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
    135c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    135e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1360:	31 96       	adiw	r30, 0x01	; 1
    1362:	fc 8f       	std	Y+28, r31	; 0x1c
    1364:	eb 8f       	std	Y+27, r30	; 0x1b
    1366:	34 97       	sbiw	r30, 0x04	; 4
    1368:	09 f0       	breq	.+2      	; 0x136c <determine_blobs+0x2a2>
    136a:	51 cf       	rjmp	.-350    	; 0x120e <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
    136c:	2f 81       	ldd	r18, Y+7	; 0x07
    136e:	38 85       	ldd	r19, Y+8	; 0x08
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	38 87       	std	Y+8, r19	; 0x08
    1376:	2f 83       	std	Y+7, r18	; 0x07
    1378:	69 01       	movw	r12, r18
    137a:	24 30       	cpi	r18, 0x04	; 4
    137c:	31 05       	cpc	r19, r1
    137e:	39 f1       	breq	.+78     	; 0x13ce <determine_blobs+0x304>
				for (int j = i; j < 4; j++) {
    1380:	34 e0       	ldi	r19, 0x04	; 4
    1382:	c3 16       	cp	r12, r19
    1384:	d1 04       	cpc	r13, r1
    1386:	94 f7       	brge	.-28     	; 0x136c <determine_blobs+0x2a2>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    1388:	86 01       	movw	r16, r12
    138a:	0f 5f       	subi	r16, 0xFF	; 255
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
    138e:	00 0f       	add	r16, r16
    1390:	11 1f       	adc	r17, r17
    1392:	0f 2e       	mov	r0, r31
    1394:	f6 e7       	ldi	r31, 0x76	; 118
    1396:	ef 2e       	mov	r14, r31
    1398:	f1 e0       	ldi	r31, 0x01	; 1
    139a:	ff 2e       	mov	r15, r31
    139c:	f0 2d       	mov	r31, r0
    139e:	e0 0e       	add	r14, r16
    13a0:	f1 1e       	adc	r15, r17
    13a2:	02 59       	subi	r16, 0x92	; 146
    13a4:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    13a6:	c6 01       	movw	r24, r12
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	ac 01       	movw	r20, r24
    13ae:	4a 58       	subi	r20, 0x8A	; 138
    13b0:	5e 4f       	sbci	r21, 0xFE	; 254
    13b2:	5a 87       	std	Y+10, r21	; 0x0a
    13b4:	49 87       	std	Y+9, r20	; 0x09
    13b6:	bc 01       	movw	r22, r24
    13b8:	62 59       	subi	r22, 0x92	; 146
    13ba:	7e 4f       	sbci	r23, 0xFE	; 254
    13bc:	7c 87       	std	Y+12, r23	; 0x0c
    13be:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    13c0:	cd 86       	std	Y+13, r12	; 0x0d
    13c2:	de 86       	std	Y+14, r13	; 0x0e
    13c4:	dc 8e       	std	Y+28, r13	; 0x1c
    13c6:	cb 8e       	std	Y+27, r12	; 0x1b
    13c8:	26 01       	movw	r4, r12
    13ca:	37 01       	movw	r6, r14
    13cc:	c7 cf       	rjmp	.-114    	; 0x135c <determine_blobs+0x292>
    13ce:	88 2d       	mov	r24, r8
    13d0:	99 2d       	mov	r25, r9
    13d2:	aa 2d       	mov	r26, r10
    13d4:	bb 2d       	mov	r27, r11
    13d6:	80 93 6a 01 	sts	0x016A, r24
    13da:	90 93 6b 01 	sts	0x016B, r25
    13de:	a0 93 6c 01 	sts	0x016C, r26
    13e2:	b0 93 6d 01 	sts	0x016D, r27
    13e6:	59 81       	ldd	r21, Y+1	; 0x01
    13e8:	4a 81       	ldd	r20, Y+2	; 0x02
    13ea:	3b 81       	ldd	r19, Y+3	; 0x03
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	85 2f       	mov	r24, r21
    13f0:	94 2f       	mov	r25, r20
    13f2:	a3 2f       	mov	r26, r19
    13f4:	b2 2f       	mov	r27, r18
    13f6:	80 93 66 01 	sts	0x0166, r24
    13fa:	90 93 67 01 	sts	0x0167, r25
    13fe:	a0 93 68 01 	sts	0x0168, r26
    1402:	b0 93 69 01 	sts	0x0169, r27
    1406:	7b 89       	ldd	r23, Y+19	; 0x13
    1408:	70 93 60 01 	sts	0x0160, r23
    140c:	8c 89       	ldd	r24, Y+20	; 0x14
    140e:	80 93 61 01 	sts	0x0161, r24
    1412:	99 89       	ldd	r25, Y+17	; 0x11
    1414:	90 93 5e 01 	sts	0x015E, r25
    1418:	ea 89       	ldd	r30, Y+18	; 0x12
    141a:	e0 93 5f 01 	sts	0x015F, r30
    141e:	5d 89       	ldd	r21, Y+21	; 0x15
    1420:	4e 89       	ldd	r20, Y+22	; 0x16
    1422:	3f 89       	ldd	r19, Y+23	; 0x17
    1424:	28 8d       	ldd	r18, Y+24	; 0x18
    1426:	85 2f       	mov	r24, r21
    1428:	94 2f       	mov	r25, r20
    142a:	a3 2f       	mov	r26, r19
    142c:	b2 2f       	mov	r27, r18
    142e:	80 93 62 01 	sts	0x0162, r24
    1432:	90 93 63 01 	sts	0x0163, r25
    1436:	a0 93 64 01 	sts	0x0164, r26
    143a:	b0 93 65 01 	sts	0x0165, r27
    143e:	5d 81       	ldd	r21, Y+5	; 0x05
    1440:	4e 81       	ldd	r20, Y+6	; 0x06
    1442:	85 2f       	mov	r24, r21
    1444:	94 2f       	mov	r25, r20
    1446:	a2 2d       	mov	r26, r2
    1448:	b3 2d       	mov	r27, r3
    144a:	80 93 04 01 	sts	0x0104, r24
    144e:	90 93 05 01 	sts	0x0105, r25
    1452:	a0 93 06 01 	sts	0x0106, r26
    1456:	b0 93 07 01 	sts	0x0107, r27
    145a:	f9 8d       	ldd	r31, Y+25	; 0x19
    145c:	f0 93 5c 01 	sts	0x015C, r31
    1460:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1462:	20 93 5d 01 	sts	0x015D, r18
    1466:	3f 85       	ldd	r19, Y+15	; 0x0f
    1468:	30 93 5a 01 	sts	0x015A, r19
    146c:	48 89       	ldd	r20, Y+16	; 0x10
    146e:	40 93 5b 01 	sts	0x015B, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
    1472:	80 91 60 01 	lds	r24, 0x0160
    1476:	90 91 61 01 	lds	r25, 0x0161
    147a:	20 91 5c 01 	lds	r18, 0x015C
    147e:	30 91 5d 01 	lds	r19, 0x015D
    1482:	82 17       	cp	r24, r18
    1484:	93 07       	cpc	r25, r19
    1486:	19 f5       	brne	.+70     	; 0x14ce <determine_blobs+0x404>
				top = far1;
    1488:	90 93 9d 01 	sts	0x019D, r25
    148c:	80 93 9c 01 	sts	0x019C, r24
				bottom = far2;
    1490:	40 91 5e 01 	lds	r20, 0x015E
    1494:	50 91 5f 01 	lds	r21, 0x015F
    1498:	50 93 9b 01 	sts	0x019B, r21
    149c:	40 93 9a 01 	sts	0x019A, r20
				right = close2;
    14a0:	20 91 5a 01 	lds	r18, 0x015A
    14a4:	30 91 5b 01 	lds	r19, 0x015B
    14a8:	30 93 97 01 	sts	0x0197, r19
    14ac:	20 93 96 01 	sts	0x0196, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
    14b0:	69 e0       	ldi	r22, 0x09	; 9
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	fb 01       	movw	r30, r22
    14b6:	e8 1b       	sub	r30, r24
    14b8:	f9 0b       	sbc	r31, r25
    14ba:	cf 01       	movw	r24, r30
    14bc:	84 1b       	sub	r24, r20
    14be:	95 0b       	sbc	r25, r21
    14c0:	82 1b       	sub	r24, r18
    14c2:	93 0b       	sbc	r25, r19
    14c4:	90 93 99 01 	sts	0x0199, r25
    14c8:	80 93 98 01 	sts	0x0198, r24
    14cc:	66 c0       	rjmp	.+204    	; 0x159a <determine_blobs+0x4d0>
			}
			else if (far1 == close2) {
    14ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    14d0:	58 89       	ldd	r21, Y+16	; 0x10
    14d2:	84 17       	cp	r24, r20
    14d4:	95 07       	cpc	r25, r21
    14d6:	f9 f4       	brne	.+62     	; 0x1516 <determine_blobs+0x44c>
				top = far1;
    14d8:	90 93 9d 01 	sts	0x019D, r25
    14dc:	80 93 9c 01 	sts	0x019C, r24
				bottom = far2;
    14e0:	40 91 5e 01 	lds	r20, 0x015E
    14e4:	50 91 5f 01 	lds	r21, 0x015F
    14e8:	50 93 9b 01 	sts	0x019B, r21
    14ec:	40 93 9a 01 	sts	0x019A, r20
				right = close1;
    14f0:	30 93 97 01 	sts	0x0197, r19
    14f4:	20 93 96 01 	sts	0x0196, r18
				left = 9 - top - bottom - right;
    14f8:	69 e0       	ldi	r22, 0x09	; 9
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	fb 01       	movw	r30, r22
    14fe:	e8 1b       	sub	r30, r24
    1500:	f9 0b       	sbc	r31, r25
    1502:	cf 01       	movw	r24, r30
    1504:	84 1b       	sub	r24, r20
    1506:	95 0b       	sbc	r25, r21
    1508:	82 1b       	sub	r24, r18
    150a:	93 0b       	sbc	r25, r19
    150c:	90 93 99 01 	sts	0x0199, r25
    1510:	80 93 98 01 	sts	0x0198, r24
    1514:	42 c0       	rjmp	.+132    	; 0x159a <determine_blobs+0x4d0>
			}
			else if (far2 == close1) {
    1516:	40 91 5e 01 	lds	r20, 0x015E
    151a:	50 91 5f 01 	lds	r21, 0x015F
    151e:	24 17       	cp	r18, r20
    1520:	35 07       	cpc	r19, r21
    1522:	01 f5       	brne	.+64     	; 0x1564 <determine_blobs+0x49a>
				top = far2;
    1524:	30 93 9d 01 	sts	0x019D, r19
    1528:	20 93 9c 01 	sts	0x019C, r18
				bottom = far1;
    152c:	90 93 9b 01 	sts	0x019B, r25
    1530:	80 93 9a 01 	sts	0x019A, r24
				right = close2;
    1534:	4f 85       	ldd	r20, Y+15	; 0x0f
    1536:	58 89       	ldd	r21, Y+16	; 0x10
    1538:	50 93 97 01 	sts	0x0197, r21
    153c:	40 93 96 01 	sts	0x0196, r20
				left = 9 - top - bottom - right;
    1540:	49 e0       	ldi	r20, 0x09	; 9
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	ba 01       	movw	r22, r20
    1546:	62 1b       	sub	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	fb 01       	movw	r30, r22
    154c:	e8 1b       	sub	r30, r24
    154e:	f9 0b       	sbc	r31, r25
    1550:	cf 01       	movw	r24, r30
    1552:	2f 85       	ldd	r18, Y+15	; 0x0f
    1554:	38 89       	ldd	r19, Y+16	; 0x10
    1556:	82 1b       	sub	r24, r18
    1558:	93 0b       	sbc	r25, r19
    155a:	90 93 99 01 	sts	0x0199, r25
    155e:	80 93 98 01 	sts	0x0198, r24
    1562:	1b c0       	rjmp	.+54     	; 0x159a <determine_blobs+0x4d0>
			}
			else {
				top = far2;
    1564:	50 93 9d 01 	sts	0x019D, r21
    1568:	40 93 9c 01 	sts	0x019C, r20
				bottom = far1;
    156c:	90 93 9b 01 	sts	0x019B, r25
    1570:	80 93 9a 01 	sts	0x019A, r24
				right = close1;
    1574:	30 93 97 01 	sts	0x0197, r19
    1578:	20 93 96 01 	sts	0x0196, r18
				left = 9 - top - bottom - right;
    157c:	69 e0       	ldi	r22, 0x09	; 9
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	fb 01       	movw	r30, r22
    1582:	e4 1b       	sub	r30, r20
    1584:	f5 0b       	sbc	r31, r21
    1586:	bf 01       	movw	r22, r30
    1588:	68 1b       	sub	r22, r24
    158a:	79 0b       	sbc	r23, r25
    158c:	cb 01       	movw	r24, r22
    158e:	82 1b       	sub	r24, r18
    1590:	93 0b       	sbc	r25, r19
    1592:	90 93 99 01 	sts	0x0199, r25
    1596:	80 93 98 01 	sts	0x0198, r24
			}
		}
	}
	return 1;
}
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	6c 96       	adiw	r28, 0x1c	; 28
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	6f 90       	pop	r6
    15c4:	5f 90       	pop	r5
    15c6:	4f 90       	pop	r4
    15c8:	3f 90       	pop	r3
    15ca:	2f 90       	pop	r2
    15cc:	08 95       	ret

000015ce <local_init>:
	
	return 1;
}

unsigned char local_init() {
	m_wii_open();
    15ce:	0e 94 59 12 	call	0x24b2	; 0x24b2 <m_wii_open>
	
	getData(x,y);
    15d2:	6e e6       	ldi	r22, 0x6E	; 110
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	86 e7       	ldi	r24, 0x76	; 118
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 24 08 	call	0x1048	; 0x1048 <getData>
	

	//Determine indices of all top, bottom, left, right points
	determine_blobs();
    15de:	0e 94 65 08 	call	0x10ca	; 0x10ca <determine_blobs>
	
	return 1;
}
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	08 95       	ret

000015e6 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    15e6:	2f 92       	push	r2
    15e8:	3f 92       	push	r3
    15ea:	4f 92       	push	r4
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	2d 97       	sbiw	r28, 0x0d	; 13
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	8c 01       	movw	r16, r24
	numlost = 0;
    161c:	10 92 59 01 	sts	0x0159, r1
    1620:	10 92 58 01 	sts	0x0158, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    1624:	0e 94 65 08 	call	0x10ca	; 0x10ca <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    1628:	e0 90 9c 01 	lds	r14, 0x019C
    162c:	f0 90 9d 01 	lds	r15, 0x019D
    1630:	f7 01       	movw	r30, r14
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	ea 58       	subi	r30, 0x8A	; 138
    1638:	fe 4f       	sbci	r31, 0xFE	; 254
    163a:	20 81       	ld	r18, Z
    163c:	31 81       	ldd	r19, Z+1	; 0x01
    163e:	3a 83       	std	Y+2, r19	; 0x02
    1640:	29 83       	std	Y+1, r18	; 0x01
    1642:	2f 3f       	cpi	r18, 0xFF	; 255
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	38 07       	cpc	r19, r24
    1648:	08 f0       	brcs	.+2      	; 0x164c <localize+0x66>
    164a:	ea c2       	rjmp	.+1492   	; 0x1c20 <localize+0x63a>
    164c:	a0 90 9a 01 	lds	r10, 0x019A
    1650:	b0 90 9b 01 	lds	r11, 0x019B
    1654:	f5 01       	movw	r30, r10
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ea 58       	subi	r30, 0x8A	; 138
    165c:	fe 4f       	sbci	r31, 0xFE	; 254
    165e:	c0 80       	ld	r12, Z
    1660:	d1 80       	ldd	r13, Z+1	; 0x01
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	c9 16       	cp	r12, r25
    1666:	93 e0       	ldi	r25, 0x03	; 3
    1668:	d9 06       	cpc	r13, r25
    166a:	08 f0       	brcs	.+2      	; 0x166e <localize+0x88>
    166c:	d9 c2       	rjmp	.+1458   	; 0x1c20 <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    166e:	b9 01       	movw	r22, r18
    1670:	6c 0d       	add	r22, r12
    1672:	7d 1d       	adc	r23, r13
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    1688:	20 91 0c 01 	lds	r18, 0x010C
    168c:	30 91 0d 01 	lds	r19, 0x010D
    1690:	40 91 0e 01 	lds	r20, 0x010E
    1694:	50 91 0f 01 	lds	r21, 0x010F
    1698:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    169c:	6d 83       	std	Y+5, r22	; 0x05
    169e:	7e 83       	std	Y+6, r23	; 0x06
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    16a4:	f7 01       	movw	r30, r14
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	e2 59       	subi	r30, 0x92	; 146
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	e0 80       	ld	r14, Z
    16b0:	f1 80       	ldd	r15, Z+1	; 0x01
    16b2:	f5 01       	movw	r30, r10
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	e2 59       	subi	r30, 0x92	; 146
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	a0 80       	ld	r10, Z
    16be:	b1 80       	ldd	r11, Z+1	; 0x01
    16c0:	b5 01       	movw	r22, r10
    16c2:	6e 0d       	add	r22, r14
    16c4:	7f 1d       	adc	r23, r15
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    16da:	20 91 08 01 	lds	r18, 0x0108
    16de:	30 91 09 01 	lds	r19, 0x0109
    16e2:	40 91 0a 01 	lds	r20, 0x010A
    16e6:	50 91 0b 01 	lds	r21, 0x010B
    16ea:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    16ee:	69 87       	std	Y+9, r22	; 0x09
    16f0:	7a 87       	std	Y+10, r23	; 0x0a
    16f2:	28 2e       	mov	r2, r24
    16f4:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    16f6:	b7 01       	movw	r22, r14
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1700:	2b 01       	movw	r4, r22
    1702:	3c 01       	movw	r6, r24
    1704:	b5 01       	movw	r22, r10
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	c3 01       	movw	r24, r6
    1714:	b2 01       	movw	r22, r4
    1716:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    171a:	4b 01       	movw	r8, r22
    171c:	5c 01       	movw	r10, r24
    171e:	e9 81       	ldd	r30, Y+1	; 0x01
    1720:	fa 81       	ldd	r31, Y+2	; 0x02
    1722:	bf 01       	movw	r22, r30
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    172c:	2b 01       	movw	r4, r22
    172e:	3c 01       	movw	r6, r24
    1730:	b6 01       	movw	r22, r12
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	c3 01       	movw	r24, r6
    1740:	b2 01       	movw	r22, r4
    1742:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    1746:	a5 01       	movw	r20, r10
    1748:	94 01       	movw	r18, r8
    174a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <atan2>
    174e:	4b 01       	movw	r8, r22
    1750:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    1752:	7d 81       	ldd	r23, Y+5	; 0x05
    1754:	6e 81       	ldd	r22, Y+6	; 0x06
    1756:	9f 81       	ldd	r25, Y+7	; 0x07
    1758:	88 85       	ldd	r24, Y+8	; 0x08
    175a:	27 2f       	mov	r18, r23
    175c:	36 2f       	mov	r19, r22
    175e:	49 2f       	mov	r20, r25
    1760:	58 2f       	mov	r21, r24
    1762:	b9 85       	ldd	r27, Y+9	; 0x09
    1764:	aa 85       	ldd	r26, Y+10	; 0x0a
    1766:	6b 2f       	mov	r22, r27
    1768:	7a 2f       	mov	r23, r26
    176a:	82 2d       	mov	r24, r2
    176c:	93 2d       	mov	r25, r3
    176e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <atan2>
    1772:	2b 01       	movw	r4, r22
    1774:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    1776:	7d 81       	ldd	r23, Y+5	; 0x05
    1778:	6e 81       	ldd	r22, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	27 2f       	mov	r18, r23
    1780:	36 2f       	mov	r19, r22
    1782:	49 2f       	mov	r20, r25
    1784:	58 2f       	mov	r21, r24
    1786:	67 2f       	mov	r22, r23
    1788:	73 2f       	mov	r23, r19
    178a:	89 2f       	mov	r24, r25
    178c:	95 2f       	mov	r25, r21
    178e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    1792:	6b 01       	movw	r12, r22
    1794:	7c 01       	movw	r14, r24
    1796:	79 85       	ldd	r23, Y+9	; 0x09
    1798:	6a 85       	ldd	r22, Y+10	; 0x0a
    179a:	27 2f       	mov	r18, r23
    179c:	36 2f       	mov	r19, r22
    179e:	42 2d       	mov	r20, r2
    17a0:	53 2d       	mov	r21, r3
    17a2:	67 2f       	mov	r22, r23
    17a4:	73 2f       	mov	r23, r19
    17a6:	82 2d       	mov	r24, r2
    17a8:	93 2d       	mov	r25, r3
    17aa:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	c7 01       	movw	r24, r14
    17b4:	b6 01       	movw	r22, r12
    17b6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
    17ba:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <sqrt>
    17be:	6b 01       	movw	r12, r22
    17c0:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	60 91 7e 01 	lds	r22, 0x017E
    17cc:	70 91 7f 01 	lds	r23, 0x017F
    17d0:	80 91 80 01 	lds	r24, 0x0180
    17d4:	90 91 81 01 	lds	r25, 0x0181
    17d8:	0e 94 23 14 	call	0x2846	; 0x2846 <__cmpsf2>
    17dc:	81 11       	cpse	r24, r1
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <localize+0x20a>
			ai1 = angle;
    17e0:	80 92 7e 01 	sts	0x017E, r8
    17e4:	90 92 7f 01 	sts	0x017F, r9
    17e8:	a0 92 80 01 	sts	0x0180, r10
    17ec:	b0 92 81 01 	sts	0x0181, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    17f0:	23 e3       	ldi	r18, 0x33	; 51
    17f2:	33 e3       	ldi	r19, 0x33	; 51
    17f4:	43 e7       	ldi	r20, 0x73	; 115
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	60 91 7e 01 	lds	r22, 0x017E
    17fc:	70 91 7f 01 	lds	r23, 0x017F
    1800:	80 91 80 01 	lds	r24, 0x0180
    1804:	90 91 81 01 	lds	r25, 0x0181
    1808:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    180c:	4b 01       	movw	r8, r22
    180e:	5c 01       	movw	r10, r24
    1810:	20 ed       	ldi	r18, 0xD0	; 208
    1812:	3c ec       	ldi	r19, 0xCC	; 204
    1814:	4c e4       	ldi	r20, 0x4C	; 76
    1816:	5d e3       	ldi	r21, 0x3D	; 61
    1818:	60 91 8a 01 	lds	r22, 0x018A
    181c:	70 91 8b 01 	lds	r23, 0x018B
    1820:	80 91 8c 01 	lds	r24, 0x018C
    1824:	90 91 8d 01 	lds	r25, 0x018D
    1828:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	c5 01       	movw	r24, r10
    1832:	b4 01       	movw	r22, r8
    1834:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	44 e3       	ldi	r20, 0x34	; 52
    183e:	53 e4       	ldi	r21, 0x43	; 67
    1840:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    1844:	23 ec       	ldi	r18, 0xC3	; 195
    1846:	35 ef       	ldi	r19, 0xF5	; 245
    1848:	48 e4       	ldi	r20, 0x48	; 72
    184a:	50 e4       	ldi	r21, 0x40	; 64
    184c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
    1850:	86 2e       	mov	r8, r22
    1852:	97 2e       	mov	r9, r23
    1854:	a8 2e       	mov	r10, r24
    1856:	b9 2e       	mov	r11, r25
    1858:	f8 01       	movw	r30, r16
    185a:	80 86       	std	Z+8, r8	; 0x08
    185c:	91 86       	std	Z+9, r9	; 0x09
    185e:	a2 86       	std	Z+10, r10	; 0x0a
    1860:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1862:	23 ec       	ldi	r18, 0xC3	; 195
    1864:	35 ef       	ldi	r19, 0xF5	; 245
    1866:	48 e4       	ldi	r20, 0x48	; 72
    1868:	50 e4       	ldi	r21, 0x40	; 64
    186a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	44 e3       	ldi	r20, 0x34	; 52
    1874:	53 e4       	ldi	r21, 0x43	; 67
    1876:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
    187a:	9b 01       	movw	r18, r22
    187c:	ac 01       	movw	r20, r24
    187e:	62 e5       	ldi	r22, 0x52	; 82
    1880:	78 eb       	ldi	r23, 0xB8	; 184
    1882:	86 e9       	ldi	r24, 0x96	; 150
    1884:	90 e4       	ldi	r25, 0x40	; 64
    1886:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    188a:	a3 01       	movw	r20, r6
    188c:	92 01       	movw	r18, r4
    188e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__subsf3>
    1892:	86 2e       	mov	r8, r22
    1894:	97 2e       	mov	r9, r23
    1896:	a8 2e       	mov	r10, r24
    1898:	b9 2e       	mov	r11, r25
    189a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <sin>
    189e:	9b 01       	movw	r18, r22
    18a0:	ac 01       	movw	r20, r24
    18a2:	c7 01       	movw	r24, r14
    18a4:	b6 01       	movw	r22, r12
    18a6:	90 58       	subi	r25, 0x80	; 128
    18a8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    18ac:	29 e3       	ldi	r18, 0x39	; 57
    18ae:	3e e8       	ldi	r19, 0x8E	; 142
    18b0:	43 ea       	ldi	r20, 0xA3	; 163
    18b2:	5e e3       	ldi	r21, 0x3E	; 62
    18b4:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    18b8:	69 83       	std	Y+1, r22	; 0x01
    18ba:	7b 87       	std	Y+11, r23	; 0x0b
    18bc:	8d 87       	std	Y+13, r24	; 0x0d
    18be:	9c 87       	std	Y+12, r25	; 0x0c
    18c0:	47 2f       	mov	r20, r23
    18c2:	38 2f       	mov	r19, r24
    18c4:	29 2f       	mov	r18, r25
    18c6:	86 2f       	mov	r24, r22
    18c8:	94 2f       	mov	r25, r20
    18ca:	a3 2f       	mov	r26, r19
    18cc:	b2 2f       	mov	r27, r18
    18ce:	80 93 92 01 	sts	0x0192, r24
    18d2:	90 93 93 01 	sts	0x0193, r25
    18d6:	a0 93 94 01 	sts	0x0194, r26
    18da:	b0 93 95 01 	sts	0x0195, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    18de:	68 2d       	mov	r22, r8
    18e0:	79 2d       	mov	r23, r9
    18e2:	8a 2d       	mov	r24, r10
    18e4:	9b 2d       	mov	r25, r11
    18e6:	0e 94 27 14 	call	0x284e	; 0x284e <cos>
    18ea:	a7 01       	movw	r20, r14
    18ec:	96 01       	movw	r18, r12
    18ee:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    18f2:	29 e8       	ldi	r18, 0x89	; 137
    18f4:	3a ed       	ldi	r19, 0xDA	; 218
    18f6:	45 e9       	ldi	r20, 0x95	; 149
    18f8:	5e e3       	ldi	r21, 0x3E	; 62
    18fa:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    18fe:	86 2e       	mov	r8, r22
    1900:	97 2e       	mov	r9, r23
    1902:	a8 2e       	mov	r10, r24
    1904:	b9 2e       	mov	r11, r25
    1906:	86 2f       	mov	r24, r22
    1908:	99 2d       	mov	r25, r9
    190a:	aa 2d       	mov	r26, r10
    190c:	bb 2d       	mov	r27, r11
    190e:	80 93 8e 01 	sts	0x018E, r24
    1912:	90 93 8f 01 	sts	0x018F, r25
    1916:	a0 93 90 01 	sts	0x0190, r26
    191a:	b0 93 91 01 	sts	0x0191, r27
		
		if (xi1 == 0 && yi1 == 0) {
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	60 91 86 01 	lds	r22, 0x0186
    1928:	70 91 87 01 	lds	r23, 0x0187
    192c:	80 91 88 01 	lds	r24, 0x0188
    1930:	90 91 89 01 	lds	r25, 0x0189
    1934:	0e 94 23 14 	call	0x2846	; 0x2846 <__cmpsf2>
    1938:	81 11       	cpse	r24, r1
    193a:	2b c0       	rjmp	.+86     	; 0x1992 <localize+0x3ac>
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	a9 01       	movw	r20, r18
    1942:	60 91 82 01 	lds	r22, 0x0182
    1946:	70 91 83 01 	lds	r23, 0x0183
    194a:	80 91 84 01 	lds	r24, 0x0184
    194e:	90 91 85 01 	lds	r25, 0x0185
    1952:	0e 94 23 14 	call	0x2846	; 0x2846 <__cmpsf2>
    1956:	81 11       	cpse	r24, r1
    1958:	1c c0       	rjmp	.+56     	; 0x1992 <localize+0x3ac>
			xi1 = xi;
    195a:	59 81       	ldd	r21, Y+1	; 0x01
    195c:	4b 85       	ldd	r20, Y+11	; 0x0b
    195e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1960:	2c 85       	ldd	r18, Y+12	; 0x0c
    1962:	85 2f       	mov	r24, r21
    1964:	94 2f       	mov	r25, r20
    1966:	a3 2f       	mov	r26, r19
    1968:	b2 2f       	mov	r27, r18
    196a:	80 93 86 01 	sts	0x0186, r24
    196e:	90 93 87 01 	sts	0x0187, r25
    1972:	a0 93 88 01 	sts	0x0188, r26
    1976:	b0 93 89 01 	sts	0x0189, r27
			yi1 = yi;
    197a:	88 2d       	mov	r24, r8
    197c:	99 2d       	mov	r25, r9
    197e:	aa 2d       	mov	r26, r10
    1980:	bb 2d       	mov	r27, r11
    1982:	80 93 82 01 	sts	0x0182, r24
    1986:	90 93 83 01 	sts	0x0183, r25
    198a:	a0 93 84 01 	sts	0x0184, r26
    198e:	b0 93 85 01 	sts	0x0185, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    1992:	23 e3       	ldi	r18, 0x33	; 51
    1994:	33 e3       	ldi	r19, 0x33	; 51
    1996:	43 e7       	ldi	r20, 0x73	; 115
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	60 91 86 01 	lds	r22, 0x0186
    199e:	70 91 87 01 	lds	r23, 0x0187
    19a2:	80 91 88 01 	lds	r24, 0x0188
    19a6:	90 91 89 01 	lds	r25, 0x0189
    19aa:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    19ae:	4b 01       	movw	r8, r22
    19b0:	5c 01       	movw	r10, r24
    19b2:	20 ed       	ldi	r18, 0xD0	; 208
    19b4:	3c ec       	ldi	r19, 0xCC	; 204
    19b6:	4c e4       	ldi	r20, 0x4C	; 76
    19b8:	5d e3       	ldi	r21, 0x3D	; 61
    19ba:	b9 81       	ldd	r27, Y+1	; 0x01
    19bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    19be:	fd 85       	ldd	r31, Y+13	; 0x0d
    19c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    19c2:	6b 2f       	mov	r22, r27
    19c4:	7a 2f       	mov	r23, r26
    19c6:	8f 2f       	mov	r24, r31
    19c8:	9e 2f       	mov	r25, r30
    19ca:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	c5 01       	movw	r24, r10
    19d4:	b4 01       	movw	r22, r8
    19d6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
    19da:	f8 01       	movw	r30, r16
    19dc:	60 83       	st	Z, r22
    19de:	71 83       	std	Z+1, r23	; 0x01
    19e0:	82 83       	std	Z+2, r24	; 0x02
    19e2:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    19e4:	80 90 8e 01 	lds	r8, 0x018E
    19e8:	90 90 8f 01 	lds	r9, 0x018F
    19ec:	a0 90 90 01 	lds	r10, 0x0190
    19f0:	b0 90 91 01 	lds	r11, 0x0191
    19f4:	23 e3       	ldi	r18, 0x33	; 51
    19f6:	33 e3       	ldi	r19, 0x33	; 51
    19f8:	43 e7       	ldi	r20, 0x73	; 115
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	60 91 82 01 	lds	r22, 0x0182
    1a00:	70 91 83 01 	lds	r23, 0x0183
    1a04:	80 91 84 01 	lds	r24, 0x0184
    1a08:	90 91 85 01 	lds	r25, 0x0185
    1a0c:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    1a10:	69 83       	std	Y+1, r22	; 0x01
    1a12:	7a 83       	std	Y+2, r23	; 0x02
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	20 ed       	ldi	r18, 0xD0	; 208
    1a1a:	3c ec       	ldi	r19, 0xCC	; 204
    1a1c:	4c e4       	ldi	r20, 0x4C	; 76
    1a1e:	5d e3       	ldi	r21, 0x3D	; 61
    1a20:	c5 01       	movw	r24, r10
    1a22:	b4 01       	movw	r22, r8
    1a24:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	69 81       	ldd	r22, Y+1	; 0x01
    1a2e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__addsf3>
    1a38:	f8 01       	movw	r30, r16
    1a3a:	64 83       	std	Z+4, r22	; 0x04
    1a3c:	75 83       	std	Z+5, r23	; 0x05
    1a3e:	86 83       	std	Z+6, r24	; 0x06
    1a40:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1a42:	80 91 9c 01 	lds	r24, 0x019C
    1a46:	90 91 9d 01 	lds	r25, 0x019D
    1a4a:	9c 01       	movw	r18, r24
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	3a 83       	std	Y+2, r19	; 0x02
    1a52:	29 83       	std	Y+1, r18	; 0x01
    1a54:	f9 01       	movw	r30, r18
    1a56:	ea 58       	subi	r30, 0x8A	; 138
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1a66:	f8 01       	movw	r30, r16
    1a68:	64 87       	std	Z+12, r22	; 0x0c
    1a6a:	75 87       	std	Z+13, r23	; 0x0d
    1a6c:	86 87       	std	Z+14, r24	; 0x0e
    1a6e:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1a70:	e9 81       	ldd	r30, Y+1	; 0x01
    1a72:	fa 81       	ldd	r31, Y+2	; 0x02
    1a74:	e2 59       	subi	r30, 0x92	; 146
    1a76:	fe 4f       	sbci	r31, 0xFE	; 254
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1a84:	f8 01       	movw	r30, r16
    1a86:	60 8b       	std	Z+16, r22	; 0x10
    1a88:	71 8b       	std	Z+17, r23	; 0x11
    1a8a:	82 8b       	std	Z+18, r24	; 0x12
    1a8c:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1a8e:	80 91 9a 01 	lds	r24, 0x019A
    1a92:	90 91 9b 01 	lds	r25, 0x019B
    1a96:	9c 01       	movw	r18, r24
    1a98:	22 0f       	add	r18, r18
    1a9a:	33 1f       	adc	r19, r19
    1a9c:	3a 83       	std	Y+2, r19	; 0x02
    1a9e:	29 83       	std	Y+1, r18	; 0x01
    1aa0:	f9 01       	movw	r30, r18
    1aa2:	ea 58       	subi	r30, 0x8A	; 138
    1aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	64 8b       	std	Z+20, r22	; 0x14
    1ab6:	75 8b       	std	Z+21, r23	; 0x15
    1ab8:	86 8b       	std	Z+22, r24	; 0x16
    1aba:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1abc:	e9 81       	ldd	r30, Y+1	; 0x01
    1abe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac0:	e2 59       	subi	r30, 0x92	; 146
    1ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	60 8f       	std	Z+24, r22	; 0x18
    1ad4:	71 8f       	std	Z+25, r23	; 0x19
    1ad6:	82 8f       	std	Z+26, r24	; 0x1a
    1ad8:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1ada:	80 91 96 01 	lds	r24, 0x0196
    1ade:	90 91 97 01 	lds	r25, 0x0197
    1ae2:	9c 01       	movw	r18, r24
    1ae4:	22 0f       	add	r18, r18
    1ae6:	33 1f       	adc	r19, r19
    1ae8:	3a 83       	std	Y+2, r19	; 0x02
    1aea:	29 83       	std	Y+1, r18	; 0x01
    1aec:	f9 01       	movw	r30, r18
    1aee:	ea 58       	subi	r30, 0x8A	; 138
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1afe:	f8 01       	movw	r30, r16
    1b00:	64 8f       	std	Z+28, r22	; 0x1c
    1b02:	75 8f       	std	Z+29, r23	; 0x1d
    1b04:	86 8f       	std	Z+30, r24	; 0x1e
    1b06:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	e2 59       	subi	r30, 0x92	; 146
    1b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	60 a3       	std	Z+32, r22	; 0x20
    1b20:	71 a3       	std	Z+33, r23	; 0x21
    1b22:	82 a3       	std	Z+34, r24	; 0x22
    1b24:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1b26:	80 91 98 01 	lds	r24, 0x0198
    1b2a:	90 91 99 01 	lds	r25, 0x0199
    1b2e:	9c 01       	movw	r18, r24
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	3a 83       	std	Y+2, r19	; 0x02
    1b36:	29 83       	std	Y+1, r18	; 0x01
    1b38:	f9 01       	movw	r30, r18
    1b3a:	ea 58       	subi	r30, 0x8A	; 138
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	64 a3       	std	Z+36, r22	; 0x24
    1b4e:	75 a3       	std	Z+37, r23	; 0x25
    1b50:	86 a3       	std	Z+38, r24	; 0x26
    1b52:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	e2 59       	subi	r30, 0x92	; 146
    1b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__floatunsisf>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	60 a7       	std	Z+40, r22	; 0x28
    1b6c:	71 a7       	std	Z+41, r23	; 0x29
    1b6e:	82 a7       	std	Z+42, r24	; 0x2a
    1b70:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	44 e3       	ldi	r20, 0x34	; 52
    1b78:	53 e4       	ldi	r21, 0x43	; 67
    1b7a:	c3 01       	movw	r24, r6
    1b7c:	b2 01       	movw	r22, r4
    1b7e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__mulsf3>
    1b82:	23 ec       	ldi	r18, 0xC3	; 195
    1b84:	35 ef       	ldi	r19, 0xF5	; 245
    1b86:	48 e4       	ldi	r20, 0x48	; 72
    1b88:	50 e4       	ldi	r21, 0x40	; 64
    1b8a:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divsf3>
    1b8e:	f8 01       	movw	r30, r16
    1b90:	64 a7       	std	Z+44, r22	; 0x2c
    1b92:	75 a7       	std	Z+45, r23	; 0x2d
    1b94:	86 a7       	std	Z+46, r24	; 0x2e
    1b96:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    1b98:	5d 81       	ldd	r21, Y+5	; 0x05
    1b9a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9e:	28 85       	ldd	r18, Y+8	; 0x08
    1ba0:	85 2f       	mov	r24, r21
    1ba2:	94 2f       	mov	r25, r20
    1ba4:	a3 2f       	mov	r26, r19
    1ba6:	b2 2f       	mov	r27, r18
    1ba8:	80 ab       	std	Z+48, r24	; 0x30
    1baa:	91 ab       	std	Z+49, r25	; 0x31
    1bac:	a2 ab       	std	Z+50, r26	; 0x32
    1bae:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1bb0:	59 85       	ldd	r21, Y+9	; 0x09
    1bb2:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bb4:	85 2f       	mov	r24, r21
    1bb6:	94 2f       	mov	r25, r20
    1bb8:	a2 2d       	mov	r26, r2
    1bba:	b3 2d       	mov	r27, r3
    1bbc:	84 ab       	std	Z+52, r24	; 0x34
    1bbe:	95 ab       	std	Z+53, r25	; 0x35
    1bc0:	a6 ab       	std	Z+54, r26	; 0x36
    1bc2:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    1bc4:	c0 ae       	std	Z+56, r12	; 0x38
    1bc6:	d1 ae       	std	Z+57, r13	; 0x39
    1bc8:	e2 ae       	std	Z+58, r14	; 0x3a
    1bca:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1bcc:	80 91 92 01 	lds	r24, 0x0192
    1bd0:	90 91 93 01 	lds	r25, 0x0193
    1bd4:	a0 91 94 01 	lds	r26, 0x0194
    1bd8:	b0 91 95 01 	lds	r27, 0x0195
    1bdc:	80 93 86 01 	sts	0x0186, r24
    1be0:	90 93 87 01 	sts	0x0187, r25
    1be4:	a0 93 88 01 	sts	0x0188, r26
    1be8:	b0 93 89 01 	sts	0x0189, r27
		yi1 = yi;
    1bec:	80 92 82 01 	sts	0x0182, r8
    1bf0:	90 92 83 01 	sts	0x0183, r9
    1bf4:	a0 92 84 01 	sts	0x0184, r10
    1bf8:	b0 92 85 01 	sts	0x0185, r11
		ai1 = ai;
    1bfc:	80 91 8a 01 	lds	r24, 0x018A
    1c00:	90 91 8b 01 	lds	r25, 0x018B
    1c04:	a0 91 8c 01 	lds	r26, 0x018C
    1c08:	b0 91 8d 01 	lds	r27, 0x018D
    1c0c:	80 93 7e 01 	sts	0x017E, r24
    1c10:	90 93 7f 01 	sts	0x017F, r25
    1c14:	a0 93 80 01 	sts	0x0180, r26
    1c18:	b0 93 81 01 	sts	0x0181, r27
		
		return 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	00 c0       	rjmp	.+0      	; 0x1c20 <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1c20:	2d 96       	adiw	r28, 0x0d	; 13
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	4f 90       	pop	r4
    1c4c:	3f 90       	pop	r3
    1c4e:	2f 90       	pop	r2
    1c50:	08 95       	ret

00001c52 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	18 2f       	mov	r17, r24
    1c5a:	d6 2f       	mov	r29, r22
    1c5c:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1c5e:	0e 94 13 08 	call	0x1026	; 0x1026 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1c62:	94 ea       	ldi	r25, 0xA4	; 164
    1c64:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c68:	ec eb       	ldi	r30, 0xBC	; 188
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	90 81       	ld	r25, Z
    1c6e:	99 23       	and	r25, r25
    1c70:	ec f7       	brge	.-6      	; 0x1c6c <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1c72:	90 e5       	ldi	r25, 0x50	; 80
    1c74:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c78:	94 e8       	ldi	r25, 0x84	; 132
    1c7a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c7e:	ec eb       	ldi	r30, 0xBC	; 188
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	90 81       	ld	r25, Z
    1c84:	99 23       	and	r25, r25
    1c86:	ec f7       	brge	.-6      	; 0x1c82 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1c88:	90 91 b9 00 	lds	r25, 0x00B9
    1c8c:	98 7f       	andi	r25, 0xF8	; 248
    1c8e:	90 32       	cpi	r25, 0x20	; 32
    1c90:	29 f4       	brne	.+10     	; 0x1c9c <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1c92:	84 e9       	ldi	r24, 0x94	; 148
    1c94:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	2d c0       	rjmp	.+90     	; 0x1cf6 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ca2:	84 e8       	ldi	r24, 0x84	; 132
    1ca4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ca8:	ec eb       	ldi	r30, 0xBC	; 188
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	90 81       	ld	r25, Z
    1cae:	99 23       	and	r25, r25
    1cb0:	ec f7       	brge	.-6      	; 0x1cac <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1cb2:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cb6:	84 e8       	ldi	r24, 0x84	; 132
    1cb8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1cbc:	ec eb       	ldi	r30, 0xBC	; 188
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 23       	and	r24, r24
    1cc4:	ec f7       	brge	.-6      	; 0x1cc0 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1cc6:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cca:	84 e8       	ldi	r24, 0x84	; 132
    1ccc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1cd0:	ec eb       	ldi	r30, 0xBC	; 188
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 23       	and	r24, r24
    1cd8:	ec f7       	brge	.-6      	; 0x1cd4 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1cda:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cde:	84 e8       	ldi	r24, 0x84	; 132
    1ce0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ce4:	ec eb       	ldi	r30, 0xBC	; 188
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	88 23       	and	r24, r24
    1cec:	ec f7       	brge	.-6      	; 0x1ce8 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1cee:	84 e9       	ldi	r24, 0x94	; 148
    1cf0:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
}
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	08 95       	ret

00001cfe <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d02:	24 ea       	ldi	r18, 0xA4	; 164
    1d04:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1d08:	ec eb       	ldi	r30, 0xBC	; 188
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	20 81       	ld	r18, Z
    1d0e:	22 23       	and	r18, r18
    1d10:	ec f7       	brge	.-6      	; 0x1d0c <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1d12:	21 e5       	ldi	r18, 0x51	; 81
    1d14:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d18:	24 e8       	ldi	r18, 0x84	; 132
    1d1a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1d1e:	ec eb       	ldi	r30, 0xBC	; 188
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	20 81       	ld	r18, Z
    1d24:	22 23       	and	r18, r18
    1d26:	ec f7       	brge	.-6      	; 0x1d22 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1d28:	20 91 b9 00 	lds	r18, 0x00B9
    1d2c:	28 7f       	andi	r18, 0xF8	; 248
    1d2e:	28 34       	cpi	r18, 0x48	; 72
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d32:	84 e9       	ldi	r24, 0x94	; 148
    1d34:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	3f c0       	rjmp	.+126    	; 0x1dba <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d3c:	24 ec       	ldi	r18, 0xC4	; 196
    1d3e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d42:	ec eb       	ldi	r30, 0xBC	; 188
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	20 81       	ld	r18, Z
    1d48:	22 23       	and	r18, r18
    1d4a:	ec f7       	brge	.-6      	; 0x1d46 <m_rf_read+0x48>
	bytes = TWDR;
    1d4c:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1d50:	46 13       	cpse	r20, r22
    1d52:	09 c0       	rjmp	.+18     	; 0x1d66 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	41 50       	subi	r20, 0x01	; 1
    1d58:	51 09       	sbc	r21, r1
    1d5a:	14 16       	cp	r1, r20
    1d5c:	15 06       	cpc	r1, r21
    1d5e:	44 f0       	brlt	.+16     	; 0x1d70 <m_rf_read+0x72>
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	18 c0       	rjmp	.+48     	; 0x1d96 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d66:	84 e9       	ldi	r24, 0x94	; 148
    1d68:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	25 c0       	rjmp	.+74     	; 0x1dba <m_rf_read+0xbc>
    1d70:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d76:	ec eb       	ldi	r30, 0xBC	; 188
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1d7c:	cb eb       	ldi	r28, 0xBB	; 187
    1d7e:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d80:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d82:	60 81       	ld	r22, Z
    1d84:	66 23       	and	r22, r22
    1d86:	ec f7       	brge	.-6      	; 0x1d82 <m_rf_read+0x84>
		buffer[i] = TWDR;
    1d88:	68 81       	ld	r22, Y
    1d8a:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	24 17       	cp	r18, r20
    1d92:	35 07       	cpc	r19, r21
    1d94:	ac f3       	brlt	.-22     	; 0x1d80 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1d96:	24 e8       	ldi	r18, 0x84	; 132
    1d98:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d9c:	ec eb       	ldi	r30, 0xBC	; 188
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	20 81       	ld	r18, Z
    1da2:	22 23       	and	r18, r18
    1da4:	ec f7       	brge	.-6      	; 0x1da0 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    1da6:	20 91 bb 00 	lds	r18, 0x00BB
    1daa:	fc 01       	movw	r30, r24
    1dac:	e4 0f       	add	r30, r20
    1dae:	f5 1f       	adc	r31, r21
    1db0:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1db2:	84 e9       	ldi	r24, 0x94	; 148
    1db4:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
}
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1dc0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1dc2:	f8 94       	cli
	if (!usb_configuration) {
    1dc4:	80 91 b7 01 	lds	r24, 0x01B7
    1dc8:	81 11       	cpse	r24, r1
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <m_usb_rx_char+0x12>
		SREG = intr_state;
    1dcc:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    1dd8:	80 91 e8 00 	lds	r24, 0x00E8
    1ddc:	85 fd       	sbrc	r24, 5
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    1de0:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    1de6:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    1dea:	20 91 e8 00 	lds	r18, 0x00E8
    1dee:	25 fd       	sbrc	r18, 5
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <m_usb_rx_char+0x38>
    1df2:	2b e6       	ldi	r18, 0x6B	; 107
    1df4:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    1df8:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    1dfa:	08 95       	ret

00001dfc <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1dfc:	80 91 b7 01 	lds	r24, 0x01B7
    1e00:	88 23       	and	r24, r24
    1e02:	89 f0       	breq	.+34     	; 0x1e26 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    1e04:	2f b7       	in	r18, 0x3f	; 63
		cli();
    1e06:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    1e0e:	80 91 e8 00 	lds	r24, 0x00E8
    1e12:	85 ff       	sbrs	r24, 5
    1e14:	07 c0       	rjmp	.+14     	; 0x1e24 <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    1e16:	e8 ee       	ldi	r30, 0xE8	; 232
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	9b e6       	ldi	r25, 0x6B	; 107
    1e1c:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    1e1e:	80 81       	ld	r24, Z
    1e20:	85 fd       	sbrc	r24, 5
    1e22:	fc cf       	rjmp	.-8      	; 0x1e1c <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    1e24:	2f bf       	out	0x3f, r18	; 63
    1e26:	08 95       	ret

00001e28 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1e2c:	90 91 b7 01 	lds	r25, 0x01B7
    1e30:	99 23       	and	r25, r25
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <m_usb_tx_char+0xe>
    1e34:	4d c0       	rjmp	.+154    	; 0x1ed0 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1e36:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e38:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1e3a:	24 e0       	ldi	r18, 0x04	; 4
    1e3c:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1e40:	20 91 b9 01 	lds	r18, 0x01B9
    1e44:	22 23       	and	r18, r18
    1e46:	49 f0       	breq	.+18     	; 0x1e5a <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1e48:	20 91 e8 00 	lds	r18, 0x00E8
    1e4c:	25 fd       	sbrc	r18, 5
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1e50:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	42 c0       	rjmp	.+132    	; 0x1eda <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    1e56:	10 92 b9 01 	sts	0x01B9, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1e5a:	30 91 e4 00 	lds	r19, 0x00E4
    1e5e:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1e60:	20 91 e8 00 	lds	r18, 0x00E8
    1e64:	25 fd       	sbrc	r18, 5
    1e66:	25 c0       	rjmp	.+74     	; 0x1eb2 <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1e68:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1e6a:	90 91 e4 00 	lds	r25, 0x00E4
    1e6e:	93 17       	cp	r25, r19
    1e70:	49 f0       	breq	.+18     	; 0x1e84 <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1e72:	90 91 b7 01 	lds	r25, 0x01B7
    1e76:	91 11       	cpse	r25, r1
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <m_usb_tx_char+0x70>
    1e7a:	2c c0       	rjmp	.+88     	; 0x1ed4 <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1e7c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1e7e:	98 81       	ld	r25, Y
    1e80:	93 13       	cpse	r25, r19
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	80 93 b9 01 	sts	0x01B9, r24
			return -1;
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	26 c0       	rjmp	.+76     	; 0x1eda <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1e8e:	90 91 b7 01 	lds	r25, 0x01B7
    1e92:	91 11       	cpse	r25, r1
    1e94:	08 c0       	rjmp	.+16     	; 0x1ea6 <m_usb_tx_char+0x7e>
    1e96:	20 c0       	rjmp	.+64     	; 0x1ed8 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1e98:	a9 ee       	ldi	r26, 0xE9	; 233
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1e9e:	e8 ee       	ldi	r30, 0xE8	; 232
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1ea2:	c4 ee       	ldi	r28, 0xE4	; 228
    1ea4:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    1ea6:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1ea8:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1eaa:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1eac:	20 81       	ld	r18, Z
    1eae:	25 ff       	sbrs	r18, 5
    1eb0:	e5 cf       	rjmp	.-54     	; 0x1e7c <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1eb2:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1eb6:	80 91 e8 00 	lds	r24, 0x00E8
    1eba:	85 fd       	sbrc	r24, 5
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <m_usb_tx_char+0x9c>
    1ebe:	8a e3       	ldi	r24, 0x3A	; 58
    1ec0:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1ec4:	85 e0       	ldi	r24, 0x05	; 5
    1ec6:	80 93 b6 01 	sts	0x01B6, r24
	SREG = intr_state;
    1eca:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	03 c0       	rjmp	.+6      	; 0x1eda <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <m_usb_tx_char+0xb2>
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1ee0:	1f 92       	push	r1
    1ee2:	0f 92       	push	r0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	8f 93       	push	r24
    1eec:	9f 93       	push	r25
    1eee:	ef 93       	push	r30
    1ef0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1ef2:	e1 ee       	ldi	r30, 0xE1	; 225
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
        UDINT = 0;
    1ef8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1efa:	83 ff       	sbrs	r24, 3
    1efc:	11 c0       	rjmp	.+34     	; 0x1f20 <__vector_10+0x40>
		UENUM = 0;
    1efe:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1f08:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1f0c:	92 e1       	ldi	r25, 0x12	; 18
    1f0e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1f12:	98 e0       	ldi	r25, 0x08	; 8
    1f14:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1f18:	10 92 b7 01 	sts	0x01B7, r1
		cdc_line_rtsdtr = 0;
    1f1c:	10 92 b8 01 	sts	0x01B8, r1
        }
	if (intbits & (1<<SOFI)) {
    1f20:	82 ff       	sbrs	r24, 2
    1f22:	13 c0       	rjmp	.+38     	; 0x1f4a <__vector_10+0x6a>
		if (usb_configuration) {
    1f24:	80 91 b7 01 	lds	r24, 0x01B7
    1f28:	88 23       	and	r24, r24
    1f2a:	79 f0       	breq	.+30     	; 0x1f4a <__vector_10+0x6a>
			t = transmit_flush_timer;
    1f2c:	80 91 b6 01 	lds	r24, 0x01B6
			if (t) {
    1f30:	88 23       	and	r24, r24
    1f32:	59 f0       	breq	.+22     	; 0x1f4a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1f34:	81 50       	subi	r24, 0x01	; 1
    1f36:	80 93 b6 01 	sts	0x01B6, r24
				if (!t) {
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	06 c0       	rjmp	.+12     	; 0x1f4a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1f44:	8a e3       	ldi	r24, 0x3A	; 58
    1f46:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	9f 91       	pop	r25
    1f50:	8f 91       	pop	r24
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	2f 93       	push	r18
    1f6c:	3f 93       	push	r19
    1f6e:	4f 93       	push	r20
    1f70:	5f 93       	push	r21
    1f72:	6f 93       	push	r22
    1f74:	7f 93       	push	r23
    1f76:	8f 93       	push	r24
    1f78:	9f 93       	push	r25
    1f7a:	af 93       	push	r26
    1f7c:	bf 93       	push	r27
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	ef 93       	push	r30
    1f84:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1f86:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1f8a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1f8e:	83 ff       	sbrs	r24, 3
    1f90:	51 c1       	rjmp	.+674    	; 0x2234 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    1f92:	e1 ef       	ldi	r30, 0xF1	; 241
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1f98:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1f9a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1f9c:	30 81       	ld	r19, Z
    1f9e:	93 2f       	mov	r25, r19
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	a2 2b       	or	r26, r18
    1fa6:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1fa8:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1faa:	60 81       	ld	r22, Z
    1fac:	96 2f       	mov	r25, r22
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	85 2b       	or	r24, r21
                wLength = UEDATX;
    1fb2:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    1fb4:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1fb6:	52 ef       	ldi	r21, 0xF2	; 242
    1fb8:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1fbc:	46 30       	cpi	r20, 0x06	; 6
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <__vector_11+0x66>
    1fc0:	5c c0       	rjmp	.+184    	; 0x207a <__vector_11+0x11e>
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1fc4:	81 e2       	ldi	r24, 0x21	; 33
    1fc6:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1fca:	3b c1       	rjmp	.+630    	; 0x2242 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1fcc:	c6 e0       	ldi	r28, 0x06	; 6
    1fce:	49 e7       	ldi	r20, 0x79	; 121
    1fd0:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1fd2:	fa 01       	movw	r30, r20
    1fd4:	65 91       	lpm	r22, Z+
    1fd6:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1fd8:	26 17       	cp	r18, r22
    1fda:	37 07       	cpc	r19, r23
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1fde:	49 5f       	subi	r20, 0xF9	; 249
    1fe0:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1fe2:	20 c0       	rjmp	.+64     	; 0x2024 <__vector_11+0xc8>
				}
				list += 2;
    1fe4:	fa 01       	movw	r30, r20
    1fe6:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1fe8:	65 91       	lpm	r22, Z+
    1fea:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1fec:	86 17       	cp	r24, r22
    1fee:	97 07       	cpc	r25, r23
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    1ff2:	49 5f       	subi	r20, 0xF9	; 249
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1ff6:	16 c0       	rjmp	.+44     	; 0x2024 <__vector_11+0xc8>
				}
				list += 2;
    1ff8:	fa 01       	movw	r30, r20
    1ffa:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1ffc:	85 91       	lpm	r24, Z+
    1ffe:	94 91       	lpm	r25, Z
    2000:	28 2f       	mov	r18, r24
    2002:	39 2f       	mov	r19, r25
				list += 2;
    2004:	fa 01       	movw	r30, r20
    2006:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2008:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    200a:	9b 2f       	mov	r25, r27
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2010:	8f 3f       	cpi	r24, 0xFF	; 255
    2012:	91 05       	cpc	r25, r1
    2014:	19 f0       	breq	.+6      	; 0x201c <__vector_11+0xc0>
    2016:	10 f0       	brcs	.+4      	; 0x201c <__vector_11+0xc0>
    2018:	8f ef       	ldi	r24, 0xFF	; 255
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	84 17       	cp	r24, r20
    201e:	28 f4       	brcc	.+10     	; 0x202a <__vector_11+0xce>
    2020:	48 2f       	mov	r20, r24
    2022:	03 c0       	rjmp	.+6      	; 0x202a <__vector_11+0xce>
    2024:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2026:	a9 f6       	brne	.-86     	; 0x1fd2 <__vector_11+0x76>
    2028:	cd cf       	rjmp	.-102    	; 0x1fc4 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    202a:	c8 ee       	ldi	r28, 0xE8	; 232
    202c:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    202e:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2030:	a1 ef       	ldi	r26, 0xF1	; 241
    2032:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2034:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2036:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2038:	98 2f       	mov	r25, r24
    203a:	95 70       	andi	r25, 0x05	; 5
    203c:	e1 f3       	breq	.-8      	; 0x2036 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    203e:	82 fd       	sbrc	r24, 2
    2040:	00 c1       	rjmp	.+512    	; 0x2242 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2042:	64 2f       	mov	r22, r20
    2044:	41 31       	cpi	r20, 0x11	; 17
    2046:	08 f0       	brcs	.+2      	; 0x204a <__vector_11+0xee>
    2048:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    204a:	66 23       	and	r22, r22
    204c:	09 f4       	brne	.+2      	; 0x2050 <__vector_11+0xf4>
    204e:	f6 c0       	rjmp	.+492    	; 0x223c <__vector_11+0x2e0>
    2050:	c9 01       	movw	r24, r18
    2052:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    2054:	fc 01       	movw	r30, r24
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	e4 91       	lpm	r30, Z
    205a:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    205c:	51 50       	subi	r21, 0x01	; 1
    205e:	d1 f7       	brne	.-12     	; 0x2054 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2060:	86 2f       	mov	r24, r22
    2062:	81 50       	subi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	28 0f       	add	r18, r24
    206a:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    206c:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    206e:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2070:	41 11       	cpse	r20, r1
    2072:	e1 cf       	rjmp	.-62     	; 0x2036 <__vector_11+0xda>
    2074:	60 31       	cpi	r22, 0x10	; 16
    2076:	f9 f2       	breq	.-66     	; 0x2036 <__vector_11+0xda>
    2078:	e4 c0       	rjmp	.+456    	; 0x2242 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    207a:	45 30       	cpi	r20, 0x05	; 5
    207c:	61 f4       	brne	.+24     	; 0x2096 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    207e:	8e ef       	ldi	r24, 0xFE	; 254
    2080:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2084:	e8 ee       	ldi	r30, 0xE8	; 232
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	80 ff       	sbrs	r24, 0
    208c:	fd cf       	rjmp	.-6      	; 0x2088 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    208e:	20 68       	ori	r18, 0x80	; 128
    2090:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2094:	d6 c0       	rjmp	.+428    	; 0x2242 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2096:	49 30       	cpi	r20, 0x09	; 9
    2098:	a1 f5       	brne	.+104    	; 0x2102 <__vector_11+0x1a6>
    209a:	71 11       	cpse	r23, r1
    209c:	5b c0       	rjmp	.+182    	; 0x2154 <__vector_11+0x1f8>
			usb_configuration = wValue;
    209e:	20 93 b7 01 	sts	0x01B7, r18
			cdc_line_rtsdtr = 0;
    20a2:	10 92 b8 01 	sts	0x01B8, r1
			transmit_flush_timer = 0;
    20a6:	10 92 b6 01 	sts	0x01B6, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    20aa:	8e ef       	ldi	r24, 0xFE	; 254
    20ac:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    20b0:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    20b2:	83 ea       	ldi	r24, 0xA3	; 163
    20b4:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    20b6:	c9 ee       	ldi	r28, 0xE9	; 233
    20b8:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    20ba:	ab ee       	ldi	r26, 0xEB	; 235
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    20be:	6c ee       	ldi	r22, 0xEC	; 236
    20c0:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    20c2:	4d ee       	ldi	r20, 0xED	; 237
    20c4:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    20c6:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    20c8:	9c 01       	movw	r18, r24
    20ca:	2f 5f       	subi	r18, 0xFF	; 255
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	fc 01       	movw	r30, r24
    20d0:	04 91       	lpm	r16, Z
				UECONX = en;
    20d2:	0c 93       	st	X, r16
				if (en) {
    20d4:	00 23       	and	r16, r16
    20d6:	59 f0       	breq	.+22     	; 0x20ee <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    20d8:	f9 01       	movw	r30, r18
    20da:	24 91       	lpm	r18, Z
    20dc:	fb 01       	movw	r30, r22
    20de:	20 83       	st	Z, r18
    20e0:	fc 01       	movw	r30, r24
    20e2:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    20e4:	03 96       	adiw	r24, 0x03	; 3
    20e6:	24 91       	lpm	r18, Z
    20e8:	fa 01       	movw	r30, r20
    20ea:	20 83       	st	Z, r18
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    20ee:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    20f0:	1f 5f       	subi	r17, 0xFF	; 255
    20f2:	15 30       	cpi	r17, 0x05	; 5
    20f4:	41 f7       	brne	.-48     	; 0x20c6 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    20f6:	ea ee       	ldi	r30, 0xEA	; 234
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	8e e1       	ldi	r24, 0x1E	; 30
    20fc:	80 83       	st	Z, r24
        		UERST = 0;
    20fe:	10 82       	st	Z, r1
			return;
    2100:	a0 c0       	rjmp	.+320    	; 0x2242 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2102:	48 30       	cpi	r20, 0x08	; 8
    2104:	81 f4       	brne	.+32     	; 0x2126 <__vector_11+0x1ca>
    2106:	70 38       	cpi	r23, 0x80	; 128
    2108:	09 f0       	breq	.+2      	; 0x210c <__vector_11+0x1b0>
    210a:	3f c0       	rjmp	.+126    	; 0x218a <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    210c:	e8 ee       	ldi	r30, 0xE8	; 232
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 ff       	sbrs	r24, 0
    2114:	fd cf       	rjmp	.-6      	; 0x2110 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2116:	80 91 b7 01 	lds	r24, 0x01B7
    211a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    211e:	8e ef       	ldi	r24, 0xFE	; 254
    2120:	80 93 e8 00 	sts	0x00E8, r24
    2124:	8e c0       	rjmp	.+284    	; 0x2242 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2126:	41 32       	cpi	r20, 0x21	; 33
    2128:	a9 f4       	brne	.+42     	; 0x2154 <__vector_11+0x1f8>
    212a:	71 3a       	cpi	r23, 0xA1	; 161
    212c:	f1 f5       	brne	.+124    	; 0x21aa <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    212e:	e8 ee       	ldi	r30, 0xE8	; 232
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 ff       	sbrs	r24, 0
    2136:	fd cf       	rjmp	.-6      	; 0x2132 <__vector_11+0x1d6>
    2138:	e0 e1       	ldi	r30, 0x10	; 16
    213a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    213c:	a1 ef       	ldi	r26, 0xF1	; 241
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	81 91       	ld	r24, Z+
    2142:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	e7 31       	cpi	r30, 0x17	; 23
    2148:	f4 07       	cpc	r31, r20
    214a:	d1 f7       	brne	.-12     	; 0x2140 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    214c:	8e ef       	ldi	r24, 0xFE	; 254
    214e:	80 93 e8 00 	sts	0x00E8, r24
    2152:	77 c0       	rjmp	.+238    	; 0x2242 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2154:	40 32       	cpi	r20, 0x20	; 32
    2156:	c9 f4       	brne	.+50     	; 0x218a <__vector_11+0x22e>
    2158:	71 32       	cpi	r23, 0x21	; 33
    215a:	09 f0       	breq	.+2      	; 0x215e <__vector_11+0x202>
    215c:	6b c0       	rjmp	.+214    	; 0x2234 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    215e:	e8 ee       	ldi	r30, 0xE8	; 232
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	82 ff       	sbrs	r24, 2
    2166:	fd cf       	rjmp	.-6      	; 0x2162 <__vector_11+0x206>
    2168:	e0 e1       	ldi	r30, 0x10	; 16
    216a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    216c:	a1 ef       	ldi	r26, 0xF1	; 241
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	8c 91       	ld	r24, X
    2172:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2174:	51 e0       	ldi	r21, 0x01	; 1
    2176:	e7 31       	cpi	r30, 0x17	; 23
    2178:	f5 07       	cpc	r31, r21
    217a:	d1 f7       	brne	.-12     	; 0x2170 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    217c:	e8 ee       	ldi	r30, 0xE8	; 232
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8b ef       	ldi	r24, 0xFB	; 251
    2182:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2184:	8e ef       	ldi	r24, 0xFE	; 254
    2186:	80 83       	st	Z, r24
    2188:	5c c0       	rjmp	.+184    	; 0x2242 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    218a:	42 32       	cpi	r20, 0x22	; 34
    218c:	71 f4       	brne	.+28     	; 0x21aa <__vector_11+0x24e>
    218e:	71 32       	cpi	r23, 0x21	; 33
    2190:	09 f0       	breq	.+2      	; 0x2194 <__vector_11+0x238>
    2192:	50 c0       	rjmp	.+160    	; 0x2234 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    2194:	20 93 b8 01 	sts	0x01B8, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2198:	e8 ee       	ldi	r30, 0xE8	; 232
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	80 ff       	sbrs	r24, 0
    21a0:	fd cf       	rjmp	.-6      	; 0x219c <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21a2:	8e ef       	ldi	r24, 0xFE	; 254
    21a4:	80 93 e8 00 	sts	0x00E8, r24
    21a8:	4c c0       	rjmp	.+152    	; 0x2242 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    21aa:	41 11       	cpse	r20, r1
    21ac:	1a c0       	rjmp	.+52     	; 0x21e2 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21ae:	e8 ee       	ldi	r30, 0xE8	; 232
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	20 81       	ld	r18, Z
    21b4:	20 ff       	sbrs	r18, 0
    21b6:	fd cf       	rjmp	.-6      	; 0x21b2 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    21b8:	72 38       	cpi	r23, 0x82	; 130
    21ba:	51 f4       	brne	.+20     	; 0x21d0 <__vector_11+0x274>
				UENUM = wIndex;
    21bc:	e9 ee       	ldi	r30, 0xE9	; 233
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    21c2:	80 91 eb 00 	lds	r24, 0x00EB
    21c6:	85 fb       	bst	r24, 5
    21c8:	88 27       	eor	r24, r24
    21ca:	80 f9       	bld	r24, 0
				UENUM = 0;
    21cc:	10 82       	st	Z, r1
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    21d0:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    21d2:	e1 ef       	ldi	r30, 0xF1	; 241
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 83       	st	Z, r24
			UEDATX = 0;
    21d8:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21da:	8e ef       	ldi	r24, 0xFE	; 254
    21dc:	80 93 e8 00 	sts	0x00E8, r24
    21e0:	30 c0       	rjmp	.+96     	; 0x2242 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    21e2:	41 30       	cpi	r20, 0x01	; 1
    21e4:	11 f0       	breq	.+4      	; 0x21ea <__vector_11+0x28e>
    21e6:	43 30       	cpi	r20, 0x03	; 3
    21e8:	29 f5       	brne	.+74     	; 0x2234 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    21ea:	72 30       	cpi	r23, 0x02	; 2
    21ec:	19 f5       	brne	.+70     	; 0x2234 <__vector_11+0x2d8>
    21ee:	23 2b       	or	r18, r19
    21f0:	09 f5       	brne	.+66     	; 0x2234 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    21f2:	8f 77       	andi	r24, 0x7F	; 127
    21f4:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    21f6:	38 2f       	mov	r19, r24
    21f8:	31 50       	subi	r19, 0x01	; 1
    21fa:	34 30       	cpi	r19, 0x04	; 4
    21fc:	d8 f4       	brcc	.+54     	; 0x2234 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21fe:	3e ef       	ldi	r19, 0xFE	; 254
    2200:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2204:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    2208:	43 30       	cpi	r20, 0x03	; 3
    220a:	21 f4       	brne	.+8      	; 0x2214 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    220c:	81 e2       	ldi	r24, 0x21	; 33
    220e:	80 93 eb 00 	sts	0x00EB, r24
    2212:	17 c0       	rjmp	.+46     	; 0x2242 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2214:	99 e1       	ldi	r25, 0x19	; 25
    2216:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	d9 01       	movw	r26, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <__vector_11+0x2ca>
    2222:	aa 0f       	add	r26, r26
    2224:	bb 1f       	adc	r27, r27
    2226:	8a 95       	dec	r24
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <__vector_11+0x2c6>
    222a:	ea ee       	ldi	r30, 0xEA	; 234
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	a0 83       	st	Z, r26
					UERST = 0;
    2230:	10 82       	st	Z, r1
    2232:	07 c0       	rjmp	.+14     	; 0x2242 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2234:	81 e2       	ldi	r24, 0x21	; 33
    2236:	80 93 eb 00 	sts	0x00EB, r24
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    223c:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    223e:	41 11       	cpse	r20, r1
    2240:	fa ce       	rjmp	.-524    	; 0x2036 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	0f 90       	pop	r0
    2268:	1f 90       	pop	r1
    226a:	18 95       	reti

0000226c <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	27 97       	sbiw	r28, 0x07	; 7
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    2288:	8e 01       	movw	r16, r28
    228a:	0f 5f       	subi	r16, 0xFF	; 255
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	27 e0       	ldi	r18, 0x07	; 7
    2290:	f8 01       	movw	r30, r16
    2292:	11 92       	st	Z+, r1
    2294:	2a 95       	dec	r18
    2296:	e9 f7       	brne	.-6      	; 0x2292 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    2298:	4a e0       	ldi	r20, 0x0A	; 10
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	b8 01       	movw	r22, r16
    229e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    22a2:	7e 01       	movw	r14, r28
    22a4:	f8 e0       	ldi	r31, 0x08	; 8
    22a6:	ef 0e       	add	r14, r31
    22a8:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    22aa:	f8 01       	movw	r30, r16
    22ac:	81 91       	ld	r24, Z+
    22ae:	8f 01       	movw	r16, r30
    22b0:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    22b2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    22b6:	0e 15       	cp	r16, r14
    22b8:	1f 05       	cpc	r17, r15
    22ba:	b9 f7       	brne	.-18     	; 0x22aa <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    22bc:	27 96       	adiw	r28, 0x07	; 7
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	08 95       	ret

000022d6 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    22da:	ec eb       	ldi	r30, 0xBC	; 188
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	88 23       	and	r24, r24
    22e2:	34 f0       	brlt	.+12     	; 0x22f0 <twi_wait+0x1a>
    22e4:	2f 5f       	subi	r18, 0xFF	; 255
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	29 3e       	cpi	r18, 0xE9	; 233
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	38 07       	cpc	r19, r24
    22ee:	b9 f7       	brne	.-18     	; 0x22de <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	28 3e       	cpi	r18, 0xE8	; 232
    22f4:	33 40       	sbci	r19, 0x03	; 3
    22f6:	09 f4       	brne	.+2      	; 0x22fa <twi_wait+0x24>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    22fa:	08 95       	ret

000022fc <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    22fc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2300:	84 e8       	ldi	r24, 0x84	; 132
    2302:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2306:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <twi_wait>
    230a:	88 23       	and	r24, r24
    230c:	21 f0       	breq	.+8      	; 0x2316 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    230e:	80 91 b9 00 	lds	r24, 0x00B9
    2312:	88 7f       	andi	r24, 0xF8	; 248
    2314:	08 95       	ret
	} else {
		return 0;					// comm failure
    2316:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2318:	08 95       	ret

0000231a <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    231a:	cf 93       	push	r28
    231c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    231e:	94 ea       	ldi	r25, 0xA4	; 164
    2320:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2324:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <twi_wait>
    2328:	88 23       	and	r24, r24
    232a:	61 f0       	breq	.+24     	; 0x2344 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    232c:	8c 2f       	mov	r24, r28
    232e:	88 0f       	add	r24, r24
    2330:	8f 5f       	subi	r24, 0xFF	; 255
    2332:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2336:	88 34       	cpi	r24, 0x48	; 72
    2338:	39 f4       	brne	.+14     	; 0x2348 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    233a:	84 e9       	ldi	r24, 0x94	; 148
    233c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	03 c0       	rjmp	.+6      	; 0x234a <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	01 c0       	rjmp	.+2      	; 0x234a <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2348:	81 e0       	ldi	r24, 0x01	; 1
}	
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    234e:	cf 93       	push	r28
    2350:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2352:	94 ea       	ldi	r25, 0xA4	; 164
    2354:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2358:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <twi_wait>
    235c:	88 23       	and	r24, r24
    235e:	59 f0       	breq	.+22     	; 0x2376 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2360:	8c 2f       	mov	r24, r28
    2362:	88 0f       	add	r24, r24
    2364:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2368:	80 32       	cpi	r24, 0x20	; 32
    236a:	39 f4       	brne	.+14     	; 0x237a <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    236c:	84 e9       	ldi	r24, 0x94	; 148
    236e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	03 c0       	rjmp	.+6      	; 0x237c <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	01 c0       	rjmp	.+2      	; 0x237c <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    237a:	81 e0       	ldi	r24, 0x01	; 1
}	
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2380:	84 e9       	ldi	r24, 0x94	; 148
    2382:	80 93 bc 00 	sts	0x00BC, r24
    2386:	08 95       	ret

00002388 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	60 97       	sbiw	r28, 0x10	; 16
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	e8 2e       	mov	r14, r24
    23a6:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    23a8:	fe 01       	movw	r30, r28
    23aa:	31 96       	adiw	r30, 0x01	; 1
    23ac:	80 e1       	ldi	r24, 0x10	; 16
    23ae:	df 01       	movw	r26, r30
    23b0:	1d 92       	st	X+, r1
    23b2:	8a 95       	dec	r24
    23b4:	e9 f7       	brne	.-6      	; 0x23b0 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    23b6:	88 e5       	ldi	r24, 0x58	; 88
    23b8:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    23bc:	88 23       	and	r24, r24
    23be:	09 f4       	brne	.+2      	; 0x23c2 <m_wii_read+0x3a>
    23c0:	66 c0       	rjmp	.+204    	; 0x248e <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    23c2:	86 e3       	ldi	r24, 0x36	; 54
    23c4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    23c8:	88 23       	and	r24, r24
    23ca:	09 f4       	brne	.+2      	; 0x23ce <m_wii_read+0x46>
    23cc:	62 c0       	rjmp	.+196    	; 0x2492 <m_wii_read+0x10a>
	end();
    23ce:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23d2:	b8 e0       	ldi	r27, 0x08	; 8
    23d4:	ba 95       	dec	r27
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <m_wii_read+0x4c>
    23d8:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    23da:	88 e5       	ldi	r24, 0x58	; 88
    23dc:	0e 94 8d 11 	call	0x231a	; 0x231a <start_read>
    23e0:	88 23       	and	r24, r24
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <m_wii_read+0x5e>
    23e4:	58 c0       	rjmp	.+176    	; 0x2496 <m_wii_read+0x10e>
    23e6:	ae 01       	movw	r20, r28
    23e8:	4f 5f       	subi	r20, 0xFF	; 255
    23ea:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    23ec:	8e 01       	movw	r16, r28
    23ee:	00 5f       	subi	r16, 0xF0	; 240
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23f2:	ec eb       	ldi	r30, 0xBC	; 188
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    23f8:	2b eb       	ldi	r18, 0xBB	; 187
    23fa:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23fc:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23fe:	80 81       	ld	r24, Z
    2400:	88 23       	and	r24, r24
    2402:	ec f7       	brge	.-6      	; 0x23fe <m_wii_read+0x76>
		temp[i] = TWDR;
    2404:	d9 01       	movw	r26, r18
    2406:	8c 91       	ld	r24, X
    2408:	da 01       	movw	r26, r20
    240a:	8d 93       	st	X+, r24
    240c:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    240e:	a0 17       	cp	r26, r16
    2410:	b1 07       	cpc	r27, r17
    2412:	a1 f7       	brne	.-24     	; 0x23fc <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2414:	84 e8       	ldi	r24, 0x84	; 132
    2416:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    241a:	ec eb       	ldi	r30, 0xBC	; 188
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	88 23       	and	r24, r24
    2422:	ec f7       	brge	.-6      	; 0x241e <m_wii_read+0x96>
	temp[15] = TWDR;
    2424:	80 91 bb 00 	lds	r24, 0x00BB
    2428:	88 8b       	std	Y+16, r24	; 0x10
	end();
    242a:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
    242e:	de 01       	movw	r26, r28
    2430:	14 96       	adiw	r26, 0x04	; 4
    2432:	6e 2d       	mov	r22, r14
    2434:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2436:	4c 91       	ld	r20, X
    2438:	24 2f       	mov	r18, r20
    243a:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    243c:	cd 01       	movw	r24, r26
    243e:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2440:	fc 01       	movw	r30, r24
    2442:	80 81       	ld	r24, Z
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	f0 e1       	ldi	r31, 0x10	; 16
    2448:	2f 9f       	mul	r18, r31
    244a:	80 0d       	add	r24, r0
    244c:	91 1d       	adc	r25, r1
    244e:	11 24       	eor	r1, r1
    2450:	fb 01       	movw	r30, r22
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2456:	84 2f       	mov	r24, r20
    2458:	80 7c       	andi	r24, 0xC0	; 192
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2464:	9d 01       	movw	r18, r26
    2466:	21 50       	subi	r18, 0x01	; 1
    2468:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    246a:	f9 01       	movw	r30, r18
    246c:	20 81       	ld	r18, Z
    246e:	82 0f       	add	r24, r18
    2470:	91 1d       	adc	r25, r1
    2472:	fb 01       	movw	r30, r22
    2474:	93 83       	std	Z+3, r25	; 0x03
    2476:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2478:	4f 70       	andi	r20, 0x0F	; 15
    247a:	44 83       	std	Z+4, r20	; 0x04
    247c:	15 82       	std	Z+5, r1	; 0x05
    247e:	13 96       	adiw	r26, 0x03	; 3
    2480:	6a 5f       	subi	r22, 0xFA	; 250
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2484:	0a 17       	cp	r16, r26
    2486:	1b 07       	cpc	r17, r27
    2488:	b1 f6       	brne	.-84     	; 0x2436 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2496:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2498:	60 96       	adiw	r28, 0x10	; 16
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	ff 90       	pop	r15
    24ae:	ef 90       	pop	r14
    24b0:	08 95       	ret

000024b2 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    24b2:	0e 94 13 08 	call	0x1026	; 0x1026 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    24b6:	88 e5       	ldi	r24, 0x58	; 88
    24b8:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    24bc:	88 23       	and	r24, r24
    24be:	09 f4       	brne	.+2      	; 0x24c2 <m_wii_open+0x10>
    24c0:	c7 c0       	rjmp	.+398    	; 0x2650 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    24c2:	80 e3       	ldi	r24, 0x30	; 48
    24c4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    24c8:	88 23       	and	r24, r24
    24ca:	09 f4       	brne	.+2      	; 0x24ce <m_wii_open+0x1c>
    24cc:	c3 c0       	rjmp	.+390    	; 0x2654 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <m_wii_open+0x28>
    24d8:	bf c0       	rjmp	.+382    	; 0x2658 <m_wii_open+0x1a6>
	end();
    24da:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24de:	83 ec       	ldi	r24, 0xC3	; 195
    24e0:	99 e0       	ldi	r25, 0x09	; 9
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <m_wii_open+0x30>
    24e6:	00 c0       	rjmp	.+0      	; 0x24e8 <m_wii_open+0x36>
    24e8:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    24ea:	88 e5       	ldi	r24, 0x58	; 88
    24ec:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    24f0:	88 23       	and	r24, r24
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <m_wii_open+0x44>
    24f4:	b3 c0       	rjmp	.+358    	; 0x265c <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    24fc:	88 23       	and	r24, r24
    24fe:	09 f4       	brne	.+2      	; 0x2502 <m_wii_open+0x50>
    2500:	af c0       	rjmp	.+350    	; 0x2660 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2508:	88 23       	and	r24, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <m_wii_open+0x5c>
    250c:	ab c0       	rjmp	.+342    	; 0x2664 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2514:	88 23       	and	r24, r24
    2516:	09 f4       	brne	.+2      	; 0x251a <m_wii_open+0x68>
    2518:	a7 c0       	rjmp	.+334    	; 0x2668 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2520:	88 23       	and	r24, r24
    2522:	09 f4       	brne	.+2      	; 0x2526 <m_wii_open+0x74>
    2524:	a3 c0       	rjmp	.+326    	; 0x266c <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    252c:	88 23       	and	r24, r24
    252e:	09 f4       	brne	.+2      	; 0x2532 <m_wii_open+0x80>
    2530:	9f c0       	rjmp	.+318    	; 0x2670 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2538:	88 23       	and	r24, r24
    253a:	09 f4       	brne	.+2      	; 0x253e <m_wii_open+0x8c>
    253c:	9b c0       	rjmp	.+310    	; 0x2674 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2544:	88 23       	and	r24, r24
    2546:	09 f4       	brne	.+2      	; 0x254a <m_wii_open+0x98>
    2548:	97 c0       	rjmp	.+302    	; 0x2678 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    254a:	80 e9       	ldi	r24, 0x90	; 144
    254c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2550:	88 23       	and	r24, r24
    2552:	09 f4       	brne	.+2      	; 0x2556 <m_wii_open+0xa4>
    2554:	93 c0       	rjmp	.+294    	; 0x267c <m_wii_open+0x1ca>
	end();
    2556:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
    255a:	83 ec       	ldi	r24, 0xC3	; 195
    255c:	99 e0       	ldi	r25, 0x09	; 9
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <m_wii_open+0xac>
    2562:	00 c0       	rjmp	.+0      	; 0x2564 <m_wii_open+0xb2>
    2564:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2566:	88 e5       	ldi	r24, 0x58	; 88
    2568:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    256c:	88 23       	and	r24, r24
    256e:	09 f4       	brne	.+2      	; 0x2572 <m_wii_open+0xc0>
    2570:	87 c0       	rjmp	.+270    	; 0x2680 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2572:	87 e0       	ldi	r24, 0x07	; 7
    2574:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2578:	88 23       	and	r24, r24
    257a:	09 f4       	brne	.+2      	; 0x257e <m_wii_open+0xcc>
    257c:	83 c0       	rjmp	.+262    	; 0x2684 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2584:	88 23       	and	r24, r24
    2586:	09 f4       	brne	.+2      	; 0x258a <m_wii_open+0xd8>
    2588:	7f c0       	rjmp	.+254    	; 0x2688 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    258a:	81 e4       	ldi	r24, 0x41	; 65
    258c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2590:	88 23       	and	r24, r24
    2592:	09 f4       	brne	.+2      	; 0x2596 <m_wii_open+0xe4>
    2594:	7b c0       	rjmp	.+246    	; 0x268c <m_wii_open+0x1da>
	end();
    2596:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
    259a:	83 ec       	ldi	r24, 0xC3	; 195
    259c:	99 e0       	ldi	r25, 0x09	; 9
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <m_wii_open+0xec>
    25a2:	00 c0       	rjmp	.+0      	; 0x25a4 <m_wii_open+0xf2>
    25a4:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    25a6:	88 e5       	ldi	r24, 0x58	; 88
    25a8:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    25ac:	88 23       	and	r24, r24
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <m_wii_open+0x100>
    25b0:	6f c0       	rjmp	.+222    	; 0x2690 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    25b2:	8a e1       	ldi	r24, 0x1A	; 26
    25b4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    25b8:	88 23       	and	r24, r24
    25ba:	09 f4       	brne	.+2      	; 0x25be <m_wii_open+0x10c>
    25bc:	6b c0       	rjmp	.+214    	; 0x2694 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    25be:	80 e4       	ldi	r24, 0x40	; 64
    25c0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    25c4:	88 23       	and	r24, r24
    25c6:	09 f4       	brne	.+2      	; 0x25ca <m_wii_open+0x118>
    25c8:	67 c0       	rjmp	.+206    	; 0x2698 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    25d0:	88 23       	and	r24, r24
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <m_wii_open+0x124>
    25d4:	63 c0       	rjmp	.+198    	; 0x269c <m_wii_open+0x1ea>
	end();
    25d6:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
    25da:	83 ec       	ldi	r24, 0xC3	; 195
    25dc:	99 e0       	ldi	r25, 0x09	; 9
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <m_wii_open+0x12c>
    25e2:	00 c0       	rjmp	.+0      	; 0x25e4 <m_wii_open+0x132>
    25e4:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    25e6:	88 e5       	ldi	r24, 0x58	; 88
    25e8:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    25ec:	88 23       	and	r24, r24
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <m_wii_open+0x140>
    25f0:	57 c0       	rjmp	.+174    	; 0x26a0 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    25f2:	83 e3       	ldi	r24, 0x33	; 51
    25f4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    25f8:	88 23       	and	r24, r24
    25fa:	09 f4       	brne	.+2      	; 0x25fe <m_wii_open+0x14c>
    25fc:	53 c0       	rjmp	.+166    	; 0x26a4 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2604:	88 23       	and	r24, r24
    2606:	09 f4       	brne	.+2      	; 0x260a <m_wii_open+0x158>
    2608:	4f c0       	rjmp	.+158    	; 0x26a8 <m_wii_open+0x1f6>
	end();
    260a:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
    260e:	83 ec       	ldi	r24, 0xC3	; 195
    2610:	99 e0       	ldi	r25, 0x09	; 9
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <m_wii_open+0x160>
    2616:	00 c0       	rjmp	.+0      	; 0x2618 <m_wii_open+0x166>
    2618:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    261a:	88 e5       	ldi	r24, 0x58	; 88
    261c:	0e 94 a7 11 	call	0x234e	; 0x234e <start_write>
    2620:	88 23       	and	r24, r24
    2622:	09 f4       	brne	.+2      	; 0x2626 <m_wii_open+0x174>
    2624:	43 c0       	rjmp	.+134    	; 0x26ac <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    2626:	80 e3       	ldi	r24, 0x30	; 48
    2628:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    262c:	88 23       	and	r24, r24
    262e:	09 f4       	brne	.+2      	; 0x2632 <m_wii_open+0x180>
    2630:	3f c0       	rjmp	.+126    	; 0x26b0 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2632:	88 e0       	ldi	r24, 0x08	; 8
    2634:	0e 94 7e 11 	call	0x22fc	; 0x22fc <send_byte>
    2638:	88 23       	and	r24, r24
    263a:	e1 f1       	breq	.+120    	; 0x26b4 <m_wii_open+0x202>
	end();
    263c:	0e 94 c0 11 	call	0x2380	; 0x2380 <end>
    2640:	83 ec       	ldi	r24, 0xC3	; 195
    2642:	99 e0       	ldi	r25, 0x09	; 9
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <m_wii_open+0x192>
    2648:	00 c0       	rjmp	.+0      	; 0x264a <m_wii_open+0x198>
    264a:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    26b4:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    26b6:	08 95       	ret

000026b8 <__subsf3>:
    26b8:	50 58       	subi	r21, 0x80	; 128

000026ba <__addsf3>:
    26ba:	bb 27       	eor	r27, r27
    26bc:	aa 27       	eor	r26, r26
    26be:	0e d0       	rcall	.+28     	; 0x26dc <__addsf3x>
    26c0:	58 c2       	rjmp	.+1200   	; 0x2b72 <__fp_round>
    26c2:	21 d2       	rcall	.+1090   	; 0x2b06 <__fp_pscA>
    26c4:	30 f0       	brcs	.+12     	; 0x26d2 <__addsf3+0x18>
    26c6:	26 d2       	rcall	.+1100   	; 0x2b14 <__fp_pscB>
    26c8:	20 f0       	brcs	.+8      	; 0x26d2 <__addsf3+0x18>
    26ca:	31 f4       	brne	.+12     	; 0x26d8 <__addsf3+0x1e>
    26cc:	9f 3f       	cpi	r25, 0xFF	; 255
    26ce:	11 f4       	brne	.+4      	; 0x26d4 <__addsf3+0x1a>
    26d0:	1e f4       	brtc	.+6      	; 0x26d8 <__addsf3+0x1e>
    26d2:	f1 c1       	rjmp	.+994    	; 0x2ab6 <__fp_nan>
    26d4:	0e f4       	brtc	.+2      	; 0x26d8 <__addsf3+0x1e>
    26d6:	e0 95       	com	r30
    26d8:	e7 fb       	bst	r30, 7
    26da:	e7 c1       	rjmp	.+974    	; 0x2aaa <__fp_inf>

000026dc <__addsf3x>:
    26dc:	e9 2f       	mov	r30, r25
    26de:	6b d2       	rcall	.+1238   	; 0x2bb6 <__fp_split3>
    26e0:	80 f3       	brcs	.-32     	; 0x26c2 <__addsf3+0x8>
    26e2:	ba 17       	cp	r27, r26
    26e4:	62 07       	cpc	r22, r18
    26e6:	73 07       	cpc	r23, r19
    26e8:	84 07       	cpc	r24, r20
    26ea:	95 07       	cpc	r25, r21
    26ec:	18 f0       	brcs	.+6      	; 0x26f4 <__addsf3x+0x18>
    26ee:	71 f4       	brne	.+28     	; 0x270c <__addsf3x+0x30>
    26f0:	9e f5       	brtc	.+102    	; 0x2758 <__addsf3x+0x7c>
    26f2:	83 c2       	rjmp	.+1286   	; 0x2bfa <__fp_zero>
    26f4:	0e f4       	brtc	.+2      	; 0x26f8 <__addsf3x+0x1c>
    26f6:	e0 95       	com	r30
    26f8:	0b 2e       	mov	r0, r27
    26fa:	ba 2f       	mov	r27, r26
    26fc:	a0 2d       	mov	r26, r0
    26fe:	0b 01       	movw	r0, r22
    2700:	b9 01       	movw	r22, r18
    2702:	90 01       	movw	r18, r0
    2704:	0c 01       	movw	r0, r24
    2706:	ca 01       	movw	r24, r20
    2708:	a0 01       	movw	r20, r0
    270a:	11 24       	eor	r1, r1
    270c:	ff 27       	eor	r31, r31
    270e:	59 1b       	sub	r21, r25
    2710:	99 f0       	breq	.+38     	; 0x2738 <__addsf3x+0x5c>
    2712:	59 3f       	cpi	r21, 0xF9	; 249
    2714:	50 f4       	brcc	.+20     	; 0x272a <__addsf3x+0x4e>
    2716:	50 3e       	cpi	r21, 0xE0	; 224
    2718:	68 f1       	brcs	.+90     	; 0x2774 <__addsf3x+0x98>
    271a:	1a 16       	cp	r1, r26
    271c:	f0 40       	sbci	r31, 0x00	; 0
    271e:	a2 2f       	mov	r26, r18
    2720:	23 2f       	mov	r18, r19
    2722:	34 2f       	mov	r19, r20
    2724:	44 27       	eor	r20, r20
    2726:	58 5f       	subi	r21, 0xF8	; 248
    2728:	f3 cf       	rjmp	.-26     	; 0x2710 <__addsf3x+0x34>
    272a:	46 95       	lsr	r20
    272c:	37 95       	ror	r19
    272e:	27 95       	ror	r18
    2730:	a7 95       	ror	r26
    2732:	f0 40       	sbci	r31, 0x00	; 0
    2734:	53 95       	inc	r21
    2736:	c9 f7       	brne	.-14     	; 0x272a <__addsf3x+0x4e>
    2738:	7e f4       	brtc	.+30     	; 0x2758 <__addsf3x+0x7c>
    273a:	1f 16       	cp	r1, r31
    273c:	ba 0b       	sbc	r27, r26
    273e:	62 0b       	sbc	r22, r18
    2740:	73 0b       	sbc	r23, r19
    2742:	84 0b       	sbc	r24, r20
    2744:	ba f0       	brmi	.+46     	; 0x2774 <__addsf3x+0x98>
    2746:	91 50       	subi	r25, 0x01	; 1
    2748:	a1 f0       	breq	.+40     	; 0x2772 <__addsf3x+0x96>
    274a:	ff 0f       	add	r31, r31
    274c:	bb 1f       	adc	r27, r27
    274e:	66 1f       	adc	r22, r22
    2750:	77 1f       	adc	r23, r23
    2752:	88 1f       	adc	r24, r24
    2754:	c2 f7       	brpl	.-16     	; 0x2746 <__addsf3x+0x6a>
    2756:	0e c0       	rjmp	.+28     	; 0x2774 <__addsf3x+0x98>
    2758:	ba 0f       	add	r27, r26
    275a:	62 1f       	adc	r22, r18
    275c:	73 1f       	adc	r23, r19
    275e:	84 1f       	adc	r24, r20
    2760:	48 f4       	brcc	.+18     	; 0x2774 <__addsf3x+0x98>
    2762:	87 95       	ror	r24
    2764:	77 95       	ror	r23
    2766:	67 95       	ror	r22
    2768:	b7 95       	ror	r27
    276a:	f7 95       	ror	r31
    276c:	9e 3f       	cpi	r25, 0xFE	; 254
    276e:	08 f0       	brcs	.+2      	; 0x2772 <__addsf3x+0x96>
    2770:	b3 cf       	rjmp	.-154    	; 0x26d8 <__addsf3+0x1e>
    2772:	93 95       	inc	r25
    2774:	88 0f       	add	r24, r24
    2776:	08 f0       	brcs	.+2      	; 0x277a <__addsf3x+0x9e>
    2778:	99 27       	eor	r25, r25
    277a:	ee 0f       	add	r30, r30
    277c:	97 95       	ror	r25
    277e:	87 95       	ror	r24
    2780:	08 95       	ret
    2782:	c1 d1       	rcall	.+898    	; 0x2b06 <__fp_pscA>
    2784:	58 f0       	brcs	.+22     	; 0x279c <__addsf3x+0xc0>
    2786:	80 e8       	ldi	r24, 0x80	; 128
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	09 f4       	brne	.+2      	; 0x278e <__addsf3x+0xb2>
    278c:	9e ef       	ldi	r25, 0xFE	; 254
    278e:	c2 d1       	rcall	.+900    	; 0x2b14 <__fp_pscB>
    2790:	28 f0       	brcs	.+10     	; 0x279c <__addsf3x+0xc0>
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	51 e0       	ldi	r21, 0x01	; 1
    2796:	59 f4       	brne	.+22     	; 0x27ae <atan2+0xe>
    2798:	5e ef       	ldi	r21, 0xFE	; 254
    279a:	09 c0       	rjmp	.+18     	; 0x27ae <atan2+0xe>
    279c:	8c c1       	rjmp	.+792    	; 0x2ab6 <__fp_nan>
    279e:	2d c2       	rjmp	.+1114   	; 0x2bfa <__fp_zero>

000027a0 <atan2>:
    27a0:	e9 2f       	mov	r30, r25
    27a2:	e0 78       	andi	r30, 0x80	; 128
    27a4:	08 d2       	rcall	.+1040   	; 0x2bb6 <__fp_split3>
    27a6:	68 f3       	brcs	.-38     	; 0x2782 <__addsf3x+0xa6>
    27a8:	09 2e       	mov	r0, r25
    27aa:	05 2a       	or	r0, r21
    27ac:	c1 f3       	breq	.-16     	; 0x279e <__addsf3x+0xc2>
    27ae:	26 17       	cp	r18, r22
    27b0:	37 07       	cpc	r19, r23
    27b2:	48 07       	cpc	r20, r24
    27b4:	59 07       	cpc	r21, r25
    27b6:	38 f0       	brcs	.+14     	; 0x27c6 <atan2+0x26>
    27b8:	0e 2e       	mov	r0, r30
    27ba:	07 f8       	bld	r0, 7
    27bc:	e0 25       	eor	r30, r0
    27be:	69 f0       	breq	.+26     	; 0x27da <atan2+0x3a>
    27c0:	e0 25       	eor	r30, r0
    27c2:	e0 64       	ori	r30, 0x40	; 64
    27c4:	0a c0       	rjmp	.+20     	; 0x27da <atan2+0x3a>
    27c6:	ef 63       	ori	r30, 0x3F	; 63
    27c8:	07 f8       	bld	r0, 7
    27ca:	00 94       	com	r0
    27cc:	07 fa       	bst	r0, 7
    27ce:	db 01       	movw	r26, r22
    27d0:	b9 01       	movw	r22, r18
    27d2:	9d 01       	movw	r18, r26
    27d4:	dc 01       	movw	r26, r24
    27d6:	ca 01       	movw	r24, r20
    27d8:	ad 01       	movw	r20, r26
    27da:	ef 93       	push	r30
    27dc:	4a d0       	rcall	.+148    	; 0x2872 <__divsf3_pse>
    27de:	c9 d1       	rcall	.+914    	; 0x2b72 <__fp_round>
    27e0:	0a d0       	rcall	.+20     	; 0x27f6 <atan>
    27e2:	5f 91       	pop	r21
    27e4:	55 23       	and	r21, r21
    27e6:	31 f0       	breq	.+12     	; 0x27f4 <atan2+0x54>
    27e8:	2b ed       	ldi	r18, 0xDB	; 219
    27ea:	3f e0       	ldi	r19, 0x0F	; 15
    27ec:	49 e4       	ldi	r20, 0x49	; 73
    27ee:	50 fd       	sbrc	r21, 0
    27f0:	49 ec       	ldi	r20, 0xC9	; 201
    27f2:	63 cf       	rjmp	.-314    	; 0x26ba <__addsf3>
    27f4:	08 95       	ret

000027f6 <atan>:
    27f6:	df 93       	push	r29
    27f8:	dd 27       	eor	r29, r29
    27fa:	b9 2f       	mov	r27, r25
    27fc:	bf 77       	andi	r27, 0x7F	; 127
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	16 16       	cp	r1, r22
    2804:	17 06       	cpc	r1, r23
    2806:	48 07       	cpc	r20, r24
    2808:	5b 07       	cpc	r21, r27
    280a:	10 f4       	brcc	.+4      	; 0x2810 <atan+0x1a>
    280c:	d9 2f       	mov	r29, r25
    280e:	00 d2       	rcall	.+1024   	; 0x2c10 <inverse>
    2810:	9f 93       	push	r25
    2812:	8f 93       	push	r24
    2814:	7f 93       	push	r23
    2816:	6f 93       	push	r22
    2818:	5b d3       	rcall	.+1718   	; 0x2ed0 <square>
    281a:	ec ea       	ldi	r30, 0xAC	; 172
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	4e d1       	rcall	.+668    	; 0x2abc <__fp_powser>
    2820:	a8 d1       	rcall	.+848    	; 0x2b72 <__fp_round>
    2822:	2f 91       	pop	r18
    2824:	3f 91       	pop	r19
    2826:	4f 91       	pop	r20
    2828:	5f 91       	pop	r21
    282a:	b3 d2       	rcall	.+1382   	; 0x2d92 <__mulsf3x>
    282c:	dd 23       	and	r29, r29
    282e:	49 f0       	breq	.+18     	; 0x2842 <atan+0x4c>
    2830:	90 58       	subi	r25, 0x80	; 128
    2832:	a2 ea       	ldi	r26, 0xA2	; 162
    2834:	2a ed       	ldi	r18, 0xDA	; 218
    2836:	3f e0       	ldi	r19, 0x0F	; 15
    2838:	49 ec       	ldi	r20, 0xC9	; 201
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	d0 78       	andi	r29, 0x80	; 128
    283e:	5d 27       	eor	r21, r29
    2840:	4d df       	rcall	.-358    	; 0x26dc <__addsf3x>
    2842:	df 91       	pop	r29
    2844:	96 c1       	rjmp	.+812    	; 0x2b72 <__fp_round>

00002846 <__cmpsf2>:
    2846:	0d d1       	rcall	.+538    	; 0x2a62 <__fp_cmp>
    2848:	08 f4       	brcc	.+2      	; 0x284c <__cmpsf2+0x6>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	08 95       	ret

0000284e <cos>:
    284e:	6a d1       	rcall	.+724    	; 0x2b24 <__fp_rempio2>
    2850:	e3 95       	inc	r30
    2852:	a0 c1       	rjmp	.+832    	; 0x2b94 <__fp_sinus>

00002854 <__divsf3>:
    2854:	0c d0       	rcall	.+24     	; 0x286e <__divsf3x>
    2856:	8d c1       	rjmp	.+794    	; 0x2b72 <__fp_round>
    2858:	5d d1       	rcall	.+698    	; 0x2b14 <__fp_pscB>
    285a:	40 f0       	brcs	.+16     	; 0x286c <__divsf3+0x18>
    285c:	54 d1       	rcall	.+680    	; 0x2b06 <__fp_pscA>
    285e:	30 f0       	brcs	.+12     	; 0x286c <__divsf3+0x18>
    2860:	21 f4       	brne	.+8      	; 0x286a <__divsf3+0x16>
    2862:	5f 3f       	cpi	r21, 0xFF	; 255
    2864:	19 f0       	breq	.+6      	; 0x286c <__divsf3+0x18>
    2866:	21 c1       	rjmp	.+578    	; 0x2aaa <__fp_inf>
    2868:	51 11       	cpse	r21, r1
    286a:	c8 c1       	rjmp	.+912    	; 0x2bfc <__fp_szero>
    286c:	24 c1       	rjmp	.+584    	; 0x2ab6 <__fp_nan>

0000286e <__divsf3x>:
    286e:	a3 d1       	rcall	.+838    	; 0x2bb6 <__fp_split3>
    2870:	98 f3       	brcs	.-26     	; 0x2858 <__divsf3+0x4>

00002872 <__divsf3_pse>:
    2872:	99 23       	and	r25, r25
    2874:	c9 f3       	breq	.-14     	; 0x2868 <__divsf3+0x14>
    2876:	55 23       	and	r21, r21
    2878:	b1 f3       	breq	.-20     	; 0x2866 <__divsf3+0x12>
    287a:	95 1b       	sub	r25, r21
    287c:	55 0b       	sbc	r21, r21
    287e:	bb 27       	eor	r27, r27
    2880:	aa 27       	eor	r26, r26
    2882:	62 17       	cp	r22, r18
    2884:	73 07       	cpc	r23, r19
    2886:	84 07       	cpc	r24, r20
    2888:	38 f0       	brcs	.+14     	; 0x2898 <__divsf3_pse+0x26>
    288a:	9f 5f       	subi	r25, 0xFF	; 255
    288c:	5f 4f       	sbci	r21, 0xFF	; 255
    288e:	22 0f       	add	r18, r18
    2890:	33 1f       	adc	r19, r19
    2892:	44 1f       	adc	r20, r20
    2894:	aa 1f       	adc	r26, r26
    2896:	a9 f3       	breq	.-22     	; 0x2882 <__divsf3_pse+0x10>
    2898:	33 d0       	rcall	.+102    	; 0x2900 <__divsf3_pse+0x8e>
    289a:	0e 2e       	mov	r0, r30
    289c:	3a f0       	brmi	.+14     	; 0x28ac <__divsf3_pse+0x3a>
    289e:	e0 e8       	ldi	r30, 0x80	; 128
    28a0:	30 d0       	rcall	.+96     	; 0x2902 <__divsf3_pse+0x90>
    28a2:	91 50       	subi	r25, 0x01	; 1
    28a4:	50 40       	sbci	r21, 0x00	; 0
    28a6:	e6 95       	lsr	r30
    28a8:	00 1c       	adc	r0, r0
    28aa:	ca f7       	brpl	.-14     	; 0x289e <__divsf3_pse+0x2c>
    28ac:	29 d0       	rcall	.+82     	; 0x2900 <__divsf3_pse+0x8e>
    28ae:	fe 2f       	mov	r31, r30
    28b0:	27 d0       	rcall	.+78     	; 0x2900 <__divsf3_pse+0x8e>
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	88 1f       	adc	r24, r24
    28b8:	bb 1f       	adc	r27, r27
    28ba:	26 17       	cp	r18, r22
    28bc:	37 07       	cpc	r19, r23
    28be:	48 07       	cpc	r20, r24
    28c0:	ab 07       	cpc	r26, r27
    28c2:	b0 e8       	ldi	r27, 0x80	; 128
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <__divsf3_pse+0x56>
    28c6:	bb 0b       	sbc	r27, r27
    28c8:	80 2d       	mov	r24, r0
    28ca:	bf 01       	movw	r22, r30
    28cc:	ff 27       	eor	r31, r31
    28ce:	93 58       	subi	r25, 0x83	; 131
    28d0:	5f 4f       	sbci	r21, 0xFF	; 255
    28d2:	2a f0       	brmi	.+10     	; 0x28de <__divsf3_pse+0x6c>
    28d4:	9e 3f       	cpi	r25, 0xFE	; 254
    28d6:	51 05       	cpc	r21, r1
    28d8:	68 f0       	brcs	.+26     	; 0x28f4 <__divsf3_pse+0x82>
    28da:	e7 c0       	rjmp	.+462    	; 0x2aaa <__fp_inf>
    28dc:	8f c1       	rjmp	.+798    	; 0x2bfc <__fp_szero>
    28de:	5f 3f       	cpi	r21, 0xFF	; 255
    28e0:	ec f3       	brlt	.-6      	; 0x28dc <__divsf3_pse+0x6a>
    28e2:	98 3e       	cpi	r25, 0xE8	; 232
    28e4:	dc f3       	brlt	.-10     	; 0x28dc <__divsf3_pse+0x6a>
    28e6:	86 95       	lsr	r24
    28e8:	77 95       	ror	r23
    28ea:	67 95       	ror	r22
    28ec:	b7 95       	ror	r27
    28ee:	f7 95       	ror	r31
    28f0:	9f 5f       	subi	r25, 0xFF	; 255
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <__divsf3_pse+0x74>
    28f4:	88 0f       	add	r24, r24
    28f6:	91 1d       	adc	r25, r1
    28f8:	96 95       	lsr	r25
    28fa:	87 95       	ror	r24
    28fc:	97 f9       	bld	r25, 7
    28fe:	08 95       	ret
    2900:	e1 e0       	ldi	r30, 0x01	; 1
    2902:	66 0f       	add	r22, r22
    2904:	77 1f       	adc	r23, r23
    2906:	88 1f       	adc	r24, r24
    2908:	bb 1f       	adc	r27, r27
    290a:	62 17       	cp	r22, r18
    290c:	73 07       	cpc	r23, r19
    290e:	84 07       	cpc	r24, r20
    2910:	ba 07       	cpc	r27, r26
    2912:	20 f0       	brcs	.+8      	; 0x291c <__divsf3_pse+0xaa>
    2914:	62 1b       	sub	r22, r18
    2916:	73 0b       	sbc	r23, r19
    2918:	84 0b       	sbc	r24, r20
    291a:	ba 0b       	sbc	r27, r26
    291c:	ee 1f       	adc	r30, r30
    291e:	88 f7       	brcc	.-30     	; 0x2902 <__divsf3_pse+0x90>
    2920:	e0 95       	com	r30
    2922:	08 95       	ret
    2924:	19 f4       	brne	.+6      	; 0x292c <__divsf3_pse+0xba>
    2926:	0e f0       	brts	.+2      	; 0x292a <__divsf3_pse+0xb8>
    2928:	c0 c0       	rjmp	.+384    	; 0x2aaa <__fp_inf>
    292a:	67 c1       	rjmp	.+718    	; 0x2bfa <__fp_zero>
    292c:	c4 c0       	rjmp	.+392    	; 0x2ab6 <__fp_nan>

0000292e <exp>:
    292e:	4b d1       	rcall	.+662    	; 0x2bc6 <__fp_splitA>
    2930:	c8 f3       	brcs	.-14     	; 0x2924 <__divsf3_pse+0xb2>
    2932:	96 38       	cpi	r25, 0x86	; 134
    2934:	c0 f7       	brcc	.-16     	; 0x2926 <__divsf3_pse+0xb4>
    2936:	07 f8       	bld	r0, 7
    2938:	0f 92       	push	r0
    293a:	e8 94       	clt
    293c:	2b e3       	ldi	r18, 0x3B	; 59
    293e:	3a ea       	ldi	r19, 0xAA	; 170
    2940:	48 eb       	ldi	r20, 0xB8	; 184
    2942:	5f e7       	ldi	r21, 0x7F	; 127
    2944:	28 d2       	rcall	.+1104   	; 0x2d96 <__mulsf3_pse>
    2946:	0f 92       	push	r0
    2948:	0f 92       	push	r0
    294a:	0f 92       	push	r0
    294c:	4d b7       	in	r20, 0x3d	; 61
    294e:	5e b7       	in	r21, 0x3e	; 62
    2950:	0f 92       	push	r0
    2952:	e0 d1       	rcall	.+960    	; 0x2d14 <modf>
    2954:	e9 ed       	ldi	r30, 0xD9	; 217
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	b1 d0       	rcall	.+354    	; 0x2abc <__fp_powser>
    295a:	4f 91       	pop	r20
    295c:	5f 91       	pop	r21
    295e:	ef 91       	pop	r30
    2960:	ff 91       	pop	r31
    2962:	e5 95       	asr	r30
    2964:	ee 1f       	adc	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	49 f0       	breq	.+18     	; 0x297c <exp+0x4e>
    296a:	fe 57       	subi	r31, 0x7E	; 126
    296c:	e0 68       	ori	r30, 0x80	; 128
    296e:	44 27       	eor	r20, r20
    2970:	ee 0f       	add	r30, r30
    2972:	44 1f       	adc	r20, r20
    2974:	fa 95       	dec	r31
    2976:	e1 f7       	brne	.-8      	; 0x2970 <exp+0x42>
    2978:	41 95       	neg	r20
    297a:	55 0b       	sbc	r21, r21
    297c:	52 d1       	rcall	.+676    	; 0x2c22 <ldexp>
    297e:	0f 90       	pop	r0
    2980:	07 fe       	sbrs	r0, 7
    2982:	46 c1       	rjmp	.+652    	; 0x2c10 <inverse>
    2984:	08 95       	ret

00002986 <__fixsfsi>:
    2986:	04 d0       	rcall	.+8      	; 0x2990 <__fixunssfsi>
    2988:	68 94       	set
    298a:	b1 11       	cpse	r27, r1
    298c:	37 c1       	rjmp	.+622    	; 0x2bfc <__fp_szero>
    298e:	08 95       	ret

00002990 <__fixunssfsi>:
    2990:	1a d1       	rcall	.+564    	; 0x2bc6 <__fp_splitA>
    2992:	88 f0       	brcs	.+34     	; 0x29b6 <__fixunssfsi+0x26>
    2994:	9f 57       	subi	r25, 0x7F	; 127
    2996:	90 f0       	brcs	.+36     	; 0x29bc <__fixunssfsi+0x2c>
    2998:	b9 2f       	mov	r27, r25
    299a:	99 27       	eor	r25, r25
    299c:	b7 51       	subi	r27, 0x17	; 23
    299e:	a0 f0       	brcs	.+40     	; 0x29c8 <__fixunssfsi+0x38>
    29a0:	d1 f0       	breq	.+52     	; 0x29d6 <__fixunssfsi+0x46>
    29a2:	66 0f       	add	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	88 1f       	adc	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	1a f0       	brmi	.+6      	; 0x29b2 <__fixunssfsi+0x22>
    29ac:	ba 95       	dec	r27
    29ae:	c9 f7       	brne	.-14     	; 0x29a2 <__fixunssfsi+0x12>
    29b0:	12 c0       	rjmp	.+36     	; 0x29d6 <__fixunssfsi+0x46>
    29b2:	b1 30       	cpi	r27, 0x01	; 1
    29b4:	81 f0       	breq	.+32     	; 0x29d6 <__fixunssfsi+0x46>
    29b6:	21 d1       	rcall	.+578    	; 0x2bfa <__fp_zero>
    29b8:	b1 e0       	ldi	r27, 0x01	; 1
    29ba:	08 95       	ret
    29bc:	1e c1       	rjmp	.+572    	; 0x2bfa <__fp_zero>
    29be:	67 2f       	mov	r22, r23
    29c0:	78 2f       	mov	r23, r24
    29c2:	88 27       	eor	r24, r24
    29c4:	b8 5f       	subi	r27, 0xF8	; 248
    29c6:	39 f0       	breq	.+14     	; 0x29d6 <__fixunssfsi+0x46>
    29c8:	b9 3f       	cpi	r27, 0xF9	; 249
    29ca:	cc f3       	brlt	.-14     	; 0x29be <__fixunssfsi+0x2e>
    29cc:	86 95       	lsr	r24
    29ce:	77 95       	ror	r23
    29d0:	67 95       	ror	r22
    29d2:	b3 95       	inc	r27
    29d4:	d9 f7       	brne	.-10     	; 0x29cc <__fixunssfsi+0x3c>
    29d6:	3e f4       	brtc	.+14     	; 0x29e6 <__fixunssfsi+0x56>
    29d8:	90 95       	com	r25
    29da:	80 95       	com	r24
    29dc:	70 95       	com	r23
    29de:	61 95       	neg	r22
    29e0:	7f 4f       	sbci	r23, 0xFF	; 255
    29e2:	8f 4f       	sbci	r24, 0xFF	; 255
    29e4:	9f 4f       	sbci	r25, 0xFF	; 255
    29e6:	08 95       	ret

000029e8 <__floatunsisf>:
    29e8:	e8 94       	clt
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <__floatsisf+0x12>

000029ec <__floatsisf>:
    29ec:	97 fb       	bst	r25, 7
    29ee:	3e f4       	brtc	.+14     	; 0x29fe <__floatsisf+0x12>
    29f0:	90 95       	com	r25
    29f2:	80 95       	com	r24
    29f4:	70 95       	com	r23
    29f6:	61 95       	neg	r22
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	8f 4f       	sbci	r24, 0xFF	; 255
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	99 23       	and	r25, r25
    2a00:	a9 f0       	breq	.+42     	; 0x2a2c <__floatsisf+0x40>
    2a02:	f9 2f       	mov	r31, r25
    2a04:	96 e9       	ldi	r25, 0x96	; 150
    2a06:	bb 27       	eor	r27, r27
    2a08:	93 95       	inc	r25
    2a0a:	f6 95       	lsr	r31
    2a0c:	87 95       	ror	r24
    2a0e:	77 95       	ror	r23
    2a10:	67 95       	ror	r22
    2a12:	b7 95       	ror	r27
    2a14:	f1 11       	cpse	r31, r1
    2a16:	f8 cf       	rjmp	.-16     	; 0x2a08 <__floatsisf+0x1c>
    2a18:	fa f4       	brpl	.+62     	; 0x2a58 <__floatsisf+0x6c>
    2a1a:	bb 0f       	add	r27, r27
    2a1c:	11 f4       	brne	.+4      	; 0x2a22 <__floatsisf+0x36>
    2a1e:	60 ff       	sbrs	r22, 0
    2a20:	1b c0       	rjmp	.+54     	; 0x2a58 <__floatsisf+0x6c>
    2a22:	6f 5f       	subi	r22, 0xFF	; 255
    2a24:	7f 4f       	sbci	r23, 0xFF	; 255
    2a26:	8f 4f       	sbci	r24, 0xFF	; 255
    2a28:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2a:	16 c0       	rjmp	.+44     	; 0x2a58 <__floatsisf+0x6c>
    2a2c:	88 23       	and	r24, r24
    2a2e:	11 f0       	breq	.+4      	; 0x2a34 <__floatsisf+0x48>
    2a30:	96 e9       	ldi	r25, 0x96	; 150
    2a32:	11 c0       	rjmp	.+34     	; 0x2a56 <__floatsisf+0x6a>
    2a34:	77 23       	and	r23, r23
    2a36:	21 f0       	breq	.+8      	; 0x2a40 <__floatsisf+0x54>
    2a38:	9e e8       	ldi	r25, 0x8E	; 142
    2a3a:	87 2f       	mov	r24, r23
    2a3c:	76 2f       	mov	r23, r22
    2a3e:	05 c0       	rjmp	.+10     	; 0x2a4a <__floatsisf+0x5e>
    2a40:	66 23       	and	r22, r22
    2a42:	71 f0       	breq	.+28     	; 0x2a60 <__floatsisf+0x74>
    2a44:	96 e8       	ldi	r25, 0x86	; 134
    2a46:	86 2f       	mov	r24, r22
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	2a f0       	brmi	.+10     	; 0x2a58 <__floatsisf+0x6c>
    2a4e:	9a 95       	dec	r25
    2a50:	66 0f       	add	r22, r22
    2a52:	77 1f       	adc	r23, r23
    2a54:	88 1f       	adc	r24, r24
    2a56:	da f7       	brpl	.-10     	; 0x2a4e <__floatsisf+0x62>
    2a58:	88 0f       	add	r24, r24
    2a5a:	96 95       	lsr	r25
    2a5c:	87 95       	ror	r24
    2a5e:	97 f9       	bld	r25, 7
    2a60:	08 95       	ret

00002a62 <__fp_cmp>:
    2a62:	99 0f       	add	r25, r25
    2a64:	00 08       	sbc	r0, r0
    2a66:	55 0f       	add	r21, r21
    2a68:	aa 0b       	sbc	r26, r26
    2a6a:	e0 e8       	ldi	r30, 0x80	; 128
    2a6c:	fe ef       	ldi	r31, 0xFE	; 254
    2a6e:	16 16       	cp	r1, r22
    2a70:	17 06       	cpc	r1, r23
    2a72:	e8 07       	cpc	r30, r24
    2a74:	f9 07       	cpc	r31, r25
    2a76:	c0 f0       	brcs	.+48     	; 0x2aa8 <__fp_cmp+0x46>
    2a78:	12 16       	cp	r1, r18
    2a7a:	13 06       	cpc	r1, r19
    2a7c:	e4 07       	cpc	r30, r20
    2a7e:	f5 07       	cpc	r31, r21
    2a80:	98 f0       	brcs	.+38     	; 0x2aa8 <__fp_cmp+0x46>
    2a82:	62 1b       	sub	r22, r18
    2a84:	73 0b       	sbc	r23, r19
    2a86:	84 0b       	sbc	r24, r20
    2a88:	95 0b       	sbc	r25, r21
    2a8a:	39 f4       	brne	.+14     	; 0x2a9a <__fp_cmp+0x38>
    2a8c:	0a 26       	eor	r0, r26
    2a8e:	61 f0       	breq	.+24     	; 0x2aa8 <__fp_cmp+0x46>
    2a90:	23 2b       	or	r18, r19
    2a92:	24 2b       	or	r18, r20
    2a94:	25 2b       	or	r18, r21
    2a96:	21 f4       	brne	.+8      	; 0x2aa0 <__fp_cmp+0x3e>
    2a98:	08 95       	ret
    2a9a:	0a 26       	eor	r0, r26
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <__fp_cmp+0x3e>
    2a9e:	a1 40       	sbci	r26, 0x01	; 1
    2aa0:	a6 95       	lsr	r26
    2aa2:	8f ef       	ldi	r24, 0xFF	; 255
    2aa4:	81 1d       	adc	r24, r1
    2aa6:	81 1d       	adc	r24, r1
    2aa8:	08 95       	ret

00002aaa <__fp_inf>:
    2aaa:	97 f9       	bld	r25, 7
    2aac:	9f 67       	ori	r25, 0x7F	; 127
    2aae:	80 e8       	ldi	r24, 0x80	; 128
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	08 95       	ret

00002ab6 <__fp_nan>:
    2ab6:	9f ef       	ldi	r25, 0xFF	; 255
    2ab8:	80 ec       	ldi	r24, 0xC0	; 192
    2aba:	08 95       	ret

00002abc <__fp_powser>:
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	1f 93       	push	r17
    2ac2:	0f 93       	push	r16
    2ac4:	ff 92       	push	r15
    2ac6:	ef 92       	push	r14
    2ac8:	df 92       	push	r13
    2aca:	7b 01       	movw	r14, r22
    2acc:	8c 01       	movw	r16, r24
    2ace:	68 94       	set
    2ad0:	05 c0       	rjmp	.+10     	; 0x2adc <__fp_powser+0x20>
    2ad2:	da 2e       	mov	r13, r26
    2ad4:	ef 01       	movw	r28, r30
    2ad6:	5d d1       	rcall	.+698    	; 0x2d92 <__mulsf3x>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e8 94       	clt
    2adc:	a5 91       	lpm	r26, Z+
    2ade:	25 91       	lpm	r18, Z+
    2ae0:	35 91       	lpm	r19, Z+
    2ae2:	45 91       	lpm	r20, Z+
    2ae4:	55 91       	lpm	r21, Z+
    2ae6:	ae f3       	brts	.-22     	; 0x2ad2 <__fp_powser+0x16>
    2ae8:	ef 01       	movw	r28, r30
    2aea:	f8 dd       	rcall	.-1040   	; 0x26dc <__addsf3x>
    2aec:	fe 01       	movw	r30, r28
    2aee:	97 01       	movw	r18, r14
    2af0:	a8 01       	movw	r20, r16
    2af2:	da 94       	dec	r13
    2af4:	79 f7       	brne	.-34     	; 0x2ad4 <__fp_powser+0x18>
    2af6:	df 90       	pop	r13
    2af8:	ef 90       	pop	r14
    2afa:	ff 90       	pop	r15
    2afc:	0f 91       	pop	r16
    2afe:	1f 91       	pop	r17
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <__fp_pscA>:
    2b06:	00 24       	eor	r0, r0
    2b08:	0a 94       	dec	r0
    2b0a:	16 16       	cp	r1, r22
    2b0c:	17 06       	cpc	r1, r23
    2b0e:	18 06       	cpc	r1, r24
    2b10:	09 06       	cpc	r0, r25
    2b12:	08 95       	ret

00002b14 <__fp_pscB>:
    2b14:	00 24       	eor	r0, r0
    2b16:	0a 94       	dec	r0
    2b18:	12 16       	cp	r1, r18
    2b1a:	13 06       	cpc	r1, r19
    2b1c:	14 06       	cpc	r1, r20
    2b1e:	05 06       	cpc	r0, r21
    2b20:	08 95       	ret
    2b22:	c9 cf       	rjmp	.-110    	; 0x2ab6 <__fp_nan>

00002b24 <__fp_rempio2>:
    2b24:	50 d0       	rcall	.+160    	; 0x2bc6 <__fp_splitA>
    2b26:	e8 f3       	brcs	.-6      	; 0x2b22 <__fp_pscB+0xe>
    2b28:	e8 94       	clt
    2b2a:	e0 e0       	ldi	r30, 0x00	; 0
    2b2c:	bb 27       	eor	r27, r27
    2b2e:	9f 57       	subi	r25, 0x7F	; 127
    2b30:	f0 f0       	brcs	.+60     	; 0x2b6e <__fp_rempio2+0x4a>
    2b32:	2a ed       	ldi	r18, 0xDA	; 218
    2b34:	3f e0       	ldi	r19, 0x0F	; 15
    2b36:	49 ec       	ldi	r20, 0xC9	; 201
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <__fp_rempio2+0x22>
    2b3a:	ee 0f       	add	r30, r30
    2b3c:	bb 0f       	add	r27, r27
    2b3e:	66 1f       	adc	r22, r22
    2b40:	77 1f       	adc	r23, r23
    2b42:	88 1f       	adc	r24, r24
    2b44:	28 f0       	brcs	.+10     	; 0x2b50 <__fp_rempio2+0x2c>
    2b46:	b2 3a       	cpi	r27, 0xA2	; 162
    2b48:	62 07       	cpc	r22, r18
    2b4a:	73 07       	cpc	r23, r19
    2b4c:	84 07       	cpc	r24, r20
    2b4e:	28 f0       	brcs	.+10     	; 0x2b5a <__fp_rempio2+0x36>
    2b50:	b2 5a       	subi	r27, 0xA2	; 162
    2b52:	62 0b       	sbc	r22, r18
    2b54:	73 0b       	sbc	r23, r19
    2b56:	84 0b       	sbc	r24, r20
    2b58:	e3 95       	inc	r30
    2b5a:	9a 95       	dec	r25
    2b5c:	72 f7       	brpl	.-36     	; 0x2b3a <__fp_rempio2+0x16>
    2b5e:	80 38       	cpi	r24, 0x80	; 128
    2b60:	30 f4       	brcc	.+12     	; 0x2b6e <__fp_rempio2+0x4a>
    2b62:	9a 95       	dec	r25
    2b64:	bb 0f       	add	r27, r27
    2b66:	66 1f       	adc	r22, r22
    2b68:	77 1f       	adc	r23, r23
    2b6a:	88 1f       	adc	r24, r24
    2b6c:	d2 f7       	brpl	.-12     	; 0x2b62 <__fp_rempio2+0x3e>
    2b6e:	90 48       	sbci	r25, 0x80	; 128
    2b70:	b4 c1       	rjmp	.+872    	; 0x2eda <__fp_mpack_finite>

00002b72 <__fp_round>:
    2b72:	09 2e       	mov	r0, r25
    2b74:	03 94       	inc	r0
    2b76:	00 0c       	add	r0, r0
    2b78:	11 f4       	brne	.+4      	; 0x2b7e <__fp_round+0xc>
    2b7a:	88 23       	and	r24, r24
    2b7c:	52 f0       	brmi	.+20     	; 0x2b92 <__fp_round+0x20>
    2b7e:	bb 0f       	add	r27, r27
    2b80:	40 f4       	brcc	.+16     	; 0x2b92 <__fp_round+0x20>
    2b82:	bf 2b       	or	r27, r31
    2b84:	11 f4       	brne	.+4      	; 0x2b8a <__fp_round+0x18>
    2b86:	60 ff       	sbrs	r22, 0
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__fp_round+0x20>
    2b8a:	6f 5f       	subi	r22, 0xFF	; 255
    2b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b90:	9f 4f       	sbci	r25, 0xFF	; 255
    2b92:	08 95       	ret

00002b94 <__fp_sinus>:
    2b94:	ef 93       	push	r30
    2b96:	e0 ff       	sbrs	r30, 0
    2b98:	06 c0       	rjmp	.+12     	; 0x2ba6 <__fp_sinus+0x12>
    2b9a:	a2 ea       	ldi	r26, 0xA2	; 162
    2b9c:	2a ed       	ldi	r18, 0xDA	; 218
    2b9e:	3f e0       	ldi	r19, 0x0F	; 15
    2ba0:	49 ec       	ldi	r20, 0xC9	; 201
    2ba2:	5f eb       	ldi	r21, 0xBF	; 191
    2ba4:	9b dd       	rcall	.-1226   	; 0x26dc <__addsf3x>
    2ba6:	e5 df       	rcall	.-54     	; 0x2b72 <__fp_round>
    2ba8:	0f 90       	pop	r0
    2baa:	03 94       	inc	r0
    2bac:	01 fc       	sbrc	r0, 1
    2bae:	90 58       	subi	r25, 0x80	; 128
    2bb0:	e1 e0       	ldi	r30, 0x01	; 1
    2bb2:	f1 e0       	ldi	r31, 0x01	; 1
    2bb4:	a5 c1       	rjmp	.+842    	; 0x2f00 <__fp_powsodd>

00002bb6 <__fp_split3>:
    2bb6:	57 fd       	sbrc	r21, 7
    2bb8:	90 58       	subi	r25, 0x80	; 128
    2bba:	44 0f       	add	r20, r20
    2bbc:	55 1f       	adc	r21, r21
    2bbe:	59 f0       	breq	.+22     	; 0x2bd6 <__fp_splitA+0x10>
    2bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc2:	71 f0       	breq	.+28     	; 0x2be0 <__fp_splitA+0x1a>
    2bc4:	47 95       	ror	r20

00002bc6 <__fp_splitA>:
    2bc6:	88 0f       	add	r24, r24
    2bc8:	97 fb       	bst	r25, 7
    2bca:	99 1f       	adc	r25, r25
    2bcc:	61 f0       	breq	.+24     	; 0x2be6 <__fp_splitA+0x20>
    2bce:	9f 3f       	cpi	r25, 0xFF	; 255
    2bd0:	79 f0       	breq	.+30     	; 0x2bf0 <__fp_splitA+0x2a>
    2bd2:	87 95       	ror	r24
    2bd4:	08 95       	ret
    2bd6:	12 16       	cp	r1, r18
    2bd8:	13 06       	cpc	r1, r19
    2bda:	14 06       	cpc	r1, r20
    2bdc:	55 1f       	adc	r21, r21
    2bde:	f2 cf       	rjmp	.-28     	; 0x2bc4 <__fp_split3+0xe>
    2be0:	46 95       	lsr	r20
    2be2:	f1 df       	rcall	.-30     	; 0x2bc6 <__fp_splitA>
    2be4:	08 c0       	rjmp	.+16     	; 0x2bf6 <__fp_splitA+0x30>
    2be6:	16 16       	cp	r1, r22
    2be8:	17 06       	cpc	r1, r23
    2bea:	18 06       	cpc	r1, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	f1 cf       	rjmp	.-30     	; 0x2bd2 <__fp_splitA+0xc>
    2bf0:	86 95       	lsr	r24
    2bf2:	71 05       	cpc	r23, r1
    2bf4:	61 05       	cpc	r22, r1
    2bf6:	08 94       	sec
    2bf8:	08 95       	ret

00002bfa <__fp_zero>:
    2bfa:	e8 94       	clt

00002bfc <__fp_szero>:
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	66 27       	eor	r22, r22
    2c00:	77 27       	eor	r23, r23
    2c02:	cb 01       	movw	r24, r22
    2c04:	97 f9       	bld	r25, 7
    2c06:	08 95       	ret

00002c08 <__gesf2>:
    2c08:	2c df       	rcall	.-424    	; 0x2a62 <__fp_cmp>
    2c0a:	08 f4       	brcc	.+2      	; 0x2c0e <__gesf2+0x6>
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	08 95       	ret

00002c10 <inverse>:
    2c10:	9b 01       	movw	r18, r22
    2c12:	ac 01       	movw	r20, r24
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	80 e8       	ldi	r24, 0x80	; 128
    2c1a:	9f e3       	ldi	r25, 0x3F	; 63
    2c1c:	1b ce       	rjmp	.-970    	; 0x2854 <__divsf3>
    2c1e:	45 cf       	rjmp	.-374    	; 0x2aaa <__fp_inf>
    2c20:	5a c1       	rjmp	.+692    	; 0x2ed6 <__fp_mpack>

00002c22 <ldexp>:
    2c22:	d1 df       	rcall	.-94     	; 0x2bc6 <__fp_splitA>
    2c24:	e8 f3       	brcs	.-6      	; 0x2c20 <inverse+0x10>
    2c26:	99 23       	and	r25, r25
    2c28:	d9 f3       	breq	.-10     	; 0x2c20 <inverse+0x10>
    2c2a:	94 0f       	add	r25, r20
    2c2c:	51 1d       	adc	r21, r1
    2c2e:	bb f3       	brvs	.-18     	; 0x2c1e <inverse+0xe>
    2c30:	91 50       	subi	r25, 0x01	; 1
    2c32:	50 40       	sbci	r21, 0x00	; 0
    2c34:	94 f0       	brlt	.+36     	; 0x2c5a <ldexp+0x38>
    2c36:	59 f0       	breq	.+22     	; 0x2c4e <ldexp+0x2c>
    2c38:	88 23       	and	r24, r24
    2c3a:	32 f0       	brmi	.+12     	; 0x2c48 <ldexp+0x26>
    2c3c:	66 0f       	add	r22, r22
    2c3e:	77 1f       	adc	r23, r23
    2c40:	88 1f       	adc	r24, r24
    2c42:	91 50       	subi	r25, 0x01	; 1
    2c44:	50 40       	sbci	r21, 0x00	; 0
    2c46:	c1 f7       	brne	.-16     	; 0x2c38 <ldexp+0x16>
    2c48:	9e 3f       	cpi	r25, 0xFE	; 254
    2c4a:	51 05       	cpc	r21, r1
    2c4c:	44 f7       	brge	.-48     	; 0x2c1e <inverse+0xe>
    2c4e:	88 0f       	add	r24, r24
    2c50:	91 1d       	adc	r25, r1
    2c52:	96 95       	lsr	r25
    2c54:	87 95       	ror	r24
    2c56:	97 f9       	bld	r25, 7
    2c58:	08 95       	ret
    2c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c5c:	ac f0       	brlt	.+42     	; 0x2c88 <ldexp+0x66>
    2c5e:	98 3e       	cpi	r25, 0xE8	; 232
    2c60:	9c f0       	brlt	.+38     	; 0x2c88 <ldexp+0x66>
    2c62:	bb 27       	eor	r27, r27
    2c64:	86 95       	lsr	r24
    2c66:	77 95       	ror	r23
    2c68:	67 95       	ror	r22
    2c6a:	b7 95       	ror	r27
    2c6c:	08 f4       	brcc	.+2      	; 0x2c70 <ldexp+0x4e>
    2c6e:	b1 60       	ori	r27, 0x01	; 1
    2c70:	93 95       	inc	r25
    2c72:	c1 f7       	brne	.-16     	; 0x2c64 <ldexp+0x42>
    2c74:	bb 0f       	add	r27, r27
    2c76:	58 f7       	brcc	.-42     	; 0x2c4e <ldexp+0x2c>
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <ldexp+0x5c>
    2c7a:	60 ff       	sbrs	r22, 0
    2c7c:	e8 cf       	rjmp	.-48     	; 0x2c4e <ldexp+0x2c>
    2c7e:	6f 5f       	subi	r22, 0xFF	; 255
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	8f 4f       	sbci	r24, 0xFF	; 255
    2c84:	9f 4f       	sbci	r25, 0xFF	; 255
    2c86:	e3 cf       	rjmp	.-58     	; 0x2c4e <ldexp+0x2c>
    2c88:	b9 cf       	rjmp	.-142    	; 0x2bfc <__fp_szero>
    2c8a:	0e f0       	brts	.+2      	; 0x2c8e <ldexp+0x6c>
    2c8c:	24 c1       	rjmp	.+584    	; 0x2ed6 <__fp_mpack>
    2c8e:	13 cf       	rjmp	.-474    	; 0x2ab6 <__fp_nan>
    2c90:	68 94       	set
    2c92:	0b cf       	rjmp	.-490    	; 0x2aaa <__fp_inf>

00002c94 <log>:
    2c94:	98 df       	rcall	.-208    	; 0x2bc6 <__fp_splitA>
    2c96:	c8 f3       	brcs	.-14     	; 0x2c8a <ldexp+0x68>
    2c98:	99 23       	and	r25, r25
    2c9a:	d1 f3       	breq	.-12     	; 0x2c90 <ldexp+0x6e>
    2c9c:	c6 f3       	brts	.-16     	; 0x2c8e <ldexp+0x6c>
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	1f 93       	push	r17
    2ca4:	0f 93       	push	r16
    2ca6:	ff 92       	push	r15
    2ca8:	c9 2f       	mov	r28, r25
    2caa:	dd 27       	eor	r29, r29
    2cac:	88 23       	and	r24, r24
    2cae:	2a f0       	brmi	.+10     	; 0x2cba <log+0x26>
    2cb0:	21 97       	sbiw	r28, 0x01	; 1
    2cb2:	66 0f       	add	r22, r22
    2cb4:	77 1f       	adc	r23, r23
    2cb6:	88 1f       	adc	r24, r24
    2cb8:	da f7       	brpl	.-10     	; 0x2cb0 <log+0x1c>
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f eb       	ldi	r21, 0xBF	; 191
    2cc2:	9f e3       	ldi	r25, 0x3F	; 63
    2cc4:	88 39       	cpi	r24, 0x98	; 152
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <log+0x3c>
    2cc8:	80 3e       	cpi	r24, 0xE0	; 224
    2cca:	30 f0       	brcs	.+12     	; 0x2cd8 <log+0x44>
    2ccc:	21 96       	adiw	r28, 0x01	; 1
    2cce:	8f 77       	andi	r24, 0x7F	; 127
    2cd0:	f4 dc       	rcall	.-1560   	; 0x26ba <__addsf3>
    2cd2:	ef e1       	ldi	r30, 0x1F	; 31
    2cd4:	f1 e0       	ldi	r31, 0x01	; 1
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <log+0x4a>
    2cd8:	f0 dc       	rcall	.-1568   	; 0x26ba <__addsf3>
    2cda:	ec e4       	ldi	r30, 0x4C	; 76
    2cdc:	f1 e0       	ldi	r31, 0x01	; 1
    2cde:	ee de       	rcall	.-548    	; 0x2abc <__fp_powser>
    2ce0:	8b 01       	movw	r16, r22
    2ce2:	be 01       	movw	r22, r28
    2ce4:	ec 01       	movw	r28, r24
    2ce6:	fb 2e       	mov	r15, r27
    2ce8:	6f 57       	subi	r22, 0x7F	; 127
    2cea:	71 09       	sbc	r23, r1
    2cec:	75 95       	asr	r23
    2cee:	77 1f       	adc	r23, r23
    2cf0:	88 0b       	sbc	r24, r24
    2cf2:	99 0b       	sbc	r25, r25
    2cf4:	7b de       	rcall	.-778    	; 0x29ec <__floatsisf>
    2cf6:	28 e1       	ldi	r18, 0x18	; 24
    2cf8:	32 e7       	ldi	r19, 0x72	; 114
    2cfa:	41 e3       	ldi	r20, 0x31	; 49
    2cfc:	5f e3       	ldi	r21, 0x3F	; 63
    2cfe:	49 d0       	rcall	.+146    	; 0x2d92 <__mulsf3x>
    2d00:	af 2d       	mov	r26, r15
    2d02:	98 01       	movw	r18, r16
    2d04:	ae 01       	movw	r20, r28
    2d06:	ff 90       	pop	r15
    2d08:	0f 91       	pop	r16
    2d0a:	1f 91       	pop	r17
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	e5 dc       	rcall	.-1590   	; 0x26dc <__addsf3x>
    2d12:	2f cf       	rjmp	.-418    	; 0x2b72 <__fp_round>

00002d14 <modf>:
    2d14:	fa 01       	movw	r30, r20
    2d16:	dc 01       	movw	r26, r24
    2d18:	aa 0f       	add	r26, r26
    2d1a:	bb 1f       	adc	r27, r27
    2d1c:	9b 01       	movw	r18, r22
    2d1e:	ac 01       	movw	r20, r24
    2d20:	bf 57       	subi	r27, 0x7F	; 127
    2d22:	28 f4       	brcc	.+10     	; 0x2d2e <modf+0x1a>
    2d24:	22 27       	eor	r18, r18
    2d26:	33 27       	eor	r19, r19
    2d28:	44 27       	eor	r20, r20
    2d2a:	50 78       	andi	r21, 0x80	; 128
    2d2c:	1f c0       	rjmp	.+62     	; 0x2d6c <modf+0x58>
    2d2e:	b7 51       	subi	r27, 0x17	; 23
    2d30:	88 f4       	brcc	.+34     	; 0x2d54 <modf+0x40>
    2d32:	ab 2f       	mov	r26, r27
    2d34:	00 24       	eor	r0, r0
    2d36:	46 95       	lsr	r20
    2d38:	37 95       	ror	r19
    2d3a:	27 95       	ror	r18
    2d3c:	01 1c       	adc	r0, r1
    2d3e:	a3 95       	inc	r26
    2d40:	d2 f3       	brmi	.-12     	; 0x2d36 <modf+0x22>
    2d42:	00 20       	and	r0, r0
    2d44:	69 f0       	breq	.+26     	; 0x2d60 <modf+0x4c>
    2d46:	22 0f       	add	r18, r18
    2d48:	33 1f       	adc	r19, r19
    2d4a:	44 1f       	adc	r20, r20
    2d4c:	b3 95       	inc	r27
    2d4e:	da f3       	brmi	.-10     	; 0x2d46 <modf+0x32>
    2d50:	0d d0       	rcall	.+26     	; 0x2d6c <modf+0x58>
    2d52:	b2 cc       	rjmp	.-1692   	; 0x26b8 <__subsf3>
    2d54:	61 30       	cpi	r22, 0x01	; 1
    2d56:	71 05       	cpc	r23, r1
    2d58:	a0 e8       	ldi	r26, 0x80	; 128
    2d5a:	8a 07       	cpc	r24, r26
    2d5c:	b9 46       	sbci	r27, 0x69	; 105
    2d5e:	30 f4       	brcc	.+12     	; 0x2d6c <modf+0x58>
    2d60:	9b 01       	movw	r18, r22
    2d62:	ac 01       	movw	r20, r24
    2d64:	66 27       	eor	r22, r22
    2d66:	77 27       	eor	r23, r23
    2d68:	88 27       	eor	r24, r24
    2d6a:	90 78       	andi	r25, 0x80	; 128
    2d6c:	30 96       	adiw	r30, 0x00	; 0
    2d6e:	21 f0       	breq	.+8      	; 0x2d78 <modf+0x64>
    2d70:	20 83       	st	Z, r18
    2d72:	31 83       	std	Z+1, r19	; 0x01
    2d74:	42 83       	std	Z+2, r20	; 0x02
    2d76:	53 83       	std	Z+3, r21	; 0x03
    2d78:	08 95       	ret

00002d7a <__mulsf3>:
    2d7a:	0b d0       	rcall	.+22     	; 0x2d92 <__mulsf3x>
    2d7c:	fa ce       	rjmp	.-524    	; 0x2b72 <__fp_round>
    2d7e:	c3 de       	rcall	.-634    	; 0x2b06 <__fp_pscA>
    2d80:	28 f0       	brcs	.+10     	; 0x2d8c <__mulsf3+0x12>
    2d82:	c8 de       	rcall	.-624    	; 0x2b14 <__fp_pscB>
    2d84:	18 f0       	brcs	.+6      	; 0x2d8c <__mulsf3+0x12>
    2d86:	95 23       	and	r25, r21
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <__mulsf3+0x12>
    2d8a:	8f ce       	rjmp	.-738    	; 0x2aaa <__fp_inf>
    2d8c:	94 ce       	rjmp	.-728    	; 0x2ab6 <__fp_nan>
    2d8e:	11 24       	eor	r1, r1
    2d90:	35 cf       	rjmp	.-406    	; 0x2bfc <__fp_szero>

00002d92 <__mulsf3x>:
    2d92:	11 df       	rcall	.-478    	; 0x2bb6 <__fp_split3>
    2d94:	a0 f3       	brcs	.-24     	; 0x2d7e <__mulsf3+0x4>

00002d96 <__mulsf3_pse>:
    2d96:	95 9f       	mul	r25, r21
    2d98:	d1 f3       	breq	.-12     	; 0x2d8e <__mulsf3+0x14>
    2d9a:	95 0f       	add	r25, r21
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	55 1f       	adc	r21, r21
    2da0:	62 9f       	mul	r22, r18
    2da2:	f0 01       	movw	r30, r0
    2da4:	72 9f       	mul	r23, r18
    2da6:	bb 27       	eor	r27, r27
    2da8:	f0 0d       	add	r31, r0
    2daa:	b1 1d       	adc	r27, r1
    2dac:	63 9f       	mul	r22, r19
    2dae:	aa 27       	eor	r26, r26
    2db0:	f0 0d       	add	r31, r0
    2db2:	b1 1d       	adc	r27, r1
    2db4:	aa 1f       	adc	r26, r26
    2db6:	64 9f       	mul	r22, r20
    2db8:	66 27       	eor	r22, r22
    2dba:	b0 0d       	add	r27, r0
    2dbc:	a1 1d       	adc	r26, r1
    2dbe:	66 1f       	adc	r22, r22
    2dc0:	82 9f       	mul	r24, r18
    2dc2:	22 27       	eor	r18, r18
    2dc4:	b0 0d       	add	r27, r0
    2dc6:	a1 1d       	adc	r26, r1
    2dc8:	62 1f       	adc	r22, r18
    2dca:	73 9f       	mul	r23, r19
    2dcc:	b0 0d       	add	r27, r0
    2dce:	a1 1d       	adc	r26, r1
    2dd0:	62 1f       	adc	r22, r18
    2dd2:	83 9f       	mul	r24, r19
    2dd4:	a0 0d       	add	r26, r0
    2dd6:	61 1d       	adc	r22, r1
    2dd8:	22 1f       	adc	r18, r18
    2dda:	74 9f       	mul	r23, r20
    2ddc:	33 27       	eor	r19, r19
    2dde:	a0 0d       	add	r26, r0
    2de0:	61 1d       	adc	r22, r1
    2de2:	23 1f       	adc	r18, r19
    2de4:	84 9f       	mul	r24, r20
    2de6:	60 0d       	add	r22, r0
    2de8:	21 1d       	adc	r18, r1
    2dea:	82 2f       	mov	r24, r18
    2dec:	76 2f       	mov	r23, r22
    2dee:	6a 2f       	mov	r22, r26
    2df0:	11 24       	eor	r1, r1
    2df2:	9f 57       	subi	r25, 0x7F	; 127
    2df4:	50 40       	sbci	r21, 0x00	; 0
    2df6:	8a f0       	brmi	.+34     	; 0x2e1a <__mulsf3_pse+0x84>
    2df8:	e1 f0       	breq	.+56     	; 0x2e32 <__mulsf3_pse+0x9c>
    2dfa:	88 23       	and	r24, r24
    2dfc:	4a f0       	brmi	.+18     	; 0x2e10 <__mulsf3_pse+0x7a>
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	bb 1f       	adc	r27, r27
    2e04:	66 1f       	adc	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 1f       	adc	r24, r24
    2e0a:	91 50       	subi	r25, 0x01	; 1
    2e0c:	50 40       	sbci	r21, 0x00	; 0
    2e0e:	a9 f7       	brne	.-22     	; 0x2dfa <__mulsf3_pse+0x64>
    2e10:	9e 3f       	cpi	r25, 0xFE	; 254
    2e12:	51 05       	cpc	r21, r1
    2e14:	70 f0       	brcs	.+28     	; 0x2e32 <__mulsf3_pse+0x9c>
    2e16:	49 ce       	rjmp	.-878    	; 0x2aaa <__fp_inf>
    2e18:	f1 ce       	rjmp	.-542    	; 0x2bfc <__fp_szero>
    2e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e1c:	ec f3       	brlt	.-6      	; 0x2e18 <__mulsf3_pse+0x82>
    2e1e:	98 3e       	cpi	r25, 0xE8	; 232
    2e20:	dc f3       	brlt	.-10     	; 0x2e18 <__mulsf3_pse+0x82>
    2e22:	86 95       	lsr	r24
    2e24:	77 95       	ror	r23
    2e26:	67 95       	ror	r22
    2e28:	b7 95       	ror	r27
    2e2a:	f7 95       	ror	r31
    2e2c:	e7 95       	ror	r30
    2e2e:	9f 5f       	subi	r25, 0xFF	; 255
    2e30:	c1 f7       	brne	.-16     	; 0x2e22 <__mulsf3_pse+0x8c>
    2e32:	fe 2b       	or	r31, r30
    2e34:	88 0f       	add	r24, r24
    2e36:	91 1d       	adc	r25, r1
    2e38:	96 95       	lsr	r25
    2e3a:	87 95       	ror	r24
    2e3c:	97 f9       	bld	r25, 7
    2e3e:	08 95       	ret

00002e40 <sin>:
    2e40:	9f 93       	push	r25
    2e42:	70 de       	rcall	.-800    	; 0x2b24 <__fp_rempio2>
    2e44:	0f 90       	pop	r0
    2e46:	07 fc       	sbrc	r0, 7
    2e48:	ee 5f       	subi	r30, 0xFE	; 254
    2e4a:	a4 ce       	rjmp	.-696    	; 0x2b94 <__fp_sinus>
    2e4c:	11 f4       	brne	.+4      	; 0x2e52 <sin+0x12>
    2e4e:	0e f4       	brtc	.+2      	; 0x2e52 <sin+0x12>
    2e50:	32 ce       	rjmp	.-924    	; 0x2ab6 <__fp_nan>
    2e52:	41 c0       	rjmp	.+130    	; 0x2ed6 <__fp_mpack>

00002e54 <sqrt>:
    2e54:	b8 de       	rcall	.-656    	; 0x2bc6 <__fp_splitA>
    2e56:	d0 f3       	brcs	.-12     	; 0x2e4c <sin+0xc>
    2e58:	99 23       	and	r25, r25
    2e5a:	d9 f3       	breq	.-10     	; 0x2e52 <sin+0x12>
    2e5c:	ce f3       	brts	.-14     	; 0x2e50 <sin+0x10>
    2e5e:	9f 57       	subi	r25, 0x7F	; 127
    2e60:	55 0b       	sbc	r21, r21
    2e62:	87 ff       	sbrs	r24, 7
    2e64:	46 d0       	rcall	.+140    	; 0x2ef2 <__fp_norm2>
    2e66:	00 24       	eor	r0, r0
    2e68:	a0 e6       	ldi	r26, 0x60	; 96
    2e6a:	40 ea       	ldi	r20, 0xA0	; 160
    2e6c:	90 01       	movw	r18, r0
    2e6e:	80 58       	subi	r24, 0x80	; 128
    2e70:	56 95       	lsr	r21
    2e72:	97 95       	ror	r25
    2e74:	28 f4       	brcc	.+10     	; 0x2e80 <sqrt+0x2c>
    2e76:	80 5c       	subi	r24, 0xC0	; 192
    2e78:	66 0f       	add	r22, r22
    2e7a:	77 1f       	adc	r23, r23
    2e7c:	88 1f       	adc	r24, r24
    2e7e:	20 f0       	brcs	.+8      	; 0x2e88 <sqrt+0x34>
    2e80:	26 17       	cp	r18, r22
    2e82:	37 07       	cpc	r19, r23
    2e84:	48 07       	cpc	r20, r24
    2e86:	30 f4       	brcc	.+12     	; 0x2e94 <sqrt+0x40>
    2e88:	62 1b       	sub	r22, r18
    2e8a:	73 0b       	sbc	r23, r19
    2e8c:	84 0b       	sbc	r24, r20
    2e8e:	20 29       	or	r18, r0
    2e90:	31 29       	or	r19, r1
    2e92:	4a 2b       	or	r20, r26
    2e94:	a6 95       	lsr	r26
    2e96:	17 94       	ror	r1
    2e98:	07 94       	ror	r0
    2e9a:	20 25       	eor	r18, r0
    2e9c:	31 25       	eor	r19, r1
    2e9e:	4a 27       	eor	r20, r26
    2ea0:	58 f7       	brcc	.-42     	; 0x2e78 <sqrt+0x24>
    2ea2:	66 0f       	add	r22, r22
    2ea4:	77 1f       	adc	r23, r23
    2ea6:	88 1f       	adc	r24, r24
    2ea8:	20 f0       	brcs	.+8      	; 0x2eb2 <sqrt+0x5e>
    2eaa:	26 17       	cp	r18, r22
    2eac:	37 07       	cpc	r19, r23
    2eae:	48 07       	cpc	r20, r24
    2eb0:	30 f4       	brcc	.+12     	; 0x2ebe <sqrt+0x6a>
    2eb2:	62 0b       	sbc	r22, r18
    2eb4:	73 0b       	sbc	r23, r19
    2eb6:	84 0b       	sbc	r24, r20
    2eb8:	20 0d       	add	r18, r0
    2eba:	31 1d       	adc	r19, r1
    2ebc:	41 1d       	adc	r20, r1
    2ebe:	a0 95       	com	r26
    2ec0:	81 f7       	brne	.-32     	; 0x2ea2 <sqrt+0x4e>
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	84 2f       	mov	r24, r20
    2ec6:	91 58       	subi	r25, 0x81	; 129
    2ec8:	88 0f       	add	r24, r24
    2eca:	96 95       	lsr	r25
    2ecc:	87 95       	ror	r24
    2ece:	08 95       	ret

00002ed0 <square>:
    2ed0:	9b 01       	movw	r18, r22
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	52 cf       	rjmp	.-348    	; 0x2d7a <__mulsf3>

00002ed6 <__fp_mpack>:
    2ed6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ed8:	31 f0       	breq	.+12     	; 0x2ee6 <__fp_mpack_finite+0xc>

00002eda <__fp_mpack_finite>:
    2eda:	91 50       	subi	r25, 0x01	; 1
    2edc:	20 f4       	brcc	.+8      	; 0x2ee6 <__fp_mpack_finite+0xc>
    2ede:	87 95       	ror	r24
    2ee0:	77 95       	ror	r23
    2ee2:	67 95       	ror	r22
    2ee4:	b7 95       	ror	r27
    2ee6:	88 0f       	add	r24, r24
    2ee8:	91 1d       	adc	r25, r1
    2eea:	96 95       	lsr	r25
    2eec:	87 95       	ror	r24
    2eee:	97 f9       	bld	r25, 7
    2ef0:	08 95       	ret

00002ef2 <__fp_norm2>:
    2ef2:	91 50       	subi	r25, 0x01	; 1
    2ef4:	50 40       	sbci	r21, 0x00	; 0
    2ef6:	66 0f       	add	r22, r22
    2ef8:	77 1f       	adc	r23, r23
    2efa:	88 1f       	adc	r24, r24
    2efc:	d2 f7       	brpl	.-12     	; 0x2ef2 <__fp_norm2>
    2efe:	08 95       	ret

00002f00 <__fp_powsodd>:
    2f00:	9f 93       	push	r25
    2f02:	8f 93       	push	r24
    2f04:	7f 93       	push	r23
    2f06:	6f 93       	push	r22
    2f08:	ff 93       	push	r31
    2f0a:	ef 93       	push	r30
    2f0c:	9b 01       	movw	r18, r22
    2f0e:	ac 01       	movw	r20, r24
    2f10:	34 df       	rcall	.-408    	; 0x2d7a <__mulsf3>
    2f12:	ef 91       	pop	r30
    2f14:	ff 91       	pop	r31
    2f16:	d2 dd       	rcall	.-1116   	; 0x2abc <__fp_powser>
    2f18:	2f 91       	pop	r18
    2f1a:	3f 91       	pop	r19
    2f1c:	4f 91       	pop	r20
    2f1e:	5f 91       	pop	r21
    2f20:	2c cf       	rjmp	.-424    	; 0x2d7a <__mulsf3>

00002f22 <__divmodhi4>:
    2f22:	97 fb       	bst	r25, 7
    2f24:	07 2e       	mov	r0, r23
    2f26:	16 f4       	brtc	.+4      	; 0x2f2c <__divmodhi4+0xa>
    2f28:	00 94       	com	r0
    2f2a:	07 d0       	rcall	.+14     	; 0x2f3a <__divmodhi4_neg1>
    2f2c:	77 fd       	sbrc	r23, 7
    2f2e:	09 d0       	rcall	.+18     	; 0x2f42 <__divmodhi4_neg2>
    2f30:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__udivmodhi4>
    2f34:	07 fc       	sbrc	r0, 7
    2f36:	05 d0       	rcall	.+10     	; 0x2f42 <__divmodhi4_neg2>
    2f38:	3e f4       	brtc	.+14     	; 0x2f48 <__divmodhi4_exit>

00002f3a <__divmodhi4_neg1>:
    2f3a:	90 95       	com	r25
    2f3c:	81 95       	neg	r24
    2f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f40:	08 95       	ret

00002f42 <__divmodhi4_neg2>:
    2f42:	70 95       	com	r23
    2f44:	61 95       	neg	r22
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255

00002f48 <__divmodhi4_exit>:
    2f48:	08 95       	ret

00002f4a <__udivmodhi4>:
    2f4a:	aa 1b       	sub	r26, r26
    2f4c:	bb 1b       	sub	r27, r27
    2f4e:	51 e1       	ldi	r21, 0x11	; 17
    2f50:	07 c0       	rjmp	.+14     	; 0x2f60 <__udivmodhi4_ep>

00002f52 <__udivmodhi4_loop>:
    2f52:	aa 1f       	adc	r26, r26
    2f54:	bb 1f       	adc	r27, r27
    2f56:	a6 17       	cp	r26, r22
    2f58:	b7 07       	cpc	r27, r23
    2f5a:	10 f0       	brcs	.+4      	; 0x2f60 <__udivmodhi4_ep>
    2f5c:	a6 1b       	sub	r26, r22
    2f5e:	b7 0b       	sbc	r27, r23

00002f60 <__udivmodhi4_ep>:
    2f60:	88 1f       	adc	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	5a 95       	dec	r21
    2f66:	a9 f7       	brne	.-22     	; 0x2f52 <__udivmodhi4_loop>
    2f68:	80 95       	com	r24
    2f6a:	90 95       	com	r25
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	08 95       	ret

00002f72 <itoa>:
    2f72:	fb 01       	movw	r30, r22
    2f74:	9f 01       	movw	r18, r30
    2f76:	e8 94       	clt
    2f78:	42 30       	cpi	r20, 0x02	; 2
    2f7a:	c4 f0       	brlt	.+48     	; 0x2fac <itoa+0x3a>
    2f7c:	45 32       	cpi	r20, 0x25	; 37
    2f7e:	b4 f4       	brge	.+44     	; 0x2fac <itoa+0x3a>
    2f80:	4a 30       	cpi	r20, 0x0A	; 10
    2f82:	29 f4       	brne	.+10     	; 0x2f8e <itoa+0x1c>
    2f84:	97 fb       	bst	r25, 7
    2f86:	1e f4       	brtc	.+6      	; 0x2f8e <itoa+0x1c>
    2f88:	90 95       	com	r25
    2f8a:	81 95       	neg	r24
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	64 2f       	mov	r22, r20
    2f90:	77 27       	eor	r23, r23
    2f92:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__udivmodhi4>
    2f96:	80 5d       	subi	r24, 0xD0	; 208
    2f98:	8a 33       	cpi	r24, 0x3A	; 58
    2f9a:	0c f0       	brlt	.+2      	; 0x2f9e <itoa+0x2c>
    2f9c:	89 5d       	subi	r24, 0xD9	; 217
    2f9e:	81 93       	st	Z+, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	a1 f7       	brne	.-24     	; 0x2f8e <itoa+0x1c>
    2fa6:	16 f4       	brtc	.+4      	; 0x2fac <itoa+0x3a>
    2fa8:	5d e2       	ldi	r21, 0x2D	; 45
    2faa:	51 93       	st	Z+, r21
    2fac:	10 82       	st	Z, r1
    2fae:	c9 01       	movw	r24, r18
    2fb0:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <strrev>

00002fb4 <strrev>:
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	67 2f       	mov	r22, r23
    2fba:	71 91       	ld	r23, Z+
    2fbc:	77 23       	and	r23, r23
    2fbe:	e1 f7       	brne	.-8      	; 0x2fb8 <strrev+0x4>
    2fc0:	32 97       	sbiw	r30, 0x02	; 2
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <strrev+0x18>
    2fc4:	7c 91       	ld	r23, X
    2fc6:	6d 93       	st	X+, r22
    2fc8:	70 83       	st	Z, r23
    2fca:	62 91       	ld	r22, -Z
    2fcc:	ae 17       	cp	r26, r30
    2fce:	bf 07       	cpc	r27, r31
    2fd0:	c8 f3       	brcs	.-14     	; 0x2fc4 <strrev+0x10>
    2fd2:	08 95       	ret

00002fd4 <_exit>:
    2fd4:	f8 94       	cli

00002fd6 <__stop_program>:
    2fd6:	ff cf       	rjmp	.-2      	; 0x2fd6 <__stop_program>
