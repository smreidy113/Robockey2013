
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00002926  000029ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800114  00800114  000029ce  2**0
                  ALLOC
  3 .stab         00004068  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b9  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007cf1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a8  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002890  00000000  00000000  00007fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aa9  00000000  00000000  0000a858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011f6  00000000  00000000  0000b301  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000092c  00000000  00000000  0000c4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000082b  00000000  00000000  0000ce24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003045  00000000  00000000  0000d64f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b0  00000000  00000000  00010694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__ctors_end>
       4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       c:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_3>
      10:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      14:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      18:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      1c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      20:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      28:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_10>
      2c:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_11>
      30:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      34:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      38:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      3c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      40:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      44:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      4c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      50:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      54:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      58:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      5c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      64:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      68:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      6c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      70:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      74:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_29>
      78:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      7c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      80:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      84:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      88:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      8c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      90:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      94:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      98:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      9c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      a8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

0000011f <descriptor_list>:
     11f:	00 01 00 00 53 01 12 00 02 00 00 65 01 43 00 03     ....S......e.C..
     12f:	00 00 a8 01 04 01 03 09 04 ac 01 12 02 03 09 04     ................
     13f:	c0 01 06 03 03 09 04 c8 01 08                       ..........

00000149 <endpoint_config_table>:
     149:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000153 <device_descriptor>:
     153:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     163:	03 01                                               ..

00000165 <config1_descriptor>:
     165:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     175:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     185:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     195:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a5:	40 00 00                                            @..

000001a8 <string0>:
     1a8:	04 03 09 04                                         ....

000001ac <string1>:
     1ac:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1bc:	65 00 00 00                                         e...

000001c0 <string2>:
     1c0:	06 03 4d 00 32 00 00 00                             ..M.2...

000001c8 <string3>:
     1c8:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	da e0       	ldi	r29, 0x0A	; 10
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	e6 e2       	ldi	r30, 0x26	; 38
     1e6:	f9 e2       	ldi	r31, 0x29	; 41
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a4 31       	cpi	r26, 0x14	; 20
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	a4 e1       	ldi	r26, 0x14	; 20
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	ab 3a       	cpi	r26, 0xAB	; 171
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 82 03 	call	0x704	; 0x704 <main>
     208:	0c 94 91 14 	jmp	0x2922	; 0x2922 <_exit>

0000020c <__bad_interrupt>:
     20c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000210 <turn>:
		}
		if (changedState) return;
	}
	m_red(OFF);
	game_pause();
}
     210:	8f 92       	push	r8
     212:	9f 92       	push	r9
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	6a 01       	movw	r12, r20
     22a:	7b 01       	movw	r14, r22
     22c:	48 01       	movw	r8, r16
     22e:	59 01       	movw	r10, r18
     230:	2a 9a       	sbi	0x05, 2	; 5
     232:	2b 9a       	sbi	0x05, 3	; 5
     234:	81 30       	cpi	r24, 0x01	; 1
}

void turn(int dir,float speed, float degree) {
	set(PORTB,2);
	set(PORTB,3);
	if (dir == LEFT) {
     236:	91 05       	cpc	r25, r1
     238:	81 f5       	brne	.+96     	; 0x29a <turn+0x8a>
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     23a:	60 91 96 00 	lds	r22, 0x0096
     23e:	70 91 97 00 	lds	r23, 0x0097
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     24a:	a7 01       	movw	r20, r14
     24c:	96 01       	movw	r18, r12
     24e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     252:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     256:	70 93 99 00 	sts	0x0099, r23
     25a:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     25e:	c0 91 88 00 	lds	r28, 0x0088
     262:	d0 91 89 00 	lds	r29, 0x0089
     266:	a7 01       	movw	r20, r14
     268:	96 01       	movw	r18, r12
     26a:	c5 01       	movw	r24, r10
     26c:	b4 01       	movw	r22, r8
     26e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     272:	6b 01       	movw	r12, r22
     274:	7c 01       	movw	r14, r24
     276:	be 01       	movw	r22, r28
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     280:	9b 01       	movw	r18, r22
     282:	ac 01       	movw	r20, r24
     284:	c7 01       	movw	r24, r14
     286:	b6 01       	movw	r22, r12
     288:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     28c:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     290:	70 93 8b 00 	sts	0x008B, r23
     294:	60 93 8a 00 	sts	0x008A, r22
     298:	31 c0       	rjmp	.+98     	; 0x2fc <turn+0xec>
	}
	
		if (dir == RIGHT) {
     29a:	89 2b       	or	r24, r25
     29c:	79 f5       	brne	.+94     	; 0x2fc <turn+0xec>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     29e:	c0 91 96 00 	lds	r28, 0x0096
     2a2:	d0 91 97 00 	lds	r29, 0x0097
     2a6:	9a 01       	movw	r18, r20
     2a8:	ab 01       	movw	r20, r22
     2aa:	c5 01       	movw	r24, r10
     2ac:	b4 01       	movw	r22, r8
     2ae:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     2b2:	4b 01       	movw	r8, r22
     2b4:	5c 01       	movw	r10, r24
     2b6:	be 01       	movw	r22, r28
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     2c0:	9b 01       	movw	r18, r22
     2c2:	ac 01       	movw	r20, r24
     2c4:	c5 01       	movw	r24, r10
     2c6:	b4 01       	movw	r22, r8
     2c8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     2cc:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     2d0:	70 93 99 00 	sts	0x0099, r23
     2d4:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     2d8:	60 91 88 00 	lds	r22, 0x0088
     2dc:	70 91 89 00 	lds	r23, 0x0089
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     2e8:	a7 01       	movw	r20, r14
     2ea:	96 01       	movw	r18, r12
     2ec:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     2f0:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     2f4:	70 93 8b 00 	sts	0x008B, r23
     2f8:	60 93 8a 00 	sts	0x008A, r22
		}
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	08 95       	ret

00000316 <reverse>:

void reverse(){
	OCR1B = OCR1A;
     316:	80 91 88 00 	lds	r24, 0x0088
     31a:	90 91 89 00 	lds	r25, 0x0089
     31e:	90 93 8b 00 	sts	0x008B, r25
     322:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     326:	80 91 96 00 	lds	r24, 0x0096
     32a:	90 91 97 00 	lds	r25, 0x0097
     32e:	90 93 99 00 	sts	0x0099, r25
     332:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     336:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     338:	2b 98       	cbi	0x05, 3	; 5
     33a:	08 95       	ret

0000033c <drive_to_point2>:

void drive_to_puck() {

}

void drive_to_point2(int x, int y) {
     33c:	2f 92       	push	r2
     33e:	3f 92       	push	r3
     340:	4f 92       	push	r4
     342:	5f 92       	push	r5
     344:	6f 92       	push	r6
     346:	7f 92       	push	r7
     348:	8f 92       	push	r8
     34a:	9f 92       	push	r9
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	2d 97       	sbiw	r28, 0x0d	; 13
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	2c 01       	movw	r4, r24
     372:	4b 01       	movw	r8, r22
	m_green(ON);
     374:	6a 9a       	sbi	0x0d, 2	; 13
     376:	72 98       	cbi	0x0e, 2	; 14
	//m_wait(500);
	float speed_cap = 0.5;
	localize(data);
     378:	85 e8       	ldi	r24, 0x85	; 133
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <localize>
	int dir = 0;
	while(1) {
		localize(data);
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     380:	c2 01       	movw	r24, r4
     382:	aa 27       	eor	r26, r26
     384:	97 fd       	sbrc	r25, 7
     386:	a0 95       	com	r26
     388:	ba 2f       	mov	r27, r26
     38a:	8e 83       	std	Y+6, r24	; 0x06
     38c:	9f 83       	std	Y+7, r25	; 0x07
     38e:	a8 87       	std	Y+8, r26	; 0x08
     390:	b9 87       	std	Y+9, r27	; 0x09
     392:	c4 01       	movw	r24, r8
     394:	aa 27       	eor	r26, r26
     396:	97 fd       	sbrc	r25, 7
     398:	a0 95       	com	r26
     39a:	ba 2f       	mov	r27, r26
     39c:	8a 87       	std	Y+10, r24	; 0x0a
     39e:	9b 87       	std	Y+11, r25	; 0x0b
     3a0:	ac 87       	std	Y+12, r26	; 0x0c
     3a2:	bd 87       	std	Y+13, r27	; 0x0d
	float dist = 0.0;
	float spd = 0.0;
	float deg = 0.0;
	int dir = 0;
	while(1) {
		localize(data);
     3a4:	85 e8       	ldi	r24, 0x85	; 133
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <localize>
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     3ac:	6e 81       	ldd	r22, Y+6	; 0x06
     3ae:	7f 81       	ldd	r23, Y+7	; 0x07
     3b0:	88 85       	ldd	r24, Y+8	; 0x08
     3b2:	99 85       	ldd	r25, Y+9	; 0x09
     3b4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     3b8:	20 91 85 01 	lds	r18, 0x0185
     3bc:	30 91 86 01 	lds	r19, 0x0186
     3c0:	40 91 87 01 	lds	r20, 0x0187
     3c4:	50 91 88 01 	lds	r21, 0x0188
     3c8:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
     3cc:	06 2f       	mov	r16, r22
     3ce:	17 2f       	mov	r17, r23
     3d0:	28 2e       	mov	r2, r24
     3d2:	39 2e       	mov	r3, r25
     3d4:	6a 85       	ldd	r22, Y+10	; 0x0a
     3d6:	7b 85       	ldd	r23, Y+11	; 0x0b
     3d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     3da:	9d 85       	ldd	r25, Y+13	; 0x0d
     3dc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     3e0:	a9 e8       	ldi	r26, 0x89	; 137
     3e2:	b1 e0       	ldi	r27, 0x01	; 1
     3e4:	2d 91       	ld	r18, X+
     3e6:	3d 91       	ld	r19, X+
     3e8:	4d 91       	ld	r20, X+
     3ea:	5c 91       	ld	r21, X
     3ec:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
     3f0:	46 2e       	mov	r4, r22
     3f2:	57 2e       	mov	r5, r23
     3f4:	68 2e       	mov	r6, r24
     3f6:	79 2e       	mov	r7, r25
     3f8:	20 2f       	mov	r18, r16
     3fa:	31 2f       	mov	r19, r17
     3fc:	42 2d       	mov	r20, r2
     3fe:	53 2d       	mov	r21, r3
     400:	64 2d       	mov	r22, r4
     402:	75 2d       	mov	r23, r5
     404:	86 2d       	mov	r24, r6
     406:	97 2d       	mov	r25, r7
     408:	0e 94 bc 10 	call	0x2178	; 0x2178 <atan2>
     40c:	4b 01       	movw	r8, r22
     40e:	5c 01       	movw	r10, r24
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	44 eb       	ldi	r20, 0xB4	; 180
     416:	52 e4       	ldi	r21, 0x42	; 66
     418:	ed e8       	ldi	r30, 0x8D	; 141
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	60 81       	ld	r22, Z
     41e:	71 81       	ldd	r23, Z+1	; 0x01
     420:	82 81       	ldd	r24, Z+2	; 0x02
     422:	93 81       	ldd	r25, Z+3	; 0x03
     424:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
     428:	6b 01       	movw	r12, r22
     42a:	7c 01       	movw	r14, r24
     42c:	f7 fa       	bst	r15, 7
     42e:	f0 94       	com	r15
     430:	f7 f8       	bld	r15, 7
     432:	f0 94       	com	r15
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	44 e3       	ldi	r20, 0x34	; 52
     43a:	53 e4       	ldi	r21, 0x43	; 67
     43c:	c5 01       	movw	r24, r10
     43e:	b4 01       	movw	r22, r8
     440:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     444:	23 ec       	ldi	r18, 0xC3	; 195
     446:	35 ef       	ldi	r19, 0xF5	; 245
     448:	48 e4       	ldi	r20, 0x48	; 72
     44a:	50 e4       	ldi	r21, 0x40	; 64
     44c:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3>
     450:	9b 01       	movw	r18, r22
     452:	ac 01       	movw	r20, r24
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
     45c:	0e 94 af 11 	call	0x235e	; 0x235e <__fixsfsi>
     460:	cb 01       	movw	r24, r22
     462:	8c 57       	subi	r24, 0x7C	; 124
     464:	9c 4f       	sbci	r25, 0xFC	; 252
     466:	68 e6       	ldi	r22, 0x68	; 104
     468:	71 e0       	ldi	r23, 0x01	; 1
     46a:	0e 94 38 14 	call	0x2870	; 0x2870 <__divmodhi4>
     46e:	bc 01       	movw	r22, r24
     470:	64 5b       	subi	r22, 0xB4	; 180
     472:	71 09       	sbc	r23, r1
     474:	88 27       	eor	r24, r24
     476:	77 fd       	sbrc	r23, 7
     478:	80 95       	com	r24
     47a:	98 2f       	mov	r25, r24
     47c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     480:	86 2e       	mov	r8, r22
     482:	97 2e       	mov	r9, r23
     484:	a8 2e       	mov	r10, r24
     486:	b9 2e       	mov	r11, r25
		if (angle_dif > 0) {
     488:	ff 24       	eor	r15, r15
     48a:	f3 94       	inc	r15
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	a9 01       	movw	r20, r18
     492:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__gesf2>
     496:	18 16       	cp	r1, r24
     498:	0c f0       	brlt	.+2      	; 0x49c <drive_to_point2+0x160>
     49a:	f1 2c       	mov	r15, r1
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	ff 25       	eor	r31, r15
     4a0:	fd 83       	std	Y+5, r31	; 0x05
		else {
			dir = LEFT;
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     4a2:	d5 01       	movw	r26, r10
     4a4:	c4 01       	movw	r24, r8
     4a6:	bf 77       	andi	r27, 0x7F	; 127
     4a8:	bc 01       	movw	r22, r24
     4aa:	cd 01       	movw	r24, r26
     4ac:	90 58       	subi	r25, 0x80	; 128
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 ef       	ldi	r20, 0xF0	; 240
     4b4:	51 e4       	ldi	r21, 0x41	; 65
     4b6:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3>
     4ba:	0e 94 83 11 	call	0x2306	; 0x2306 <exp>
     4be:	6b 01       	movw	r12, r22
     4c0:	7c 01       	movw	r14, r24
		//Set distance
		dist = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     4c2:	24 2d       	mov	r18, r4
     4c4:	35 2d       	mov	r19, r5
     4c6:	46 2d       	mov	r20, r6
     4c8:	57 2d       	mov	r21, r7
     4ca:	64 2d       	mov	r22, r4
     4cc:	75 2d       	mov	r23, r5
     4ce:	86 2d       	mov	r24, r6
     4d0:	97 2d       	mov	r25, r7
     4d2:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     4d6:	2b 01       	movw	r4, r22
     4d8:	3c 01       	movw	r6, r24
     4da:	20 2f       	mov	r18, r16
     4dc:	31 2f       	mov	r19, r17
     4de:	42 2d       	mov	r20, r2
     4e0:	53 2d       	mov	r21, r3
     4e2:	60 2f       	mov	r22, r16
     4e4:	71 2f       	mov	r23, r17
     4e6:	82 2d       	mov	r24, r2
     4e8:	93 2d       	mov	r25, r3
     4ea:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     4ee:	9b 01       	movw	r18, r22
     4f0:	ac 01       	movw	r20, r24
     4f2:	c3 01       	movw	r24, r6
     4f4:	b2 01       	movw	r22, r4
     4f6:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
     4fa:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <sqrt>
     4fe:	0e 94 af 11 	call	0x235e	; 0x235e <__fixsfsi>
     502:	88 27       	eor	r24, r24
     504:	77 fd       	sbrc	r23, 7
     506:	80 95       	com	r24
     508:	98 2f       	mov	r25, r24
     50a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     50e:	66 2e       	mov	r6, r22
     510:	77 2e       	mov	r7, r23
     512:	08 2f       	mov	r16, r24
     514:	19 2f       	mov	r17, r25
		spd = ((float)dist)/70.0;
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	4c e8       	ldi	r20, 0x8C	; 140
     51c:	52 e4       	ldi	r21, 0x42	; 66
     51e:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3>
     522:	26 2e       	mov	r2, r22
     524:	37 2e       	mov	r3, r23
     526:	48 2e       	mov	r4, r24
     528:	59 2e       	mov	r5, r25
     52a:	69 83       	std	Y+1, r22	; 0x01
     52c:	7a 83       	std	Y+2, r23	; 0x02
     52e:	8b 83       	std	Y+3, r24	; 0x03
     530:	9c 83       	std	Y+4, r25	; 0x04
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     532:	0e 94 cc 0b 	call	0x1798	; 0x1798 <m_usb_rx_char>
     536:	80 93 7a 01 	sts	0x017A, r24

			m_usb_rx_flush();  				//clear buffer
     53a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     53e:	80 91 7a 01 	lds	r24, 0x017A
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	09 f0       	breq	.+2      	; 0x548 <drive_to_point2+0x20c>
     546:	4c c0       	rjmp	.+152    	; 0x5e0 <drive_to_point2+0x2a4>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     548:	a1 e9       	ldi	r26, 0x91	; 145
     54a:	b1 e0       	ldi	r27, 0x01	; 1
     54c:	8d 92       	st	X+, r8
     54e:	9d 92       	st	X+, r9
     550:	ad 92       	st	X+, r10
     552:	bc 92       	st	X, r11
     554:	13 97       	sbiw	r26, 0x03	; 3
				data[4] = deg*100.0;
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	48 ec       	ldi	r20, 0xC8	; 200
     55c:	52 e4       	ldi	r21, 0x42	; 66
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     566:	e5 e9       	ldi	r30, 0x95	; 149
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	60 83       	st	Z, r22
     56c:	71 83       	std	Z+1, r23	; 0x01
     56e:	82 83       	std	Z+2, r24	; 0x02
     570:	93 83       	std	Z+3, r25	; 0x03
				data[5] = dist;
     572:	86 2d       	mov	r24, r6
     574:	97 2d       	mov	r25, r7
     576:	a0 2f       	mov	r26, r16
     578:	b1 2f       	mov	r27, r17
     57a:	e9 e9       	ldi	r30, 0x99	; 153
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	80 83       	st	Z, r24
     580:	91 83       	std	Z+1, r25	; 0x01
     582:	a2 83       	std	Z+2, r26	; 0x02
     584:	b3 83       	std	Z+3, r27	; 0x03
				data[6] = spd*100.0;
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	48 ec       	ldi	r20, 0xC8	; 200
     58c:	52 e4       	ldi	r21, 0x42	; 66
     58e:	62 2d       	mov	r22, r2
     590:	73 2d       	mov	r23, r3
     592:	84 2d       	mov	r24, r4
     594:	95 2d       	mov	r25, r5
     596:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     59a:	ad e9       	ldi	r26, 0x9D	; 157
     59c:	b1 e0       	ldi	r27, 0x01	; 1
     59e:	6d 93       	st	X+, r22
     5a0:	7d 93       	st	X+, r23
     5a2:	8d 93       	st	X+, r24
     5a4:	9c 93       	st	X, r25
     5a6:	13 97       	sbiw	r26, 0x03	; 3
     5a8:	0f 2e       	mov	r0, r31
     5aa:	f5 e8       	ldi	r31, 0x85	; 133
     5ac:	af 2e       	mov	r10, r31
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	bf 2e       	mov	r11, r31
     5b2:	f0 2d       	mov	r31, r0
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     5b4:	f5 01       	movw	r30, r10
     5b6:	61 91       	ld	r22, Z+
     5b8:	71 91       	ld	r23, Z+
     5ba:	81 91       	ld	r24, Z+
     5bc:	91 91       	ld	r25, Z+
     5be:	5f 01       	movw	r10, r30
     5c0:	0e 94 af 11 	call	0x235e	; 0x235e <__fixsfsi>
     5c4:	cb 01       	movw	r24, r22
     5c6:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <m_usb_tx_int>
					m_usb_tx_char('\t');
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	0e 94 00 0c 	call	0x1800	; 0x1800 <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = dist;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     5d0:	f1 ea       	ldi	r31, 0xA1	; 161
     5d2:	af 16       	cp	r10, r31
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	bf 06       	cpc	r11, r31
     5d8:	69 f7       	brne	.-38     	; 0x5b4 <drive_to_point2+0x278>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     5da:	8a e0       	ldi	r24, 0x0A	; 10
     5dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	5f e3       	ldi	r21, 0x3F	; 63
     5e8:	62 2d       	mov	r22, r2
     5ea:	73 2d       	mov	r23, r3
     5ec:	84 2d       	mov	r24, r4
     5ee:	95 2d       	mov	r25, r5
     5f0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__gesf2>
     5f4:	18 16       	cp	r1, r24
     5f6:	2c f4       	brge	.+10     	; 0x602 <drive_to_point2+0x2c6>
     5f8:	19 82       	std	Y+1, r1	; 0x01
     5fa:	1a 82       	std	Y+2, r1	; 0x02
     5fc:	1b 82       	std	Y+3, r1	; 0x03
     5fe:	8f e3       	ldi	r24, 0x3F	; 63
     600:	8c 83       	std	Y+4, r24	; 0x04
		if (dist < 10) break;
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	66 2d       	mov	r22, r6
     60c:	77 2d       	mov	r23, r7
     60e:	80 2f       	mov	r24, r16
     610:	91 2f       	mov	r25, r17
     612:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     616:	88 23       	and	r24, r24
     618:	9c f0       	brlt	.+38     	; 0x640 <drive_to_point2+0x304>
		if (changedState) return;
     61a:	80 91 16 01 	lds	r24, 0x0116
     61e:	81 11       	cpse	r24, r1
     620:	1c c0       	rjmp	.+56     	; 0x65a <drive_to_point2+0x31e>
		turn(dir, spd, deg);
     622:	97 01       	movw	r18, r14
     624:	86 01       	movw	r16, r12
     626:	f9 81       	ldd	r31, Y+1	; 0x01
     628:	ea 81       	ldd	r30, Y+2	; 0x02
     62a:	9b 81       	ldd	r25, Y+3	; 0x03
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	4f 2f       	mov	r20, r31
     630:	5e 2f       	mov	r21, r30
     632:	69 2f       	mov	r22, r25
     634:	78 2f       	mov	r23, r24
     636:	8d 81       	ldd	r24, Y+5	; 0x05
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 08 01 	call	0x210	; 0x210 <turn>
		
	}
     63e:	b2 ce       	rjmp	.-668    	; 0x3a4 <drive_to_point2+0x68>
	m_red(ON);
     640:	6e 9a       	sbi	0x0d, 6	; 13
     642:	76 98       	cbi	0x0e, 6	; 14
	reverse();
     644:	0e 94 8b 01 	call	0x316	; 0x316 <reverse>
	OCR1B = 0;
     648:	10 92 8b 00 	sts	0x008B, r1
     64c:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     650:	10 92 99 00 	sts	0x0099, r1
     654:	10 92 98 00 	sts	0x0098, r1
     658:	ff cf       	rjmp	.-2      	; 0x658 <drive_to_point2+0x31c>
	while(1);
}
     65a:	2d 96       	adiw	r28, 0x0d	; 13
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	7f 90       	pop	r7
     680:	6f 90       	pop	r6
     682:	5f 90       	pop	r5
     684:	4f 90       	pop	r4
     686:	3f 90       	pop	r3
     688:	2f 90       	pop	r2
     68a:	08 95       	ret

0000068c <drive_to_goalA>:
	m_red(OFF);
	game_pause();
}

void drive_to_goalA() {
	drive_to_point2(GOALBX,GOALBY);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	83 e7       	ldi	r24, 0x73	; 115
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 9e 01 	call	0x33c	; 0x33c <drive_to_point2>
     698:	08 95       	ret

0000069a <drive_to_goalB>:
}

void drive_to_goalB() {
	drive_to_point2(GOALAX,GOALAY);
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	8d e8       	ldi	r24, 0x8D	; 141
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	0e 94 9e 01 	call	0x33c	; 0x33c <drive_to_point2>
     6a6:	08 95       	ret

000006a8 <shoot>:
}

void shoot() {
		set(PORTB,7);
     6a8:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6aa:	2f ef       	ldi	r18, 0xFF	; 255
     6ac:	81 ee       	ldi	r24, 0xE1	; 225
     6ae:	94 e0       	ldi	r25, 0x04	; 4
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	80 40       	sbci	r24, 0x00	; 0
     6b4:	90 40       	sbci	r25, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <shoot+0x8>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <shoot+0x12>
     6ba:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     6bc:	2f 98       	cbi	0x05, 7	; 5
     6be:	08 95       	ret

000006c0 <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     6c0:	10 92 8b 00 	sts	0x008B, r1
     6c4:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     6c8:	10 92 99 00 	sts	0x0099, r1
     6cc:	10 92 98 00 	sts	0x0098, r1
     6d0:	08 95       	ret

000006d2 <comm_test>:
	//set(PORTB,2);
	//set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     6d2:	5d 9a       	sbi	0x0b, 5	; 11
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	89 e6       	ldi	r24, 0x69	; 105
     6d8:	98 e1       	ldi	r25, 0x18	; 24
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <comm_test+0x8>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <comm_test+0x12>
     6e4:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     6e6:	5d 98       	cbi	0x0b, 5	; 11
     6e8:	2f ef       	ldi	r18, 0xFF	; 255
     6ea:	89 e6       	ldi	r24, 0x69	; 105
     6ec:	98 e1       	ldi	r25, 0x18	; 24
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	90 40       	sbci	r25, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <comm_test+0x1c>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <comm_test+0x26>
     6f8:	00 00       	nop
	m_wait(500);
	state = 0;
     6fa:	10 92 15 01 	sts	0x0115, r1
     6fe:	10 92 14 01 	sts	0x0114, r1
     702:	08 95       	ret

00000704 <main>:
		*/
}

int main(void)
{
	set(DDRD,5);
     704:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     706:	0e 94 e6 04 	call	0x9cc	; 0x9cc <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     70a:	4a e0       	ldi	r20, 0x0A	; 10
     70c:	68 e0       	ldi	r22, 0x08	; 8
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     714:	e1 e6       	ldi	r30, 0x61	; 97
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 e8       	ldi	r24, 0x80	; 128
     71a:	80 83       	st	Z, r24
     71c:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     71e:	85 b5       	in	r24, 0x25	; 37
     720:	88 60       	ori	r24, 0x08	; 8
     722:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     724:	84 b5       	in	r24, 0x24	; 36
     726:	82 60       	ori	r24, 0x02	; 2
     728:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     72a:	84 b5       	in	r24, 0x24	; 36
     72c:	82 60       	ori	r24, 0x02	; 2
     72e:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     730:	84 b5       	in	r24, 0x24	; 36
     732:	80 62       	ori	r24, 0x20	; 32
     734:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     736:	84 b5       	in	r24, 0x24	; 36
     738:	8f 7e       	andi	r24, 0xEF	; 239
     73a:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     73c:	85 b5       	in	r24, 0x25	; 37
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     742:	85 b5       	in	r24, 0x25	; 37
     744:	82 60       	ori	r24, 0x02	; 2
     746:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     748:	85 b5       	in	r24, 0x25	; 37
     74a:	81 60       	ori	r24, 0x01	; 1
     74c:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     74e:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     754:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     756:	e1 e8       	ldi	r30, 0x81	; 129
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	80 61       	ori	r24, 0x10	; 16
     75e:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     760:	80 81       	ld	r24, Z
     762:	88 60       	ori	r24, 0x08	; 8
     764:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     766:	a0 e8       	ldi	r26, 0x80	; 128
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	8c 91       	ld	r24, X
     76c:	82 60       	ori	r24, 0x02	; 2
     76e:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     770:	8c 91       	ld	r24, X
     772:	81 60       	ori	r24, 0x01	; 1
     774:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     776:	8c 91       	ld	r24, X
     778:	80 62       	ori	r24, 0x20	; 32
     77a:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     77c:	8c 91       	ld	r24, X
     77e:	8f 7e       	andi	r24, 0xEF	; 239
     780:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     782:	80 81       	ld	r24, Z
     784:	8b 7f       	andi	r24, 0xFB	; 251
     786:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     788:	80 81       	ld	r24, Z
     78a:	8d 7f       	andi	r24, 0xFD	; 253
     78c:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     78e:	80 81       	ld	r24, Z
     790:	81 60       	ori	r24, 0x01	; 1
     792:	80 83       	st	Z, r24
	
	set(DDRB,6);
     794:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	9f ef       	ldi	r25, 0xFF	; 255
     79a:	90 93 89 00 	sts	0x0089, r25
     79e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     7a2:	10 92 8b 00 	sts	0x008B, r1
     7a6:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     7aa:	e1 e9       	ldi	r30, 0x91	; 145
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	20 81       	ld	r18, Z
     7b0:	20 61       	ori	r18, 0x10	; 16
     7b2:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     7b4:	20 81       	ld	r18, Z
     7b6:	28 60       	ori	r18, 0x08	; 8
     7b8:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     7ba:	a0 e9       	ldi	r26, 0x90	; 144
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	2c 91       	ld	r18, X
     7c0:	22 60       	ori	r18, 0x02	; 2
     7c2:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     7c4:	2c 91       	ld	r18, X
     7c6:	2e 7f       	andi	r18, 0xFE	; 254
     7c8:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     7ca:	2c 91       	ld	r18, X
     7cc:	20 68       	ori	r18, 0x80	; 128
     7ce:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     7d0:	2c 91       	ld	r18, X
     7d2:	2f 7b       	andi	r18, 0xBF	; 191
     7d4:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     7d6:	20 81       	ld	r18, Z
     7d8:	2b 7f       	andi	r18, 0xFB	; 251
     7da:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     7dc:	20 81       	ld	r18, Z
     7de:	2d 7f       	andi	r18, 0xFD	; 253
     7e0:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     7e2:	20 81       	ld	r18, Z
     7e4:	21 60       	ori	r18, 0x01	; 1
     7e6:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     7e8:	90 93 97 00 	sts	0x0097, r25
     7ec:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     7f0:	10 92 99 00 	sts	0x0099, r1
     7f4:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     7f8:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     7fa:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     7fc:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     7fe:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     800:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     802:	78 94       	sei
	set(ADCSRA,ADIE);
     804:	ea e7       	ldi	r30, 0x7A	; 122
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	88 60       	ori	r24, 0x08	; 8
     80c:	80 83       	st	Z, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     80e:	ac e7       	ldi	r26, 0x7C	; 124
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	8c 91       	ld	r24, X
     814:	8f 77       	andi	r24, 0x7F	; 127
     816:	8c 93       	st	X, r24
	clear(ADMUX, REFS0);	//^
     818:	8c 91       	ld	r24, X
     81a:	8f 7b       	andi	r24, 0xBF	; 191
     81c:	8c 93       	st	X, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     81e:	80 81       	ld	r24, Z
     820:	84 60       	ori	r24, 0x04	; 4
     822:	80 83       	st	Z, r24
	set(ADCSRA, ADPS1);	//^
     824:	80 81       	ld	r24, Z
     826:	82 60       	ori	r24, 0x02	; 2
     828:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);	//^
     82a:	80 81       	ld	r24, Z
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	80 83       	st	Z, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     830:	ae e7       	ldi	r26, 0x7E	; 126
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	8c 91       	ld	r24, X
     836:	81 60       	ori	r24, 0x01	; 1
     838:	8c 93       	st	X, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
     83a:	8c 91       	ld	r24, X
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	8c 93       	st	X, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
     840:	8c 91       	ld	r24, X
     842:	80 61       	ori	r24, 0x10	; 16
     844:	8c 93       	st	X, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
     846:	8c 91       	ld	r24, X
     848:	80 62       	ori	r24, 0x20	; 32
     84a:	8c 93       	st	X, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
     84c:	8c 91       	ld	r24, X
     84e:	80 64       	ori	r24, 0x40	; 64
     850:	8c 93       	st	X, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
     852:	ad e7       	ldi	r26, 0x7D	; 125
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	8c 91       	ld	r24, X
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	8c 93       	st	X, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
     85c:	8c 91       	ld	r24, X
     85e:	82 60       	ori	r24, 0x02	; 2
     860:	8c 93       	st	X, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     862:	80 81       	ld	r24, Z
     864:	80 62       	ori	r24, 0x20	; 32
     866:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     868:	80 81       	ld	r24, Z
     86a:	80 61       	ori	r24, 0x10	; 16
     86c:	80 83       	st	Z, r24
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     86e:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     870:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     872:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     874:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 0; //set state
     876:	10 92 15 01 	sts	0x0115, r1
     87a:	10 92 14 01 	sts	0x0114, r1
	long count = 0;
	

	//m_bus_init();
	m_wii_open();
     87e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <m_wii_open>
	m_usb_init();
     882:	0e 94 b3 0b 	call	0x1766	; 0x1766 <m_usb_init>
	local_init();
     886:	0e 94 ba 07 	call	0xf74	; 0xf74 <local_init>

	


		//switch states
        switch (state) {
     88a:	80 91 14 01 	lds	r24, 0x0114
     88e:	90 91 15 01 	lds	r25, 0x0115
	m_usb_init();
	local_init();

    while(1)
    {
		changedState = 0;
     892:	10 92 16 01 	sts	0x0116, r1

	


		//switch states
        switch (state) {
     896:	84 30       	cpi	r24, 0x04	; 4
     898:	91 05       	cpc	r25, r1
     89a:	a9 f1       	breq	.+106    	; 0x906 <main+0x202>
     89c:	6c f4       	brge	.+26     	; 0x8b8 <main+0x1b4>
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	91 05       	cpc	r25, r1
     8a2:	74 f5       	brge	.+92     	; 0x900 <main+0x1fc>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	91 05       	cpc	r25, r1
     8a8:	a4 f7       	brge	.-24     	; 0x892 <main+0x18e>
     8aa:	8d 3f       	cpi	r24, 0xFD	; 253
     8ac:	2f ef       	ldi	r18, 0xFF	; 255
     8ae:	92 07       	cpc	r25, r18
     8b0:	a9 f0       	breq	.+42     	; 0x8dc <main+0x1d8>
     8b2:	89 2b       	or	r24, r25
     8b4:	11 f1       	breq	.+68     	; 0x8fa <main+0x1f6>
     8b6:	39 c0       	rjmp	.+114    	; 0x92a <main+0x226>
     8b8:	82 3a       	cpi	r24, 0xA2	; 162
     8ba:	91 05       	cpc	r25, r1
     8bc:	81 f1       	breq	.+96     	; 0x91e <main+0x21a>
     8be:	3c f4       	brge	.+14     	; 0x8ce <main+0x1ca>
     8c0:	80 3a       	cpi	r24, 0xA0	; 160
     8c2:	91 05       	cpc	r25, r1
     8c4:	31 f1       	breq	.+76     	; 0x912 <main+0x20e>
     8c6:	81 3a       	cpi	r24, 0xA1	; 161
     8c8:	91 05       	cpc	r25, r1
     8ca:	79 f5       	brne	.+94     	; 0x92a <main+0x226>
     8cc:	25 c0       	rjmp	.+74     	; 0x918 <main+0x214>
     8ce:	83 3a       	cpi	r24, 0xA3	; 163
     8d0:	91 05       	cpc	r25, r1
     8d2:	41 f1       	breq	.+80     	; 0x924 <main+0x220>
     8d4:	84 3a       	cpi	r24, 0xA4	; 164
     8d6:	91 05       	cpc	r25, r1
     8d8:	41 f5       	brne	.+80     	; 0x92a <main+0x226>
     8da:	18 c0       	rjmp	.+48     	; 0x90c <main+0x208>
			
			case -3: //test Limit switches
				//m_green(ON);
				if (check(PINB,1)) {
     8dc:	19 9b       	sbis	0x03, 1	; 3
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <main+0x1e2>
					
					m_green(ON);
     8e0:	6a 9a       	sbi	0x0d, 2	; 13
     8e2:	72 98       	cbi	0x0e, 2	; 14
     8e4:	d2 cf       	rjmp	.-92     	; 0x88a <main+0x186>
				}
				
				else if (check(PINB,0)) {
     8e6:	18 9b       	sbis	0x03, 0	; 3
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <main+0x1ec>
					
					m_red(ON);
     8ea:	6e 9a       	sbi	0x0d, 6	; 13
     8ec:	76 98       	cbi	0x0e, 6	; 14
     8ee:	cd cf       	rjmp	.-102    	; 0x88a <main+0x186>
				}
				
				else {
					m_red(OFF);
     8f0:	6e 9a       	sbi	0x0d, 6	; 13
     8f2:	76 9a       	sbi	0x0e, 6	; 14
					m_green(OFF);
     8f4:	6a 9a       	sbi	0x0d, 2	; 13
     8f6:	72 9a       	sbi	0x0e, 2	; 14
     8f8:	c8 cf       	rjmp	.-112    	; 0x88a <main+0x186>
				
			break;

			case 0:
			//drive_to_point2(-100,0);
			game_pause();
     8fa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <game_pause>
			break;
     8fe:	c5 cf       	rjmp	.-118    	; 0x88a <main+0x186>
			case 2:
			drive_to_puck();
			break;
			
			case 3:
			drive_to_goalA();
     900:	0e 94 46 03 	call	0x68c	; 0x68c <drive_to_goalA>
			break;
     904:	c2 cf       	rjmp	.-124    	; 0x88a <main+0x186>
			
			case 4:
			shoot();
     906:	0e 94 54 03 	call	0x6a8	; 0x6a8 <shoot>
			break;	
     90a:	bf cf       	rjmp	.-130    	; 0x88a <main+0x186>
			
			case 0xA4:
			game_pause();
     90c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <game_pause>
			break;
     910:	bc cf       	rjmp	.-136    	; 0x88a <main+0x186>
			
			case 0xA0:
			comm_test();
     912:	0e 94 69 03 	call	0x6d2	; 0x6d2 <comm_test>
			break;
     916:	b9 cf       	rjmp	.-142    	; 0x88a <main+0x186>
			
			case 0xA1:
			drive_to_goalA();
     918:	0e 94 46 03 	call	0x68c	; 0x68c <drive_to_goalA>
			break;
     91c:	b6 cf       	rjmp	.-148    	; 0x88a <main+0x186>
			
			case 0xA2:
			drive_to_goalA();
     91e:	0e 94 46 03 	call	0x68c	; 0x68c <drive_to_goalA>
			break;
     922:	b3 cf       	rjmp	.-154    	; 0x88a <main+0x186>
			
			case 0xA3:
			drive_to_goalB();
     924:	0e 94 4d 03 	call	0x69a	; 0x69a <drive_to_goalB>
			break;
     928:	b0 cf       	rjmp	.-160    	; 0x88a <main+0x186>
			
			default:
			game_pause();
     92a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <game_pause>
			break;
     92e:	ad cf       	rjmp	.-166    	; 0x88a <main+0x186>

00000930 <__vector_29>:
		}
        
    }
}

ISR(ADC_vect) {
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	2f 93       	push	r18
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
	if (ADC  > 500) {
     940:	80 91 78 00 	lds	r24, 0x0078
     944:	90 91 79 00 	lds	r25, 0x0079
     948:	85 3f       	cpi	r24, 0xF5	; 245
     94a:	91 40       	sbci	r25, 0x01	; 1
     94c:	18 f0       	brcs	.+6      	; 0x954 <__vector_29+0x24>
		m_green(ON);
     94e:	6a 9a       	sbi	0x0d, 2	; 13
     950:	72 98       	cbi	0x0e, 2	; 14
     952:	02 c0       	rjmp	.+4      	; 0x958 <__vector_29+0x28>
	}
	
	else {
		m_green(OFF);
     954:	6a 9a       	sbi	0x0d, 2	; 13
     956:	72 9a       	sbi	0x0e, 2	; 14
	}
}
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0f be       	out	0x3f, r0	; 63
     962:	0f 90       	pop	r0
     964:	1f 90       	pop	r1
     966:	18 95       	reti

00000968 <__vector_3>:

ISR(INT2_vect)  {
     968:	1f 92       	push	r1
     96a:	0f 92       	push	r0
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	0f 92       	push	r0
     970:	11 24       	eor	r1, r1
     972:	2f 93       	push	r18
     974:	3f 93       	push	r19
     976:	4f 93       	push	r20
     978:	5f 93       	push	r21
     97a:	6f 93       	push	r22
     97c:	7f 93       	push	r23
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	af 93       	push	r26
     984:	bf 93       	push	r27
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
	cli();
     98a:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     98c:	6a e0       	ldi	r22, 0x0A	; 10
     98e:	8b e7       	ldi	r24, 0x7B	; 123
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <m_rf_read>
	sei();
     996:	78 94       	sei
	state=buffer[0];
     998:	80 91 7b 01 	lds	r24, 0x017B
     99c:	80 93 14 01 	sts	0x0114, r24
     9a0:	10 92 15 01 	sts	0x0115, r1
	changedState = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 16 01 	sts	0x0116, r24
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f 90       	pop	r0
     9c8:	1f 90       	pop	r1
     9ca:	18 95       	reti

000009cc <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     9cc:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     9ce:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     9d0:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     9d2:	8c e0       	ldi	r24, 0x0C	; 12
     9d4:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     9d8:	e9 e6       	ldi	r30, 0x69	; 105
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	80 62       	ori	r24, 0x20	; 32
     9e0:	80 83       	st	Z, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 7e       	andi	r24, 0xEF	; 239
     9e6:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     9e8:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     9ea:	78 94       	sei
     9ec:	08 95       	ret

000009ee <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	8c 01       	movw	r16, r24
     9f8:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     9fa:	8d e5       	ldi	r24, 0x5D	; 93
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <m_wii_read>
	x[0] = blobs[0];
     a02:	80 91 5d 01 	lds	r24, 0x015D
     a06:	90 91 5e 01 	lds	r25, 0x015E
     a0a:	f8 01       	movw	r30, r16
     a0c:	91 83       	std	Z+1, r25	; 0x01
     a0e:	80 83       	st	Z, r24
	x[1] = blobs[3];
     a10:	80 91 63 01 	lds	r24, 0x0163
     a14:	90 91 64 01 	lds	r25, 0x0164
     a18:	93 83       	std	Z+3, r25	; 0x03
     a1a:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     a1c:	80 91 69 01 	lds	r24, 0x0169
     a20:	90 91 6a 01 	lds	r25, 0x016A
     a24:	95 83       	std	Z+5, r25	; 0x05
     a26:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     a28:	80 91 6f 01 	lds	r24, 0x016F
     a2c:	90 91 70 01 	lds	r25, 0x0170
     a30:	97 83       	std	Z+7, r25	; 0x07
     a32:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     a34:	80 91 5f 01 	lds	r24, 0x015F
     a38:	90 91 60 01 	lds	r25, 0x0160
     a3c:	99 83       	std	Y+1, r25	; 0x01
     a3e:	88 83       	st	Y, r24
	y[1] = blobs[4];
     a40:	80 91 65 01 	lds	r24, 0x0165
     a44:	90 91 66 01 	lds	r25, 0x0166
     a48:	9b 83       	std	Y+3, r25	; 0x03
     a4a:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     a4c:	80 91 6b 01 	lds	r24, 0x016B
     a50:	90 91 6c 01 	lds	r25, 0x016C
     a54:	9d 83       	std	Y+5, r25	; 0x05
     a56:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     a58:	80 91 71 01 	lds	r24, 0x0171
     a5c:	90 91 72 01 	lds	r25, 0x0172
     a60:	9f 83       	std	Y+7, r25	; 0x07
     a62:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <determine_blobs>:

unsigned char determine_blobs() {
     a70:	2f 92       	push	r2
     a72:	3f 92       	push	r3
     a74:	4f 92       	push	r4
     a76:	5f 92       	push	r5
     a78:	6f 92       	push	r6
     a7a:	7f 92       	push	r7
     a7c:	8f 92       	push	r8
     a7e:	9f 92       	push	r9
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	6c 97       	sbiw	r28, 0x1c	; 28
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     aa4:	10 92 25 01 	sts	0x0125, r1
     aa8:	10 92 26 01 	sts	0x0126, r1
     aac:	10 92 27 01 	sts	0x0127, r1
     ab0:	10 92 28 01 	sts	0x0128, r1
	distmin = 30000;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e6       	ldi	r25, 0x60	; 96
     ab8:	aa ee       	ldi	r26, 0xEA	; 234
     aba:	b6 e4       	ldi	r27, 0x46	; 70
     abc:	80 93 00 01 	sts	0x0100, r24
     ac0:	90 93 01 01 	sts	0x0101, r25
     ac4:	a0 93 02 01 	sts	0x0102, r26
     ac8:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     acc:	0f 2e       	mov	r0, r31
     ace:	f7 e3       	ldi	r31, 0x37	; 55
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	09 e3       	ldi	r16, 0x39	; 57
     ada:	11 e0       	ldi	r17, 0x01	; 1
     adc:	0f 2e       	mov	r0, r31
     ade:	fb e3       	ldi	r31, 0x3B	; 59
     ae0:	ef 2e       	mov	r14, r31
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	ff 2e       	mov	r15, r31
     ae6:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     ae8:	6d e2       	ldi	r22, 0x2D	; 45
     aea:	71 e0       	ldi	r23, 0x01	; 1
     aec:	85 e3       	ldi	r24, 0x35	; 53
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     af4:	80 91 35 01 	lds	r24, 0x0135
     af8:	90 91 36 01 	lds	r25, 0x0136
     afc:	8f 3f       	cpi	r24, 0xFF	; 255
     afe:	93 40       	sbci	r25, 0x03	; 3
     b00:	98 f7       	brcc	.-26     	; 0xae8 <determine_blobs+0x78>
     b02:	f6 01       	movw	r30, r12
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	8f 3f       	cpi	r24, 0xFF	; 255
     b0a:	93 40       	sbci	r25, 0x03	; 3
     b0c:	68 f7       	brcc	.-38     	; 0xae8 <determine_blobs+0x78>
     b0e:	f8 01       	movw	r30, r16
     b10:	80 81       	ld	r24, Z
     b12:	91 81       	ldd	r25, Z+1	; 0x01
     b14:	8f 3f       	cpi	r24, 0xFF	; 255
     b16:	93 40       	sbci	r25, 0x03	; 3
     b18:	38 f7       	brcc	.-50     	; 0xae8 <determine_blobs+0x78>
     b1a:	f7 01       	movw	r30, r14
     b1c:	80 81       	ld	r24, Z
     b1e:	91 81       	ldd	r25, Z+1	; 0x01
     b20:	8f 3f       	cpi	r24, 0xFF	; 255
     b22:	93 40       	sbci	r25, 0x03	; 3
     b24:	08 f7       	brcc	.-62     	; 0xae8 <determine_blobs+0x78>
     b26:	80 90 29 01 	lds	r8, 0x0129
     b2a:	90 90 2a 01 	lds	r9, 0x012A
     b2e:	a0 90 2b 01 	lds	r10, 0x012B
     b32:	b0 90 2c 01 	lds	r11, 0x012C
     b36:	20 91 25 01 	lds	r18, 0x0125
     b3a:	29 83       	std	Y+1, r18	; 0x01
     b3c:	30 91 26 01 	lds	r19, 0x0126
     b40:	3a 83       	std	Y+2, r19	; 0x02
     b42:	40 91 27 01 	lds	r20, 0x0127
     b46:	4b 83       	std	Y+3, r20	; 0x03
     b48:	50 91 28 01 	lds	r21, 0x0128
     b4c:	5c 83       	std	Y+4, r21	; 0x04
     b4e:	60 91 1f 01 	lds	r22, 0x011F
     b52:	6b 8b       	std	Y+19, r22	; 0x13
     b54:	70 91 20 01 	lds	r23, 0x0120
     b58:	7c 8b       	std	Y+20, r23	; 0x14
     b5a:	80 91 1d 01 	lds	r24, 0x011D
     b5e:	89 8b       	std	Y+17, r24	; 0x11
     b60:	90 91 1e 01 	lds	r25, 0x011E
     b64:	9a 8b       	std	Y+18, r25	; 0x12
     b66:	e0 91 21 01 	lds	r30, 0x0121
     b6a:	ed 8b       	std	Y+21, r30	; 0x15
     b6c:	f0 91 22 01 	lds	r31, 0x0122
     b70:	fe 8b       	std	Y+22, r31	; 0x16
     b72:	20 91 23 01 	lds	r18, 0x0123
     b76:	2f 8b       	std	Y+23, r18	; 0x17
     b78:	30 91 24 01 	lds	r19, 0x0124
     b7c:	38 8f       	std	Y+24, r19	; 0x18
     b7e:	40 91 00 01 	lds	r20, 0x0100
     b82:	4d 83       	std	Y+5, r20	; 0x05
     b84:	50 91 01 01 	lds	r21, 0x0101
     b88:	5e 83       	std	Y+6, r21	; 0x06
     b8a:	20 90 02 01 	lds	r2, 0x0102
     b8e:	30 90 03 01 	lds	r3, 0x0103
     b92:	60 91 1b 01 	lds	r22, 0x011B
     b96:	69 8f       	std	Y+25, r22	; 0x19
     b98:	70 91 1c 01 	lds	r23, 0x011C
     b9c:	7a 8f       	std	Y+26, r23	; 0x1a
     b9e:	80 91 19 01 	lds	r24, 0x0119
     ba2:	90 91 1a 01 	lds	r25, 0x011A
     ba6:	98 8b       	std	Y+16, r25	; 0x10
     ba8:	8f 87       	std	Y+15, r24	; 0x0f
     baa:	18 86       	std	Y+8, r1	; 0x08
     bac:	1f 82       	std	Y+7, r1	; 0x07
     bae:	c1 2c       	mov	r12, r1
     bb0:	d1 2c       	mov	r13, r1
     bb2:	b9 c0       	rjmp	.+370    	; 0xd26 <__stack+0x227>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     bb4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     bb6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     bb8:	e4 15       	cp	r30, r4
     bba:	f5 05       	cpc	r31, r5
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <__stack+0xc1>
     bbe:	9c c0       	rjmp	.+312    	; 0xcf8 <__stack+0x1f9>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     bc0:	e9 85       	ldd	r30, Y+9	; 0x09
     bc2:	fa 85       	ldd	r31, Y+10	; 0x0a
     bc4:	60 81       	ld	r22, Z
     bc6:	71 81       	ldd	r23, Z+1	; 0x01
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24
     bd4:	f3 01       	movw	r30, r6
     bd6:	60 81       	ld	r22, Z
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
     bee:	c6 2e       	mov	r12, r22
     bf0:	d7 2e       	mov	r13, r23
     bf2:	e8 2e       	mov	r14, r24
     bf4:	f9 2e       	mov	r15, r25
     bf6:	eb 85       	ldd	r30, Y+11	; 0x0b
     bf8:	fc 85       	ldd	r31, Y+12	; 0x0c
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
     c0a:	f8 01       	movw	r30, r16
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	c5 01       	movw	r24, r10
     c1e:	b4 01       	movw	r22, r8
     c20:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
     c24:	86 2e       	mov	r8, r22
     c26:	97 2e       	mov	r9, r23
     c28:	a8 2e       	mov	r10, r24
     c2a:	b9 2e       	mov	r11, r25
     c2c:	2c 2d       	mov	r18, r12
     c2e:	3d 2d       	mov	r19, r13
     c30:	4e 2d       	mov	r20, r14
     c32:	5f 2d       	mov	r21, r15
     c34:	6c 2d       	mov	r22, r12
     c36:	7d 2d       	mov	r23, r13
     c38:	8e 2d       	mov	r24, r14
     c3a:	9f 2d       	mov	r25, r15
     c3c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
     c44:	28 2d       	mov	r18, r8
     c46:	39 2d       	mov	r19, r9
     c48:	4a 2d       	mov	r20, r10
     c4a:	5b 2d       	mov	r21, r11
     c4c:	68 2d       	mov	r22, r8
     c4e:	79 2d       	mov	r23, r9
     c50:	8a 2d       	mov	r24, r10
     c52:	9b 2d       	mov	r25, r11
     c54:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
     c64:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <sqrt>
     c68:	86 2e       	mov	r8, r22
     c6a:	97 2e       	mov	r9, r23
     c6c:	a8 2e       	mov	r10, r24
     c6e:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     c70:	79 81       	ldd	r23, Y+1	; 0x01
     c72:	6a 81       	ldd	r22, Y+2	; 0x02
     c74:	9b 81       	ldd	r25, Y+3	; 0x03
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	27 2f       	mov	r18, r23
     c7a:	36 2f       	mov	r19, r22
     c7c:	49 2f       	mov	r20, r25
     c7e:	58 2f       	mov	r21, r24
     c80:	68 2d       	mov	r22, r8
     c82:	79 2d       	mov	r23, r9
     c84:	8a 2d       	mov	r24, r10
     c86:	9b 2d       	mov	r25, r11
     c88:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__gesf2>
     c8c:	18 16       	cp	r1, r24
     c8e:	d4 f4       	brge	.+52     	; 0xcc4 <__stack+0x1c5>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	68 2d       	mov	r22, r8
     c9a:	79 2d       	mov	r23, r9
     c9c:	8a 2d       	mov	r24, r10
     c9e:	9b 2d       	mov	r25, r11
     ca0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     ca4:	6d 8b       	std	Y+21, r22	; 0x15
     ca6:	7e 8b       	std	Y+22, r23	; 0x16
     ca8:	8f 8b       	std	Y+23, r24	; 0x17
     caa:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     cac:	fb 8d       	ldd	r31, Y+27	; 0x1b
     cae:	f9 8b       	std	Y+17, r31	; 0x11
     cb0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cb2:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     cb4:	3d 85       	ldd	r19, Y+13	; 0x0d
     cb6:	3b 8b       	std	Y+19, r19	; 0x13
     cb8:	4e 85       	ldd	r20, Y+14	; 0x0e
     cba:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     cbc:	89 82       	std	Y+1, r8	; 0x01
     cbe:	9a 82       	std	Y+2, r9	; 0x02
     cc0:	ab 82       	std	Y+3, r10	; 0x03
     cc2:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     cc4:	7d 81       	ldd	r23, Y+5	; 0x05
     cc6:	6e 81       	ldd	r22, Y+6	; 0x06
     cc8:	27 2f       	mov	r18, r23
     cca:	36 2f       	mov	r19, r22
     ccc:	42 2d       	mov	r20, r2
     cce:	53 2d       	mov	r21, r3
     cd0:	68 2d       	mov	r22, r8
     cd2:	79 2d       	mov	r23, r9
     cd4:	8a 2d       	mov	r24, r10
     cd6:	9b 2d       	mov	r25, r11
     cd8:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
     cdc:	88 23       	and	r24, r24
     cde:	64 f4       	brge	.+24     	; 0xcf8 <__stack+0x1f9>
						distmin = dist;
						close1 = i;
						close2 = j;
     ce0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ce2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ce4:	78 8b       	std	Y+16, r23	; 0x10
     ce6:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     ce8:	7d 85       	ldd	r23, Y+13	; 0x0d
     cea:	79 8f       	std	Y+25, r23	; 0x19
     cec:	8e 85       	ldd	r24, Y+14	; 0x0e
     cee:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     cf0:	8d 82       	std	Y+5, r8	; 0x05
     cf2:	9e 82       	std	Y+6, r9	; 0x06
     cf4:	2a 2c       	mov	r2, r10
     cf6:	3b 2c       	mov	r3, r11
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	69 0e       	add	r6, r25
     cfc:	71 1c       	adc	r7, r1
     cfe:	0e 5f       	subi	r16, 0xFE	; 254
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     d02:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d04:	fc 8d       	ldd	r31, Y+28	; 0x1c
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	fc 8f       	std	Y+28, r31	; 0x1c
     d0a:	eb 8f       	std	Y+27, r30	; 0x1b
     d0c:	34 97       	sbiw	r30, 0x04	; 4
     d0e:	09 f0       	breq	.+2      	; 0xd12 <__stack+0x213>
     d10:	51 cf       	rjmp	.-350    	; 0xbb4 <__stack+0xb5>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     d12:	2f 81       	ldd	r18, Y+7	; 0x07
     d14:	38 85       	ldd	r19, Y+8	; 0x08
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	38 87       	std	Y+8, r19	; 0x08
     d1c:	2f 83       	std	Y+7, r18	; 0x07
     d1e:	69 01       	movw	r12, r18
     d20:	24 30       	cpi	r18, 0x04	; 4
     d22:	31 05       	cpc	r19, r1
     d24:	39 f1       	breq	.+78     	; 0xd74 <__stack+0x275>
				for (int j = i; j < 4; j++) {
     d26:	34 e0       	ldi	r19, 0x04	; 4
     d28:	c3 16       	cp	r12, r19
     d2a:	d1 04       	cpc	r13, r1
     d2c:	94 f7       	brge	.-28     	; 0xd12 <__stack+0x213>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     d2e:	86 01       	movw	r16, r12
     d30:	0f 5f       	subi	r16, 0xFF	; 255
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     d34:	00 0f       	add	r16, r16
     d36:	11 1f       	adc	r17, r17
     d38:	0f 2e       	mov	r0, r31
     d3a:	f5 e3       	ldi	r31, 0x35	; 53
     d3c:	ef 2e       	mov	r14, r31
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	ff 2e       	mov	r15, r31
     d42:	f0 2d       	mov	r31, r0
     d44:	e0 0e       	add	r14, r16
     d46:	f1 1e       	adc	r15, r17
     d48:	03 5d       	subi	r16, 0xD3	; 211
     d4a:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     d4c:	c6 01       	movw	r24, r12
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	ac 01       	movw	r20, r24
     d54:	4b 5c       	subi	r20, 0xCB	; 203
     d56:	5e 4f       	sbci	r21, 0xFE	; 254
     d58:	5a 87       	std	Y+10, r21	; 0x0a
     d5a:	49 87       	std	Y+9, r20	; 0x09
     d5c:	bc 01       	movw	r22, r24
     d5e:	63 5d       	subi	r22, 0xD3	; 211
     d60:	7e 4f       	sbci	r23, 0xFE	; 254
     d62:	7c 87       	std	Y+12, r23	; 0x0c
     d64:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     d66:	cd 86       	std	Y+13, r12	; 0x0d
     d68:	de 86       	std	Y+14, r13	; 0x0e
     d6a:	dc 8e       	std	Y+28, r13	; 0x1c
     d6c:	cb 8e       	std	Y+27, r12	; 0x1b
     d6e:	26 01       	movw	r4, r12
     d70:	37 01       	movw	r6, r14
     d72:	c7 cf       	rjmp	.-114    	; 0xd02 <__stack+0x203>
     d74:	88 2d       	mov	r24, r8
     d76:	99 2d       	mov	r25, r9
     d78:	aa 2d       	mov	r26, r10
     d7a:	bb 2d       	mov	r27, r11
     d7c:	80 93 29 01 	sts	0x0129, r24
     d80:	90 93 2a 01 	sts	0x012A, r25
     d84:	a0 93 2b 01 	sts	0x012B, r26
     d88:	b0 93 2c 01 	sts	0x012C, r27
     d8c:	59 81       	ldd	r21, Y+1	; 0x01
     d8e:	4a 81       	ldd	r20, Y+2	; 0x02
     d90:	3b 81       	ldd	r19, Y+3	; 0x03
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	85 2f       	mov	r24, r21
     d96:	94 2f       	mov	r25, r20
     d98:	a3 2f       	mov	r26, r19
     d9a:	b2 2f       	mov	r27, r18
     d9c:	80 93 25 01 	sts	0x0125, r24
     da0:	90 93 26 01 	sts	0x0126, r25
     da4:	a0 93 27 01 	sts	0x0127, r26
     da8:	b0 93 28 01 	sts	0x0128, r27
     dac:	7b 89       	ldd	r23, Y+19	; 0x13
     dae:	70 93 1f 01 	sts	0x011F, r23
     db2:	8c 89       	ldd	r24, Y+20	; 0x14
     db4:	80 93 20 01 	sts	0x0120, r24
     db8:	99 89       	ldd	r25, Y+17	; 0x11
     dba:	90 93 1d 01 	sts	0x011D, r25
     dbe:	ea 89       	ldd	r30, Y+18	; 0x12
     dc0:	e0 93 1e 01 	sts	0x011E, r30
     dc4:	5d 89       	ldd	r21, Y+21	; 0x15
     dc6:	4e 89       	ldd	r20, Y+22	; 0x16
     dc8:	3f 89       	ldd	r19, Y+23	; 0x17
     dca:	28 8d       	ldd	r18, Y+24	; 0x18
     dcc:	85 2f       	mov	r24, r21
     dce:	94 2f       	mov	r25, r20
     dd0:	a3 2f       	mov	r26, r19
     dd2:	b2 2f       	mov	r27, r18
     dd4:	80 93 21 01 	sts	0x0121, r24
     dd8:	90 93 22 01 	sts	0x0122, r25
     ddc:	a0 93 23 01 	sts	0x0123, r26
     de0:	b0 93 24 01 	sts	0x0124, r27
     de4:	5d 81       	ldd	r21, Y+5	; 0x05
     de6:	4e 81       	ldd	r20, Y+6	; 0x06
     de8:	85 2f       	mov	r24, r21
     dea:	94 2f       	mov	r25, r20
     dec:	a2 2d       	mov	r26, r2
     dee:	b3 2d       	mov	r27, r3
     df0:	80 93 00 01 	sts	0x0100, r24
     df4:	90 93 01 01 	sts	0x0101, r25
     df8:	a0 93 02 01 	sts	0x0102, r26
     dfc:	b0 93 03 01 	sts	0x0103, r27
     e00:	f9 8d       	ldd	r31, Y+25	; 0x19
     e02:	f0 93 1b 01 	sts	0x011B, r31
     e06:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e08:	20 93 1c 01 	sts	0x011C, r18
     e0c:	3f 85       	ldd	r19, Y+15	; 0x0f
     e0e:	30 93 19 01 	sts	0x0119, r19
     e12:	48 89       	ldd	r20, Y+16	; 0x10
     e14:	40 93 1a 01 	sts	0x011A, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     e18:	80 91 1f 01 	lds	r24, 0x011F
     e1c:	90 91 20 01 	lds	r25, 0x0120
     e20:	20 91 1b 01 	lds	r18, 0x011B
     e24:	30 91 1c 01 	lds	r19, 0x011C
     e28:	82 17       	cp	r24, r18
     e2a:	93 07       	cpc	r25, r19
     e2c:	19 f5       	brne	.+70     	; 0xe74 <__stack+0x375>
				top = far1;
     e2e:	90 93 5c 01 	sts	0x015C, r25
     e32:	80 93 5b 01 	sts	0x015B, r24
				bottom = far2;
     e36:	40 91 1d 01 	lds	r20, 0x011D
     e3a:	50 91 1e 01 	lds	r21, 0x011E
     e3e:	50 93 5a 01 	sts	0x015A, r21
     e42:	40 93 59 01 	sts	0x0159, r20
				right = close2;
     e46:	20 91 19 01 	lds	r18, 0x0119
     e4a:	30 91 1a 01 	lds	r19, 0x011A
     e4e:	30 93 56 01 	sts	0x0156, r19
     e52:	20 93 55 01 	sts	0x0155, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     e56:	69 e0       	ldi	r22, 0x09	; 9
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	fb 01       	movw	r30, r22
     e5c:	e8 1b       	sub	r30, r24
     e5e:	f9 0b       	sbc	r31, r25
     e60:	cf 01       	movw	r24, r30
     e62:	84 1b       	sub	r24, r20
     e64:	95 0b       	sbc	r25, r21
     e66:	82 1b       	sub	r24, r18
     e68:	93 0b       	sbc	r25, r19
     e6a:	90 93 58 01 	sts	0x0158, r25
     e6e:	80 93 57 01 	sts	0x0157, r24
     e72:	66 c0       	rjmp	.+204    	; 0xf40 <__stack+0x441>
			}
			else if (far1 == close2) {
     e74:	4f 85       	ldd	r20, Y+15	; 0x0f
     e76:	58 89       	ldd	r21, Y+16	; 0x10
     e78:	84 17       	cp	r24, r20
     e7a:	95 07       	cpc	r25, r21
     e7c:	f9 f4       	brne	.+62     	; 0xebc <__stack+0x3bd>
				top = far1;
     e7e:	90 93 5c 01 	sts	0x015C, r25
     e82:	80 93 5b 01 	sts	0x015B, r24
				bottom = far2;
     e86:	40 91 1d 01 	lds	r20, 0x011D
     e8a:	50 91 1e 01 	lds	r21, 0x011E
     e8e:	50 93 5a 01 	sts	0x015A, r21
     e92:	40 93 59 01 	sts	0x0159, r20
				right = close1;
     e96:	30 93 56 01 	sts	0x0156, r19
     e9a:	20 93 55 01 	sts	0x0155, r18
				left = 9 - top - bottom - right;
     e9e:	69 e0       	ldi	r22, 0x09	; 9
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	fb 01       	movw	r30, r22
     ea4:	e8 1b       	sub	r30, r24
     ea6:	f9 0b       	sbc	r31, r25
     ea8:	cf 01       	movw	r24, r30
     eaa:	84 1b       	sub	r24, r20
     eac:	95 0b       	sbc	r25, r21
     eae:	82 1b       	sub	r24, r18
     eb0:	93 0b       	sbc	r25, r19
     eb2:	90 93 58 01 	sts	0x0158, r25
     eb6:	80 93 57 01 	sts	0x0157, r24
     eba:	42 c0       	rjmp	.+132    	; 0xf40 <__stack+0x441>
			}
			else if (far2 == close1) {
     ebc:	40 91 1d 01 	lds	r20, 0x011D
     ec0:	50 91 1e 01 	lds	r21, 0x011E
     ec4:	24 17       	cp	r18, r20
     ec6:	35 07       	cpc	r19, r21
     ec8:	01 f5       	brne	.+64     	; 0xf0a <__stack+0x40b>
				top = far2;
     eca:	30 93 5c 01 	sts	0x015C, r19
     ece:	20 93 5b 01 	sts	0x015B, r18
				bottom = far1;
     ed2:	90 93 5a 01 	sts	0x015A, r25
     ed6:	80 93 59 01 	sts	0x0159, r24
				right = close2;
     eda:	4f 85       	ldd	r20, Y+15	; 0x0f
     edc:	58 89       	ldd	r21, Y+16	; 0x10
     ede:	50 93 56 01 	sts	0x0156, r21
     ee2:	40 93 55 01 	sts	0x0155, r20
				left = 9 - top - bottom - right;
     ee6:	49 e0       	ldi	r20, 0x09	; 9
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	ba 01       	movw	r22, r20
     eec:	62 1b       	sub	r22, r18
     eee:	73 0b       	sbc	r23, r19
     ef0:	fb 01       	movw	r30, r22
     ef2:	e8 1b       	sub	r30, r24
     ef4:	f9 0b       	sbc	r31, r25
     ef6:	cf 01       	movw	r24, r30
     ef8:	2f 85       	ldd	r18, Y+15	; 0x0f
     efa:	38 89       	ldd	r19, Y+16	; 0x10
     efc:	82 1b       	sub	r24, r18
     efe:	93 0b       	sbc	r25, r19
     f00:	90 93 58 01 	sts	0x0158, r25
     f04:	80 93 57 01 	sts	0x0157, r24
     f08:	1b c0       	rjmp	.+54     	; 0xf40 <__stack+0x441>
			}
			else {
				top = far2;
     f0a:	50 93 5c 01 	sts	0x015C, r21
     f0e:	40 93 5b 01 	sts	0x015B, r20
				bottom = far1;
     f12:	90 93 5a 01 	sts	0x015A, r25
     f16:	80 93 59 01 	sts	0x0159, r24
				right = close1;
     f1a:	30 93 56 01 	sts	0x0156, r19
     f1e:	20 93 55 01 	sts	0x0155, r18
				left = 9 - top - bottom - right;
     f22:	69 e0       	ldi	r22, 0x09	; 9
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	fb 01       	movw	r30, r22
     f28:	e4 1b       	sub	r30, r20
     f2a:	f5 0b       	sbc	r31, r21
     f2c:	bf 01       	movw	r22, r30
     f2e:	68 1b       	sub	r22, r24
     f30:	79 0b       	sbc	r23, r25
     f32:	cb 01       	movw	r24, r22
     f34:	82 1b       	sub	r24, r18
     f36:	93 0b       	sbc	r25, r19
     f38:	90 93 58 01 	sts	0x0158, r25
     f3c:	80 93 57 01 	sts	0x0157, r24
			}
		}
	}
	return 1;
}
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	6c 96       	adiw	r28, 0x1c	; 28
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	9f 90       	pop	r9
     f64:	8f 90       	pop	r8
     f66:	7f 90       	pop	r7
     f68:	6f 90       	pop	r6
     f6a:	5f 90       	pop	r5
     f6c:	4f 90       	pop	r4
     f6e:	3f 90       	pop	r3
     f70:	2f 90       	pop	r2
     f72:	08 95       	ret

00000f74 <local_init>:
	
	return 1;
}

unsigned char local_init() {
	m_wii_open();
     f74:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <m_wii_open>
	
	getData(x,y);
     f78:	6d e2       	ldi	r22, 0x2D	; 45
     f7a:	71 e0       	ldi	r23, 0x01	; 1
     f7c:	85 e3       	ldi	r24, 0x35	; 53
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 f7 04 	call	0x9ee	; 0x9ee <getData>
	

	//Determine indices of all top, bottom, left, right points
	determine_blobs();
     f84:	0e 94 38 05 	call	0xa70	; 0xa70 <determine_blobs>
	
	return 1;
}
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	08 95       	ret

00000f8c <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
     f8c:	2f 92       	push	r2
     f8e:	3f 92       	push	r3
     f90:	4f 92       	push	r4
     f92:	5f 92       	push	r5
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2d 97       	sbiw	r28, 0x0d	; 13
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	8c 01       	movw	r16, r24
	numlost = 0;
     fc2:	10 92 18 01 	sts	0x0118, r1
     fc6:	10 92 17 01 	sts	0x0117, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
     fca:	0e 94 38 05 	call	0xa70	; 0xa70 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
     fce:	e0 90 5b 01 	lds	r14, 0x015B
     fd2:	f0 90 5c 01 	lds	r15, 0x015C
     fd6:	f7 01       	movw	r30, r14
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	eb 5c       	subi	r30, 0xCB	; 203
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	20 81       	ld	r18, Z
     fe2:	31 81       	ldd	r19, Z+1	; 0x01
     fe4:	3a 83       	std	Y+2, r19	; 0x02
     fe6:	29 83       	std	Y+1, r18	; 0x01
     fe8:	2f 3f       	cpi	r18, 0xFF	; 255
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	38 07       	cpc	r19, r24
     fee:	08 f0       	brcs	.+2      	; 0xff2 <localize+0x66>
     ff0:	ea c2       	rjmp	.+1492   	; 0x15c6 <localize+0x63a>
     ff2:	a0 90 59 01 	lds	r10, 0x0159
     ff6:	b0 90 5a 01 	lds	r11, 0x015A
     ffa:	f5 01       	movw	r30, r10
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	eb 5c       	subi	r30, 0xCB	; 203
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	c0 80       	ld	r12, Z
    1006:	d1 80       	ldd	r13, Z+1	; 0x01
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	c9 16       	cp	r12, r25
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	d9 06       	cpc	r13, r25
    1010:	08 f0       	brcs	.+2      	; 0x1014 <localize+0x88>
    1012:	d9 c2       	rjmp	.+1458   	; 0x15c6 <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    1014:	b9 01       	movw	r22, r18
    1016:	6c 0d       	add	r22, r12
    1018:	7d 1d       	adc	r23, r13
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    102e:	20 91 08 01 	lds	r18, 0x0108
    1032:	30 91 09 01 	lds	r19, 0x0109
    1036:	40 91 0a 01 	lds	r20, 0x010A
    103a:	50 91 0b 01 	lds	r21, 0x010B
    103e:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
    1042:	6d 83       	std	Y+5, r22	; 0x05
    1044:	7e 83       	std	Y+6, r23	; 0x06
    1046:	8f 83       	std	Y+7, r24	; 0x07
    1048:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    104a:	f7 01       	movw	r30, r14
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e3 5d       	subi	r30, 0xD3	; 211
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	e0 80       	ld	r14, Z
    1056:	f1 80       	ldd	r15, Z+1	; 0x01
    1058:	f5 01       	movw	r30, r10
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	e3 5d       	subi	r30, 0xD3	; 211
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	a0 80       	ld	r10, Z
    1064:	b1 80       	ldd	r11, Z+1	; 0x01
    1066:	b5 01       	movw	r22, r10
    1068:	6e 0d       	add	r22, r14
    106a:	7f 1d       	adc	r23, r15
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1080:	20 91 04 01 	lds	r18, 0x0104
    1084:	30 91 05 01 	lds	r19, 0x0105
    1088:	40 91 06 01 	lds	r20, 0x0106
    108c:	50 91 07 01 	lds	r21, 0x0107
    1090:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
    1094:	69 87       	std	Y+9, r22	; 0x09
    1096:	7a 87       	std	Y+10, r23	; 0x0a
    1098:	28 2e       	mov	r2, r24
    109a:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    109c:	b7 01       	movw	r22, r14
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    10a6:	2b 01       	movw	r4, r22
    10a8:	3c 01       	movw	r6, r24
    10aa:	b5 01       	movw	r22, r10
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	c3 01       	movw	r24, r6
    10ba:	b2 01       	movw	r22, r4
    10bc:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
    10c0:	4b 01       	movw	r8, r22
    10c2:	5c 01       	movw	r10, r24
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	fa 81       	ldd	r31, Y+2	; 0x02
    10c8:	bf 01       	movw	r22, r30
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    10d2:	2b 01       	movw	r4, r22
    10d4:	3c 01       	movw	r6, r24
    10d6:	b6 01       	movw	r22, r12
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    10e0:	9b 01       	movw	r18, r22
    10e2:	ac 01       	movw	r20, r24
    10e4:	c3 01       	movw	r24, r6
    10e6:	b2 01       	movw	r22, r4
    10e8:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
    10ec:	a5 01       	movw	r20, r10
    10ee:	94 01       	movw	r18, r8
    10f0:	0e 94 bc 10 	call	0x2178	; 0x2178 <atan2>
    10f4:	4b 01       	movw	r8, r22
    10f6:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    10f8:	7d 81       	ldd	r23, Y+5	; 0x05
    10fa:	6e 81       	ldd	r22, Y+6	; 0x06
    10fc:	9f 81       	ldd	r25, Y+7	; 0x07
    10fe:	88 85       	ldd	r24, Y+8	; 0x08
    1100:	27 2f       	mov	r18, r23
    1102:	36 2f       	mov	r19, r22
    1104:	49 2f       	mov	r20, r25
    1106:	58 2f       	mov	r21, r24
    1108:	b9 85       	ldd	r27, Y+9	; 0x09
    110a:	aa 85       	ldd	r26, Y+10	; 0x0a
    110c:	6b 2f       	mov	r22, r27
    110e:	7a 2f       	mov	r23, r26
    1110:	82 2d       	mov	r24, r2
    1112:	93 2d       	mov	r25, r3
    1114:	0e 94 bc 10 	call	0x2178	; 0x2178 <atan2>
    1118:	2b 01       	movw	r4, r22
    111a:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    111c:	7d 81       	ldd	r23, Y+5	; 0x05
    111e:	6e 81       	ldd	r22, Y+6	; 0x06
    1120:	9f 81       	ldd	r25, Y+7	; 0x07
    1122:	88 85       	ldd	r24, Y+8	; 0x08
    1124:	27 2f       	mov	r18, r23
    1126:	36 2f       	mov	r19, r22
    1128:	49 2f       	mov	r20, r25
    112a:	58 2f       	mov	r21, r24
    112c:	67 2f       	mov	r22, r23
    112e:	73 2f       	mov	r23, r19
    1130:	89 2f       	mov	r24, r25
    1132:	95 2f       	mov	r25, r21
    1134:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24
    113c:	79 85       	ldd	r23, Y+9	; 0x09
    113e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1140:	27 2f       	mov	r18, r23
    1142:	36 2f       	mov	r19, r22
    1144:	42 2d       	mov	r20, r2
    1146:	53 2d       	mov	r21, r3
    1148:	67 2f       	mov	r22, r23
    114a:	73 2f       	mov	r23, r19
    114c:	82 2d       	mov	r24, r2
    114e:	93 2d       	mov	r25, r3
    1150:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	c7 01       	movw	r24, r14
    115a:	b6 01       	movw	r22, r12
    115c:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
    1160:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <sqrt>
    1164:	6b 01       	movw	r12, r22
    1166:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	60 91 3d 01 	lds	r22, 0x013D
    1172:	70 91 3e 01 	lds	r23, 0x013E
    1176:	80 91 3f 01 	lds	r24, 0x013F
    117a:	90 91 40 01 	lds	r25, 0x0140
    117e:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
    1182:	81 11       	cpse	r24, r1
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <localize+0x20a>
			ai1 = angle;
    1186:	80 92 3d 01 	sts	0x013D, r8
    118a:	90 92 3e 01 	sts	0x013E, r9
    118e:	a0 92 3f 01 	sts	0x013F, r10
    1192:	b0 92 40 01 	sts	0x0140, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    1196:	23 e3       	ldi	r18, 0x33	; 51
    1198:	33 e3       	ldi	r19, 0x33	; 51
    119a:	43 e7       	ldi	r20, 0x73	; 115
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	60 91 3d 01 	lds	r22, 0x013D
    11a2:	70 91 3e 01 	lds	r23, 0x013E
    11a6:	80 91 3f 01 	lds	r24, 0x013F
    11aa:	90 91 40 01 	lds	r25, 0x0140
    11ae:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    11b2:	4b 01       	movw	r8, r22
    11b4:	5c 01       	movw	r10, r24
    11b6:	20 ed       	ldi	r18, 0xD0	; 208
    11b8:	3c ec       	ldi	r19, 0xCC	; 204
    11ba:	4c e4       	ldi	r20, 0x4C	; 76
    11bc:	5d e3       	ldi	r21, 0x3D	; 61
    11be:	60 91 49 01 	lds	r22, 0x0149
    11c2:	70 91 4a 01 	lds	r23, 0x014A
    11c6:	80 91 4b 01 	lds	r24, 0x014B
    11ca:	90 91 4c 01 	lds	r25, 0x014C
    11ce:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	c5 01       	movw	r24, r10
    11d8:	b4 01       	movw	r22, r8
    11da:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	44 e3       	ldi	r20, 0x34	; 52
    11e4:	53 e4       	ldi	r21, 0x43	; 67
    11e6:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    11ea:	23 ec       	ldi	r18, 0xC3	; 195
    11ec:	35 ef       	ldi	r19, 0xF5	; 245
    11ee:	48 e4       	ldi	r20, 0x48	; 72
    11f0:	50 e4       	ldi	r21, 0x40	; 64
    11f2:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3>
    11f6:	86 2e       	mov	r8, r22
    11f8:	97 2e       	mov	r9, r23
    11fa:	a8 2e       	mov	r10, r24
    11fc:	b9 2e       	mov	r11, r25
    11fe:	f8 01       	movw	r30, r16
    1200:	80 86       	std	Z+8, r8	; 0x08
    1202:	91 86       	std	Z+9, r9	; 0x09
    1204:	a2 86       	std	Z+10, r10	; 0x0a
    1206:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1208:	23 ec       	ldi	r18, 0xC3	; 195
    120a:	35 ef       	ldi	r19, 0xF5	; 245
    120c:	48 e4       	ldi	r20, 0x48	; 72
    120e:	50 e4       	ldi	r21, 0x40	; 64
    1210:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	44 e3       	ldi	r20, 0x34	; 52
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3>
    1220:	9b 01       	movw	r18, r22
    1222:	ac 01       	movw	r20, r24
    1224:	62 e5       	ldi	r22, 0x52	; 82
    1226:	78 eb       	ldi	r23, 0xB8	; 184
    1228:	86 e9       	ldi	r24, 0x96	; 150
    122a:	90 e4       	ldi	r25, 0x40	; 64
    122c:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
    1230:	a3 01       	movw	r20, r6
    1232:	92 01       	movw	r18, r4
    1234:	0e 94 48 10 	call	0x2090	; 0x2090 <__subsf3>
    1238:	86 2e       	mov	r8, r22
    123a:	97 2e       	mov	r9, r23
    123c:	a8 2e       	mov	r10, r24
    123e:	b9 2e       	mov	r11, r25
    1240:	0e 94 c7 13 	call	0x278e	; 0x278e <sin>
    1244:	9b 01       	movw	r18, r22
    1246:	ac 01       	movw	r20, r24
    1248:	c7 01       	movw	r24, r14
    124a:	b6 01       	movw	r22, r12
    124c:	90 58       	subi	r25, 0x80	; 128
    124e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1252:	29 e3       	ldi	r18, 0x39	; 57
    1254:	3e e8       	ldi	r19, 0x8E	; 142
    1256:	43 ea       	ldi	r20, 0xA3	; 163
    1258:	5e e3       	ldi	r21, 0x3E	; 62
    125a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    125e:	69 83       	std	Y+1, r22	; 0x01
    1260:	7b 87       	std	Y+11, r23	; 0x0b
    1262:	8d 87       	std	Y+13, r24	; 0x0d
    1264:	9c 87       	std	Y+12, r25	; 0x0c
    1266:	47 2f       	mov	r20, r23
    1268:	38 2f       	mov	r19, r24
    126a:	29 2f       	mov	r18, r25
    126c:	86 2f       	mov	r24, r22
    126e:	94 2f       	mov	r25, r20
    1270:	a3 2f       	mov	r26, r19
    1272:	b2 2f       	mov	r27, r18
    1274:	80 93 51 01 	sts	0x0151, r24
    1278:	90 93 52 01 	sts	0x0152, r25
    127c:	a0 93 53 01 	sts	0x0153, r26
    1280:	b0 93 54 01 	sts	0x0154, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1284:	68 2d       	mov	r22, r8
    1286:	79 2d       	mov	r23, r9
    1288:	8a 2d       	mov	r24, r10
    128a:	9b 2d       	mov	r25, r11
    128c:	0e 94 13 11 	call	0x2226	; 0x2226 <cos>
    1290:	a7 01       	movw	r20, r14
    1292:	96 01       	movw	r18, r12
    1294:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1298:	29 e8       	ldi	r18, 0x89	; 137
    129a:	3a ed       	ldi	r19, 0xDA	; 218
    129c:	45 e9       	ldi	r20, 0x95	; 149
    129e:	5e e3       	ldi	r21, 0x3E	; 62
    12a0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    12a4:	86 2e       	mov	r8, r22
    12a6:	97 2e       	mov	r9, r23
    12a8:	a8 2e       	mov	r10, r24
    12aa:	b9 2e       	mov	r11, r25
    12ac:	86 2f       	mov	r24, r22
    12ae:	99 2d       	mov	r25, r9
    12b0:	aa 2d       	mov	r26, r10
    12b2:	bb 2d       	mov	r27, r11
    12b4:	80 93 4d 01 	sts	0x014D, r24
    12b8:	90 93 4e 01 	sts	0x014E, r25
    12bc:	a0 93 4f 01 	sts	0x014F, r26
    12c0:	b0 93 50 01 	sts	0x0150, r27
		
		if (xi1 == 0 && yi1 == 0) {
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	a9 01       	movw	r20, r18
    12ca:	60 91 45 01 	lds	r22, 0x0145
    12ce:	70 91 46 01 	lds	r23, 0x0146
    12d2:	80 91 47 01 	lds	r24, 0x0147
    12d6:	90 91 48 01 	lds	r25, 0x0148
    12da:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
    12de:	81 11       	cpse	r24, r1
    12e0:	2b c0       	rjmp	.+86     	; 0x1338 <localize+0x3ac>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	60 91 41 01 	lds	r22, 0x0141
    12ec:	70 91 42 01 	lds	r23, 0x0142
    12f0:	80 91 43 01 	lds	r24, 0x0143
    12f4:	90 91 44 01 	lds	r25, 0x0144
    12f8:	0e 94 0f 11 	call	0x221e	; 0x221e <__cmpsf2>
    12fc:	81 11       	cpse	r24, r1
    12fe:	1c c0       	rjmp	.+56     	; 0x1338 <localize+0x3ac>
			xi1 = xi;
    1300:	59 81       	ldd	r21, Y+1	; 0x01
    1302:	4b 85       	ldd	r20, Y+11	; 0x0b
    1304:	3d 85       	ldd	r19, Y+13	; 0x0d
    1306:	2c 85       	ldd	r18, Y+12	; 0x0c
    1308:	85 2f       	mov	r24, r21
    130a:	94 2f       	mov	r25, r20
    130c:	a3 2f       	mov	r26, r19
    130e:	b2 2f       	mov	r27, r18
    1310:	80 93 45 01 	sts	0x0145, r24
    1314:	90 93 46 01 	sts	0x0146, r25
    1318:	a0 93 47 01 	sts	0x0147, r26
    131c:	b0 93 48 01 	sts	0x0148, r27
			yi1 = yi;
    1320:	88 2d       	mov	r24, r8
    1322:	99 2d       	mov	r25, r9
    1324:	aa 2d       	mov	r26, r10
    1326:	bb 2d       	mov	r27, r11
    1328:	80 93 41 01 	sts	0x0141, r24
    132c:	90 93 42 01 	sts	0x0142, r25
    1330:	a0 93 43 01 	sts	0x0143, r26
    1334:	b0 93 44 01 	sts	0x0144, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    1338:	23 e3       	ldi	r18, 0x33	; 51
    133a:	33 e3       	ldi	r19, 0x33	; 51
    133c:	43 e7       	ldi	r20, 0x73	; 115
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	60 91 45 01 	lds	r22, 0x0145
    1344:	70 91 46 01 	lds	r23, 0x0146
    1348:	80 91 47 01 	lds	r24, 0x0147
    134c:	90 91 48 01 	lds	r25, 0x0148
    1350:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1354:	4b 01       	movw	r8, r22
    1356:	5c 01       	movw	r10, r24
    1358:	20 ed       	ldi	r18, 0xD0	; 208
    135a:	3c ec       	ldi	r19, 0xCC	; 204
    135c:	4c e4       	ldi	r20, 0x4C	; 76
    135e:	5d e3       	ldi	r21, 0x3D	; 61
    1360:	b9 81       	ldd	r27, Y+1	; 0x01
    1362:	ab 85       	ldd	r26, Y+11	; 0x0b
    1364:	fd 85       	ldd	r31, Y+13	; 0x0d
    1366:	ec 85       	ldd	r30, Y+12	; 0x0c
    1368:	6b 2f       	mov	r22, r27
    136a:	7a 2f       	mov	r23, r26
    136c:	8f 2f       	mov	r24, r31
    136e:	9e 2f       	mov	r25, r30
    1370:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	c5 01       	movw	r24, r10
    137a:	b4 01       	movw	r22, r8
    137c:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
    1380:	f8 01       	movw	r30, r16
    1382:	60 83       	st	Z, r22
    1384:	71 83       	std	Z+1, r23	; 0x01
    1386:	82 83       	std	Z+2, r24	; 0x02
    1388:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    138a:	80 90 4d 01 	lds	r8, 0x014D
    138e:	90 90 4e 01 	lds	r9, 0x014E
    1392:	a0 90 4f 01 	lds	r10, 0x014F
    1396:	b0 90 50 01 	lds	r11, 0x0150
    139a:	23 e3       	ldi	r18, 0x33	; 51
    139c:	33 e3       	ldi	r19, 0x33	; 51
    139e:	43 e7       	ldi	r20, 0x73	; 115
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	60 91 41 01 	lds	r22, 0x0141
    13a6:	70 91 42 01 	lds	r23, 0x0142
    13aa:	80 91 43 01 	lds	r24, 0x0143
    13ae:	90 91 44 01 	lds	r25, 0x0144
    13b2:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    13b6:	69 83       	std	Y+1, r22	; 0x01
    13b8:	7a 83       	std	Y+2, r23	; 0x02
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	20 ed       	ldi	r18, 0xD0	; 208
    13c0:	3c ec       	ldi	r19, 0xCC	; 204
    13c2:	4c e4       	ldi	r20, 0x4C	; 76
    13c4:	5d e3       	ldi	r21, 0x3D	; 61
    13c6:	c5 01       	movw	r24, r10
    13c8:	b4 01       	movw	r22, r8
    13ca:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	69 81       	ldd	r22, Y+1	; 0x01
    13d4:	7a 81       	ldd	r23, Y+2	; 0x02
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	0e 94 49 10 	call	0x2092	; 0x2092 <__addsf3>
    13de:	f8 01       	movw	r30, r16
    13e0:	64 83       	std	Z+4, r22	; 0x04
    13e2:	75 83       	std	Z+5, r23	; 0x05
    13e4:	86 83       	std	Z+6, r24	; 0x06
    13e6:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    13e8:	80 91 5b 01 	lds	r24, 0x015B
    13ec:	90 91 5c 01 	lds	r25, 0x015C
    13f0:	9c 01       	movw	r18, r24
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	3a 83       	std	Y+2, r19	; 0x02
    13f8:	29 83       	std	Y+1, r18	; 0x01
    13fa:	f9 01       	movw	r30, r18
    13fc:	eb 5c       	subi	r30, 0xCB	; 203
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    140c:	f8 01       	movw	r30, r16
    140e:	64 87       	std	Z+12, r22	; 0x0c
    1410:	75 87       	std	Z+13, r23	; 0x0d
    1412:	86 87       	std	Z+14, r24	; 0x0e
    1414:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	e3 5d       	subi	r30, 0xD3	; 211
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    142a:	f8 01       	movw	r30, r16
    142c:	60 8b       	std	Z+16, r22	; 0x10
    142e:	71 8b       	std	Z+17, r23	; 0x11
    1430:	82 8b       	std	Z+18, r24	; 0x12
    1432:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1434:	80 91 59 01 	lds	r24, 0x0159
    1438:	90 91 5a 01 	lds	r25, 0x015A
    143c:	9c 01       	movw	r18, r24
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	3a 83       	std	Y+2, r19	; 0x02
    1444:	29 83       	std	Y+1, r18	; 0x01
    1446:	f9 01       	movw	r30, r18
    1448:	eb 5c       	subi	r30, 0xCB	; 203
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    1458:	f8 01       	movw	r30, r16
    145a:	64 8b       	std	Z+20, r22	; 0x14
    145c:	75 8b       	std	Z+21, r23	; 0x15
    145e:	86 8b       	std	Z+22, r24	; 0x16
    1460:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	e3 5d       	subi	r30, 0xD3	; 211
    1468:	fe 4f       	sbci	r31, 0xFE	; 254
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    1476:	f8 01       	movw	r30, r16
    1478:	60 8f       	std	Z+24, r22	; 0x18
    147a:	71 8f       	std	Z+25, r23	; 0x19
    147c:	82 8f       	std	Z+26, r24	; 0x1a
    147e:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1480:	80 91 55 01 	lds	r24, 0x0155
    1484:	90 91 56 01 	lds	r25, 0x0156
    1488:	9c 01       	movw	r18, r24
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	3a 83       	std	Y+2, r19	; 0x02
    1490:	29 83       	std	Y+1, r18	; 0x01
    1492:	f9 01       	movw	r30, r18
    1494:	eb 5c       	subi	r30, 0xCB	; 203
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    14a4:	f8 01       	movw	r30, r16
    14a6:	64 8f       	std	Z+28, r22	; 0x1c
    14a8:	75 8f       	std	Z+29, r23	; 0x1d
    14aa:	86 8f       	std	Z+30, r24	; 0x1e
    14ac:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	e3 5d       	subi	r30, 0xD3	; 211
    14b4:	fe 4f       	sbci	r31, 0xFE	; 254
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    14c2:	f8 01       	movw	r30, r16
    14c4:	60 a3       	std	Z+32, r22	; 0x20
    14c6:	71 a3       	std	Z+33, r23	; 0x21
    14c8:	82 a3       	std	Z+34, r24	; 0x22
    14ca:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    14cc:	80 91 57 01 	lds	r24, 0x0157
    14d0:	90 91 58 01 	lds	r25, 0x0158
    14d4:	9c 01       	movw	r18, r24
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	3a 83       	std	Y+2, r19	; 0x02
    14dc:	29 83       	std	Y+1, r18	; 0x01
    14de:	f9 01       	movw	r30, r18
    14e0:	eb 5c       	subi	r30, 0xCB	; 203
    14e2:	fe 4f       	sbci	r31, 0xFE	; 254
    14e4:	60 81       	ld	r22, Z
    14e6:	71 81       	ldd	r23, Z+1	; 0x01
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    14f0:	f8 01       	movw	r30, r16
    14f2:	64 a3       	std	Z+36, r22	; 0x24
    14f4:	75 a3       	std	Z+37, r23	; 0x25
    14f6:	86 a3       	std	Z+38, r24	; 0x26
    14f8:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	e3 5d       	subi	r30, 0xD3	; 211
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    150e:	f8 01       	movw	r30, r16
    1510:	60 a7       	std	Z+40, r22	; 0x28
    1512:	71 a7       	std	Z+41, r23	; 0x29
    1514:	82 a7       	std	Z+42, r24	; 0x2a
    1516:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	44 e3       	ldi	r20, 0x34	; 52
    151e:	53 e4       	ldi	r21, 0x43	; 67
    1520:	c3 01       	movw	r24, r6
    1522:	b2 01       	movw	r22, r4
    1524:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
    1528:	23 ec       	ldi	r18, 0xC3	; 195
    152a:	35 ef       	ldi	r19, 0xF5	; 245
    152c:	48 e4       	ldi	r20, 0x48	; 72
    152e:	50 e4       	ldi	r21, 0x40	; 64
    1530:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3>
    1534:	f8 01       	movw	r30, r16
    1536:	64 a7       	std	Z+44, r22	; 0x2c
    1538:	75 a7       	std	Z+45, r23	; 0x2d
    153a:	86 a7       	std	Z+46, r24	; 0x2e
    153c:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    153e:	5d 81       	ldd	r21, Y+5	; 0x05
    1540:	4e 81       	ldd	r20, Y+6	; 0x06
    1542:	3f 81       	ldd	r19, Y+7	; 0x07
    1544:	28 85       	ldd	r18, Y+8	; 0x08
    1546:	85 2f       	mov	r24, r21
    1548:	94 2f       	mov	r25, r20
    154a:	a3 2f       	mov	r26, r19
    154c:	b2 2f       	mov	r27, r18
    154e:	80 ab       	std	Z+48, r24	; 0x30
    1550:	91 ab       	std	Z+49, r25	; 0x31
    1552:	a2 ab       	std	Z+50, r26	; 0x32
    1554:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1556:	59 85       	ldd	r21, Y+9	; 0x09
    1558:	4a 85       	ldd	r20, Y+10	; 0x0a
    155a:	85 2f       	mov	r24, r21
    155c:	94 2f       	mov	r25, r20
    155e:	a2 2d       	mov	r26, r2
    1560:	b3 2d       	mov	r27, r3
    1562:	84 ab       	std	Z+52, r24	; 0x34
    1564:	95 ab       	std	Z+53, r25	; 0x35
    1566:	a6 ab       	std	Z+54, r26	; 0x36
    1568:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    156a:	c0 ae       	std	Z+56, r12	; 0x38
    156c:	d1 ae       	std	Z+57, r13	; 0x39
    156e:	e2 ae       	std	Z+58, r14	; 0x3a
    1570:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1572:	80 91 51 01 	lds	r24, 0x0151
    1576:	90 91 52 01 	lds	r25, 0x0152
    157a:	a0 91 53 01 	lds	r26, 0x0153
    157e:	b0 91 54 01 	lds	r27, 0x0154
    1582:	80 93 45 01 	sts	0x0145, r24
    1586:	90 93 46 01 	sts	0x0146, r25
    158a:	a0 93 47 01 	sts	0x0147, r26
    158e:	b0 93 48 01 	sts	0x0148, r27
		yi1 = yi;
    1592:	80 92 41 01 	sts	0x0141, r8
    1596:	90 92 42 01 	sts	0x0142, r9
    159a:	a0 92 43 01 	sts	0x0143, r10
    159e:	b0 92 44 01 	sts	0x0144, r11
		ai1 = ai;
    15a2:	80 91 49 01 	lds	r24, 0x0149
    15a6:	90 91 4a 01 	lds	r25, 0x014A
    15aa:	a0 91 4b 01 	lds	r26, 0x014B
    15ae:	b0 91 4c 01 	lds	r27, 0x014C
    15b2:	80 93 3d 01 	sts	0x013D, r24
    15b6:	90 93 3e 01 	sts	0x013E, r25
    15ba:	a0 93 3f 01 	sts	0x013F, r26
    15be:	b0 93 40 01 	sts	0x0140, r27
		
		return 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	00 c0       	rjmp	.+0      	; 0x15c6 <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    15c6:	2d 96       	adiw	r28, 0x0d	; 13
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	5f 90       	pop	r5
    15f0:	4f 90       	pop	r4
    15f2:	3f 90       	pop	r3
    15f4:	2f 90       	pop	r2
    15f6:	08 95       	ret

000015f8 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	18 2f       	mov	r17, r24
    1600:	d6 2f       	mov	r29, r22
    1602:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1604:	0e 94 e6 04 	call	0x9cc	; 0x9cc <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1608:	94 ea       	ldi	r25, 0xA4	; 164
    160a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    160e:	ec eb       	ldi	r30, 0xBC	; 188
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	90 81       	ld	r25, Z
    1614:	99 23       	and	r25, r25
    1616:	ec f7       	brge	.-6      	; 0x1612 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1618:	90 e5       	ldi	r25, 0x50	; 80
    161a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    161e:	94 e8       	ldi	r25, 0x84	; 132
    1620:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1624:	ec eb       	ldi	r30, 0xBC	; 188
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	90 81       	ld	r25, Z
    162a:	99 23       	and	r25, r25
    162c:	ec f7       	brge	.-6      	; 0x1628 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    162e:	90 91 b9 00 	lds	r25, 0x00B9
    1632:	98 7f       	andi	r25, 0xF8	; 248
    1634:	90 32       	cpi	r25, 0x20	; 32
    1636:	29 f4       	brne	.+10     	; 0x1642 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1638:	84 e9       	ldi	r24, 0x94	; 148
    163a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	2d c0       	rjmp	.+90     	; 0x169c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1648:	84 e8       	ldi	r24, 0x84	; 132
    164a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    164e:	ec eb       	ldi	r30, 0xBC	; 188
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	90 81       	ld	r25, Z
    1654:	99 23       	and	r25, r25
    1656:	ec f7       	brge	.-6      	; 0x1652 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1658:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    165c:	84 e8       	ldi	r24, 0x84	; 132
    165e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1662:	ec eb       	ldi	r30, 0xBC	; 188
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	88 23       	and	r24, r24
    166a:	ec f7       	brge	.-6      	; 0x1666 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    166c:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1670:	84 e8       	ldi	r24, 0x84	; 132
    1672:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1676:	ec eb       	ldi	r30, 0xBC	; 188
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 23       	and	r24, r24
    167e:	ec f7       	brge	.-6      	; 0x167a <m_rf_open+0x82>
	
	TWDR = packet_length;
    1680:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1684:	84 e8       	ldi	r24, 0x84	; 132
    1686:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    168a:	ec eb       	ldi	r30, 0xBC	; 188
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	88 23       	and	r24, r24
    1692:	ec f7       	brge	.-6      	; 0x168e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1694:	84 e9       	ldi	r24, 0x94	; 148
    1696:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	08 95       	ret

000016a4 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    16a8:	24 ea       	ldi	r18, 0xA4	; 164
    16aa:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    16ae:	ec eb       	ldi	r30, 0xBC	; 188
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	20 81       	ld	r18, Z
    16b4:	22 23       	and	r18, r18
    16b6:	ec f7       	brge	.-6      	; 0x16b2 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    16b8:	21 e5       	ldi	r18, 0x51	; 81
    16ba:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    16be:	24 e8       	ldi	r18, 0x84	; 132
    16c0:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    16c4:	ec eb       	ldi	r30, 0xBC	; 188
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	20 81       	ld	r18, Z
    16ca:	22 23       	and	r18, r18
    16cc:	ec f7       	brge	.-6      	; 0x16c8 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    16ce:	20 91 b9 00 	lds	r18, 0x00B9
    16d2:	28 7f       	andi	r18, 0xF8	; 248
    16d4:	28 34       	cpi	r18, 0x48	; 72
    16d6:	29 f4       	brne	.+10     	; 0x16e2 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16d8:	84 e9       	ldi	r24, 0x94	; 148
    16da:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    16e2:	24 ec       	ldi	r18, 0xC4	; 196
    16e4:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    16e8:	ec eb       	ldi	r30, 0xBC	; 188
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	20 81       	ld	r18, Z
    16ee:	22 23       	and	r18, r18
    16f0:	ec f7       	brge	.-6      	; 0x16ec <m_rf_read+0x48>
	bytes = TWDR;
    16f2:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    16f6:	46 13       	cpse	r20, r22
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	41 50       	subi	r20, 0x01	; 1
    16fe:	51 09       	sbc	r21, r1
    1700:	14 16       	cp	r1, r20
    1702:	15 06       	cpc	r1, r21
    1704:	44 f0       	brlt	.+16     	; 0x1716 <m_rf_read+0x72>
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	18 c0       	rjmp	.+48     	; 0x173c <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    170c:	84 e9       	ldi	r24, 0x94	; 148
    170e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	25 c0       	rjmp	.+74     	; 0x1760 <m_rf_read+0xbc>
    1716:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    171c:	ec eb       	ldi	r30, 0xBC	; 188
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1722:	cb eb       	ldi	r28, 0xBB	; 187
    1724:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1726:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1728:	60 81       	ld	r22, Z
    172a:	66 23       	and	r22, r22
    172c:	ec f7       	brge	.-6      	; 0x1728 <m_rf_read+0x84>
		buffer[i] = TWDR;
    172e:	68 81       	ld	r22, Y
    1730:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	24 17       	cp	r18, r20
    1738:	35 07       	cpc	r19, r21
    173a:	ac f3       	brlt	.-22     	; 0x1726 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    173c:	24 e8       	ldi	r18, 0x84	; 132
    173e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1742:	ec eb       	ldi	r30, 0xBC	; 188
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	20 81       	ld	r18, Z
    1748:	22 23       	and	r18, r18
    174a:	ec f7       	brge	.-6      	; 0x1746 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    174c:	20 91 bb 00 	lds	r18, 0x00BB
    1750:	fc 01       	movw	r30, r24
    1752:	e4 0f       	add	r30, r20
    1754:	f5 1f       	adc	r31, r21
    1756:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1758:	84 e9       	ldi	r24, 0x94	; 148
    175a:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    176c:	80 ea       	ldi	r24, 0xA0	; 160
    176e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1772:	82 e1       	ldi	r24, 0x12	; 18
    1774:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1776:	09 b4       	in	r0, 0x29	; 41
    1778:	00 fe       	sbrs	r0, 0
    177a:	fd cf       	rjmp	.-6      	; 0x1776 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    177c:	80 e9       	ldi	r24, 0x90	; 144
    177e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1782:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1786:	10 92 76 01 	sts	0x0176, r1
	cdc_line_rtsdtr = 0;
    178a:	10 92 77 01 	sts	0x0177, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    178e:	8c e0       	ldi	r24, 0x0C	; 12
    1790:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1794:	78 94       	sei
    1796:	08 95       	ret

00001798 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1798:	9f b7       	in	r25, 0x3f	; 63
	cli();
    179a:	f8 94       	cli
	if (!usb_configuration) {
    179c:	80 91 76 01 	lds	r24, 0x0176
    17a0:	81 11       	cpse	r24, r1
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <m_usb_rx_char+0x12>
		SREG = intr_state;
    17a4:	9f bf       	out	0x3f, r25	; 63
		return -1;
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    17b0:	80 91 e8 00 	lds	r24, 0x00E8
    17b4:	85 fd       	sbrc	r24, 5
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    17b8:	9f bf       	out	0x3f, r25	; 63
		return -1;
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    17be:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    17c2:	20 91 e8 00 	lds	r18, 0x00E8
    17c6:	25 fd       	sbrc	r18, 5
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <m_usb_rx_char+0x38>
    17ca:	2b e6       	ldi	r18, 0x6B	; 107
    17cc:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    17d0:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    17d2:	08 95       	ret

000017d4 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    17d4:	80 91 76 01 	lds	r24, 0x0176
    17d8:	88 23       	and	r24, r24
    17da:	89 f0       	breq	.+34     	; 0x17fe <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    17dc:	2f b7       	in	r18, 0x3f	; 63
		cli();
    17de:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    17e6:	80 91 e8 00 	lds	r24, 0x00E8
    17ea:	85 ff       	sbrs	r24, 5
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    17ee:	e8 ee       	ldi	r30, 0xE8	; 232
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	9b e6       	ldi	r25, 0x6B	; 107
    17f4:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    17f6:	80 81       	ld	r24, Z
    17f8:	85 fd       	sbrc	r24, 5
    17fa:	fc cf       	rjmp	.-8      	; 0x17f4 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    17fc:	2f bf       	out	0x3f, r18	; 63
    17fe:	08 95       	ret

00001800 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1804:	90 91 76 01 	lds	r25, 0x0176
    1808:	99 23       	and	r25, r25
    180a:	09 f4       	brne	.+2      	; 0x180e <m_usb_tx_char+0xe>
    180c:	4d c0       	rjmp	.+154    	; 0x18a8 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    180e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1810:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1812:	24 e0       	ldi	r18, 0x04	; 4
    1814:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1818:	20 91 78 01 	lds	r18, 0x0178
    181c:	22 23       	and	r18, r18
    181e:	49 f0       	breq	.+18     	; 0x1832 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1820:	20 91 e8 00 	lds	r18, 0x00E8
    1824:	25 fd       	sbrc	r18, 5
    1826:	03 c0       	rjmp	.+6      	; 0x182e <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1828:	9f bf       	out	0x3f, r25	; 63
			return -1;
    182a:	8f ef       	ldi	r24, 0xFF	; 255
    182c:	42 c0       	rjmp	.+132    	; 0x18b2 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    182e:	10 92 78 01 	sts	0x0178, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1832:	30 91 e4 00 	lds	r19, 0x00E4
    1836:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1838:	20 91 e8 00 	lds	r18, 0x00E8
    183c:	25 fd       	sbrc	r18, 5
    183e:	25 c0       	rjmp	.+74     	; 0x188a <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1840:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1842:	90 91 e4 00 	lds	r25, 0x00E4
    1846:	93 17       	cp	r25, r19
    1848:	49 f0       	breq	.+18     	; 0x185c <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    184a:	90 91 76 01 	lds	r25, 0x0176
    184e:	91 11       	cpse	r25, r1
    1850:	0f c0       	rjmp	.+30     	; 0x1870 <m_usb_tx_char+0x70>
    1852:	2c c0       	rjmp	.+88     	; 0x18ac <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1854:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1856:	98 81       	ld	r25, Y
    1858:	93 13       	cpse	r25, r19
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 78 01 	sts	0x0178, r24
			return -1;
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	26 c0       	rjmp	.+76     	; 0x18b2 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1866:	90 91 76 01 	lds	r25, 0x0176
    186a:	91 11       	cpse	r25, r1
    186c:	08 c0       	rjmp	.+16     	; 0x187e <m_usb_tx_char+0x7e>
    186e:	20 c0       	rjmp	.+64     	; 0x18b0 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1870:	a9 ee       	ldi	r26, 0xE9	; 233
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1876:	e8 ee       	ldi	r30, 0xE8	; 232
    1878:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    187a:	c4 ee       	ldi	r28, 0xE4	; 228
    187c:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    187e:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1880:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1882:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1884:	20 81       	ld	r18, Z
    1886:	25 ff       	sbrs	r18, 5
    1888:	e5 cf       	rjmp	.-54     	; 0x1854 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    188a:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    188e:	80 91 e8 00 	lds	r24, 0x00E8
    1892:	85 fd       	sbrc	r24, 5
    1894:	03 c0       	rjmp	.+6      	; 0x189c <m_usb_tx_char+0x9c>
    1896:	8a e3       	ldi	r24, 0x3A	; 58
    1898:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    189c:	85 e0       	ldi	r24, 0x05	; 5
    189e:	80 93 75 01 	sts	0x0175, r24
	SREG = intr_state;
    18a2:	9f bf       	out	0x3f, r25	; 63
	return 0;
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    18ac:	8f ef       	ldi	r24, 0xFF	; 255
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <m_usb_tx_char+0xb2>
    18b0:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	ef 93       	push	r30
    18c8:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    18ca:	e1 ee       	ldi	r30, 0xE1	; 225
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
        UDINT = 0;
    18d0:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    18d2:	83 ff       	sbrs	r24, 3
    18d4:	11 c0       	rjmp	.+34     	; 0x18f8 <__vector_10+0x40>
		UENUM = 0;
    18d6:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    18e0:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    18e4:	92 e1       	ldi	r25, 0x12	; 18
    18e6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    18ea:	98 e0       	ldi	r25, 0x08	; 8
    18ec:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    18f0:	10 92 76 01 	sts	0x0176, r1
		cdc_line_rtsdtr = 0;
    18f4:	10 92 77 01 	sts	0x0177, r1
        }
	if (intbits & (1<<SOFI)) {
    18f8:	82 ff       	sbrs	r24, 2
    18fa:	13 c0       	rjmp	.+38     	; 0x1922 <__vector_10+0x6a>
		if (usb_configuration) {
    18fc:	80 91 76 01 	lds	r24, 0x0176
    1900:	88 23       	and	r24, r24
    1902:	79 f0       	breq	.+30     	; 0x1922 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1904:	80 91 75 01 	lds	r24, 0x0175
			if (t) {
    1908:	88 23       	and	r24, r24
    190a:	59 f0       	breq	.+22     	; 0x1922 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    190c:	81 50       	subi	r24, 0x01	; 1
    190e:	80 93 75 01 	sts	0x0175, r24
				if (!t) {
    1912:	81 11       	cpse	r24, r1
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    191c:	8a e3       	ldi	r24, 0x3A	; 58
    191e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1922:	ff 91       	pop	r31
    1924:	ef 91       	pop	r30
    1926:	9f 91       	pop	r25
    1928:	8f 91       	pop	r24
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    195e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1962:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1966:	83 ff       	sbrs	r24, 3
    1968:	51 c1       	rjmp	.+674    	; 0x1c0c <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    196a:	e1 ef       	ldi	r30, 0xF1	; 241
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1970:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1972:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1974:	30 81       	ld	r19, Z
    1976:	93 2f       	mov	r25, r19
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	dc 01       	movw	r26, r24
    197c:	a2 2b       	or	r26, r18
    197e:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1980:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1982:	60 81       	ld	r22, Z
    1984:	96 2f       	mov	r25, r22
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	85 2b       	or	r24, r21
                wLength = UEDATX;
    198a:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    198c:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    198e:	52 ef       	ldi	r21, 0xF2	; 242
    1990:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1994:	46 30       	cpi	r20, 0x06	; 6
    1996:	09 f0       	breq	.+2      	; 0x199a <__vector_11+0x66>
    1998:	5c c0       	rjmp	.+184    	; 0x1a52 <__vector_11+0x11e>
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    199c:	81 e2       	ldi	r24, 0x21	; 33
    199e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    19a2:	3b c1       	rjmp	.+630    	; 0x1c1a <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    19a4:	c6 e0       	ldi	r28, 0x06	; 6
    19a6:	4f e1       	ldi	r20, 0x1F	; 31
    19a8:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    19aa:	fa 01       	movw	r30, r20
    19ac:	65 91       	lpm	r22, Z+
    19ae:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    19b0:	26 17       	cp	r18, r22
    19b2:	37 07       	cpc	r19, r23
    19b4:	19 f0       	breq	.+6      	; 0x19bc <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    19b6:	49 5f       	subi	r20, 0xF9	; 249
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    19ba:	20 c0       	rjmp	.+64     	; 0x19fc <__vector_11+0xc8>
				}
				list += 2;
    19bc:	fa 01       	movw	r30, r20
    19be:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    19c0:	65 91       	lpm	r22, Z+
    19c2:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    19c4:	86 17       	cp	r24, r22
    19c6:	97 07       	cpc	r25, r23
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    19ca:	49 5f       	subi	r20, 0xF9	; 249
    19cc:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <__vector_11+0xc8>
				}
				list += 2;
    19d0:	fa 01       	movw	r30, r20
    19d2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    19d4:	85 91       	lpm	r24, Z+
    19d6:	94 91       	lpm	r25, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	39 2f       	mov	r19, r25
				list += 2;
    19dc:	fa 01       	movw	r30, r20
    19de:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    19e0:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    19e2:	9b 2f       	mov	r25, r27
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    19e8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ea:	91 05       	cpc	r25, r1
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <__vector_11+0xc0>
    19ee:	10 f0       	brcs	.+4      	; 0x19f4 <__vector_11+0xc0>
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	84 17       	cp	r24, r20
    19f6:	28 f4       	brcc	.+10     	; 0x1a02 <__vector_11+0xce>
    19f8:	48 2f       	mov	r20, r24
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <__vector_11+0xce>
    19fc:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    19fe:	a9 f6       	brne	.-86     	; 0x19aa <__vector_11+0x76>
    1a00:	cd cf       	rjmp	.-102    	; 0x199c <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1a02:	c8 ee       	ldi	r28, 0xE8	; 232
    1a04:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a06:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1a08:	a1 ef       	ldi	r26, 0xF1	; 241
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1a0c:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1a0e:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1a10:	98 2f       	mov	r25, r24
    1a12:	95 70       	andi	r25, 0x05	; 5
    1a14:	e1 f3       	breq	.-8      	; 0x1a0e <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    1a16:	82 fd       	sbrc	r24, 2
    1a18:	00 c1       	rjmp	.+512    	; 0x1c1a <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1a1a:	64 2f       	mov	r22, r20
    1a1c:	41 31       	cpi	r20, 0x11	; 17
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <__vector_11+0xee>
    1a20:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1a22:	66 23       	and	r22, r22
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <__vector_11+0xf4>
    1a26:	f6 c0       	rjmp	.+492    	; 0x1c14 <__vector_11+0x2e0>
    1a28:	c9 01       	movw	r24, r18
    1a2a:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	e4 91       	lpm	r30, Z
    1a32:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1a34:	51 50       	subi	r21, 0x01	; 1
    1a36:	d1 f7       	brne	.-12     	; 0x1a2c <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1a38:	86 2f       	mov	r24, r22
    1a3a:	81 50       	subi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	28 0f       	add	r18, r24
    1a42:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1a44:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a46:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1a48:	41 11       	cpse	r20, r1
    1a4a:	e1 cf       	rjmp	.-62     	; 0x1a0e <__vector_11+0xda>
    1a4c:	60 31       	cpi	r22, 0x10	; 16
    1a4e:	f9 f2       	breq	.-66     	; 0x1a0e <__vector_11+0xda>
    1a50:	e4 c0       	rjmp	.+456    	; 0x1c1a <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1a52:	45 30       	cpi	r20, 0x05	; 5
    1a54:	61 f4       	brne	.+24     	; 0x1a6e <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a56:	8e ef       	ldi	r24, 0xFE	; 254
    1a58:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a5c:	e8 ee       	ldi	r30, 0xE8	; 232
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 ff       	sbrs	r24, 0
    1a64:	fd cf       	rjmp	.-6      	; 0x1a60 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1a66:	20 68       	ori	r18, 0x80	; 128
    1a68:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1a6c:	d6 c0       	rjmp	.+428    	; 0x1c1a <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1a6e:	49 30       	cpi	r20, 0x09	; 9
    1a70:	a1 f5       	brne	.+104    	; 0x1ada <__vector_11+0x1a6>
    1a72:	71 11       	cpse	r23, r1
    1a74:	5b c0       	rjmp	.+182    	; 0x1b2c <__vector_11+0x1f8>
			usb_configuration = wValue;
    1a76:	20 93 76 01 	sts	0x0176, r18
			cdc_line_rtsdtr = 0;
    1a7a:	10 92 77 01 	sts	0x0177, r1
			transmit_flush_timer = 0;
    1a7e:	10 92 75 01 	sts	0x0175, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a82:	8e ef       	ldi	r24, 0xFE	; 254
    1a84:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1a88:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1a8a:	89 e4       	ldi	r24, 0x49	; 73
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1a8e:	c9 ee       	ldi	r28, 0xE9	; 233
    1a90:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1a92:	ab ee       	ldi	r26, 0xEB	; 235
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1a96:	6c ee       	ldi	r22, 0xEC	; 236
    1a98:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1a9a:	4d ee       	ldi	r20, 0xED	; 237
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1a9e:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1aa0:	9c 01       	movw	r18, r24
    1aa2:	2f 5f       	subi	r18, 0xFF	; 255
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	04 91       	lpm	r16, Z
				UECONX = en;
    1aaa:	0c 93       	st	X, r16
				if (en) {
    1aac:	00 23       	and	r16, r16
    1aae:	59 f0       	breq	.+22     	; 0x1ac6 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	24 91       	lpm	r18, Z
    1ab4:	fb 01       	movw	r30, r22
    1ab6:	20 83       	st	Z, r18
    1ab8:	fc 01       	movw	r30, r24
    1aba:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    1abc:	03 96       	adiw	r24, 0x03	; 3
    1abe:	24 91       	lpm	r18, Z
    1ac0:	fa 01       	movw	r30, r20
    1ac2:	20 83       	st	Z, r18
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1ac6:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1ac8:	1f 5f       	subi	r17, 0xFF	; 255
    1aca:	15 30       	cpi	r17, 0x05	; 5
    1acc:	41 f7       	brne	.-48     	; 0x1a9e <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1ace:	ea ee       	ldi	r30, 0xEA	; 234
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8e e1       	ldi	r24, 0x1E	; 30
    1ad4:	80 83       	st	Z, r24
        		UERST = 0;
    1ad6:	10 82       	st	Z, r1
			return;
    1ad8:	a0 c0       	rjmp	.+320    	; 0x1c1a <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1ada:	48 30       	cpi	r20, 0x08	; 8
    1adc:	81 f4       	brne	.+32     	; 0x1afe <__vector_11+0x1ca>
    1ade:	70 38       	cpi	r23, 0x80	; 128
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <__vector_11+0x1b0>
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ae4:	e8 ee       	ldi	r30, 0xE8	; 232
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 ff       	sbrs	r24, 0
    1aec:	fd cf       	rjmp	.-6      	; 0x1ae8 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1aee:	80 91 76 01 	lds	r24, 0x0176
    1af2:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1af6:	8e ef       	ldi	r24, 0xFE	; 254
    1af8:	80 93 e8 00 	sts	0x00E8, r24
    1afc:	8e c0       	rjmp	.+284    	; 0x1c1a <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1afe:	41 32       	cpi	r20, 0x21	; 33
    1b00:	a9 f4       	brne	.+42     	; 0x1b2c <__vector_11+0x1f8>
    1b02:	71 3a       	cpi	r23, 0xA1	; 161
    1b04:	f1 f5       	brne	.+124    	; 0x1b82 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b06:	e8 ee       	ldi	r30, 0xE8	; 232
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 ff       	sbrs	r24, 0
    1b0e:	fd cf       	rjmp	.-6      	; 0x1b0a <__vector_11+0x1d6>
    1b10:	ec e0       	ldi	r30, 0x0C	; 12
    1b12:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1b14:	a1 ef       	ldi	r26, 0xF1	; 241
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	81 91       	ld	r24, Z+
    1b1a:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	e3 31       	cpi	r30, 0x13	; 19
    1b20:	f4 07       	cpc	r31, r20
    1b22:	d1 f7       	brne	.-12     	; 0x1b18 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b24:	8e ef       	ldi	r24, 0xFE	; 254
    1b26:	80 93 e8 00 	sts	0x00E8, r24
    1b2a:	77 c0       	rjmp	.+238    	; 0x1c1a <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1b2c:	40 32       	cpi	r20, 0x20	; 32
    1b2e:	c9 f4       	brne	.+50     	; 0x1b62 <__vector_11+0x22e>
    1b30:	71 32       	cpi	r23, 0x21	; 33
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <__vector_11+0x202>
    1b34:	6b c0       	rjmp	.+214    	; 0x1c0c <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1b36:	e8 ee       	ldi	r30, 0xE8	; 232
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	82 ff       	sbrs	r24, 2
    1b3e:	fd cf       	rjmp	.-6      	; 0x1b3a <__vector_11+0x206>
    1b40:	ec e0       	ldi	r30, 0x0C	; 12
    1b42:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1b44:	a1 ef       	ldi	r26, 0xF1	; 241
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	8c 91       	ld	r24, X
    1b4a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1b4c:	51 e0       	ldi	r21, 0x01	; 1
    1b4e:	e3 31       	cpi	r30, 0x13	; 19
    1b50:	f5 07       	cpc	r31, r21
    1b52:	d1 f7       	brne	.-12     	; 0x1b48 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1b54:	e8 ee       	ldi	r30, 0xE8	; 232
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8b ef       	ldi	r24, 0xFB	; 251
    1b5a:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b5c:	8e ef       	ldi	r24, 0xFE	; 254
    1b5e:	80 83       	st	Z, r24
    1b60:	5c c0       	rjmp	.+184    	; 0x1c1a <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1b62:	42 32       	cpi	r20, 0x22	; 34
    1b64:	71 f4       	brne	.+28     	; 0x1b82 <__vector_11+0x24e>
    1b66:	71 32       	cpi	r23, 0x21	; 33
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <__vector_11+0x238>
    1b6a:	50 c0       	rjmp	.+160    	; 0x1c0c <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1b6c:	20 93 77 01 	sts	0x0177, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b70:	e8 ee       	ldi	r30, 0xE8	; 232
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 ff       	sbrs	r24, 0
    1b78:	fd cf       	rjmp	.-6      	; 0x1b74 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b7a:	8e ef       	ldi	r24, 0xFE	; 254
    1b7c:	80 93 e8 00 	sts	0x00E8, r24
    1b80:	4c c0       	rjmp	.+152    	; 0x1c1a <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1b82:	41 11       	cpse	r20, r1
    1b84:	1a c0       	rjmp	.+52     	; 0x1bba <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b86:	e8 ee       	ldi	r30, 0xE8	; 232
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	20 81       	ld	r18, Z
    1b8c:	20 ff       	sbrs	r18, 0
    1b8e:	fd cf       	rjmp	.-6      	; 0x1b8a <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1b90:	72 38       	cpi	r23, 0x82	; 130
    1b92:	51 f4       	brne	.+20     	; 0x1ba8 <__vector_11+0x274>
				UENUM = wIndex;
    1b94:	e9 ee       	ldi	r30, 0xE9	; 233
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1b9a:	80 91 eb 00 	lds	r24, 0x00EB
    1b9e:	85 fb       	bst	r24, 5
    1ba0:	88 27       	eor	r24, r24
    1ba2:	80 f9       	bld	r24, 0
				UENUM = 0;
    1ba4:	10 82       	st	Z, r1
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1baa:	e1 ef       	ldi	r30, 0xF1	; 241
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 83       	st	Z, r24
			UEDATX = 0;
    1bb0:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bb2:	8e ef       	ldi	r24, 0xFE	; 254
    1bb4:	80 93 e8 00 	sts	0x00E8, r24
    1bb8:	30 c0       	rjmp	.+96     	; 0x1c1a <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1bba:	41 30       	cpi	r20, 0x01	; 1
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <__vector_11+0x28e>
    1bbe:	43 30       	cpi	r20, 0x03	; 3
    1bc0:	29 f5       	brne	.+74     	; 0x1c0c <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1bc2:	72 30       	cpi	r23, 0x02	; 2
    1bc4:	19 f5       	brne	.+70     	; 0x1c0c <__vector_11+0x2d8>
    1bc6:	23 2b       	or	r18, r19
    1bc8:	09 f5       	brne	.+66     	; 0x1c0c <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1bca:	8f 77       	andi	r24, 0x7F	; 127
    1bcc:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1bce:	38 2f       	mov	r19, r24
    1bd0:	31 50       	subi	r19, 0x01	; 1
    1bd2:	34 30       	cpi	r19, 0x04	; 4
    1bd4:	d8 f4       	brcc	.+54     	; 0x1c0c <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bd6:	3e ef       	ldi	r19, 0xFE	; 254
    1bd8:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1bdc:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1be0:	43 30       	cpi	r20, 0x03	; 3
    1be2:	21 f4       	brne	.+8      	; 0x1bec <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1be4:	81 e2       	ldi	r24, 0x21	; 33
    1be6:	80 93 eb 00 	sts	0x00EB, r24
    1bea:	17 c0       	rjmp	.+46     	; 0x1c1a <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1bec:	99 e1       	ldi	r25, 0x19	; 25
    1bee:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1bf2:	21 e0       	ldi	r18, 0x01	; 1
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	d9 01       	movw	r26, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <__vector_11+0x2ca>
    1bfa:	aa 0f       	add	r26, r26
    1bfc:	bb 1f       	adc	r27, r27
    1bfe:	8a 95       	dec	r24
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <__vector_11+0x2c6>
    1c02:	ea ee       	ldi	r30, 0xEA	; 234
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	a0 83       	st	Z, r26
					UERST = 0;
    1c08:	10 82       	st	Z, r1
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1c0c:	81 e2       	ldi	r24, 0x21	; 33
    1c0e:	80 93 eb 00 	sts	0x00EB, r24
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c14:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1c16:	41 11       	cpse	r20, r1
    1c18:	fa ce       	rjmp	.-524    	; 0x1a0e <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1c1a:	ff 91       	pop	r31
    1c1c:	ef 91       	pop	r30
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	bf 91       	pop	r27
    1c24:	af 91       	pop	r26
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti

00001c44 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	27 97       	sbiw	r28, 0x07	; 7
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1c60:	8e 01       	movw	r16, r28
    1c62:	0f 5f       	subi	r16, 0xFF	; 255
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	27 e0       	ldi	r18, 0x07	; 7
    1c68:	f8 01       	movw	r30, r16
    1c6a:	11 92       	st	Z+, r1
    1c6c:	2a 95       	dec	r18
    1c6e:	e9 f7       	brne	.-6      	; 0x1c6a <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1c70:	4a e0       	ldi	r20, 0x0A	; 10
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	b8 01       	movw	r22, r16
    1c76:	0e 94 60 14 	call	0x28c0	; 0x28c0 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1c7a:	7e 01       	movw	r14, r28
    1c7c:	f8 e0       	ldi	r31, 0x08	; 8
    1c7e:	ef 0e       	add	r14, r31
    1c80:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1c82:	f8 01       	movw	r30, r16
    1c84:	81 91       	ld	r24, Z+
    1c86:	8f 01       	movw	r16, r30
    1c88:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1c8a:	0e 94 00 0c 	call	0x1800	; 0x1800 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1c8e:	0e 15       	cp	r16, r14
    1c90:	1f 05       	cpc	r17, r15
    1c92:	b9 f7       	brne	.-18     	; 0x1c82 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1c94:	27 96       	adiw	r28, 0x07	; 7
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	08 95       	ret

00001cae <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1cb2:	ec eb       	ldi	r30, 0xBC	; 188
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 23       	and	r24, r24
    1cba:	34 f0       	brlt	.+12     	; 0x1cc8 <twi_wait+0x1a>
    1cbc:	2f 5f       	subi	r18, 0xFF	; 255
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	29 3e       	cpi	r18, 0xE9	; 233
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	38 07       	cpc	r19, r24
    1cc6:	b9 f7       	brne	.-18     	; 0x1cb6 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	28 3e       	cpi	r18, 0xE8	; 232
    1ccc:	33 40       	sbci	r19, 0x03	; 3
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <twi_wait+0x24>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1cd2:	08 95       	ret

00001cd4 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1cd4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1cd8:	84 e8       	ldi	r24, 0x84	; 132
    1cda:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1cde:	0e 94 57 0e 	call	0x1cae	; 0x1cae <twi_wait>
    1ce2:	88 23       	and	r24, r24
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1ce6:	80 91 b9 00 	lds	r24, 0x00B9
    1cea:	88 7f       	andi	r24, 0xF8	; 248
    1cec:	08 95       	ret
	} else {
		return 0;					// comm failure
    1cee:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1cf0:	08 95       	ret

00001cf2 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1cf2:	cf 93       	push	r28
    1cf4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1cf6:	94 ea       	ldi	r25, 0xA4	; 164
    1cf8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1cfc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <twi_wait>
    1d00:	88 23       	and	r24, r24
    1d02:	61 f0       	breq	.+24     	; 0x1d1c <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1d04:	8c 2f       	mov	r24, r28
    1d06:	88 0f       	add	r24, r24
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1d0e:	88 34       	cpi	r24, 0x48	; 72
    1d10:	39 f4       	brne	.+14     	; 0x1d20 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d12:	84 e9       	ldi	r24, 0x94	; 148
    1d14:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1d20:	81 e0       	ldi	r24, 0x01	; 1
}	
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1d26:	cf 93       	push	r28
    1d28:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d2a:	94 ea       	ldi	r25, 0xA4	; 164
    1d2c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1d30:	0e 94 57 0e 	call	0x1cae	; 0x1cae <twi_wait>
    1d34:	88 23       	and	r24, r24
    1d36:	59 f0       	breq	.+22     	; 0x1d4e <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1d38:	8c 2f       	mov	r24, r28
    1d3a:	88 0f       	add	r24, r24
    1d3c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1d40:	80 32       	cpi	r24, 0x20	; 32
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d44:	84 e9       	ldi	r24, 0x94	; 148
    1d46:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1d52:	81 e0       	ldi	r24, 0x01	; 1
}	
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d58:	84 e9       	ldi	r24, 0x94	; 148
    1d5a:	80 93 bc 00 	sts	0x00BC, r24
    1d5e:	08 95       	ret

00001d60 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	60 97       	sbiw	r28, 0x10	; 16
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	e8 2e       	mov	r14, r24
    1d7e:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1d80:	fe 01       	movw	r30, r28
    1d82:	31 96       	adiw	r30, 0x01	; 1
    1d84:	80 e1       	ldi	r24, 0x10	; 16
    1d86:	df 01       	movw	r26, r30
    1d88:	1d 92       	st	X+, r1
    1d8a:	8a 95       	dec	r24
    1d8c:	e9 f7       	brne	.-6      	; 0x1d88 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1d8e:	88 e5       	ldi	r24, 0x58	; 88
    1d90:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1d94:	88 23       	and	r24, r24
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <m_wii_read+0x3a>
    1d98:	66 c0       	rjmp	.+204    	; 0x1e66 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1d9a:	86 e3       	ldi	r24, 0x36	; 54
    1d9c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1da0:	88 23       	and	r24, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <m_wii_read+0x46>
    1da4:	62 c0       	rjmp	.+196    	; 0x1e6a <m_wii_read+0x10a>
	end();
    1da6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1daa:	b8 e0       	ldi	r27, 0x08	; 8
    1dac:	ba 95       	dec	r27
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <m_wii_read+0x4c>
    1db0:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1db2:	88 e5       	ldi	r24, 0x58	; 88
    1db4:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <start_read>
    1db8:	88 23       	and	r24, r24
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <m_wii_read+0x5e>
    1dbc:	58 c0       	rjmp	.+176    	; 0x1e6e <m_wii_read+0x10e>
    1dbe:	ae 01       	movw	r20, r28
    1dc0:	4f 5f       	subi	r20, 0xFF	; 255
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1dc4:	8e 01       	movw	r16, r28
    1dc6:	00 5f       	subi	r16, 0xF0	; 240
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1dca:	ec eb       	ldi	r30, 0xBC	; 188
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1dd0:	2b eb       	ldi	r18, 0xBB	; 187
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1dd4:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 23       	and	r24, r24
    1dda:	ec f7       	brge	.-6      	; 0x1dd6 <m_wii_read+0x76>
		temp[i] = TWDR;
    1ddc:	d9 01       	movw	r26, r18
    1dde:	8c 91       	ld	r24, X
    1de0:	da 01       	movw	r26, r20
    1de2:	8d 93       	st	X+, r24
    1de4:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1de6:	a0 17       	cp	r26, r16
    1de8:	b1 07       	cpc	r27, r17
    1dea:	a1 f7       	brne	.-24     	; 0x1dd4 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1dec:	84 e8       	ldi	r24, 0x84	; 132
    1dee:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1df2:	ec eb       	ldi	r30, 0xBC	; 188
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	ec f7       	brge	.-6      	; 0x1df6 <m_wii_read+0x96>
	temp[15] = TWDR;
    1dfc:	80 91 bb 00 	lds	r24, 0x00BB
    1e00:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1e02:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
    1e06:	de 01       	movw	r26, r28
    1e08:	14 96       	adiw	r26, 0x04	; 4
    1e0a:	6e 2d       	mov	r22, r14
    1e0c:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1e0e:	4c 91       	ld	r20, X
    1e10:	24 2f       	mov	r18, r20
    1e12:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1e14:	cd 01       	movw	r24, r26
    1e16:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1e18:	fc 01       	movw	r30, r24
    1e1a:	80 81       	ld	r24, Z
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	f0 e1       	ldi	r31, 0x10	; 16
    1e20:	2f 9f       	mul	r18, r31
    1e22:	80 0d       	add	r24, r0
    1e24:	91 1d       	adc	r25, r1
    1e26:	11 24       	eor	r1, r1
    1e28:	fb 01       	movw	r30, r22
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e2e:	84 2f       	mov	r24, r20
    1e30:	80 7c       	andi	r24, 0xC0	; 192
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1e3c:	9d 01       	movw	r18, r26
    1e3e:	21 50       	subi	r18, 0x01	; 1
    1e40:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e42:	f9 01       	movw	r30, r18
    1e44:	20 81       	ld	r18, Z
    1e46:	82 0f       	add	r24, r18
    1e48:	91 1d       	adc	r25, r1
    1e4a:	fb 01       	movw	r30, r22
    1e4c:	93 83       	std	Z+3, r25	; 0x03
    1e4e:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1e50:	4f 70       	andi	r20, 0x0F	; 15
    1e52:	44 83       	std	Z+4, r20	; 0x04
    1e54:	15 82       	std	Z+5, r1	; 0x05
    1e56:	13 96       	adiw	r26, 0x03	; 3
    1e58:	6a 5f       	subi	r22, 0xFA	; 250
    1e5a:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1e5c:	0a 17       	cp	r16, r26
    1e5e:	1b 07       	cpc	r17, r27
    1e60:	b1 f6       	brne	.-84     	; 0x1e0e <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1e70:	60 96       	adiw	r28, 0x10	; 16
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	08 95       	ret

00001e8a <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1e8a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1e8e:	88 e5       	ldi	r24, 0x58	; 88
    1e90:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1e94:	88 23       	and	r24, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <m_wii_open+0x10>
    1e98:	c7 c0       	rjmp	.+398    	; 0x2028 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1e9a:	80 e3       	ldi	r24, 0x30	; 48
    1e9c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <m_wii_open+0x1c>
    1ea4:	c3 c0       	rjmp	.+390    	; 0x202c <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1eac:	88 23       	and	r24, r24
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <m_wii_open+0x28>
    1eb0:	bf c0       	rjmp	.+382    	; 0x2030 <m_wii_open+0x1a6>
	end();
    1eb2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1eb6:	83 ec       	ldi	r24, 0xC3	; 195
    1eb8:	99 e0       	ldi	r25, 0x09	; 9
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <m_wii_open+0x30>
    1ebe:	00 c0       	rjmp	.+0      	; 0x1ec0 <m_wii_open+0x36>
    1ec0:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1ec2:	88 e5       	ldi	r24, 0x58	; 88
    1ec4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <m_wii_open+0x44>
    1ecc:	b3 c0       	rjmp	.+358    	; 0x2034 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1ed4:	88 23       	and	r24, r24
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <m_wii_open+0x50>
    1ed8:	af c0       	rjmp	.+350    	; 0x2038 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <m_wii_open+0x5c>
    1ee4:	ab c0       	rjmp	.+342    	; 0x203c <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1eec:	88 23       	and	r24, r24
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <m_wii_open+0x68>
    1ef0:	a7 c0       	rjmp	.+334    	; 0x2040 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f4       	brne	.+2      	; 0x1efe <m_wii_open+0x74>
    1efc:	a3 c0       	rjmp	.+326    	; 0x2044 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f04:	88 23       	and	r24, r24
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <m_wii_open+0x80>
    1f08:	9f c0       	rjmp	.+318    	; 0x2048 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f10:	88 23       	and	r24, r24
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <m_wii_open+0x8c>
    1f14:	9b c0       	rjmp	.+310    	; 0x204c <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <m_wii_open+0x98>
    1f20:	97 c0       	rjmp	.+302    	; 0x2050 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1f22:	80 e9       	ldi	r24, 0x90	; 144
    1f24:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f28:	88 23       	and	r24, r24
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <m_wii_open+0xa4>
    1f2c:	93 c0       	rjmp	.+294    	; 0x2054 <m_wii_open+0x1ca>
	end();
    1f2e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
    1f32:	83 ec       	ldi	r24, 0xC3	; 195
    1f34:	99 e0       	ldi	r25, 0x09	; 9
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <m_wii_open+0xac>
    1f3a:	00 c0       	rjmp	.+0      	; 0x1f3c <m_wii_open+0xb2>
    1f3c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1f3e:	88 e5       	ldi	r24, 0x58	; 88
    1f40:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1f44:	88 23       	and	r24, r24
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <m_wii_open+0xc0>
    1f48:	87 c0       	rjmp	.+270    	; 0x2058 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1f4a:	87 e0       	ldi	r24, 0x07	; 7
    1f4c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f50:	88 23       	and	r24, r24
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <m_wii_open+0xcc>
    1f54:	83 c0       	rjmp	.+262    	; 0x205c <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f5c:	88 23       	and	r24, r24
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <m_wii_open+0xd8>
    1f60:	7f c0       	rjmp	.+254    	; 0x2060 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1f62:	81 e4       	ldi	r24, 0x41	; 65
    1f64:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <m_wii_open+0xe4>
    1f6c:	7b c0       	rjmp	.+246    	; 0x2064 <m_wii_open+0x1da>
	end();
    1f6e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
    1f72:	83 ec       	ldi	r24, 0xC3	; 195
    1f74:	99 e0       	ldi	r25, 0x09	; 9
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <m_wii_open+0xec>
    1f7a:	00 c0       	rjmp	.+0      	; 0x1f7c <m_wii_open+0xf2>
    1f7c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1f7e:	88 e5       	ldi	r24, 0x58	; 88
    1f80:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <m_wii_open+0x100>
    1f88:	6f c0       	rjmp	.+222    	; 0x2068 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1f8a:	8a e1       	ldi	r24, 0x1A	; 26
    1f8c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f90:	88 23       	and	r24, r24
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <m_wii_open+0x10c>
    1f94:	6b c0       	rjmp	.+214    	; 0x206c <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1f96:	80 e4       	ldi	r24, 0x40	; 64
    1f98:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <m_wii_open+0x118>
    1fa0:	67 c0       	rjmp	.+206    	; 0x2070 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <m_wii_open+0x124>
    1fac:	63 c0       	rjmp	.+198    	; 0x2074 <m_wii_open+0x1ea>
	end();
    1fae:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
    1fb2:	83 ec       	ldi	r24, 0xC3	; 195
    1fb4:	99 e0       	ldi	r25, 0x09	; 9
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <m_wii_open+0x12c>
    1fba:	00 c0       	rjmp	.+0      	; 0x1fbc <m_wii_open+0x132>
    1fbc:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1fbe:	88 e5       	ldi	r24, 0x58	; 88
    1fc0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <m_wii_open+0x140>
    1fc8:	57 c0       	rjmp	.+174    	; 0x2078 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1fca:	83 e3       	ldi	r24, 0x33	; 51
    1fcc:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1fd0:	88 23       	and	r24, r24
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <m_wii_open+0x14c>
    1fd4:	53 c0       	rjmp	.+166    	; 0x207c <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    1fdc:	88 23       	and	r24, r24
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <m_wii_open+0x158>
    1fe0:	4f c0       	rjmp	.+158    	; 0x2080 <m_wii_open+0x1f6>
	end();
    1fe2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
    1fe6:	83 ec       	ldi	r24, 0xC3	; 195
    1fe8:	99 e0       	ldi	r25, 0x09	; 9
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <m_wii_open+0x160>
    1fee:	00 c0       	rjmp	.+0      	; 0x1ff0 <m_wii_open+0x166>
    1ff0:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1ff2:	88 e5       	ldi	r24, 0x58	; 88
    1ff4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <start_write>
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <m_wii_open+0x174>
    1ffc:	43 c0       	rjmp	.+134    	; 0x2084 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1ffe:	80 e3       	ldi	r24, 0x30	; 48
    2000:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    2004:	88 23       	and	r24, r24
    2006:	09 f4       	brne	.+2      	; 0x200a <m_wii_open+0x180>
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    200a:	88 e0       	ldi	r24, 0x08	; 8
    200c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <send_byte>
    2010:	88 23       	and	r24, r24
    2012:	e1 f1       	breq	.+120    	; 0x208c <m_wii_open+0x202>
	end();
    2014:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <end>
    2018:	83 ec       	ldi	r24, 0xC3	; 195
    201a:	99 e0       	ldi	r25, 0x09	; 9
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <m_wii_open+0x192>
    2020:	00 c0       	rjmp	.+0      	; 0x2022 <m_wii_open+0x198>
    2022:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    208c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    208e:	08 95       	ret

00002090 <__subsf3>:
    2090:	50 58       	subi	r21, 0x80	; 128

00002092 <__addsf3>:
    2092:	bb 27       	eor	r27, r27
    2094:	aa 27       	eor	r26, r26
    2096:	0e d0       	rcall	.+28     	; 0x20b4 <__addsf3x>
    2098:	58 c2       	rjmp	.+1200   	; 0x254a <__fp_round>
    209a:	21 d2       	rcall	.+1090   	; 0x24de <__fp_pscA>
    209c:	30 f0       	brcs	.+12     	; 0x20aa <__addsf3+0x18>
    209e:	26 d2       	rcall	.+1100   	; 0x24ec <__fp_pscB>
    20a0:	20 f0       	brcs	.+8      	; 0x20aa <__addsf3+0x18>
    20a2:	31 f4       	brne	.+12     	; 0x20b0 <__addsf3+0x1e>
    20a4:	9f 3f       	cpi	r25, 0xFF	; 255
    20a6:	11 f4       	brne	.+4      	; 0x20ac <__addsf3+0x1a>
    20a8:	1e f4       	brtc	.+6      	; 0x20b0 <__addsf3+0x1e>
    20aa:	f1 c1       	rjmp	.+994    	; 0x248e <__fp_nan>
    20ac:	0e f4       	brtc	.+2      	; 0x20b0 <__addsf3+0x1e>
    20ae:	e0 95       	com	r30
    20b0:	e7 fb       	bst	r30, 7
    20b2:	e7 c1       	rjmp	.+974    	; 0x2482 <__fp_inf>

000020b4 <__addsf3x>:
    20b4:	e9 2f       	mov	r30, r25
    20b6:	6b d2       	rcall	.+1238   	; 0x258e <__fp_split3>
    20b8:	80 f3       	brcs	.-32     	; 0x209a <__addsf3+0x8>
    20ba:	ba 17       	cp	r27, r26
    20bc:	62 07       	cpc	r22, r18
    20be:	73 07       	cpc	r23, r19
    20c0:	84 07       	cpc	r24, r20
    20c2:	95 07       	cpc	r25, r21
    20c4:	18 f0       	brcs	.+6      	; 0x20cc <__addsf3x+0x18>
    20c6:	71 f4       	brne	.+28     	; 0x20e4 <__addsf3x+0x30>
    20c8:	9e f5       	brtc	.+102    	; 0x2130 <__addsf3x+0x7c>
    20ca:	83 c2       	rjmp	.+1286   	; 0x25d2 <__fp_zero>
    20cc:	0e f4       	brtc	.+2      	; 0x20d0 <__addsf3x+0x1c>
    20ce:	e0 95       	com	r30
    20d0:	0b 2e       	mov	r0, r27
    20d2:	ba 2f       	mov	r27, r26
    20d4:	a0 2d       	mov	r26, r0
    20d6:	0b 01       	movw	r0, r22
    20d8:	b9 01       	movw	r22, r18
    20da:	90 01       	movw	r18, r0
    20dc:	0c 01       	movw	r0, r24
    20de:	ca 01       	movw	r24, r20
    20e0:	a0 01       	movw	r20, r0
    20e2:	11 24       	eor	r1, r1
    20e4:	ff 27       	eor	r31, r31
    20e6:	59 1b       	sub	r21, r25
    20e8:	99 f0       	breq	.+38     	; 0x2110 <__addsf3x+0x5c>
    20ea:	59 3f       	cpi	r21, 0xF9	; 249
    20ec:	50 f4       	brcc	.+20     	; 0x2102 <__addsf3x+0x4e>
    20ee:	50 3e       	cpi	r21, 0xE0	; 224
    20f0:	68 f1       	brcs	.+90     	; 0x214c <__addsf3x+0x98>
    20f2:	1a 16       	cp	r1, r26
    20f4:	f0 40       	sbci	r31, 0x00	; 0
    20f6:	a2 2f       	mov	r26, r18
    20f8:	23 2f       	mov	r18, r19
    20fa:	34 2f       	mov	r19, r20
    20fc:	44 27       	eor	r20, r20
    20fe:	58 5f       	subi	r21, 0xF8	; 248
    2100:	f3 cf       	rjmp	.-26     	; 0x20e8 <__addsf3x+0x34>
    2102:	46 95       	lsr	r20
    2104:	37 95       	ror	r19
    2106:	27 95       	ror	r18
    2108:	a7 95       	ror	r26
    210a:	f0 40       	sbci	r31, 0x00	; 0
    210c:	53 95       	inc	r21
    210e:	c9 f7       	brne	.-14     	; 0x2102 <__addsf3x+0x4e>
    2110:	7e f4       	brtc	.+30     	; 0x2130 <__addsf3x+0x7c>
    2112:	1f 16       	cp	r1, r31
    2114:	ba 0b       	sbc	r27, r26
    2116:	62 0b       	sbc	r22, r18
    2118:	73 0b       	sbc	r23, r19
    211a:	84 0b       	sbc	r24, r20
    211c:	ba f0       	brmi	.+46     	; 0x214c <__addsf3x+0x98>
    211e:	91 50       	subi	r25, 0x01	; 1
    2120:	a1 f0       	breq	.+40     	; 0x214a <__addsf3x+0x96>
    2122:	ff 0f       	add	r31, r31
    2124:	bb 1f       	adc	r27, r27
    2126:	66 1f       	adc	r22, r22
    2128:	77 1f       	adc	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	c2 f7       	brpl	.-16     	; 0x211e <__addsf3x+0x6a>
    212e:	0e c0       	rjmp	.+28     	; 0x214c <__addsf3x+0x98>
    2130:	ba 0f       	add	r27, r26
    2132:	62 1f       	adc	r22, r18
    2134:	73 1f       	adc	r23, r19
    2136:	84 1f       	adc	r24, r20
    2138:	48 f4       	brcc	.+18     	; 0x214c <__addsf3x+0x98>
    213a:	87 95       	ror	r24
    213c:	77 95       	ror	r23
    213e:	67 95       	ror	r22
    2140:	b7 95       	ror	r27
    2142:	f7 95       	ror	r31
    2144:	9e 3f       	cpi	r25, 0xFE	; 254
    2146:	08 f0       	brcs	.+2      	; 0x214a <__addsf3x+0x96>
    2148:	b3 cf       	rjmp	.-154    	; 0x20b0 <__addsf3+0x1e>
    214a:	93 95       	inc	r25
    214c:	88 0f       	add	r24, r24
    214e:	08 f0       	brcs	.+2      	; 0x2152 <__addsf3x+0x9e>
    2150:	99 27       	eor	r25, r25
    2152:	ee 0f       	add	r30, r30
    2154:	97 95       	ror	r25
    2156:	87 95       	ror	r24
    2158:	08 95       	ret
    215a:	c1 d1       	rcall	.+898    	; 0x24de <__fp_pscA>
    215c:	58 f0       	brcs	.+22     	; 0x2174 <__addsf3x+0xc0>
    215e:	80 e8       	ldi	r24, 0x80	; 128
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	09 f4       	brne	.+2      	; 0x2166 <__addsf3x+0xb2>
    2164:	9e ef       	ldi	r25, 0xFE	; 254
    2166:	c2 d1       	rcall	.+900    	; 0x24ec <__fp_pscB>
    2168:	28 f0       	brcs	.+10     	; 0x2174 <__addsf3x+0xc0>
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	51 e0       	ldi	r21, 0x01	; 1
    216e:	59 f4       	brne	.+22     	; 0x2186 <atan2+0xe>
    2170:	5e ef       	ldi	r21, 0xFE	; 254
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <atan2+0xe>
    2174:	8c c1       	rjmp	.+792    	; 0x248e <__fp_nan>
    2176:	2d c2       	rjmp	.+1114   	; 0x25d2 <__fp_zero>

00002178 <atan2>:
    2178:	e9 2f       	mov	r30, r25
    217a:	e0 78       	andi	r30, 0x80	; 128
    217c:	08 d2       	rcall	.+1040   	; 0x258e <__fp_split3>
    217e:	68 f3       	brcs	.-38     	; 0x215a <__addsf3x+0xa6>
    2180:	09 2e       	mov	r0, r25
    2182:	05 2a       	or	r0, r21
    2184:	c1 f3       	breq	.-16     	; 0x2176 <__addsf3x+0xc2>
    2186:	26 17       	cp	r18, r22
    2188:	37 07       	cpc	r19, r23
    218a:	48 07       	cpc	r20, r24
    218c:	59 07       	cpc	r21, r25
    218e:	38 f0       	brcs	.+14     	; 0x219e <atan2+0x26>
    2190:	0e 2e       	mov	r0, r30
    2192:	07 f8       	bld	r0, 7
    2194:	e0 25       	eor	r30, r0
    2196:	69 f0       	breq	.+26     	; 0x21b2 <atan2+0x3a>
    2198:	e0 25       	eor	r30, r0
    219a:	e0 64       	ori	r30, 0x40	; 64
    219c:	0a c0       	rjmp	.+20     	; 0x21b2 <atan2+0x3a>
    219e:	ef 63       	ori	r30, 0x3F	; 63
    21a0:	07 f8       	bld	r0, 7
    21a2:	00 94       	com	r0
    21a4:	07 fa       	bst	r0, 7
    21a6:	db 01       	movw	r26, r22
    21a8:	b9 01       	movw	r22, r18
    21aa:	9d 01       	movw	r18, r26
    21ac:	dc 01       	movw	r26, r24
    21ae:	ca 01       	movw	r24, r20
    21b0:	ad 01       	movw	r20, r26
    21b2:	ef 93       	push	r30
    21b4:	4a d0       	rcall	.+148    	; 0x224a <__divsf3_pse>
    21b6:	c9 d1       	rcall	.+914    	; 0x254a <__fp_round>
    21b8:	0a d0       	rcall	.+20     	; 0x21ce <atan>
    21ba:	5f 91       	pop	r21
    21bc:	55 23       	and	r21, r21
    21be:	31 f0       	breq	.+12     	; 0x21cc <atan2+0x54>
    21c0:	2b ed       	ldi	r18, 0xDB	; 219
    21c2:	3f e0       	ldi	r19, 0x0F	; 15
    21c4:	49 e4       	ldi	r20, 0x49	; 73
    21c6:	50 fd       	sbrc	r21, 0
    21c8:	49 ec       	ldi	r20, 0xC9	; 201
    21ca:	63 cf       	rjmp	.-314    	; 0x2092 <__addsf3>
    21cc:	08 95       	ret

000021ce <atan>:
    21ce:	df 93       	push	r29
    21d0:	dd 27       	eor	r29, r29
    21d2:	b9 2f       	mov	r27, r25
    21d4:	bf 77       	andi	r27, 0x7F	; 127
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	16 16       	cp	r1, r22
    21dc:	17 06       	cpc	r1, r23
    21de:	48 07       	cpc	r20, r24
    21e0:	5b 07       	cpc	r21, r27
    21e2:	10 f4       	brcc	.+4      	; 0x21e8 <atan+0x1a>
    21e4:	d9 2f       	mov	r29, r25
    21e6:	00 d2       	rcall	.+1024   	; 0x25e8 <inverse>
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	7f 93       	push	r23
    21ee:	6f 93       	push	r22
    21f0:	16 d3       	rcall	.+1580   	; 0x281e <square>
    21f2:	ec ea       	ldi	r30, 0xAC	; 172
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	4e d1       	rcall	.+668    	; 0x2494 <__fp_powser>
    21f8:	a8 d1       	rcall	.+848    	; 0x254a <__fp_round>
    21fa:	2f 91       	pop	r18
    21fc:	3f 91       	pop	r19
    21fe:	4f 91       	pop	r20
    2200:	5f 91       	pop	r21
    2202:	6e d2       	rcall	.+1244   	; 0x26e0 <__mulsf3x>
    2204:	dd 23       	and	r29, r29
    2206:	49 f0       	breq	.+18     	; 0x221a <atan+0x4c>
    2208:	90 58       	subi	r25, 0x80	; 128
    220a:	a2 ea       	ldi	r26, 0xA2	; 162
    220c:	2a ed       	ldi	r18, 0xDA	; 218
    220e:	3f e0       	ldi	r19, 0x0F	; 15
    2210:	49 ec       	ldi	r20, 0xC9	; 201
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	d0 78       	andi	r29, 0x80	; 128
    2216:	5d 27       	eor	r21, r29
    2218:	4d df       	rcall	.-358    	; 0x20b4 <__addsf3x>
    221a:	df 91       	pop	r29
    221c:	96 c1       	rjmp	.+812    	; 0x254a <__fp_round>

0000221e <__cmpsf2>:
    221e:	0d d1       	rcall	.+538    	; 0x243a <__fp_cmp>
    2220:	08 f4       	brcc	.+2      	; 0x2224 <__cmpsf2+0x6>
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	08 95       	ret

00002226 <cos>:
    2226:	6a d1       	rcall	.+724    	; 0x24fc <__fp_rempio2>
    2228:	e3 95       	inc	r30
    222a:	a0 c1       	rjmp	.+832    	; 0x256c <__fp_sinus>

0000222c <__divsf3>:
    222c:	0c d0       	rcall	.+24     	; 0x2246 <__divsf3x>
    222e:	8d c1       	rjmp	.+794    	; 0x254a <__fp_round>
    2230:	5d d1       	rcall	.+698    	; 0x24ec <__fp_pscB>
    2232:	40 f0       	brcs	.+16     	; 0x2244 <__divsf3+0x18>
    2234:	54 d1       	rcall	.+680    	; 0x24de <__fp_pscA>
    2236:	30 f0       	brcs	.+12     	; 0x2244 <__divsf3+0x18>
    2238:	21 f4       	brne	.+8      	; 0x2242 <__divsf3+0x16>
    223a:	5f 3f       	cpi	r21, 0xFF	; 255
    223c:	19 f0       	breq	.+6      	; 0x2244 <__divsf3+0x18>
    223e:	21 c1       	rjmp	.+578    	; 0x2482 <__fp_inf>
    2240:	51 11       	cpse	r21, r1
    2242:	c8 c1       	rjmp	.+912    	; 0x25d4 <__fp_szero>
    2244:	24 c1       	rjmp	.+584    	; 0x248e <__fp_nan>

00002246 <__divsf3x>:
    2246:	a3 d1       	rcall	.+838    	; 0x258e <__fp_split3>
    2248:	98 f3       	brcs	.-26     	; 0x2230 <__divsf3+0x4>

0000224a <__divsf3_pse>:
    224a:	99 23       	and	r25, r25
    224c:	c9 f3       	breq	.-14     	; 0x2240 <__divsf3+0x14>
    224e:	55 23       	and	r21, r21
    2250:	b1 f3       	breq	.-20     	; 0x223e <__divsf3+0x12>
    2252:	95 1b       	sub	r25, r21
    2254:	55 0b       	sbc	r21, r21
    2256:	bb 27       	eor	r27, r27
    2258:	aa 27       	eor	r26, r26
    225a:	62 17       	cp	r22, r18
    225c:	73 07       	cpc	r23, r19
    225e:	84 07       	cpc	r24, r20
    2260:	38 f0       	brcs	.+14     	; 0x2270 <__divsf3_pse+0x26>
    2262:	9f 5f       	subi	r25, 0xFF	; 255
    2264:	5f 4f       	sbci	r21, 0xFF	; 255
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	44 1f       	adc	r20, r20
    226c:	aa 1f       	adc	r26, r26
    226e:	a9 f3       	breq	.-22     	; 0x225a <__divsf3_pse+0x10>
    2270:	33 d0       	rcall	.+102    	; 0x22d8 <__divsf3_pse+0x8e>
    2272:	0e 2e       	mov	r0, r30
    2274:	3a f0       	brmi	.+14     	; 0x2284 <__divsf3_pse+0x3a>
    2276:	e0 e8       	ldi	r30, 0x80	; 128
    2278:	30 d0       	rcall	.+96     	; 0x22da <__divsf3_pse+0x90>
    227a:	91 50       	subi	r25, 0x01	; 1
    227c:	50 40       	sbci	r21, 0x00	; 0
    227e:	e6 95       	lsr	r30
    2280:	00 1c       	adc	r0, r0
    2282:	ca f7       	brpl	.-14     	; 0x2276 <__divsf3_pse+0x2c>
    2284:	29 d0       	rcall	.+82     	; 0x22d8 <__divsf3_pse+0x8e>
    2286:	fe 2f       	mov	r31, r30
    2288:	27 d0       	rcall	.+78     	; 0x22d8 <__divsf3_pse+0x8e>
    228a:	66 0f       	add	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	bb 1f       	adc	r27, r27
    2292:	26 17       	cp	r18, r22
    2294:	37 07       	cpc	r19, r23
    2296:	48 07       	cpc	r20, r24
    2298:	ab 07       	cpc	r26, r27
    229a:	b0 e8       	ldi	r27, 0x80	; 128
    229c:	09 f0       	breq	.+2      	; 0x22a0 <__divsf3_pse+0x56>
    229e:	bb 0b       	sbc	r27, r27
    22a0:	80 2d       	mov	r24, r0
    22a2:	bf 01       	movw	r22, r30
    22a4:	ff 27       	eor	r31, r31
    22a6:	93 58       	subi	r25, 0x83	; 131
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	2a f0       	brmi	.+10     	; 0x22b6 <__divsf3_pse+0x6c>
    22ac:	9e 3f       	cpi	r25, 0xFE	; 254
    22ae:	51 05       	cpc	r21, r1
    22b0:	68 f0       	brcs	.+26     	; 0x22cc <__divsf3_pse+0x82>
    22b2:	e7 c0       	rjmp	.+462    	; 0x2482 <__fp_inf>
    22b4:	8f c1       	rjmp	.+798    	; 0x25d4 <__fp_szero>
    22b6:	5f 3f       	cpi	r21, 0xFF	; 255
    22b8:	ec f3       	brlt	.-6      	; 0x22b4 <__divsf3_pse+0x6a>
    22ba:	98 3e       	cpi	r25, 0xE8	; 232
    22bc:	dc f3       	brlt	.-10     	; 0x22b4 <__divsf3_pse+0x6a>
    22be:	86 95       	lsr	r24
    22c0:	77 95       	ror	r23
    22c2:	67 95       	ror	r22
    22c4:	b7 95       	ror	r27
    22c6:	f7 95       	ror	r31
    22c8:	9f 5f       	subi	r25, 0xFF	; 255
    22ca:	c9 f7       	brne	.-14     	; 0x22be <__divsf3_pse+0x74>
    22cc:	88 0f       	add	r24, r24
    22ce:	91 1d       	adc	r25, r1
    22d0:	96 95       	lsr	r25
    22d2:	87 95       	ror	r24
    22d4:	97 f9       	bld	r25, 7
    22d6:	08 95       	ret
    22d8:	e1 e0       	ldi	r30, 0x01	; 1
    22da:	66 0f       	add	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	bb 1f       	adc	r27, r27
    22e2:	62 17       	cp	r22, r18
    22e4:	73 07       	cpc	r23, r19
    22e6:	84 07       	cpc	r24, r20
    22e8:	ba 07       	cpc	r27, r26
    22ea:	20 f0       	brcs	.+8      	; 0x22f4 <__divsf3_pse+0xaa>
    22ec:	62 1b       	sub	r22, r18
    22ee:	73 0b       	sbc	r23, r19
    22f0:	84 0b       	sbc	r24, r20
    22f2:	ba 0b       	sbc	r27, r26
    22f4:	ee 1f       	adc	r30, r30
    22f6:	88 f7       	brcc	.-30     	; 0x22da <__divsf3_pse+0x90>
    22f8:	e0 95       	com	r30
    22fa:	08 95       	ret
    22fc:	19 f4       	brne	.+6      	; 0x2304 <__divsf3_pse+0xba>
    22fe:	0e f0       	brts	.+2      	; 0x2302 <__divsf3_pse+0xb8>
    2300:	c0 c0       	rjmp	.+384    	; 0x2482 <__fp_inf>
    2302:	67 c1       	rjmp	.+718    	; 0x25d2 <__fp_zero>
    2304:	c4 c0       	rjmp	.+392    	; 0x248e <__fp_nan>

00002306 <exp>:
    2306:	4b d1       	rcall	.+662    	; 0x259e <__fp_splitA>
    2308:	c8 f3       	brcs	.-14     	; 0x22fc <__divsf3_pse+0xb2>
    230a:	96 38       	cpi	r25, 0x86	; 134
    230c:	c0 f7       	brcc	.-16     	; 0x22fe <__divsf3_pse+0xb4>
    230e:	07 f8       	bld	r0, 7
    2310:	0f 92       	push	r0
    2312:	e8 94       	clt
    2314:	2b e3       	ldi	r18, 0x3B	; 59
    2316:	3a ea       	ldi	r19, 0xAA	; 170
    2318:	48 eb       	ldi	r20, 0xB8	; 184
    231a:	5f e7       	ldi	r21, 0x7F	; 127
    231c:	e3 d1       	rcall	.+966    	; 0x26e4 <__mulsf3_pse>
    231e:	0f 92       	push	r0
    2320:	0f 92       	push	r0
    2322:	0f 92       	push	r0
    2324:	4d b7       	in	r20, 0x3d	; 61
    2326:	5e b7       	in	r21, 0x3e	; 62
    2328:	0f 92       	push	r0
    232a:	9b d1       	rcall	.+822    	; 0x2662 <modf>
    232c:	e9 ed       	ldi	r30, 0xD9	; 217
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	b1 d0       	rcall	.+354    	; 0x2494 <__fp_powser>
    2332:	4f 91       	pop	r20
    2334:	5f 91       	pop	r21
    2336:	ef 91       	pop	r30
    2338:	ff 91       	pop	r31
    233a:	e5 95       	asr	r30
    233c:	ee 1f       	adc	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	49 f0       	breq	.+18     	; 0x2354 <exp+0x4e>
    2342:	fe 57       	subi	r31, 0x7E	; 126
    2344:	e0 68       	ori	r30, 0x80	; 128
    2346:	44 27       	eor	r20, r20
    2348:	ee 0f       	add	r30, r30
    234a:	44 1f       	adc	r20, r20
    234c:	fa 95       	dec	r31
    234e:	e1 f7       	brne	.-8      	; 0x2348 <exp+0x42>
    2350:	41 95       	neg	r20
    2352:	55 0b       	sbc	r21, r21
    2354:	52 d1       	rcall	.+676    	; 0x25fa <ldexp>
    2356:	0f 90       	pop	r0
    2358:	07 fe       	sbrs	r0, 7
    235a:	46 c1       	rjmp	.+652    	; 0x25e8 <inverse>
    235c:	08 95       	ret

0000235e <__fixsfsi>:
    235e:	04 d0       	rcall	.+8      	; 0x2368 <__fixunssfsi>
    2360:	68 94       	set
    2362:	b1 11       	cpse	r27, r1
    2364:	37 c1       	rjmp	.+622    	; 0x25d4 <__fp_szero>
    2366:	08 95       	ret

00002368 <__fixunssfsi>:
    2368:	1a d1       	rcall	.+564    	; 0x259e <__fp_splitA>
    236a:	88 f0       	brcs	.+34     	; 0x238e <__fixunssfsi+0x26>
    236c:	9f 57       	subi	r25, 0x7F	; 127
    236e:	90 f0       	brcs	.+36     	; 0x2394 <__fixunssfsi+0x2c>
    2370:	b9 2f       	mov	r27, r25
    2372:	99 27       	eor	r25, r25
    2374:	b7 51       	subi	r27, 0x17	; 23
    2376:	a0 f0       	brcs	.+40     	; 0x23a0 <__fixunssfsi+0x38>
    2378:	d1 f0       	breq	.+52     	; 0x23ae <__fixunssfsi+0x46>
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	1a f0       	brmi	.+6      	; 0x238a <__fixunssfsi+0x22>
    2384:	ba 95       	dec	r27
    2386:	c9 f7       	brne	.-14     	; 0x237a <__fixunssfsi+0x12>
    2388:	12 c0       	rjmp	.+36     	; 0x23ae <__fixunssfsi+0x46>
    238a:	b1 30       	cpi	r27, 0x01	; 1
    238c:	81 f0       	breq	.+32     	; 0x23ae <__fixunssfsi+0x46>
    238e:	21 d1       	rcall	.+578    	; 0x25d2 <__fp_zero>
    2390:	b1 e0       	ldi	r27, 0x01	; 1
    2392:	08 95       	ret
    2394:	1e c1       	rjmp	.+572    	; 0x25d2 <__fp_zero>
    2396:	67 2f       	mov	r22, r23
    2398:	78 2f       	mov	r23, r24
    239a:	88 27       	eor	r24, r24
    239c:	b8 5f       	subi	r27, 0xF8	; 248
    239e:	39 f0       	breq	.+14     	; 0x23ae <__fixunssfsi+0x46>
    23a0:	b9 3f       	cpi	r27, 0xF9	; 249
    23a2:	cc f3       	brlt	.-14     	; 0x2396 <__fixunssfsi+0x2e>
    23a4:	86 95       	lsr	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	b3 95       	inc	r27
    23ac:	d9 f7       	brne	.-10     	; 0x23a4 <__fixunssfsi+0x3c>
    23ae:	3e f4       	brtc	.+14     	; 0x23be <__fixunssfsi+0x56>
    23b0:	90 95       	com	r25
    23b2:	80 95       	com	r24
    23b4:	70 95       	com	r23
    23b6:	61 95       	neg	r22
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	8f 4f       	sbci	r24, 0xFF	; 255
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	08 95       	ret

000023c0 <__floatunsisf>:
    23c0:	e8 94       	clt
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <__floatsisf+0x12>

000023c4 <__floatsisf>:
    23c4:	97 fb       	bst	r25, 7
    23c6:	3e f4       	brtc	.+14     	; 0x23d6 <__floatsisf+0x12>
    23c8:	90 95       	com	r25
    23ca:	80 95       	com	r24
    23cc:	70 95       	com	r23
    23ce:	61 95       	neg	r22
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	99 23       	and	r25, r25
    23d8:	a9 f0       	breq	.+42     	; 0x2404 <__floatsisf+0x40>
    23da:	f9 2f       	mov	r31, r25
    23dc:	96 e9       	ldi	r25, 0x96	; 150
    23de:	bb 27       	eor	r27, r27
    23e0:	93 95       	inc	r25
    23e2:	f6 95       	lsr	r31
    23e4:	87 95       	ror	r24
    23e6:	77 95       	ror	r23
    23e8:	67 95       	ror	r22
    23ea:	b7 95       	ror	r27
    23ec:	f1 11       	cpse	r31, r1
    23ee:	f8 cf       	rjmp	.-16     	; 0x23e0 <__floatsisf+0x1c>
    23f0:	fa f4       	brpl	.+62     	; 0x2430 <__floatsisf+0x6c>
    23f2:	bb 0f       	add	r27, r27
    23f4:	11 f4       	brne	.+4      	; 0x23fa <__floatsisf+0x36>
    23f6:	60 ff       	sbrs	r22, 0
    23f8:	1b c0       	rjmp	.+54     	; 0x2430 <__floatsisf+0x6c>
    23fa:	6f 5f       	subi	r22, 0xFF	; 255
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <__floatsisf+0x6c>
    2404:	88 23       	and	r24, r24
    2406:	11 f0       	breq	.+4      	; 0x240c <__floatsisf+0x48>
    2408:	96 e9       	ldi	r25, 0x96	; 150
    240a:	11 c0       	rjmp	.+34     	; 0x242e <__floatsisf+0x6a>
    240c:	77 23       	and	r23, r23
    240e:	21 f0       	breq	.+8      	; 0x2418 <__floatsisf+0x54>
    2410:	9e e8       	ldi	r25, 0x8E	; 142
    2412:	87 2f       	mov	r24, r23
    2414:	76 2f       	mov	r23, r22
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <__floatsisf+0x5e>
    2418:	66 23       	and	r22, r22
    241a:	71 f0       	breq	.+28     	; 0x2438 <__floatsisf+0x74>
    241c:	96 e8       	ldi	r25, 0x86	; 134
    241e:	86 2f       	mov	r24, r22
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	2a f0       	brmi	.+10     	; 0x2430 <__floatsisf+0x6c>
    2426:	9a 95       	dec	r25
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	da f7       	brpl	.-10     	; 0x2426 <__floatsisf+0x62>
    2430:	88 0f       	add	r24, r24
    2432:	96 95       	lsr	r25
    2434:	87 95       	ror	r24
    2436:	97 f9       	bld	r25, 7
    2438:	08 95       	ret

0000243a <__fp_cmp>:
    243a:	99 0f       	add	r25, r25
    243c:	00 08       	sbc	r0, r0
    243e:	55 0f       	add	r21, r21
    2440:	aa 0b       	sbc	r26, r26
    2442:	e0 e8       	ldi	r30, 0x80	; 128
    2444:	fe ef       	ldi	r31, 0xFE	; 254
    2446:	16 16       	cp	r1, r22
    2448:	17 06       	cpc	r1, r23
    244a:	e8 07       	cpc	r30, r24
    244c:	f9 07       	cpc	r31, r25
    244e:	c0 f0       	brcs	.+48     	; 0x2480 <__fp_cmp+0x46>
    2450:	12 16       	cp	r1, r18
    2452:	13 06       	cpc	r1, r19
    2454:	e4 07       	cpc	r30, r20
    2456:	f5 07       	cpc	r31, r21
    2458:	98 f0       	brcs	.+38     	; 0x2480 <__fp_cmp+0x46>
    245a:	62 1b       	sub	r22, r18
    245c:	73 0b       	sbc	r23, r19
    245e:	84 0b       	sbc	r24, r20
    2460:	95 0b       	sbc	r25, r21
    2462:	39 f4       	brne	.+14     	; 0x2472 <__fp_cmp+0x38>
    2464:	0a 26       	eor	r0, r26
    2466:	61 f0       	breq	.+24     	; 0x2480 <__fp_cmp+0x46>
    2468:	23 2b       	or	r18, r19
    246a:	24 2b       	or	r18, r20
    246c:	25 2b       	or	r18, r21
    246e:	21 f4       	brne	.+8      	; 0x2478 <__fp_cmp+0x3e>
    2470:	08 95       	ret
    2472:	0a 26       	eor	r0, r26
    2474:	09 f4       	brne	.+2      	; 0x2478 <__fp_cmp+0x3e>
    2476:	a1 40       	sbci	r26, 0x01	; 1
    2478:	a6 95       	lsr	r26
    247a:	8f ef       	ldi	r24, 0xFF	; 255
    247c:	81 1d       	adc	r24, r1
    247e:	81 1d       	adc	r24, r1
    2480:	08 95       	ret

00002482 <__fp_inf>:
    2482:	97 f9       	bld	r25, 7
    2484:	9f 67       	ori	r25, 0x7F	; 127
    2486:	80 e8       	ldi	r24, 0x80	; 128
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	08 95       	ret

0000248e <__fp_nan>:
    248e:	9f ef       	ldi	r25, 0xFF	; 255
    2490:	80 ec       	ldi	r24, 0xC0	; 192
    2492:	08 95       	ret

00002494 <__fp_powser>:
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	1f 93       	push	r17
    249a:	0f 93       	push	r16
    249c:	ff 92       	push	r15
    249e:	ef 92       	push	r14
    24a0:	df 92       	push	r13
    24a2:	7b 01       	movw	r14, r22
    24a4:	8c 01       	movw	r16, r24
    24a6:	68 94       	set
    24a8:	05 c0       	rjmp	.+10     	; 0x24b4 <__fp_powser+0x20>
    24aa:	da 2e       	mov	r13, r26
    24ac:	ef 01       	movw	r28, r30
    24ae:	18 d1       	rcall	.+560    	; 0x26e0 <__mulsf3x>
    24b0:	fe 01       	movw	r30, r28
    24b2:	e8 94       	clt
    24b4:	a5 91       	lpm	r26, Z+
    24b6:	25 91       	lpm	r18, Z+
    24b8:	35 91       	lpm	r19, Z+
    24ba:	45 91       	lpm	r20, Z+
    24bc:	55 91       	lpm	r21, Z+
    24be:	ae f3       	brts	.-22     	; 0x24aa <__fp_powser+0x16>
    24c0:	ef 01       	movw	r28, r30
    24c2:	f8 dd       	rcall	.-1040   	; 0x20b4 <__addsf3x>
    24c4:	fe 01       	movw	r30, r28
    24c6:	97 01       	movw	r18, r14
    24c8:	a8 01       	movw	r20, r16
    24ca:	da 94       	dec	r13
    24cc:	79 f7       	brne	.-34     	; 0x24ac <__fp_powser+0x18>
    24ce:	df 90       	pop	r13
    24d0:	ef 90       	pop	r14
    24d2:	ff 90       	pop	r15
    24d4:	0f 91       	pop	r16
    24d6:	1f 91       	pop	r17
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <__fp_pscA>:
    24de:	00 24       	eor	r0, r0
    24e0:	0a 94       	dec	r0
    24e2:	16 16       	cp	r1, r22
    24e4:	17 06       	cpc	r1, r23
    24e6:	18 06       	cpc	r1, r24
    24e8:	09 06       	cpc	r0, r25
    24ea:	08 95       	ret

000024ec <__fp_pscB>:
    24ec:	00 24       	eor	r0, r0
    24ee:	0a 94       	dec	r0
    24f0:	12 16       	cp	r1, r18
    24f2:	13 06       	cpc	r1, r19
    24f4:	14 06       	cpc	r1, r20
    24f6:	05 06       	cpc	r0, r21
    24f8:	08 95       	ret
    24fa:	c9 cf       	rjmp	.-110    	; 0x248e <__fp_nan>

000024fc <__fp_rempio2>:
    24fc:	50 d0       	rcall	.+160    	; 0x259e <__fp_splitA>
    24fe:	e8 f3       	brcs	.-6      	; 0x24fa <__fp_pscB+0xe>
    2500:	e8 94       	clt
    2502:	e0 e0       	ldi	r30, 0x00	; 0
    2504:	bb 27       	eor	r27, r27
    2506:	9f 57       	subi	r25, 0x7F	; 127
    2508:	f0 f0       	brcs	.+60     	; 0x2546 <__fp_rempio2+0x4a>
    250a:	2a ed       	ldi	r18, 0xDA	; 218
    250c:	3f e0       	ldi	r19, 0x0F	; 15
    250e:	49 ec       	ldi	r20, 0xC9	; 201
    2510:	06 c0       	rjmp	.+12     	; 0x251e <__fp_rempio2+0x22>
    2512:	ee 0f       	add	r30, r30
    2514:	bb 0f       	add	r27, r27
    2516:	66 1f       	adc	r22, r22
    2518:	77 1f       	adc	r23, r23
    251a:	88 1f       	adc	r24, r24
    251c:	28 f0       	brcs	.+10     	; 0x2528 <__fp_rempio2+0x2c>
    251e:	b2 3a       	cpi	r27, 0xA2	; 162
    2520:	62 07       	cpc	r22, r18
    2522:	73 07       	cpc	r23, r19
    2524:	84 07       	cpc	r24, r20
    2526:	28 f0       	brcs	.+10     	; 0x2532 <__fp_rempio2+0x36>
    2528:	b2 5a       	subi	r27, 0xA2	; 162
    252a:	62 0b       	sbc	r22, r18
    252c:	73 0b       	sbc	r23, r19
    252e:	84 0b       	sbc	r24, r20
    2530:	e3 95       	inc	r30
    2532:	9a 95       	dec	r25
    2534:	72 f7       	brpl	.-36     	; 0x2512 <__fp_rempio2+0x16>
    2536:	80 38       	cpi	r24, 0x80	; 128
    2538:	30 f4       	brcc	.+12     	; 0x2546 <__fp_rempio2+0x4a>
    253a:	9a 95       	dec	r25
    253c:	bb 0f       	add	r27, r27
    253e:	66 1f       	adc	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	88 1f       	adc	r24, r24
    2544:	d2 f7       	brpl	.-12     	; 0x253a <__fp_rempio2+0x3e>
    2546:	90 48       	sbci	r25, 0x80	; 128
    2548:	6f c1       	rjmp	.+734    	; 0x2828 <__fp_mpack_finite>

0000254a <__fp_round>:
    254a:	09 2e       	mov	r0, r25
    254c:	03 94       	inc	r0
    254e:	00 0c       	add	r0, r0
    2550:	11 f4       	brne	.+4      	; 0x2556 <__fp_round+0xc>
    2552:	88 23       	and	r24, r24
    2554:	52 f0       	brmi	.+20     	; 0x256a <__fp_round+0x20>
    2556:	bb 0f       	add	r27, r27
    2558:	40 f4       	brcc	.+16     	; 0x256a <__fp_round+0x20>
    255a:	bf 2b       	or	r27, r31
    255c:	11 f4       	brne	.+4      	; 0x2562 <__fp_round+0x18>
    255e:	60 ff       	sbrs	r22, 0
    2560:	04 c0       	rjmp	.+8      	; 0x256a <__fp_round+0x20>
    2562:	6f 5f       	subi	r22, 0xFF	; 255
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	08 95       	ret

0000256c <__fp_sinus>:
    256c:	ef 93       	push	r30
    256e:	e0 ff       	sbrs	r30, 0
    2570:	06 c0       	rjmp	.+12     	; 0x257e <__fp_sinus+0x12>
    2572:	a2 ea       	ldi	r26, 0xA2	; 162
    2574:	2a ed       	ldi	r18, 0xDA	; 218
    2576:	3f e0       	ldi	r19, 0x0F	; 15
    2578:	49 ec       	ldi	r20, 0xC9	; 201
    257a:	5f eb       	ldi	r21, 0xBF	; 191
    257c:	9b dd       	rcall	.-1226   	; 0x20b4 <__addsf3x>
    257e:	e5 df       	rcall	.-54     	; 0x254a <__fp_round>
    2580:	0f 90       	pop	r0
    2582:	03 94       	inc	r0
    2584:	01 fc       	sbrc	r0, 1
    2586:	90 58       	subi	r25, 0x80	; 128
    2588:	e1 e0       	ldi	r30, 0x01	; 1
    258a:	f1 e0       	ldi	r31, 0x01	; 1
    258c:	60 c1       	rjmp	.+704    	; 0x284e <__fp_powsodd>

0000258e <__fp_split3>:
    258e:	57 fd       	sbrc	r21, 7
    2590:	90 58       	subi	r25, 0x80	; 128
    2592:	44 0f       	add	r20, r20
    2594:	55 1f       	adc	r21, r21
    2596:	59 f0       	breq	.+22     	; 0x25ae <__fp_splitA+0x10>
    2598:	5f 3f       	cpi	r21, 0xFF	; 255
    259a:	71 f0       	breq	.+28     	; 0x25b8 <__fp_splitA+0x1a>
    259c:	47 95       	ror	r20

0000259e <__fp_splitA>:
    259e:	88 0f       	add	r24, r24
    25a0:	97 fb       	bst	r25, 7
    25a2:	99 1f       	adc	r25, r25
    25a4:	61 f0       	breq	.+24     	; 0x25be <__fp_splitA+0x20>
    25a6:	9f 3f       	cpi	r25, 0xFF	; 255
    25a8:	79 f0       	breq	.+30     	; 0x25c8 <__fp_splitA+0x2a>
    25aa:	87 95       	ror	r24
    25ac:	08 95       	ret
    25ae:	12 16       	cp	r1, r18
    25b0:	13 06       	cpc	r1, r19
    25b2:	14 06       	cpc	r1, r20
    25b4:	55 1f       	adc	r21, r21
    25b6:	f2 cf       	rjmp	.-28     	; 0x259c <__fp_split3+0xe>
    25b8:	46 95       	lsr	r20
    25ba:	f1 df       	rcall	.-30     	; 0x259e <__fp_splitA>
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <__fp_splitA+0x30>
    25be:	16 16       	cp	r1, r22
    25c0:	17 06       	cpc	r1, r23
    25c2:	18 06       	cpc	r1, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	f1 cf       	rjmp	.-30     	; 0x25aa <__fp_splitA+0xc>
    25c8:	86 95       	lsr	r24
    25ca:	71 05       	cpc	r23, r1
    25cc:	61 05       	cpc	r22, r1
    25ce:	08 94       	sec
    25d0:	08 95       	ret

000025d2 <__fp_zero>:
    25d2:	e8 94       	clt

000025d4 <__fp_szero>:
    25d4:	bb 27       	eor	r27, r27
    25d6:	66 27       	eor	r22, r22
    25d8:	77 27       	eor	r23, r23
    25da:	cb 01       	movw	r24, r22
    25dc:	97 f9       	bld	r25, 7
    25de:	08 95       	ret

000025e0 <__gesf2>:
    25e0:	2c df       	rcall	.-424    	; 0x243a <__fp_cmp>
    25e2:	08 f4       	brcc	.+2      	; 0x25e6 <__gesf2+0x6>
    25e4:	8f ef       	ldi	r24, 0xFF	; 255
    25e6:	08 95       	ret

000025e8 <inverse>:
    25e8:	9b 01       	movw	r18, r22
    25ea:	ac 01       	movw	r20, r24
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	80 e8       	ldi	r24, 0x80	; 128
    25f2:	9f e3       	ldi	r25, 0x3F	; 63
    25f4:	1b ce       	rjmp	.-970    	; 0x222c <__divsf3>
    25f6:	45 cf       	rjmp	.-374    	; 0x2482 <__fp_inf>
    25f8:	15 c1       	rjmp	.+554    	; 0x2824 <__fp_mpack>

000025fa <ldexp>:
    25fa:	d1 df       	rcall	.-94     	; 0x259e <__fp_splitA>
    25fc:	e8 f3       	brcs	.-6      	; 0x25f8 <inverse+0x10>
    25fe:	99 23       	and	r25, r25
    2600:	d9 f3       	breq	.-10     	; 0x25f8 <inverse+0x10>
    2602:	94 0f       	add	r25, r20
    2604:	51 1d       	adc	r21, r1
    2606:	bb f3       	brvs	.-18     	; 0x25f6 <inverse+0xe>
    2608:	91 50       	subi	r25, 0x01	; 1
    260a:	50 40       	sbci	r21, 0x00	; 0
    260c:	94 f0       	brlt	.+36     	; 0x2632 <ldexp+0x38>
    260e:	59 f0       	breq	.+22     	; 0x2626 <ldexp+0x2c>
    2610:	88 23       	and	r24, r24
    2612:	32 f0       	brmi	.+12     	; 0x2620 <ldexp+0x26>
    2614:	66 0f       	add	r22, r22
    2616:	77 1f       	adc	r23, r23
    2618:	88 1f       	adc	r24, r24
    261a:	91 50       	subi	r25, 0x01	; 1
    261c:	50 40       	sbci	r21, 0x00	; 0
    261e:	c1 f7       	brne	.-16     	; 0x2610 <ldexp+0x16>
    2620:	9e 3f       	cpi	r25, 0xFE	; 254
    2622:	51 05       	cpc	r21, r1
    2624:	44 f7       	brge	.-48     	; 0x25f6 <inverse+0xe>
    2626:	88 0f       	add	r24, r24
    2628:	91 1d       	adc	r25, r1
    262a:	96 95       	lsr	r25
    262c:	87 95       	ror	r24
    262e:	97 f9       	bld	r25, 7
    2630:	08 95       	ret
    2632:	5f 3f       	cpi	r21, 0xFF	; 255
    2634:	ac f0       	brlt	.+42     	; 0x2660 <ldexp+0x66>
    2636:	98 3e       	cpi	r25, 0xE8	; 232
    2638:	9c f0       	brlt	.+38     	; 0x2660 <ldexp+0x66>
    263a:	bb 27       	eor	r27, r27
    263c:	86 95       	lsr	r24
    263e:	77 95       	ror	r23
    2640:	67 95       	ror	r22
    2642:	b7 95       	ror	r27
    2644:	08 f4       	brcc	.+2      	; 0x2648 <ldexp+0x4e>
    2646:	b1 60       	ori	r27, 0x01	; 1
    2648:	93 95       	inc	r25
    264a:	c1 f7       	brne	.-16     	; 0x263c <ldexp+0x42>
    264c:	bb 0f       	add	r27, r27
    264e:	58 f7       	brcc	.-42     	; 0x2626 <ldexp+0x2c>
    2650:	11 f4       	brne	.+4      	; 0x2656 <ldexp+0x5c>
    2652:	60 ff       	sbrs	r22, 0
    2654:	e8 cf       	rjmp	.-48     	; 0x2626 <ldexp+0x2c>
    2656:	6f 5f       	subi	r22, 0xFF	; 255
    2658:	7f 4f       	sbci	r23, 0xFF	; 255
    265a:	8f 4f       	sbci	r24, 0xFF	; 255
    265c:	9f 4f       	sbci	r25, 0xFF	; 255
    265e:	e3 cf       	rjmp	.-58     	; 0x2626 <ldexp+0x2c>
    2660:	b9 cf       	rjmp	.-142    	; 0x25d4 <__fp_szero>

00002662 <modf>:
    2662:	fa 01       	movw	r30, r20
    2664:	dc 01       	movw	r26, r24
    2666:	aa 0f       	add	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	9b 01       	movw	r18, r22
    266c:	ac 01       	movw	r20, r24
    266e:	bf 57       	subi	r27, 0x7F	; 127
    2670:	28 f4       	brcc	.+10     	; 0x267c <modf+0x1a>
    2672:	22 27       	eor	r18, r18
    2674:	33 27       	eor	r19, r19
    2676:	44 27       	eor	r20, r20
    2678:	50 78       	andi	r21, 0x80	; 128
    267a:	1f c0       	rjmp	.+62     	; 0x26ba <modf+0x58>
    267c:	b7 51       	subi	r27, 0x17	; 23
    267e:	88 f4       	brcc	.+34     	; 0x26a2 <modf+0x40>
    2680:	ab 2f       	mov	r26, r27
    2682:	00 24       	eor	r0, r0
    2684:	46 95       	lsr	r20
    2686:	37 95       	ror	r19
    2688:	27 95       	ror	r18
    268a:	01 1c       	adc	r0, r1
    268c:	a3 95       	inc	r26
    268e:	d2 f3       	brmi	.-12     	; 0x2684 <modf+0x22>
    2690:	00 20       	and	r0, r0
    2692:	69 f0       	breq	.+26     	; 0x26ae <modf+0x4c>
    2694:	22 0f       	add	r18, r18
    2696:	33 1f       	adc	r19, r19
    2698:	44 1f       	adc	r20, r20
    269a:	b3 95       	inc	r27
    269c:	da f3       	brmi	.-10     	; 0x2694 <modf+0x32>
    269e:	0d d0       	rcall	.+26     	; 0x26ba <modf+0x58>
    26a0:	f7 cc       	rjmp	.-1554   	; 0x2090 <__subsf3>
    26a2:	61 30       	cpi	r22, 0x01	; 1
    26a4:	71 05       	cpc	r23, r1
    26a6:	a0 e8       	ldi	r26, 0x80	; 128
    26a8:	8a 07       	cpc	r24, r26
    26aa:	b9 46       	sbci	r27, 0x69	; 105
    26ac:	30 f4       	brcc	.+12     	; 0x26ba <modf+0x58>
    26ae:	9b 01       	movw	r18, r22
    26b0:	ac 01       	movw	r20, r24
    26b2:	66 27       	eor	r22, r22
    26b4:	77 27       	eor	r23, r23
    26b6:	88 27       	eor	r24, r24
    26b8:	90 78       	andi	r25, 0x80	; 128
    26ba:	30 96       	adiw	r30, 0x00	; 0
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <modf+0x64>
    26be:	20 83       	st	Z, r18
    26c0:	31 83       	std	Z+1, r19	; 0x01
    26c2:	42 83       	std	Z+2, r20	; 0x02
    26c4:	53 83       	std	Z+3, r21	; 0x03
    26c6:	08 95       	ret

000026c8 <__mulsf3>:
    26c8:	0b d0       	rcall	.+22     	; 0x26e0 <__mulsf3x>
    26ca:	3f cf       	rjmp	.-386    	; 0x254a <__fp_round>
    26cc:	08 df       	rcall	.-496    	; 0x24de <__fp_pscA>
    26ce:	28 f0       	brcs	.+10     	; 0x26da <__mulsf3+0x12>
    26d0:	0d df       	rcall	.-486    	; 0x24ec <__fp_pscB>
    26d2:	18 f0       	brcs	.+6      	; 0x26da <__mulsf3+0x12>
    26d4:	95 23       	and	r25, r21
    26d6:	09 f0       	breq	.+2      	; 0x26da <__mulsf3+0x12>
    26d8:	d4 ce       	rjmp	.-600    	; 0x2482 <__fp_inf>
    26da:	d9 ce       	rjmp	.-590    	; 0x248e <__fp_nan>
    26dc:	11 24       	eor	r1, r1
    26de:	7a cf       	rjmp	.-268    	; 0x25d4 <__fp_szero>

000026e0 <__mulsf3x>:
    26e0:	56 df       	rcall	.-340    	; 0x258e <__fp_split3>
    26e2:	a0 f3       	brcs	.-24     	; 0x26cc <__mulsf3+0x4>

000026e4 <__mulsf3_pse>:
    26e4:	95 9f       	mul	r25, r21
    26e6:	d1 f3       	breq	.-12     	; 0x26dc <__mulsf3+0x14>
    26e8:	95 0f       	add	r25, r21
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	55 1f       	adc	r21, r21
    26ee:	62 9f       	mul	r22, r18
    26f0:	f0 01       	movw	r30, r0
    26f2:	72 9f       	mul	r23, r18
    26f4:	bb 27       	eor	r27, r27
    26f6:	f0 0d       	add	r31, r0
    26f8:	b1 1d       	adc	r27, r1
    26fa:	63 9f       	mul	r22, r19
    26fc:	aa 27       	eor	r26, r26
    26fe:	f0 0d       	add	r31, r0
    2700:	b1 1d       	adc	r27, r1
    2702:	aa 1f       	adc	r26, r26
    2704:	64 9f       	mul	r22, r20
    2706:	66 27       	eor	r22, r22
    2708:	b0 0d       	add	r27, r0
    270a:	a1 1d       	adc	r26, r1
    270c:	66 1f       	adc	r22, r22
    270e:	82 9f       	mul	r24, r18
    2710:	22 27       	eor	r18, r18
    2712:	b0 0d       	add	r27, r0
    2714:	a1 1d       	adc	r26, r1
    2716:	62 1f       	adc	r22, r18
    2718:	73 9f       	mul	r23, r19
    271a:	b0 0d       	add	r27, r0
    271c:	a1 1d       	adc	r26, r1
    271e:	62 1f       	adc	r22, r18
    2720:	83 9f       	mul	r24, r19
    2722:	a0 0d       	add	r26, r0
    2724:	61 1d       	adc	r22, r1
    2726:	22 1f       	adc	r18, r18
    2728:	74 9f       	mul	r23, r20
    272a:	33 27       	eor	r19, r19
    272c:	a0 0d       	add	r26, r0
    272e:	61 1d       	adc	r22, r1
    2730:	23 1f       	adc	r18, r19
    2732:	84 9f       	mul	r24, r20
    2734:	60 0d       	add	r22, r0
    2736:	21 1d       	adc	r18, r1
    2738:	82 2f       	mov	r24, r18
    273a:	76 2f       	mov	r23, r22
    273c:	6a 2f       	mov	r22, r26
    273e:	11 24       	eor	r1, r1
    2740:	9f 57       	subi	r25, 0x7F	; 127
    2742:	50 40       	sbci	r21, 0x00	; 0
    2744:	8a f0       	brmi	.+34     	; 0x2768 <__mulsf3_pse+0x84>
    2746:	e1 f0       	breq	.+56     	; 0x2780 <__mulsf3_pse+0x9c>
    2748:	88 23       	and	r24, r24
    274a:	4a f0       	brmi	.+18     	; 0x275e <__mulsf3_pse+0x7a>
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	bb 1f       	adc	r27, r27
    2752:	66 1f       	adc	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	91 50       	subi	r25, 0x01	; 1
    275a:	50 40       	sbci	r21, 0x00	; 0
    275c:	a9 f7       	brne	.-22     	; 0x2748 <__mulsf3_pse+0x64>
    275e:	9e 3f       	cpi	r25, 0xFE	; 254
    2760:	51 05       	cpc	r21, r1
    2762:	70 f0       	brcs	.+28     	; 0x2780 <__mulsf3_pse+0x9c>
    2764:	8e ce       	rjmp	.-740    	; 0x2482 <__fp_inf>
    2766:	36 cf       	rjmp	.-404    	; 0x25d4 <__fp_szero>
    2768:	5f 3f       	cpi	r21, 0xFF	; 255
    276a:	ec f3       	brlt	.-6      	; 0x2766 <__mulsf3_pse+0x82>
    276c:	98 3e       	cpi	r25, 0xE8	; 232
    276e:	dc f3       	brlt	.-10     	; 0x2766 <__mulsf3_pse+0x82>
    2770:	86 95       	lsr	r24
    2772:	77 95       	ror	r23
    2774:	67 95       	ror	r22
    2776:	b7 95       	ror	r27
    2778:	f7 95       	ror	r31
    277a:	e7 95       	ror	r30
    277c:	9f 5f       	subi	r25, 0xFF	; 255
    277e:	c1 f7       	brne	.-16     	; 0x2770 <__mulsf3_pse+0x8c>
    2780:	fe 2b       	or	r31, r30
    2782:	88 0f       	add	r24, r24
    2784:	91 1d       	adc	r25, r1
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	97 f9       	bld	r25, 7
    278c:	08 95       	ret

0000278e <sin>:
    278e:	9f 93       	push	r25
    2790:	b5 de       	rcall	.-662    	; 0x24fc <__fp_rempio2>
    2792:	0f 90       	pop	r0
    2794:	07 fc       	sbrc	r0, 7
    2796:	ee 5f       	subi	r30, 0xFE	; 254
    2798:	e9 ce       	rjmp	.-558    	; 0x256c <__fp_sinus>
    279a:	11 f4       	brne	.+4      	; 0x27a0 <sin+0x12>
    279c:	0e f4       	brtc	.+2      	; 0x27a0 <sin+0x12>
    279e:	77 ce       	rjmp	.-786    	; 0x248e <__fp_nan>
    27a0:	41 c0       	rjmp	.+130    	; 0x2824 <__fp_mpack>

000027a2 <sqrt>:
    27a2:	fd de       	rcall	.-518    	; 0x259e <__fp_splitA>
    27a4:	d0 f3       	brcs	.-12     	; 0x279a <sin+0xc>
    27a6:	99 23       	and	r25, r25
    27a8:	d9 f3       	breq	.-10     	; 0x27a0 <sin+0x12>
    27aa:	ce f3       	brts	.-14     	; 0x279e <sin+0x10>
    27ac:	9f 57       	subi	r25, 0x7F	; 127
    27ae:	55 0b       	sbc	r21, r21
    27b0:	87 ff       	sbrs	r24, 7
    27b2:	46 d0       	rcall	.+140    	; 0x2840 <__fp_norm2>
    27b4:	00 24       	eor	r0, r0
    27b6:	a0 e6       	ldi	r26, 0x60	; 96
    27b8:	40 ea       	ldi	r20, 0xA0	; 160
    27ba:	90 01       	movw	r18, r0
    27bc:	80 58       	subi	r24, 0x80	; 128
    27be:	56 95       	lsr	r21
    27c0:	97 95       	ror	r25
    27c2:	28 f4       	brcc	.+10     	; 0x27ce <sqrt+0x2c>
    27c4:	80 5c       	subi	r24, 0xC0	; 192
    27c6:	66 0f       	add	r22, r22
    27c8:	77 1f       	adc	r23, r23
    27ca:	88 1f       	adc	r24, r24
    27cc:	20 f0       	brcs	.+8      	; 0x27d6 <sqrt+0x34>
    27ce:	26 17       	cp	r18, r22
    27d0:	37 07       	cpc	r19, r23
    27d2:	48 07       	cpc	r20, r24
    27d4:	30 f4       	brcc	.+12     	; 0x27e2 <sqrt+0x40>
    27d6:	62 1b       	sub	r22, r18
    27d8:	73 0b       	sbc	r23, r19
    27da:	84 0b       	sbc	r24, r20
    27dc:	20 29       	or	r18, r0
    27de:	31 29       	or	r19, r1
    27e0:	4a 2b       	or	r20, r26
    27e2:	a6 95       	lsr	r26
    27e4:	17 94       	ror	r1
    27e6:	07 94       	ror	r0
    27e8:	20 25       	eor	r18, r0
    27ea:	31 25       	eor	r19, r1
    27ec:	4a 27       	eor	r20, r26
    27ee:	58 f7       	brcc	.-42     	; 0x27c6 <sqrt+0x24>
    27f0:	66 0f       	add	r22, r22
    27f2:	77 1f       	adc	r23, r23
    27f4:	88 1f       	adc	r24, r24
    27f6:	20 f0       	brcs	.+8      	; 0x2800 <sqrt+0x5e>
    27f8:	26 17       	cp	r18, r22
    27fa:	37 07       	cpc	r19, r23
    27fc:	48 07       	cpc	r20, r24
    27fe:	30 f4       	brcc	.+12     	; 0x280c <sqrt+0x6a>
    2800:	62 0b       	sbc	r22, r18
    2802:	73 0b       	sbc	r23, r19
    2804:	84 0b       	sbc	r24, r20
    2806:	20 0d       	add	r18, r0
    2808:	31 1d       	adc	r19, r1
    280a:	41 1d       	adc	r20, r1
    280c:	a0 95       	com	r26
    280e:	81 f7       	brne	.-32     	; 0x27f0 <sqrt+0x4e>
    2810:	b9 01       	movw	r22, r18
    2812:	84 2f       	mov	r24, r20
    2814:	91 58       	subi	r25, 0x81	; 129
    2816:	88 0f       	add	r24, r24
    2818:	96 95       	lsr	r25
    281a:	87 95       	ror	r24
    281c:	08 95       	ret

0000281e <square>:
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	52 cf       	rjmp	.-348    	; 0x26c8 <__mulsf3>

00002824 <__fp_mpack>:
    2824:	9f 3f       	cpi	r25, 0xFF	; 255
    2826:	31 f0       	breq	.+12     	; 0x2834 <__fp_mpack_finite+0xc>

00002828 <__fp_mpack_finite>:
    2828:	91 50       	subi	r25, 0x01	; 1
    282a:	20 f4       	brcc	.+8      	; 0x2834 <__fp_mpack_finite+0xc>
    282c:	87 95       	ror	r24
    282e:	77 95       	ror	r23
    2830:	67 95       	ror	r22
    2832:	b7 95       	ror	r27
    2834:	88 0f       	add	r24, r24
    2836:	91 1d       	adc	r25, r1
    2838:	96 95       	lsr	r25
    283a:	87 95       	ror	r24
    283c:	97 f9       	bld	r25, 7
    283e:	08 95       	ret

00002840 <__fp_norm2>:
    2840:	91 50       	subi	r25, 0x01	; 1
    2842:	50 40       	sbci	r21, 0x00	; 0
    2844:	66 0f       	add	r22, r22
    2846:	77 1f       	adc	r23, r23
    2848:	88 1f       	adc	r24, r24
    284a:	d2 f7       	brpl	.-12     	; 0x2840 <__fp_norm2>
    284c:	08 95       	ret

0000284e <__fp_powsodd>:
    284e:	9f 93       	push	r25
    2850:	8f 93       	push	r24
    2852:	7f 93       	push	r23
    2854:	6f 93       	push	r22
    2856:	ff 93       	push	r31
    2858:	ef 93       	push	r30
    285a:	9b 01       	movw	r18, r22
    285c:	ac 01       	movw	r20, r24
    285e:	34 df       	rcall	.-408    	; 0x26c8 <__mulsf3>
    2860:	ef 91       	pop	r30
    2862:	ff 91       	pop	r31
    2864:	17 de       	rcall	.-978    	; 0x2494 <__fp_powser>
    2866:	2f 91       	pop	r18
    2868:	3f 91       	pop	r19
    286a:	4f 91       	pop	r20
    286c:	5f 91       	pop	r21
    286e:	2c cf       	rjmp	.-424    	; 0x26c8 <__mulsf3>

00002870 <__divmodhi4>:
    2870:	97 fb       	bst	r25, 7
    2872:	07 2e       	mov	r0, r23
    2874:	16 f4       	brtc	.+4      	; 0x287a <__divmodhi4+0xa>
    2876:	00 94       	com	r0
    2878:	07 d0       	rcall	.+14     	; 0x2888 <__divmodhi4_neg1>
    287a:	77 fd       	sbrc	r23, 7
    287c:	09 d0       	rcall	.+18     	; 0x2890 <__divmodhi4_neg2>
    287e:	0e 94 4c 14 	call	0x2898	; 0x2898 <__udivmodhi4>
    2882:	07 fc       	sbrc	r0, 7
    2884:	05 d0       	rcall	.+10     	; 0x2890 <__divmodhi4_neg2>
    2886:	3e f4       	brtc	.+14     	; 0x2896 <__divmodhi4_exit>

00002888 <__divmodhi4_neg1>:
    2888:	90 95       	com	r25
    288a:	81 95       	neg	r24
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	08 95       	ret

00002890 <__divmodhi4_neg2>:
    2890:	70 95       	com	r23
    2892:	61 95       	neg	r22
    2894:	7f 4f       	sbci	r23, 0xFF	; 255

00002896 <__divmodhi4_exit>:
    2896:	08 95       	ret

00002898 <__udivmodhi4>:
    2898:	aa 1b       	sub	r26, r26
    289a:	bb 1b       	sub	r27, r27
    289c:	51 e1       	ldi	r21, 0x11	; 17
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <__udivmodhi4_ep>

000028a0 <__udivmodhi4_loop>:
    28a0:	aa 1f       	adc	r26, r26
    28a2:	bb 1f       	adc	r27, r27
    28a4:	a6 17       	cp	r26, r22
    28a6:	b7 07       	cpc	r27, r23
    28a8:	10 f0       	brcs	.+4      	; 0x28ae <__udivmodhi4_ep>
    28aa:	a6 1b       	sub	r26, r22
    28ac:	b7 0b       	sbc	r27, r23

000028ae <__udivmodhi4_ep>:
    28ae:	88 1f       	adc	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	5a 95       	dec	r21
    28b4:	a9 f7       	brne	.-22     	; 0x28a0 <__udivmodhi4_loop>
    28b6:	80 95       	com	r24
    28b8:	90 95       	com	r25
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	08 95       	ret

000028c0 <itoa>:
    28c0:	fb 01       	movw	r30, r22
    28c2:	9f 01       	movw	r18, r30
    28c4:	e8 94       	clt
    28c6:	42 30       	cpi	r20, 0x02	; 2
    28c8:	c4 f0       	brlt	.+48     	; 0x28fa <itoa+0x3a>
    28ca:	45 32       	cpi	r20, 0x25	; 37
    28cc:	b4 f4       	brge	.+44     	; 0x28fa <itoa+0x3a>
    28ce:	4a 30       	cpi	r20, 0x0A	; 10
    28d0:	29 f4       	brne	.+10     	; 0x28dc <itoa+0x1c>
    28d2:	97 fb       	bst	r25, 7
    28d4:	1e f4       	brtc	.+6      	; 0x28dc <itoa+0x1c>
    28d6:	90 95       	com	r25
    28d8:	81 95       	neg	r24
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	64 2f       	mov	r22, r20
    28de:	77 27       	eor	r23, r23
    28e0:	0e 94 4c 14 	call	0x2898	; 0x2898 <__udivmodhi4>
    28e4:	80 5d       	subi	r24, 0xD0	; 208
    28e6:	8a 33       	cpi	r24, 0x3A	; 58
    28e8:	0c f0       	brlt	.+2      	; 0x28ec <itoa+0x2c>
    28ea:	89 5d       	subi	r24, 0xD9	; 217
    28ec:	81 93       	st	Z+, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	a1 f7       	brne	.-24     	; 0x28dc <itoa+0x1c>
    28f4:	16 f4       	brtc	.+4      	; 0x28fa <itoa+0x3a>
    28f6:	5d e2       	ldi	r21, 0x2D	; 45
    28f8:	51 93       	st	Z+, r21
    28fa:	10 82       	st	Z, r1
    28fc:	c9 01       	movw	r24, r18
    28fe:	0c 94 81 14 	jmp	0x2902	; 0x2902 <strrev>

00002902 <strrev>:
    2902:	dc 01       	movw	r26, r24
    2904:	fc 01       	movw	r30, r24
    2906:	67 2f       	mov	r22, r23
    2908:	71 91       	ld	r23, Z+
    290a:	77 23       	and	r23, r23
    290c:	e1 f7       	brne	.-8      	; 0x2906 <strrev+0x4>
    290e:	32 97       	sbiw	r30, 0x02	; 2
    2910:	04 c0       	rjmp	.+8      	; 0x291a <strrev+0x18>
    2912:	7c 91       	ld	r23, X
    2914:	6d 93       	st	X+, r22
    2916:	70 83       	st	Z, r23
    2918:	62 91       	ld	r22, -Z
    291a:	ae 17       	cp	r26, r30
    291c:	bf 07       	cpc	r27, r31
    291e:	c8 f3       	brcs	.-14     	; 0x2912 <strrev+0x10>
    2920:	08 95       	ret

00002922 <_exit>:
    2922:	f8 94       	cli

00002924 <__stop_program>:
    2924:	ff cf       	rjmp	.-2      	; 0x2924 <__stop_program>
