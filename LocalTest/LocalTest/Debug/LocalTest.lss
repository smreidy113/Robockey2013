
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000023b8  0000244c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800110  00800110  0000245c  2**0
                  ALLOC
  3 .stab         00003540  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001008  00000000  00000000  0000599c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000069a4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e0  00000000  00000000  000069d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f85  00000000  00000000  00006bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007d0  00000000  00000000  00008b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cbd  00000000  00000000  00009308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005e0  00000000  00000000  00009fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000661  00000000  00000000  0000a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b35  00000000  00000000  0000ac09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  0000d73e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_10>
      2c:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e8 eb       	ldi	r30, 0xB8	; 184
     1be:	f3 e2       	ldi	r31, 0x23	; 35
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a0 31       	cpi	r26, 0x10	; 16
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a0 e1       	ldi	r26, 0x10	; 16
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a8 36       	cpi	r26, 0x68	; 104
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
     1e0:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <main>:
#define CLOCK 0
float data[3]={0.0};

int main(void){

	m_red(ON);
     1e8:	6e 9a       	sbi	0x0d, 6	; 13
     1ea:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     1ec:	6a 9a       	sbi	0x0d, 2	; 13
     1ee:	72 98       	cbi	0x0e, 2	; 14

	m_bus_init();
     1f0:	0e 94 31 01 	call	0x262	; 0x262 <m_bus_init>
	
	m_usb_init(); // connect usb
     1f4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <m_usb_init>
	while(!m_usb_isconnected()){};  //wait for connection
     1f8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <m_usb_isconnected>
     1fc:	88 23       	and	r24, r24
     1fe:	e1 f3       	breq	.-8      	; 0x1f8 <main+0x10>

	m_red(OFF);
     200:	6e 9a       	sbi	0x0d, 6	; 13
     202:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     204:	6a 9a       	sbi	0x0d, 2	; 13
     206:	72 9a       	sbi	0x0e, 2	; 14
		localize(data);
		m_usb_rx_flush();  				//clear buffer		

		if(rx_buffer == 1) {  			//computer wants ir data
			//write ir data as concatenated hex:  i.e. f0f1f4f5
			m_green(TOGGLE);
     208:	d4 e0       	ldi	r29, 0x04	; 4
	int i;
	while(1){
	
		

		while(!m_usb_rx_available());  	//wait for an indication from the computer
     20a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <m_usb_rx_available>
     20e:	88 23       	and	r24, r24
     210:	e1 f3       	breq	.-8      	; 0x20a <main+0x22>
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
     212:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <m_usb_rx_char>
     216:	c8 2f       	mov	r28, r24
		localize(data);
     218:	80 e1       	ldi	r24, 0x10	; 16
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 96 03 	call	0x72c	; 0x72c <localize>
		m_usb_rx_flush();  				//clear buffer		
     220:	0e 94 19 0b 	call	0x1632	; 0x1632 <m_usb_rx_flush>

		if(rx_buffer == 1) {  			//computer wants ir data
     224:	c1 30       	cpi	r28, 0x01	; 1
     226:	89 f7       	brne	.-30     	; 0x20a <main+0x22>
			//write ir data as concatenated hex:  i.e. f0f1f4f5
			m_green(TOGGLE);
     228:	6a 9a       	sbi	0x0d, 2	; 13
     22a:	8e b1       	in	r24, 0x0e	; 14
     22c:	8d 27       	eor	r24, r29
     22e:	8e b9       	out	0x0e, r24	; 14
			for (i = 0 ; i < 3 ; i++){
				//m_usb_tx_int((int) data[i]);
				m_usb_tx_int(1);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <m_usb_tx_int>
				m_usb_tx_char('\t');
     238:	89 e0       	ldi	r24, 0x09	; 9
     23a:	0e 94 2f 0b 	call	0x165e	; 0x165e <m_usb_tx_char>
		if(rx_buffer == 1) {  			//computer wants ir data
			//write ir data as concatenated hex:  i.e. f0f1f4f5
			m_green(TOGGLE);
			for (i = 0 ; i < 3 ; i++){
				//m_usb_tx_int((int) data[i]);
				m_usb_tx_int(1);
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <m_usb_tx_int>
				m_usb_tx_char('\t');
     246:	89 e0       	ldi	r24, 0x09	; 9
     248:	0e 94 2f 0b 	call	0x165e	; 0x165e <m_usb_tx_char>
		if(rx_buffer == 1) {  			//computer wants ir data
			//write ir data as concatenated hex:  i.e. f0f1f4f5
			m_green(TOGGLE);
			for (i = 0 ; i < 3 ; i++){
				//m_usb_tx_int((int) data[i]);
				m_usb_tx_int(1);
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <m_usb_tx_int>
				m_usb_tx_char('\t');
     254:	89 e0       	ldi	r24, 0x09	; 9
     256:	0e 94 2f 0b 	call	0x165e	; 0x165e <m_usb_tx_char>

			}
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     25a:	8a e0       	ldi	r24, 0x0A	; 10
     25c:	0e 94 2f 0b 	call	0x165e	; 0x165e <m_usb_tx_char>
     260:	d4 cf       	rjmp	.-88     	; 0x20a <main+0x22>

00000262 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     262:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     264:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     266:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     268:	8c e0       	ldi	r24, 0x0C	; 12
     26a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     26e:	e9 e6       	ldi	r30, 0x69	; 105
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	80 62       	ori	r24, 0x20	; 32
     276:	80 83       	st	Z, r24
     278:	80 81       	ld	r24, Z
     27a:	8f 7e       	andi	r24, 0xEF	; 239
     27c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     27e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     280:	78 94       	sei
     282:	08 95       	ret

00000284 <getData>:
float dist = 0;
float distmax = 0, distmin = 1023;
float dcenter = 0;
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	8c 01       	movw	r16, r24
     28e:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     290:	8c e4       	ldi	r24, 0x4C	; 76
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <m_wii_read>
	x[0] = blobs[0];
     298:	80 91 4c 01 	lds	r24, 0x014C
     29c:	90 91 4d 01 	lds	r25, 0x014D
     2a0:	f8 01       	movw	r30, r16
     2a2:	91 83       	std	Z+1, r25	; 0x01
     2a4:	80 83       	st	Z, r24
	x[1] = blobs[3];
     2a6:	80 91 52 01 	lds	r24, 0x0152
     2aa:	90 91 53 01 	lds	r25, 0x0153
     2ae:	93 83       	std	Z+3, r25	; 0x03
     2b0:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     2b2:	80 91 58 01 	lds	r24, 0x0158
     2b6:	90 91 59 01 	lds	r25, 0x0159
     2ba:	95 83       	std	Z+5, r25	; 0x05
     2bc:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     2be:	80 91 5e 01 	lds	r24, 0x015E
     2c2:	90 91 5f 01 	lds	r25, 0x015F
     2c6:	97 83       	std	Z+7, r25	; 0x07
     2c8:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     2ca:	80 91 4e 01 	lds	r24, 0x014E
     2ce:	90 91 4f 01 	lds	r25, 0x014F
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	88 83       	st	Y, r24
	y[1] = blobs[4];
     2d6:	80 91 54 01 	lds	r24, 0x0154
     2da:	90 91 55 01 	lds	r25, 0x0155
     2de:	9b 83       	std	Y+3, r25	; 0x03
     2e0:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     2e2:	80 91 5a 01 	lds	r24, 0x015A
     2e6:	90 91 5b 01 	lds	r25, 0x015B
     2ea:	9d 83       	std	Y+5, r25	; 0x05
     2ec:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     2ee:	80 91 60 01 	lds	r24, 0x0160
     2f2:	90 91 61 01 	lds	r25, 0x0161
     2f6:	9f 83       	std	Y+7, r25	; 0x07
     2f8:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <determine_blobs>:

unsigned char determine_blobs() {
     306:	2f 92       	push	r2
     308:	3f 92       	push	r3
     30a:	4f 92       	push	r4
     30c:	5f 92       	push	r5
     30e:	6f 92       	push	r6
     310:	7f 92       	push	r7
     312:	8f 92       	push	r8
     314:	9f 92       	push	r9
     316:	af 92       	push	r10
     318:	bf 92       	push	r11
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	66 97       	sbiw	r28, 0x16	; 22
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     33a:	0f 2e       	mov	r0, r31
     33c:	fa e3       	ldi	r31, 0x3A	; 58
     33e:	cf 2e       	mov	r12, r31
     340:	f1 e0       	ldi	r31, 0x01	; 1
     342:	df 2e       	mov	r13, r31
     344:	f0 2d       	mov	r31, r0
     346:	0c e3       	ldi	r16, 0x3C	; 60
     348:	11 e0       	ldi	r17, 0x01	; 1
     34a:	0f 2e       	mov	r0, r31
     34c:	fe e3       	ldi	r31, 0x3E	; 62
     34e:	ef 2e       	mov	r14, r31
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	ff 2e       	mov	r15, r31
     354:	f0 2d       	mov	r31, r0
} 

unsigned char determine_blobs() {
	int exit = 0;
	while (exit == 0) {
		getData(x, y);
     356:	60 e3       	ldi	r22, 0x30	; 48
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 42 01 	call	0x284	; 0x284 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     362:	80 91 38 01 	lds	r24, 0x0138
     366:	90 91 39 01 	lds	r25, 0x0139
     36a:	8f 3f       	cpi	r24, 0xFF	; 255
     36c:	93 40       	sbci	r25, 0x03	; 3
     36e:	98 f7       	brcc	.-26     	; 0x356 <determine_blobs+0x50>
     370:	d6 01       	movw	r26, r12
     372:	8d 91       	ld	r24, X+
     374:	9c 91       	ld	r25, X
     376:	8f 3f       	cpi	r24, 0xFF	; 255
     378:	93 40       	sbci	r25, 0x03	; 3
     37a:	68 f7       	brcc	.-38     	; 0x356 <determine_blobs+0x50>
     37c:	f8 01       	movw	r30, r16
     37e:	80 81       	ld	r24, Z
     380:	91 81       	ldd	r25, Z+1	; 0x01
     382:	8f 3f       	cpi	r24, 0xFF	; 255
     384:	93 40       	sbci	r25, 0x03	; 3
     386:	38 f7       	brcc	.-50     	; 0x356 <determine_blobs+0x50>
     388:	d7 01       	movw	r26, r14
     38a:	8d 91       	ld	r24, X+
     38c:	9c 91       	ld	r25, X
     38e:	8f 3f       	cpi	r24, 0xFF	; 255
     390:	93 40       	sbci	r25, 0x03	; 3
     392:	08 f7       	brcc	.-62     	; 0x356 <determine_blobs+0x50>
     394:	60 90 2c 01 	lds	r6, 0x012C
     398:	70 90 2d 01 	lds	r7, 0x012D
     39c:	80 90 2e 01 	lds	r8, 0x012E
     3a0:	90 90 2f 01 	lds	r9, 0x012F
     3a4:	d0 90 28 01 	lds	r13, 0x0128
     3a8:	c0 90 29 01 	lds	r12, 0x0129
     3ac:	40 90 2a 01 	lds	r4, 0x012A
     3b0:	50 90 2b 01 	lds	r5, 0x012B
     3b4:	e0 91 22 01 	lds	r30, 0x0122
     3b8:	ed 87       	std	Y+13, r30	; 0x0d
     3ba:	f0 91 23 01 	lds	r31, 0x0123
     3be:	fe 87       	std	Y+14, r31	; 0x0e
     3c0:	20 91 20 01 	lds	r18, 0x0120
     3c4:	2b 87       	std	Y+11, r18	; 0x0b
     3c6:	30 91 21 01 	lds	r19, 0x0121
     3ca:	3c 87       	std	Y+12, r19	; 0x0c
     3cc:	40 91 24 01 	lds	r20, 0x0124
     3d0:	49 8b       	std	Y+17, r20	; 0x11
     3d2:	50 91 25 01 	lds	r21, 0x0125
     3d6:	5a 8b       	std	Y+18, r21	; 0x12
     3d8:	60 91 26 01 	lds	r22, 0x0126
     3dc:	6b 8b       	std	Y+19, r22	; 0x13
     3de:	70 91 27 01 	lds	r23, 0x0127
     3e2:	7c 8b       	std	Y+20, r23	; 0x14
     3e4:	f0 90 00 01 	lds	r15, 0x0100
     3e8:	e0 90 01 01 	lds	r14, 0x0101
     3ec:	20 90 02 01 	lds	r2, 0x0102
     3f0:	30 90 03 01 	lds	r3, 0x0103
     3f4:	80 91 1e 01 	lds	r24, 0x011E
     3f8:	8f 87       	std	Y+15, r24	; 0x0f
     3fa:	90 91 1f 01 	lds	r25, 0x011F
     3fe:	98 8b       	std	Y+16, r25	; 0x10
     400:	a0 91 1c 01 	lds	r26, 0x011C
     404:	b0 91 1d 01 	lds	r27, 0x011D
     408:	ba 87       	std	Y+10, r27	; 0x0a
     40a:	a9 87       	std	Y+9, r26	; 0x09
     40c:	18 86       	std	Y+8, r1	; 0x08
     40e:	1f 82       	std	Y+7, r1	; 0x07
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	77 c0       	rjmp	.+238    	; 0x504 <determine_blobs+0x1fe>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
     416:	f8 01       	movw	r30, r16
     418:	81 91       	ld	r24, Z+
     41a:	91 91       	ld	r25, Z+
     41c:	8f 01       	movw	r16, r30
     41e:	2b 81       	ldd	r18, Y+3	; 0x03
     420:	3c 81       	ldd	r19, Y+4	; 0x04
     422:	28 1b       	sub	r18, r24
     424:	39 0b       	sbc	r19, r25
     426:	c9 01       	movw	r24, r18
     428:	a9 81       	ldd	r26, Y+1	; 0x01
     42a:	ba 81       	ldd	r27, Y+2	; 0x02
     42c:	2d 91       	ld	r18, X+
     42e:	3d 91       	ld	r19, X+
     430:	ba 83       	std	Y+2, r27	; 0x02
     432:	a9 83       	std	Y+1, r26	; 0x01
     434:	ed 81       	ldd	r30, Y+5	; 0x05
     436:	fe 81       	ldd	r31, Y+6	; 0x06
     438:	e2 1b       	sub	r30, r18
     43a:	f3 0b       	sbc	r31, r19
     43c:	ee 9f       	mul	r30, r30
     43e:	b0 01       	movw	r22, r0
     440:	ef 9f       	mul	r30, r31
     442:	70 0d       	add	r23, r0
     444:	70 0d       	add	r23, r0
     446:	11 24       	eor	r1, r1
     448:	88 9f       	mul	r24, r24
     44a:	90 01       	movw	r18, r0
     44c:	89 9f       	mul	r24, r25
     44e:	30 0d       	add	r19, r0
     450:	30 0d       	add	r19, r0
     452:	11 24       	eor	r1, r1
     454:	62 0f       	add	r22, r18
     456:	73 1f       	adc	r23, r19
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     460:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
     464:	66 2e       	mov	r6, r22
     466:	77 2e       	mov	r7, r23
     468:	88 2e       	mov	r8, r24
     46a:	99 2e       	mov	r9, r25
					if (dist > distmax) {
     46c:	2d 2d       	mov	r18, r13
     46e:	3c 2d       	mov	r19, r12
     470:	44 2d       	mov	r20, r4
     472:	55 2d       	mov	r21, r5
     474:	66 2d       	mov	r22, r6
     476:	77 2d       	mov	r23, r7
     478:	88 2d       	mov	r24, r8
     47a:	99 2d       	mov	r25, r9
     47c:	0e 94 90 10 	call	0x2120	; 0x2120 <__gesf2>
     480:	18 16       	cp	r1, r24
     482:	c4 f4       	brge	.+48     	; 0x4b4 <determine_blobs+0x1ae>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	5f e3       	ldi	r21, 0x3F	; 63
     48c:	66 2d       	mov	r22, r6
     48e:	77 2d       	mov	r23, r7
     490:	88 2d       	mov	r24, r8
     492:	99 2d       	mov	r25, r9
     494:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     498:	69 8b       	std	Y+17, r22	; 0x11
     49a:	7a 8b       	std	Y+18, r23	; 0x12
     49c:	8b 8b       	std	Y+19, r24	; 0x13
     49e:	9c 8b       	std	Y+20, r25	; 0x14
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     4a0:	fd 89       	ldd	r31, Y+21	; 0x15
     4a2:	fb 87       	std	Y+11, r31	; 0x0b
     4a4:	2e 89       	ldd	r18, Y+22	; 0x16
     4a6:	2c 87       	std	Y+12, r18	; 0x0c
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     4a8:	ad 86       	std	Y+13, r10	; 0x0d
     4aa:	be 86       	std	Y+14, r11	; 0x0e
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
     4ac:	d6 2c       	mov	r13, r6
     4ae:	c7 2c       	mov	r12, r7
     4b0:	48 2c       	mov	r4, r8
     4b2:	59 2c       	mov	r5, r9
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     4b4:	26 2d       	mov	r18, r6
     4b6:	37 2d       	mov	r19, r7
     4b8:	48 2d       	mov	r20, r8
     4ba:	59 2d       	mov	r21, r9
     4bc:	6f 2d       	mov	r22, r15
     4be:	7e 2d       	mov	r23, r14
     4c0:	82 2d       	mov	r24, r2
     4c2:	93 2d       	mov	r25, r3
     4c4:	0e 94 90 10 	call	0x2120	; 0x2120 <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	54 f4       	brge	.+20     	; 0x4e0 <determine_blobs+0x1da>
						distmin = dist;
						close1 = i;
						close2 = j;
     4cc:	4d 89       	ldd	r20, Y+21	; 0x15
     4ce:	5e 89       	ldd	r21, Y+22	; 0x16
     4d0:	5a 87       	std	Y+10, r21	; 0x0a
     4d2:	49 87       	std	Y+9, r20	; 0x09
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     4d4:	af 86       	std	Y+15, r10	; 0x0f
     4d6:	b8 8a       	std	Y+16, r11	; 0x10
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     4d8:	f6 2c       	mov	r15, r6
     4da:	e7 2c       	mov	r14, r7
     4dc:	28 2c       	mov	r2, r8
     4de:	39 2c       	mov	r3, r9
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     4e0:	6d 89       	ldd	r22, Y+21	; 0x15
     4e2:	7e 89       	ldd	r23, Y+22	; 0x16
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	7e 8b       	std	Y+22, r23	; 0x16
     4ea:	6d 8b       	std	Y+21, r22	; 0x15
     4ec:	64 30       	cpi	r22, 0x04	; 4
     4ee:	71 05       	cpc	r23, r1
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <determine_blobs+0x1ee>
     4f2:	91 cf       	rjmp	.-222    	; 0x416 <determine_blobs+0x110>
	int exit = 0;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     4f4:	8f 81       	ldd	r24, Y+7	; 0x07
     4f6:	98 85       	ldd	r25, Y+8	; 0x08
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	98 87       	std	Y+8, r25	; 0x08
     4fc:	8f 83       	std	Y+7, r24	; 0x07
     4fe:	84 30       	cpi	r24, 0x04	; 4
     500:	91 05       	cpc	r25, r1
     502:	e1 f0       	breq	.+56     	; 0x53c <determine_blobs+0x236>
				for (int j = i; j < 4; j++) {
     504:	84 30       	cpi	r24, 0x04	; 4
     506:	91 05       	cpc	r25, r1
     508:	ac f7       	brge	.-22     	; 0x4f4 <determine_blobs+0x1ee>
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
     50a:	fc 01       	movw	r30, r24
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	8f 01       	movw	r16, r30
     512:	08 5c       	subi	r16, 0xC8	; 200
     514:	1e 4f       	sbci	r17, 0xFE	; 254
     516:	d8 01       	movw	r26, r16
     518:	0d 90       	ld	r0, X+
     51a:	bc 91       	ld	r27, X
     51c:	a0 2d       	mov	r26, r0
     51e:	bc 83       	std	Y+4, r27	; 0x04
     520:	ab 83       	std	Y+3, r26	; 0x03
     522:	e0 5d       	subi	r30, 0xD0	; 208
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	20 81       	ld	r18, Z
     528:	31 81       	ldd	r19, Z+1	; 0x01
     52a:	3e 83       	std	Y+6, r19	; 0x06
     52c:	2d 83       	std	Y+5, r18	; 0x05
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     52e:	fa 83       	std	Y+2, r31	; 0x02
     530:	e9 83       	std	Y+1, r30	; 0x01
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					dist = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     532:	a8 2e       	mov	r10, r24
     534:	b9 2e       	mov	r11, r25
     536:	9e 8b       	std	Y+22, r25	; 0x16
     538:	8d 8b       	std	Y+21, r24	; 0x15
     53a:	6d cf       	rjmp	.-294    	; 0x416 <determine_blobs+0x110>
     53c:	86 2d       	mov	r24, r6
     53e:	97 2d       	mov	r25, r7
     540:	a8 2d       	mov	r26, r8
     542:	b9 2d       	mov	r27, r9
     544:	80 93 2c 01 	sts	0x012C, r24
     548:	90 93 2d 01 	sts	0x012D, r25
     54c:	a0 93 2e 01 	sts	0x012E, r26
     550:	b0 93 2f 01 	sts	0x012F, r27
     554:	8d 2d       	mov	r24, r13
     556:	9c 2d       	mov	r25, r12
     558:	a4 2d       	mov	r26, r4
     55a:	b5 2d       	mov	r27, r5
     55c:	80 93 28 01 	sts	0x0128, r24
     560:	90 93 29 01 	sts	0x0129, r25
     564:	a0 93 2a 01 	sts	0x012A, r26
     568:	b0 93 2b 01 	sts	0x012B, r27
     56c:	3d 85       	ldd	r19, Y+13	; 0x0d
     56e:	30 93 22 01 	sts	0x0122, r19
     572:	4e 85       	ldd	r20, Y+14	; 0x0e
     574:	40 93 23 01 	sts	0x0123, r20
     578:	5b 85       	ldd	r21, Y+11	; 0x0b
     57a:	50 93 20 01 	sts	0x0120, r21
     57e:	6c 85       	ldd	r22, Y+12	; 0x0c
     580:	60 93 21 01 	sts	0x0121, r22
     584:	59 89       	ldd	r21, Y+17	; 0x11
     586:	4a 89       	ldd	r20, Y+18	; 0x12
     588:	3b 89       	ldd	r19, Y+19	; 0x13
     58a:	2c 89       	ldd	r18, Y+20	; 0x14
     58c:	85 2f       	mov	r24, r21
     58e:	94 2f       	mov	r25, r20
     590:	a3 2f       	mov	r26, r19
     592:	b2 2f       	mov	r27, r18
     594:	80 93 24 01 	sts	0x0124, r24
     598:	90 93 25 01 	sts	0x0125, r25
     59c:	a0 93 26 01 	sts	0x0126, r26
     5a0:	b0 93 27 01 	sts	0x0127, r27
     5a4:	8f 2d       	mov	r24, r15
     5a6:	9e 2d       	mov	r25, r14
     5a8:	a2 2d       	mov	r26, r2
     5aa:	b3 2d       	mov	r27, r3
     5ac:	80 93 00 01 	sts	0x0100, r24
     5b0:	90 93 01 01 	sts	0x0101, r25
     5b4:	a0 93 02 01 	sts	0x0102, r26
     5b8:	b0 93 03 01 	sts	0x0103, r27
     5bc:	7f 85       	ldd	r23, Y+15	; 0x0f
     5be:	70 93 1e 01 	sts	0x011E, r23
     5c2:	88 89       	ldd	r24, Y+16	; 0x10
     5c4:	80 93 1f 01 	sts	0x011F, r24
     5c8:	99 85       	ldd	r25, Y+9	; 0x09
     5ca:	90 93 1c 01 	sts	0x011C, r25
     5ce:	aa 85       	ldd	r26, Y+10	; 0x0a
     5d0:	a0 93 1d 01 	sts	0x011D, r26
						close1 = i;
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     5d4:	80 91 22 01 	lds	r24, 0x0122
     5d8:	90 91 23 01 	lds	r25, 0x0123
     5dc:	20 91 1e 01 	lds	r18, 0x011E
     5e0:	30 91 1f 01 	lds	r19, 0x011F
     5e4:	82 17       	cp	r24, r18
     5e6:	93 07       	cpc	r25, r19
     5e8:	19 f5       	brne	.+70     	; 0x630 <determine_blobs+0x32a>
				top = far1;
     5ea:	90 93 4b 01 	sts	0x014B, r25
     5ee:	80 93 4a 01 	sts	0x014A, r24
				bottom = far2;
     5f2:	40 91 20 01 	lds	r20, 0x0120
     5f6:	50 91 21 01 	lds	r21, 0x0121
     5fa:	50 93 49 01 	sts	0x0149, r21
     5fe:	40 93 48 01 	sts	0x0148, r20
				right = close2;
     602:	20 91 1c 01 	lds	r18, 0x011C
     606:	30 91 1d 01 	lds	r19, 0x011D
     60a:	30 93 45 01 	sts	0x0145, r19
     60e:	20 93 44 01 	sts	0x0144, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 10 - top - bottom - right;
     612:	6a e0       	ldi	r22, 0x0A	; 10
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	fb 01       	movw	r30, r22
     618:	e8 1b       	sub	r30, r24
     61a:	f9 0b       	sbc	r31, r25
     61c:	cf 01       	movw	r24, r30
     61e:	84 1b       	sub	r24, r20
     620:	95 0b       	sbc	r25, r21
     622:	82 1b       	sub	r24, r18
     624:	93 0b       	sbc	r25, r19
     626:	90 93 47 01 	sts	0x0147, r25
     62a:	80 93 46 01 	sts	0x0146, r24
     62e:	64 c0       	rjmp	.+200    	; 0x6f8 <determine_blobs+0x3f2>
			}
			else if (far1 == close2) {
     630:	49 85       	ldd	r20, Y+9	; 0x09
     632:	5a 85       	ldd	r21, Y+10	; 0x0a
     634:	84 17       	cp	r24, r20
     636:	95 07       	cpc	r25, r21
     638:	f9 f4       	brne	.+62     	; 0x678 <determine_blobs+0x372>
				top = far1;
     63a:	90 93 4b 01 	sts	0x014B, r25
     63e:	80 93 4a 01 	sts	0x014A, r24
				bottom = far2;
     642:	40 91 20 01 	lds	r20, 0x0120
     646:	50 91 21 01 	lds	r21, 0x0121
     64a:	50 93 49 01 	sts	0x0149, r21
     64e:	40 93 48 01 	sts	0x0148, r20
				right = close1;
     652:	30 93 45 01 	sts	0x0145, r19
     656:	20 93 44 01 	sts	0x0144, r18
				left = 10 - top - bottom - right;
     65a:	6a e0       	ldi	r22, 0x0A	; 10
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	db 01       	movw	r26, r22
     660:	a8 1b       	sub	r26, r24
     662:	b9 0b       	sbc	r27, r25
     664:	cd 01       	movw	r24, r26
     666:	84 1b       	sub	r24, r20
     668:	95 0b       	sbc	r25, r21
     66a:	82 1b       	sub	r24, r18
     66c:	93 0b       	sbc	r25, r19
     66e:	90 93 47 01 	sts	0x0147, r25
     672:	80 93 46 01 	sts	0x0146, r24
     676:	40 c0       	rjmp	.+128    	; 0x6f8 <determine_blobs+0x3f2>
			}
			else if (far2 == close1) {
     678:	40 91 20 01 	lds	r20, 0x0120
     67c:	50 91 21 01 	lds	r21, 0x0121
     680:	24 17       	cp	r18, r20
     682:	35 07       	cpc	r19, r21
     684:	f1 f4       	brne	.+60     	; 0x6c2 <determine_blobs+0x3bc>
				top = far2;
     686:	30 93 4b 01 	sts	0x014B, r19
     68a:	20 93 4a 01 	sts	0x014A, r18
				bottom = far1;
     68e:	90 93 49 01 	sts	0x0149, r25
     692:	80 93 48 01 	sts	0x0148, r24
				right = close2;
     696:	e9 85       	ldd	r30, Y+9	; 0x09
     698:	fa 85       	ldd	r31, Y+10	; 0x0a
     69a:	f0 93 45 01 	sts	0x0145, r31
     69e:	e0 93 44 01 	sts	0x0144, r30
				left = 10 - top - bottom - right;
     6a2:	4a e0       	ldi	r20, 0x0A	; 10
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	ba 01       	movw	r22, r20
     6a8:	62 1b       	sub	r22, r18
     6aa:	73 0b       	sbc	r23, r19
     6ac:	db 01       	movw	r26, r22
     6ae:	a8 1b       	sub	r26, r24
     6b0:	b9 0b       	sbc	r27, r25
     6b2:	cd 01       	movw	r24, r26
     6b4:	8e 1b       	sub	r24, r30
     6b6:	9f 0b       	sbc	r25, r31
     6b8:	90 93 47 01 	sts	0x0147, r25
     6bc:	80 93 46 01 	sts	0x0146, r24
     6c0:	1b c0       	rjmp	.+54     	; 0x6f8 <determine_blobs+0x3f2>
			}
			else {
				top = far2;
     6c2:	50 93 4b 01 	sts	0x014B, r21
     6c6:	40 93 4a 01 	sts	0x014A, r20
				bottom = far1;
     6ca:	90 93 49 01 	sts	0x0149, r25
     6ce:	80 93 48 01 	sts	0x0148, r24
				right = close1;
     6d2:	30 93 45 01 	sts	0x0145, r19
     6d6:	20 93 44 01 	sts	0x0144, r18
				left = 10 - top - bottom - right;
     6da:	6a e0       	ldi	r22, 0x0A	; 10
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	fb 01       	movw	r30, r22
     6e0:	e4 1b       	sub	r30, r20
     6e2:	f5 0b       	sbc	r31, r21
     6e4:	bf 01       	movw	r22, r30
     6e6:	68 1b       	sub	r22, r24
     6e8:	79 0b       	sbc	r23, r25
     6ea:	cb 01       	movw	r24, r22
     6ec:	82 1b       	sub	r24, r18
     6ee:	93 0b       	sbc	r25, r19
     6f0:	90 93 47 01 	sts	0x0147, r25
     6f4:	80 93 46 01 	sts	0x0146, r24
			}
		}
	}
	return 1;
}
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	66 96       	adiw	r28, 0x16	; 22
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret

0000072c <localize>:
	determine_blobs();
	
	return 1;
}

unsigned char localize (float* data) {
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	6e 97       	sbiw	r28, 0x1e	; 30
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	9e 87       	std	Y+14, r25	; 0x0e
     762:	8d 87       	std	Y+13, r24	; 0x0d
	m_wii_read(blobs);
     764:	8c e4       	ldi	r24, 0x4C	; 76
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <m_wii_read>
	determine_blobs();
     76c:	0e 94 83 01 	call	0x306	; 0x306 <determine_blobs>
	float posx = 0;
	float posy = 0;
	float r = 0;
	float phi = 0, beta = 0, angle = 0;
	if (x[top] < 1023 && x[bottom] < 1023) {
     770:	e0 90 4a 01 	lds	r14, 0x014A
     774:	f0 90 4b 01 	lds	r15, 0x014B
     778:	f7 01       	movw	r30, r14
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	e8 5c       	subi	r30, 0xC8	; 200
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	60 80       	ld	r6, Z
     784:	71 80       	ldd	r7, Z+1	; 0x01
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	62 16       	cp	r6, r18
     78a:	23 e0       	ldi	r18, 0x03	; 3
     78c:	72 06       	cpc	r7, r18
     78e:	08 f0       	brcs	.+2      	; 0x792 <localize+0x66>
     790:	02 c4       	rjmp	.+2052   	; 0xf96 <__stack+0x497>
     792:	a0 90 48 01 	lds	r10, 0x0148
     796:	b0 90 49 01 	lds	r11, 0x0149
     79a:	f5 01       	movw	r30, r10
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e8 5c       	subi	r30, 0xC8	; 200
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	c0 80       	ld	r12, Z
     7a6:	d1 80       	ldd	r13, Z+1	; 0x01
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	c3 16       	cp	r12, r19
     7ac:	33 e0       	ldi	r19, 0x03	; 3
     7ae:	d3 06       	cpc	r13, r19
     7b0:	08 f0       	brcs	.+2      	; 0x7b4 <localize+0x88>
     7b2:	02 c1       	rjmp	.+516    	; 0x9b8 <localize+0x28c>
		//calculate and store pixel-space position and orientation
		posx = ((128.0/1023.0)*(x[top]+x[bottom])/2-rcenterx);
     7b4:	60 91 06 01 	lds	r22, 0x0106
     7b8:	70 91 07 01 	lds	r23, 0x0107
     7bc:	88 27       	eor	r24, r24
     7be:	77 fd       	sbrc	r23, 7
     7c0:	80 95       	com	r24
     7c2:	98 2f       	mov	r25, r24
     7c4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     7c8:	1b 01       	movw	r2, r22
     7ca:	2c 01       	movw	r4, r24
     7cc:	b6 01       	movw	r22, r12
     7ce:	66 0d       	add	r22, r6
     7d0:	77 1d       	adc	r23, r7
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     7da:	28 e0       	ldi	r18, 0x08	; 8
     7dc:	30 e2       	ldi	r19, 0x20	; 32
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	5e e3       	ldi	r21, 0x3E	; 62
     7e2:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     7f2:	a2 01       	movw	r20, r4
     7f4:	91 01       	movw	r18, r2
     7f6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     7fa:	6c 8b       	std	Y+20, r22	; 0x14
     7fc:	78 8f       	std	Y+24, r23	; 0x18
     7fe:	18 2f       	mov	r17, r24
     800:	09 2f       	mov	r16, r25
		posy = ((96.0/1023.0)*(y[top]+y[bottom])/2-rcentery);
     802:	f7 01       	movw	r30, r14
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	e0 5d       	subi	r30, 0xD0	; 208
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	9e 83       	std	Y+6, r25	; 0x06
     812:	8d 83       	std	Y+5, r24	; 0x05
     814:	f5 01       	movw	r30, r10
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	e0 5d       	subi	r30, 0xD0	; 208
     81c:	fe 4f       	sbci	r31, 0xFE	; 254
     81e:	e0 80       	ld	r14, Z
     820:	f1 80       	ldd	r15, Z+1	; 0x01
     822:	bc 01       	movw	r22, r24
     824:	6e 0d       	add	r22, r14
     826:	7f 1d       	adc	r23, r15
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     830:	2c e0       	ldi	r18, 0x0C	; 12
     832:	30 e3       	ldi	r19, 0x30	; 48
     834:	40 ec       	ldi	r20, 0xC0	; 192
     836:	5d e3       	ldi	r21, 0x3D	; 61
     838:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	5f e3       	ldi	r21, 0x3F	; 63
     844:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     848:	4b 01       	movw	r8, r22
     84a:	5c 01       	movw	r10, r24
     84c:	60 91 04 01 	lds	r22, 0x0104
     850:	70 91 05 01 	lds	r23, 0x0105
     854:	88 27       	eor	r24, r24
     856:	77 fd       	sbrc	r23, 7
     858:	80 95       	com	r24
     85a:	98 2f       	mov	r25, r24
     85c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	79 87       	std	Y+9, r23	; 0x09
     870:	8f 87       	std	Y+15, r24	; 0x0f
     872:	9b 8b       	std	Y+19, r25	; 0x13
		
		//calculate and store angle
		angle = atan2(x[top]-x[bottom],y[top]-y[bottom]);
     874:	6d 81       	ldd	r22, Y+5	; 0x05
     876:	7e 81       	ldd	r23, Y+6	; 0x06
     878:	6e 19       	sub	r22, r14
     87a:	7f 09       	sbc	r23, r15
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     884:	4b 01       	movw	r8, r22
     886:	5c 01       	movw	r10, r24
     888:	b3 01       	movw	r22, r6
     88a:	6c 19       	sub	r22, r12
     88c:	7d 09       	sbc	r23, r13
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     896:	a5 01       	movw	r20, r10
     898:	94 01       	movw	r18, r8
     89a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
     89e:	6b 01       	movw	r12, r22
     8a0:	7c 01       	movw	r14, r24
		phi = -1 * atan2(posy, posx);
     8a2:	7c 89       	ldd	r23, Y+20	; 0x14
     8a4:	68 8d       	ldd	r22, Y+24	; 0x18
     8a6:	27 2f       	mov	r18, r23
     8a8:	36 2f       	mov	r19, r22
     8aa:	41 2f       	mov	r20, r17
     8ac:	50 2f       	mov	r21, r16
     8ae:	b9 81       	ldd	r27, Y+1	; 0x01
     8b0:	a9 85       	ldd	r26, Y+9	; 0x09
     8b2:	bf 84       	ldd	r11, Y+15	; 0x0f
     8b4:	ab 88       	ldd	r10, Y+19	; 0x13
     8b6:	6b 2f       	mov	r22, r27
     8b8:	7a 2f       	mov	r23, r26
     8ba:	8b 2d       	mov	r24, r11
     8bc:	9a 2d       	mov	r25, r10
     8be:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
     8c2:	4b 01       	movw	r8, r22
     8c4:	5c 01       	movw	r10, r24
		
		r = sqrt((posx*posx + posy*posy));
     8c6:	7c 89       	ldd	r23, Y+20	; 0x14
     8c8:	68 8d       	ldd	r22, Y+24	; 0x18
     8ca:	27 2f       	mov	r18, r23
     8cc:	36 2f       	mov	r19, r22
     8ce:	41 2f       	mov	r20, r17
     8d0:	50 2f       	mov	r21, r16
     8d2:	67 2f       	mov	r22, r23
     8d4:	73 2f       	mov	r23, r19
     8d6:	81 2f       	mov	r24, r17
     8d8:	90 2f       	mov	r25, r16
     8da:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     8de:	6d 83       	std	Y+5, r22	; 0x05
     8e0:	7e 83       	std	Y+6, r23	; 0x06
     8e2:	8f 83       	std	Y+7, r24	; 0x07
     8e4:	98 87       	std	Y+8, r25	; 0x08
     8e6:	79 81       	ldd	r23, Y+1	; 0x01
     8e8:	69 85       	ldd	r22, Y+9	; 0x09
     8ea:	9f 85       	ldd	r25, Y+15	; 0x0f
     8ec:	8b 89       	ldd	r24, Y+19	; 0x13
     8ee:	27 2f       	mov	r18, r23
     8f0:	36 2f       	mov	r19, r22
     8f2:	49 2f       	mov	r20, r25
     8f4:	58 2f       	mov	r21, r24
     8f6:	67 2f       	mov	r22, r23
     8f8:	73 2f       	mov	r23, r19
     8fa:	89 2f       	mov	r24, r25
     8fc:	95 2f       	mov	r25, r21
     8fe:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	6d 81       	ldd	r22, Y+5	; 0x05
     908:	7e 81       	ldd	r23, Y+6	; 0x06
     90a:	8f 81       	ldd	r24, Y+7	; 0x07
     90c:	98 85       	ldd	r25, Y+8	; 0x08
     90e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     912:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
		
		data[0] = rcenterx - r * cos(angle - phi);
     91e:	a5 01       	movw	r20, r10
     920:	94 01       	movw	r18, r8
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     92a:	06 2f       	mov	r16, r22
     92c:	17 2f       	mov	r17, r23
     92e:	a8 2e       	mov	r10, r24
     930:	b9 2e       	mov	r11, r25
     932:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
     936:	29 81       	ldd	r18, Y+1	; 0x01
     938:	3a 81       	ldd	r19, Y+2	; 0x02
     93a:	4b 81       	ldd	r20, Y+3	; 0x03
     93c:	5c 81       	ldd	r21, Y+4	; 0x04
     93e:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c2 01       	movw	r24, r4
     948:	b1 01       	movw	r22, r2
     94a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     94e:	ad 85       	ldd	r26, Y+13	; 0x0d
     950:	be 85       	ldd	r27, Y+14	; 0x0e
     952:	6d 93       	st	X+, r22
     954:	7d 93       	st	X+, r23
     956:	8d 93       	st	X+, r24
     958:	9c 93       	st	X, r25
     95a:	13 97       	sbiw	r26, 0x03	; 3
		data[1] = rcentery + r * sin(angle - phi);
     95c:	60 2f       	mov	r22, r16
     95e:	71 2f       	mov	r23, r17
     960:	8a 2d       	mov	r24, r10
     962:	9b 2d       	mov	r25, r11
     964:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
     968:	2b 01       	movw	r4, r22
     96a:	3c 01       	movw	r6, r24
     96c:	60 91 04 01 	lds	r22, 0x0104
     970:	70 91 05 01 	lds	r23, 0x0105
     974:	88 27       	eor	r24, r24
     976:	77 fd       	sbrc	r23, 7
     978:	80 95       	com	r24
     97a:	98 2f       	mov	r25, r24
     97c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     980:	4b 01       	movw	r8, r22
     982:	5c 01       	movw	r10, r24
     984:	29 81       	ldd	r18, Y+1	; 0x01
     986:	3a 81       	ldd	r19, Y+2	; 0x02
     988:	4b 81       	ldd	r20, Y+3	; 0x03
     98a:	5c 81       	ldd	r21, Y+4	; 0x04
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     994:	9b 01       	movw	r18, r22
     996:	ac 01       	movw	r20, r24
     998:	c5 01       	movw	r24, r10
     99a:	b4 01       	movw	r22, r8
     99c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     9a0:	ed 85       	ldd	r30, Y+13	; 0x0d
     9a2:	fe 85       	ldd	r31, Y+14	; 0x0e
     9a4:	64 83       	std	Z+4, r22	; 0x04
     9a6:	75 83       	std	Z+5, r23	; 0x05
     9a8:	86 83       	std	Z+6, r24	; 0x06
     9aa:	97 83       	std	Z+7, r25	; 0x07
		data[2] = angle;
     9ac:	c0 86       	std	Z+8, r12	; 0x08
     9ae:	d1 86       	std	Z+9, r13	; 0x09
     9b0:	e2 86       	std	Z+10, r14	; 0x0a
     9b2:	f3 86       	std	Z+11, r15	; 0x0b
		return 1;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	db c5       	rjmp	.+2998   	; 0x156e <__stack+0xa6f>
	}
	
	else if (x[top] < 1023 && x[left] < 1023) {
     9b8:	80 91 46 01 	lds	r24, 0x0146
     9bc:	90 91 47 01 	lds	r25, 0x0147
     9c0:	fc 01       	movw	r30, r24
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	e8 5c       	subi	r30, 0xC8	; 200
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	00 81       	ld	r16, Z
     9cc:	11 81       	ldd	r17, Z+1	; 0x01
     9ce:	0f 3f       	cpi	r16, 0xFF	; 255
     9d0:	b3 e0       	ldi	r27, 0x03	; 3
     9d2:	1b 07       	cpc	r17, r27
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <localize+0x2ac>
     9d6:	63 c1       	rjmp	.+710    	; 0xc9e <__stack+0x19f>
		beta = atan2(x[top]-x[left], y[top]-y[left]);
     9d8:	f7 01       	movw	r30, r14
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	e0 5d       	subi	r30, 0xD0	; 208
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	20 80       	ld	r2, Z
     9e4:	31 80       	ldd	r3, Z+1	; 0x01
     9e6:	fc 01       	movw	r30, r24
     9e8:	ee 0f       	add	r30, r30
     9ea:	ff 1f       	adc	r31, r31
     9ec:	e0 5d       	subi	r30, 0xD0	; 208
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	b1 01       	movw	r22, r2
     9f6:	68 1b       	sub	r22, r24
     9f8:	79 0b       	sbc	r23, r25
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     a02:	6b 01       	movw	r12, r22
     a04:	7c 01       	movw	r14, r24
     a06:	b3 01       	movw	r22, r6
     a08:	60 1b       	sub	r22, r16
     a0a:	71 0b       	sbc	r23, r17
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     a14:	a7 01       	movw	r20, r14
     a16:	96 01       	movw	r18, r12
     a18:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
     a1c:	4b 01       	movw	r8, r22
     a1e:	5c 01       	movw	r10, r24
		
		//this theta is constant, considering defining it as such
		//to save calculation time
		theta=atan2(14.5-2.483,10.563);
     a20:	8d e1       	ldi	r24, 0x1D	; 29
     a22:	96 e8       	ldi	r25, 0x86	; 134
     a24:	a9 e5       	ldi	r26, 0x59	; 89
     a26:	bf e3       	ldi	r27, 0x3F	; 63
     a28:	80 93 40 01 	sts	0x0140, r24
     a2c:	90 93 41 01 	sts	0x0141, r25
     a30:	a0 93 42 01 	sts	0x0142, r26
     a34:	b0 93 43 01 	sts	0x0143, r27
		posx = rcenterx - (128.0/1023.0)*(x[top]-dcenter*sin(theta-beta));
     a38:	60 91 06 01 	lds	r22, 0x0106
     a3c:	70 91 07 01 	lds	r23, 0x0107
     a40:	88 27       	eor	r24, r24
     a42:	77 fd       	sbrc	r23, 7
     a44:	80 95       	com	r24
     a46:	98 2f       	mov	r25, r24
     a48:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     a4c:	6b 01       	movw	r12, r22
     a4e:	7c 01       	movw	r14, r24
     a50:	a5 01       	movw	r20, r10
     a52:	94 01       	movw	r18, r8
     a54:	6d e1       	ldi	r22, 0x1D	; 29
     a56:	76 e8       	ldi	r23, 0x86	; 134
     a58:	89 e5       	ldi	r24, 0x59	; 89
     a5a:	9f e3       	ldi	r25, 0x3F	; 63
     a5c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     a60:	6c 8b       	std	Y+20, r22	; 0x14
     a62:	78 8f       	std	Y+24, r23	; 0x18
     a64:	18 2f       	mov	r17, r24
     a66:	09 2f       	mov	r16, r25
     a68:	81 2f       	mov	r24, r17
     a6a:	90 2f       	mov	r25, r16
     a6c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
     a70:	69 83       	std	Y+1, r22	; 0x01
     a72:	7a 83       	std	Y+2, r23	; 0x02
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	80 91 24 01 	lds	r24, 0x0124
     a7c:	90 91 25 01 	lds	r25, 0x0125
     a80:	a0 91 26 01 	lds	r26, 0x0126
     a84:	b0 91 27 01 	lds	r27, 0x0127
     a88:	8d 83       	std	Y+5, r24	; 0x05
     a8a:	9e 83       	std	Y+6, r25	; 0x06
     a8c:	af 83       	std	Y+7, r26	; 0x07
     a8e:	b8 87       	std	Y+8, r27	; 0x08
     a90:	b3 01       	movw	r22, r6
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     a9a:	2b 01       	movw	r4, r22
     a9c:	3c 01       	movw	r6, r24
     a9e:	2d 81       	ldd	r18, Y+5	; 0x05
     aa0:	3e 81       	ldd	r19, Y+6	; 0x06
     aa2:	4f 81       	ldd	r20, Y+7	; 0x07
     aa4:	58 85       	ldd	r21, Y+8	; 0x08
     aa6:	69 81       	ldd	r22, Y+1	; 0x01
     aa8:	7a 81       	ldd	r23, Y+2	; 0x02
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	c3 01       	movw	r24, r6
     ab8:	b2 01       	movw	r22, r4
     aba:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     abe:	28 e0       	ldi	r18, 0x08	; 8
     ac0:	30 e2       	ldi	r19, 0x20	; 32
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	5e e3       	ldi	r21, 0x3E	; 62
     ac6:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     ad6:	69 83       	std	Y+1, r22	; 0x01
     ad8:	79 87       	std	Y+9, r23	; 0x09
     ada:	8f 87       	std	Y+15, r24	; 0x0f
     adc:	9b 8b       	std	Y+19, r25	; 0x13
		posy = rcentery - (96.0/1023.0)*(y[top]+0.5*dcenter*cos(theta-beta));
     ade:	5c 89       	ldd	r21, Y+20	; 0x14
     ae0:	48 8d       	ldd	r20, Y+24	; 0x18
     ae2:	65 2f       	mov	r22, r21
     ae4:	74 2f       	mov	r23, r20
     ae6:	81 2f       	mov	r24, r17
     ae8:	90 2f       	mov	r25, r16
     aea:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
     aee:	6c 8b       	std	Y+20, r22	; 0x14
     af0:	7d 8b       	std	Y+21, r23	; 0x15
     af2:	8e 8b       	std	Y+22, r24	; 0x16
     af4:	9f 8b       	std	Y+23, r25	; 0x17
     af6:	60 91 04 01 	lds	r22, 0x0104
     afa:	70 91 05 01 	lds	r23, 0x0105
     afe:	88 27       	eor	r24, r24
     b00:	77 fd       	sbrc	r23, 7
     b02:	80 95       	com	r24
     b04:	98 2f       	mov	r25, r24
     b06:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     b0a:	2b 01       	movw	r4, r22
     b0c:	3c 01       	movw	r6, r24
     b0e:	b1 01       	movw	r22, r2
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     b18:	68 8f       	std	Y+24, r22	; 0x18
     b1a:	79 8f       	std	Y+25, r23	; 0x19
     b1c:	8a 8f       	std	Y+26, r24	; 0x1a
     b1e:	9b 8f       	std	Y+27, r25	; 0x1b
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	5f e3       	ldi	r21, 0x3F	; 63
     b28:	6d 81       	ldd	r22, Y+5	; 0x05
     b2a:	7e 81       	ldd	r23, Y+6	; 0x06
     b2c:	8f 81       	ldd	r24, Y+7	; 0x07
     b2e:	98 85       	ldd	r25, Y+8	; 0x08
     b30:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     b34:	2c 89       	ldd	r18, Y+20	; 0x14
     b36:	3d 89       	ldd	r19, Y+21	; 0x15
     b38:	4e 89       	ldd	r20, Y+22	; 0x16
     b3a:	5f 89       	ldd	r21, Y+23	; 0x17
     b3c:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	68 8d       	ldd	r22, Y+24	; 0x18
     b46:	79 8d       	ldd	r23, Y+25	; 0x19
     b48:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b4c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     b50:	2c e0       	ldi	r18, 0x0C	; 12
     b52:	30 e3       	ldi	r19, 0x30	; 48
     b54:	40 ec       	ldi	r20, 0xC0	; 192
     b56:	5d e3       	ldi	r21, 0x3D	; 61
     b58:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     b68:	06 2f       	mov	r16, r22
     b6a:	17 2f       	mov	r17, r23
     b6c:	8c 8f       	std	Y+28, r24	; 0x1c
     b6e:	98 8f       	std	Y+24, r25	; 0x18
		
		angle = theta + beta;
     b70:	2d e1       	ldi	r18, 0x1D	; 29
     b72:	36 e8       	ldi	r19, 0x86	; 134
     b74:	49 e5       	ldi	r20, 0x59	; 89
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	c5 01       	movw	r24, r10
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     b80:	26 2e       	mov	r2, r22
     b82:	37 2e       	mov	r3, r23
     b84:	8d 83       	std	Y+5, r24	; 0x05
     b86:	9c 8b       	std	Y+20, r25	; 0x14
		phi = -1 * atan2(posy, posx);
     b88:	79 81       	ldd	r23, Y+1	; 0x01
     b8a:	69 85       	ldd	r22, Y+9	; 0x09
     b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b8e:	8b 89       	ldd	r24, Y+19	; 0x13
     b90:	27 2f       	mov	r18, r23
     b92:	36 2f       	mov	r19, r22
     b94:	49 2f       	mov	r20, r25
     b96:	58 2f       	mov	r21, r24
     b98:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b9a:	e8 8d       	ldd	r30, Y+24	; 0x18
     b9c:	60 2f       	mov	r22, r16
     b9e:	71 2f       	mov	r23, r17
     ba0:	8f 2f       	mov	r24, r31
     ba2:	9e 2f       	mov	r25, r30
     ba4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
     ba8:	4b 01       	movw	r8, r22
     baa:	5c 01       	movw	r10, r24
		
		r = sqrt((posx*posx)+(posy*posy));
     bac:	79 81       	ldd	r23, Y+1	; 0x01
     bae:	69 85       	ldd	r22, Y+9	; 0x09
     bb0:	9f 85       	ldd	r25, Y+15	; 0x0f
     bb2:	8b 89       	ldd	r24, Y+19	; 0x13
     bb4:	27 2f       	mov	r18, r23
     bb6:	36 2f       	mov	r19, r22
     bb8:	49 2f       	mov	r20, r25
     bba:	58 2f       	mov	r21, r24
     bbc:	67 2f       	mov	r22, r23
     bbe:	73 2f       	mov	r23, r19
     bc0:	89 2f       	mov	r24, r25
     bc2:	95 2f       	mov	r25, r21
     bc4:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     bc8:	2b 01       	movw	r4, r22
     bca:	3c 01       	movw	r6, r24
     bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bce:	88 8d       	ldd	r24, Y+24	; 0x18
     bd0:	20 2f       	mov	r18, r16
     bd2:	31 2f       	mov	r19, r17
     bd4:	49 2f       	mov	r20, r25
     bd6:	58 2f       	mov	r21, r24
     bd8:	60 2f       	mov	r22, r16
     bda:	71 2f       	mov	r23, r17
     bdc:	89 2f       	mov	r24, r25
     bde:	95 2f       	mov	r25, r21
     be0:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	c3 01       	movw	r24, r6
     bea:	b2 01       	movw	r22, r4
     bec:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     bf0:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
     bf4:	2b 01       	movw	r4, r22
     bf6:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * cos(angle-phi);
     bf8:	a5 01       	movw	r20, r10
     bfa:	94 01       	movw	r18, r8
     bfc:	ed 81       	ldd	r30, Y+5	; 0x05
     bfe:	1c 89       	ldd	r17, Y+20	; 0x14
     c00:	62 2d       	mov	r22, r2
     c02:	73 2d       	mov	r23, r3
     c04:	8e 2f       	mov	r24, r30
     c06:	91 2f       	mov	r25, r17
     c08:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     c0c:	06 2f       	mov	r16, r22
     c0e:	17 2f       	mov	r17, r23
     c10:	a8 2e       	mov	r10, r24
     c12:	b9 2e       	mov	r11, r25
     c14:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
     c18:	a3 01       	movw	r20, r6
     c1a:	92 01       	movw	r18, r4
     c1c:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	c7 01       	movw	r24, r14
     c26:	b6 01       	movw	r22, r12
     c28:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     c2c:	ad 85       	ldd	r26, Y+13	; 0x0d
     c2e:	be 85       	ldd	r27, Y+14	; 0x0e
     c30:	6d 93       	st	X+, r22
     c32:	7d 93       	st	X+, r23
     c34:	8d 93       	st	X+, r24
     c36:	9c 93       	st	X, r25
     c38:	13 97       	sbiw	r26, 0x03	; 3
		data[1] = rcentery - r * sin(angle-phi);
     c3a:	60 2f       	mov	r22, r16
     c3c:	71 2f       	mov	r23, r17
     c3e:	8a 2d       	mov	r24, r10
     c40:	9b 2d       	mov	r25, r11
     c42:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
     c46:	4b 01       	movw	r8, r22
     c48:	5c 01       	movw	r10, r24
     c4a:	60 91 04 01 	lds	r22, 0x0104
     c4e:	70 91 05 01 	lds	r23, 0x0105
     c52:	88 27       	eor	r24, r24
     c54:	77 fd       	sbrc	r23, 7
     c56:	80 95       	com	r24
     c58:	98 2f       	mov	r25, r24
     c5a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     c5e:	6b 01       	movw	r12, r22
     c60:	7c 01       	movw	r14, r24
     c62:	a3 01       	movw	r20, r6
     c64:	92 01       	movw	r18, r4
     c66:	c5 01       	movw	r24, r10
     c68:	b4 01       	movw	r22, r8
     c6a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     c7a:	ed 85       	ldd	r30, Y+13	; 0x0d
     c7c:	fe 85       	ldd	r31, Y+14	; 0x0e
     c7e:	64 83       	std	Z+4, r22	; 0x04
     c80:	75 83       	std	Z+5, r23	; 0x05
     c82:	86 83       	std	Z+6, r24	; 0x06
     c84:	97 83       	std	Z+7, r25	; 0x07
		data[2] = angle;
     c86:	3d 81       	ldd	r19, Y+5	; 0x05
     c88:	2c 89       	ldd	r18, Y+20	; 0x14
     c8a:	82 2d       	mov	r24, r2
     c8c:	93 2d       	mov	r25, r3
     c8e:	a3 2f       	mov	r26, r19
     c90:	b2 2f       	mov	r27, r18
     c92:	80 87       	std	Z+8, r24	; 0x08
     c94:	91 87       	std	Z+9, r25	; 0x09
     c96:	a2 87       	std	Z+10, r26	; 0x0a
     c98:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	68 c4       	rjmp	.+2256   	; 0x156e <__stack+0xa6f>
	}
	
	else if (x[top] < 1023 && x[right] < 1023) {
     c9e:	80 91 44 01 	lds	r24, 0x0144
     ca2:	90 91 45 01 	lds	r25, 0x0145
     ca6:	fc 01       	movw	r30, r24
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	e8 5c       	subi	r30, 0xC8	; 200
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	00 81       	ld	r16, Z
     cb2:	11 81       	ldd	r17, Z+1	; 0x01
     cb4:	0f 3f       	cpi	r16, 0xFF	; 255
     cb6:	f3 e0       	ldi	r31, 0x03	; 3
     cb8:	1f 07       	cpc	r17, r31
     cba:	08 f0       	brcs	.+2      	; 0xcbe <__stack+0x1bf>
     cbc:	53 c4       	rjmp	.+2214   	; 0x1564 <__stack+0xa65>
		beta = atan2(x[top]-x[right],y[top]-y[right]);
     cbe:	f7 01       	movw	r30, r14
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	e0 5d       	subi	r30, 0xD0	; 208
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	20 81       	ld	r18, Z
     cca:	31 81       	ldd	r19, Z+1	; 0x01
     ccc:	3e 83       	std	Y+6, r19	; 0x06
     cce:	2d 83       	std	Y+5, r18	; 0x05
     cd0:	fc 01       	movw	r30, r24
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	e0 5d       	subi	r30, 0xD0	; 208
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	b9 01       	movw	r22, r18
     ce0:	68 1b       	sub	r22, r24
     ce2:	79 0b       	sbc	r23, r25
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     cec:	6b 01       	movw	r12, r22
     cee:	7c 01       	movw	r14, r24
     cf0:	b3 01       	movw	r22, r6
     cf2:	60 1b       	sub	r22, r16
     cf4:	71 0b       	sbc	r23, r17
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     cfe:	a7 01       	movw	r20, r14
     d00:	96 01       	movw	r18, r12
     d02:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
     d06:	6c 8b       	std	Y+20, r22	; 0x14
     d08:	7d 8b       	std	Y+21, r23	; 0x15
     d0a:	8e 8b       	std	Y+22, r24	; 0x16
     d0c:	9f 8b       	std	Y+23, r25	; 0x17
		theta = atan2(11.655,14.5+8.741);
     d0e:	87 ec       	ldi	r24, 0xC7	; 199
     d10:	9e ef       	ldi	r25, 0xFE	; 254
     d12:	ad ee       	ldi	r26, 0xED	; 237
     d14:	be e3       	ldi	r27, 0x3E	; 62
     d16:	80 93 40 01 	sts	0x0140, r24
     d1a:	90 93 41 01 	sts	0x0141, r25
     d1e:	a0 93 42 01 	sts	0x0142, r26
     d22:	b0 93 43 01 	sts	0x0143, r27
		posx = rcenterx - (128.0/1023.0)*(x[top]+0.5*dcenter*sin(theta-beta));
     d26:	60 91 06 01 	lds	r22, 0x0106
     d2a:	70 91 07 01 	lds	r23, 0x0107
     d2e:	88 27       	eor	r24, r24
     d30:	77 fd       	sbrc	r23, 7
     d32:	80 95       	com	r24
     d34:	98 2f       	mov	r25, r24
     d36:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     d3a:	6b 01       	movw	r12, r22
     d3c:	7c 01       	movw	r14, r24
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	60 91 24 01 	lds	r22, 0x0124
     d4a:	70 91 25 01 	lds	r23, 0x0125
     d4e:	80 91 26 01 	lds	r24, 0x0126
     d52:	90 91 27 01 	lds	r25, 0x0127
     d56:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     d5a:	36 2e       	mov	r3, r22
     d5c:	27 2e       	mov	r2, r23
     d5e:	88 8f       	std	Y+24, r24	; 0x18
     d60:	9c 8f       	std	Y+28, r25	; 0x1c
     d62:	2c 89       	ldd	r18, Y+20	; 0x14
     d64:	3d 89       	ldd	r19, Y+21	; 0x15
     d66:	4e 89       	ldd	r20, Y+22	; 0x16
     d68:	5f 89       	ldd	r21, Y+23	; 0x17
     d6a:	67 ec       	ldi	r22, 0xC7	; 199
     d6c:	7e ef       	ldi	r23, 0xFE	; 254
     d6e:	8d ee       	ldi	r24, 0xED	; 237
     d70:	9e e3       	ldi	r25, 0x3E	; 62
     d72:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     d76:	6d 8f       	std	Y+29, r22	; 0x1d
     d78:	7e 8f       	std	Y+30, r23	; 0x1e
     d7a:	18 2f       	mov	r17, r24
     d7c:	09 2f       	mov	r16, r25
     d7e:	81 2f       	mov	r24, r17
     d80:	90 2f       	mov	r25, r16
     d82:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
     d86:	4b 01       	movw	r8, r22
     d88:	5c 01       	movw	r10, r24
     d8a:	b3 01       	movw	r22, r6
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     d94:	2b 01       	movw	r4, r22
     d96:	3c 01       	movw	r6, r24
     d98:	a5 01       	movw	r20, r10
     d9a:	94 01       	movw	r18, r8
     d9c:	b8 8c       	ldd	r11, Y+24	; 0x18
     d9e:	ac 8c       	ldd	r10, Y+28	; 0x1c
     da0:	63 2d       	mov	r22, r3
     da2:	72 2d       	mov	r23, r2
     da4:	8b 2d       	mov	r24, r11
     da6:	9a 2d       	mov	r25, r10
     da8:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	c3 01       	movw	r24, r6
     db2:	b2 01       	movw	r22, r4
     db4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	30 e2       	ldi	r19, 0x20	; 32
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	5e e3       	ldi	r21, 0x3E	; 62
     dc0:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c7 01       	movw	r24, r14
     dca:	b6 01       	movw	r22, r12
     dcc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	79 87       	std	Y+9, r23	; 0x09
     dd4:	8f 87       	std	Y+15, r24	; 0x0f
     dd6:	9b 8b       	std	Y+19, r25	; 0x13
		posy = rcentery - (96.0/1023.0)*(y[top]-0.5*dcenter*cos(theta-beta));
     dd8:	5d 8d       	ldd	r21, Y+29	; 0x1d
     dda:	4e 8d       	ldd	r20, Y+30	; 0x1e
     ddc:	65 2f       	mov	r22, r21
     dde:	74 2f       	mov	r23, r20
     de0:	81 2f       	mov	r24, r17
     de2:	90 2f       	mov	r25, r16
     de4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
     de8:	4b 01       	movw	r8, r22
     dea:	5c 01       	movw	r10, r24
     dec:	60 91 04 01 	lds	r22, 0x0104
     df0:	70 91 05 01 	lds	r23, 0x0105
     df4:	88 27       	eor	r24, r24
     df6:	77 fd       	sbrc	r23, 7
     df8:	80 95       	com	r24
     dfa:	98 2f       	mov	r25, r24
     dfc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     e00:	2b 01       	movw	r4, r22
     e02:	3c 01       	movw	r6, r24
     e04:	ad 81       	ldd	r26, Y+5	; 0x05
     e06:	be 81       	ldd	r27, Y+6	; 0x06
     e08:	bd 01       	movw	r22, r26
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
     e12:	6d 83       	std	Y+5, r22	; 0x05
     e14:	7e 83       	std	Y+6, r23	; 0x06
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
     e1a:	a5 01       	movw	r20, r10
     e1c:	94 01       	movw	r18, r8
     e1e:	e8 8d       	ldd	r30, Y+24	; 0x18
     e20:	1c 8d       	ldd	r17, Y+28	; 0x1c
     e22:	63 2d       	mov	r22, r3
     e24:	72 2d       	mov	r23, r2
     e26:	8e 2f       	mov	r24, r30
     e28:	91 2f       	mov	r25, r17
     e2a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     e2e:	9b 01       	movw	r18, r22
     e30:	ac 01       	movw	r20, r24
     e32:	6d 81       	ldd	r22, Y+5	; 0x05
     e34:	7e 81       	ldd	r23, Y+6	; 0x06
     e36:	8f 81       	ldd	r24, Y+7	; 0x07
     e38:	98 85       	ldd	r25, Y+8	; 0x08
     e3a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     e3e:	2c e0       	ldi	r18, 0x0C	; 12
     e40:	30 e3       	ldi	r19, 0x30	; 48
     e42:	40 ec       	ldi	r20, 0xC0	; 192
     e44:	5d e3       	ldi	r21, 0x3D	; 61
     e46:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c3 01       	movw	r24, r6
     e50:	b2 01       	movw	r22, r4
     e52:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     e56:	06 2f       	mov	r16, r22
     e58:	17 2f       	mov	r17, r23
     e5a:	8c 8f       	std	Y+28, r24	; 0x1c
     e5c:	98 8f       	std	Y+24, r25	; 0x18
		
		angle = -1 * theta - beta;
     e5e:	2c 89       	ldd	r18, Y+20	; 0x14
     e60:	3d 89       	ldd	r19, Y+21	; 0x15
     e62:	4e 89       	ldd	r20, Y+22	; 0x16
     e64:	5f 89       	ldd	r21, Y+23	; 0x17
     e66:	67 ec       	ldi	r22, 0xC7	; 199
     e68:	7e ef       	ldi	r23, 0xFE	; 254
     e6a:	8d ee       	ldi	r24, 0xED	; 237
     e6c:	9e eb       	ldi	r25, 0xBE	; 190
     e6e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     e72:	26 2e       	mov	r2, r22
     e74:	37 2e       	mov	r3, r23
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	9c 8b       	std	Y+20, r25	; 0x14
		phi = -1 * atan2(posy,posx);
     e7a:	79 81       	ldd	r23, Y+1	; 0x01
     e7c:	69 85       	ldd	r22, Y+9	; 0x09
     e7e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	27 2f       	mov	r18, r23
     e84:	36 2f       	mov	r19, r22
     e86:	49 2f       	mov	r20, r25
     e88:	58 2f       	mov	r21, r24
     e8a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     e8c:	e8 8d       	ldd	r30, Y+24	; 0x18
     e8e:	60 2f       	mov	r22, r16
     e90:	71 2f       	mov	r23, r17
     e92:	8f 2f       	mov	r24, r31
     e94:	9e 2f       	mov	r25, r30
     e96:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
     e9a:	4b 01       	movw	r8, r22
     e9c:	5c 01       	movw	r10, r24
		
		r = sqrt((posx*posx)+(posy*posy));
     e9e:	79 81       	ldd	r23, Y+1	; 0x01
     ea0:	69 85       	ldd	r22, Y+9	; 0x09
     ea2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ea4:	8b 89       	ldd	r24, Y+19	; 0x13
     ea6:	27 2f       	mov	r18, r23
     ea8:	36 2f       	mov	r19, r22
     eaa:	49 2f       	mov	r20, r25
     eac:	58 2f       	mov	r21, r24
     eae:	67 2f       	mov	r22, r23
     eb0:	73 2f       	mov	r23, r19
     eb2:	89 2f       	mov	r24, r25
     eb4:	95 2f       	mov	r25, r21
     eb6:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     eba:	2b 01       	movw	r4, r22
     ebc:	3c 01       	movw	r6, r24
     ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec0:	88 8d       	ldd	r24, Y+24	; 0x18
     ec2:	20 2f       	mov	r18, r16
     ec4:	31 2f       	mov	r19, r17
     ec6:	49 2f       	mov	r20, r25
     ec8:	58 2f       	mov	r21, r24
     eca:	60 2f       	mov	r22, r16
     ecc:	71 2f       	mov	r23, r17
     ece:	89 2f       	mov	r24, r25
     ed0:	95 2f       	mov	r25, r21
     ed2:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c3 01       	movw	r24, r6
     edc:	b2 01       	movw	r22, r4
     ede:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     ee2:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
     ee6:	2b 01       	movw	r4, r22
     ee8:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * cos(angle - phi);
     eea:	a5 01       	movw	r20, r10
     eec:	94 01       	movw	r18, r8
     eee:	ed 81       	ldd	r30, Y+5	; 0x05
     ef0:	1c 89       	ldd	r17, Y+20	; 0x14
     ef2:	62 2d       	mov	r22, r2
     ef4:	73 2d       	mov	r23, r3
     ef6:	8e 2f       	mov	r24, r30
     ef8:	91 2f       	mov	r25, r17
     efa:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     efe:	06 2f       	mov	r16, r22
     f00:	17 2f       	mov	r17, r23
     f02:	a8 2e       	mov	r10, r24
     f04:	b9 2e       	mov	r11, r25
     f06:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
     f0a:	a3 01       	movw	r20, r6
     f0c:	92 01       	movw	r18, r4
     f0e:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	c7 01       	movw	r24, r14
     f18:	b6 01       	movw	r22, r12
     f1a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     f1e:	ed 85       	ldd	r30, Y+13	; 0x0d
     f20:	fe 85       	ldd	r31, Y+14	; 0x0e
     f22:	60 83       	st	Z, r22
     f24:	71 83       	std	Z+1, r23	; 0x01
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery - r * sin(angle - phi);
     f2a:	60 2f       	mov	r22, r16
     f2c:	71 2f       	mov	r23, r17
     f2e:	8a 2d       	mov	r24, r10
     f30:	9b 2d       	mov	r25, r11
     f32:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
     f36:	4b 01       	movw	r8, r22
     f38:	5c 01       	movw	r10, r24
     f3a:	60 91 04 01 	lds	r22, 0x0104
     f3e:	70 91 05 01 	lds	r23, 0x0105
     f42:	88 27       	eor	r24, r24
     f44:	77 fd       	sbrc	r23, 7
     f46:	80 95       	com	r24
     f48:	98 2f       	mov	r25, r24
     f4a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     f4e:	6b 01       	movw	r12, r22
     f50:	7c 01       	movw	r14, r24
     f52:	a3 01       	movw	r20, r6
     f54:	92 01       	movw	r18, r4
     f56:	c5 01       	movw	r24, r10
     f58:	b4 01       	movw	r22, r8
     f5a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     f5e:	9b 01       	movw	r18, r22
     f60:	ac 01       	movw	r20, r24
     f62:	c7 01       	movw	r24, r14
     f64:	b6 01       	movw	r22, r12
     f66:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     f6a:	ad 85       	ldd	r26, Y+13	; 0x0d
     f6c:	be 85       	ldd	r27, Y+14	; 0x0e
     f6e:	14 96       	adiw	r26, 0x04	; 4
     f70:	6d 93       	st	X+, r22
     f72:	7d 93       	st	X+, r23
     f74:	8d 93       	st	X+, r24
     f76:	9c 93       	st	X, r25
     f78:	17 97       	sbiw	r26, 0x07	; 7
		data[2] = angle;
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	2c 89       	ldd	r18, Y+20	; 0x14
     f7e:	82 2d       	mov	r24, r2
     f80:	93 2d       	mov	r25, r3
     f82:	a3 2f       	mov	r26, r19
     f84:	b2 2f       	mov	r27, r18
     f86:	ed 85       	ldd	r30, Y+13	; 0x0d
     f88:	fe 85       	ldd	r31, Y+14	; 0x0e
     f8a:	80 87       	std	Z+8, r24	; 0x08
     f8c:	91 87       	std	Z+9, r25	; 0x09
     f8e:	a2 87       	std	Z+10, r26	; 0x0a
     f90:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	ec c2       	rjmp	.+1496   	; 0x156e <__stack+0xa6f>
	}
	
	else if (x[bottom] < 1023 && x[left] < 1023) {
     f96:	80 91 48 01 	lds	r24, 0x0148
     f9a:	90 91 49 01 	lds	r25, 0x0149
     f9e:	fc 01       	movw	r30, r24
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	e8 5c       	subi	r30, 0xC8	; 200
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	a0 80       	ld	r10, Z
     faa:	b1 80       	ldd	r11, Z+1	; 0x01
     fac:	ff ef       	ldi	r31, 0xFF	; 255
     fae:	af 16       	cp	r10, r31
     fb0:	f3 e0       	ldi	r31, 0x03	; 3
     fb2:	bf 06       	cpc	r11, r31
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <__stack+0x4b9>
     fb6:	d8 c2       	rjmp	.+1456   	; 0x1568 <__stack+0xa69>
     fb8:	20 91 46 01 	lds	r18, 0x0146
     fbc:	30 91 47 01 	lds	r19, 0x0147
     fc0:	f9 01       	movw	r30, r18
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	e8 5c       	subi	r30, 0xC8	; 200
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	00 81       	ld	r16, Z
     fcc:	11 81       	ldd	r17, Z+1	; 0x01
     fce:	0f 3f       	cpi	r16, 0xFF	; 255
     fd0:	43 e0       	ldi	r20, 0x03	; 3
     fd2:	14 07       	cpc	r17, r20
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <__stack+0x4d9>
     fd6:	5d c1       	rjmp	.+698    	; 0x1292 <__stack+0x793>
		beta = atan2(x[bottom]-x[left],y[bottom]-y[left]);
     fd8:	fc 01       	movw	r30, r24
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	e0 5d       	subi	r30, 0xD0	; 208
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	f9 01       	movw	r30, r18
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	e0 5d       	subi	r30, 0xD0	; 208
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	69 81       	ldd	r22, Y+1	; 0x01
     ffa:	7a 81       	ldd	r23, Y+2	; 0x02
     ffc:	68 1b       	sub	r22, r24
     ffe:	79 0b       	sbc	r23, r25
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
    100c:	b5 01       	movw	r22, r10
    100e:	60 1b       	sub	r22, r16
    1010:	71 0b       	sbc	r23, r17
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    101a:	a7 01       	movw	r20, r14
    101c:	96 01       	movw	r18, r12
    101e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
    1022:	69 87       	std	Y+9, r22	; 0x09
    1024:	7a 87       	std	Y+10, r23	; 0x0a
    1026:	8b 87       	std	Y+11, r24	; 0x0b
    1028:	9c 87       	std	Y+12, r25	; 0x0c
		theta = atan2(10.563,14.5+2.483);
    102a:	8b e9       	ldi	r24, 0x9B	; 155
    102c:	91 e7       	ldi	r25, 0x71	; 113
    102e:	ae e0       	ldi	r26, 0x0E	; 14
    1030:	bf e3       	ldi	r27, 0x3F	; 63
    1032:	80 93 40 01 	sts	0x0140, r24
    1036:	90 93 41 01 	sts	0x0141, r25
    103a:	a0 93 42 01 	sts	0x0142, r26
    103e:	b0 93 43 01 	sts	0x0143, r27
		posx = rcenterx - (128.0/1023.0)*(x[bottom]+dcenter*sin(theta-beta));
    1042:	60 91 06 01 	lds	r22, 0x0106
    1046:	70 91 07 01 	lds	r23, 0x0107
    104a:	88 27       	eor	r24, r24
    104c:	77 fd       	sbrc	r23, 7
    104e:	80 95       	com	r24
    1050:	98 2f       	mov	r25, r24
    1052:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1056:	6b 01       	movw	r12, r22
    1058:	7c 01       	movw	r14, r24
    105a:	29 85       	ldd	r18, Y+9	; 0x09
    105c:	3a 85       	ldd	r19, Y+10	; 0x0a
    105e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1060:	5c 85       	ldd	r21, Y+12	; 0x0c
    1062:	6b e9       	ldi	r22, 0x9B	; 155
    1064:	71 e7       	ldi	r23, 0x71	; 113
    1066:	8e e0       	ldi	r24, 0x0E	; 14
    1068:	9f e3       	ldi	r25, 0x3F	; 63
    106a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    106e:	36 2e       	mov	r3, r22
    1070:	27 2e       	mov	r2, r23
    1072:	8b 8b       	std	Y+19, r24	; 0x13
    1074:	9d 83       	std	Y+5, r25	; 0x05
    1076:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
    107a:	2b 01       	movw	r4, r22
    107c:	3c 01       	movw	r6, r24
    107e:	80 91 24 01 	lds	r24, 0x0124
    1082:	90 91 25 01 	lds	r25, 0x0125
    1086:	a0 91 26 01 	lds	r26, 0x0126
    108a:	b0 91 27 01 	lds	r27, 0x0127
    108e:	8f 87       	std	Y+15, r24	; 0x0f
    1090:	98 8b       	std	Y+16, r25	; 0x10
    1092:	a9 8b       	std	Y+17, r26	; 0x11
    1094:	ba 8b       	std	Y+18, r27	; 0x12
    1096:	b5 01       	movw	r22, r10
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    10a0:	4b 01       	movw	r8, r22
    10a2:	5c 01       	movw	r10, r24
    10a4:	2f 85       	ldd	r18, Y+15	; 0x0f
    10a6:	38 89       	ldd	r19, Y+16	; 0x10
    10a8:	49 89       	ldd	r20, Y+17	; 0x11
    10aa:	5a 89       	ldd	r21, Y+18	; 0x12
    10ac:	c3 01       	movw	r24, r6
    10ae:	b2 01       	movw	r22, r4
    10b0:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	c5 01       	movw	r24, r10
    10ba:	b4 01       	movw	r22, r8
    10bc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    10c0:	28 e0       	ldi	r18, 0x08	; 8
    10c2:	30 e2       	ldi	r19, 0x20	; 32
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	5e e3       	ldi	r21, 0x3E	; 62
    10c8:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	c7 01       	movw	r24, r14
    10d2:	b6 01       	movw	r22, r12
    10d4:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    10d8:	6c 8b       	std	Y+20, r22	; 0x14
    10da:	78 8f       	std	Y+24, r23	; 0x18
    10dc:	18 2f       	mov	r17, r24
    10de:	09 2f       	mov	r16, r25
		posy = rcentery - (96.0/1023.0)*(y[bottom]-dcenter*cos(theta-beta));
    10e0:	3b 89       	ldd	r19, Y+19	; 0x13
    10e2:	2d 81       	ldd	r18, Y+5	; 0x05
    10e4:	63 2d       	mov	r22, r3
    10e6:	72 2d       	mov	r23, r2
    10e8:	83 2f       	mov	r24, r19
    10ea:	92 2f       	mov	r25, r18
    10ec:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
    10f0:	4b 01       	movw	r8, r22
    10f2:	5c 01       	movw	r10, r24
    10f4:	60 91 04 01 	lds	r22, 0x0104
    10f8:	70 91 05 01 	lds	r23, 0x0105
    10fc:	88 27       	eor	r24, r24
    10fe:	77 fd       	sbrc	r23, 7
    1100:	80 95       	com	r24
    1102:	98 2f       	mov	r25, r24
    1104:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1108:	2b 01       	movw	r4, r22
    110a:	3c 01       	movw	r6, r24
    110c:	a9 81       	ldd	r26, Y+1	; 0x01
    110e:	ba 81       	ldd	r27, Y+2	; 0x02
    1110:	bd 01       	movw	r22, r26
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    111a:	69 83       	std	Y+1, r22	; 0x01
    111c:	7a 83       	std	Y+2, r23	; 0x02
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	a5 01       	movw	r20, r10
    1124:	94 01       	movw	r18, r8
    1126:	6f 85       	ldd	r22, Y+15	; 0x0f
    1128:	78 89       	ldd	r23, Y+16	; 0x10
    112a:	89 89       	ldd	r24, Y+17	; 0x11
    112c:	9a 89       	ldd	r25, Y+18	; 0x12
    112e:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	69 81       	ldd	r22, Y+1	; 0x01
    1138:	7a 81       	ldd	r23, Y+2	; 0x02
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1142:	2c e0       	ldi	r18, 0x0C	; 12
    1144:	30 e3       	ldi	r19, 0x30	; 48
    1146:	40 ec       	ldi	r20, 0xC0	; 192
    1148:	5d e3       	ldi	r21, 0x3D	; 61
    114a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    114e:	9b 01       	movw	r18, r22
    1150:	ac 01       	movw	r20, r24
    1152:	c3 01       	movw	r24, r6
    1154:	b2 01       	movw	r22, r4
    1156:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    115a:	86 2e       	mov	r8, r22
    115c:	97 2e       	mov	r9, r23
    115e:	a8 2e       	mov	r10, r24
    1160:	b9 2e       	mov	r11, r25
		
		angle = -1 *3.14/2 + theta - beta;
    1162:	29 85       	ldd	r18, Y+9	; 0x09
    1164:	3a 85       	ldd	r19, Y+10	; 0x0a
    1166:	4b 85       	ldd	r20, Y+11	; 0x0b
    1168:	5c 85       	ldd	r21, Y+12	; 0x0c
    116a:	66 ef       	ldi	r22, 0xF6	; 246
    116c:	7c eb       	ldi	r23, 0xBC	; 188
    116e:	81 e8       	ldi	r24, 0x81	; 129
    1170:	9f eb       	ldi	r25, 0xBF	; 191
    1172:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1176:	36 2e       	mov	r3, r22
    1178:	27 2e       	mov	r2, r23
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	99 87       	std	Y+9, r25	; 0x09
		phi = -1 * atan2(posy,posx);
    117e:	7c 89       	ldd	r23, Y+20	; 0x14
    1180:	68 8d       	ldd	r22, Y+24	; 0x18
    1182:	27 2f       	mov	r18, r23
    1184:	36 2f       	mov	r19, r22
    1186:	41 2f       	mov	r20, r17
    1188:	50 2f       	mov	r21, r16
    118a:	68 2d       	mov	r22, r8
    118c:	79 2d       	mov	r23, r9
    118e:	8a 2d       	mov	r24, r10
    1190:	9b 2d       	mov	r25, r11
    1192:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
    1196:	2b 01       	movw	r4, r22
    1198:	3c 01       	movw	r6, r24
		
		r = sqrt((posx*posx)+(posy*posy));
    119a:	7c 89       	ldd	r23, Y+20	; 0x14
    119c:	68 8d       	ldd	r22, Y+24	; 0x18
    119e:	27 2f       	mov	r18, r23
    11a0:	36 2f       	mov	r19, r22
    11a2:	41 2f       	mov	r20, r17
    11a4:	50 2f       	mov	r21, r16
    11a6:	67 2f       	mov	r22, r23
    11a8:	73 2f       	mov	r23, r19
    11aa:	81 2f       	mov	r24, r17
    11ac:	90 2f       	mov	r25, r16
    11ae:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    11b2:	6f 87       	std	Y+15, r22	; 0x0f
    11b4:	78 8b       	std	Y+16, r23	; 0x10
    11b6:	89 8b       	std	Y+17, r24	; 0x11
    11b8:	9a 8b       	std	Y+18, r25	; 0x12
    11ba:	28 2d       	mov	r18, r8
    11bc:	39 2d       	mov	r19, r9
    11be:	4a 2d       	mov	r20, r10
    11c0:	5b 2d       	mov	r21, r11
    11c2:	68 2d       	mov	r22, r8
    11c4:	79 2d       	mov	r23, r9
    11c6:	8a 2d       	mov	r24, r10
    11c8:	9b 2d       	mov	r25, r11
    11ca:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    11d4:	78 89       	ldd	r23, Y+16	; 0x10
    11d6:	89 89       	ldd	r24, Y+17	; 0x11
    11d8:	9a 89       	ldd	r25, Y+18	; 0x12
    11da:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    11de:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
    11e2:	4b 01       	movw	r8, r22
    11e4:	5c 01       	movw	r10, r24
		
		data[0] = rcenterx - r * cos(angle - phi);
    11e6:	a3 01       	movw	r20, r6
    11e8:	92 01       	movw	r18, r4
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	19 85       	ldd	r17, Y+9	; 0x09
    11ee:	63 2d       	mov	r22, r3
    11f0:	72 2d       	mov	r23, r2
    11f2:	8e 2f       	mov	r24, r30
    11f4:	91 2f       	mov	r25, r17
    11f6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    11fa:	06 2f       	mov	r16, r22
    11fc:	17 2f       	mov	r17, r23
    11fe:	68 2e       	mov	r6, r24
    1200:	79 2e       	mov	r7, r25
    1202:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
    1206:	a5 01       	movw	r20, r10
    1208:	94 01       	movw	r18, r8
    120a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    120e:	9b 01       	movw	r18, r22
    1210:	ac 01       	movw	r20, r24
    1212:	c7 01       	movw	r24, r14
    1214:	b6 01       	movw	r22, r12
    1216:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    121a:	ed 85       	ldd	r30, Y+13	; 0x0d
    121c:	fe 85       	ldd	r31, Y+14	; 0x0e
    121e:	60 83       	st	Z, r22
    1220:	71 83       	std	Z+1, r23	; 0x01
    1222:	82 83       	std	Z+2, r24	; 0x02
    1224:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery - r * sin(angle - phi);
    1226:	60 2f       	mov	r22, r16
    1228:	71 2f       	mov	r23, r17
    122a:	86 2d       	mov	r24, r6
    122c:	97 2d       	mov	r25, r7
    122e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
    1232:	2b 01       	movw	r4, r22
    1234:	3c 01       	movw	r6, r24
    1236:	60 91 04 01 	lds	r22, 0x0104
    123a:	70 91 05 01 	lds	r23, 0x0105
    123e:	88 27       	eor	r24, r24
    1240:	77 fd       	sbrc	r23, 7
    1242:	80 95       	com	r24
    1244:	98 2f       	mov	r25, r24
    1246:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
    124e:	a5 01       	movw	r20, r10
    1250:	94 01       	movw	r18, r8
    1252:	c3 01       	movw	r24, r6
    1254:	b2 01       	movw	r22, r4
    1256:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    125a:	9b 01       	movw	r18, r22
    125c:	ac 01       	movw	r20, r24
    125e:	c7 01       	movw	r24, r14
    1260:	b6 01       	movw	r22, r12
    1262:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1266:	ad 85       	ldd	r26, Y+13	; 0x0d
    1268:	be 85       	ldd	r27, Y+14	; 0x0e
    126a:	14 96       	adiw	r26, 0x04	; 4
    126c:	6d 93       	st	X+, r22
    126e:	7d 93       	st	X+, r23
    1270:	8d 93       	st	X+, r24
    1272:	9c 93       	st	X, r25
    1274:	17 97       	sbiw	r26, 0x07	; 7
		data[2] = angle;
    1276:	39 81       	ldd	r19, Y+1	; 0x01
    1278:	29 85       	ldd	r18, Y+9	; 0x09
    127a:	83 2d       	mov	r24, r3
    127c:	92 2d       	mov	r25, r2
    127e:	a3 2f       	mov	r26, r19
    1280:	b2 2f       	mov	r27, r18
    1282:	ed 85       	ldd	r30, Y+13	; 0x0d
    1284:	fe 85       	ldd	r31, Y+14	; 0x0e
    1286:	80 87       	std	Z+8, r24	; 0x08
    1288:	91 87       	std	Z+9, r25	; 0x09
    128a:	a2 87       	std	Z+10, r26	; 0x0a
    128c:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	6e c1       	rjmp	.+732    	; 0x156e <__stack+0xa6f>
	}
	
	else if (x[bottom] < 1023 && x[right] < 1023) {
    1292:	20 91 44 01 	lds	r18, 0x0144
    1296:	30 91 45 01 	lds	r19, 0x0145
    129a:	f9 01       	movw	r30, r18
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	e8 5c       	subi	r30, 0xC8	; 200
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	00 81       	ld	r16, Z
    12a6:	11 81       	ldd	r17, Z+1	; 0x01
    12a8:	0f 3f       	cpi	r16, 0xFF	; 255
    12aa:	f3 e0       	ldi	r31, 0x03	; 3
    12ac:	1f 07       	cpc	r17, r31
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <__stack+0x7b3>
    12b0:	5d c1       	rjmp	.+698    	; 0x156c <__stack+0xa6d>
		beta = atan2(x[bottom]-x[right],y[bottom]-y[right]);
    12b2:	fc 01       	movw	r30, r24
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	e0 5d       	subi	r30, 0xD0	; 208
    12ba:	fe 4f       	sbci	r31, 0xFE	; 254
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	99 8f       	std	Y+25, r25	; 0x19
    12c2:	88 8f       	std	Y+24, r24	; 0x18
    12c4:	f9 01       	movw	r30, r18
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	e0 5d       	subi	r30, 0xD0	; 208
    12cc:	fe 4f       	sbci	r31, 0xFE	; 254
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	68 8d       	ldd	r22, Y+24	; 0x18
    12d4:	79 8d       	ldd	r23, Y+25	; 0x19
    12d6:	68 1b       	sub	r22, r24
    12d8:	79 0b       	sbc	r23, r25
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    12e2:	6b 01       	movw	r12, r22
    12e4:	7c 01       	movw	r14, r24
    12e6:	b5 01       	movw	r22, r10
    12e8:	60 1b       	sub	r22, r16
    12ea:	71 0b       	sbc	r23, r17
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    12f4:	a7 01       	movw	r20, r14
    12f6:	96 01       	movw	r18, r12
    12f8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
    12fc:	2b 01       	movw	r4, r22
    12fe:	3c 01       	movw	r6, r24
		theta = atan2(11.655,14.5-8.741);
    1300:	8b e7       	ldi	r24, 0x7B	; 123
    1302:	91 e5       	ldi	r25, 0x51	; 81
    1304:	ae e8       	ldi	r26, 0x8E	; 142
    1306:	bf e3       	ldi	r27, 0x3F	; 63
    1308:	80 93 40 01 	sts	0x0140, r24
    130c:	90 93 41 01 	sts	0x0141, r25
    1310:	a0 93 42 01 	sts	0x0142, r26
    1314:	b0 93 43 01 	sts	0x0143, r27
		posx = rcenterx - (128.0/1023.0)*(x[bottom]+0.5*dcenter*sin(theta-beta));
    1318:	60 91 06 01 	lds	r22, 0x0106
    131c:	70 91 07 01 	lds	r23, 0x0107
    1320:	88 27       	eor	r24, r24
    1322:	77 fd       	sbrc	r23, 7
    1324:	80 95       	com	r24
    1326:	98 2f       	mov	r25, r24
    1328:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    132c:	6b 01       	movw	r12, r22
    132e:	7c 01       	movw	r14, r24
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	60 91 24 01 	lds	r22, 0x0124
    133c:	70 91 25 01 	lds	r23, 0x0125
    1340:	80 91 26 01 	lds	r24, 0x0126
    1344:	90 91 27 01 	lds	r25, 0x0127
    1348:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    134c:	6c 8f       	std	Y+28, r22	; 0x1c
    134e:	7d 8f       	std	Y+29, r23	; 0x1d
    1350:	18 2f       	mov	r17, r24
    1352:	09 2f       	mov	r16, r25
    1354:	a3 01       	movw	r20, r6
    1356:	92 01       	movw	r18, r4
    1358:	6b e7       	ldi	r22, 0x7B	; 123
    135a:	71 e5       	ldi	r23, 0x51	; 81
    135c:	8e e8       	ldi	r24, 0x8E	; 142
    135e:	9f e3       	ldi	r25, 0x3F	; 63
    1360:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1364:	69 83       	std	Y+1, r22	; 0x01
    1366:	79 87       	std	Y+9, r23	; 0x09
    1368:	28 2e       	mov	r2, r24
    136a:	39 2e       	mov	r3, r25
    136c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
    1370:	2b 01       	movw	r4, r22
    1372:	3c 01       	movw	r6, r24
    1374:	b5 01       	movw	r22, r10
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    137e:	4b 01       	movw	r8, r22
    1380:	5c 01       	movw	r10, r24
    1382:	a3 01       	movw	r20, r6
    1384:	92 01       	movw	r18, r4
    1386:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1388:	ad 8d       	ldd	r26, Y+29	; 0x1d
    138a:	6b 2f       	mov	r22, r27
    138c:	7a 2f       	mov	r23, r26
    138e:	81 2f       	mov	r24, r17
    1390:	90 2f       	mov	r25, r16
    1392:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	c5 01       	movw	r24, r10
    139c:	b4 01       	movw	r22, r8
    139e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    13a2:	28 e0       	ldi	r18, 0x08	; 8
    13a4:	30 e2       	ldi	r19, 0x20	; 32
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	5e e3       	ldi	r21, 0x3E	; 62
    13aa:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
    13b2:	c7 01       	movw	r24, r14
    13b4:	b6 01       	movw	r22, r12
    13b6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    13ba:	6f 87       	std	Y+15, r22	; 0x0f
    13bc:	7b 8b       	std	Y+19, r23	; 0x13
    13be:	8d 83       	std	Y+5, r24	; 0x05
    13c0:	9c 8b       	std	Y+20, r25	; 0x14
		posy = rcentery - (96.0/1023.0)*(y[bottom]-0.5*dcenter*cos(theta-beta));
    13c2:	59 81       	ldd	r21, Y+1	; 0x01
    13c4:	49 85       	ldd	r20, Y+9	; 0x09
    13c6:	65 2f       	mov	r22, r21
    13c8:	74 2f       	mov	r23, r20
    13ca:	82 2d       	mov	r24, r2
    13cc:	93 2d       	mov	r25, r3
    13ce:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24
    13d6:	60 91 04 01 	lds	r22, 0x0104
    13da:	70 91 05 01 	lds	r23, 0x0105
    13de:	88 27       	eor	r24, r24
    13e0:	77 fd       	sbrc	r23, 7
    13e2:	80 95       	com	r24
    13e4:	98 2f       	mov	r25, r24
    13e6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    13ea:	2b 01       	movw	r4, r22
    13ec:	3c 01       	movw	r6, r24
    13ee:	a8 8d       	ldd	r26, Y+24	; 0x18
    13f0:	b9 8d       	ldd	r27, Y+25	; 0x19
    13f2:	bd 01       	movw	r22, r26
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    13fc:	68 8f       	std	Y+24, r22	; 0x18
    13fe:	79 8f       	std	Y+25, r23	; 0x19
    1400:	8a 8f       	std	Y+26, r24	; 0x1a
    1402:	9b 8f       	std	Y+27, r25	; 0x1b
    1404:	a5 01       	movw	r20, r10
    1406:	94 01       	movw	r18, r8
    1408:	bc 8d       	ldd	r27, Y+28	; 0x1c
    140a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    140c:	6b 2f       	mov	r22, r27
    140e:	7a 2f       	mov	r23, r26
    1410:	81 2f       	mov	r24, r17
    1412:	90 2f       	mov	r25, r16
    1414:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	68 8d       	ldd	r22, Y+24	; 0x18
    141e:	79 8d       	ldd	r23, Y+25	; 0x19
    1420:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1422:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1424:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1428:	2c e0       	ldi	r18, 0x0C	; 12
    142a:	30 e3       	ldi	r19, 0x30	; 48
    142c:	40 ec       	ldi	r20, 0xC0	; 192
    142e:	5d e3       	ldi	r21, 0x3D	; 61
    1430:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    1434:	9b 01       	movw	r18, r22
    1436:	ac 01       	movw	r20, r24
    1438:	c3 01       	movw	r24, r6
    143a:	b2 01       	movw	r22, r4
    143c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1440:	06 2f       	mov	r16, r22
    1442:	17 2f       	mov	r17, r23
    1444:	8c 8f       	std	Y+28, r24	; 0x1c
    1446:	98 8f       	std	Y+24, r25	; 0x18
		
		angle = theta - beta;
		phi = -1 * atan2(posy,posx);
    1448:	7f 85       	ldd	r23, Y+15	; 0x0f
    144a:	6b 89       	ldd	r22, Y+19	; 0x13
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	8c 89       	ldd	r24, Y+20	; 0x14
    1450:	27 2f       	mov	r18, r23
    1452:	36 2f       	mov	r19, r22
    1454:	49 2f       	mov	r20, r25
    1456:	58 2f       	mov	r21, r24
    1458:	fc 8d       	ldd	r31, Y+28	; 0x1c
    145a:	e8 8d       	ldd	r30, Y+24	; 0x18
    145c:	60 2f       	mov	r22, r16
    145e:	71 2f       	mov	r23, r17
    1460:	8f 2f       	mov	r24, r31
    1462:	9e 2f       	mov	r25, r30
    1464:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <atan2>
    1468:	4b 01       	movw	r8, r22
    146a:	5c 01       	movw	r10, r24
		
		r = sqrt((posx*posx)+(posy*posy));
    146c:	7f 85       	ldd	r23, Y+15	; 0x0f
    146e:	6b 89       	ldd	r22, Y+19	; 0x13
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	8c 89       	ldd	r24, Y+20	; 0x14
    1474:	27 2f       	mov	r18, r23
    1476:	36 2f       	mov	r19, r22
    1478:	49 2f       	mov	r20, r25
    147a:	58 2f       	mov	r21, r24
    147c:	67 2f       	mov	r22, r23
    147e:	73 2f       	mov	r23, r19
    1480:	89 2f       	mov	r24, r25
    1482:	95 2f       	mov	r25, r21
    1484:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    1488:	2b 01       	movw	r4, r22
    148a:	3c 01       	movw	r6, r24
    148c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148e:	88 8d       	ldd	r24, Y+24	; 0x18
    1490:	20 2f       	mov	r18, r16
    1492:	31 2f       	mov	r19, r17
    1494:	49 2f       	mov	r20, r25
    1496:	58 2f       	mov	r21, r24
    1498:	60 2f       	mov	r22, r16
    149a:	71 2f       	mov	r23, r17
    149c:	89 2f       	mov	r24, r25
    149e:	95 2f       	mov	r25, r21
    14a0:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
    14a8:	c3 01       	movw	r24, r6
    14aa:	b2 01       	movw	r22, r4
    14ac:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    14b0:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
    14b4:	2b 01       	movw	r4, r22
    14b6:	3c 01       	movw	r6, r24
		
		data[0] = rcenterx - r * cos(angle - phi);
    14b8:	a5 01       	movw	r20, r10
    14ba:	94 01       	movw	r18, r8
    14bc:	b9 81       	ldd	r27, Y+1	; 0x01
    14be:	a9 85       	ldd	r26, Y+9	; 0x09
    14c0:	6b 2f       	mov	r22, r27
    14c2:	7a 2f       	mov	r23, r26
    14c4:	82 2d       	mov	r24, r2
    14c6:	93 2d       	mov	r25, r3
    14c8:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    14cc:	06 2f       	mov	r16, r22
    14ce:	17 2f       	mov	r17, r23
    14d0:	a8 2e       	mov	r10, r24
    14d2:	b9 2e       	mov	r11, r25
    14d4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <cos>
    14d8:	a3 01       	movw	r20, r6
    14da:	92 01       	movw	r18, r4
    14dc:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	c7 01       	movw	r24, r14
    14e6:	b6 01       	movw	r22, r12
    14e8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    14ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    14ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    14f0:	60 83       	st	Z, r22
    14f2:	71 83       	std	Z+1, r23	; 0x01
    14f4:	82 83       	std	Z+2, r24	; 0x02
    14f6:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery - r * sin(angle - phi);
    14f8:	60 2f       	mov	r22, r16
    14fa:	71 2f       	mov	r23, r17
    14fc:	8a 2d       	mov	r24, r10
    14fe:	9b 2d       	mov	r25, r11
    1500:	0e 94 fe 10 	call	0x21fc	; 0x21fc <sin>
    1504:	4b 01       	movw	r8, r22
    1506:	5c 01       	movw	r10, r24
    1508:	60 91 04 01 	lds	r22, 0x0104
    150c:	70 91 05 01 	lds	r23, 0x0105
    1510:	88 27       	eor	r24, r24
    1512:	77 fd       	sbrc	r23, 7
    1514:	80 95       	com	r24
    1516:	98 2f       	mov	r25, r24
    1518:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    151c:	6b 01       	movw	r12, r22
    151e:	7c 01       	movw	r14, r24
    1520:	a3 01       	movw	r20, r6
    1522:	92 01       	movw	r18, r4
    1524:	c5 01       	movw	r24, r10
    1526:	b4 01       	movw	r22, r8
    1528:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	c7 01       	movw	r24, r14
    1532:	b6 01       	movw	r22, r12
    1534:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1538:	ad 85       	ldd	r26, Y+13	; 0x0d
    153a:	be 85       	ldd	r27, Y+14	; 0x0e
    153c:	14 96       	adiw	r26, 0x04	; 4
    153e:	6d 93       	st	X+, r22
    1540:	7d 93       	st	X+, r23
    1542:	8d 93       	st	X+, r24
    1544:	9c 93       	st	X, r25
    1546:	17 97       	sbiw	r26, 0x07	; 7
		data[2] = angle;
    1548:	59 81       	ldd	r21, Y+1	; 0x01
    154a:	49 85       	ldd	r20, Y+9	; 0x09
    154c:	85 2f       	mov	r24, r21
    154e:	94 2f       	mov	r25, r20
    1550:	a2 2d       	mov	r26, r2
    1552:	b3 2d       	mov	r27, r3
    1554:	ed 85       	ldd	r30, Y+13	; 0x0d
    1556:	fe 85       	ldd	r31, Y+14	; 0x0e
    1558:	80 87       	std	Z+8, r24	; 0x08
    155a:	91 87       	std	Z+9, r25	; 0x09
    155c:	a2 87       	std	Z+10, r26	; 0x0a
    155e:	b3 87       	std	Z+11, r27	; 0x0b
		return 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	05 c0       	rjmp	.+10     	; 0x156e <__stack+0xa6f>
	}
	return 0;
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	03 c0       	rjmp	.+6      	; 0x156e <__stack+0xa6f>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	01 c0       	rjmp	.+2      	; 0x156e <__stack+0xa6f>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	6e 96       	adiw	r28, 0x1e	; 30
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	bf 90       	pop	r11
    158c:	af 90       	pop	r10
    158e:	9f 90       	pop	r9
    1590:	8f 90       	pop	r8
    1592:	7f 90       	pop	r7
    1594:	6f 90       	pop	r6
    1596:	5f 90       	pop	r5
    1598:	4f 90       	pop	r4
    159a:	3f 90       	pop	r3
    159c:	2f 90       	pop	r2
    159e:	08 95       	ret

000015a0 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    15a6:	80 ea       	ldi	r24, 0xA0	; 160
    15a8:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    15ac:	82 e1       	ldi	r24, 0x12	; 18
    15ae:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    15b0:	09 b4       	in	r0, 0x29	; 41
    15b2:	00 fe       	sbrs	r0, 0
    15b4:	fd cf       	rjmp	.-6      	; 0x15b0 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    15b6:	80 e9       	ldi	r24, 0x90	; 144
    15b8:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    15bc:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    15c0:	10 92 65 01 	sts	0x0165, r1
	cdc_line_rtsdtr = 0;
    15c4:	10 92 66 01 	sts	0x0166, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    15c8:	8c e0       	ldi	r24, 0x0C	; 12
    15ca:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    15ce:	78 94       	sei
    15d0:	08 95       	ret

000015d2 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    15d2:	80 91 65 01 	lds	r24, 0x0165
}
    15d6:	08 95       	ret

000015d8 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    15d8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    15da:	f8 94       	cli
	if (!usb_configuration) {
    15dc:	80 91 65 01 	lds	r24, 0x0165
    15e0:	81 11       	cpse	r24, r1
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <m_usb_rx_char+0x12>
		SREG = intr_state;
    15e4:	9f bf       	out	0x3f, r25	; 63
		return -1;
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    15f0:	80 91 e8 00 	lds	r24, 0x00E8
    15f4:	85 fd       	sbrc	r24, 5
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    15f8:	9f bf       	out	0x3f, r25	; 63
		return -1;
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    15fe:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    1602:	20 91 e8 00 	lds	r18, 0x00E8
    1606:	25 fd       	sbrc	r18, 5
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <m_usb_rx_char+0x38>
    160a:	2b e6       	ldi	r18, 0x6B	; 107
    160c:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    1610:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    1612:	08 95       	ret

00001614 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
    1614:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1616:	f8 94       	cli
	if (usb_configuration) {
    1618:	80 91 65 01 	lds	r24, 0x0165
    161c:	88 23       	and	r24, r24
    161e:	31 f0       	breq	.+12     	; 0x162c <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
    1626:	80 91 f2 00 	lds	r24, 0x00F2
    162a:	01 c0       	rjmp	.+2      	; 0x162e <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
    162c:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
    162e:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
    1630:	08 95       	ret

00001632 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1632:	80 91 65 01 	lds	r24, 0x0165
    1636:	88 23       	and	r24, r24
    1638:	89 f0       	breq	.+34     	; 0x165c <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    163a:	2f b7       	in	r18, 0x3f	; 63
		cli();
    163c:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    1644:	80 91 e8 00 	lds	r24, 0x00E8
    1648:	85 ff       	sbrs	r24, 5
    164a:	07 c0       	rjmp	.+14     	; 0x165a <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    164c:	e8 ee       	ldi	r30, 0xE8	; 232
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	9b e6       	ldi	r25, 0x6B	; 107
    1652:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    1654:	80 81       	ld	r24, Z
    1656:	85 fd       	sbrc	r24, 5
    1658:	fc cf       	rjmp	.-8      	; 0x1652 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    165a:	2f bf       	out	0x3f, r18	; 63
    165c:	08 95       	ret

0000165e <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1662:	90 91 65 01 	lds	r25, 0x0165
    1666:	99 23       	and	r25, r25
    1668:	09 f4       	brne	.+2      	; 0x166c <m_usb_tx_char+0xe>
    166a:	4d c0       	rjmp	.+154    	; 0x1706 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    166c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    166e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1670:	24 e0       	ldi	r18, 0x04	; 4
    1672:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1676:	20 91 67 01 	lds	r18, 0x0167
    167a:	22 23       	and	r18, r18
    167c:	49 f0       	breq	.+18     	; 0x1690 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    167e:	20 91 e8 00 	lds	r18, 0x00E8
    1682:	25 fd       	sbrc	r18, 5
    1684:	03 c0       	rjmp	.+6      	; 0x168c <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1686:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	42 c0       	rjmp	.+132    	; 0x1710 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    168c:	10 92 67 01 	sts	0x0167, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1690:	30 91 e4 00 	lds	r19, 0x00E4
    1694:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1696:	20 91 e8 00 	lds	r18, 0x00E8
    169a:	25 fd       	sbrc	r18, 5
    169c:	25 c0       	rjmp	.+74     	; 0x16e8 <m_usb_tx_char+0x8a>
		SREG = intr_state;
    169e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    16a0:	90 91 e4 00 	lds	r25, 0x00E4
    16a4:	93 17       	cp	r25, r19
    16a6:	49 f0       	breq	.+18     	; 0x16ba <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    16a8:	90 91 65 01 	lds	r25, 0x0165
    16ac:	91 11       	cpse	r25, r1
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <m_usb_tx_char+0x70>
    16b0:	2c c0       	rjmp	.+88     	; 0x170a <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    16b2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    16b4:	98 81       	ld	r25, Y
    16b6:	93 13       	cpse	r25, r19
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 67 01 	sts	0x0167, r24
			return -1;
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	26 c0       	rjmp	.+76     	; 0x1710 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    16c4:	90 91 65 01 	lds	r25, 0x0165
    16c8:	91 11       	cpse	r25, r1
    16ca:	08 c0       	rjmp	.+16     	; 0x16dc <m_usb_tx_char+0x7e>
    16cc:	20 c0       	rjmp	.+64     	; 0x170e <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    16ce:	a9 ee       	ldi	r26, 0xE9	; 233
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    16d4:	e8 ee       	ldi	r30, 0xE8	; 232
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    16d8:	c4 ee       	ldi	r28, 0xE4	; 228
    16da:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    16dc:	9f b7       	in	r25, 0x3f	; 63
		cli();
    16de:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    16e0:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    16e2:	20 81       	ld	r18, Z
    16e4:	25 ff       	sbrs	r18, 5
    16e6:	e5 cf       	rjmp	.-54     	; 0x16b2 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    16e8:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    16ec:	80 91 e8 00 	lds	r24, 0x00E8
    16f0:	85 fd       	sbrc	r24, 5
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <m_usb_tx_char+0x9c>
    16f4:	8a e3       	ldi	r24, 0x3A	; 58
    16f6:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    16fa:	85 e0       	ldi	r24, 0x05	; 5
    16fc:	80 93 64 01 	sts	0x0164, r24
	SREG = intr_state;
    1700:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <m_usb_tx_char+0xb2>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1728:	e1 ee       	ldi	r30, 0xE1	; 225
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
        UDINT = 0;
    172e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1730:	83 ff       	sbrs	r24, 3
    1732:	11 c0       	rjmp	.+34     	; 0x1756 <__vector_10+0x40>
		UENUM = 0;
    1734:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    173e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1742:	92 e1       	ldi	r25, 0x12	; 18
    1744:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1748:	98 e0       	ldi	r25, 0x08	; 8
    174a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    174e:	10 92 65 01 	sts	0x0165, r1
		cdc_line_rtsdtr = 0;
    1752:	10 92 66 01 	sts	0x0166, r1
        }
	if (intbits & (1<<SOFI)) {
    1756:	82 ff       	sbrs	r24, 2
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <__vector_10+0x6a>
		if (usb_configuration) {
    175a:	80 91 65 01 	lds	r24, 0x0165
    175e:	88 23       	and	r24, r24
    1760:	79 f0       	breq	.+30     	; 0x1780 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1762:	80 91 64 01 	lds	r24, 0x0164
			if (t) {
    1766:	88 23       	and	r24, r24
    1768:	59 f0       	breq	.+22     	; 0x1780 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    176a:	81 50       	subi	r24, 0x01	; 1
    176c:	80 93 64 01 	sts	0x0164, r24
				if (!t) {
    1770:	81 11       	cpse	r24, r1
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    177a:	8a e3       	ldi	r24, 0x3A	; 58
    177c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    17bc:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    17c0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    17c4:	83 ff       	sbrs	r24, 3
    17c6:	51 c1       	rjmp	.+674    	; 0x1a6a <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    17c8:	e1 ef       	ldi	r30, 0xF1	; 241
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    17ce:	40 81       	ld	r20, Z
                wValue = UEDATX;
    17d0:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    17d2:	30 81       	ld	r19, Z
    17d4:	93 2f       	mov	r25, r19
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	dc 01       	movw	r26, r24
    17da:	a2 2b       	or	r26, r18
    17dc:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    17de:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    17e0:	60 81       	ld	r22, Z
    17e2:	96 2f       	mov	r25, r22
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	85 2b       	or	r24, r21
                wLength = UEDATX;
    17e8:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    17ea:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    17ec:	52 ef       	ldi	r21, 0xF2	; 242
    17ee:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    17f2:	46 30       	cpi	r20, 0x06	; 6
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <__vector_11+0x66>
    17f6:	5c c0       	rjmp	.+184    	; 0x18b0 <__vector_11+0x11e>
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    17fa:	81 e2       	ldi	r24, 0x21	; 33
    17fc:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1800:	3b c1       	rjmp	.+630    	; 0x1a78 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1802:	c6 e0       	ldi	r28, 0x06	; 6
    1804:	47 ef       	ldi	r20, 0xF7	; 247
    1806:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1808:	fa 01       	movw	r30, r20
    180a:	65 91       	lpm	r22, Z+
    180c:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    180e:	26 17       	cp	r18, r22
    1810:	37 07       	cpc	r19, r23
    1812:	19 f0       	breq	.+6      	; 0x181a <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1814:	49 5f       	subi	r20, 0xF9	; 249
    1816:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1818:	20 c0       	rjmp	.+64     	; 0x185a <__vector_11+0xc8>
				}
				list += 2;
    181a:	fa 01       	movw	r30, r20
    181c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    181e:	65 91       	lpm	r22, Z+
    1820:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1822:	86 17       	cp	r24, r22
    1824:	97 07       	cpc	r25, r23
    1826:	19 f0       	breq	.+6      	; 0x182e <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    1828:	49 5f       	subi	r20, 0xF9	; 249
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    182c:	16 c0       	rjmp	.+44     	; 0x185a <__vector_11+0xc8>
				}
				list += 2;
    182e:	fa 01       	movw	r30, r20
    1830:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1832:	85 91       	lpm	r24, Z+
    1834:	94 91       	lpm	r25, Z
    1836:	28 2f       	mov	r18, r24
    1838:	39 2f       	mov	r19, r25
				list += 2;
    183a:	fa 01       	movw	r30, r20
    183c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    183e:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1840:	9b 2f       	mov	r25, r27
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1846:	8f 3f       	cpi	r24, 0xFF	; 255
    1848:	91 05       	cpc	r25, r1
    184a:	19 f0       	breq	.+6      	; 0x1852 <__vector_11+0xc0>
    184c:	10 f0       	brcs	.+4      	; 0x1852 <__vector_11+0xc0>
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	84 17       	cp	r24, r20
    1854:	28 f4       	brcc	.+10     	; 0x1860 <__vector_11+0xce>
    1856:	48 2f       	mov	r20, r24
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <__vector_11+0xce>
    185a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    185c:	a9 f6       	brne	.-86     	; 0x1808 <__vector_11+0x76>
    185e:	cd cf       	rjmp	.-102    	; 0x17fa <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1860:	c8 ee       	ldi	r28, 0xE8	; 232
    1862:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1864:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1866:	a1 ef       	ldi	r26, 0xF1	; 241
    1868:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    186a:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    186c:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    186e:	98 2f       	mov	r25, r24
    1870:	95 70       	andi	r25, 0x05	; 5
    1872:	e1 f3       	breq	.-8      	; 0x186c <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    1874:	82 fd       	sbrc	r24, 2
    1876:	00 c1       	rjmp	.+512    	; 0x1a78 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1878:	64 2f       	mov	r22, r20
    187a:	41 31       	cpi	r20, 0x11	; 17
    187c:	08 f0       	brcs	.+2      	; 0x1880 <__vector_11+0xee>
    187e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1880:	66 23       	and	r22, r22
    1882:	09 f4       	brne	.+2      	; 0x1886 <__vector_11+0xf4>
    1884:	f6 c0       	rjmp	.+492    	; 0x1a72 <__vector_11+0x2e0>
    1886:	c9 01       	movw	r24, r18
    1888:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    188a:	fc 01       	movw	r30, r24
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	e4 91       	lpm	r30, Z
    1890:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1892:	51 50       	subi	r21, 0x01	; 1
    1894:	d1 f7       	brne	.-12     	; 0x188a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1896:	86 2f       	mov	r24, r22
    1898:	81 50       	subi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	28 0f       	add	r18, r24
    18a0:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    18a2:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18a4:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    18a6:	41 11       	cpse	r20, r1
    18a8:	e1 cf       	rjmp	.-62     	; 0x186c <__vector_11+0xda>
    18aa:	60 31       	cpi	r22, 0x10	; 16
    18ac:	f9 f2       	breq	.-66     	; 0x186c <__vector_11+0xda>
    18ae:	e4 c0       	rjmp	.+456    	; 0x1a78 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    18b0:	45 30       	cpi	r20, 0x05	; 5
    18b2:	61 f4       	brne	.+24     	; 0x18cc <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18b4:	8e ef       	ldi	r24, 0xFE	; 254
    18b6:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18ba:	e8 ee       	ldi	r30, 0xE8	; 232
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 ff       	sbrs	r24, 0
    18c2:	fd cf       	rjmp	.-6      	; 0x18be <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    18c4:	20 68       	ori	r18, 0x80	; 128
    18c6:	20 93 e3 00 	sts	0x00E3, r18
			return;
    18ca:	d6 c0       	rjmp	.+428    	; 0x1a78 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    18cc:	49 30       	cpi	r20, 0x09	; 9
    18ce:	a1 f5       	brne	.+104    	; 0x1938 <__vector_11+0x1a6>
    18d0:	71 11       	cpse	r23, r1
    18d2:	5b c0       	rjmp	.+182    	; 0x198a <__vector_11+0x1f8>
			usb_configuration = wValue;
    18d4:	20 93 65 01 	sts	0x0165, r18
			cdc_line_rtsdtr = 0;
    18d8:	10 92 66 01 	sts	0x0166, r1
			transmit_flush_timer = 0;
    18dc:	10 92 64 01 	sts	0x0164, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18e0:	8e ef       	ldi	r24, 0xFE	; 254
    18e2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    18e6:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    18e8:	81 e2       	ldi	r24, 0x21	; 33
    18ea:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    18ec:	c9 ee       	ldi	r28, 0xE9	; 233
    18ee:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    18f0:	ab ee       	ldi	r26, 0xEB	; 235
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    18f4:	6c ee       	ldi	r22, 0xEC	; 236
    18f6:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    18f8:	4d ee       	ldi	r20, 0xED	; 237
    18fa:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    18fc:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    18fe:	9c 01       	movw	r18, r24
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	fc 01       	movw	r30, r24
    1906:	04 91       	lpm	r16, Z
				UECONX = en;
    1908:	0c 93       	st	X, r16
				if (en) {
    190a:	00 23       	and	r16, r16
    190c:	59 f0       	breq	.+22     	; 0x1924 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    190e:	f9 01       	movw	r30, r18
    1910:	24 91       	lpm	r18, Z
    1912:	fb 01       	movw	r30, r22
    1914:	20 83       	st	Z, r18
    1916:	fc 01       	movw	r30, r24
    1918:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    191a:	03 96       	adiw	r24, 0x03	; 3
    191c:	24 91       	lpm	r18, Z
    191e:	fa 01       	movw	r30, r20
    1920:	20 83       	st	Z, r18
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1924:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1926:	1f 5f       	subi	r17, 0xFF	; 255
    1928:	15 30       	cpi	r17, 0x05	; 5
    192a:	41 f7       	brne	.-48     	; 0x18fc <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    192c:	ea ee       	ldi	r30, 0xEA	; 234
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8e e1       	ldi	r24, 0x1E	; 30
    1932:	80 83       	st	Z, r24
        		UERST = 0;
    1934:	10 82       	st	Z, r1
			return;
    1936:	a0 c0       	rjmp	.+320    	; 0x1a78 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1938:	48 30       	cpi	r20, 0x08	; 8
    193a:	81 f4       	brne	.+32     	; 0x195c <__vector_11+0x1ca>
    193c:	70 38       	cpi	r23, 0x80	; 128
    193e:	09 f0       	breq	.+2      	; 0x1942 <__vector_11+0x1b0>
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1942:	e8 ee       	ldi	r30, 0xE8	; 232
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 ff       	sbrs	r24, 0
    194a:	fd cf       	rjmp	.-6      	; 0x1946 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    194c:	80 91 65 01 	lds	r24, 0x0165
    1950:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1954:	8e ef       	ldi	r24, 0xFE	; 254
    1956:	80 93 e8 00 	sts	0x00E8, r24
    195a:	8e c0       	rjmp	.+284    	; 0x1a78 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    195c:	41 32       	cpi	r20, 0x21	; 33
    195e:	a9 f4       	brne	.+42     	; 0x198a <__vector_11+0x1f8>
    1960:	71 3a       	cpi	r23, 0xA1	; 161
    1962:	f1 f5       	brne	.+124    	; 0x19e0 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1964:	e8 ee       	ldi	r30, 0xE8	; 232
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 ff       	sbrs	r24, 0
    196c:	fd cf       	rjmp	.-6      	; 0x1968 <__vector_11+0x1d6>
    196e:	e8 e0       	ldi	r30, 0x08	; 8
    1970:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1972:	a1 ef       	ldi	r26, 0xF1	; 241
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	81 91       	ld	r24, Z+
    1978:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	ef 30       	cpi	r30, 0x0F	; 15
    197e:	f4 07       	cpc	r31, r20
    1980:	d1 f7       	brne	.-12     	; 0x1976 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1982:	8e ef       	ldi	r24, 0xFE	; 254
    1984:	80 93 e8 00 	sts	0x00E8, r24
    1988:	77 c0       	rjmp	.+238    	; 0x1a78 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    198a:	40 32       	cpi	r20, 0x20	; 32
    198c:	c9 f4       	brne	.+50     	; 0x19c0 <__vector_11+0x22e>
    198e:	71 32       	cpi	r23, 0x21	; 33
    1990:	09 f0       	breq	.+2      	; 0x1994 <__vector_11+0x202>
    1992:	6b c0       	rjmp	.+214    	; 0x1a6a <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1994:	e8 ee       	ldi	r30, 0xE8	; 232
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	82 ff       	sbrs	r24, 2
    199c:	fd cf       	rjmp	.-6      	; 0x1998 <__vector_11+0x206>
    199e:	e8 e0       	ldi	r30, 0x08	; 8
    19a0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    19a2:	a1 ef       	ldi	r26, 0xF1	; 241
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	8c 91       	ld	r24, X
    19a8:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    19aa:	51 e0       	ldi	r21, 0x01	; 1
    19ac:	ef 30       	cpi	r30, 0x0F	; 15
    19ae:	f5 07       	cpc	r31, r21
    19b0:	d1 f7       	brne	.-12     	; 0x19a6 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    19b2:	e8 ee       	ldi	r30, 0xE8	; 232
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8b ef       	ldi	r24, 0xFB	; 251
    19b8:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19ba:	8e ef       	ldi	r24, 0xFE	; 254
    19bc:	80 83       	st	Z, r24
    19be:	5c c0       	rjmp	.+184    	; 0x1a78 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    19c0:	42 32       	cpi	r20, 0x22	; 34
    19c2:	71 f4       	brne	.+28     	; 0x19e0 <__vector_11+0x24e>
    19c4:	71 32       	cpi	r23, 0x21	; 33
    19c6:	09 f0       	breq	.+2      	; 0x19ca <__vector_11+0x238>
    19c8:	50 c0       	rjmp	.+160    	; 0x1a6a <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    19ca:	20 93 66 01 	sts	0x0166, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    19ce:	e8 ee       	ldi	r30, 0xE8	; 232
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	80 ff       	sbrs	r24, 0
    19d6:	fd cf       	rjmp	.-6      	; 0x19d2 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19d8:	8e ef       	ldi	r24, 0xFE	; 254
    19da:	80 93 e8 00 	sts	0x00E8, r24
    19de:	4c c0       	rjmp	.+152    	; 0x1a78 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    19e0:	41 11       	cpse	r20, r1
    19e2:	1a c0       	rjmp	.+52     	; 0x1a18 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    19e4:	e8 ee       	ldi	r30, 0xE8	; 232
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	20 81       	ld	r18, Z
    19ea:	20 ff       	sbrs	r18, 0
    19ec:	fd cf       	rjmp	.-6      	; 0x19e8 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    19ee:	72 38       	cpi	r23, 0x82	; 130
    19f0:	51 f4       	brne	.+20     	; 0x1a06 <__vector_11+0x274>
				UENUM = wIndex;
    19f2:	e9 ee       	ldi	r30, 0xE9	; 233
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    19f8:	80 91 eb 00 	lds	r24, 0x00EB
    19fc:	85 fb       	bst	r24, 5
    19fe:	88 27       	eor	r24, r24
    1a00:	80 f9       	bld	r24, 0
				UENUM = 0;
    1a02:	10 82       	st	Z, r1
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1a06:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1a08:	e1 ef       	ldi	r30, 0xF1	; 241
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 83       	st	Z, r24
			UEDATX = 0;
    1a0e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a10:	8e ef       	ldi	r24, 0xFE	; 254
    1a12:	80 93 e8 00 	sts	0x00E8, r24
    1a16:	30 c0       	rjmp	.+96     	; 0x1a78 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1a18:	41 30       	cpi	r20, 0x01	; 1
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <__vector_11+0x28e>
    1a1c:	43 30       	cpi	r20, 0x03	; 3
    1a1e:	29 f5       	brne	.+74     	; 0x1a6a <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1a20:	72 30       	cpi	r23, 0x02	; 2
    1a22:	19 f5       	brne	.+70     	; 0x1a6a <__vector_11+0x2d8>
    1a24:	23 2b       	or	r18, r19
    1a26:	09 f5       	brne	.+66     	; 0x1a6a <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1a28:	8f 77       	andi	r24, 0x7F	; 127
    1a2a:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1a2c:	38 2f       	mov	r19, r24
    1a2e:	31 50       	subi	r19, 0x01	; 1
    1a30:	34 30       	cpi	r19, 0x04	; 4
    1a32:	d8 f4       	brcc	.+54     	; 0x1a6a <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a34:	3e ef       	ldi	r19, 0xFE	; 254
    1a36:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1a3a:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1a3e:	43 30       	cpi	r20, 0x03	; 3
    1a40:	21 f4       	brne	.+8      	; 0x1a4a <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1a42:	81 e2       	ldi	r24, 0x21	; 33
    1a44:	80 93 eb 00 	sts	0x00EB, r24
    1a48:	17 c0       	rjmp	.+46     	; 0x1a78 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1a4a:	99 e1       	ldi	r25, 0x19	; 25
    1a4c:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1a50:	21 e0       	ldi	r18, 0x01	; 1
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	d9 01       	movw	r26, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <__vector_11+0x2ca>
    1a58:	aa 0f       	add	r26, r26
    1a5a:	bb 1f       	adc	r27, r27
    1a5c:	8a 95       	dec	r24
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <__vector_11+0x2c6>
    1a60:	ea ee       	ldi	r30, 0xEA	; 234
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	a0 83       	st	Z, r26
					UERST = 0;
    1a66:	10 82       	st	Z, r1
    1a68:	07 c0       	rjmp	.+14     	; 0x1a78 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1a6a:	81 e2       	ldi	r24, 0x21	; 33
    1a6c:	80 93 eb 00 	sts	0x00EB, r24
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a72:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1a74:	41 11       	cpse	r20, r1
    1a76:	fa ce       	rjmp	.-524    	; 0x186c <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	7f 91       	pop	r23
    1a8a:	6f 91       	pop	r22
    1a8c:	5f 91       	pop	r21
    1a8e:	4f 91       	pop	r20
    1a90:	3f 91       	pop	r19
    1a92:	2f 91       	pop	r18
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	1f 90       	pop	r1
    1aa0:	18 95       	reti

00001aa2 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	27 97       	sbiw	r28, 0x07	; 7
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1abe:	8e 01       	movw	r16, r28
    1ac0:	0f 5f       	subi	r16, 0xFF	; 255
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	27 e0       	ldi	r18, 0x07	; 7
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	11 92       	st	Z+, r1
    1aca:	2a 95       	dec	r18
    1acc:	e9 f7       	brne	.-6      	; 0x1ac8 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1ace:	4a e0       	ldi	r20, 0x0A	; 10
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	b8 01       	movw	r22, r16
    1ad4:	0e 94 95 11 	call	0x232a	; 0x232a <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1ad8:	7e 01       	movw	r14, r28
    1ada:	f8 e0       	ldi	r31, 0x08	; 8
    1adc:	ef 0e       	add	r14, r31
    1ade:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	81 91       	ld	r24, Z+
    1ae4:	8f 01       	movw	r16, r30
    1ae6:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1ae8:	0e 94 2f 0b 	call	0x165e	; 0x165e <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1aec:	0e 15       	cp	r16, r14
    1aee:	1f 05       	cpc	r17, r15
    1af0:	b9 f7       	brne	.-18     	; 0x1ae0 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1af2:	27 96       	adiw	r28, 0x07	; 7
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	08 95       	ret

00001b0c <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1b10:	ec eb       	ldi	r30, 0xBC	; 188
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	88 23       	and	r24, r24
    1b18:	34 f0       	brlt	.+12     	; 0x1b26 <twi_wait+0x1a>
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	29 3e       	cpi	r18, 0xE9	; 233
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	38 07       	cpc	r19, r24
    1b24:	b9 f7       	brne	.-18     	; 0x1b14 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	28 3e       	cpi	r18, 0xE8	; 232
    1b2a:	33 40       	sbci	r19, 0x03	; 3
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <twi_wait+0x24>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1b30:	08 95       	ret

00001b32 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1b32:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1b36:	84 e8       	ldi	r24, 0x84	; 132
    1b38:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1b3c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <twi_wait>
    1b40:	88 23       	and	r24, r24
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1b44:	80 91 b9 00 	lds	r24, 0x00B9
    1b48:	88 7f       	andi	r24, 0xF8	; 248
    1b4a:	08 95       	ret
	} else {
		return 0;					// comm failure
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1b4e:	08 95       	ret

00001b50 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1b50:	cf 93       	push	r28
    1b52:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b54:	94 ea       	ldi	r25, 0xA4	; 164
    1b56:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1b5a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <twi_wait>
    1b5e:	88 23       	and	r24, r24
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1b62:	8c 2f       	mov	r24, r28
    1b64:	88 0f       	add	r24, r24
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1b6c:	88 34       	cpi	r24, 0x48	; 72
    1b6e:	39 f4       	brne	.+14     	; 0x1b7e <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b70:	84 e9       	ldi	r24, 0x94	; 148
    1b72:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
}	
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1b84:	cf 93       	push	r28
    1b86:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b88:	94 ea       	ldi	r25, 0xA4	; 164
    1b8a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1b8e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <twi_wait>
    1b92:	88 23       	and	r24, r24
    1b94:	59 f0       	breq	.+22     	; 0x1bac <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1b96:	8c 2f       	mov	r24, r28
    1b98:	88 0f       	add	r24, r24
    1b9a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1b9e:	80 32       	cpi	r24, 0x20	; 32
    1ba0:	39 f4       	brne	.+14     	; 0x1bb0 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1ba2:	84 e9       	ldi	r24, 0x94	; 148
    1ba4:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
}	
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1bb6:	84 e9       	ldi	r24, 0x94	; 148
    1bb8:	80 93 bc 00 	sts	0x00BC, r24
    1bbc:	08 95       	ret

00001bbe <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	60 97       	sbiw	r28, 0x10	; 16
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	e8 2e       	mov	r14, r24
    1bdc:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1bde:	fe 01       	movw	r30, r28
    1be0:	31 96       	adiw	r30, 0x01	; 1
    1be2:	80 e1       	ldi	r24, 0x10	; 16
    1be4:	df 01       	movw	r26, r30
    1be6:	1d 92       	st	X+, r1
    1be8:	8a 95       	dec	r24
    1bea:	e9 f7       	brne	.-6      	; 0x1be6 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1bec:	88 e5       	ldi	r24, 0x58	; 88
    1bee:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <start_write>
    1bf2:	88 23       	and	r24, r24
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <m_wii_read+0x3a>
    1bf6:	66 c0       	rjmp	.+204    	; 0x1cc4 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1bf8:	86 e3       	ldi	r24, 0x36	; 54
    1bfa:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <send_byte>
    1bfe:	88 23       	and	r24, r24
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <m_wii_read+0x46>
    1c02:	62 c0       	rjmp	.+196    	; 0x1cc8 <m_wii_read+0x10a>
	end();
    1c04:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c08:	b8 e0       	ldi	r27, 0x08	; 8
    1c0a:	ba 95       	dec	r27
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <m_wii_read+0x4c>
    1c0e:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1c10:	88 e5       	ldi	r24, 0x58	; 88
    1c12:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <start_read>
    1c16:	88 23       	and	r24, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <m_wii_read+0x5e>
    1c1a:	58 c0       	rjmp	.+176    	; 0x1ccc <m_wii_read+0x10e>
    1c1c:	ae 01       	movw	r20, r28
    1c1e:	4f 5f       	subi	r20, 0xFF	; 255
    1c20:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1c22:	8e 01       	movw	r16, r28
    1c24:	00 5f       	subi	r16, 0xF0	; 240
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1c28:	ec eb       	ldi	r30, 0xBC	; 188
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1c2e:	2b eb       	ldi	r18, 0xBB	; 187
    1c30:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1c32:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1c34:	80 81       	ld	r24, Z
    1c36:	88 23       	and	r24, r24
    1c38:	ec f7       	brge	.-6      	; 0x1c34 <m_wii_read+0x76>
		temp[i] = TWDR;
    1c3a:	d9 01       	movw	r26, r18
    1c3c:	8c 91       	ld	r24, X
    1c3e:	da 01       	movw	r26, r20
    1c40:	8d 93       	st	X+, r24
    1c42:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1c44:	a0 17       	cp	r26, r16
    1c46:	b1 07       	cpc	r27, r17
    1c48:	a1 f7       	brne	.-24     	; 0x1c32 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1c4a:	84 e8       	ldi	r24, 0x84	; 132
    1c4c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1c50:	ec eb       	ldi	r30, 0xBC	; 188
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 23       	and	r24, r24
    1c58:	ec f7       	brge	.-6      	; 0x1c54 <m_wii_read+0x96>
	temp[15] = TWDR;
    1c5a:	80 91 bb 00 	lds	r24, 0x00BB
    1c5e:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1c60:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <end>
    1c64:	de 01       	movw	r26, r28
    1c66:	14 96       	adiw	r26, 0x04	; 4
    1c68:	6e 2d       	mov	r22, r14
    1c6a:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1c6c:	4c 91       	ld	r20, X
    1c6e:	24 2f       	mov	r18, r20
    1c70:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1c72:	cd 01       	movw	r24, r26
    1c74:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1c76:	fc 01       	movw	r30, r24
    1c78:	80 81       	ld	r24, Z
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	f0 e1       	ldi	r31, 0x10	; 16
    1c7e:	2f 9f       	mul	r18, r31
    1c80:	80 0d       	add	r24, r0
    1c82:	91 1d       	adc	r25, r1
    1c84:	11 24       	eor	r1, r1
    1c86:	fb 01       	movw	r30, r22
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1c8c:	84 2f       	mov	r24, r20
    1c8e:	80 7c       	andi	r24, 0xC0	; 192
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1c9a:	9d 01       	movw	r18, r26
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1ca0:	f9 01       	movw	r30, r18
    1ca2:	20 81       	ld	r18, Z
    1ca4:	82 0f       	add	r24, r18
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	fb 01       	movw	r30, r22
    1caa:	93 83       	std	Z+3, r25	; 0x03
    1cac:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1cae:	4f 70       	andi	r20, 0x0F	; 15
    1cb0:	44 83       	std	Z+4, r20	; 0x04
    1cb2:	15 82       	std	Z+5, r1	; 0x05
    1cb4:	13 96       	adiw	r26, 0x03	; 3
    1cb6:	6a 5f       	subi	r22, 0xFA	; 250
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1cba:	0a 17       	cp	r16, r26
    1cbc:	1b 07       	cpc	r17, r27
    1cbe:	b1 f6       	brne	.-84     	; 0x1c6c <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1cce:	60 96       	adiw	r28, 0x10	; 16
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	08 95       	ret

00001ce8 <__subsf3>:
    1ce8:	50 58       	subi	r21, 0x80	; 128

00001cea <__addsf3>:
    1cea:	bb 27       	eor	r27, r27
    1cec:	aa 27       	eor	r26, r26
    1cee:	0e d0       	rcall	.+28     	; 0x1d0c <__addsf3x>
    1cf0:	cc c1       	rjmp	.+920    	; 0x208a <__fp_round>
    1cf2:	95 d1       	rcall	.+810    	; 0x201e <__fp_pscA>
    1cf4:	30 f0       	brcs	.+12     	; 0x1d02 <__addsf3+0x18>
    1cf6:	9a d1       	rcall	.+820    	; 0x202c <__fp_pscB>
    1cf8:	20 f0       	brcs	.+8      	; 0x1d02 <__addsf3+0x18>
    1cfa:	31 f4       	brne	.+12     	; 0x1d08 <__addsf3+0x1e>
    1cfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <__addsf3+0x1a>
    1d00:	1e f4       	brtc	.+6      	; 0x1d08 <__addsf3+0x1e>
    1d02:	65 c1       	rjmp	.+714    	; 0x1fce <__fp_nan>
    1d04:	0e f4       	brtc	.+2      	; 0x1d08 <__addsf3+0x1e>
    1d06:	e0 95       	com	r30
    1d08:	e7 fb       	bst	r30, 7
    1d0a:	5b c1       	rjmp	.+694    	; 0x1fc2 <__fp_inf>

00001d0c <__addsf3x>:
    1d0c:	e9 2f       	mov	r30, r25
    1d0e:	df d1       	rcall	.+958    	; 0x20ce <__fp_split3>
    1d10:	80 f3       	brcs	.-32     	; 0x1cf2 <__addsf3+0x8>
    1d12:	ba 17       	cp	r27, r26
    1d14:	62 07       	cpc	r22, r18
    1d16:	73 07       	cpc	r23, r19
    1d18:	84 07       	cpc	r24, r20
    1d1a:	95 07       	cpc	r25, r21
    1d1c:	18 f0       	brcs	.+6      	; 0x1d24 <__addsf3x+0x18>
    1d1e:	71 f4       	brne	.+28     	; 0x1d3c <__addsf3x+0x30>
    1d20:	9e f5       	brtc	.+102    	; 0x1d88 <__addsf3x+0x7c>
    1d22:	f7 c1       	rjmp	.+1006   	; 0x2112 <__fp_zero>
    1d24:	0e f4       	brtc	.+2      	; 0x1d28 <__addsf3x+0x1c>
    1d26:	e0 95       	com	r30
    1d28:	0b 2e       	mov	r0, r27
    1d2a:	ba 2f       	mov	r27, r26
    1d2c:	a0 2d       	mov	r26, r0
    1d2e:	0b 01       	movw	r0, r22
    1d30:	b9 01       	movw	r22, r18
    1d32:	90 01       	movw	r18, r0
    1d34:	0c 01       	movw	r0, r24
    1d36:	ca 01       	movw	r24, r20
    1d38:	a0 01       	movw	r20, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	ff 27       	eor	r31, r31
    1d3e:	59 1b       	sub	r21, r25
    1d40:	99 f0       	breq	.+38     	; 0x1d68 <__addsf3x+0x5c>
    1d42:	59 3f       	cpi	r21, 0xF9	; 249
    1d44:	50 f4       	brcc	.+20     	; 0x1d5a <__addsf3x+0x4e>
    1d46:	50 3e       	cpi	r21, 0xE0	; 224
    1d48:	68 f1       	brcs	.+90     	; 0x1da4 <__addsf3x+0x98>
    1d4a:	1a 16       	cp	r1, r26
    1d4c:	f0 40       	sbci	r31, 0x00	; 0
    1d4e:	a2 2f       	mov	r26, r18
    1d50:	23 2f       	mov	r18, r19
    1d52:	34 2f       	mov	r19, r20
    1d54:	44 27       	eor	r20, r20
    1d56:	58 5f       	subi	r21, 0xF8	; 248
    1d58:	f3 cf       	rjmp	.-26     	; 0x1d40 <__addsf3x+0x34>
    1d5a:	46 95       	lsr	r20
    1d5c:	37 95       	ror	r19
    1d5e:	27 95       	ror	r18
    1d60:	a7 95       	ror	r26
    1d62:	f0 40       	sbci	r31, 0x00	; 0
    1d64:	53 95       	inc	r21
    1d66:	c9 f7       	brne	.-14     	; 0x1d5a <__addsf3x+0x4e>
    1d68:	7e f4       	brtc	.+30     	; 0x1d88 <__addsf3x+0x7c>
    1d6a:	1f 16       	cp	r1, r31
    1d6c:	ba 0b       	sbc	r27, r26
    1d6e:	62 0b       	sbc	r22, r18
    1d70:	73 0b       	sbc	r23, r19
    1d72:	84 0b       	sbc	r24, r20
    1d74:	ba f0       	brmi	.+46     	; 0x1da4 <__addsf3x+0x98>
    1d76:	91 50       	subi	r25, 0x01	; 1
    1d78:	a1 f0       	breq	.+40     	; 0x1da2 <__addsf3x+0x96>
    1d7a:	ff 0f       	add	r31, r31
    1d7c:	bb 1f       	adc	r27, r27
    1d7e:	66 1f       	adc	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	c2 f7       	brpl	.-16     	; 0x1d76 <__addsf3x+0x6a>
    1d86:	0e c0       	rjmp	.+28     	; 0x1da4 <__addsf3x+0x98>
    1d88:	ba 0f       	add	r27, r26
    1d8a:	62 1f       	adc	r22, r18
    1d8c:	73 1f       	adc	r23, r19
    1d8e:	84 1f       	adc	r24, r20
    1d90:	48 f4       	brcc	.+18     	; 0x1da4 <__addsf3x+0x98>
    1d92:	87 95       	ror	r24
    1d94:	77 95       	ror	r23
    1d96:	67 95       	ror	r22
    1d98:	b7 95       	ror	r27
    1d9a:	f7 95       	ror	r31
    1d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d9e:	08 f0       	brcs	.+2      	; 0x1da2 <__addsf3x+0x96>
    1da0:	b3 cf       	rjmp	.-154    	; 0x1d08 <__addsf3+0x1e>
    1da2:	93 95       	inc	r25
    1da4:	88 0f       	add	r24, r24
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <__addsf3x+0x9e>
    1da8:	99 27       	eor	r25, r25
    1daa:	ee 0f       	add	r30, r30
    1dac:	97 95       	ror	r25
    1dae:	87 95       	ror	r24
    1db0:	08 95       	ret
    1db2:	35 d1       	rcall	.+618    	; 0x201e <__fp_pscA>
    1db4:	58 f0       	brcs	.+22     	; 0x1dcc <__addsf3x+0xc0>
    1db6:	80 e8       	ldi	r24, 0x80	; 128
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <__addsf3x+0xb2>
    1dbc:	9e ef       	ldi	r25, 0xFE	; 254
    1dbe:	36 d1       	rcall	.+620    	; 0x202c <__fp_pscB>
    1dc0:	28 f0       	brcs	.+10     	; 0x1dcc <__addsf3x+0xc0>
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	51 e0       	ldi	r21, 0x01	; 1
    1dc6:	59 f4       	brne	.+22     	; 0x1dde <atan2+0xe>
    1dc8:	5e ef       	ldi	r21, 0xFE	; 254
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <atan2+0xe>
    1dcc:	00 c1       	rjmp	.+512    	; 0x1fce <__fp_nan>
    1dce:	a1 c1       	rjmp	.+834    	; 0x2112 <__fp_zero>

00001dd0 <atan2>:
    1dd0:	e9 2f       	mov	r30, r25
    1dd2:	e0 78       	andi	r30, 0x80	; 128
    1dd4:	7c d1       	rcall	.+760    	; 0x20ce <__fp_split3>
    1dd6:	68 f3       	brcs	.-38     	; 0x1db2 <__addsf3x+0xa6>
    1dd8:	09 2e       	mov	r0, r25
    1dda:	05 2a       	or	r0, r21
    1ddc:	c1 f3       	breq	.-16     	; 0x1dce <__addsf3x+0xc2>
    1dde:	26 17       	cp	r18, r22
    1de0:	37 07       	cpc	r19, r23
    1de2:	48 07       	cpc	r20, r24
    1de4:	59 07       	cpc	r21, r25
    1de6:	38 f0       	brcs	.+14     	; 0x1df6 <atan2+0x26>
    1de8:	0e 2e       	mov	r0, r30
    1dea:	07 f8       	bld	r0, 7
    1dec:	e0 25       	eor	r30, r0
    1dee:	69 f0       	breq	.+26     	; 0x1e0a <atan2+0x3a>
    1df0:	e0 25       	eor	r30, r0
    1df2:	e0 64       	ori	r30, 0x40	; 64
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <atan2+0x3a>
    1df6:	ef 63       	ori	r30, 0x3F	; 63
    1df8:	07 f8       	bld	r0, 7
    1dfa:	00 94       	com	r0
    1dfc:	07 fa       	bst	r0, 7
    1dfe:	db 01       	movw	r26, r22
    1e00:	b9 01       	movw	r22, r18
    1e02:	9d 01       	movw	r18, r26
    1e04:	dc 01       	movw	r26, r24
    1e06:	ca 01       	movw	r24, r20
    1e08:	ad 01       	movw	r20, r26
    1e0a:	ef 93       	push	r30
    1e0c:	44 d0       	rcall	.+136    	; 0x1e96 <__divsf3_pse>
    1e0e:	3d d1       	rcall	.+634    	; 0x208a <__fp_round>
    1e10:	0a d0       	rcall	.+20     	; 0x1e26 <atan>
    1e12:	5f 91       	pop	r21
    1e14:	55 23       	and	r21, r21
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <atan2+0x54>
    1e18:	2b ed       	ldi	r18, 0xDB	; 219
    1e1a:	3f e0       	ldi	r19, 0x0F	; 15
    1e1c:	49 e4       	ldi	r20, 0x49	; 73
    1e1e:	50 fd       	sbrc	r21, 0
    1e20:	49 ec       	ldi	r20, 0xC9	; 201
    1e22:	63 cf       	rjmp	.-314    	; 0x1cea <__addsf3>
    1e24:	08 95       	ret

00001e26 <atan>:
    1e26:	df 93       	push	r29
    1e28:	dd 27       	eor	r29, r29
    1e2a:	b9 2f       	mov	r27, r25
    1e2c:	bf 77       	andi	r27, 0x7F	; 127
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	16 16       	cp	r1, r22
    1e34:	17 06       	cpc	r1, r23
    1e36:	48 07       	cpc	r20, r24
    1e38:	5b 07       	cpc	r21, r27
    1e3a:	10 f4       	brcc	.+4      	; 0x1e40 <atan+0x1a>
    1e3c:	d9 2f       	mov	r29, r25
    1e3e:	74 d1       	rcall	.+744    	; 0x2128 <inverse>
    1e40:	9f 93       	push	r25
    1e42:	8f 93       	push	r24
    1e44:	7f 93       	push	r23
    1e46:	6f 93       	push	r22
    1e48:	21 d2       	rcall	.+1090   	; 0x228c <square>
    1e4a:	ec ea       	ldi	r30, 0xAC	; 172
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	c2 d0       	rcall	.+388    	; 0x1fd4 <__fp_powser>
    1e50:	1c d1       	rcall	.+568    	; 0x208a <__fp_round>
    1e52:	2f 91       	pop	r18
    1e54:	3f 91       	pop	r19
    1e56:	4f 91       	pop	r20
    1e58:	5f 91       	pop	r21
    1e5a:	79 d1       	rcall	.+754    	; 0x214e <__mulsf3x>
    1e5c:	dd 23       	and	r29, r29
    1e5e:	49 f0       	breq	.+18     	; 0x1e72 <atan+0x4c>
    1e60:	90 58       	subi	r25, 0x80	; 128
    1e62:	a2 ea       	ldi	r26, 0xA2	; 162
    1e64:	2a ed       	ldi	r18, 0xDA	; 218
    1e66:	3f e0       	ldi	r19, 0x0F	; 15
    1e68:	49 ec       	ldi	r20, 0xC9	; 201
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	d0 78       	andi	r29, 0x80	; 128
    1e6e:	5d 27       	eor	r21, r29
    1e70:	4d df       	rcall	.-358    	; 0x1d0c <__addsf3x>
    1e72:	df 91       	pop	r29
    1e74:	0a c1       	rjmp	.+532    	; 0x208a <__fp_round>

00001e76 <cos>:
    1e76:	e2 d0       	rcall	.+452    	; 0x203c <__fp_rempio2>
    1e78:	e3 95       	inc	r30
    1e7a:	18 c1       	rjmp	.+560    	; 0x20ac <__fp_sinus>
    1e7c:	d7 d0       	rcall	.+430    	; 0x202c <__fp_pscB>
    1e7e:	40 f0       	brcs	.+16     	; 0x1e90 <cos+0x1a>
    1e80:	ce d0       	rcall	.+412    	; 0x201e <__fp_pscA>
    1e82:	30 f0       	brcs	.+12     	; 0x1e90 <cos+0x1a>
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <cos+0x18>
    1e86:	5f 3f       	cpi	r21, 0xFF	; 255
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <cos+0x1a>
    1e8a:	9b c0       	rjmp	.+310    	; 0x1fc2 <__fp_inf>
    1e8c:	51 11       	cpse	r21, r1
    1e8e:	42 c1       	rjmp	.+644    	; 0x2114 <__fp_szero>
    1e90:	9e c0       	rjmp	.+316    	; 0x1fce <__fp_nan>

00001e92 <__divsf3x>:
    1e92:	1d d1       	rcall	.+570    	; 0x20ce <__fp_split3>
    1e94:	98 f3       	brcs	.-26     	; 0x1e7c <cos+0x6>

00001e96 <__divsf3_pse>:
    1e96:	99 23       	and	r25, r25
    1e98:	c9 f3       	breq	.-14     	; 0x1e8c <cos+0x16>
    1e9a:	55 23       	and	r21, r21
    1e9c:	b1 f3       	breq	.-20     	; 0x1e8a <cos+0x14>
    1e9e:	95 1b       	sub	r25, r21
    1ea0:	55 0b       	sbc	r21, r21
    1ea2:	bb 27       	eor	r27, r27
    1ea4:	aa 27       	eor	r26, r26
    1ea6:	62 17       	cp	r22, r18
    1ea8:	73 07       	cpc	r23, r19
    1eaa:	84 07       	cpc	r24, r20
    1eac:	38 f0       	brcs	.+14     	; 0x1ebc <__divsf3_pse+0x26>
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	44 1f       	adc	r20, r20
    1eb8:	aa 1f       	adc	r26, r26
    1eba:	a9 f3       	breq	.-22     	; 0x1ea6 <__divsf3_pse+0x10>
    1ebc:	33 d0       	rcall	.+102    	; 0x1f24 <__divsf3_pse+0x8e>
    1ebe:	0e 2e       	mov	r0, r30
    1ec0:	3a f0       	brmi	.+14     	; 0x1ed0 <__divsf3_pse+0x3a>
    1ec2:	e0 e8       	ldi	r30, 0x80	; 128
    1ec4:	30 d0       	rcall	.+96     	; 0x1f26 <__divsf3_pse+0x90>
    1ec6:	91 50       	subi	r25, 0x01	; 1
    1ec8:	50 40       	sbci	r21, 0x00	; 0
    1eca:	e6 95       	lsr	r30
    1ecc:	00 1c       	adc	r0, r0
    1ece:	ca f7       	brpl	.-14     	; 0x1ec2 <__divsf3_pse+0x2c>
    1ed0:	29 d0       	rcall	.+82     	; 0x1f24 <__divsf3_pse+0x8e>
    1ed2:	fe 2f       	mov	r31, r30
    1ed4:	27 d0       	rcall	.+78     	; 0x1f24 <__divsf3_pse+0x8e>
    1ed6:	66 0f       	add	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	bb 1f       	adc	r27, r27
    1ede:	26 17       	cp	r18, r22
    1ee0:	37 07       	cpc	r19, r23
    1ee2:	48 07       	cpc	r20, r24
    1ee4:	ab 07       	cpc	r26, r27
    1ee6:	b0 e8       	ldi	r27, 0x80	; 128
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <__divsf3_pse+0x56>
    1eea:	bb 0b       	sbc	r27, r27
    1eec:	80 2d       	mov	r24, r0
    1eee:	bf 01       	movw	r22, r30
    1ef0:	ff 27       	eor	r31, r31
    1ef2:	93 58       	subi	r25, 0x83	; 131
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	2a f0       	brmi	.+10     	; 0x1f02 <__divsf3_pse+0x6c>
    1ef8:	9e 3f       	cpi	r25, 0xFE	; 254
    1efa:	51 05       	cpc	r21, r1
    1efc:	68 f0       	brcs	.+26     	; 0x1f18 <__divsf3_pse+0x82>
    1efe:	61 c0       	rjmp	.+194    	; 0x1fc2 <__fp_inf>
    1f00:	09 c1       	rjmp	.+530    	; 0x2114 <__fp_szero>
    1f02:	5f 3f       	cpi	r21, 0xFF	; 255
    1f04:	ec f3       	brlt	.-6      	; 0x1f00 <__divsf3_pse+0x6a>
    1f06:	98 3e       	cpi	r25, 0xE8	; 232
    1f08:	dc f3       	brlt	.-10     	; 0x1f00 <__divsf3_pse+0x6a>
    1f0a:	86 95       	lsr	r24
    1f0c:	77 95       	ror	r23
    1f0e:	67 95       	ror	r22
    1f10:	b7 95       	ror	r27
    1f12:	f7 95       	ror	r31
    1f14:	9f 5f       	subi	r25, 0xFF	; 255
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__divsf3_pse+0x74>
    1f18:	88 0f       	add	r24, r24
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	96 95       	lsr	r25
    1f1e:	87 95       	ror	r24
    1f20:	97 f9       	bld	r25, 7
    1f22:	08 95       	ret
    1f24:	e1 e0       	ldi	r30, 0x01	; 1
    1f26:	66 0f       	add	r22, r22
    1f28:	77 1f       	adc	r23, r23
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	bb 1f       	adc	r27, r27
    1f2e:	62 17       	cp	r22, r18
    1f30:	73 07       	cpc	r23, r19
    1f32:	84 07       	cpc	r24, r20
    1f34:	ba 07       	cpc	r27, r26
    1f36:	20 f0       	brcs	.+8      	; 0x1f40 <__divsf3_pse+0xaa>
    1f38:	62 1b       	sub	r22, r18
    1f3a:	73 0b       	sbc	r23, r19
    1f3c:	84 0b       	sbc	r24, r20
    1f3e:	ba 0b       	sbc	r27, r26
    1f40:	ee 1f       	adc	r30, r30
    1f42:	88 f7       	brcc	.-30     	; 0x1f26 <__divsf3_pse+0x90>
    1f44:	e0 95       	com	r30
    1f46:	08 95       	ret

00001f48 <__floatunsisf>:
    1f48:	e8 94       	clt
    1f4a:	09 c0       	rjmp	.+18     	; 0x1f5e <__floatsisf+0x12>

00001f4c <__floatsisf>:
    1f4c:	97 fb       	bst	r25, 7
    1f4e:	3e f4       	brtc	.+14     	; 0x1f5e <__floatsisf+0x12>
    1f50:	90 95       	com	r25
    1f52:	80 95       	com	r24
    1f54:	70 95       	com	r23
    1f56:	61 95       	neg	r22
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5e:	99 23       	and	r25, r25
    1f60:	a9 f0       	breq	.+42     	; 0x1f8c <__floatsisf+0x40>
    1f62:	f9 2f       	mov	r31, r25
    1f64:	96 e9       	ldi	r25, 0x96	; 150
    1f66:	bb 27       	eor	r27, r27
    1f68:	93 95       	inc	r25
    1f6a:	f6 95       	lsr	r31
    1f6c:	87 95       	ror	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b7 95       	ror	r27
    1f74:	f1 11       	cpse	r31, r1
    1f76:	f8 cf       	rjmp	.-16     	; 0x1f68 <__floatsisf+0x1c>
    1f78:	fa f4       	brpl	.+62     	; 0x1fb8 <__floatsisf+0x6c>
    1f7a:	bb 0f       	add	r27, r27
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <__floatsisf+0x36>
    1f7e:	60 ff       	sbrs	r22, 0
    1f80:	1b c0       	rjmp	.+54     	; 0x1fb8 <__floatsisf+0x6c>
    1f82:	6f 5f       	subi	r22, 0xFF	; 255
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	8f 4f       	sbci	r24, 0xFF	; 255
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	16 c0       	rjmp	.+44     	; 0x1fb8 <__floatsisf+0x6c>
    1f8c:	88 23       	and	r24, r24
    1f8e:	11 f0       	breq	.+4      	; 0x1f94 <__floatsisf+0x48>
    1f90:	96 e9       	ldi	r25, 0x96	; 150
    1f92:	11 c0       	rjmp	.+34     	; 0x1fb6 <__floatsisf+0x6a>
    1f94:	77 23       	and	r23, r23
    1f96:	21 f0       	breq	.+8      	; 0x1fa0 <__floatsisf+0x54>
    1f98:	9e e8       	ldi	r25, 0x8E	; 142
    1f9a:	87 2f       	mov	r24, r23
    1f9c:	76 2f       	mov	r23, r22
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <__floatsisf+0x5e>
    1fa0:	66 23       	and	r22, r22
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <__floatsisf+0x74>
    1fa4:	96 e8       	ldi	r25, 0x86	; 134
    1fa6:	86 2f       	mov	r24, r22
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	2a f0       	brmi	.+10     	; 0x1fb8 <__floatsisf+0x6c>
    1fae:	9a 95       	dec	r25
    1fb0:	66 0f       	add	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	da f7       	brpl	.-10     	; 0x1fae <__floatsisf+0x62>
    1fb8:	88 0f       	add	r24, r24
    1fba:	96 95       	lsr	r25
    1fbc:	87 95       	ror	r24
    1fbe:	97 f9       	bld	r25, 7
    1fc0:	08 95       	ret

00001fc2 <__fp_inf>:
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	9f 67       	ori	r25, 0x7F	; 127
    1fc6:	80 e8       	ldi	r24, 0x80	; 128
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <__fp_nan>:
    1fce:	9f ef       	ldi	r25, 0xFF	; 255
    1fd0:	80 ec       	ldi	r24, 0xC0	; 192
    1fd2:	08 95       	ret

00001fd4 <__fp_powser>:
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	1f 93       	push	r17
    1fda:	0f 93       	push	r16
    1fdc:	ff 92       	push	r15
    1fde:	ef 92       	push	r14
    1fe0:	df 92       	push	r13
    1fe2:	7b 01       	movw	r14, r22
    1fe4:	8c 01       	movw	r16, r24
    1fe6:	68 94       	set
    1fe8:	05 c0       	rjmp	.+10     	; 0x1ff4 <__fp_powser+0x20>
    1fea:	da 2e       	mov	r13, r26
    1fec:	ef 01       	movw	r28, r30
    1fee:	af d0       	rcall	.+350    	; 0x214e <__mulsf3x>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e8 94       	clt
    1ff4:	a5 91       	lpm	r26, Z+
    1ff6:	25 91       	lpm	r18, Z+
    1ff8:	35 91       	lpm	r19, Z+
    1ffa:	45 91       	lpm	r20, Z+
    1ffc:	55 91       	lpm	r21, Z+
    1ffe:	ae f3       	brts	.-22     	; 0x1fea <__fp_powser+0x16>
    2000:	ef 01       	movw	r28, r30
    2002:	84 de       	rcall	.-760    	; 0x1d0c <__addsf3x>
    2004:	fe 01       	movw	r30, r28
    2006:	97 01       	movw	r18, r14
    2008:	a8 01       	movw	r20, r16
    200a:	da 94       	dec	r13
    200c:	79 f7       	brne	.-34     	; 0x1fec <__fp_powser+0x18>
    200e:	df 90       	pop	r13
    2010:	ef 90       	pop	r14
    2012:	ff 90       	pop	r15
    2014:	0f 91       	pop	r16
    2016:	1f 91       	pop	r17
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <__fp_pscA>:
    201e:	00 24       	eor	r0, r0
    2020:	0a 94       	dec	r0
    2022:	16 16       	cp	r1, r22
    2024:	17 06       	cpc	r1, r23
    2026:	18 06       	cpc	r1, r24
    2028:	09 06       	cpc	r0, r25
    202a:	08 95       	ret

0000202c <__fp_pscB>:
    202c:	00 24       	eor	r0, r0
    202e:	0a 94       	dec	r0
    2030:	12 16       	cp	r1, r18
    2032:	13 06       	cpc	r1, r19
    2034:	14 06       	cpc	r1, r20
    2036:	05 06       	cpc	r0, r21
    2038:	08 95       	ret
    203a:	c9 cf       	rjmp	.-110    	; 0x1fce <__fp_nan>

0000203c <__fp_rempio2>:
    203c:	50 d0       	rcall	.+160    	; 0x20de <__fp_splitA>
    203e:	e8 f3       	brcs	.-6      	; 0x203a <__fp_pscB+0xe>
    2040:	e8 94       	clt
    2042:	e0 e0       	ldi	r30, 0x00	; 0
    2044:	bb 27       	eor	r27, r27
    2046:	9f 57       	subi	r25, 0x7F	; 127
    2048:	f0 f0       	brcs	.+60     	; 0x2086 <__fp_rempio2+0x4a>
    204a:	2a ed       	ldi	r18, 0xDA	; 218
    204c:	3f e0       	ldi	r19, 0x0F	; 15
    204e:	49 ec       	ldi	r20, 0xC9	; 201
    2050:	06 c0       	rjmp	.+12     	; 0x205e <__fp_rempio2+0x22>
    2052:	ee 0f       	add	r30, r30
    2054:	bb 0f       	add	r27, r27
    2056:	66 1f       	adc	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	88 1f       	adc	r24, r24
    205c:	28 f0       	brcs	.+10     	; 0x2068 <__fp_rempio2+0x2c>
    205e:	b2 3a       	cpi	r27, 0xA2	; 162
    2060:	62 07       	cpc	r22, r18
    2062:	73 07       	cpc	r23, r19
    2064:	84 07       	cpc	r24, r20
    2066:	28 f0       	brcs	.+10     	; 0x2072 <__fp_rempio2+0x36>
    2068:	b2 5a       	subi	r27, 0xA2	; 162
    206a:	62 0b       	sbc	r22, r18
    206c:	73 0b       	sbc	r23, r19
    206e:	84 0b       	sbc	r24, r20
    2070:	e3 95       	inc	r30
    2072:	9a 95       	dec	r25
    2074:	72 f7       	brpl	.-36     	; 0x2052 <__fp_rempio2+0x16>
    2076:	80 38       	cpi	r24, 0x80	; 128
    2078:	30 f4       	brcc	.+12     	; 0x2086 <__fp_rempio2+0x4a>
    207a:	9a 95       	dec	r25
    207c:	bb 0f       	add	r27, r27
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	d2 f7       	brpl	.-12     	; 0x207a <__fp_rempio2+0x3e>
    2086:	90 48       	sbci	r25, 0x80	; 128
    2088:	2c c1       	rjmp	.+600    	; 0x22e2 <__fp_mpack_finite>

0000208a <__fp_round>:
    208a:	09 2e       	mov	r0, r25
    208c:	03 94       	inc	r0
    208e:	00 0c       	add	r0, r0
    2090:	11 f4       	brne	.+4      	; 0x2096 <__fp_round+0xc>
    2092:	88 23       	and	r24, r24
    2094:	52 f0       	brmi	.+20     	; 0x20aa <__fp_round+0x20>
    2096:	bb 0f       	add	r27, r27
    2098:	40 f4       	brcc	.+16     	; 0x20aa <__fp_round+0x20>
    209a:	bf 2b       	or	r27, r31
    209c:	11 f4       	brne	.+4      	; 0x20a2 <__fp_round+0x18>
    209e:	60 ff       	sbrs	r22, 0
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <__fp_round+0x20>
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	8f 4f       	sbci	r24, 0xFF	; 255
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	08 95       	ret

000020ac <__fp_sinus>:
    20ac:	ef 93       	push	r30
    20ae:	e0 ff       	sbrs	r30, 0
    20b0:	06 c0       	rjmp	.+12     	; 0x20be <__fp_sinus+0x12>
    20b2:	a2 ea       	ldi	r26, 0xA2	; 162
    20b4:	2a ed       	ldi	r18, 0xDA	; 218
    20b6:	3f e0       	ldi	r19, 0x0F	; 15
    20b8:	49 ec       	ldi	r20, 0xC9	; 201
    20ba:	5f eb       	ldi	r21, 0xBF	; 191
    20bc:	27 de       	rcall	.-946    	; 0x1d0c <__addsf3x>
    20be:	e5 df       	rcall	.-54     	; 0x208a <__fp_round>
    20c0:	0f 90       	pop	r0
    20c2:	03 94       	inc	r0
    20c4:	01 fc       	sbrc	r0, 1
    20c6:	90 58       	subi	r25, 0x80	; 128
    20c8:	e9 ed       	ldi	r30, 0xD9	; 217
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	1d c1       	rjmp	.+570    	; 0x2308 <__fp_powsodd>

000020ce <__fp_split3>:
    20ce:	57 fd       	sbrc	r21, 7
    20d0:	90 58       	subi	r25, 0x80	; 128
    20d2:	44 0f       	add	r20, r20
    20d4:	55 1f       	adc	r21, r21
    20d6:	59 f0       	breq	.+22     	; 0x20ee <__fp_splitA+0x10>
    20d8:	5f 3f       	cpi	r21, 0xFF	; 255
    20da:	71 f0       	breq	.+28     	; 0x20f8 <__fp_splitA+0x1a>
    20dc:	47 95       	ror	r20

000020de <__fp_splitA>:
    20de:	88 0f       	add	r24, r24
    20e0:	97 fb       	bst	r25, 7
    20e2:	99 1f       	adc	r25, r25
    20e4:	61 f0       	breq	.+24     	; 0x20fe <__fp_splitA+0x20>
    20e6:	9f 3f       	cpi	r25, 0xFF	; 255
    20e8:	79 f0       	breq	.+30     	; 0x2108 <__fp_splitA+0x2a>
    20ea:	87 95       	ror	r24
    20ec:	08 95       	ret
    20ee:	12 16       	cp	r1, r18
    20f0:	13 06       	cpc	r1, r19
    20f2:	14 06       	cpc	r1, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	f2 cf       	rjmp	.-28     	; 0x20dc <__fp_split3+0xe>
    20f8:	46 95       	lsr	r20
    20fa:	f1 df       	rcall	.-30     	; 0x20de <__fp_splitA>
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <__fp_splitA+0x30>
    20fe:	16 16       	cp	r1, r22
    2100:	17 06       	cpc	r1, r23
    2102:	18 06       	cpc	r1, r24
    2104:	99 1f       	adc	r25, r25
    2106:	f1 cf       	rjmp	.-30     	; 0x20ea <__fp_splitA+0xc>
    2108:	86 95       	lsr	r24
    210a:	71 05       	cpc	r23, r1
    210c:	61 05       	cpc	r22, r1
    210e:	08 94       	sec
    2110:	08 95       	ret

00002112 <__fp_zero>:
    2112:	e8 94       	clt

00002114 <__fp_szero>:
    2114:	bb 27       	eor	r27, r27
    2116:	66 27       	eor	r22, r22
    2118:	77 27       	eor	r23, r23
    211a:	cb 01       	movw	r24, r22
    211c:	97 f9       	bld	r25, 7
    211e:	08 95       	ret

00002120 <__gesf2>:
    2120:	ba d0       	rcall	.+372    	; 0x2296 <__fp_cmp>
    2122:	08 f4       	brcc	.+2      	; 0x2126 <__gesf2+0x6>
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	08 95       	ret

00002128 <inverse>:
    2128:	9b 01       	movw	r18, r22
    212a:	ac 01       	movw	r20, r24
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	80 e8       	ldi	r24, 0x80	; 128
    2132:	9f e3       	ldi	r25, 0x3F	; 63
    2134:	ae c0       	rjmp	.+348    	; 0x2292 <__divsf3>

00002136 <__mulsf3>:
    2136:	0b d0       	rcall	.+22     	; 0x214e <__mulsf3x>
    2138:	a8 cf       	rjmp	.-176    	; 0x208a <__fp_round>
    213a:	71 df       	rcall	.-286    	; 0x201e <__fp_pscA>
    213c:	28 f0       	brcs	.+10     	; 0x2148 <__mulsf3+0x12>
    213e:	76 df       	rcall	.-276    	; 0x202c <__fp_pscB>
    2140:	18 f0       	brcs	.+6      	; 0x2148 <__mulsf3+0x12>
    2142:	95 23       	and	r25, r21
    2144:	09 f0       	breq	.+2      	; 0x2148 <__mulsf3+0x12>
    2146:	3d cf       	rjmp	.-390    	; 0x1fc2 <__fp_inf>
    2148:	42 cf       	rjmp	.-380    	; 0x1fce <__fp_nan>
    214a:	11 24       	eor	r1, r1
    214c:	e3 cf       	rjmp	.-58     	; 0x2114 <__fp_szero>

0000214e <__mulsf3x>:
    214e:	bf df       	rcall	.-130    	; 0x20ce <__fp_split3>
    2150:	a0 f3       	brcs	.-24     	; 0x213a <__mulsf3+0x4>

00002152 <__mulsf3_pse>:
    2152:	95 9f       	mul	r25, r21
    2154:	d1 f3       	breq	.-12     	; 0x214a <__mulsf3+0x14>
    2156:	95 0f       	add	r25, r21
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	55 1f       	adc	r21, r21
    215c:	62 9f       	mul	r22, r18
    215e:	f0 01       	movw	r30, r0
    2160:	72 9f       	mul	r23, r18
    2162:	bb 27       	eor	r27, r27
    2164:	f0 0d       	add	r31, r0
    2166:	b1 1d       	adc	r27, r1
    2168:	63 9f       	mul	r22, r19
    216a:	aa 27       	eor	r26, r26
    216c:	f0 0d       	add	r31, r0
    216e:	b1 1d       	adc	r27, r1
    2170:	aa 1f       	adc	r26, r26
    2172:	64 9f       	mul	r22, r20
    2174:	66 27       	eor	r22, r22
    2176:	b0 0d       	add	r27, r0
    2178:	a1 1d       	adc	r26, r1
    217a:	66 1f       	adc	r22, r22
    217c:	82 9f       	mul	r24, r18
    217e:	22 27       	eor	r18, r18
    2180:	b0 0d       	add	r27, r0
    2182:	a1 1d       	adc	r26, r1
    2184:	62 1f       	adc	r22, r18
    2186:	73 9f       	mul	r23, r19
    2188:	b0 0d       	add	r27, r0
    218a:	a1 1d       	adc	r26, r1
    218c:	62 1f       	adc	r22, r18
    218e:	83 9f       	mul	r24, r19
    2190:	a0 0d       	add	r26, r0
    2192:	61 1d       	adc	r22, r1
    2194:	22 1f       	adc	r18, r18
    2196:	74 9f       	mul	r23, r20
    2198:	33 27       	eor	r19, r19
    219a:	a0 0d       	add	r26, r0
    219c:	61 1d       	adc	r22, r1
    219e:	23 1f       	adc	r18, r19
    21a0:	84 9f       	mul	r24, r20
    21a2:	60 0d       	add	r22, r0
    21a4:	21 1d       	adc	r18, r1
    21a6:	82 2f       	mov	r24, r18
    21a8:	76 2f       	mov	r23, r22
    21aa:	6a 2f       	mov	r22, r26
    21ac:	11 24       	eor	r1, r1
    21ae:	9f 57       	subi	r25, 0x7F	; 127
    21b0:	50 40       	sbci	r21, 0x00	; 0
    21b2:	8a f0       	brmi	.+34     	; 0x21d6 <__mulsf3_pse+0x84>
    21b4:	e1 f0       	breq	.+56     	; 0x21ee <__mulsf3_pse+0x9c>
    21b6:	88 23       	and	r24, r24
    21b8:	4a f0       	brmi	.+18     	; 0x21cc <__mulsf3_pse+0x7a>
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	bb 1f       	adc	r27, r27
    21c0:	66 1f       	adc	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	91 50       	subi	r25, 0x01	; 1
    21c8:	50 40       	sbci	r21, 0x00	; 0
    21ca:	a9 f7       	brne	.-22     	; 0x21b6 <__mulsf3_pse+0x64>
    21cc:	9e 3f       	cpi	r25, 0xFE	; 254
    21ce:	51 05       	cpc	r21, r1
    21d0:	70 f0       	brcs	.+28     	; 0x21ee <__mulsf3_pse+0x9c>
    21d2:	f7 ce       	rjmp	.-530    	; 0x1fc2 <__fp_inf>
    21d4:	9f cf       	rjmp	.-194    	; 0x2114 <__fp_szero>
    21d6:	5f 3f       	cpi	r21, 0xFF	; 255
    21d8:	ec f3       	brlt	.-6      	; 0x21d4 <__mulsf3_pse+0x82>
    21da:	98 3e       	cpi	r25, 0xE8	; 232
    21dc:	dc f3       	brlt	.-10     	; 0x21d4 <__mulsf3_pse+0x82>
    21de:	86 95       	lsr	r24
    21e0:	77 95       	ror	r23
    21e2:	67 95       	ror	r22
    21e4:	b7 95       	ror	r27
    21e6:	f7 95       	ror	r31
    21e8:	e7 95       	ror	r30
    21ea:	9f 5f       	subi	r25, 0xFF	; 255
    21ec:	c1 f7       	brne	.-16     	; 0x21de <__mulsf3_pse+0x8c>
    21ee:	fe 2b       	or	r31, r30
    21f0:	88 0f       	add	r24, r24
    21f2:	91 1d       	adc	r25, r1
    21f4:	96 95       	lsr	r25
    21f6:	87 95       	ror	r24
    21f8:	97 f9       	bld	r25, 7
    21fa:	08 95       	ret

000021fc <sin>:
    21fc:	9f 93       	push	r25
    21fe:	1e df       	rcall	.-452    	; 0x203c <__fp_rempio2>
    2200:	0f 90       	pop	r0
    2202:	07 fc       	sbrc	r0, 7
    2204:	ee 5f       	subi	r30, 0xFE	; 254
    2206:	52 cf       	rjmp	.-348    	; 0x20ac <__fp_sinus>
    2208:	11 f4       	brne	.+4      	; 0x220e <sin+0x12>
    220a:	0e f4       	brtc	.+2      	; 0x220e <sin+0x12>
    220c:	e0 ce       	rjmp	.-576    	; 0x1fce <__fp_nan>
    220e:	67 c0       	rjmp	.+206    	; 0x22de <__fp_mpack>

00002210 <sqrt>:
    2210:	66 df       	rcall	.-308    	; 0x20de <__fp_splitA>
    2212:	d0 f3       	brcs	.-12     	; 0x2208 <sin+0xc>
    2214:	99 23       	and	r25, r25
    2216:	d9 f3       	breq	.-10     	; 0x220e <sin+0x12>
    2218:	ce f3       	brts	.-14     	; 0x220c <sin+0x10>
    221a:	9f 57       	subi	r25, 0x7F	; 127
    221c:	55 0b       	sbc	r21, r21
    221e:	87 ff       	sbrs	r24, 7
    2220:	6c d0       	rcall	.+216    	; 0x22fa <__fp_norm2>
    2222:	00 24       	eor	r0, r0
    2224:	a0 e6       	ldi	r26, 0x60	; 96
    2226:	40 ea       	ldi	r20, 0xA0	; 160
    2228:	90 01       	movw	r18, r0
    222a:	80 58       	subi	r24, 0x80	; 128
    222c:	56 95       	lsr	r21
    222e:	97 95       	ror	r25
    2230:	28 f4       	brcc	.+10     	; 0x223c <sqrt+0x2c>
    2232:	80 5c       	subi	r24, 0xC0	; 192
    2234:	66 0f       	add	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	20 f0       	brcs	.+8      	; 0x2244 <sqrt+0x34>
    223c:	26 17       	cp	r18, r22
    223e:	37 07       	cpc	r19, r23
    2240:	48 07       	cpc	r20, r24
    2242:	30 f4       	brcc	.+12     	; 0x2250 <sqrt+0x40>
    2244:	62 1b       	sub	r22, r18
    2246:	73 0b       	sbc	r23, r19
    2248:	84 0b       	sbc	r24, r20
    224a:	20 29       	or	r18, r0
    224c:	31 29       	or	r19, r1
    224e:	4a 2b       	or	r20, r26
    2250:	a6 95       	lsr	r26
    2252:	17 94       	ror	r1
    2254:	07 94       	ror	r0
    2256:	20 25       	eor	r18, r0
    2258:	31 25       	eor	r19, r1
    225a:	4a 27       	eor	r20, r26
    225c:	58 f7       	brcc	.-42     	; 0x2234 <sqrt+0x24>
    225e:	66 0f       	add	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	20 f0       	brcs	.+8      	; 0x226e <sqrt+0x5e>
    2266:	26 17       	cp	r18, r22
    2268:	37 07       	cpc	r19, r23
    226a:	48 07       	cpc	r20, r24
    226c:	30 f4       	brcc	.+12     	; 0x227a <sqrt+0x6a>
    226e:	62 0b       	sbc	r22, r18
    2270:	73 0b       	sbc	r23, r19
    2272:	84 0b       	sbc	r24, r20
    2274:	20 0d       	add	r18, r0
    2276:	31 1d       	adc	r19, r1
    2278:	41 1d       	adc	r20, r1
    227a:	a0 95       	com	r26
    227c:	81 f7       	brne	.-32     	; 0x225e <sqrt+0x4e>
    227e:	b9 01       	movw	r22, r18
    2280:	84 2f       	mov	r24, r20
    2282:	91 58       	subi	r25, 0x81	; 129
    2284:	88 0f       	add	r24, r24
    2286:	96 95       	lsr	r25
    2288:	87 95       	ror	r24
    228a:	08 95       	ret

0000228c <square>:
    228c:	9b 01       	movw	r18, r22
    228e:	ac 01       	movw	r20, r24
    2290:	52 cf       	rjmp	.-348    	; 0x2136 <__mulsf3>

00002292 <__divsf3>:
    2292:	ff dd       	rcall	.-1026   	; 0x1e92 <__divsf3x>
    2294:	fa ce       	rjmp	.-524    	; 0x208a <__fp_round>

00002296 <__fp_cmp>:
    2296:	99 0f       	add	r25, r25
    2298:	00 08       	sbc	r0, r0
    229a:	55 0f       	add	r21, r21
    229c:	aa 0b       	sbc	r26, r26
    229e:	e0 e8       	ldi	r30, 0x80	; 128
    22a0:	fe ef       	ldi	r31, 0xFE	; 254
    22a2:	16 16       	cp	r1, r22
    22a4:	17 06       	cpc	r1, r23
    22a6:	e8 07       	cpc	r30, r24
    22a8:	f9 07       	cpc	r31, r25
    22aa:	c0 f0       	brcs	.+48     	; 0x22dc <__fp_cmp+0x46>
    22ac:	12 16       	cp	r1, r18
    22ae:	13 06       	cpc	r1, r19
    22b0:	e4 07       	cpc	r30, r20
    22b2:	f5 07       	cpc	r31, r21
    22b4:	98 f0       	brcs	.+38     	; 0x22dc <__fp_cmp+0x46>
    22b6:	62 1b       	sub	r22, r18
    22b8:	73 0b       	sbc	r23, r19
    22ba:	84 0b       	sbc	r24, r20
    22bc:	95 0b       	sbc	r25, r21
    22be:	39 f4       	brne	.+14     	; 0x22ce <__fp_cmp+0x38>
    22c0:	0a 26       	eor	r0, r26
    22c2:	61 f0       	breq	.+24     	; 0x22dc <__fp_cmp+0x46>
    22c4:	23 2b       	or	r18, r19
    22c6:	24 2b       	or	r18, r20
    22c8:	25 2b       	or	r18, r21
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <__fp_cmp+0x3e>
    22cc:	08 95       	ret
    22ce:	0a 26       	eor	r0, r26
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <__fp_cmp+0x3e>
    22d2:	a1 40       	sbci	r26, 0x01	; 1
    22d4:	a6 95       	lsr	r26
    22d6:	8f ef       	ldi	r24, 0xFF	; 255
    22d8:	81 1d       	adc	r24, r1
    22da:	81 1d       	adc	r24, r1
    22dc:	08 95       	ret

000022de <__fp_mpack>:
    22de:	9f 3f       	cpi	r25, 0xFF	; 255
    22e0:	31 f0       	breq	.+12     	; 0x22ee <__fp_mpack_finite+0xc>

000022e2 <__fp_mpack_finite>:
    22e2:	91 50       	subi	r25, 0x01	; 1
    22e4:	20 f4       	brcc	.+8      	; 0x22ee <__fp_mpack_finite+0xc>
    22e6:	87 95       	ror	r24
    22e8:	77 95       	ror	r23
    22ea:	67 95       	ror	r22
    22ec:	b7 95       	ror	r27
    22ee:	88 0f       	add	r24, r24
    22f0:	91 1d       	adc	r25, r1
    22f2:	96 95       	lsr	r25
    22f4:	87 95       	ror	r24
    22f6:	97 f9       	bld	r25, 7
    22f8:	08 95       	ret

000022fa <__fp_norm2>:
    22fa:	91 50       	subi	r25, 0x01	; 1
    22fc:	50 40       	sbci	r21, 0x00	; 0
    22fe:	66 0f       	add	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	d2 f7       	brpl	.-12     	; 0x22fa <__fp_norm2>
    2306:	08 95       	ret

00002308 <__fp_powsodd>:
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	7f 93       	push	r23
    230e:	6f 93       	push	r22
    2310:	ff 93       	push	r31
    2312:	ef 93       	push	r30
    2314:	9b 01       	movw	r18, r22
    2316:	ac 01       	movw	r20, r24
    2318:	0e df       	rcall	.-484    	; 0x2136 <__mulsf3>
    231a:	ef 91       	pop	r30
    231c:	ff 91       	pop	r31
    231e:	5a de       	rcall	.-844    	; 0x1fd4 <__fp_powser>
    2320:	2f 91       	pop	r18
    2322:	3f 91       	pop	r19
    2324:	4f 91       	pop	r20
    2326:	5f 91       	pop	r21
    2328:	06 cf       	rjmp	.-500    	; 0x2136 <__mulsf3>

0000232a <itoa>:
    232a:	fb 01       	movw	r30, r22
    232c:	9f 01       	movw	r18, r30
    232e:	e8 94       	clt
    2330:	42 30       	cpi	r20, 0x02	; 2
    2332:	c4 f0       	brlt	.+48     	; 0x2364 <itoa+0x3a>
    2334:	45 32       	cpi	r20, 0x25	; 37
    2336:	b4 f4       	brge	.+44     	; 0x2364 <itoa+0x3a>
    2338:	4a 30       	cpi	r20, 0x0A	; 10
    233a:	29 f4       	brne	.+10     	; 0x2346 <itoa+0x1c>
    233c:	97 fb       	bst	r25, 7
    233e:	1e f4       	brtc	.+6      	; 0x2346 <itoa+0x1c>
    2340:	90 95       	com	r25
    2342:	81 95       	neg	r24
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	64 2f       	mov	r22, r20
    2348:	77 27       	eor	r23, r23
    234a:	0e 94 c6 11 	call	0x238c	; 0x238c <__udivmodhi4>
    234e:	80 5d       	subi	r24, 0xD0	; 208
    2350:	8a 33       	cpi	r24, 0x3A	; 58
    2352:	0c f0       	brlt	.+2      	; 0x2356 <itoa+0x2c>
    2354:	89 5d       	subi	r24, 0xD9	; 217
    2356:	81 93       	st	Z+, r24
    2358:	cb 01       	movw	r24, r22
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	a1 f7       	brne	.-24     	; 0x2346 <itoa+0x1c>
    235e:	16 f4       	brtc	.+4      	; 0x2364 <itoa+0x3a>
    2360:	5d e2       	ldi	r21, 0x2D	; 45
    2362:	51 93       	st	Z+, r21
    2364:	10 82       	st	Z, r1
    2366:	c9 01       	movw	r24, r18
    2368:	0c 94 b6 11 	jmp	0x236c	; 0x236c <strrev>

0000236c <strrev>:
    236c:	dc 01       	movw	r26, r24
    236e:	fc 01       	movw	r30, r24
    2370:	67 2f       	mov	r22, r23
    2372:	71 91       	ld	r23, Z+
    2374:	77 23       	and	r23, r23
    2376:	e1 f7       	brne	.-8      	; 0x2370 <strrev+0x4>
    2378:	32 97       	sbiw	r30, 0x02	; 2
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <strrev+0x18>
    237c:	7c 91       	ld	r23, X
    237e:	6d 93       	st	X+, r22
    2380:	70 83       	st	Z, r23
    2382:	62 91       	ld	r22, -Z
    2384:	ae 17       	cp	r26, r30
    2386:	bf 07       	cpc	r27, r31
    2388:	c8 f3       	brcs	.-14     	; 0x237c <strrev+0x10>
    238a:	08 95       	ret

0000238c <__udivmodhi4>:
    238c:	aa 1b       	sub	r26, r26
    238e:	bb 1b       	sub	r27, r27
    2390:	51 e1       	ldi	r21, 0x11	; 17
    2392:	07 c0       	rjmp	.+14     	; 0x23a2 <__udivmodhi4_ep>

00002394 <__udivmodhi4_loop>:
    2394:	aa 1f       	adc	r26, r26
    2396:	bb 1f       	adc	r27, r27
    2398:	a6 17       	cp	r26, r22
    239a:	b7 07       	cpc	r27, r23
    239c:	10 f0       	brcs	.+4      	; 0x23a2 <__udivmodhi4_ep>
    239e:	a6 1b       	sub	r26, r22
    23a0:	b7 0b       	sbc	r27, r23

000023a2 <__udivmodhi4_ep>:
    23a2:	88 1f       	adc	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	5a 95       	dec	r21
    23a8:	a9 f7       	brne	.-22     	; 0x2394 <__udivmodhi4_loop>
    23aa:	80 95       	com	r24
    23ac:	90 95       	com	r25
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	08 95       	ret

000023b4 <_exit>:
    23b4:	f8 94       	cli

000023b6 <__stop_program>:
    23b6:	ff cf       	rjmp	.-2      	; 0x23b6 <__stop_program>
