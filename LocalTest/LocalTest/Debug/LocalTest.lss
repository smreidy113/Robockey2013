
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ba6  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800108  00800108  00000c42  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000548e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000290  00000000  00000000  000054bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000255f  00000000  00000000  0000574d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a5e  00000000  00000000  00007cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000109c  00000000  00000000  0000870a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000824  00000000  00000000  000097a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007b1  00000000  00000000  00009fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b6e  00000000  00000000  0000a77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000298  00000000  00000000  0000d2eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_3>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_10>
  2c:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	int exit = 0;
	distmax = 0;
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	distmin = 30000;
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
  bc:	00 00 35 01 04 01 03 09 04 39 01 12 02 03 09 04     ..5......9......
  cc:	4d 01 06 03 03 09 04 55 01 08                       M......U..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
 149:	65 00 00 00                                         e...

0000014d <string2>:
 14d:	06 03 4d 00 32 00 00 00                             ..M.2...

00000155 <string3>:
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
 155:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e6 ea       	ldi	r30, 0xA6	; 166
 174:	fb e0       	ldi	r31, 0x0B	; 11
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a3 33       	cpi	r26, 0x33	; 51
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
 196:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <rotate>:
 19e:	20 91 88 00 	lds	r18, 0x0088
 1a2:	30 91 89 00 	lds	r19, 0x0089
 1a6:	30 93 8b 00 	sts	0x008B, r19
 1aa:	20 93 8a 00 	sts	0x008A, r18
 1ae:	20 91 96 00 	lds	r18, 0x0096
 1b2:	30 91 97 00 	lds	r19, 0x0097
 1b6:	30 93 99 00 	sts	0x0099, r19
 1ba:	20 93 98 00 	sts	0x0098, r18
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <rotate+0x2a>
 1c2:	2a 9a       	sbi	0x05, 2	; 5
 1c4:	2b 98       	cbi	0x05, 3	; 5
 1c6:	08 95       	ret
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <rotate+0x32>
 1cc:	2a 98       	cbi	0x05, 2	; 5
 1ce:	2b 9a       	sbi	0x05, 3	; 5
 1d0:	08 95       	ret

000001d2 <main>:
 1d2:	55 9a       	sbi	0x0a, 5	; 10
 1d4:	0e 94 01 02 	call	0x402	; 0x402 <m_bus_init>
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	68 e0       	ldi	r22, 0x08	; 8
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 12 02 	call	0x424	; 0x424 <m_rf_open>
 1e2:	e1 e6       	ldi	r30, 0x61	; 97
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	80 83       	st	Z, r24
 1ea:	10 82       	st	Z, r1
 1ec:	85 b5       	in	r24, 0x25	; 37
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	85 bd       	out	0x25, r24	; 37
 1f2:	84 b5       	in	r24, 0x24	; 36
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	84 bd       	out	0x24, r24	; 36
 1f8:	84 b5       	in	r24, 0x24	; 36
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	84 bd       	out	0x24, r24	; 36
 1fe:	84 b5       	in	r24, 0x24	; 36
					if (dist > distmax) {
 200:	80 62       	ori	r24, 0x20	; 32
 202:	84 bd       	out	0x24, r24	; 36
 204:	84 b5       	in	r24, 0x24	; 36
 206:	8f 7e       	andi	r24, 0xEF	; 239
 208:	84 bd       	out	0x24, r24	; 36
 20a:	85 b5       	in	r24, 0x25	; 37
 20c:	84 60       	ori	r24, 0x04	; 4
 20e:	85 bd       	out	0x25, r24	; 37
 210:	85 b5       	in	r24, 0x25	; 37
 212:	82 60       	ori	r24, 0x02	; 2
 214:	85 bd       	out	0x25, r24	; 37
 216:	85 b5       	in	r24, 0x25	; 37
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	85 bd       	out	0x25, r24	; 37
 21c:	27 9a       	sbi	0x04, 7	; 4
 21e:	8f ef       	ldi	r24, 0xFF	; 255
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
 220:	87 bd       	out	0x27, r24	; 39
 222:	18 bc       	out	0x28, r1	; 40
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	80 83       	st	Z, r24
 22e:	80 81       	ld	r24, Z
 230:	88 60       	ori	r24, 0x08	; 8
 232:	80 83       	st	Z, r24
 234:	a0 e8       	ldi	r26, 0x80	; 128
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	8c 91       	ld	r24, X
 23a:	82 60       	ori	r24, 0x02	; 2
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
 23c:	8c 93       	st	X, r24
 23e:	8c 91       	ld	r24, X
 240:	81 60       	ori	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
 244:	8c 91       	ld	r24, X
 246:	80 62       	ori	r24, 0x20	; 32
 248:	8c 93       	st	X, r24
 24a:	8c 91       	ld	r24, X
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
 24c:	8f 7e       	andi	r24, 0xEF	; 239
 24e:	8c 93       	st	X, r24
 250:	80 81       	ld	r24, Z
 252:	8b 7f       	andi	r24, 0xFB	; 251
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
 254:	80 83       	st	Z, r24
 256:	80 81       	ld	r24, Z
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	80 83       	st	Z, r24
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	26 9a       	sbi	0x04, 6	; 4
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	9f ef       	ldi	r25, 0xFF	; 255
 268:	90 93 89 00 	sts	0x0089, r25
 26c:	80 93 88 00 	sts	0x0088, r24
						distmin = dist;
						close1 = i;
						close2 = j;
 270:	10 92 8b 00 	sts	0x008B, r1
 274:	10 92 8a 00 	sts	0x008A, r1
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
 278:	e1 e9       	ldi	r30, 0x91	; 145
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	20 81       	ld	r18, Z
 27e:	20 61       	ori	r18, 0x10	; 16
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
 280:	20 83       	st	Z, r18
 282:	20 81       	ld	r18, Z
 284:	28 60       	ori	r18, 0x08	; 8
 286:	20 83       	st	Z, r18
 288:	a0 e9       	ldi	r26, 0x90	; 144
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	2c 91       	ld	r18, X
 28e:	22 60       	ori	r18, 0x02	; 2
 290:	2c 93       	st	X, r18
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
 292:	2c 91       	ld	r18, X
 294:	2e 7f       	andi	r18, 0xFE	; 254
 296:	2c 93       	st	X, r18
 298:	2c 91       	ld	r18, X
 29a:	20 68       	ori	r18, 0x80	; 128
 29c:	2c 93       	st	X, r18
 29e:	2c 91       	ld	r18, X
 2a0:	2f 7b       	andi	r18, 0xBF	; 191
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
 2a2:	2c 93       	st	X, r18
 2a4:	20 81       	ld	r18, Z
 2a6:	2b 7f       	andi	r18, 0xFB	; 251
 2a8:	20 83       	st	Z, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	2d 7f       	andi	r18, 0xFD	; 253
 2ae:	20 83       	st	Z, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	21 60       	ori	r18, 0x01	; 1
 2b4:	20 83       	st	Z, r18
				for (int j = i; j < 4; j++) {
 2b6:	90 93 97 00 	sts	0x0097, r25
 2ba:	80 93 96 00 	sts	0x0096, r24
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
 2be:	10 92 99 00 	sts	0x0099, r1
 2c2:	10 92 98 00 	sts	0x0098, r1
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
 2c6:	27 9a       	sbi	0x04, 7	; 4
 2c8:	26 9a       	sbi	0x04, 6	; 4
 2ca:	3e 9a       	sbi	0x07, 6	; 7
 2cc:	22 9a       	sbi	0x04, 2	; 4
 2ce:	23 9a       	sbi	0x04, 3	; 4
 2d0:	78 94       	sei
 2d2:	ea e7       	ldi	r30, 0x7A	; 122
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	80 83       	st	Z, r24
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
 2dc:	ac e7       	ldi	r26, 0x7C	; 124
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	8f 77       	andi	r24, 0x7F	; 127
 2e4:	8c 93       	st	X, r24
 2e6:	8c 91       	ld	r24, X
 2e8:	8f 7b       	andi	r24, 0xBF	; 191
 2ea:	8c 93       	st	X, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	80 83       	st	Z, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	82 60       	ori	r24, 0x02	; 2
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
 2f6:	80 83       	st	Z, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	80 83       	st	Z, r24
 2fe:	ae e7       	ldi	r26, 0x7E	; 126
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	8c 91       	ld	r24, X
 304:	81 60       	ori	r24, 0x01	; 1
 306:	8c 93       	st	X, r24
 308:	8c 91       	ld	r24, X
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	8c 93       	st	X, r24
 30e:	8c 91       	ld	r24, X
 310:	80 61       	ori	r24, 0x10	; 16
 312:	8c 93       	st	X, r24
 314:	8c 91       	ld	r24, X
 316:	80 62       	ori	r24, 0x20	; 32
 318:	8c 93       	st	X, r24
 31a:	8c 91       	ld	r24, X
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	8c 93       	st	X, r24
 320:	ad e7       	ldi	r26, 0x7D	; 125
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	8c 91       	ld	r24, X
 326:	81 60       	ori	r24, 0x01	; 1
 328:	8c 93       	st	X, r24
 32a:	8c 91       	ld	r24, X
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	8c 93       	st	X, r24
 330:	80 81       	ld	r24, Z
 332:	80 62       	ori	r24, 0x20	; 32
 334:	80 83       	st	Z, r24
 336:	80 81       	ld	r24, Z
 338:	80 61       	ori	r24, 0x10	; 16
 33a:	80 83       	st	Z, r24
 33c:	20 98       	cbi	0x04, 0	; 4
 33e:	21 98       	cbi	0x04, 1	; 4
 340:	28 98       	cbi	0x05, 0	; 5
 342:	29 98       	cbi	0x05, 1	; 5
 344:	8e ef       	ldi	r24, 0xFE	; 254
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	90 93 09 01 	sts	0x0109, r25
 34c:	80 93 08 01 	sts	0x0108, r24
 350:	0e 94 01 02 	call	0x402	; 0x402 <m_bus_init>
 354:	0e 94 ce 04 	call	0x99c	; 0x99c <m_wii_open>
 358:	ce ef       	ldi	r28, 0xFE	; 254
 35a:	df ef       	ldi	r29, 0xFF	; 255
 35c:	10 e4       	ldi	r17, 0x40	; 64
 35e:	d0 93 09 01 	sts	0x0109, r29
 362:	c0 93 08 01 	sts	0x0108, r28
 366:	6e 9a       	sbi	0x0d, 6	; 13
 368:	8e b1       	in	r24, 0x0e	; 14
 36a:	81 27       	eor	r24, r17
 36c:	8e b9       	out	0x0e, r24	; 14
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 cf 00 	call	0x19e	; 0x19e <rotate>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	83 ed       	ldi	r24, 0xD3	; 211
 37a:	90 e3       	ldi	r25, 0x30	; 48
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x1aa>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x1b4>
 386:	00 00       	nop
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 cf 00 	call	0x19e	; 0x19e <rotate>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	83 ed       	ldi	r24, 0xD3	; 211
 394:	90 e3       	ldi	r25, 0x30	; 48
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x1c4>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x1ce>
 3a0:	00 00       	nop
 3a2:	dd cf       	rjmp	.-70     	; 0x35e <main+0x18c>

000003a4 <__vector_3>:
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
				top = far1;
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
				bottom = far2;
 3c6:	f8 94       	cli
 3c8:	6a e0       	ldi	r22, 0x0A	; 10
 3ca:	8d e0       	ldi	r24, 0x0D	; 13
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 68 02 	call	0x4d0	; 0x4d0 <m_rf_read>
 3d2:	80 91 0d 01 	lds	r24, 0x010D
				right = close2;
 3d6:	80 93 08 01 	sts	0x0108, r24
 3da:	10 92 09 01 	sts	0x0109, r1
 3de:	78 94       	sei
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <m_bus_init>:
 402:	58 9a       	sbi	0x0b, 0	; 11
			}
			else if (far1 == close2) {
 404:	59 9a       	sbi	0x0b, 1	; 11
 406:	5a 9a       	sbi	0x0b, 2	; 11
 408:	8c e0       	ldi	r24, 0x0C	; 12
 40a:	80 93 b8 00 	sts	0x00B8, r24
				top = far1;
 40e:	e9 e6       	ldi	r30, 0x69	; 105
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	80 62       	ori	r24, 0x20	; 32
				bottom = far2;
 416:	80 83       	st	Z, r24
 418:	80 81       	ld	r24, Z
 41a:	8f 7e       	andi	r24, 0xEF	; 239
 41c:	80 83       	st	Z, r24
 41e:	ea 9a       	sbi	0x1d, 2	; 29
 420:	78 94       	sei
 422:	08 95       	ret

00000424 <m_rf_open>:
 424:	1f 93       	push	r17
				right = close1;
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	18 2f       	mov	r17, r24
 42c:	d6 2f       	mov	r29, r22
				left = 9 - top - bottom - right;
 42e:	c4 2f       	mov	r28, r20
 430:	0e 94 01 02 	call	0x402	; 0x402 <m_bus_init>
 434:	94 ea       	ldi	r25, 0xA4	; 164
 436:	90 93 bc 00 	sts	0x00BC, r25
 43a:	ec eb       	ldi	r30, 0xBC	; 188
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	90 81       	ld	r25, Z
 440:	99 23       	and	r25, r25
 442:	ec f7       	brge	.-6      	; 0x43e <m_rf_open+0x1a>
 444:	90 e5       	ldi	r25, 0x50	; 80
 446:	90 93 bb 00 	sts	0x00BB, r25
 44a:	94 e8       	ldi	r25, 0x84	; 132
			}
			else if (far2 == close1) {
 44c:	90 93 bc 00 	sts	0x00BC, r25
 450:	ec eb       	ldi	r30, 0xBC	; 188
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	90 81       	ld	r25, Z
 456:	99 23       	and	r25, r25
 458:	ec f7       	brge	.-6      	; 0x454 <m_rf_open+0x30>
				top = far2;
 45a:	90 91 b9 00 	lds	r25, 0x00B9
 45e:	98 7f       	andi	r25, 0xF8	; 248
 460:	90 32       	cpi	r25, 0x20	; 32
				bottom = far1;
 462:	29 f4       	brne	.+10     	; 0x46e <m_rf_open+0x4a>
 464:	84 e9       	ldi	r24, 0x94	; 148
 466:	80 93 bc 00 	sts	0x00BC, r24
				right = close2;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	2d c0       	rjmp	.+90     	; 0x4c8 <m_rf_open+0xa4>
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 bb 00 	sts	0x00BB, r24
 474:	84 e8       	ldi	r24, 0x84	; 132
				left = 9 - top - bottom - right;
 476:	80 93 bc 00 	sts	0x00BC, r24
 47a:	ec eb       	ldi	r30, 0xBC	; 188
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	90 81       	ld	r25, Z
 480:	99 23       	and	r25, r25
 482:	ec f7       	brge	.-6      	; 0x47e <m_rf_open+0x5a>
 484:	10 93 bb 00 	sts	0x00BB, r17
 488:	84 e8       	ldi	r24, 0x84	; 132
 48a:	80 93 bc 00 	sts	0x00BC, r24
 48e:	ec eb       	ldi	r30, 0xBC	; 188
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	88 23       	and	r24, r24
 496:	ec f7       	brge	.-6      	; 0x492 <m_rf_open+0x6e>
 498:	d0 93 bb 00 	sts	0x00BB, r29
			}
			else {
				top = far2;
 49c:	84 e8       	ldi	r24, 0x84	; 132
 49e:	80 93 bc 00 	sts	0x00BC, r24
				bottom = far1;
 4a2:	ec eb       	ldi	r30, 0xBC	; 188
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	88 23       	and	r24, r24
				right = close1;
 4aa:	ec f7       	brge	.-6      	; 0x4a6 <m_rf_open+0x82>
 4ac:	c0 93 bb 00 	sts	0x00BB, r28
 4b0:	84 e8       	ldi	r24, 0x84	; 132
				left = 9 - top - bottom - right;
 4b2:	80 93 bc 00 	sts	0x00BC, r24
 4b6:	ec eb       	ldi	r30, 0xBC	; 188
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	88 23       	and	r24, r24
 4be:	ec f7       	brge	.-6      	; 0x4ba <m_rf_open+0x96>
 4c0:	84 e9       	ldi	r24, 0x94	; 148
 4c2:	80 93 bc 00 	sts	0x00BC, r24
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	08 95       	ret

000004d0 <m_rf_read>:
			}
		}
	}
	return 1;
}
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	24 ea       	ldi	r18, 0xA4	; 164
 4d6:	20 93 bc 00 	sts	0x00BC, r18
 4da:	ec eb       	ldi	r30, 0xBC	; 188
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	20 81       	ld	r18, Z
 4e0:	22 23       	and	r18, r18
 4e2:	ec f7       	brge	.-6      	; 0x4de <m_rf_read+0xe>
 4e4:	21 e5       	ldi	r18, 0x51	; 81
 4e6:	20 93 bb 00 	sts	0x00BB, r18
 4ea:	24 e8       	ldi	r18, 0x84	; 132
 4ec:	20 93 bc 00 	sts	0x00BC, r18
 4f0:	ec eb       	ldi	r30, 0xBC	; 188
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	20 81       	ld	r18, Z
 4f6:	22 23       	and	r18, r18
 4f8:	ec f7       	brge	.-6      	; 0x4f4 <m_rf_read+0x24>
 4fa:	20 91 b9 00 	lds	r18, 0x00B9
 4fe:	28 7f       	andi	r18, 0xF8	; 248
 500:	28 34       	cpi	r18, 0x48	; 72
 502:	29 f4       	brne	.+10     	; 0x50e <m_rf_read+0x3e>
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 504:	84 e9       	ldi	r24, 0x94	; 148
 506:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	3f c0       	rjmp	.+126    	; 0x58c <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 50e:	24 ec       	ldi	r18, 0xC4	; 196
 510:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 514:	ec eb       	ldi	r30, 0xBC	; 188
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	20 81       	ld	r18, Z
 51a:	22 23       	and	r18, r18
 51c:	ec f7       	brge	.-6      	; 0x518 <m_rf_read+0x48>
	bytes = TWDR;
 51e:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
 522:	46 13       	cpse	r20, r22
 524:	09 c0       	rjmp	.+18     	; 0x538 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	41 50       	subi	r20, 0x01	; 1
 52a:	51 09       	sbc	r21, r1
 52c:	14 16       	cp	r1, r20
 52e:	15 06       	cpc	r1, r21
 530:	44 f0       	brlt	.+16     	; 0x542 <m_rf_read+0x72>
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	18 c0       	rjmp	.+48     	; 0x568 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 538:	84 e9       	ldi	r24, 0x94	; 148
 53a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	25 c0       	rjmp	.+74     	; 0x58c <m_rf_read+0xbc>
 542:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 548:	ec eb       	ldi	r30, 0xBC	; 188
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 54e:	cb eb       	ldi	r28, 0xBB	; 187
 550:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 552:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 554:	60 81       	ld	r22, Z
 556:	66 23       	and	r22, r22
 558:	ec f7       	brge	.-6      	; 0x554 <m_rf_read+0x84>
		buffer[i] = TWDR;
 55a:	68 81       	ld	r22, Y
 55c:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 55e:	2f 5f       	subi	r18, 0xFF	; 255
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	24 17       	cp	r18, r20
 564:	35 07       	cpc	r19, r21
 566:	ac f3       	brlt	.-22     	; 0x552 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 568:	24 e8       	ldi	r18, 0x84	; 132
 56a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 56e:	ec eb       	ldi	r30, 0xBC	; 188
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	20 81       	ld	r18, Z
 574:	22 23       	and	r18, r18
 576:	ec f7       	brge	.-6      	; 0x572 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
 578:	20 91 bb 00 	lds	r18, 0x00BB
 57c:	fc 01       	movw	r30, r24
 57e:	e4 0f       	add	r30, r20
 580:	f5 1f       	adc	r31, r21
 582:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 584:	84 e9       	ldi	r24, 0x94	; 148
 586:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
 58a:	81 e0       	ldi	r24, 0x01	; 1
}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 5a4:	e1 ee       	ldi	r30, 0xE1	; 225
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
        UDINT = 0;
 5aa:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 5ac:	83 ff       	sbrs	r24, 3
 5ae:	11 c0       	rjmp	.+34     	; 0x5d2 <__vector_10+0x40>
		UENUM = 0;
 5b0:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 5ba:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 5be:	92 e1       	ldi	r25, 0x12	; 18
 5c0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 5c4:	98 e0       	ldi	r25, 0x08	; 8
 5c6:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 5ca:	10 92 0b 01 	sts	0x010B, r1
		cdc_line_rtsdtr = 0;
 5ce:	10 92 0c 01 	sts	0x010C, r1
        }
	if (intbits & (1<<SOFI)) {
 5d2:	82 ff       	sbrs	r24, 2
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <__vector_10+0x6a>
		if (usb_configuration) {
 5d6:	80 91 0b 01 	lds	r24, 0x010B
 5da:	88 23       	and	r24, r24
 5dc:	79 f0       	breq	.+30     	; 0x5fc <__vector_10+0x6a>
			t = transmit_flush_timer;
 5de:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
 5e2:	88 23       	and	r24, r24
 5e4:	59 f0       	breq	.+22     	; 0x5fc <__vector_10+0x6a>
				transmit_flush_timer = --t;
 5e6:	81 50       	subi	r24, 0x01	; 1
 5e8:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
 5ec:	81 11       	cpse	r24, r1
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 5f0:	84 e0       	ldi	r24, 0x04	; 4
 5f2:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 5f6:	8a e3       	ldi	r24, 0x3A	; 58
 5f8:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 638:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 63c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 640:	83 ff       	sbrs	r24, 3
 642:	51 c1       	rjmp	.+674    	; 0x8e6 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
 644:	e1 ef       	ldi	r30, 0xF1	; 241
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	70 81       	ld	r23, Z
                bRequest = UEDATX;
 64a:	40 81       	ld	r20, Z
                wValue = UEDATX;
 64c:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 64e:	30 81       	ld	r19, Z
 650:	93 2f       	mov	r25, r19
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	dc 01       	movw	r26, r24
 656:	a2 2b       	or	r26, r18
 658:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
 65a:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
 65c:	60 81       	ld	r22, Z
 65e:	96 2f       	mov	r25, r22
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	85 2b       	or	r24, r21
                wLength = UEDATX;
 664:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
 666:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 668:	52 ef       	ldi	r21, 0xF2	; 242
 66a:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
 66e:	46 30       	cpi	r20, 0x06	; 6
 670:	09 f0       	breq	.+2      	; 0x674 <__vector_11+0x66>
 672:	5c c0       	rjmp	.+184    	; 0x72c <__vector_11+0x11e>
 674:	04 c0       	rjmp	.+8      	; 0x67e <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 676:	81 e2       	ldi	r24, 0x21	; 33
 678:	80 93 eb 00 	sts	0x00EB, r24
					return;
 67c:	3b c1       	rjmp	.+630    	; 0x8f4 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
 67e:	c6 e0       	ldi	r28, 0x06	; 6
 680:	4c ea       	ldi	r20, 0xAC	; 172
 682:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 684:	fa 01       	movw	r30, r20
 686:	65 91       	lpm	r22, Z+
 688:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
 68a:	26 17       	cp	r18, r22
 68c:	37 07       	cpc	r19, r23
 68e:	19 f0       	breq	.+6      	; 0x696 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
 690:	49 5f       	subi	r20, 0xF9	; 249
 692:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 694:	20 c0       	rjmp	.+64     	; 0x6d6 <__vector_11+0xc8>
				}
				list += 2;
 696:	fa 01       	movw	r30, r20
 698:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 69a:	65 91       	lpm	r22, Z+
 69c:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
 69e:	86 17       	cp	r24, r22
 6a0:	97 07       	cpc	r25, r23
 6a2:	19 f0       	breq	.+6      	; 0x6aa <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
 6a4:	49 5f       	subi	r20, 0xF9	; 249
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <__vector_11+0xc8>
				}
				list += 2;
 6aa:	fa 01       	movw	r30, r20
 6ac:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 6ae:	85 91       	lpm	r24, Z+
 6b0:	94 91       	lpm	r25, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	39 2f       	mov	r19, r25
				list += 2;
 6b6:	fa 01       	movw	r30, r20
 6b8:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 6ba:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 6bc:	9b 2f       	mov	r25, r27
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 6c2:	8f 3f       	cpi	r24, 0xFF	; 255
 6c4:	91 05       	cpc	r25, r1
 6c6:	19 f0       	breq	.+6      	; 0x6ce <__vector_11+0xc0>
 6c8:	10 f0       	brcs	.+4      	; 0x6ce <__vector_11+0xc0>
 6ca:	8f ef       	ldi	r24, 0xFF	; 255
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	84 17       	cp	r24, r20
 6d0:	28 f4       	brcc	.+10     	; 0x6dc <__vector_11+0xce>
 6d2:	48 2f       	mov	r20, r24
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <__vector_11+0xce>
 6d6:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 6d8:	a9 f6       	brne	.-86     	; 0x684 <__vector_11+0x76>
 6da:	cd cf       	rjmp	.-102    	; 0x676 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6dc:	c8 ee       	ldi	r28, 0xE8	; 232
 6de:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e0:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 6e2:	a1 ef       	ldi	r26, 0xF1	; 241
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6e6:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6e8:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6ea:	98 2f       	mov	r25, r24
 6ec:	95 70       	andi	r25, 0x05	; 5
 6ee:	e1 f3       	breq	.-8      	; 0x6e8 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
 6f0:	82 fd       	sbrc	r24, 2
 6f2:	00 c1       	rjmp	.+512    	; 0x8f4 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6f4:	64 2f       	mov	r22, r20
 6f6:	41 31       	cpi	r20, 0x11	; 17
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <__vector_11+0xee>
 6fa:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
 6fc:	66 23       	and	r22, r22
 6fe:	09 f4       	brne	.+2      	; 0x702 <__vector_11+0xf4>
 700:	f6 c0       	rjmp	.+492    	; 0x8ee <__vector_11+0x2e0>
 702:	c9 01       	movw	r24, r18
 704:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
 706:	fc 01       	movw	r30, r24
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	e4 91       	lpm	r30, Z
 70c:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 70e:	51 50       	subi	r21, 0x01	; 1
 710:	d1 f7       	brne	.-12     	; 0x706 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 712:	86 2f       	mov	r24, r22
 714:	81 50       	subi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	28 0f       	add	r18, r24
 71c:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 71e:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 720:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 722:	41 11       	cpse	r20, r1
 724:	e1 cf       	rjmp	.-62     	; 0x6e8 <__vector_11+0xda>
 726:	60 31       	cpi	r22, 0x10	; 16
 728:	f9 f2       	breq	.-66     	; 0x6e8 <__vector_11+0xda>
 72a:	e4 c0       	rjmp	.+456    	; 0x8f4 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 72c:	45 30       	cpi	r20, 0x05	; 5
 72e:	61 f4       	brne	.+24     	; 0x748 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 730:	8e ef       	ldi	r24, 0xFE	; 254
 732:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 736:	e8 ee       	ldi	r30, 0xE8	; 232
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	80 ff       	sbrs	r24, 0
 73e:	fd cf       	rjmp	.-6      	; 0x73a <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 740:	20 68       	ori	r18, 0x80	; 128
 742:	20 93 e3 00 	sts	0x00E3, r18
			return;
 746:	d6 c0       	rjmp	.+428    	; 0x8f4 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 748:	49 30       	cpi	r20, 0x09	; 9
 74a:	a1 f5       	brne	.+104    	; 0x7b4 <__vector_11+0x1a6>
 74c:	71 11       	cpse	r23, r1
 74e:	5b c0       	rjmp	.+182    	; 0x806 <__vector_11+0x1f8>
			usb_configuration = wValue;
 750:	20 93 0b 01 	sts	0x010B, r18
			cdc_line_rtsdtr = 0;
 754:	10 92 0c 01 	sts	0x010C, r1
			transmit_flush_timer = 0;
 758:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 75c:	8e ef       	ldi	r24, 0xFE	; 254
 75e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 762:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 764:	86 ed       	ldi	r24, 0xD6	; 214
 766:	90 e0       	ldi	r25, 0x00	; 0
			for (i=1; i<5; i++) {
				UENUM = i;
 768:	c9 ee       	ldi	r28, 0xE9	; 233
 76a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 76c:	ab ee       	ldi	r26, 0xEB	; 235
 76e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 770:	6c ee       	ldi	r22, 0xEC	; 236
 772:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 774:	4d ee       	ldi	r20, 0xED	; 237
 776:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 778:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
 77a:	9c 01       	movw	r18, r24
 77c:	2f 5f       	subi	r18, 0xFF	; 255
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
 780:	fc 01       	movw	r30, r24
 782:	04 91       	lpm	r16, Z
				UECONX = en;
 784:	0c 93       	st	X, r16
				if (en) {
 786:	00 23       	and	r16, r16
 788:	59 f0       	breq	.+22     	; 0x7a0 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
 78a:	f9 01       	movw	r30, r18
 78c:	24 91       	lpm	r18, Z
 78e:	fb 01       	movw	r30, r22
 790:	20 83       	st	Z, r18
 792:	fc 01       	movw	r30, r24
 794:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
 796:	03 96       	adiw	r24, 0x03	; 3
 798:	24 91       	lpm	r18, Z
 79a:	fa 01       	movw	r30, r20
 79c:	20 83       	st	Z, r18
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 7a0:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 7a2:	1f 5f       	subi	r17, 0xFF	; 255
 7a4:	15 30       	cpi	r17, 0x05	; 5
 7a6:	41 f7       	brne	.-48     	; 0x778 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 7a8:	ea ee       	ldi	r30, 0xEA	; 234
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	8e e1       	ldi	r24, 0x1E	; 30
 7ae:	80 83       	st	Z, r24
        		UERST = 0;
 7b0:	10 82       	st	Z, r1
			return;
 7b2:	a0 c0       	rjmp	.+320    	; 0x8f4 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 7b4:	48 30       	cpi	r20, 0x08	; 8
 7b6:	81 f4       	brne	.+32     	; 0x7d8 <__vector_11+0x1ca>
 7b8:	70 38       	cpi	r23, 0x80	; 128
 7ba:	09 f0       	breq	.+2      	; 0x7be <__vector_11+0x1b0>
 7bc:	3f c0       	rjmp	.+126    	; 0x83c <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7be:	e8 ee       	ldi	r30, 0xE8	; 232
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	80 ff       	sbrs	r24, 0
 7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 7c8:	80 91 0b 01 	lds	r24, 0x010B
 7cc:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7d0:	8e ef       	ldi	r24, 0xFE	; 254
 7d2:	80 93 e8 00 	sts	0x00E8, r24
 7d6:	8e c0       	rjmp	.+284    	; 0x8f4 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 7d8:	41 32       	cpi	r20, 0x21	; 33
 7da:	a9 f4       	brne	.+42     	; 0x806 <__vector_11+0x1f8>
 7dc:	71 3a       	cpi	r23, 0xA1	; 161
 7de:	f1 f5       	brne	.+124    	; 0x85c <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7e0:	e8 ee       	ldi	r30, 0xE8	; 232
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	80 ff       	sbrs	r24, 0
 7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <__vector_11+0x1d6>
 7ea:	e0 e0       	ldi	r30, 0x00	; 0
 7ec:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 7ee:	a1 ef       	ldi	r26, 0xF1	; 241
 7f0:	b0 e0       	ldi	r27, 0x00	; 0
 7f2:	81 91       	ld	r24, Z+
 7f4:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	e7 30       	cpi	r30, 0x07	; 7
 7fa:	f4 07       	cpc	r31, r20
 7fc:	d1 f7       	brne	.-12     	; 0x7f2 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7fe:	8e ef       	ldi	r24, 0xFE	; 254
 800:	80 93 e8 00 	sts	0x00E8, r24
 804:	77 c0       	rjmp	.+238    	; 0x8f4 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 806:	40 32       	cpi	r20, 0x20	; 32
 808:	c9 f4       	brne	.+50     	; 0x83c <__vector_11+0x22e>
 80a:	71 32       	cpi	r23, 0x21	; 33
 80c:	09 f0       	breq	.+2      	; 0x810 <__vector_11+0x202>
 80e:	6b c0       	rjmp	.+214    	; 0x8e6 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 810:	e8 ee       	ldi	r30, 0xE8	; 232
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	82 ff       	sbrs	r24, 2
 818:	fd cf       	rjmp	.-6      	; 0x814 <__vector_11+0x206>
 81a:	e0 e0       	ldi	r30, 0x00	; 0
 81c:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 81e:	a1 ef       	ldi	r26, 0xF1	; 241
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	8c 91       	ld	r24, X
 824:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 826:	51 e0       	ldi	r21, 0x01	; 1
 828:	e7 30       	cpi	r30, 0x07	; 7
 82a:	f5 07       	cpc	r31, r21
 82c:	d1 f7       	brne	.-12     	; 0x822 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 82e:	e8 ee       	ldi	r30, 0xE8	; 232
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	8b ef       	ldi	r24, 0xFB	; 251
 834:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 836:	8e ef       	ldi	r24, 0xFE	; 254
 838:	80 83       	st	Z, r24
 83a:	5c c0       	rjmp	.+184    	; 0x8f4 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 83c:	42 32       	cpi	r20, 0x22	; 34
 83e:	71 f4       	brne	.+28     	; 0x85c <__vector_11+0x24e>
 840:	71 32       	cpi	r23, 0x21	; 33
 842:	09 f0       	breq	.+2      	; 0x846 <__vector_11+0x238>
 844:	50 c0       	rjmp	.+160    	; 0x8e6 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
 846:	20 93 0c 01 	sts	0x010C, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 84a:	e8 ee       	ldi	r30, 0xE8	; 232
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	80 ff       	sbrs	r24, 0
 852:	fd cf       	rjmp	.-6      	; 0x84e <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 854:	8e ef       	ldi	r24, 0xFE	; 254
 856:	80 93 e8 00 	sts	0x00E8, r24
 85a:	4c c0       	rjmp	.+152    	; 0x8f4 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 85c:	41 11       	cpse	r20, r1
 85e:	1a c0       	rjmp	.+52     	; 0x894 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 860:	e8 ee       	ldi	r30, 0xE8	; 232
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	20 81       	ld	r18, Z
 866:	20 ff       	sbrs	r18, 0
 868:	fd cf       	rjmp	.-6      	; 0x864 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 86a:	72 38       	cpi	r23, 0x82	; 130
 86c:	51 f4       	brne	.+20     	; 0x882 <__vector_11+0x274>
				UENUM = wIndex;
 86e:	e9 ee       	ldi	r30, 0xE9	; 233
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
 874:	80 91 eb 00 	lds	r24, 0x00EB
 878:	85 fb       	bst	r24, 5
 87a:	88 27       	eor	r24, r24
 87c:	80 f9       	bld	r24, 0
				UENUM = 0;
 87e:	10 82       	st	Z, r1
 880:	01 c0       	rjmp	.+2      	; 0x884 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 882:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 884:	e1 ef       	ldi	r30, 0xF1	; 241
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 83       	st	Z, r24
			UEDATX = 0;
 88a:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 88c:	8e ef       	ldi	r24, 0xFE	; 254
 88e:	80 93 e8 00 	sts	0x00E8, r24
 892:	30 c0       	rjmp	.+96     	; 0x8f4 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 894:	41 30       	cpi	r20, 0x01	; 1
 896:	11 f0       	breq	.+4      	; 0x89c <__vector_11+0x28e>
 898:	43 30       	cpi	r20, 0x03	; 3
 89a:	29 f5       	brne	.+74     	; 0x8e6 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
 89c:	72 30       	cpi	r23, 0x02	; 2
 89e:	19 f5       	brne	.+70     	; 0x8e6 <__vector_11+0x2d8>
 8a0:	23 2b       	or	r18, r19
 8a2:	09 f5       	brne	.+66     	; 0x8e6 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
 8a4:	8f 77       	andi	r24, 0x7F	; 127
 8a6:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
 8a8:	38 2f       	mov	r19, r24
 8aa:	31 50       	subi	r19, 0x01	; 1
 8ac:	34 30       	cpi	r19, 0x04	; 4
 8ae:	d8 f4       	brcc	.+54     	; 0x8e6 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8b0:	3e ef       	ldi	r19, 0xFE	; 254
 8b2:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 8b6:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
 8ba:	43 30       	cpi	r20, 0x03	; 3
 8bc:	21 f4       	brne	.+8      	; 0x8c6 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 8be:	81 e2       	ldi	r24, 0x21	; 33
 8c0:	80 93 eb 00 	sts	0x00EB, r24
 8c4:	17 c0       	rjmp	.+46     	; 0x8f4 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 8c6:	99 e1       	ldi	r25, 0x19	; 25
 8c8:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
 8cc:	21 e0       	ldi	r18, 0x01	; 1
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	d9 01       	movw	r26, r18
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__vector_11+0x2ca>
 8d4:	aa 0f       	add	r26, r26
 8d6:	bb 1f       	adc	r27, r27
 8d8:	8a 95       	dec	r24
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__vector_11+0x2c6>
 8dc:	ea ee       	ldi	r30, 0xEA	; 234
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	a0 83       	st	Z, r26
					UERST = 0;
 8e2:	10 82       	st	Z, r1
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 8e6:	81 e2       	ldi	r24, 0x21	; 33
 8e8:	80 93 eb 00 	sts	0x00EB, r24
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8ee:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 8f0:	41 11       	cpse	r20, r1
 8f2:	fa ce       	rjmp	.-524    	; 0x6e8 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 8f4:	ff 91       	pop	r31
 8f6:	ef 91       	pop	r30
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
 922:	ec eb       	ldi	r30, 0xBC	; 188
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	88 23       	and	r24, r24
 92a:	34 f0       	brlt	.+12     	; 0x938 <twi_wait+0x1a>
 92c:	2f 5f       	subi	r18, 0xFF	; 255
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	29 3e       	cpi	r18, 0xE9	; 233
 932:	83 e0       	ldi	r24, 0x03	; 3
 934:	38 07       	cpc	r19, r24
 936:	b9 f7       	brne	.-18     	; 0x926 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	28 3e       	cpi	r18, 0xE8	; 232
 93c:	33 40       	sbci	r19, 0x03	; 3
 93e:	09 f4       	brne	.+2      	; 0x942 <twi_wait+0x24>
 940:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
 942:	08 95       	ret

00000944 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 944:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 948:	84 e8       	ldi	r24, 0x84	; 132
 94a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
 94e:	0e 94 8f 04 	call	0x91e	; 0x91e <twi_wait>
 952:	88 23       	and	r24, r24
 954:	21 f0       	breq	.+8      	; 0x95e <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
 956:	80 91 b9 00 	lds	r24, 0x00B9
 95a:	88 7f       	andi	r24, 0xF8	; 248
 95c:	08 95       	ret
	} else {
		return 0;					// comm failure
 95e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 960:	08 95       	ret

00000962 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
 962:	cf 93       	push	r28
 964:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 966:	94 ea       	ldi	r25, 0xA4	; 164
 968:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
 96c:	0e 94 8f 04 	call	0x91e	; 0x91e <twi_wait>
 970:	88 23       	and	r24, r24
 972:	59 f0       	breq	.+22     	; 0x98a <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
 974:	8c 2f       	mov	r24, r28
 976:	88 0f       	add	r24, r24
 978:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
 97c:	80 32       	cpi	r24, 0x20	; 32
 97e:	39 f4       	brne	.+14     	; 0x98e <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 980:	84 e9       	ldi	r24, 0x94	; 148
 982:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	03 c0       	rjmp	.+6      	; 0x990 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	01 c0       	rjmp	.+2      	; 0x990 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
 98e:	81 e0       	ldi	r24, 0x01	; 1
}	
 990:	cf 91       	pop	r28
 992:	08 95       	ret

00000994 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 994:	84 e9       	ldi	r24, 0x94	; 148
 996:	80 93 bc 00 	sts	0x00BC, r24
 99a:	08 95       	ret

0000099c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
 99c:	0e 94 01 02 	call	0x402	; 0x402 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 9a0:	88 e5       	ldi	r24, 0x58	; 88
 9a2:	0e 94 b1 04 	call	0x962	; 0x962 <start_write>
 9a6:	88 23       	and	r24, r24
 9a8:	09 f4       	brne	.+2      	; 0x9ac <m_wii_open+0x10>
 9aa:	c7 c0       	rjmp	.+398    	; 0xb3a <__stack+0x3b>
	if(!send_byte(0x30)){return 0;}
 9ac:	80 e3       	ldi	r24, 0x30	; 48
 9ae:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 9b2:	88 23       	and	r24, r24
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <m_wii_open+0x1c>
 9b6:	c3 c0       	rjmp	.+390    	; 0xb3e <__stack+0x3f>
	if(!send_byte(0x01)){return 0;}
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 9be:	88 23       	and	r24, r24
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <m_wii_open+0x28>
 9c2:	bf c0       	rjmp	.+382    	; 0xb42 <__stack+0x43>
	end();
 9c4:	0e 94 ca 04 	call	0x994	; 0x994 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9c8:	83 ec       	ldi	r24, 0xC3	; 195
 9ca:	99 e0       	ldi	r25, 0x09	; 9
 9cc:	01 97       	sbiw	r24, 0x01	; 1
 9ce:	f1 f7       	brne	.-4      	; 0x9cc <m_wii_open+0x30>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <m_wii_open+0x36>
 9d2:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 9d4:	88 e5       	ldi	r24, 0x58	; 88
 9d6:	0e 94 b1 04 	call	0x962	; 0x962 <start_write>
 9da:	88 23       	and	r24, r24
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <m_wii_open+0x44>
 9de:	b3 c0       	rjmp	.+358    	; 0xb46 <__stack+0x47>
	if(!send_byte(0x00)){return 0;}
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 9e6:	88 23       	and	r24, r24
 9e8:	09 f4       	brne	.+2      	; 0x9ec <m_wii_open+0x50>
 9ea:	af c0       	rjmp	.+350    	; 0xb4a <__stack+0x4b>
	if(!send_byte(0x00)){return 0;}
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 9f2:	88 23       	and	r24, r24
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <m_wii_open+0x5c>
 9f6:	ab c0       	rjmp	.+342    	; 0xb4e <__stack+0x4f>
	if(!send_byte(0x00)){return 0;}
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 9fe:	88 23       	and	r24, r24
 a00:	09 f4       	brne	.+2      	; 0xa04 <m_wii_open+0x68>
 a02:	a7 c0       	rjmp	.+334    	; 0xb52 <__stack+0x53>
	if(!send_byte(0x00)){return 0;}
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a0a:	88 23       	and	r24, r24
 a0c:	09 f4       	brne	.+2      	; 0xa10 <m_wii_open+0x74>
 a0e:	a3 c0       	rjmp	.+326    	; 0xb56 <__stack+0x57>
	if(!send_byte(0x00)){return 0;}
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a16:	88 23       	and	r24, r24
 a18:	09 f4       	brne	.+2      	; 0xa1c <m_wii_open+0x80>
 a1a:	9f c0       	rjmp	.+318    	; 0xb5a <__stack+0x5b>
	if(!send_byte(0x00)){return 0;}
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a22:	88 23       	and	r24, r24
 a24:	09 f4       	brne	.+2      	; 0xa28 <m_wii_open+0x8c>
 a26:	9b c0       	rjmp	.+310    	; 0xb5e <__stack+0x5f>
	if(!send_byte(0x00)){return 0;}
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a2e:	88 23       	and	r24, r24
 a30:	09 f4       	brne	.+2      	; 0xa34 <m_wii_open+0x98>
 a32:	97 c0       	rjmp	.+302    	; 0xb62 <__stack+0x63>
	if(!send_byte(0x90)){return 0;} // p0
 a34:	80 e9       	ldi	r24, 0x90	; 144
 a36:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a3a:	88 23       	and	r24, r24
 a3c:	09 f4       	brne	.+2      	; 0xa40 <m_wii_open+0xa4>
 a3e:	93 c0       	rjmp	.+294    	; 0xb66 <__stack+0x67>
	end();
 a40:	0e 94 ca 04 	call	0x994	; 0x994 <end>
 a44:	83 ec       	ldi	r24, 0xC3	; 195
 a46:	99 e0       	ldi	r25, 0x09	; 9
 a48:	01 97       	sbiw	r24, 0x01	; 1
 a4a:	f1 f7       	brne	.-4      	; 0xa48 <m_wii_open+0xac>
 a4c:	00 c0       	rjmp	.+0      	; 0xa4e <m_wii_open+0xb2>
 a4e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 a50:	88 e5       	ldi	r24, 0x58	; 88
 a52:	0e 94 b1 04 	call	0x962	; 0x962 <start_write>
 a56:	88 23       	and	r24, r24
 a58:	09 f4       	brne	.+2      	; 0xa5c <m_wii_open+0xc0>
 a5a:	87 c0       	rjmp	.+270    	; 0xb6a <__stack+0x6b>
	if(!send_byte(0x07)){return 0;}
 a5c:	87 e0       	ldi	r24, 0x07	; 7
 a5e:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a62:	88 23       	and	r24, r24
 a64:	09 f4       	brne	.+2      	; 0xa68 <m_wii_open+0xcc>
 a66:	83 c0       	rjmp	.+262    	; 0xb6e <__stack+0x6f>
	if(!send_byte(0x00)){return 0;}
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a6e:	88 23       	and	r24, r24
 a70:	09 f4       	brne	.+2      	; 0xa74 <m_wii_open+0xd8>
 a72:	7f c0       	rjmp	.+254    	; 0xb72 <__stack+0x73>
	if(!send_byte(0x41)){return 0;} // p1
 a74:	81 e4       	ldi	r24, 0x41	; 65
 a76:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 a7a:	88 23       	and	r24, r24
 a7c:	09 f4       	brne	.+2      	; 0xa80 <m_wii_open+0xe4>
 a7e:	7b c0       	rjmp	.+246    	; 0xb76 <__stack+0x77>
	end();
 a80:	0e 94 ca 04 	call	0x994	; 0x994 <end>
 a84:	83 ec       	ldi	r24, 0xC3	; 195
 a86:	99 e0       	ldi	r25, 0x09	; 9
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	f1 f7       	brne	.-4      	; 0xa88 <m_wii_open+0xec>
 a8c:	00 c0       	rjmp	.+0      	; 0xa8e <m_wii_open+0xf2>
 a8e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 a90:	88 e5       	ldi	r24, 0x58	; 88
 a92:	0e 94 b1 04 	call	0x962	; 0x962 <start_write>
 a96:	88 23       	and	r24, r24
 a98:	09 f4       	brne	.+2      	; 0xa9c <m_wii_open+0x100>
 a9a:	6f c0       	rjmp	.+222    	; 0xb7a <__stack+0x7b>
	if(!send_byte(0x1A)){return 0;}
 a9c:	8a e1       	ldi	r24, 0x1A	; 26
 a9e:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 aa2:	88 23       	and	r24, r24
 aa4:	09 f4       	brne	.+2      	; 0xaa8 <m_wii_open+0x10c>
 aa6:	6b c0       	rjmp	.+214    	; 0xb7e <__stack+0x7f>
	if(!send_byte(0x40)){return 0;} // p2
 aa8:	80 e4       	ldi	r24, 0x40	; 64
 aaa:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 aae:	88 23       	and	r24, r24
 ab0:	09 f4       	brne	.+2      	; 0xab4 <m_wii_open+0x118>
 ab2:	67 c0       	rjmp	.+206    	; 0xb82 <__stack+0x83>
	if(!send_byte(0x00)){return 0;} // p3
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 aba:	88 23       	and	r24, r24
 abc:	09 f4       	brne	.+2      	; 0xac0 <m_wii_open+0x124>
 abe:	63 c0       	rjmp	.+198    	; 0xb86 <__stack+0x87>
	end();
 ac0:	0e 94 ca 04 	call	0x994	; 0x994 <end>
 ac4:	83 ec       	ldi	r24, 0xC3	; 195
 ac6:	99 e0       	ldi	r25, 0x09	; 9
 ac8:	01 97       	sbiw	r24, 0x01	; 1
 aca:	f1 f7       	brne	.-4      	; 0xac8 <m_wii_open+0x12c>
 acc:	00 c0       	rjmp	.+0      	; 0xace <m_wii_open+0x132>
 ace:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 ad0:	88 e5       	ldi	r24, 0x58	; 88
 ad2:	0e 94 b1 04 	call	0x962	; 0x962 <start_write>
 ad6:	88 23       	and	r24, r24
 ad8:	09 f4       	brne	.+2      	; 0xadc <m_wii_open+0x140>
 ada:	57 c0       	rjmp	.+174    	; 0xb8a <__stack+0x8b>
	if(!send_byte(0x33)){return 0;}
 adc:	83 e3       	ldi	r24, 0x33	; 51
 ade:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 ae2:	88 23       	and	r24, r24
 ae4:	09 f4       	brne	.+2      	; 0xae8 <m_wii_open+0x14c>
 ae6:	53 c0       	rjmp	.+166    	; 0xb8e <__stack+0x8f>
	if(!send_byte(0x03)){return 0;}
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 aee:	88 23       	and	r24, r24
 af0:	09 f4       	brne	.+2      	; 0xaf4 <m_wii_open+0x158>
 af2:	4f c0       	rjmp	.+158    	; 0xb92 <__stack+0x93>
	end();
 af4:	0e 94 ca 04 	call	0x994	; 0x994 <end>
 af8:	83 ec       	ldi	r24, 0xC3	; 195
 afa:	99 e0       	ldi	r25, 0x09	; 9
 afc:	01 97       	sbiw	r24, 0x01	; 1
 afe:	f1 f7       	brne	.-4      	; 0xafc <m_wii_open+0x160>
 b00:	00 c0       	rjmp	.+0      	; 0xb02 <__stack+0x3>
 b02:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 b04:	88 e5       	ldi	r24, 0x58	; 88
 b06:	0e 94 b1 04 	call	0x962	; 0x962 <start_write>
 b0a:	88 23       	and	r24, r24
 b0c:	09 f4       	brne	.+2      	; 0xb10 <__stack+0x11>
 b0e:	43 c0       	rjmp	.+134    	; 0xb96 <__stack+0x97>
	if(!send_byte(0x30)){return 0;}
 b10:	80 e3       	ldi	r24, 0x30	; 48
 b12:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 b16:	88 23       	and	r24, r24
 b18:	09 f4       	brne	.+2      	; 0xb1c <__stack+0x1d>
 b1a:	3f c0       	rjmp	.+126    	; 0xb9a <__stack+0x9b>
	if(!send_byte(0x08)){return 0;}
 b1c:	88 e0       	ldi	r24, 0x08	; 8
 b1e:	0e 94 a2 04 	call	0x944	; 0x944 <send_byte>
 b22:	88 23       	and	r24, r24
 b24:	e1 f1       	breq	.+120    	; 0xb9e <__stack+0x9f>
	end();
 b26:	0e 94 ca 04 	call	0x994	; 0x994 <end>
 b2a:	83 ec       	ldi	r24, 0xC3	; 195
 b2c:	99 e0       	ldi	r25, 0x09	; 9
 b2e:	01 97       	sbiw	r24, 0x01	; 1
 b30:	f1 f7       	brne	.-4      	; 0xb2e <__stack+0x2f>
 b32:	00 c0       	rjmp	.+0      	; 0xb34 <__stack+0x35>
 b34:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b5a:	80 e0       	ldi	r24, 0x00	; 0
 b5c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b5e:	80 e0       	ldi	r24, 0x00	; 0
 b60:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 b6a:	80 e0       	ldi	r24, 0x00	; 0
 b6c:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 b7a:	80 e0       	ldi	r24, 0x00	; 0
 b7c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
 b9e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
