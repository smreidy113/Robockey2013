
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000009c8  00000a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  00000a64  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000052ae  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000250  00000000  00000000  000052dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020e3  00000000  00000000  0000552d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000960  00000000  00000000  00007610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e7d  00000000  00000000  00007f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000070c  00000000  00000000  00008df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000744  00000000  00000000  000094fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026d0  00000000  00000000  00009c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000280  00000000  00000000  0000c310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_10>
  2c:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	int exit = 0;
	distmax = 0;
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	distmin = 30000;
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_29>
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
  bc:	00 00 35 01 04 01 03 09 04 39 01 12 02 03 09 04     ..5......9......
  cc:	4d 01 06 03 03 09 04 55 01 08                       M......U..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
 149:	65 00 00 00                                         e...

0000014d <string2>:
 14d:	06 03 4d 00 32 00 00 00                             ..M.2...

00000155 <string3>:
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
 155:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e8 ec       	ldi	r30, 0xC8	; 200
 174:	f9 e0       	ldi	r31, 0x09	; 9
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ab 30       	cpi	r26, 0x0B	; 11
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	10 82       	st	Z, r1
 1a8:	85 b5       	in	r24, 0x25	; 37
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	85 bd       	out	0x25, r24	; 37
 1ae:	84 b5       	in	r24, 0x24	; 36
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	84 bd       	out	0x24, r24	; 36
 1b4:	84 b5       	in	r24, 0x24	; 36
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	84 bd       	out	0x24, r24	; 36
 1ba:	84 b5       	in	r24, 0x24	; 36
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	84 bd       	out	0x24, r24	; 36
 1c0:	84 b5       	in	r24, 0x24	; 36
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	84 bd       	out	0x24, r24	; 36
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	85 bd       	out	0x25, r24	; 37
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	85 bd       	out	0x25, r24	; 37
 1d2:	85 b5       	in	r24, 0x25	; 37
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	85 bd       	out	0x25, r24	; 37
 1d8:	27 9a       	sbi	0x04, 7	; 4
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	87 bd       	out	0x27, r24	; 39
 1de:	18 bc       	out	0x28, r1	; 40
 1e0:	e1 e8       	ldi	r30, 0x81	; 129
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	80 83       	st	Z, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	80 83       	st	Z, r24
 1f0:	a0 e8       	ldi	r26, 0x80	; 128
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	8c 91       	ld	r24, X
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	8c 93       	st	X, r24
 1fa:	8c 91       	ld	r24, X
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	8c 93       	st	X, r24
					if (dist > distmax) {
 200:	8c 91       	ld	r24, X
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8c 93       	st	X, r24
 206:	8c 91       	ld	r24, X
 208:	8f 7e       	andi	r24, 0xEF	; 239
 20a:	8c 93       	st	X, r24
 20c:	80 81       	ld	r24, Z
 20e:	8b 7f       	andi	r24, 0xFB	; 251
 210:	80 83       	st	Z, r24
 212:	80 81       	ld	r24, Z
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	80 83       	st	Z, r24
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
 21e:	26 9a       	sbi	0x04, 6	; 4
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	9f ef       	ldi	r25, 0xFF	; 255
 224:	90 93 89 00 	sts	0x0089, r25
 228:	80 93 88 00 	sts	0x0088, r24
 22c:	10 92 8b 00 	sts	0x008B, r1
 230:	10 92 8a 00 	sts	0x008A, r1
 234:	e1 e9       	ldi	r30, 0x91	; 145
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	20 81       	ld	r18, Z
 23a:	20 61       	ori	r18, 0x10	; 16
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
 23c:	20 83       	st	Z, r18
 23e:	20 81       	ld	r18, Z
 240:	28 60       	ori	r18, 0x08	; 8
 242:	20 83       	st	Z, r18
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
 244:	a0 e9       	ldi	r26, 0x90	; 144
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	2c 91       	ld	r18, X
 24a:	22 60       	ori	r18, 0x02	; 2
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
 24c:	2c 93       	st	X, r18
 24e:	2c 91       	ld	r18, X
 250:	2e 7f       	andi	r18, 0xFE	; 254
 252:	2c 93       	st	X, r18
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
 254:	2c 91       	ld	r18, X
 256:	20 68       	ori	r18, 0x80	; 128
 258:	2c 93       	st	X, r18
 25a:	2c 91       	ld	r18, X
 25c:	2f 7b       	andi	r18, 0xBF	; 191
 25e:	2c 93       	st	X, r18
 260:	20 81       	ld	r18, Z
 262:	2b 7f       	andi	r18, 0xFB	; 251
 264:	20 83       	st	Z, r18
 266:	20 81       	ld	r18, Z
 268:	2d 7f       	andi	r18, 0xFD	; 253
 26a:	20 83       	st	Z, r18
 26c:	20 81       	ld	r18, Z
 26e:	21 60       	ori	r18, 0x01	; 1
						distmin = dist;
						close1 = i;
						close2 = j;
 270:	20 83       	st	Z, r18
 272:	90 93 97 00 	sts	0x0097, r25
 276:	80 93 96 00 	sts	0x0096, r24
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
 27a:	10 92 99 00 	sts	0x0099, r1
 27e:	10 92 98 00 	sts	0x0098, r1
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
 282:	27 9a       	sbi	0x04, 7	; 4
 284:	26 9a       	sbi	0x04, 6	; 4
 286:	3e 9a       	sbi	0x07, 6	; 7
 288:	22 9a       	sbi	0x04, 2	; 4
 28a:	23 9a       	sbi	0x04, 3	; 4
 28c:	78 94       	sei
 28e:	ea e7       	ldi	r30, 0x7A	; 122
 290:	f0 e0       	ldi	r31, 0x00	; 0
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
 292:	80 81       	ld	r24, Z
 294:	88 60       	ori	r24, 0x08	; 8
 296:	80 83       	st	Z, r24
 298:	ac e7       	ldi	r26, 0x7C	; 124
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	8c 91       	ld	r24, X
 29e:	8f 77       	andi	r24, 0x7F	; 127
 2a0:	8c 93       	st	X, r24
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
 2a2:	8c 91       	ld	r24, X
 2a4:	8f 7b       	andi	r24, 0xBF	; 191
 2a6:	8c 93       	st	X, r24
 2a8:	80 81       	ld	r24, Z
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	80 83       	st	Z, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
 2b4:	80 81       	ld	r24, Z
				for (int j = i; j < 4; j++) {
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	80 83       	st	Z, r24
 2ba:	ae e7       	ldi	r26, 0x7E	; 126
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
 2be:	8c 91       	ld	r24, X
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	8c 93       	st	X, r24
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
 2c4:	8c 91       	ld	r24, X
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	8c 93       	st	X, r24
 2ca:	8c 91       	ld	r24, X
 2cc:	80 61       	ori	r24, 0x10	; 16
 2ce:	8c 93       	st	X, r24
 2d0:	8c 91       	ld	r24, X
 2d2:	80 62       	ori	r24, 0x20	; 32
 2d4:	8c 93       	st	X, r24
 2d6:	8c 91       	ld	r24, X
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	8c 93       	st	X, r24
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
 2dc:	ad e7       	ldi	r26, 0x7D	; 125
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	8c 93       	st	X, r24
 2e6:	8c 91       	ld	r24, X
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	8c 93       	st	X, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	80 83       	st	Z, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	80 61       	ori	r24, 0x10	; 16
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
 2f6:	80 83       	st	Z, r24
 2f8:	20 98       	cbi	0x04, 0	; 4
 2fa:	21 98       	cbi	0x04, 1	; 4
 2fc:	28 98       	cbi	0x05, 0	; 5
 2fe:	29 98       	cbi	0x05, 1	; 5
 300:	0e 94 c9 01 	call	0x392	; 0x392 <m_bus_init>
 304:	0e 94 df 03 	call	0x7be	; 0x7be <m_wii_open>
 308:	28 e8       	ldi	r18, 0x88	; 136
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	ca e8       	ldi	r28, 0x8A	; 138
 30e:	d0 e0       	ldi	r29, 0x00	; 0
 310:	a6 e9       	ldi	r26, 0x96	; 150
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	68 e9       	ldi	r22, 0x98	; 152
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	6e 9a       	sbi	0x0d, 6	; 13
 31a:	76 98       	cbi	0x0e, 6	; 14
 31c:	6a 9a       	sbi	0x0d, 2	; 13
 31e:	72 9a       	sbi	0x0e, 2	; 14
 320:	6e 9a       	sbi	0x0d, 6	; 13
 322:	76 9a       	sbi	0x0e, 6	; 14
 324:	6a 9a       	sbi	0x0d, 2	; 13
 326:	72 98       	cbi	0x0e, 2	; 14
 328:	f9 01       	movw	r30, r18
 32a:	80 81       	ld	r24, Z
 32c:	91 81       	ldd	r25, Z+1	; 0x01
 32e:	99 83       	std	Y+1, r25	; 0x01
 330:	88 83       	st	Y, r24
 332:	8d 91       	ld	r24, X+
 334:	9c 91       	ld	r25, X
 336:	11 97       	sbiw	r26, 0x01	; 1
 338:	fb 01       	movw	r30, r22
 33a:	91 83       	std	Z+1, r25	; 0x01
 33c:	80 83       	st	Z, r24
 33e:	2a 9a       	sbi	0x05, 2	; 5
 340:	2b 9a       	sbi	0x05, 3	; 5
 342:	ff ef       	ldi	r31, 0xFF	; 255
 344:	43 ed       	ldi	r20, 0xD3	; 211
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	f1 50       	subi	r31, 0x01	; 1
 34a:	40 40       	sbci	r20, 0x00	; 0
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x1aa>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x1b4>
 352:	00 00       	nop
 354:	2b 98       	cbi	0x05, 3	; 5
 356:	2a 98       	cbi	0x05, 2	; 5
 358:	df cf       	rjmp	.-66     	; 0x318 <main+0x17a>

0000035a <__vector_29>:
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	80 91 78 00 	lds	r24, 0x0078
 36e:	90 91 79 00 	lds	r25, 0x0079
 372:	85 3f       	cpi	r24, 0xF5	; 245
 374:	91 40       	sbci	r25, 0x01	; 1
 376:	18 f0       	brcs	.+6      	; 0x37e <__vector_29+0x24>
 378:	6a 9a       	sbi	0x0d, 2	; 13
 37a:	72 98       	cbi	0x0e, 2	; 14
 37c:	02 c0       	rjmp	.+4      	; 0x382 <__vector_29+0x28>
 37e:	6a 9a       	sbi	0x0d, 2	; 13
 380:	72 9a       	sbi	0x0e, 2	; 14
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <m_bus_init>:
 392:	58 9a       	sbi	0x0b, 0	; 11
 394:	59 9a       	sbi	0x0b, 1	; 11
 396:	5a 9a       	sbi	0x0b, 2	; 11
 398:	8c e0       	ldi	r24, 0x0C	; 12
 39a:	80 93 b8 00 	sts	0x00B8, r24
 39e:	e9 e6       	ldi	r30, 0x69	; 105
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	80 83       	st	Z, r24
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 7e       	andi	r24, 0xEF	; 239
 3ac:	80 83       	st	Z, r24
 3ae:	ea 9a       	sbi	0x1d, 2	; 29
 3b0:	78 94       	sei
 3b2:	08 95       	ret

000003b4 <__vector_10>:
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
				top = far1;
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
				bottom = far2;
 3c6:	e1 ee       	ldi	r30, 0xE1	; 225
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	10 82       	st	Z, r1
 3ce:	83 ff       	sbrs	r24, 3
 3d0:	11 c0       	rjmp	.+34     	; 0x3f4 <__vector_10+0x40>
 3d2:	10 92 e9 00 	sts	0x00E9, r1
				right = close2;
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	90 93 eb 00 	sts	0x00EB, r25
 3dc:	10 92 ec 00 	sts	0x00EC, r1
 3e0:	92 e1       	ldi	r25, 0x12	; 18
 3e2:	90 93 ed 00 	sts	0x00ED, r25
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
 3e6:	98 e0       	ldi	r25, 0x08	; 8
 3e8:	90 93 f0 00 	sts	0x00F0, r25
 3ec:	10 92 09 01 	sts	0x0109, r1
 3f0:	10 92 0a 01 	sts	0x010A, r1
 3f4:	82 ff       	sbrs	r24, 2
 3f6:	13 c0       	rjmp	.+38     	; 0x41e <__vector_10+0x6a>
 3f8:	80 91 09 01 	lds	r24, 0x0109
 3fc:	88 23       	and	r24, r24
 3fe:	79 f0       	breq	.+30     	; 0x41e <__vector_10+0x6a>
 400:	80 91 08 01 	lds	r24, 0x0108
			}
			else if (far1 == close2) {
 404:	88 23       	and	r24, r24
 406:	59 f0       	breq	.+22     	; 0x41e <__vector_10+0x6a>
 408:	81 50       	subi	r24, 0x01	; 1
 40a:	80 93 08 01 	sts	0x0108, r24
				top = far1;
 40e:	81 11       	cpse	r24, r1
 410:	06 c0       	rjmp	.+12     	; 0x41e <__vector_10+0x6a>
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	80 93 e9 00 	sts	0x00E9, r24
				bottom = far2;
 418:	8a e3       	ldi	r24, 0x3A	; 58
 41a:	80 93 e8 00 	sts	0x00E8, r24
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
				right = close1;
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
				left = 9 - top - bottom - right;
 42e:	18 95       	reti

00000430 <__vector_11>:
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
			}
			else if (far2 == close1) {
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31
				top = far2;
 45a:	10 92 e9 00 	sts	0x00E9, r1
 45e:	80 91 e8 00 	lds	r24, 0x00E8
				bottom = far1;
 462:	83 ff       	sbrs	r24, 3
 464:	51 c1       	rjmp	.+674    	; 0x708 <__vector_11+0x2d8>
 466:	e1 ef       	ldi	r30, 0xF1	; 241
 468:	f0 e0       	ldi	r31, 0x00	; 0
				right = close2;
 46a:	70 81       	ld	r23, Z
 46c:	40 81       	ld	r20, Z
 46e:	20 81       	ld	r18, Z
 470:	30 81       	ld	r19, Z
 472:	93 2f       	mov	r25, r19
 474:	80 e0       	ldi	r24, 0x00	; 0
				left = 9 - top - bottom - right;
 476:	dc 01       	movw	r26, r24
 478:	a2 2b       	or	r26, r18
 47a:	9d 01       	movw	r18, r26
 47c:	50 81       	ld	r21, Z
 47e:	60 81       	ld	r22, Z
 480:	96 2f       	mov	r25, r22
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	85 2b       	or	r24, r21
 486:	a0 81       	ld	r26, Z
 488:	b0 81       	ld	r27, Z
 48a:	52 ef       	ldi	r21, 0xF2	; 242
 48c:	50 93 e8 00 	sts	0x00E8, r21
 490:	46 30       	cpi	r20, 0x06	; 6
 492:	09 f0       	breq	.+2      	; 0x496 <__vector_11+0x66>
 494:	5c c0       	rjmp	.+184    	; 0x54e <__vector_11+0x11e>
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__vector_11+0x70>
 498:	81 e2       	ldi	r24, 0x21	; 33
			}
			else {
				top = far2;
 49a:	80 93 eb 00 	sts	0x00EB, r24
 49e:	3b c1       	rjmp	.+630    	; 0x716 <__vector_11+0x2e6>
 4a0:	c6 e0       	ldi	r28, 0x06	; 6
				bottom = far1;
 4a2:	4c ea       	ldi	r20, 0xAC	; 172
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	fa 01       	movw	r30, r20
 4a8:	65 91       	lpm	r22, Z+
				right = close1;
 4aa:	74 91       	lpm	r23, Z
 4ac:	26 17       	cp	r18, r22
 4ae:	37 07       	cpc	r19, r23
 4b0:	19 f0       	breq	.+6      	; 0x4b8 <__vector_11+0x88>
				left = 9 - top - bottom - right;
 4b2:	49 5f       	subi	r20, 0xF9	; 249
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	20 c0       	rjmp	.+64     	; 0x4f8 <__vector_11+0xc8>
 4b8:	fa 01       	movw	r30, r20
 4ba:	32 96       	adiw	r30, 0x02	; 2
 4bc:	65 91       	lpm	r22, Z+
 4be:	74 91       	lpm	r23, Z
 4c0:	86 17       	cp	r24, r22
 4c2:	97 07       	cpc	r25, r23
 4c4:	19 f0       	breq	.+6      	; 0x4cc <__vector_11+0x9c>
 4c6:	49 5f       	subi	r20, 0xF9	; 249
 4c8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <__vector_11+0xc8>
 4cc:	fa 01       	movw	r30, r20
 4ce:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}
	return 1;
}
 4d0:	85 91       	lpm	r24, Z+
 4d2:	94 91       	lpm	r25, Z
 4d4:	28 2f       	mov	r18, r24
 4d6:	39 2f       	mov	r19, r25
 4d8:	fa 01       	movw	r30, r20
 4da:	36 96       	adiw	r30, 0x06	; 6
 4dc:	44 91       	lpm	r20, Z
 4de:	9b 2f       	mov	r25, r27
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	8a 2b       	or	r24, r26
 4e4:	8f 3f       	cpi	r24, 0xFF	; 255
 4e6:	91 05       	cpc	r25, r1
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <__vector_11+0xc0>
 4ea:	10 f0       	brcs	.+4      	; 0x4f0 <__vector_11+0xc0>
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	84 17       	cp	r24, r20
 4f2:	28 f4       	brcc	.+10     	; 0x4fe <__vector_11+0xce>
 4f4:	48 2f       	mov	r20, r24
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <__vector_11+0xce>
 4f8:	c1 50       	subi	r28, 0x01	; 1
 4fa:	a9 f6       	brne	.-86     	; 0x4a6 <__vector_11+0x76>
 4fc:	cd cf       	rjmp	.-102    	; 0x498 <__vector_11+0x68>
 4fe:	c8 ee       	ldi	r28, 0xE8	; 232
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 504:	a1 ef       	ldi	r26, 0xF1	; 241
 506:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 508:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 50a:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 50c:	98 2f       	mov	r25, r24
 50e:	95 70       	andi	r25, 0x05	; 5
 510:	e1 f3       	breq	.-8      	; 0x50a <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
 512:	82 fd       	sbrc	r24, 2
 514:	00 c1       	rjmp	.+512    	; 0x716 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 516:	64 2f       	mov	r22, r20
 518:	41 31       	cpi	r20, 0x11	; 17
 51a:	08 f0       	brcs	.+2      	; 0x51e <__vector_11+0xee>
 51c:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
 51e:	66 23       	and	r22, r22
 520:	09 f4       	brne	.+2      	; 0x524 <__vector_11+0xf4>
 522:	f6 c0       	rjmp	.+492    	; 0x710 <__vector_11+0x2e0>
 524:	c9 01       	movw	r24, r18
 526:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
 528:	fc 01       	movw	r30, r24
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	e4 91       	lpm	r30, Z
 52e:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 530:	51 50       	subi	r21, 0x01	; 1
 532:	d1 f7       	brne	.-12     	; 0x528 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 534:	86 2f       	mov	r24, r22
 536:	81 50       	subi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	28 0f       	add	r18, r24
 53e:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 540:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 542:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 544:	41 11       	cpse	r20, r1
 546:	e1 cf       	rjmp	.-62     	; 0x50a <__vector_11+0xda>
 548:	60 31       	cpi	r22, 0x10	; 16
 54a:	f9 f2       	breq	.-66     	; 0x50a <__vector_11+0xda>
 54c:	e4 c0       	rjmp	.+456    	; 0x716 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 54e:	45 30       	cpi	r20, 0x05	; 5
 550:	61 f4       	brne	.+24     	; 0x56a <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 552:	8e ef       	ldi	r24, 0xFE	; 254
 554:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 558:	e8 ee       	ldi	r30, 0xE8	; 232
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	80 ff       	sbrs	r24, 0
 560:	fd cf       	rjmp	.-6      	; 0x55c <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 562:	20 68       	ori	r18, 0x80	; 128
 564:	20 93 e3 00 	sts	0x00E3, r18
			return;
 568:	d6 c0       	rjmp	.+428    	; 0x716 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 56a:	49 30       	cpi	r20, 0x09	; 9
 56c:	a1 f5       	brne	.+104    	; 0x5d6 <__vector_11+0x1a6>
 56e:	71 11       	cpse	r23, r1
 570:	5b c0       	rjmp	.+182    	; 0x628 <__vector_11+0x1f8>
			usb_configuration = wValue;
 572:	20 93 09 01 	sts	0x0109, r18
			cdc_line_rtsdtr = 0;
 576:	10 92 0a 01 	sts	0x010A, r1
			transmit_flush_timer = 0;
 57a:	10 92 08 01 	sts	0x0108, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 57e:	8e ef       	ldi	r24, 0xFE	; 254
 580:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 584:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 586:	86 ed       	ldi	r24, 0xD6	; 214
 588:	90 e0       	ldi	r25, 0x00	; 0
			for (i=1; i<5; i++) {
				UENUM = i;
 58a:	c9 ee       	ldi	r28, 0xE9	; 233
 58c:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 58e:	ab ee       	ldi	r26, 0xEB	; 235
 590:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 592:	6c ee       	ldi	r22, 0xEC	; 236
 594:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 596:	4d ee       	ldi	r20, 0xED	; 237
 598:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 59a:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
 59c:	9c 01       	movw	r18, r24
 59e:	2f 5f       	subi	r18, 0xFF	; 255
 5a0:	3f 4f       	sbci	r19, 0xFF	; 255
 5a2:	fc 01       	movw	r30, r24
 5a4:	04 91       	lpm	r16, Z
				UECONX = en;
 5a6:	0c 93       	st	X, r16
				if (en) {
 5a8:	00 23       	and	r16, r16
 5aa:	59 f0       	breq	.+22     	; 0x5c2 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
 5ac:	f9 01       	movw	r30, r18
 5ae:	24 91       	lpm	r18, Z
 5b0:	fb 01       	movw	r30, r22
 5b2:	20 83       	st	Z, r18
 5b4:	fc 01       	movw	r30, r24
 5b6:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
 5b8:	03 96       	adiw	r24, 0x03	; 3
 5ba:	24 91       	lpm	r18, Z
 5bc:	fa 01       	movw	r30, r20
 5be:	20 83       	st	Z, r18
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 5c2:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5c4:	1f 5f       	subi	r17, 0xFF	; 255
 5c6:	15 30       	cpi	r17, 0x05	; 5
 5c8:	41 f7       	brne	.-48     	; 0x59a <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 5ca:	ea ee       	ldi	r30, 0xEA	; 234
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	8e e1       	ldi	r24, 0x1E	; 30
 5d0:	80 83       	st	Z, r24
        		UERST = 0;
 5d2:	10 82       	st	Z, r1
			return;
 5d4:	a0 c0       	rjmp	.+320    	; 0x716 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 5d6:	48 30       	cpi	r20, 0x08	; 8
 5d8:	81 f4       	brne	.+32     	; 0x5fa <__vector_11+0x1ca>
 5da:	70 38       	cpi	r23, 0x80	; 128
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_11+0x1b0>
 5de:	3f c0       	rjmp	.+126    	; 0x65e <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5e0:	e8 ee       	ldi	r30, 0xE8	; 232
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	80 ff       	sbrs	r24, 0
 5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 5ea:	80 91 09 01 	lds	r24, 0x0109
 5ee:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f2:	8e ef       	ldi	r24, 0xFE	; 254
 5f4:	80 93 e8 00 	sts	0x00E8, r24
 5f8:	8e c0       	rjmp	.+284    	; 0x716 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 5fa:	41 32       	cpi	r20, 0x21	; 33
 5fc:	a9 f4       	brne	.+42     	; 0x628 <__vector_11+0x1f8>
 5fe:	71 3a       	cpi	r23, 0xA1	; 161
 600:	f1 f5       	brne	.+124    	; 0x67e <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 602:	e8 ee       	ldi	r30, 0xE8	; 232
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	80 ff       	sbrs	r24, 0
 60a:	fd cf       	rjmp	.-6      	; 0x606 <__vector_11+0x1d6>
 60c:	e0 e0       	ldi	r30, 0x00	; 0
 60e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 610:	a1 ef       	ldi	r26, 0xF1	; 241
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	81 91       	ld	r24, Z+
 616:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 618:	41 e0       	ldi	r20, 0x01	; 1
 61a:	e7 30       	cpi	r30, 0x07	; 7
 61c:	f4 07       	cpc	r31, r20
 61e:	d1 f7       	brne	.-12     	; 0x614 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 620:	8e ef       	ldi	r24, 0xFE	; 254
 622:	80 93 e8 00 	sts	0x00E8, r24
 626:	77 c0       	rjmp	.+238    	; 0x716 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 628:	40 32       	cpi	r20, 0x20	; 32
 62a:	c9 f4       	brne	.+50     	; 0x65e <__vector_11+0x22e>
 62c:	71 32       	cpi	r23, 0x21	; 33
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_11+0x202>
 630:	6b c0       	rjmp	.+214    	; 0x708 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 632:	e8 ee       	ldi	r30, 0xE8	; 232
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	82 ff       	sbrs	r24, 2
 63a:	fd cf       	rjmp	.-6      	; 0x636 <__vector_11+0x206>
 63c:	e0 e0       	ldi	r30, 0x00	; 0
 63e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 640:	a1 ef       	ldi	r26, 0xF1	; 241
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	8c 91       	ld	r24, X
 646:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 648:	51 e0       	ldi	r21, 0x01	; 1
 64a:	e7 30       	cpi	r30, 0x07	; 7
 64c:	f5 07       	cpc	r31, r21
 64e:	d1 f7       	brne	.-12     	; 0x644 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 650:	e8 ee       	ldi	r30, 0xE8	; 232
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8b ef       	ldi	r24, 0xFB	; 251
 656:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 658:	8e ef       	ldi	r24, 0xFE	; 254
 65a:	80 83       	st	Z, r24
 65c:	5c c0       	rjmp	.+184    	; 0x716 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 65e:	42 32       	cpi	r20, 0x22	; 34
 660:	71 f4       	brne	.+28     	; 0x67e <__vector_11+0x24e>
 662:	71 32       	cpi	r23, 0x21	; 33
 664:	09 f0       	breq	.+2      	; 0x668 <__vector_11+0x238>
 666:	50 c0       	rjmp	.+160    	; 0x708 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
 668:	20 93 0a 01 	sts	0x010A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 66c:	e8 ee       	ldi	r30, 0xE8	; 232
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	80 ff       	sbrs	r24, 0
 674:	fd cf       	rjmp	.-6      	; 0x670 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 676:	8e ef       	ldi	r24, 0xFE	; 254
 678:	80 93 e8 00 	sts	0x00E8, r24
 67c:	4c c0       	rjmp	.+152    	; 0x716 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 67e:	41 11       	cpse	r20, r1
 680:	1a c0       	rjmp	.+52     	; 0x6b6 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 682:	e8 ee       	ldi	r30, 0xE8	; 232
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	20 81       	ld	r18, Z
 688:	20 ff       	sbrs	r18, 0
 68a:	fd cf       	rjmp	.-6      	; 0x686 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 68c:	72 38       	cpi	r23, 0x82	; 130
 68e:	51 f4       	brne	.+20     	; 0x6a4 <__vector_11+0x274>
				UENUM = wIndex;
 690:	e9 ee       	ldi	r30, 0xE9	; 233
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
 696:	80 91 eb 00 	lds	r24, 0x00EB
 69a:	85 fb       	bst	r24, 5
 69c:	88 27       	eor	r24, r24
 69e:	80 f9       	bld	r24, 0
				UENUM = 0;
 6a0:	10 82       	st	Z, r1
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 6a6:	e1 ef       	ldi	r30, 0xF1	; 241
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 83       	st	Z, r24
			UEDATX = 0;
 6ac:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6ae:	8e ef       	ldi	r24, 0xFE	; 254
 6b0:	80 93 e8 00 	sts	0x00E8, r24
 6b4:	30 c0       	rjmp	.+96     	; 0x716 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 6b6:	41 30       	cpi	r20, 0x01	; 1
 6b8:	11 f0       	breq	.+4      	; 0x6be <__vector_11+0x28e>
 6ba:	43 30       	cpi	r20, 0x03	; 3
 6bc:	29 f5       	brne	.+74     	; 0x708 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
 6be:	72 30       	cpi	r23, 0x02	; 2
 6c0:	19 f5       	brne	.+70     	; 0x708 <__vector_11+0x2d8>
 6c2:	23 2b       	or	r18, r19
 6c4:	09 f5       	brne	.+66     	; 0x708 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
 6c6:	8f 77       	andi	r24, 0x7F	; 127
 6c8:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
 6ca:	38 2f       	mov	r19, r24
 6cc:	31 50       	subi	r19, 0x01	; 1
 6ce:	34 30       	cpi	r19, 0x04	; 4
 6d0:	d8 f4       	brcc	.+54     	; 0x708 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6d2:	3e ef       	ldi	r19, 0xFE	; 254
 6d4:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 6d8:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
 6dc:	43 30       	cpi	r20, 0x03	; 3
 6de:	21 f4       	brne	.+8      	; 0x6e8 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 6e0:	81 e2       	ldi	r24, 0x21	; 33
 6e2:	80 93 eb 00 	sts	0x00EB, r24
 6e6:	17 c0       	rjmp	.+46     	; 0x716 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6e8:	99 e1       	ldi	r25, 0x19	; 25
 6ea:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	d9 01       	movw	r26, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__vector_11+0x2ca>
 6f6:	aa 0f       	add	r26, r26
 6f8:	bb 1f       	adc	r27, r27
 6fa:	8a 95       	dec	r24
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <__vector_11+0x2c6>
 6fe:	ea ee       	ldi	r30, 0xEA	; 234
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	a0 83       	st	Z, r26
					UERST = 0;
 704:	10 82       	st	Z, r1
 706:	07 c0       	rjmp	.+14     	; 0x716 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 708:	81 e2       	ldi	r24, 0x21	; 33
 70a:	80 93 eb 00 	sts	0x00EB, r24
 70e:	03 c0       	rjmp	.+6      	; 0x716 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 710:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 712:	41 11       	cpse	r20, r1
 714:	fa ce       	rjmp	.-524    	; 0x50a <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	bf 91       	pop	r27
 720:	af 91       	pop	r26
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	7f 91       	pop	r23
 728:	6f 91       	pop	r22
 72a:	5f 91       	pop	r21
 72c:	4f 91       	pop	r20
 72e:	3f 91       	pop	r19
 730:	2f 91       	pop	r18
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
 744:	ec eb       	ldi	r30, 0xBC	; 188
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	88 23       	and	r24, r24
 74c:	34 f0       	brlt	.+12     	; 0x75a <twi_wait+0x1a>
 74e:	2f 5f       	subi	r18, 0xFF	; 255
 750:	3f 4f       	sbci	r19, 0xFF	; 255
 752:	29 3e       	cpi	r18, 0xE9	; 233
 754:	83 e0       	ldi	r24, 0x03	; 3
 756:	38 07       	cpc	r19, r24
 758:	b9 f7       	brne	.-18     	; 0x748 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	28 3e       	cpi	r18, 0xE8	; 232
 75e:	33 40       	sbci	r19, 0x03	; 3
 760:	09 f4       	brne	.+2      	; 0x764 <twi_wait+0x24>
 762:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
 764:	08 95       	ret

00000766 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 766:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 76a:	84 e8       	ldi	r24, 0x84	; 132
 76c:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
 770:	0e 94 a0 03 	call	0x740	; 0x740 <twi_wait>
 774:	88 23       	and	r24, r24
 776:	21 f0       	breq	.+8      	; 0x780 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
 778:	80 91 b9 00 	lds	r24, 0x00B9
 77c:	88 7f       	andi	r24, 0xF8	; 248
 77e:	08 95       	ret
	} else {
		return 0;					// comm failure
 780:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 782:	08 95       	ret

00000784 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
 784:	cf 93       	push	r28
 786:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 788:	94 ea       	ldi	r25, 0xA4	; 164
 78a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
 78e:	0e 94 a0 03 	call	0x740	; 0x740 <twi_wait>
 792:	88 23       	and	r24, r24
 794:	59 f0       	breq	.+22     	; 0x7ac <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
 796:	8c 2f       	mov	r24, r28
 798:	88 0f       	add	r24, r24
 79a:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
 79e:	80 32       	cpi	r24, 0x20	; 32
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 7a2:	84 e9       	ldi	r24, 0x94	; 148
 7a4:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
 7b0:	81 e0       	ldi	r24, 0x01	; 1
}	
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 7b6:	84 e9       	ldi	r24, 0x94	; 148
 7b8:	80 93 bc 00 	sts	0x00BC, r24
 7bc:	08 95       	ret

000007be <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
 7be:	0e 94 c9 01 	call	0x392	; 0x392 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 7c2:	88 e5       	ldi	r24, 0x58	; 88
 7c4:	0e 94 c2 03 	call	0x784	; 0x784 <start_write>
 7c8:	88 23       	and	r24, r24
 7ca:	09 f4       	brne	.+2      	; 0x7ce <m_wii_open+0x10>
 7cc:	c7 c0       	rjmp	.+398    	; 0x95c <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
 7ce:	80 e3       	ldi	r24, 0x30	; 48
 7d0:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 7d4:	88 23       	and	r24, r24
 7d6:	09 f4       	brne	.+2      	; 0x7da <m_wii_open+0x1c>
 7d8:	c3 c0       	rjmp	.+390    	; 0x960 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 7e0:	88 23       	and	r24, r24
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <m_wii_open+0x28>
 7e4:	bf c0       	rjmp	.+382    	; 0x964 <m_wii_open+0x1a6>
	end();
 7e6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ea:	83 ec       	ldi	r24, 0xC3	; 195
 7ec:	99 e0       	ldi	r25, 0x09	; 9
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <m_wii_open+0x30>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <m_wii_open+0x36>
 7f4:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 7f6:	88 e5       	ldi	r24, 0x58	; 88
 7f8:	0e 94 c2 03 	call	0x784	; 0x784 <start_write>
 7fc:	88 23       	and	r24, r24
 7fe:	09 f4       	brne	.+2      	; 0x802 <m_wii_open+0x44>
 800:	b3 c0       	rjmp	.+358    	; 0x968 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 808:	88 23       	and	r24, r24
 80a:	09 f4       	brne	.+2      	; 0x80e <m_wii_open+0x50>
 80c:	af c0       	rjmp	.+350    	; 0x96c <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 814:	88 23       	and	r24, r24
 816:	09 f4       	brne	.+2      	; 0x81a <m_wii_open+0x5c>
 818:	ab c0       	rjmp	.+342    	; 0x970 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 820:	88 23       	and	r24, r24
 822:	09 f4       	brne	.+2      	; 0x826 <m_wii_open+0x68>
 824:	a7 c0       	rjmp	.+334    	; 0x974 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 82c:	88 23       	and	r24, r24
 82e:	09 f4       	brne	.+2      	; 0x832 <m_wii_open+0x74>
 830:	a3 c0       	rjmp	.+326    	; 0x978 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 838:	88 23       	and	r24, r24
 83a:	09 f4       	brne	.+2      	; 0x83e <m_wii_open+0x80>
 83c:	9f c0       	rjmp	.+318    	; 0x97c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 844:	88 23       	and	r24, r24
 846:	09 f4       	brne	.+2      	; 0x84a <m_wii_open+0x8c>
 848:	9b c0       	rjmp	.+310    	; 0x980 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <m_wii_open+0x98>
 854:	97 c0       	rjmp	.+302    	; 0x984 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
 856:	80 e9       	ldi	r24, 0x90	; 144
 858:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 85c:	88 23       	and	r24, r24
 85e:	09 f4       	brne	.+2      	; 0x862 <m_wii_open+0xa4>
 860:	93 c0       	rjmp	.+294    	; 0x988 <m_wii_open+0x1ca>
	end();
 862:	0e 94 db 03 	call	0x7b6	; 0x7b6 <end>
 866:	83 ec       	ldi	r24, 0xC3	; 195
 868:	99 e0       	ldi	r25, 0x09	; 9
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	f1 f7       	brne	.-4      	; 0x86a <m_wii_open+0xac>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <m_wii_open+0xb2>
 870:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 872:	88 e5       	ldi	r24, 0x58	; 88
 874:	0e 94 c2 03 	call	0x784	; 0x784 <start_write>
 878:	88 23       	and	r24, r24
 87a:	09 f4       	brne	.+2      	; 0x87e <m_wii_open+0xc0>
 87c:	87 c0       	rjmp	.+270    	; 0x98c <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
 87e:	87 e0       	ldi	r24, 0x07	; 7
 880:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 884:	88 23       	and	r24, r24
 886:	09 f4       	brne	.+2      	; 0x88a <m_wii_open+0xcc>
 888:	83 c0       	rjmp	.+262    	; 0x990 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 890:	88 23       	and	r24, r24
 892:	09 f4       	brne	.+2      	; 0x896 <m_wii_open+0xd8>
 894:	7f c0       	rjmp	.+254    	; 0x994 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
 896:	81 e4       	ldi	r24, 0x41	; 65
 898:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 89c:	88 23       	and	r24, r24
 89e:	09 f4       	brne	.+2      	; 0x8a2 <m_wii_open+0xe4>
 8a0:	7b c0       	rjmp	.+246    	; 0x998 <m_wii_open+0x1da>
	end();
 8a2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <end>
 8a6:	83 ec       	ldi	r24, 0xC3	; 195
 8a8:	99 e0       	ldi	r25, 0x09	; 9
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <m_wii_open+0xec>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <m_wii_open+0xf2>
 8b0:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 8b2:	88 e5       	ldi	r24, 0x58	; 88
 8b4:	0e 94 c2 03 	call	0x784	; 0x784 <start_write>
 8b8:	88 23       	and	r24, r24
 8ba:	09 f4       	brne	.+2      	; 0x8be <m_wii_open+0x100>
 8bc:	6f c0       	rjmp	.+222    	; 0x99c <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
 8be:	8a e1       	ldi	r24, 0x1A	; 26
 8c0:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 8c4:	88 23       	and	r24, r24
 8c6:	09 f4       	brne	.+2      	; 0x8ca <m_wii_open+0x10c>
 8c8:	6b c0       	rjmp	.+214    	; 0x9a0 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
 8ca:	80 e4       	ldi	r24, 0x40	; 64
 8cc:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 8d0:	88 23       	and	r24, r24
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <m_wii_open+0x118>
 8d4:	67 c0       	rjmp	.+206    	; 0x9a4 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 8dc:	88 23       	and	r24, r24
 8de:	09 f4       	brne	.+2      	; 0x8e2 <m_wii_open+0x124>
 8e0:	63 c0       	rjmp	.+198    	; 0x9a8 <m_wii_open+0x1ea>
	end();
 8e2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <end>
 8e6:	83 ec       	ldi	r24, 0xC3	; 195
 8e8:	99 e0       	ldi	r25, 0x09	; 9
 8ea:	01 97       	sbiw	r24, 0x01	; 1
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <m_wii_open+0x12c>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <m_wii_open+0x132>
 8f0:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 8f2:	88 e5       	ldi	r24, 0x58	; 88
 8f4:	0e 94 c2 03 	call	0x784	; 0x784 <start_write>
 8f8:	88 23       	and	r24, r24
 8fa:	09 f4       	brne	.+2      	; 0x8fe <m_wii_open+0x140>
 8fc:	57 c0       	rjmp	.+174    	; 0x9ac <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
 8fe:	83 e3       	ldi	r24, 0x33	; 51
 900:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 904:	88 23       	and	r24, r24
 906:	09 f4       	brne	.+2      	; 0x90a <m_wii_open+0x14c>
 908:	53 c0       	rjmp	.+166    	; 0x9b0 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 910:	88 23       	and	r24, r24
 912:	09 f4       	brne	.+2      	; 0x916 <m_wii_open+0x158>
 914:	4f c0       	rjmp	.+158    	; 0x9b4 <m_wii_open+0x1f6>
	end();
 916:	0e 94 db 03 	call	0x7b6	; 0x7b6 <end>
 91a:	83 ec       	ldi	r24, 0xC3	; 195
 91c:	99 e0       	ldi	r25, 0x09	; 9
 91e:	01 97       	sbiw	r24, 0x01	; 1
 920:	f1 f7       	brne	.-4      	; 0x91e <m_wii_open+0x160>
 922:	00 c0       	rjmp	.+0      	; 0x924 <m_wii_open+0x166>
 924:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 926:	88 e5       	ldi	r24, 0x58	; 88
 928:	0e 94 c2 03 	call	0x784	; 0x784 <start_write>
 92c:	88 23       	and	r24, r24
 92e:	09 f4       	brne	.+2      	; 0x932 <m_wii_open+0x174>
 930:	43 c0       	rjmp	.+134    	; 0x9b8 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
 932:	80 e3       	ldi	r24, 0x30	; 48
 934:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 938:	88 23       	and	r24, r24
 93a:	09 f4       	brne	.+2      	; 0x93e <m_wii_open+0x180>
 93c:	3f c0       	rjmp	.+126    	; 0x9bc <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
 93e:	88 e0       	ldi	r24, 0x08	; 8
 940:	0e 94 b3 03 	call	0x766	; 0x766 <send_byte>
 944:	88 23       	and	r24, r24
 946:	e1 f1       	breq	.+120    	; 0x9c0 <m_wii_open+0x202>
	end();
 948:	0e 94 db 03 	call	0x7b6	; 0x7b6 <end>
 94c:	83 ec       	ldi	r24, 0xC3	; 195
 94e:	99 e0       	ldi	r25, 0x09	; 9
 950:	01 97       	sbiw	r24, 0x01	; 1
 952:	f1 f7       	brne	.-4      	; 0x950 <m_wii_open+0x192>
 954:	00 c0       	rjmp	.+0      	; 0x956 <m_wii_open+0x198>
 956:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
 990:	80 e0       	ldi	r24, 0x00	; 0
 992:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
 9a4:	80 e0       	ldi	r24, 0x00	; 0
 9a6:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
 9c0:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
 9c2:	08 95       	ret

000009c4 <_exit>:
 9c4:	f8 94       	cli

000009c6 <__stop_program>:
 9c6:	ff cf       	rjmp	.-2      	; 0x9c6 <__stop_program>
