
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000028da  0000296e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800114  00800114  00002982  2**0
                  ALLOC
  3 .stab         0000387c  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007366  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  00007395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002902  00000000  00000000  0000762d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aa3  00000000  00000000  00009f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011ff  00000000  00000000  0000a9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000870  00000000  00000000  0000bbd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007fb  00000000  00000000  0000c444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e55  00000000  00000000  0000cc3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a0  00000000  00000000  0000fa94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_3>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_10>
      2c:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_29>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	ea ed       	ldi	r30, 0xDA	; 218
     1be:	f8 e2       	ldi	r31, 0x28	; 40
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a4 31       	cpi	r26, 0x14	; 20
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a4 e1       	ldi	r26, 0x14	; 20
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	aa 3a       	cpi	r26, 0xAA	; 170
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 17 03 	call	0x62e	; 0x62e <main>
     1e0:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <rotate>:
#define CLOCK 0

char buffer[10];
int state = 0;

void rotate(int dir) {
     1e8:	fc 01       	movw	r30, r24
	OCR1B = OCR1A/7;
     1ea:	40 91 88 00 	lds	r20, 0x0088
     1ee:	50 91 89 00 	lds	r21, 0x0089
     1f2:	9a 01       	movw	r18, r20
     1f4:	a3 e9       	ldi	r26, 0x93	; 147
     1f6:	b4 e2       	ldi	r27, 0x24	; 36
     1f8:	0e 94 1a 14 	call	0x2834	; 0x2834 <__umulhisi3>
     1fc:	48 1b       	sub	r20, r24
     1fe:	59 0b       	sbc	r21, r25
     200:	56 95       	lsr	r21
     202:	47 95       	ror	r20
     204:	84 0f       	add	r24, r20
     206:	95 1f       	adc	r25, r21
     208:	96 95       	lsr	r25
     20a:	87 95       	ror	r24
     20c:	96 95       	lsr	r25
     20e:	87 95       	ror	r24
     210:	90 93 8b 00 	sts	0x008B, r25
     214:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3/7;
     218:	40 91 96 00 	lds	r20, 0x0096
     21c:	50 91 97 00 	lds	r21, 0x0097
     220:	9a 01       	movw	r18, r20
     222:	0e 94 1a 14 	call	0x2834	; 0x2834 <__umulhisi3>
     226:	48 1b       	sub	r20, r24
     228:	59 0b       	sbc	r21, r25
     22a:	56 95       	lsr	r21
     22c:	47 95       	ror	r20
     22e:	84 0f       	add	r24, r20
     230:	95 1f       	adc	r25, r21
     232:	96 95       	lsr	r25
     234:	87 95       	ror	r24
     236:	96 95       	lsr	r25
     238:	87 95       	ror	r24
     23a:	90 93 99 00 	sts	0x0099, r25
     23e:	80 93 98 00 	sts	0x0098, r24
	if (dir == RIGHT) {
     242:	30 97       	sbiw	r30, 0x00	; 0
     244:	19 f4       	brne	.+6      	; 0x24c <rotate+0x64>
		set(PORTB,2);
     246:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     248:	2b 98       	cbi	0x05, 3	; 5
     24a:	08 95       	ret
	}
	else if (dir == LEFT) {
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	11 f4       	brne	.+4      	; 0x254 <rotate+0x6c>
		clear(PORTB,2);
     250:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     252:	2b 9a       	sbi	0x05, 3	; 5
     254:	08 95       	ret

00000256 <turn>:
	}
}

void turn(int dir,int degree) {
	set(PORTB,2);
     256:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     258:	2b 9a       	sbi	0x05, 3	; 5
	if (dir == LEFT) {
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	91 05       	cpc	r25, r1
     25e:	79 f4       	brne	.+30     	; 0x27e <turn+0x28>
		OCR3A = ICR3;
     260:	80 91 96 00 	lds	r24, 0x0096
     264:	90 91 97 00 	lds	r25, 0x0097
     268:	90 93 99 00 	sts	0x0099, r25
     26c:	80 93 98 00 	sts	0x0098, r24
		OCR1B = degree;
     270:	86 2f       	mov	r24, r22
     272:	97 2f       	mov	r25, r23
     274:	90 93 8b 00 	sts	0x008B, r25
     278:	80 93 8a 00 	sts	0x008A, r24
     27c:	08 95       	ret
	}
	
		if (dir == RIGHT) {
     27e:	89 2b       	or	r24, r25
     280:	71 f4       	brne	.+28     	; 0x29e <turn+0x48>
			OCR3A = degree;
     282:	86 2f       	mov	r24, r22
     284:	97 2f       	mov	r25, r23
     286:	90 93 99 00 	sts	0x0099, r25
     28a:	80 93 98 00 	sts	0x0098, r24
			OCR1B = OCR1A;
     28e:	80 91 88 00 	lds	r24, 0x0088
     292:	90 91 89 00 	lds	r25, 0x0089
     296:	90 93 8b 00 	sts	0x008B, r25
     29a:	80 93 8a 00 	sts	0x008A, r24
     29e:	08 95       	ret

000002a0 <forward>:
	clear(PORTB,2);
	clear(PORTB,3);
}

void forward() {
			OCR1B = OCR1A;
     2a0:	80 91 88 00 	lds	r24, 0x0088
     2a4:	90 91 89 00 	lds	r25, 0x0089
     2a8:	90 93 8b 00 	sts	0x008B, r25
     2ac:	80 93 8a 00 	sts	0x008A, r24
			OCR3A = ICR3;
     2b0:	80 91 96 00 	lds	r24, 0x0096
     2b4:	90 91 97 00 	lds	r25, 0x0097
     2b8:	90 93 99 00 	sts	0x0099, r25
     2bc:	80 93 98 00 	sts	0x0098, r24
			set(PORTB,2);
     2c0:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB,3);
     2c2:	2b 9a       	sbi	0x05, 3	; 5
     2c4:	08 95       	ret

000002c6 <shoot>:
void drive_to_goal() {
	drive_to_point(GOALBX,GOALBY);
}

void shoot() {
		set(PORTB,7);
     2c6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	81 ee       	ldi	r24, 0xE1	; 225
     2cc:	94 e0       	ldi	r25, 0x04	; 4
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	80 40       	sbci	r24, 0x00	; 0
     2d2:	90 40       	sbci	r25, 0x00	; 0
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <shoot+0x8>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <shoot+0x12>
     2d8:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     2da:	2f 98       	cbi	0x05, 7	; 5
     2dc:	08 95       	ret

000002de <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     2de:	10 92 8b 00 	sts	0x008B, r1
     2e2:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     2e6:	10 92 99 00 	sts	0x0099, r1
     2ea:	10 92 98 00 	sts	0x0098, r1
	clear(PORTB,2);
     2ee:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     2f0:	2b 98       	cbi	0x05, 3	; 5
     2f2:	08 95       	ret

000002f4 <drive_to_point>:

void drive_to_puck() {

}

void drive_to_point(int x, int y) {
     2f4:	2f 92       	push	r2
     2f6:	3f 92       	push	r3
     2f8:	4f 92       	push	r4
     2fa:	5f 92       	push	r5
     2fc:	6f 92       	push	r6
     2fe:	7f 92       	push	r7
     300:	8f 92       	push	r8
     302:	9f 92       	push	r9
     304:	af 92       	push	r10
     306:	bf 92       	push	r11
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	60 97       	sbiw	r28, 0x10	; 16
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	2c 01       	movw	r4, r24
     32a:	7b 01       	movw	r14, r22
	m_green(ON);
     32c:	6a 9a       	sbi	0x0d, 2	; 13
     32e:	72 98       	cbi	0x0e, 2	; 14
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	84 e3       	ldi	r24, 0x34	; 52
     334:	9c e0       	ldi	r25, 0x0C	; 12
     336:	21 50       	subi	r18, 0x01	; 1
     338:	80 40       	sbci	r24, 0x00	; 0
     33a:	90 40       	sbci	r25, 0x00	; 0
     33c:	e1 f7       	brne	.-8      	; 0x336 <drive_to_point+0x42>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <drive_to_point+0x4c>
     340:	00 00       	nop
	m_wait(250);
	localize(data);
     342:	84 e8       	ldi	r24, 0x84	; 132
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 02 08 	call	0x1004	; 0x1004 <localize>
	float xref = data[0];
     34a:	80 91 84 01 	lds	r24, 0x0184
     34e:	90 91 85 01 	lds	r25, 0x0185
     352:	a0 91 86 01 	lds	r26, 0x0186
     356:	b0 91 87 01 	lds	r27, 0x0187
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	9a 83       	std	Y+2, r25	; 0x02
     35e:	ab 83       	std	Y+3, r26	; 0x03
     360:	bc 83       	std	Y+4, r27	; 0x04
	float yref = data[1];
     362:	80 91 88 01 	lds	r24, 0x0188
     366:	90 91 89 01 	lds	r25, 0x0189
     36a:	a0 91 8a 01 	lds	r26, 0x018A
     36e:	b0 91 8b 01 	lds	r27, 0x018B
     372:	8d 83       	std	Y+5, r24	; 0x05
     374:	9e 83       	std	Y+6, r25	; 0x06
     376:	af 83       	std	Y+7, r26	; 0x07
     378:	b8 87       	std	Y+8, r27	; 0x08
	//Rotate until you are facing target
	int exit = 0;
	rotate(LEFT);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <rotate>
	while(1) {
		m_green(TOGGLE);
		//m_wait(250);
		localize(data);
		array[0] = (char)data[0];
     382:	00 ea       	ldi	r16, 0xA0	; 160
     384:	11 e0       	ldi	r17, 0x01	; 1
		array[1] = (char)data[1];
     386:	0f 2e       	mov	r0, r31
     388:	f1 ea       	ldi	r31, 0xA1	; 161
     38a:	2f 2e       	mov	r2, r31
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	3f 2e       	mov	r3, r31
     390:	f0 2d       	mov	r31, r0
		array[2] = 3;
		cli();
		m_rf_send(ADDRESS,array,PACKET_LENGTH);
		sei();
		if (fabs(atan2((float)y-yref,(float)x-xref)-(data[2] * 3.14 / 180.0)) < 3.14/100.0) {
     392:	c2 01       	movw	r24, r4
     394:	aa 27       	eor	r26, r26
     396:	97 fd       	sbrc	r25, 7
     398:	a0 95       	com	r26
     39a:	ba 2f       	mov	r27, r26
     39c:	89 87       	std	Y+9, r24	; 0x09
     39e:	9a 87       	std	Y+10, r25	; 0x0a
     3a0:	ab 87       	std	Y+11, r26	; 0x0b
     3a2:	bc 87       	std	Y+12, r27	; 0x0c
     3a4:	c7 01       	movw	r24, r14
     3a6:	aa 27       	eor	r26, r26
     3a8:	97 fd       	sbrc	r25, 7
     3aa:	a0 95       	com	r26
     3ac:	ba 2f       	mov	r27, r26
     3ae:	8d 87       	std	Y+13, r24	; 0x0d
     3b0:	9e 87       	std	Y+14, r25	; 0x0e
     3b2:	af 87       	std	Y+15, r26	; 0x0f
     3b4:	b8 8b       	std	Y+16, r27	; 0x10
	float yref = data[1];
	//Rotate until you are facing target
	int exit = 0;
	rotate(LEFT);
	while(1) {
		m_green(TOGGLE);
     3b6:	6a 9a       	sbi	0x0d, 2	; 13
     3b8:	8e b1       	in	r24, 0x0e	; 14
     3ba:	94 e0       	ldi	r25, 0x04	; 4
     3bc:	89 27       	eor	r24, r25
     3be:	8e b9       	out	0x0e, r24	; 14
		//m_wait(250);
		localize(data);
     3c0:	84 e8       	ldi	r24, 0x84	; 132
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 02 08 	call	0x1004	; 0x1004 <localize>
		array[0] = (char)data[0];
     3c8:	60 91 84 01 	lds	r22, 0x0184
     3cc:	70 91 85 01 	lds	r23, 0x0185
     3d0:	80 91 86 01 	lds	r24, 0x0186
     3d4:	90 91 87 01 	lds	r25, 0x0187
     3d8:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixunssfsi>
     3dc:	d8 01       	movw	r26, r16
     3de:	6c 93       	st	X, r22
		array[1] = (char)data[1];
     3e0:	e8 e8       	ldi	r30, 0x88	; 136
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	60 81       	ld	r22, Z
     3e6:	71 81       	ldd	r23, Z+1	; 0x01
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixunssfsi>
     3f0:	d1 01       	movw	r26, r2
     3f2:	6c 93       	st	X, r22
		array[2] = 3;
     3f4:	23 e0       	ldi	r18, 0x03	; 3
     3f6:	e2 ea       	ldi	r30, 0xA2	; 162
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	20 83       	st	Z, r18
		cli();
     3fc:	f8 94       	cli
		m_rf_send(ADDRESS,array,PACKET_LENGTH);
     3fe:	4a e0       	ldi	r20, 0x0A	; 10
     400:	b8 01       	movw	r22, r16
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <m_rf_send>
		sei();
     408:	78 94       	sei
		if (fabs(atan2((float)y-yref,(float)x-xref)-(data[2] * 3.14 / 180.0)) < 3.14/100.0) {
     40a:	69 85       	ldd	r22, Y+9	; 0x09
     40c:	7a 85       	ldd	r23, Y+10	; 0x0a
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	9c 85       	ldd	r25, Y+12	; 0x0c
     412:	0e 94 2d 12 	call	0x245a	; 0x245a <__floatsisf>
     416:	6b 01       	movw	r12, r22
     418:	7c 01       	movw	r14, r24
     41a:	6d 85       	ldd	r22, Y+13	; 0x0d
     41c:	7e 85       	ldd	r23, Y+14	; 0x0e
     41e:	8f 85       	ldd	r24, Y+15	; 0x0f
     420:	98 89       	ldd	r25, Y+16	; 0x10
     422:	0e 94 2d 12 	call	0x245a	; 0x245a <__floatsisf>
     426:	4b 01       	movw	r8, r22
     428:	5c 01       	movw	r10, r24
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	3a 81       	ldd	r19, Y+2	; 0x02
     42e:	4b 81       	ldd	r20, Y+3	; 0x03
     430:	5c 81       	ldd	r21, Y+4	; 0x04
     432:	c7 01       	movw	r24, r14
     434:	b6 01       	movw	r22, r12
     436:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     43a:	2b 01       	movw	r4, r22
     43c:	3c 01       	movw	r6, r24
     43e:	2d 81       	ldd	r18, Y+5	; 0x05
     440:	3e 81       	ldd	r19, Y+6	; 0x06
     442:	4f 81       	ldd	r20, Y+7	; 0x07
     444:	58 85       	ldd	r21, Y+8	; 0x08
     446:	c5 01       	movw	r24, r10
     448:	b4 01       	movw	r22, r8
     44a:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     44e:	a3 01       	movw	r20, r6
     450:	92 01       	movw	r18, r4
     452:	0e 94 38 11 	call	0x2270	; 0x2270 <atan2>
     456:	2b 01       	movw	r4, r22
     458:	3c 01       	movw	r6, r24
     45a:	23 ec       	ldi	r18, 0xC3	; 195
     45c:	35 ef       	ldi	r19, 0xF5	; 245
     45e:	48 e4       	ldi	r20, 0x48	; 72
     460:	50 e4       	ldi	r21, 0x40	; 64
     462:	ac e8       	ldi	r26, 0x8C	; 140
     464:	b1 e0       	ldi	r27, 0x01	; 1
     466:	6d 91       	ld	r22, X+
     468:	7d 91       	ld	r23, X+
     46a:	8d 91       	ld	r24, X+
     46c:	9c 91       	ld	r25, X
     46e:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	44 e3       	ldi	r20, 0x34	; 52
     478:	53 e4       	ldi	r21, 0x43	; 67
     47a:	0e 94 92 11 	call	0x2324	; 0x2324 <__divsf3>
     47e:	9b 01       	movw	r18, r22
     480:	ac 01       	movw	r20, r24
     482:	c3 01       	movw	r24, r6
     484:	b2 01       	movw	r22, r4
     486:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     48a:	9f 77       	andi	r25, 0x7F	; 127
     48c:	2a e4       	ldi	r18, 0x4A	; 74
     48e:	3d e9       	ldi	r19, 0x9D	; 157
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	5d e3       	ldi	r21, 0x3D	; 61
     494:	0e 94 8b 11 	call	0x2316	; 0x2316 <__cmpsf2>
     498:	88 23       	and	r24, r24
     49a:	44 f0       	brlt	.+16     	; 0x4ac <drive_to_point+0x1b8>
			break;
		}
		if (changedState) return;
     49c:	80 91 16 01 	lds	r24, 0x0116
     4a0:	90 91 17 01 	lds	r25, 0x0117
     4a4:	89 2b       	or	r24, r25
     4a6:	09 f4       	brne	.+2      	; 0x4aa <drive_to_point+0x1b6>
     4a8:	86 cf       	rjmp	.-244    	; 0x3b6 <drive_to_point+0xc2>
     4aa:	88 c0       	rjmp	.+272    	; 0x5bc <drive_to_point+0x2c8>
	}
	exit = 0;
	m_green(OFF);
     4ac:	6a 9a       	sbi	0x0d, 2	; 13
     4ae:	72 9a       	sbi	0x0e, 2	; 14
	m_red(ON);
     4b0:	6e 9a       	sbi	0x0d, 6	; 13
     4b2:	76 98       	cbi	0x0e, 6	; 14
	//Drive until you're close to being there
	forward();
     4b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <forward>
	while(!exit) {
		localize(data);
		array[0] = (char)data[0];
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f0 ea       	ldi	r31, 0xA0	; 160
     4bc:	2f 2e       	mov	r2, r31
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	3f 2e       	mov	r3, r31
     4c2:	f0 2d       	mov	r31, r0
	m_green(OFF);
	m_red(ON);
	//Drive until you're close to being there
	forward();
	while(!exit) {
		localize(data);
     4c4:	84 e8       	ldi	r24, 0x84	; 132
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 02 08 	call	0x1004	; 0x1004 <localize>
		array[0] = (char)data[0];
     4cc:	e4 e8       	ldi	r30, 0x84	; 132
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	60 81       	ld	r22, Z
     4d2:	71 81       	ldd	r23, Z+1	; 0x01
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	93 81       	ldd	r25, Z+3	; 0x03
     4d8:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixunssfsi>
     4dc:	d1 01       	movw	r26, r2
     4de:	6c 93       	st	X, r22
		array[1] = (char)data[1];
     4e0:	e8 e8       	ldi	r30, 0x88	; 136
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	60 81       	ld	r22, Z
     4e6:	71 81       	ldd	r23, Z+1	; 0x01
     4e8:	82 81       	ldd	r24, Z+2	; 0x02
     4ea:	93 81       	ldd	r25, Z+3	; 0x03
     4ec:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixunssfsi>
     4f0:	a1 ea       	ldi	r26, 0xA1	; 161
     4f2:	b1 e0       	ldi	r27, 0x01	; 1
     4f4:	6c 93       	st	X, r22
		array[2] = 3;
     4f6:	23 e0       	ldi	r18, 0x03	; 3
     4f8:	e2 ea       	ldi	r30, 0xA2	; 162
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	20 83       	st	Z, r18
		cli();
     4fe:	f8 94       	cli
		m_rf_send(ADDRESS,array,PACKET_LENGTH);
     500:	4a e0       	ldi	r20, 0x0A	; 10
     502:	b1 01       	movw	r22, r2
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <m_rf_send>
		sei();
     50a:	78 94       	sei
		if (sqrt((data[1]-y)*(data[1]-y)+(data[0]-x)*(data[0]-x)) < 5) {
     50c:	a5 01       	movw	r20, r10
     50e:	94 01       	movw	r18, r8
     510:	a8 e8       	ldi	r26, 0x88	; 136
     512:	b1 e0       	ldi	r27, 0x01	; 1
     514:	6d 91       	ld	r22, X+
     516:	7d 91       	ld	r23, X+
     518:	8d 91       	ld	r24, X+
     51a:	9c 91       	ld	r25, X
     51c:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     520:	56 2e       	mov	r5, r22
     522:	67 2e       	mov	r6, r23
     524:	78 2e       	mov	r7, r24
     526:	09 2f       	mov	r16, r25
     528:	a7 01       	movw	r20, r14
     52a:	96 01       	movw	r18, r12
     52c:	e4 e8       	ldi	r30, 0x84	; 132
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     53c:	69 83       	std	Y+1, r22	; 0x01
     53e:	17 2f       	mov	r17, r23
     540:	89 87       	std	Y+9, r24	; 0x09
     542:	9d 83       	std	Y+5, r25	; 0x05
     544:	25 2d       	mov	r18, r5
     546:	36 2d       	mov	r19, r6
     548:	47 2d       	mov	r20, r7
     54a:	50 2f       	mov	r21, r16
     54c:	65 2d       	mov	r22, r5
     54e:	76 2d       	mov	r23, r6
     550:	87 2d       	mov	r24, r7
     552:	90 2f       	mov	r25, r16
     554:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
     558:	2b 01       	movw	r4, r22
     55a:	3c 01       	movw	r6, r24
     55c:	79 81       	ldd	r23, Y+1	; 0x01
     55e:	99 85       	ldd	r25, Y+9	; 0x09
     560:	8d 81       	ldd	r24, Y+5	; 0x05
     562:	27 2f       	mov	r18, r23
     564:	31 2f       	mov	r19, r17
     566:	49 2f       	mov	r20, r25
     568:	58 2f       	mov	r21, r24
     56a:	67 2f       	mov	r22, r23
     56c:	71 2f       	mov	r23, r17
     56e:	89 2f       	mov	r24, r25
     570:	95 2f       	mov	r25, r21
     572:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	c3 01       	movw	r24, r6
     57c:	b2 01       	movw	r22, r4
     57e:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     582:	0e 94 b3 13 	call	0x2766	; 0x2766 <sqrt>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 ea       	ldi	r20, 0xA0	; 160
     58c:	50 e4       	ldi	r21, 0x40	; 64
     58e:	0e 94 8b 11 	call	0x2316	; 0x2316 <__cmpsf2>
     592:	88 23       	and	r24, r24
     594:	6c f0       	brlt	.+26     	; 0x5b0 <drive_to_point+0x2bc>
			exit = 1;
		}
		if (changedState) return;
     596:	80 91 16 01 	lds	r24, 0x0116
     59a:	90 91 17 01 	lds	r25, 0x0117
     59e:	89 2b       	or	r24, r25
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <drive_to_point+0x2b0>
     5a2:	90 cf       	rjmp	.-224    	; 0x4c4 <drive_to_point+0x1d0>
     5a4:	0b c0       	rjmp	.+22     	; 0x5bc <drive_to_point+0x2c8>
	}
	m_red(OFF);
     5a6:	6e 9a       	sbi	0x0d, 6	; 13
     5a8:	76 9a       	sbi	0x0e, 6	; 14
	game_pause();
     5aa:	0e 94 6f 01 	call	0x2de	; 0x2de <game_pause>
     5ae:	06 c0       	rjmp	.+12     	; 0x5bc <drive_to_point+0x2c8>
		m_rf_send(ADDRESS,array,PACKET_LENGTH);
		sei();
		if (sqrt((data[1]-y)*(data[1]-y)+(data[0]-x)*(data[0]-x)) < 5) {
			exit = 1;
		}
		if (changedState) return;
     5b0:	80 91 16 01 	lds	r24, 0x0116
     5b4:	90 91 17 01 	lds	r25, 0x0117
     5b8:	89 2b       	or	r24, r25
     5ba:	a9 f3       	breq	.-22     	; 0x5a6 <drive_to_point+0x2b2>
	}
	m_red(OFF);
	game_pause();
}
     5bc:	60 96       	adiw	r28, 0x10	; 16
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	7f 90       	pop	r7
     5e2:	6f 90       	pop	r6
     5e4:	5f 90       	pop	r5
     5e6:	4f 90       	pop	r4
     5e8:	3f 90       	pop	r3
     5ea:	2f 90       	pop	r2
     5ec:	08 95       	ret

000005ee <drive_to_goal>:

void drive_to_goal() {
	drive_to_point(GOALBX,GOALBY);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	83 e7       	ldi	r24, 0x73	; 115
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <drive_to_point>
     5fa:	08 95       	ret

000005fc <comm_test>:
	set(PORTB,2);
	set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     5fc:	5d 9a       	sbi	0x0b, 5	; 11
     5fe:	2f ef       	ldi	r18, 0xFF	; 255
     600:	89 e6       	ldi	r24, 0x69	; 105
     602:	98 e1       	ldi	r25, 0x18	; 24
     604:	21 50       	subi	r18, 0x01	; 1
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	e1 f7       	brne	.-8      	; 0x604 <comm_test+0x8>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <comm_test+0x12>
     60e:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     610:	5d 98       	cbi	0x0b, 5	; 11
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	89 e6       	ldi	r24, 0x69	; 105
     616:	98 e1       	ldi	r25, 0x18	; 24
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	80 40       	sbci	r24, 0x00	; 0
     61c:	90 40       	sbci	r25, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <comm_test+0x1c>
     620:	00 c0       	rjmp	.+0      	; 0x622 <comm_test+0x26>
     622:	00 00       	nop
	m_wait(500);
	state = 0;
     624:	10 92 15 01 	sts	0x0115, r1
     628:	10 92 14 01 	sts	0x0114, r1
     62c:	08 95       	ret

0000062e <main>:
		*/
}

int main(void)
{
	set(DDRD,5);
     62e:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     630:	0e 94 22 05 	call	0xa44	; 0xa44 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     634:	4a e0       	ldi	r20, 0x0A	; 10
     636:	68 e0       	ldi	r22, 0x08	; 8
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     63e:	e1 e6       	ldi	r30, 0x61	; 97
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 e8       	ldi	r24, 0x80	; 128
     644:	80 83       	st	Z, r24
     646:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     648:	85 b5       	in	r24, 0x25	; 37
     64a:	88 60       	ori	r24, 0x08	; 8
     64c:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     64e:	84 b5       	in	r24, 0x24	; 36
     650:	82 60       	ori	r24, 0x02	; 2
     652:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     654:	84 b5       	in	r24, 0x24	; 36
     656:	82 60       	ori	r24, 0x02	; 2
     658:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     65a:	84 b5       	in	r24, 0x24	; 36
     65c:	80 62       	ori	r24, 0x20	; 32
     65e:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     660:	84 b5       	in	r24, 0x24	; 36
     662:	8f 7e       	andi	r24, 0xEF	; 239
     664:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     666:	85 b5       	in	r24, 0x25	; 37
     668:	84 60       	ori	r24, 0x04	; 4
     66a:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     66c:	85 b5       	in	r24, 0x25	; 37
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     672:	85 b5       	in	r24, 0x25	; 37
     674:	81 60       	ori	r24, 0x01	; 1
     676:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     678:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     67e:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     680:	e1 e8       	ldi	r30, 0x81	; 129
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	80 61       	ori	r24, 0x10	; 16
     688:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     68a:	80 81       	ld	r24, Z
     68c:	88 60       	ori	r24, 0x08	; 8
     68e:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     690:	a0 e8       	ldi	r26, 0x80	; 128
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	8c 91       	ld	r24, X
     696:	82 60       	ori	r24, 0x02	; 2
     698:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     69a:	8c 91       	ld	r24, X
     69c:	81 60       	ori	r24, 0x01	; 1
     69e:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     6a0:	8c 91       	ld	r24, X
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     6a6:	8c 91       	ld	r24, X
     6a8:	8f 7e       	andi	r24, 0xEF	; 239
     6aa:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     6ac:	80 81       	ld	r24, Z
     6ae:	8b 7f       	andi	r24, 0xFB	; 251
     6b0:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     6b2:	80 81       	ld	r24, Z
     6b4:	8d 7f       	andi	r24, 0xFD	; 253
     6b6:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     6b8:	80 81       	ld	r24, Z
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	80 83       	st	Z, r24
	
	set(DDRB,6);
     6be:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	9f ef       	ldi	r25, 0xFF	; 255
     6c4:	90 93 89 00 	sts	0x0089, r25
     6c8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     6cc:	10 92 8b 00 	sts	0x008B, r1
     6d0:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     6d4:	e1 e9       	ldi	r30, 0x91	; 145
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	20 81       	ld	r18, Z
     6da:	20 61       	ori	r18, 0x10	; 16
     6dc:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     6de:	20 81       	ld	r18, Z
     6e0:	28 60       	ori	r18, 0x08	; 8
     6e2:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     6e4:	a0 e9       	ldi	r26, 0x90	; 144
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	2c 91       	ld	r18, X
     6ea:	22 60       	ori	r18, 0x02	; 2
     6ec:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     6ee:	2c 91       	ld	r18, X
     6f0:	2e 7f       	andi	r18, 0xFE	; 254
     6f2:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     6f4:	2c 91       	ld	r18, X
     6f6:	20 68       	ori	r18, 0x80	; 128
     6f8:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     6fa:	2c 91       	ld	r18, X
     6fc:	2f 7b       	andi	r18, 0xBF	; 191
     6fe:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     700:	20 81       	ld	r18, Z
     702:	2b 7f       	andi	r18, 0xFB	; 251
     704:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     706:	20 81       	ld	r18, Z
     708:	2d 7f       	andi	r18, 0xFD	; 253
     70a:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     70c:	20 81       	ld	r18, Z
     70e:	21 60       	ori	r18, 0x01	; 1
     710:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     712:	90 93 97 00 	sts	0x0097, r25
     716:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     71a:	10 92 99 00 	sts	0x0099, r1
     71e:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     722:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     724:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     726:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     728:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     72a:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     72c:	78 94       	sei
	set(ADCSRA,ADIE);
     72e:	ea e7       	ldi	r30, 0x7A	; 122
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	88 60       	ori	r24, 0x08	; 8
     736:	80 83       	st	Z, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     738:	ac e7       	ldi	r26, 0x7C	; 124
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	8c 91       	ld	r24, X
     73e:	8f 77       	andi	r24, 0x7F	; 127
     740:	8c 93       	st	X, r24
	clear(ADMUX, REFS0);	//^
     742:	8c 91       	ld	r24, X
     744:	8f 7b       	andi	r24, 0xBF	; 191
     746:	8c 93       	st	X, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     748:	80 81       	ld	r24, Z
     74a:	84 60       	ori	r24, 0x04	; 4
     74c:	80 83       	st	Z, r24
	set(ADCSRA, ADPS1);	//^
     74e:	80 81       	ld	r24, Z
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);	//^
     754:	80 81       	ld	r24, Z
     756:	81 60       	ori	r24, 0x01	; 1
     758:	80 83       	st	Z, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     75a:	ae e7       	ldi	r26, 0x7E	; 126
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	8c 91       	ld	r24, X
     760:	81 60       	ori	r24, 0x01	; 1
     762:	8c 93       	st	X, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
     764:	8c 91       	ld	r24, X
     766:	82 60       	ori	r24, 0x02	; 2
     768:	8c 93       	st	X, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
     76a:	8c 91       	ld	r24, X
     76c:	80 61       	ori	r24, 0x10	; 16
     76e:	8c 93       	st	X, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
     770:	8c 91       	ld	r24, X
     772:	80 62       	ori	r24, 0x20	; 32
     774:	8c 93       	st	X, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
     776:	8c 91       	ld	r24, X
     778:	80 64       	ori	r24, 0x40	; 64
     77a:	8c 93       	st	X, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
     77c:	ad e7       	ldi	r26, 0x7D	; 125
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	8c 91       	ld	r24, X
     782:	81 60       	ori	r24, 0x01	; 1
     784:	8c 93       	st	X, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
     786:	8c 91       	ld	r24, X
     788:	82 60       	ori	r24, 0x02	; 2
     78a:	8c 93       	st	X, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     78c:	80 81       	ld	r24, Z
     78e:	80 62       	ori	r24, 0x20	; 32
     790:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     792:	80 81       	ld	r24, Z
     794:	80 61       	ori	r24, 0x10	; 16
     796:	80 83       	st	Z, r24
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     798:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     79a:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     79c:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     79e:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 0; //set state
     7a0:	10 92 15 01 	sts	0x0115, r1
     7a4:	10 92 14 01 	sts	0x0114, r1
	long count = 0;
	
	char yes;
	//m_bus_init();
	m_wii_open();
     7a8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <m_wii_open>
	//m_usb_init();
	//while(!m_usb_isconnected());
	local_init();
     7ac:	0e 94 f6 07 	call	0xfec	; 0xfec <local_init>
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
		}
		*/
}

int main(void)
     7b0:	00 ec       	ldi	r16, 0xC0	; 192
     7b2:	11 e0       	ldi	r17, 0x01	; 1
			break;
			
			case 20:

	//m_rf_send(ADDRESS, array, PACKET_LENGTH);
			m_green(TOGGLE);
     7b4:	68 94       	set
     7b6:	55 24       	eor	r5, r5
     7b8:	52 f8       	bld	r5, 2
				clear(PORTB,3);
				clear(PORTB,2);
			break;
			
			case -2: //test turning n driving n stuff
			turn(LEFT,OCR1A/4);
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f8 e8       	ldi	r31, 0x88	; 136
     7be:	cf 2e       	mov	r12, r31
     7c0:	d1 2c       	mov	r13, r1
     7c2:	f0 2d       	mov	r31, r0
			m_wait(1000);
			turn(RIGHT, ICR3/5);
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f6 e9       	ldi	r31, 0x96	; 150
     7c8:	ef 2e       	mov	r14, r31
     7ca:	f1 2c       	mov	r15, r1
     7cc:	f0 2d       	mov	r31, r0
        switch (state) {
			
			case -4:
			m_wait(1000);
				shoot();
				state = -3;
     7ce:	0f 2e       	mov	r0, r31
     7d0:	fd ef       	ldi	r31, 0xFD	; 253
     7d2:	8f 2e       	mov	r8, r31
     7d4:	99 24       	eor	r9, r9
     7d6:	9a 94       	dec	r9
     7d8:	f0 2d       	mov	r31, r0
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     7da:	0f 2e       	mov	r0, r31
     7dc:	fa e8       	ldi	r31, 0x8A	; 138
     7de:	af 2e       	mov	r10, r31
     7e0:	b1 2c       	mov	r11, r1
     7e2:	f0 2d       	mov	r31, r0
				OCR3A = ICR3;
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f8 e9       	ldi	r31, 0x98	; 152
     7e8:	6f 2e       	mov	r6, r31
     7ea:	71 2c       	mov	r7, r1
     7ec:	f0 2d       	mov	r31, r0
	
	char rx_buffer;

    while(1)
    {
		changedState = 0;
     7ee:	10 92 17 01 	sts	0x0117, r1
     7f2:	10 92 16 01 	sts	0x0116, r1
		*/
		
		//constant localization
		//m_red(ON);
		//m_green(OFF);
		localize(data);
     7f6:	84 e8       	ldi	r24, 0x84	; 132
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 02 08 	call	0x1004	; 0x1004 <localize>
		//m_red(OFF);
		//m_green(ON);
		
		//*
		//while(!m_usb_rx_available());  	//wait for an indication from the computer
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
     7fe:	0e 94 48 0c 	call	0x1890	; 0x1890 <m_usb_rx_char>
     802:	c8 2f       	mov	r28, r24

		m_usb_rx_flush();  				//clear buffer
     804:	0e 94 66 0c 	call	0x18cc	; 0x18cc <m_usb_rx_flush>

		if(rx_buffer == 1) {  			//computer wants ir buffer
     808:	c1 30       	cpi	r28, 0x01	; 1
     80a:	a1 f4       	brne	.+40     	; 0x834 <main+0x206>
     80c:	c4 e8       	ldi	r28, 0x84	; 132
     80e:	d1 e0       	ldi	r29, 0x01	; 1
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5

			for (int i = 0 ; i < 15 ; i++){
				m_usb_tx_int((int)data[i]);
     810:	69 91       	ld	r22, Y+
     812:	79 91       	ld	r23, Y+
     814:	89 91       	ld	r24, Y+
     816:	99 91       	ld	r25, Y+
     818:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fixsfsi>
     81c:	cb 01       	movw	r24, r22
     81e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <m_usb_tx_int>
				m_usb_tx_char('\t');
     822:	89 e0       	ldi	r24, 0x09	; 9
     824:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <m_usb_tx_char>
		m_usb_rx_flush();  				//clear buffer

		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5

			for (int i = 0 ; i < 15 ; i++){
     828:	c0 17       	cp	r28, r16
     82a:	d1 07       	cpc	r29, r17
     82c:	89 f7       	brne	.-30     	; 0x810 <main+0x1e2>
				m_usb_tx_int((int)data[i]);
				m_usb_tx_char('\t');

			}

			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     82e:	8a e0       	ldi	r24, 0x0A	; 10
     830:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <m_usb_tx_char>
		}
		
		//*/

		//switch states
        switch (state) {
     834:	80 91 14 01 	lds	r24, 0x0114
     838:	90 91 15 01 	lds	r25, 0x0115
     83c:	83 30       	cpi	r24, 0x03	; 3
     83e:	91 05       	cpc	r25, r1
     840:	d4 f4       	brge	.+52     	; 0x876 <main+0x248>
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	91 05       	cpc	r25, r1
     846:	9c f6       	brge	.-90     	; 0x7ee <main+0x1c0>
     848:	8e 3f       	cpi	r24, 0xFE	; 254
     84a:	2f ef       	ldi	r18, 0xFF	; 255
     84c:	92 07       	cpc	r25, r18
     84e:	09 f4       	brne	.+2      	; 0x852 <main+0x224>
     850:	56 c0       	rjmp	.+172    	; 0x8fe <main+0x2d0>
     852:	44 f4       	brge	.+16     	; 0x864 <main+0x236>
     854:	8c 3f       	cpi	r24, 0xFC	; 252
     856:	ff ef       	ldi	r31, 0xFF	; 255
     858:	9f 07       	cpc	r25, r31
     85a:	39 f1       	breq	.+78     	; 0x8aa <main+0x27c>
     85c:	03 96       	adiw	r24, 0x03	; 3
     85e:	09 f0       	breq	.+2      	; 0x862 <main+0x234>
     860:	9d c0       	rjmp	.+314    	; 0x99c <main+0x36e>
     862:	33 c0       	rjmp	.+102    	; 0x8ca <main+0x29c>
     864:	8f 3f       	cpi	r24, 0xFF	; 255
     866:	ef ef       	ldi	r30, 0xFF	; 255
     868:	9e 07       	cpc	r25, r30
     86a:	09 f4       	brne	.+2      	; 0x86e <main+0x240>
     86c:	76 c0       	rjmp	.+236    	; 0x95a <main+0x32c>
     86e:	89 2b       	or	r24, r25
     870:	09 f4       	brne	.+2      	; 0x874 <main+0x246>
     872:	7d c0       	rjmp	.+250    	; 0x96e <main+0x340>
     874:	93 c0       	rjmp	.+294    	; 0x99c <main+0x36e>
     876:	84 31       	cpi	r24, 0x14	; 20
     878:	91 05       	cpc	r25, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <main+0x250>
     87c:	81 c0       	rjmp	.+258    	; 0x980 <main+0x352>
     87e:	44 f4       	brge	.+16     	; 0x890 <main+0x262>
     880:	83 30       	cpi	r24, 0x03	; 3
     882:	91 05       	cpc	r25, r1
     884:	09 f4       	brne	.+2      	; 0x888 <main+0x25a>
     886:	76 c0       	rjmp	.+236    	; 0x974 <main+0x346>
     888:	04 97       	sbiw	r24, 0x04	; 4
     88a:	09 f0       	breq	.+2      	; 0x88e <main+0x260>
     88c:	87 c0       	rjmp	.+270    	; 0x99c <main+0x36e>
     88e:	75 c0       	rjmp	.+234    	; 0x97a <main+0x34c>
     890:	81 3a       	cpi	r24, 0xA1	; 161
     892:	91 05       	cpc	r25, r1
     894:	09 f4       	brne	.+2      	; 0x898 <main+0x26a>
     896:	7f c0       	rjmp	.+254    	; 0x996 <main+0x368>
     898:	84 3a       	cpi	r24, 0xA4	; 164
     89a:	91 05       	cpc	r25, r1
     89c:	09 f4       	brne	.+2      	; 0x8a0 <main+0x272>
     89e:	75 c0       	rjmp	.+234    	; 0x98a <main+0x35c>
     8a0:	80 3a       	cpi	r24, 0xA0	; 160
     8a2:	91 05       	cpc	r25, r1
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <main+0x27a>
     8a6:	7a c0       	rjmp	.+244    	; 0x99c <main+0x36e>
     8a8:	73 c0       	rjmp	.+230    	; 0x990 <main+0x362>
     8aa:	ff ef       	ldi	r31, 0xFF	; 255
     8ac:	23 ed       	ldi	r18, 0xD3	; 211
     8ae:	80 e3       	ldi	r24, 0x30	; 48
     8b0:	f1 50       	subi	r31, 0x01	; 1
     8b2:	20 40       	sbci	r18, 0x00	; 0
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <main+0x282>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <main+0x28c>
     8ba:	00 00       	nop
			
			case -4:
			m_wait(1000);
				shoot();
     8bc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <shoot>
				state = -3;
     8c0:	90 92 15 01 	sts	0x0115, r9
     8c4:	80 92 14 01 	sts	0x0114, r8
			break;
     8c8:	92 cf       	rjmp	.-220    	; 0x7ee <main+0x1c0>
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     8ca:	f6 01       	movw	r30, r12
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	f5 01       	movw	r30, r10
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
				OCR3A = ICR3;
     8d6:	f7 01       	movw	r30, r14
     8d8:	80 81       	ld	r24, Z
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	f3 01       	movw	r30, r6
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
				set(PORTB,2);
     8e2:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
     8e4:	2b 9a       	sbi	0x05, 3	; 5
     8e6:	ff ef       	ldi	r31, 0xFF	; 255
     8e8:	23 ed       	ldi	r18, 0xD3	; 211
     8ea:	80 e3       	ldi	r24, 0x30	; 48
     8ec:	f1 50       	subi	r31, 0x01	; 1
     8ee:	20 40       	sbci	r18, 0x00	; 0
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x2be>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <main+0x2c8>
     8f6:	00 00       	nop
				m_wait(1000);
				clear(PORTB,3);
     8f8:	2b 98       	cbi	0x05, 3	; 5
				clear(PORTB,2);
     8fa:	2a 98       	cbi	0x05, 2	; 5
			break;
     8fc:	78 cf       	rjmp	.-272    	; 0x7ee <main+0x1c0>
			
			case -2: //test turning n driving n stuff
			turn(LEFT,OCR1A/4);
     8fe:	f6 01       	movw	r30, r12
     900:	60 81       	ld	r22, Z
     902:	71 81       	ldd	r23, Z+1	; 0x01
     904:	76 95       	lsr	r23
     906:	67 95       	ror	r22
     908:	76 95       	lsr	r23
     90a:	67 95       	ror	r22
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 2b 01 	call	0x256	; 0x256 <turn>
     914:	ff ef       	ldi	r31, 0xFF	; 255
     916:	23 ed       	ldi	r18, 0xD3	; 211
     918:	80 e3       	ldi	r24, 0x30	; 48
     91a:	f1 50       	subi	r31, 0x01	; 1
     91c:	20 40       	sbci	r18, 0x00	; 0
     91e:	80 40       	sbci	r24, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <main+0x2ec>
     922:	00 c0       	rjmp	.+0      	; 0x924 <main+0x2f6>
     924:	00 00       	nop
			m_wait(1000);
			turn(RIGHT, ICR3/5);
     926:	f7 01       	movw	r30, r14
     928:	20 81       	ld	r18, Z
     92a:	31 81       	ldd	r19, Z+1	; 0x01
     92c:	ad ec       	ldi	r26, 0xCD	; 205
     92e:	bc ec       	ldi	r27, 0xCC	; 204
     930:	0e 94 1a 14 	call	0x2834	; 0x2834 <__umulhisi3>
     934:	bc 01       	movw	r22, r24
     936:	76 95       	lsr	r23
     938:	67 95       	ror	r22
     93a:	76 95       	lsr	r23
     93c:	67 95       	ror	r22
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 2b 01 	call	0x256	; 0x256 <turn>
     946:	ff ef       	ldi	r31, 0xFF	; 255
     948:	23 ed       	ldi	r18, 0xD3	; 211
     94a:	80 e3       	ldi	r24, 0x30	; 48
     94c:	f1 50       	subi	r31, 0x01	; 1
     94e:	20 40       	sbci	r18, 0x00	; 0
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	e1 f7       	brne	.-8      	; 0x94c <main+0x31e>
     954:	00 c0       	rjmp	.+0      	; 0x956 <main+0x328>
     956:	00 00       	nop
     958:	4a cf       	rjmp	.-364    	; 0x7ee <main+0x1c0>
     95a:	9f ef       	ldi	r25, 0xFF	; 255
     95c:	e9 e6       	ldi	r30, 0x69	; 105
     95e:	f8 e1       	ldi	r31, 0x18	; 24
     960:	91 50       	subi	r25, 0x01	; 1
     962:	e0 40       	sbci	r30, 0x00	; 0
     964:	f0 40       	sbci	r31, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <main+0x332>
     968:	00 c0       	rjmp	.+0      	; 0x96a <main+0x33c>
     96a:	00 00       	nop
     96c:	40 cf       	rjmp	.-384    	; 0x7ee <main+0x1c0>
				//disp(8);
				//count++;
			break;
			
			case 0:
			game_pause();
     96e:	0e 94 6f 01 	call	0x2de	; 0x2de <game_pause>
			
			break;
     972:	3d cf       	rjmp	.-390    	; 0x7ee <main+0x1c0>
			case 2:
			drive_to_puck();
			break;
			
			case 3:
			drive_to_goal();
     974:	0e 94 f7 02 	call	0x5ee	; 0x5ee <drive_to_goal>
			break;
     978:	3a cf       	rjmp	.-396    	; 0x7ee <main+0x1c0>
			
			case 4:
			shoot();
     97a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <shoot>
			break;
     97e:	37 cf       	rjmp	.-402    	; 0x7ee <main+0x1c0>
			
			case 20:

	//m_rf_send(ADDRESS, array, PACKET_LENGTH);
			m_green(TOGGLE);
     980:	6a 9a       	sbi	0x0d, 2	; 13
     982:	8e b1       	in	r24, 0x0e	; 14
     984:	85 25       	eor	r24, r5
     986:	8e b9       	out	0x0e, r24	; 14
     988:	32 cf       	rjmp	.-412    	; 0x7ee <main+0x1c0>
			
			break;
			
			case 0xA4:
			game_pause();
     98a:	0e 94 6f 01 	call	0x2de	; 0x2de <game_pause>
			break;
     98e:	2f cf       	rjmp	.-418    	; 0x7ee <main+0x1c0>
			
			case 0xA0:
			comm_test();
     990:	0e 94 fe 02 	call	0x5fc	; 0x5fc <comm_test>
			break;
     994:	2c cf       	rjmp	.-424    	; 0x7ee <main+0x1c0>
			
			case 0xA1:
			drive_to_goal();
     996:	0e 94 f7 02 	call	0x5ee	; 0x5ee <drive_to_goal>
			break;
     99a:	29 cf       	rjmp	.-430    	; 0x7ee <main+0x1c0>
			
			default:
			game_pause();
     99c:	0e 94 6f 01 	call	0x2de	; 0x2de <game_pause>
			break;
     9a0:	26 cf       	rjmp	.-436    	; 0x7ee <main+0x1c0>

000009a2 <__vector_29>:
		}
        
    }
}

ISR(ADC_vect) {
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	2f 93       	push	r18
     9ae:	8f 93       	push	r24
     9b0:	9f 93       	push	r25
	if (ADC  > 500) {
     9b2:	80 91 78 00 	lds	r24, 0x0078
     9b6:	90 91 79 00 	lds	r25, 0x0079
     9ba:	85 3f       	cpi	r24, 0xF5	; 245
     9bc:	91 40       	sbci	r25, 0x01	; 1
     9be:	18 f0       	brcs	.+6      	; 0x9c6 <__vector_29+0x24>
		m_green(ON);
     9c0:	6a 9a       	sbi	0x0d, 2	; 13
     9c2:	72 98       	cbi	0x0e, 2	; 14
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__vector_29+0x28>
	}
	
	else {
		m_green(OFF);
     9c6:	6a 9a       	sbi	0x0d, 2	; 13
     9c8:	72 9a       	sbi	0x0e, 2	; 14
	}
}
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	2f 91       	pop	r18
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_3>:

ISR(INT2_vect)  {
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
	cli();
     9fc:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     9fe:	6a e0       	ldi	r22, 0x0A	; 10
     a00:	8a e7       	ldi	r24, 0x7A	; 122
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 91 0b 	call	0x1722	; 0x1722 <m_rf_read>
	sei();
     a08:	78 94       	sei
	state=buffer[0];
     a0a:	80 91 7a 01 	lds	r24, 0x017A
     a0e:	80 93 14 01 	sts	0x0114, r24
     a12:	10 92 15 01 	sts	0x0115, r1
	changedState = 1;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 17 01 	sts	0x0117, r25
     a1e:	80 93 16 01 	sts	0x0116, r24
}
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     a44:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     a46:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     a48:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     a4a:	8c e0       	ldi	r24, 0x0C	; 12
     a4c:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     a50:	e9 e6       	ldi	r30, 0x69	; 105
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	80 62       	ori	r24, 0x20	; 32
     a58:	80 83       	st	Z, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	8f 7e       	andi	r24, 0xEF	; 239
     a5e:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     a60:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     a62:	78 94       	sei
     a64:	08 95       	ret

00000a66 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	8c 01       	movw	r16, r24
     a70:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     a72:	8e e5       	ldi	r24, 0x5E	; 94
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <m_wii_read>
	x[0] = blobs[0];
     a7a:	80 91 5e 01 	lds	r24, 0x015E
     a7e:	90 91 5f 01 	lds	r25, 0x015F
     a82:	f8 01       	movw	r30, r16
     a84:	91 83       	std	Z+1, r25	; 0x01
     a86:	80 83       	st	Z, r24
	x[1] = blobs[3];
     a88:	80 91 64 01 	lds	r24, 0x0164
     a8c:	90 91 65 01 	lds	r25, 0x0165
     a90:	93 83       	std	Z+3, r25	; 0x03
     a92:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     a94:	80 91 6a 01 	lds	r24, 0x016A
     a98:	90 91 6b 01 	lds	r25, 0x016B
     a9c:	95 83       	std	Z+5, r25	; 0x05
     a9e:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     aa0:	80 91 70 01 	lds	r24, 0x0170
     aa4:	90 91 71 01 	lds	r25, 0x0171
     aa8:	97 83       	std	Z+7, r25	; 0x07
     aaa:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     aac:	80 91 60 01 	lds	r24, 0x0160
     ab0:	90 91 61 01 	lds	r25, 0x0161
     ab4:	99 83       	std	Y+1, r25	; 0x01
     ab6:	88 83       	st	Y, r24
	y[1] = blobs[4];
     ab8:	80 91 66 01 	lds	r24, 0x0166
     abc:	90 91 67 01 	lds	r25, 0x0167
     ac0:	9b 83       	std	Y+3, r25	; 0x03
     ac2:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     ac4:	80 91 6c 01 	lds	r24, 0x016C
     ac8:	90 91 6d 01 	lds	r25, 0x016D
     acc:	9d 83       	std	Y+5, r25	; 0x05
     ace:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     ad0:	80 91 72 01 	lds	r24, 0x0172
     ad4:	90 91 73 01 	lds	r25, 0x0173
     ad8:	9f 83       	std	Y+7, r25	; 0x07
     ada:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <determine_blobs>:

unsigned char determine_blobs() {
     ae8:	2f 92       	push	r2
     aea:	3f 92       	push	r3
     aec:	4f 92       	push	r4
     aee:	5f 92       	push	r5
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	6c 97       	sbiw	r28, 0x1c	; 28
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     b1c:	10 92 26 01 	sts	0x0126, r1
     b20:	10 92 27 01 	sts	0x0127, r1
     b24:	10 92 28 01 	sts	0x0128, r1
     b28:	10 92 29 01 	sts	0x0129, r1
	distmin = 30000;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e6       	ldi	r25, 0x60	; 96
     b30:	aa ee       	ldi	r26, 0xEA	; 234
     b32:	b6 e4       	ldi	r27, 0x46	; 70
     b34:	80 93 00 01 	sts	0x0100, r24
     b38:	90 93 01 01 	sts	0x0101, r25
     b3c:	a0 93 02 01 	sts	0x0102, r26
     b40:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     b44:	0f 2e       	mov	r0, r31
     b46:	f8 e3       	ldi	r31, 0x38	; 56
     b48:	cf 2e       	mov	r12, r31
     b4a:	f1 e0       	ldi	r31, 0x01	; 1
     b4c:	df 2e       	mov	r13, r31
     b4e:	f0 2d       	mov	r31, r0
     b50:	0a e3       	ldi	r16, 0x3A	; 58
     b52:	11 e0       	ldi	r17, 0x01	; 1
     b54:	0f 2e       	mov	r0, r31
     b56:	fc e3       	ldi	r31, 0x3C	; 60
     b58:	ef 2e       	mov	r14, r31
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	ff 2e       	mov	r15, r31
     b5e:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     b60:	6e e2       	ldi	r22, 0x2E	; 46
     b62:	71 e0       	ldi	r23, 0x01	; 1
     b64:	86 e3       	ldi	r24, 0x36	; 54
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 33 05 	call	0xa66	; 0xa66 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     b6c:	80 91 36 01 	lds	r24, 0x0136
     b70:	90 91 37 01 	lds	r25, 0x0137
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	93 40       	sbci	r25, 0x03	; 3
     b78:	98 f7       	brcc	.-26     	; 0xb60 <__stack+0x61>
     b7a:	f6 01       	movw	r30, r12
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	8f 3f       	cpi	r24, 0xFF	; 255
     b82:	93 40       	sbci	r25, 0x03	; 3
     b84:	68 f7       	brcc	.-38     	; 0xb60 <__stack+0x61>
     b86:	f8 01       	movw	r30, r16
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	8f 3f       	cpi	r24, 0xFF	; 255
     b8e:	93 40       	sbci	r25, 0x03	; 3
     b90:	38 f7       	brcc	.-50     	; 0xb60 <__stack+0x61>
     b92:	f7 01       	movw	r30, r14
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	8f 3f       	cpi	r24, 0xFF	; 255
     b9a:	93 40       	sbci	r25, 0x03	; 3
     b9c:	08 f7       	brcc	.-62     	; 0xb60 <__stack+0x61>
     b9e:	80 90 2a 01 	lds	r8, 0x012A
     ba2:	90 90 2b 01 	lds	r9, 0x012B
     ba6:	a0 90 2c 01 	lds	r10, 0x012C
     baa:	b0 90 2d 01 	lds	r11, 0x012D
     bae:	20 91 26 01 	lds	r18, 0x0126
     bb2:	29 83       	std	Y+1, r18	; 0x01
     bb4:	30 91 27 01 	lds	r19, 0x0127
     bb8:	3a 83       	std	Y+2, r19	; 0x02
     bba:	40 91 28 01 	lds	r20, 0x0128
     bbe:	4b 83       	std	Y+3, r20	; 0x03
     bc0:	50 91 29 01 	lds	r21, 0x0129
     bc4:	5c 83       	std	Y+4, r21	; 0x04
     bc6:	60 91 20 01 	lds	r22, 0x0120
     bca:	6b 8b       	std	Y+19, r22	; 0x13
     bcc:	70 91 21 01 	lds	r23, 0x0121
     bd0:	7c 8b       	std	Y+20, r23	; 0x14
     bd2:	80 91 1e 01 	lds	r24, 0x011E
     bd6:	89 8b       	std	Y+17, r24	; 0x11
     bd8:	90 91 1f 01 	lds	r25, 0x011F
     bdc:	9a 8b       	std	Y+18, r25	; 0x12
     bde:	e0 91 22 01 	lds	r30, 0x0122
     be2:	ed 8b       	std	Y+21, r30	; 0x15
     be4:	f0 91 23 01 	lds	r31, 0x0123
     be8:	fe 8b       	std	Y+22, r31	; 0x16
     bea:	20 91 24 01 	lds	r18, 0x0124
     bee:	2f 8b       	std	Y+23, r18	; 0x17
     bf0:	30 91 25 01 	lds	r19, 0x0125
     bf4:	38 8f       	std	Y+24, r19	; 0x18
     bf6:	40 91 00 01 	lds	r20, 0x0100
     bfa:	4d 83       	std	Y+5, r20	; 0x05
     bfc:	50 91 01 01 	lds	r21, 0x0101
     c00:	5e 83       	std	Y+6, r21	; 0x06
     c02:	20 90 02 01 	lds	r2, 0x0102
     c06:	30 90 03 01 	lds	r3, 0x0103
     c0a:	60 91 1c 01 	lds	r22, 0x011C
     c0e:	69 8f       	std	Y+25, r22	; 0x19
     c10:	70 91 1d 01 	lds	r23, 0x011D
     c14:	7a 8f       	std	Y+26, r23	; 0x1a
     c16:	80 91 1a 01 	lds	r24, 0x011A
     c1a:	90 91 1b 01 	lds	r25, 0x011B
     c1e:	98 8b       	std	Y+16, r25	; 0x10
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	18 86       	std	Y+8, r1	; 0x08
     c24:	1f 82       	std	Y+7, r1	; 0x07
     c26:	c1 2c       	mov	r12, r1
     c28:	d1 2c       	mov	r13, r1
     c2a:	b9 c0       	rjmp	.+370    	; 0xd9e <__stack+0x29f>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     c2c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c2e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     c30:	e4 15       	cp	r30, r4
     c32:	f5 05       	cpc	r31, r5
     c34:	09 f4       	brne	.+2      	; 0xc38 <__stack+0x139>
     c36:	9c c0       	rjmp	.+312    	; 0xd70 <__stack+0x271>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     c38:	e9 85       	ldd	r30, Y+9	; 0x09
     c3a:	fa 85       	ldd	r31, Y+10	; 0x0a
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
     c48:	6b 01       	movw	r12, r22
     c4a:	7c 01       	movw	r14, r24
     c4c:	f3 01       	movw	r30, r6
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
     c5e:	c7 01       	movw	r24, r14
     c60:	b6 01       	movw	r22, r12
     c62:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     c66:	c6 2e       	mov	r12, r22
     c68:	d7 2e       	mov	r13, r23
     c6a:	e8 2e       	mov	r14, r24
     c6c:	f9 2e       	mov	r15, r25
     c6e:	eb 85       	ldd	r30, Y+11	; 0x0b
     c70:	fc 85       	ldd	r31, Y+12	; 0x0c
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
     c7e:	4b 01       	movw	r8, r22
     c80:	5c 01       	movw	r10, r24
     c82:	f8 01       	movw	r30, r16
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c5 01       	movw	r24, r10
     c96:	b4 01       	movw	r22, r8
     c98:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     c9c:	86 2e       	mov	r8, r22
     c9e:	97 2e       	mov	r9, r23
     ca0:	a8 2e       	mov	r10, r24
     ca2:	b9 2e       	mov	r11, r25
     ca4:	2c 2d       	mov	r18, r12
     ca6:	3d 2d       	mov	r19, r13
     ca8:	4e 2d       	mov	r20, r14
     caa:	5f 2d       	mov	r21, r15
     cac:	6c 2d       	mov	r22, r12
     cae:	7d 2d       	mov	r23, r13
     cb0:	8e 2d       	mov	r24, r14
     cb2:	9f 2d       	mov	r25, r15
     cb4:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
     cb8:	6b 01       	movw	r12, r22
     cba:	7c 01       	movw	r14, r24
     cbc:	28 2d       	mov	r18, r8
     cbe:	39 2d       	mov	r19, r9
     cc0:	4a 2d       	mov	r20, r10
     cc2:	5b 2d       	mov	r21, r11
     cc4:	68 2d       	mov	r22, r8
     cc6:	79 2d       	mov	r23, r9
     cc8:	8a 2d       	mov	r24, r10
     cca:	9b 2d       	mov	r25, r11
     ccc:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
     cd0:	9b 01       	movw	r18, r22
     cd2:	ac 01       	movw	r20, r24
     cd4:	c7 01       	movw	r24, r14
     cd6:	b6 01       	movw	r22, r12
     cd8:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     cdc:	0e 94 b3 13 	call	0x2766	; 0x2766 <sqrt>
     ce0:	86 2e       	mov	r8, r22
     ce2:	97 2e       	mov	r9, r23
     ce4:	a8 2e       	mov	r10, r24
     ce6:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     ce8:	79 81       	ldd	r23, Y+1	; 0x01
     cea:	6a 81       	ldd	r22, Y+2	; 0x02
     cec:	9b 81       	ldd	r25, Y+3	; 0x03
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	27 2f       	mov	r18, r23
     cf2:	36 2f       	mov	r19, r22
     cf4:	49 2f       	mov	r20, r25
     cf6:	58 2f       	mov	r21, r24
     cf8:	68 2d       	mov	r22, r8
     cfa:	79 2d       	mov	r23, r9
     cfc:	8a 2d       	mov	r24, r10
     cfe:	9b 2d       	mov	r25, r11
     d00:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
     d04:	18 16       	cp	r1, r24
     d06:	d4 f4       	brge	.+52     	; 0xd3c <__stack+0x23d>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	68 2d       	mov	r22, r8
     d12:	79 2d       	mov	r23, r9
     d14:	8a 2d       	mov	r24, r10
     d16:	9b 2d       	mov	r25, r11
     d18:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
     d1c:	6d 8b       	std	Y+21, r22	; 0x15
     d1e:	7e 8b       	std	Y+22, r23	; 0x16
     d20:	8f 8b       	std	Y+23, r24	; 0x17
     d22:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     d24:	fb 8d       	ldd	r31, Y+27	; 0x1b
     d26:	f9 8b       	std	Y+17, r31	; 0x11
     d28:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d2a:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     d2c:	3d 85       	ldd	r19, Y+13	; 0x0d
     d2e:	3b 8b       	std	Y+19, r19	; 0x13
     d30:	4e 85       	ldd	r20, Y+14	; 0x0e
     d32:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     d34:	89 82       	std	Y+1, r8	; 0x01
     d36:	9a 82       	std	Y+2, r9	; 0x02
     d38:	ab 82       	std	Y+3, r10	; 0x03
     d3a:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     d3c:	7d 81       	ldd	r23, Y+5	; 0x05
     d3e:	6e 81       	ldd	r22, Y+6	; 0x06
     d40:	27 2f       	mov	r18, r23
     d42:	36 2f       	mov	r19, r22
     d44:	42 2d       	mov	r20, r2
     d46:	53 2d       	mov	r21, r3
     d48:	68 2d       	mov	r22, r8
     d4a:	79 2d       	mov	r23, r9
     d4c:	8a 2d       	mov	r24, r10
     d4e:	9b 2d       	mov	r25, r11
     d50:	0e 94 8b 11 	call	0x2316	; 0x2316 <__cmpsf2>
     d54:	88 23       	and	r24, r24
     d56:	64 f4       	brge	.+24     	; 0xd70 <__stack+0x271>
						distmin = dist;
						close1 = i;
						close2 = j;
     d58:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d5a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d5c:	78 8b       	std	Y+16, r23	; 0x10
     d5e:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     d60:	7d 85       	ldd	r23, Y+13	; 0x0d
     d62:	79 8f       	std	Y+25, r23	; 0x19
     d64:	8e 85       	ldd	r24, Y+14	; 0x0e
     d66:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     d68:	8d 82       	std	Y+5, r8	; 0x05
     d6a:	9e 82       	std	Y+6, r9	; 0x06
     d6c:	2a 2c       	mov	r2, r10
     d6e:	3b 2c       	mov	r3, r11
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	69 0e       	add	r6, r25
     d74:	71 1c       	adc	r7, r1
     d76:	0e 5f       	subi	r16, 0xFE	; 254
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     d7a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d7c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     d7e:	31 96       	adiw	r30, 0x01	; 1
     d80:	fc 8f       	std	Y+28, r31	; 0x1c
     d82:	eb 8f       	std	Y+27, r30	; 0x1b
     d84:	34 97       	sbiw	r30, 0x04	; 4
     d86:	09 f0       	breq	.+2      	; 0xd8a <__stack+0x28b>
     d88:	51 cf       	rjmp	.-350    	; 0xc2c <__stack+0x12d>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     d8a:	2f 81       	ldd	r18, Y+7	; 0x07
     d8c:	38 85       	ldd	r19, Y+8	; 0x08
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	38 87       	std	Y+8, r19	; 0x08
     d94:	2f 83       	std	Y+7, r18	; 0x07
     d96:	69 01       	movw	r12, r18
     d98:	24 30       	cpi	r18, 0x04	; 4
     d9a:	31 05       	cpc	r19, r1
     d9c:	39 f1       	breq	.+78     	; 0xdec <__stack+0x2ed>
				for (int j = i; j < 4; j++) {
     d9e:	34 e0       	ldi	r19, 0x04	; 4
     da0:	c3 16       	cp	r12, r19
     da2:	d1 04       	cpc	r13, r1
     da4:	94 f7       	brge	.-28     	; 0xd8a <__stack+0x28b>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     da6:	86 01       	movw	r16, r12
     da8:	0f 5f       	subi	r16, 0xFF	; 255
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     dac:	00 0f       	add	r16, r16
     dae:	11 1f       	adc	r17, r17
     db0:	0f 2e       	mov	r0, r31
     db2:	f6 e3       	ldi	r31, 0x36	; 54
     db4:	ef 2e       	mov	r14, r31
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	ff 2e       	mov	r15, r31
     dba:	f0 2d       	mov	r31, r0
     dbc:	e0 0e       	add	r14, r16
     dbe:	f1 1e       	adc	r15, r17
     dc0:	02 5d       	subi	r16, 0xD2	; 210
     dc2:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     dc4:	c6 01       	movw	r24, r12
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	ac 01       	movw	r20, r24
     dcc:	4a 5c       	subi	r20, 0xCA	; 202
     dce:	5e 4f       	sbci	r21, 0xFE	; 254
     dd0:	5a 87       	std	Y+10, r21	; 0x0a
     dd2:	49 87       	std	Y+9, r20	; 0x09
     dd4:	bc 01       	movw	r22, r24
     dd6:	62 5d       	subi	r22, 0xD2	; 210
     dd8:	7e 4f       	sbci	r23, 0xFE	; 254
     dda:	7c 87       	std	Y+12, r23	; 0x0c
     ddc:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     dde:	cd 86       	std	Y+13, r12	; 0x0d
     de0:	de 86       	std	Y+14, r13	; 0x0e
     de2:	dc 8e       	std	Y+28, r13	; 0x1c
     de4:	cb 8e       	std	Y+27, r12	; 0x1b
     de6:	26 01       	movw	r4, r12
     de8:	37 01       	movw	r6, r14
     dea:	c7 cf       	rjmp	.-114    	; 0xd7a <__stack+0x27b>
     dec:	88 2d       	mov	r24, r8
     dee:	99 2d       	mov	r25, r9
     df0:	aa 2d       	mov	r26, r10
     df2:	bb 2d       	mov	r27, r11
     df4:	80 93 2a 01 	sts	0x012A, r24
     df8:	90 93 2b 01 	sts	0x012B, r25
     dfc:	a0 93 2c 01 	sts	0x012C, r26
     e00:	b0 93 2d 01 	sts	0x012D, r27
     e04:	59 81       	ldd	r21, Y+1	; 0x01
     e06:	4a 81       	ldd	r20, Y+2	; 0x02
     e08:	3b 81       	ldd	r19, Y+3	; 0x03
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	85 2f       	mov	r24, r21
     e0e:	94 2f       	mov	r25, r20
     e10:	a3 2f       	mov	r26, r19
     e12:	b2 2f       	mov	r27, r18
     e14:	80 93 26 01 	sts	0x0126, r24
     e18:	90 93 27 01 	sts	0x0127, r25
     e1c:	a0 93 28 01 	sts	0x0128, r26
     e20:	b0 93 29 01 	sts	0x0129, r27
     e24:	7b 89       	ldd	r23, Y+19	; 0x13
     e26:	70 93 20 01 	sts	0x0120, r23
     e2a:	8c 89       	ldd	r24, Y+20	; 0x14
     e2c:	80 93 21 01 	sts	0x0121, r24
     e30:	99 89       	ldd	r25, Y+17	; 0x11
     e32:	90 93 1e 01 	sts	0x011E, r25
     e36:	ea 89       	ldd	r30, Y+18	; 0x12
     e38:	e0 93 1f 01 	sts	0x011F, r30
     e3c:	5d 89       	ldd	r21, Y+21	; 0x15
     e3e:	4e 89       	ldd	r20, Y+22	; 0x16
     e40:	3f 89       	ldd	r19, Y+23	; 0x17
     e42:	28 8d       	ldd	r18, Y+24	; 0x18
     e44:	85 2f       	mov	r24, r21
     e46:	94 2f       	mov	r25, r20
     e48:	a3 2f       	mov	r26, r19
     e4a:	b2 2f       	mov	r27, r18
     e4c:	80 93 22 01 	sts	0x0122, r24
     e50:	90 93 23 01 	sts	0x0123, r25
     e54:	a0 93 24 01 	sts	0x0124, r26
     e58:	b0 93 25 01 	sts	0x0125, r27
     e5c:	5d 81       	ldd	r21, Y+5	; 0x05
     e5e:	4e 81       	ldd	r20, Y+6	; 0x06
     e60:	85 2f       	mov	r24, r21
     e62:	94 2f       	mov	r25, r20
     e64:	a2 2d       	mov	r26, r2
     e66:	b3 2d       	mov	r27, r3
     e68:	80 93 00 01 	sts	0x0100, r24
     e6c:	90 93 01 01 	sts	0x0101, r25
     e70:	a0 93 02 01 	sts	0x0102, r26
     e74:	b0 93 03 01 	sts	0x0103, r27
     e78:	f9 8d       	ldd	r31, Y+25	; 0x19
     e7a:	f0 93 1c 01 	sts	0x011C, r31
     e7e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e80:	20 93 1d 01 	sts	0x011D, r18
     e84:	3f 85       	ldd	r19, Y+15	; 0x0f
     e86:	30 93 1a 01 	sts	0x011A, r19
     e8a:	48 89       	ldd	r20, Y+16	; 0x10
     e8c:	40 93 1b 01 	sts	0x011B, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     e90:	80 91 20 01 	lds	r24, 0x0120
     e94:	90 91 21 01 	lds	r25, 0x0121
     e98:	20 91 1c 01 	lds	r18, 0x011C
     e9c:	30 91 1d 01 	lds	r19, 0x011D
     ea0:	82 17       	cp	r24, r18
     ea2:	93 07       	cpc	r25, r19
     ea4:	19 f5       	brne	.+70     	; 0xeec <__stack+0x3ed>
				top = far1;
     ea6:	90 93 5d 01 	sts	0x015D, r25
     eaa:	80 93 5c 01 	sts	0x015C, r24
				bottom = far2;
     eae:	40 91 1e 01 	lds	r20, 0x011E
     eb2:	50 91 1f 01 	lds	r21, 0x011F
     eb6:	50 93 5b 01 	sts	0x015B, r21
     eba:	40 93 5a 01 	sts	0x015A, r20
				right = close2;
     ebe:	20 91 1a 01 	lds	r18, 0x011A
     ec2:	30 91 1b 01 	lds	r19, 0x011B
     ec6:	30 93 57 01 	sts	0x0157, r19
     eca:	20 93 56 01 	sts	0x0156, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     ece:	69 e0       	ldi	r22, 0x09	; 9
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	fb 01       	movw	r30, r22
     ed4:	e8 1b       	sub	r30, r24
     ed6:	f9 0b       	sbc	r31, r25
     ed8:	cf 01       	movw	r24, r30
     eda:	84 1b       	sub	r24, r20
     edc:	95 0b       	sbc	r25, r21
     ede:	82 1b       	sub	r24, r18
     ee0:	93 0b       	sbc	r25, r19
     ee2:	90 93 59 01 	sts	0x0159, r25
     ee6:	80 93 58 01 	sts	0x0158, r24
     eea:	66 c0       	rjmp	.+204    	; 0xfb8 <__stack+0x4b9>
			}
			else if (far1 == close2) {
     eec:	4f 85       	ldd	r20, Y+15	; 0x0f
     eee:	58 89       	ldd	r21, Y+16	; 0x10
     ef0:	84 17       	cp	r24, r20
     ef2:	95 07       	cpc	r25, r21
     ef4:	f9 f4       	brne	.+62     	; 0xf34 <__stack+0x435>
				top = far1;
     ef6:	90 93 5d 01 	sts	0x015D, r25
     efa:	80 93 5c 01 	sts	0x015C, r24
				bottom = far2;
     efe:	40 91 1e 01 	lds	r20, 0x011E
     f02:	50 91 1f 01 	lds	r21, 0x011F
     f06:	50 93 5b 01 	sts	0x015B, r21
     f0a:	40 93 5a 01 	sts	0x015A, r20
				right = close1;
     f0e:	30 93 57 01 	sts	0x0157, r19
     f12:	20 93 56 01 	sts	0x0156, r18
				left = 9 - top - bottom - right;
     f16:	69 e0       	ldi	r22, 0x09	; 9
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	fb 01       	movw	r30, r22
     f1c:	e8 1b       	sub	r30, r24
     f1e:	f9 0b       	sbc	r31, r25
     f20:	cf 01       	movw	r24, r30
     f22:	84 1b       	sub	r24, r20
     f24:	95 0b       	sbc	r25, r21
     f26:	82 1b       	sub	r24, r18
     f28:	93 0b       	sbc	r25, r19
     f2a:	90 93 59 01 	sts	0x0159, r25
     f2e:	80 93 58 01 	sts	0x0158, r24
     f32:	42 c0       	rjmp	.+132    	; 0xfb8 <__stack+0x4b9>
			}
			else if (far2 == close1) {
     f34:	40 91 1e 01 	lds	r20, 0x011E
     f38:	50 91 1f 01 	lds	r21, 0x011F
     f3c:	24 17       	cp	r18, r20
     f3e:	35 07       	cpc	r19, r21
     f40:	01 f5       	brne	.+64     	; 0xf82 <__stack+0x483>
				top = far2;
     f42:	30 93 5d 01 	sts	0x015D, r19
     f46:	20 93 5c 01 	sts	0x015C, r18
				bottom = far1;
     f4a:	90 93 5b 01 	sts	0x015B, r25
     f4e:	80 93 5a 01 	sts	0x015A, r24
				right = close2;
     f52:	4f 85       	ldd	r20, Y+15	; 0x0f
     f54:	58 89       	ldd	r21, Y+16	; 0x10
     f56:	50 93 57 01 	sts	0x0157, r21
     f5a:	40 93 56 01 	sts	0x0156, r20
				left = 9 - top - bottom - right;
     f5e:	49 e0       	ldi	r20, 0x09	; 9
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	ba 01       	movw	r22, r20
     f64:	62 1b       	sub	r22, r18
     f66:	73 0b       	sbc	r23, r19
     f68:	fb 01       	movw	r30, r22
     f6a:	e8 1b       	sub	r30, r24
     f6c:	f9 0b       	sbc	r31, r25
     f6e:	cf 01       	movw	r24, r30
     f70:	2f 85       	ldd	r18, Y+15	; 0x0f
     f72:	38 89       	ldd	r19, Y+16	; 0x10
     f74:	82 1b       	sub	r24, r18
     f76:	93 0b       	sbc	r25, r19
     f78:	90 93 59 01 	sts	0x0159, r25
     f7c:	80 93 58 01 	sts	0x0158, r24
     f80:	1b c0       	rjmp	.+54     	; 0xfb8 <__stack+0x4b9>
			}
			else {
				top = far2;
     f82:	50 93 5d 01 	sts	0x015D, r21
     f86:	40 93 5c 01 	sts	0x015C, r20
				bottom = far1;
     f8a:	90 93 5b 01 	sts	0x015B, r25
     f8e:	80 93 5a 01 	sts	0x015A, r24
				right = close1;
     f92:	30 93 57 01 	sts	0x0157, r19
     f96:	20 93 56 01 	sts	0x0156, r18
				left = 9 - top - bottom - right;
     f9a:	69 e0       	ldi	r22, 0x09	; 9
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	fb 01       	movw	r30, r22
     fa0:	e4 1b       	sub	r30, r20
     fa2:	f5 0b       	sbc	r31, r21
     fa4:	bf 01       	movw	r22, r30
     fa6:	68 1b       	sub	r22, r24
     fa8:	79 0b       	sbc	r23, r25
     faa:	cb 01       	movw	r24, r22
     fac:	82 1b       	sub	r24, r18
     fae:	93 0b       	sbc	r25, r19
     fb0:	90 93 59 01 	sts	0x0159, r25
     fb4:	80 93 58 01 	sts	0x0158, r24
			}
		}
	}
	return 1;
}
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	6c 96       	adiw	r28, 0x1c	; 28
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	bf 90       	pop	r11
     fd8:	af 90       	pop	r10
     fda:	9f 90       	pop	r9
     fdc:	8f 90       	pop	r8
     fde:	7f 90       	pop	r7
     fe0:	6f 90       	pop	r6
     fe2:	5f 90       	pop	r5
     fe4:	4f 90       	pop	r4
     fe6:	3f 90       	pop	r3
     fe8:	2f 90       	pop	r2
     fea:	08 95       	ret

00000fec <local_init>:
	
	return 1;
}

unsigned char local_init() {
	m_wii_open();
     fec:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <m_wii_open>
	
	getData(x,y);
     ff0:	6e e2       	ldi	r22, 0x2E	; 46
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	86 e3       	ldi	r24, 0x36	; 54
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 33 05 	call	0xa66	; 0xa66 <getData>
	

	//Determine indices of all top, bottom, left, right points
	determine_blobs();
     ffc:	0e 94 74 05 	call	0xae8	; 0xae8 <determine_blobs>
	
	return 1;
}
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	08 95       	ret

00001004 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    1004:	2f 92       	push	r2
    1006:	3f 92       	push	r3
    1008:	4f 92       	push	r4
    100a:	5f 92       	push	r5
    100c:	6f 92       	push	r6
    100e:	7f 92       	push	r7
    1010:	8f 92       	push	r8
    1012:	9f 92       	push	r9
    1014:	af 92       	push	r10
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	2d 97       	sbiw	r28, 0x0d	; 13
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	8c 01       	movw	r16, r24
	numlost = 0;
    103a:	10 92 19 01 	sts	0x0119, r1
    103e:	10 92 18 01 	sts	0x0118, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    1042:	0e 94 74 05 	call	0xae8	; 0xae8 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    1046:	e0 90 5c 01 	lds	r14, 0x015C
    104a:	f0 90 5d 01 	lds	r15, 0x015D
    104e:	f7 01       	movw	r30, r14
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	ea 5c       	subi	r30, 0xCA	; 202
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	20 81       	ld	r18, Z
    105a:	31 81       	ldd	r19, Z+1	; 0x01
    105c:	3a 83       	std	Y+2, r19	; 0x02
    105e:	29 83       	std	Y+1, r18	; 0x01
    1060:	2f 3f       	cpi	r18, 0xFF	; 255
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	38 07       	cpc	r19, r24
    1066:	08 f0       	brcs	.+2      	; 0x106a <localize+0x66>
    1068:	ed c2       	rjmp	.+1498   	; 0x1644 <localize+0x640>
    106a:	a0 90 5a 01 	lds	r10, 0x015A
    106e:	b0 90 5b 01 	lds	r11, 0x015B
    1072:	f5 01       	movw	r30, r10
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ea 5c       	subi	r30, 0xCA	; 202
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	c0 80       	ld	r12, Z
    107e:	d1 80       	ldd	r13, Z+1	; 0x01
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	c9 16       	cp	r12, r25
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	d9 06       	cpc	r13, r25
    1088:	08 f0       	brcs	.+2      	; 0x108c <localize+0x88>
    108a:	dc c2       	rjmp	.+1464   	; 0x1644 <localize+0x640>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    108c:	b9 01       	movw	r22, r18
    108e:	6c 0d       	add	r22, r12
    1090:	7d 1d       	adc	r23, r13
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	5f e3       	ldi	r21, 0x3F	; 63
    10a2:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    10a6:	20 91 08 01 	lds	r18, 0x0108
    10aa:	30 91 09 01 	lds	r19, 0x0109
    10ae:	40 91 0a 01 	lds	r20, 0x010A
    10b2:	50 91 0b 01 	lds	r21, 0x010B
    10b6:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    10ba:	6d 83       	std	Y+5, r22	; 0x05
    10bc:	7e 83       	std	Y+6, r23	; 0x06
    10be:	8f 83       	std	Y+7, r24	; 0x07
    10c0:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    10c2:	f7 01       	movw	r30, r14
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	e2 5d       	subi	r30, 0xD2	; 210
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	e0 80       	ld	r14, Z
    10ce:	f1 80       	ldd	r15, Z+1	; 0x01
    10d0:	f5 01       	movw	r30, r10
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	e2 5d       	subi	r30, 0xD2	; 210
    10d8:	fe 4f       	sbci	r31, 0xFE	; 254
    10da:	a0 80       	ld	r10, Z
    10dc:	b1 80       	ldd	r11, Z+1	; 0x01
    10de:	b5 01       	movw	r22, r10
    10e0:	6e 0d       	add	r22, r14
    10e2:	7f 1d       	adc	r23, r15
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    10f8:	20 91 04 01 	lds	r18, 0x0104
    10fc:	30 91 05 01 	lds	r19, 0x0105
    1100:	40 91 06 01 	lds	r20, 0x0106
    1104:	50 91 07 01 	lds	r21, 0x0107
    1108:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    110c:	69 87       	std	Y+9, r22	; 0x09
    110e:	7a 87       	std	Y+10, r23	; 0x0a
    1110:	28 2e       	mov	r2, r24
    1112:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    1114:	b7 01       	movw	r22, r14
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    111e:	2b 01       	movw	r4, r22
    1120:	3c 01       	movw	r6, r24
    1122:	b5 01       	movw	r22, r10
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    112c:	9b 01       	movw	r18, r22
    112e:	ac 01       	movw	r20, r24
    1130:	c3 01       	movw	r24, r6
    1132:	b2 01       	movw	r22, r4
    1134:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1138:	4b 01       	movw	r8, r22
    113a:	5c 01       	movw	r10, r24
    113c:	e9 81       	ldd	r30, Y+1	; 0x01
    113e:	fa 81       	ldd	r31, Y+2	; 0x02
    1140:	bf 01       	movw	r22, r30
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    114a:	2b 01       	movw	r4, r22
    114c:	3c 01       	movw	r6, r24
    114e:	b6 01       	movw	r22, r12
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	c3 01       	movw	r24, r6
    115e:	b2 01       	movw	r22, r4
    1160:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1164:	a5 01       	movw	r20, r10
    1166:	94 01       	movw	r18, r8
    1168:	0e 94 38 11 	call	0x2270	; 0x2270 <atan2>
    116c:	4b 01       	movw	r8, r22
    116e:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    1170:	7d 81       	ldd	r23, Y+5	; 0x05
    1172:	6e 81       	ldd	r22, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	88 85       	ldd	r24, Y+8	; 0x08
    1178:	27 2f       	mov	r18, r23
    117a:	36 2f       	mov	r19, r22
    117c:	49 2f       	mov	r20, r25
    117e:	58 2f       	mov	r21, r24
    1180:	b9 85       	ldd	r27, Y+9	; 0x09
    1182:	aa 85       	ldd	r26, Y+10	; 0x0a
    1184:	6b 2f       	mov	r22, r27
    1186:	7a 2f       	mov	r23, r26
    1188:	82 2d       	mov	r24, r2
    118a:	93 2d       	mov	r25, r3
    118c:	0e 94 38 11 	call	0x2270	; 0x2270 <atan2>
    1190:	2b 01       	movw	r4, r22
    1192:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    1194:	7d 81       	ldd	r23, Y+5	; 0x05
    1196:	6e 81       	ldd	r22, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	88 85       	ldd	r24, Y+8	; 0x08
    119c:	27 2f       	mov	r18, r23
    119e:	36 2f       	mov	r19, r22
    11a0:	49 2f       	mov	r20, r25
    11a2:	58 2f       	mov	r21, r24
    11a4:	67 2f       	mov	r22, r23
    11a6:	73 2f       	mov	r23, r19
    11a8:	89 2f       	mov	r24, r25
    11aa:	95 2f       	mov	r25, r21
    11ac:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    11b0:	6b 01       	movw	r12, r22
    11b2:	7c 01       	movw	r14, r24
    11b4:	79 85       	ldd	r23, Y+9	; 0x09
    11b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    11b8:	27 2f       	mov	r18, r23
    11ba:	36 2f       	mov	r19, r22
    11bc:	42 2d       	mov	r20, r2
    11be:	53 2d       	mov	r21, r3
    11c0:	67 2f       	mov	r22, r23
    11c2:	73 2f       	mov	r23, r19
    11c4:	82 2d       	mov	r24, r2
    11c6:	93 2d       	mov	r25, r3
    11c8:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	c7 01       	movw	r24, r14
    11d2:	b6 01       	movw	r22, r12
    11d4:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    11d8:	0e 94 b3 13 	call	0x2766	; 0x2766 <sqrt>
    11dc:	6b 01       	movw	r12, r22
    11de:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	60 91 3e 01 	lds	r22, 0x013E
    11ea:	70 91 3f 01 	lds	r23, 0x013F
    11ee:	80 91 40 01 	lds	r24, 0x0140
    11f2:	90 91 41 01 	lds	r25, 0x0141
    11f6:	0e 94 8b 11 	call	0x2316	; 0x2316 <__cmpsf2>
    11fa:	81 11       	cpse	r24, r1
    11fc:	08 c0       	rjmp	.+16     	; 0x120e <localize+0x20a>
			ai1 = angle;
    11fe:	80 92 3e 01 	sts	0x013E, r8
    1202:	90 92 3f 01 	sts	0x013F, r9
    1206:	a0 92 40 01 	sts	0x0140, r10
    120a:	b0 92 41 01 	sts	0x0141, r11
		}
		
		data[2] = (((BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14) + 90.0) * -1.0;
    120e:	23 e3       	ldi	r18, 0x33	; 51
    1210:	33 e3       	ldi	r19, 0x33	; 51
    1212:	43 e7       	ldi	r20, 0x73	; 115
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	60 91 3e 01 	lds	r22, 0x013E
    121a:	70 91 3f 01 	lds	r23, 0x013F
    121e:	80 91 40 01 	lds	r24, 0x0140
    1222:	90 91 41 01 	lds	r25, 0x0141
    1226:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    122a:	4b 01       	movw	r8, r22
    122c:	5c 01       	movw	r10, r24
    122e:	20 ed       	ldi	r18, 0xD0	; 208
    1230:	3c ec       	ldi	r19, 0xCC	; 204
    1232:	4c e4       	ldi	r20, 0x4C	; 76
    1234:	5d e3       	ldi	r21, 0x3D	; 61
    1236:	60 91 4a 01 	lds	r22, 0x014A
    123a:	70 91 4b 01 	lds	r23, 0x014B
    123e:	80 91 4c 01 	lds	r24, 0x014C
    1242:	90 91 4d 01 	lds	r25, 0x014D
    1246:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    124a:	9b 01       	movw	r18, r22
    124c:	ac 01       	movw	r20, r24
    124e:	c5 01       	movw	r24, r10
    1250:	b4 01       	movw	r22, r8
    1252:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	44 e3       	ldi	r20, 0x34	; 52
    125c:	53 e4       	ldi	r21, 0x43	; 67
    125e:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    1262:	23 ec       	ldi	r18, 0xC3	; 195
    1264:	35 ef       	ldi	r19, 0xF5	; 245
    1266:	48 e4       	ldi	r20, 0x48	; 72
    1268:	50 e4       	ldi	r21, 0x40	; 64
    126a:	0e 94 92 11 	call	0x2324	; 0x2324 <__divsf3>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	44 eb       	ldi	r20, 0xB4	; 180
    1274:	52 e4       	ldi	r21, 0x42	; 66
    1276:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    127a:	90 58       	subi	r25, 0x80	; 128
    127c:	f8 01       	movw	r30, r16
    127e:	60 87       	std	Z+8, r22	; 0x08
    1280:	71 87       	std	Z+9, r23	; 0x09
    1282:	82 87       	std	Z+10, r24	; 0x0a
    1284:	93 87       	std	Z+11, r25	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1286:	23 ec       	ldi	r18, 0xC3	; 195
    1288:	35 ef       	ldi	r19, 0xF5	; 245
    128a:	48 e4       	ldi	r20, 0x48	; 72
    128c:	50 e4       	ldi	r21, 0x40	; 64
    128e:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	44 e3       	ldi	r20, 0x34	; 52
    1298:	53 e4       	ldi	r21, 0x43	; 67
    129a:	0e 94 92 11 	call	0x2324	; 0x2324 <__divsf3>
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	62 e5       	ldi	r22, 0x52	; 82
    12a4:	78 eb       	ldi	r23, 0xB8	; 184
    12a6:	86 e9       	ldi	r24, 0x96	; 150
    12a8:	90 e4       	ldi	r25, 0x40	; 64
    12aa:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    12ae:	a3 01       	movw	r20, r6
    12b0:	92 01       	movw	r18, r4
    12b2:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    12b6:	86 2e       	mov	r8, r22
    12b8:	97 2e       	mov	r9, r23
    12ba:	a8 2e       	mov	r10, r24
    12bc:	b9 2e       	mov	r11, r25
    12be:	0e 94 a9 13 	call	0x2752	; 0x2752 <sin>
    12c2:	9b 01       	movw	r18, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	c7 01       	movw	r24, r14
    12c8:	b6 01       	movw	r22, r12
    12ca:	90 58       	subi	r25, 0x80	; 128
    12cc:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    12d0:	29 e3       	ldi	r18, 0x39	; 57
    12d2:	3e e8       	ldi	r19, 0x8E	; 142
    12d4:	43 ea       	ldi	r20, 0xA3	; 163
    12d6:	5e e3       	ldi	r21, 0x3E	; 62
    12d8:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    12dc:	69 83       	std	Y+1, r22	; 0x01
    12de:	7b 87       	std	Y+11, r23	; 0x0b
    12e0:	8d 87       	std	Y+13, r24	; 0x0d
    12e2:	9c 87       	std	Y+12, r25	; 0x0c
    12e4:	47 2f       	mov	r20, r23
    12e6:	38 2f       	mov	r19, r24
    12e8:	29 2f       	mov	r18, r25
    12ea:	86 2f       	mov	r24, r22
    12ec:	94 2f       	mov	r25, r20
    12ee:	a3 2f       	mov	r26, r19
    12f0:	b2 2f       	mov	r27, r18
    12f2:	80 93 52 01 	sts	0x0152, r24
    12f6:	90 93 53 01 	sts	0x0153, r25
    12fa:	a0 93 54 01 	sts	0x0154, r26
    12fe:	b0 93 55 01 	sts	0x0155, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1302:	68 2d       	mov	r22, r8
    1304:	79 2d       	mov	r23, r9
    1306:	8a 2d       	mov	r24, r10
    1308:	9b 2d       	mov	r25, r11
    130a:	0e 94 8f 11 	call	0x231e	; 0x231e <cos>
    130e:	a7 01       	movw	r20, r14
    1310:	96 01       	movw	r18, r12
    1312:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    1316:	29 e8       	ldi	r18, 0x89	; 137
    1318:	3a ed       	ldi	r19, 0xDA	; 218
    131a:	45 e9       	ldi	r20, 0x95	; 149
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    1322:	86 2e       	mov	r8, r22
    1324:	97 2e       	mov	r9, r23
    1326:	a8 2e       	mov	r10, r24
    1328:	b9 2e       	mov	r11, r25
    132a:	86 2f       	mov	r24, r22
    132c:	99 2d       	mov	r25, r9
    132e:	aa 2d       	mov	r26, r10
    1330:	bb 2d       	mov	r27, r11
    1332:	80 93 4e 01 	sts	0x014E, r24
    1336:	90 93 4f 01 	sts	0x014F, r25
    133a:	a0 93 50 01 	sts	0x0150, r26
    133e:	b0 93 51 01 	sts	0x0151, r27
		
		if (xi1 == 0 && yi1 == 0) {
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	60 91 46 01 	lds	r22, 0x0146
    134c:	70 91 47 01 	lds	r23, 0x0147
    1350:	80 91 48 01 	lds	r24, 0x0148
    1354:	90 91 49 01 	lds	r25, 0x0149
    1358:	0e 94 8b 11 	call	0x2316	; 0x2316 <__cmpsf2>
    135c:	81 11       	cpse	r24, r1
    135e:	2b c0       	rjmp	.+86     	; 0x13b6 <localize+0x3b2>
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	a9 01       	movw	r20, r18
    1366:	60 91 42 01 	lds	r22, 0x0142
    136a:	70 91 43 01 	lds	r23, 0x0143
    136e:	80 91 44 01 	lds	r24, 0x0144
    1372:	90 91 45 01 	lds	r25, 0x0145
    1376:	0e 94 8b 11 	call	0x2316	; 0x2316 <__cmpsf2>
    137a:	81 11       	cpse	r24, r1
    137c:	1c c0       	rjmp	.+56     	; 0x13b6 <localize+0x3b2>
			xi1 = xi;
    137e:	59 81       	ldd	r21, Y+1	; 0x01
    1380:	4b 85       	ldd	r20, Y+11	; 0x0b
    1382:	3d 85       	ldd	r19, Y+13	; 0x0d
    1384:	2c 85       	ldd	r18, Y+12	; 0x0c
    1386:	85 2f       	mov	r24, r21
    1388:	94 2f       	mov	r25, r20
    138a:	a3 2f       	mov	r26, r19
    138c:	b2 2f       	mov	r27, r18
    138e:	80 93 46 01 	sts	0x0146, r24
    1392:	90 93 47 01 	sts	0x0147, r25
    1396:	a0 93 48 01 	sts	0x0148, r26
    139a:	b0 93 49 01 	sts	0x0149, r27
			yi1 = yi;
    139e:	88 2d       	mov	r24, r8
    13a0:	99 2d       	mov	r25, r9
    13a2:	aa 2d       	mov	r26, r10
    13a4:	bb 2d       	mov	r27, r11
    13a6:	80 93 42 01 	sts	0x0142, r24
    13aa:	90 93 43 01 	sts	0x0143, r25
    13ae:	a0 93 44 01 	sts	0x0144, r26
    13b2:	b0 93 45 01 	sts	0x0145, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    13b6:	23 e3       	ldi	r18, 0x33	; 51
    13b8:	33 e3       	ldi	r19, 0x33	; 51
    13ba:	43 e7       	ldi	r20, 0x73	; 115
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	60 91 46 01 	lds	r22, 0x0146
    13c2:	70 91 47 01 	lds	r23, 0x0147
    13c6:	80 91 48 01 	lds	r24, 0x0148
    13ca:	90 91 49 01 	lds	r25, 0x0149
    13ce:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24
    13d6:	20 ed       	ldi	r18, 0xD0	; 208
    13d8:	3c ec       	ldi	r19, 0xCC	; 204
    13da:	4c e4       	ldi	r20, 0x4C	; 76
    13dc:	5d e3       	ldi	r21, 0x3D	; 61
    13de:	b9 81       	ldd	r27, Y+1	; 0x01
    13e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    13e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    13e4:	ec 85       	ldd	r30, Y+12	; 0x0c
    13e6:	6b 2f       	mov	r22, r27
    13e8:	7a 2f       	mov	r23, r26
    13ea:	8f 2f       	mov	r24, r31
    13ec:	9e 2f       	mov	r25, r30
    13ee:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	c5 01       	movw	r24, r10
    13f8:	b4 01       	movw	r22, r8
    13fa:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    13fe:	f8 01       	movw	r30, r16
    1400:	60 83       	st	Z, r22
    1402:	71 83       	std	Z+1, r23	; 0x01
    1404:	82 83       	std	Z+2, r24	; 0x02
    1406:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    1408:	80 90 4e 01 	lds	r8, 0x014E
    140c:	90 90 4f 01 	lds	r9, 0x014F
    1410:	a0 90 50 01 	lds	r10, 0x0150
    1414:	b0 90 51 01 	lds	r11, 0x0151
    1418:	23 e3       	ldi	r18, 0x33	; 51
    141a:	33 e3       	ldi	r19, 0x33	; 51
    141c:	43 e7       	ldi	r20, 0x73	; 115
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	60 91 42 01 	lds	r22, 0x0142
    1424:	70 91 43 01 	lds	r23, 0x0143
    1428:	80 91 44 01 	lds	r24, 0x0144
    142c:	90 91 45 01 	lds	r25, 0x0145
    1430:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    1434:	69 83       	std	Y+1, r22	; 0x01
    1436:	7a 83       	std	Y+2, r23	; 0x02
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	20 ed       	ldi	r18, 0xD0	; 208
    143e:	3c ec       	ldi	r19, 0xCC	; 204
    1440:	4c e4       	ldi	r20, 0x4C	; 76
    1442:	5d e3       	ldi	r21, 0x3D	; 61
    1444:	c5 01       	movw	r24, r10
    1446:	b4 01       	movw	r22, r8
    1448:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	69 81       	ldd	r22, Y+1	; 0x01
    1452:	7a 81       	ldd	r23, Y+2	; 0x02
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    145c:	f8 01       	movw	r30, r16
    145e:	64 83       	std	Z+4, r22	; 0x04
    1460:	75 83       	std	Z+5, r23	; 0x05
    1462:	86 83       	std	Z+6, r24	; 0x06
    1464:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1466:	80 91 5c 01 	lds	r24, 0x015C
    146a:	90 91 5d 01 	lds	r25, 0x015D
    146e:	9c 01       	movw	r18, r24
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	3a 83       	std	Y+2, r19	; 0x02
    1476:	29 83       	std	Y+1, r18	; 0x01
    1478:	f9 01       	movw	r30, r18
    147a:	ea 5c       	subi	r30, 0xCA	; 202
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    148a:	f8 01       	movw	r30, r16
    148c:	64 87       	std	Z+12, r22	; 0x0c
    148e:	75 87       	std	Z+13, r23	; 0x0d
    1490:	86 87       	std	Z+14, r24	; 0x0e
    1492:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	e2 5d       	subi	r30, 0xD2	; 210
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    14a8:	f8 01       	movw	r30, r16
    14aa:	60 8b       	std	Z+16, r22	; 0x10
    14ac:	71 8b       	std	Z+17, r23	; 0x11
    14ae:	82 8b       	std	Z+18, r24	; 0x12
    14b0:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    14b2:	80 91 5a 01 	lds	r24, 0x015A
    14b6:	90 91 5b 01 	lds	r25, 0x015B
    14ba:	9c 01       	movw	r18, r24
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	3a 83       	std	Y+2, r19	; 0x02
    14c2:	29 83       	std	Y+1, r18	; 0x01
    14c4:	f9 01       	movw	r30, r18
    14c6:	ea 5c       	subi	r30, 0xCA	; 202
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    14d6:	f8 01       	movw	r30, r16
    14d8:	64 8b       	std	Z+20, r22	; 0x14
    14da:	75 8b       	std	Z+21, r23	; 0x15
    14dc:	86 8b       	std	Z+22, r24	; 0x16
    14de:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	fa 81       	ldd	r31, Y+2	; 0x02
    14e4:	e2 5d       	subi	r30, 0xD2	; 210
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    14f4:	f8 01       	movw	r30, r16
    14f6:	60 8f       	std	Z+24, r22	; 0x18
    14f8:	71 8f       	std	Z+25, r23	; 0x19
    14fa:	82 8f       	std	Z+26, r24	; 0x1a
    14fc:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    14fe:	80 91 56 01 	lds	r24, 0x0156
    1502:	90 91 57 01 	lds	r25, 0x0157
    1506:	9c 01       	movw	r18, r24
    1508:	22 0f       	add	r18, r18
    150a:	33 1f       	adc	r19, r19
    150c:	3a 83       	std	Y+2, r19	; 0x02
    150e:	29 83       	std	Y+1, r18	; 0x01
    1510:	f9 01       	movw	r30, r18
    1512:	ea 5c       	subi	r30, 0xCA	; 202
    1514:	fe 4f       	sbci	r31, 0xFE	; 254
    1516:	60 81       	ld	r22, Z
    1518:	71 81       	ldd	r23, Z+1	; 0x01
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    1522:	f8 01       	movw	r30, r16
    1524:	64 8f       	std	Z+28, r22	; 0x1c
    1526:	75 8f       	std	Z+29, r23	; 0x1d
    1528:	86 8f       	std	Z+30, r24	; 0x1e
    152a:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	e2 5d       	subi	r30, 0xD2	; 210
    1532:	fe 4f       	sbci	r31, 0xFE	; 254
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    1540:	f8 01       	movw	r30, r16
    1542:	60 a3       	std	Z+32, r22	; 0x20
    1544:	71 a3       	std	Z+33, r23	; 0x21
    1546:	82 a3       	std	Z+34, r24	; 0x22
    1548:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    154a:	80 91 58 01 	lds	r24, 0x0158
    154e:	90 91 59 01 	lds	r25, 0x0159
    1552:	9c 01       	movw	r18, r24
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	3a 83       	std	Y+2, r19	; 0x02
    155a:	29 83       	std	Y+1, r18	; 0x01
    155c:	f9 01       	movw	r30, r18
    155e:	ea 5c       	subi	r30, 0xCA	; 202
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    156e:	f8 01       	movw	r30, r16
    1570:	64 a3       	std	Z+36, r22	; 0x24
    1572:	75 a3       	std	Z+37, r23	; 0x25
    1574:	86 a3       	std	Z+38, r24	; 0x26
    1576:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	e2 5d       	subi	r30, 0xD2	; 210
    157e:	fe 4f       	sbci	r31, 0xFE	; 254
    1580:	60 81       	ld	r22, Z
    1582:	71 81       	ldd	r23, Z+1	; 0x01
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 2b 12 	call	0x2456	; 0x2456 <__floatunsisf>
    158c:	f8 01       	movw	r30, r16
    158e:	60 a7       	std	Z+40, r22	; 0x28
    1590:	71 a7       	std	Z+41, r23	; 0x29
    1592:	82 a7       	std	Z+42, r24	; 0x2a
    1594:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	44 e3       	ldi	r20, 0x34	; 52
    159c:	53 e4       	ldi	r21, 0x43	; 67
    159e:	c3 01       	movw	r24, r6
    15a0:	b2 01       	movw	r22, r4
    15a2:	0e 94 46 13 	call	0x268c	; 0x268c <__mulsf3>
    15a6:	23 ec       	ldi	r18, 0xC3	; 195
    15a8:	35 ef       	ldi	r19, 0xF5	; 245
    15aa:	48 e4       	ldi	r20, 0x48	; 72
    15ac:	50 e4       	ldi	r21, 0x40	; 64
    15ae:	0e 94 92 11 	call	0x2324	; 0x2324 <__divsf3>
    15b2:	f8 01       	movw	r30, r16
    15b4:	64 a7       	std	Z+44, r22	; 0x2c
    15b6:	75 a7       	std	Z+45, r23	; 0x2d
    15b8:	86 a7       	std	Z+46, r24	; 0x2e
    15ba:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    15bc:	5d 81       	ldd	r21, Y+5	; 0x05
    15be:	4e 81       	ldd	r20, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	28 85       	ldd	r18, Y+8	; 0x08
    15c4:	85 2f       	mov	r24, r21
    15c6:	94 2f       	mov	r25, r20
    15c8:	a3 2f       	mov	r26, r19
    15ca:	b2 2f       	mov	r27, r18
    15cc:	80 ab       	std	Z+48, r24	; 0x30
    15ce:	91 ab       	std	Z+49, r25	; 0x31
    15d0:	a2 ab       	std	Z+50, r26	; 0x32
    15d2:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    15d4:	59 85       	ldd	r21, Y+9	; 0x09
    15d6:	4a 85       	ldd	r20, Y+10	; 0x0a
    15d8:	85 2f       	mov	r24, r21
    15da:	94 2f       	mov	r25, r20
    15dc:	a2 2d       	mov	r26, r2
    15de:	b3 2d       	mov	r27, r3
    15e0:	84 ab       	std	Z+52, r24	; 0x34
    15e2:	95 ab       	std	Z+53, r25	; 0x35
    15e4:	a6 ab       	std	Z+54, r26	; 0x36
    15e6:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    15e8:	c0 ae       	std	Z+56, r12	; 0x38
    15ea:	d1 ae       	std	Z+57, r13	; 0x39
    15ec:	e2 ae       	std	Z+58, r14	; 0x3a
    15ee:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    15f0:	80 91 52 01 	lds	r24, 0x0152
    15f4:	90 91 53 01 	lds	r25, 0x0153
    15f8:	a0 91 54 01 	lds	r26, 0x0154
    15fc:	b0 91 55 01 	lds	r27, 0x0155
    1600:	80 93 46 01 	sts	0x0146, r24
    1604:	90 93 47 01 	sts	0x0147, r25
    1608:	a0 93 48 01 	sts	0x0148, r26
    160c:	b0 93 49 01 	sts	0x0149, r27
		yi1 = yi;
    1610:	80 92 42 01 	sts	0x0142, r8
    1614:	90 92 43 01 	sts	0x0143, r9
    1618:	a0 92 44 01 	sts	0x0144, r10
    161c:	b0 92 45 01 	sts	0x0145, r11
		ai1 = ai;
    1620:	80 91 4a 01 	lds	r24, 0x014A
    1624:	90 91 4b 01 	lds	r25, 0x014B
    1628:	a0 91 4c 01 	lds	r26, 0x014C
    162c:	b0 91 4d 01 	lds	r27, 0x014D
    1630:	80 93 3e 01 	sts	0x013E, r24
    1634:	90 93 3f 01 	sts	0x013F, r25
    1638:	a0 93 40 01 	sts	0x0140, r26
    163c:	b0 93 41 01 	sts	0x0141, r27
		
		return 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <localize+0x640>
		return 1;
	}
	
	return 0;
	*/
    1644:	2d 96       	adiw	r28, 0x0d	; 13
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	7f 90       	pop	r7
    166a:	6f 90       	pop	r6
    166c:	5f 90       	pop	r5
    166e:	4f 90       	pop	r4
    1670:	3f 90       	pop	r3
    1672:	2f 90       	pop	r2
    1674:	08 95       	ret

00001676 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	18 2f       	mov	r17, r24
    167e:	d6 2f       	mov	r29, r22
    1680:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1682:	0e 94 22 05 	call	0xa44	; 0xa44 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1686:	94 ea       	ldi	r25, 0xA4	; 164
    1688:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    168c:	ec eb       	ldi	r30, 0xBC	; 188
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	90 81       	ld	r25, Z
    1692:	99 23       	and	r25, r25
    1694:	ec f7       	brge	.-6      	; 0x1690 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1696:	90 e5       	ldi	r25, 0x50	; 80
    1698:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    169c:	94 e8       	ldi	r25, 0x84	; 132
    169e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    16a2:	ec eb       	ldi	r30, 0xBC	; 188
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	90 81       	ld	r25, Z
    16a8:	99 23       	and	r25, r25
    16aa:	ec f7       	brge	.-6      	; 0x16a6 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    16ac:	90 91 b9 00 	lds	r25, 0x00B9
    16b0:	98 7f       	andi	r25, 0xF8	; 248
    16b2:	90 32       	cpi	r25, 0x20	; 32
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16b6:	84 e9       	ldi	r24, 0x94	; 148
    16b8:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	2d c0       	rjmp	.+90     	; 0x171a <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    16c6:	84 e8       	ldi	r24, 0x84	; 132
    16c8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    16cc:	ec eb       	ldi	r30, 0xBC	; 188
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	90 81       	ld	r25, Z
    16d2:	99 23       	and	r25, r25
    16d4:	ec f7       	brge	.-6      	; 0x16d0 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    16d6:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    16da:	84 e8       	ldi	r24, 0x84	; 132
    16dc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    16e0:	ec eb       	ldi	r30, 0xBC	; 188
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	ec f7       	brge	.-6      	; 0x16e4 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    16ea:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    16ee:	84 e8       	ldi	r24, 0x84	; 132
    16f0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    16f4:	ec eb       	ldi	r30, 0xBC	; 188
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	88 23       	and	r24, r24
    16fc:	ec f7       	brge	.-6      	; 0x16f8 <m_rf_open+0x82>
	
	TWDR = packet_length;
    16fe:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1702:	84 e8       	ldi	r24, 0x84	; 132
    1704:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1708:	ec eb       	ldi	r30, 0xBC	; 188
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 23       	and	r24, r24
    1710:	ec f7       	brge	.-6      	; 0x170c <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1712:	84 e9       	ldi	r24, 0x94	; 148
    1714:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	08 95       	ret

00001722 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1726:	24 ea       	ldi	r18, 0xA4	; 164
    1728:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    172c:	ec eb       	ldi	r30, 0xBC	; 188
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	20 81       	ld	r18, Z
    1732:	22 23       	and	r18, r18
    1734:	ec f7       	brge	.-6      	; 0x1730 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1736:	21 e5       	ldi	r18, 0x51	; 81
    1738:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    173c:	24 e8       	ldi	r18, 0x84	; 132
    173e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1742:	ec eb       	ldi	r30, 0xBC	; 188
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	20 81       	ld	r18, Z
    1748:	22 23       	and	r18, r18
    174a:	ec f7       	brge	.-6      	; 0x1746 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    174c:	20 91 b9 00 	lds	r18, 0x00B9
    1750:	28 7f       	andi	r18, 0xF8	; 248
    1752:	28 34       	cpi	r18, 0x48	; 72
    1754:	29 f4       	brne	.+10     	; 0x1760 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1756:	84 e9       	ldi	r24, 0x94	; 148
    1758:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	3f c0       	rjmp	.+126    	; 0x17de <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1760:	24 ec       	ldi	r18, 0xC4	; 196
    1762:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1766:	ec eb       	ldi	r30, 0xBC	; 188
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	20 81       	ld	r18, Z
    176c:	22 23       	and	r18, r18
    176e:	ec f7       	brge	.-6      	; 0x176a <m_rf_read+0x48>
	bytes = TWDR;
    1770:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1774:	46 13       	cpse	r20, r22
    1776:	09 c0       	rjmp	.+18     	; 0x178a <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	41 50       	subi	r20, 0x01	; 1
    177c:	51 09       	sbc	r21, r1
    177e:	14 16       	cp	r1, r20
    1780:	15 06       	cpc	r1, r21
    1782:	44 f0       	brlt	.+16     	; 0x1794 <m_rf_read+0x72>
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	18 c0       	rjmp	.+48     	; 0x17ba <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    178a:	84 e9       	ldi	r24, 0x94	; 148
    178c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	25 c0       	rjmp	.+74     	; 0x17de <m_rf_read+0xbc>
    1794:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    179a:	ec eb       	ldi	r30, 0xBC	; 188
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    17a0:	cb eb       	ldi	r28, 0xBB	; 187
    17a2:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    17a4:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    17a6:	60 81       	ld	r22, Z
    17a8:	66 23       	and	r22, r22
    17aa:	ec f7       	brge	.-6      	; 0x17a6 <m_rf_read+0x84>
		buffer[i] = TWDR;
    17ac:	68 81       	ld	r22, Y
    17ae:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	24 17       	cp	r18, r20
    17b6:	35 07       	cpc	r19, r21
    17b8:	ac f3       	brlt	.-22     	; 0x17a4 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    17ba:	24 e8       	ldi	r18, 0x84	; 132
    17bc:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    17c0:	ec eb       	ldi	r30, 0xBC	; 188
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	20 81       	ld	r18, Z
    17c6:	22 23       	and	r18, r18
    17c8:	ec f7       	brge	.-6      	; 0x17c4 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    17ca:	20 91 bb 00 	lds	r18, 0x00BB
    17ce:	fc 01       	movw	r30, r24
    17d0:	e4 0f       	add	r30, r20
    17d2:	f5 1f       	adc	r31, r21
    17d4:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17d6:	84 e9       	ldi	r24, 0x94	; 148
    17d8:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    17e8:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    17ea:	94 ea       	ldi	r25, 0xA4	; 164
    17ec:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    17f0:	ec eb       	ldi	r30, 0xBC	; 188
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	99 23       	and	r25, r25
    17f8:	ec f7       	brge	.-6      	; 0x17f4 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    17fa:	90 e5       	ldi	r25, 0x50	; 80
    17fc:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1800:	94 e8       	ldi	r25, 0x84	; 132
    1802:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1806:	ec eb       	ldi	r30, 0xBC	; 188
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	90 81       	ld	r25, Z
    180c:	99 23       	and	r25, r25
    180e:	ec f7       	brge	.-6      	; 0x180a <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1810:	90 91 b9 00 	lds	r25, 0x00B9
    1814:	98 7f       	andi	r25, 0xF8	; 248
    1816:	90 32       	cpi	r25, 0x20	; 32
    1818:	31 f4       	brne	.+12     	; 0x1826 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    181a:	84 e9       	ldi	r24, 0x94	; 148
    181c:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    1820:	78 94       	sei
		return 0;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	32 c0       	rjmp	.+100    	; 0x188a <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    1826:	93 e0       	ldi	r25, 0x03	; 3
    1828:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    182c:	94 e8       	ldi	r25, 0x84	; 132
    182e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1832:	ec eb       	ldi	r30, 0xBC	; 188
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	90 81       	ld	r25, Z
    1838:	99 23       	and	r25, r25
    183a:	ec f7       	brge	.-6      	; 0x1836 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    183c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1840:	84 e8       	ldi	r24, 0x84	; 132
    1842:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1846:	ec eb       	ldi	r30, 0xBC	; 188
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	88 23       	and	r24, r24
    184e:	ec f7       	brge	.-6      	; 0x184a <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    1850:	24 2f       	mov	r18, r20
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	12 16       	cp	r1, r18
    1856:	13 06       	cpc	r1, r19
    1858:	9c f4       	brge	.+38     	; 0x1880 <m_rf_send+0x9c>
    185a:	a6 2f       	mov	r26, r22
    185c:	b7 2f       	mov	r27, r23
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    1862:	cb eb       	ldi	r28, 0xBB	; 187
    1864:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    1866:	ec eb       	ldi	r30, 0xBC	; 188
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    186c:	4d 91       	ld	r20, X+
    186e:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    1870:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    1872:	40 81       	ld	r20, Z
    1874:	44 23       	and	r20, r20
    1876:	ec f7       	brge	.-6      	; 0x1872 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	82 17       	cp	r24, r18
    187c:	93 07       	cpc	r25, r19
    187e:	b4 f3       	brlt	.-20     	; 0x186c <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1880:	84 e9       	ldi	r24, 0x94	; 148
    1882:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    1886:	78 94       	sei
	
	return 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1890:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1892:	f8 94       	cli
	if (!usb_configuration) {
    1894:	80 91 77 01 	lds	r24, 0x0177
    1898:	81 11       	cpse	r24, r1
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <m_usb_rx_char+0x12>
		SREG = intr_state;
    189c:	9f bf       	out	0x3f, r25	; 63
		return -1;
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    18a8:	80 91 e8 00 	lds	r24, 0x00E8
    18ac:	85 fd       	sbrc	r24, 5
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    18b0:	9f bf       	out	0x3f, r25	; 63
		return -1;
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    18b6:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    18ba:	20 91 e8 00 	lds	r18, 0x00E8
    18be:	25 fd       	sbrc	r18, 5
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <m_usb_rx_char+0x38>
    18c2:	2b e6       	ldi	r18, 0x6B	; 107
    18c4:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    18c8:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    18ca:	08 95       	ret

000018cc <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    18cc:	80 91 77 01 	lds	r24, 0x0177
    18d0:	88 23       	and	r24, r24
    18d2:	89 f0       	breq	.+34     	; 0x18f6 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    18d4:	2f b7       	in	r18, 0x3f	; 63
		cli();
    18d6:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    18de:	80 91 e8 00 	lds	r24, 0x00E8
    18e2:	85 ff       	sbrs	r24, 5
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    18e6:	e8 ee       	ldi	r30, 0xE8	; 232
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	9b e6       	ldi	r25, 0x6B	; 107
    18ec:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    18ee:	80 81       	ld	r24, Z
    18f0:	85 fd       	sbrc	r24, 5
    18f2:	fc cf       	rjmp	.-8      	; 0x18ec <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    18f4:	2f bf       	out	0x3f, r18	; 63
    18f6:	08 95       	ret

000018f8 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    18fc:	90 91 77 01 	lds	r25, 0x0177
    1900:	99 23       	and	r25, r25
    1902:	09 f4       	brne	.+2      	; 0x1906 <m_usb_tx_char+0xe>
    1904:	4d c0       	rjmp	.+154    	; 0x19a0 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1906:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1908:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    190a:	24 e0       	ldi	r18, 0x04	; 4
    190c:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1910:	20 91 79 01 	lds	r18, 0x0179
    1914:	22 23       	and	r18, r18
    1916:	49 f0       	breq	.+18     	; 0x192a <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1918:	20 91 e8 00 	lds	r18, 0x00E8
    191c:	25 fd       	sbrc	r18, 5
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1920:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	42 c0       	rjmp	.+132    	; 0x19aa <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    1926:	10 92 79 01 	sts	0x0179, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    192a:	30 91 e4 00 	lds	r19, 0x00E4
    192e:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1930:	20 91 e8 00 	lds	r18, 0x00E8
    1934:	25 fd       	sbrc	r18, 5
    1936:	25 c0       	rjmp	.+74     	; 0x1982 <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1938:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    193a:	90 91 e4 00 	lds	r25, 0x00E4
    193e:	93 17       	cp	r25, r19
    1940:	49 f0       	breq	.+18     	; 0x1954 <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1942:	90 91 77 01 	lds	r25, 0x0177
    1946:	91 11       	cpse	r25, r1
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <m_usb_tx_char+0x70>
    194a:	2c c0       	rjmp	.+88     	; 0x19a4 <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    194c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    194e:	98 81       	ld	r25, Y
    1950:	93 13       	cpse	r25, r19
    1952:	05 c0       	rjmp	.+10     	; 0x195e <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 79 01 	sts	0x0179, r24
			return -1;
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	26 c0       	rjmp	.+76     	; 0x19aa <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    195e:	90 91 77 01 	lds	r25, 0x0177
    1962:	91 11       	cpse	r25, r1
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <m_usb_tx_char+0x7e>
    1966:	20 c0       	rjmp	.+64     	; 0x19a8 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1968:	a9 ee       	ldi	r26, 0xE9	; 233
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    196e:	e8 ee       	ldi	r30, 0xE8	; 232
    1970:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1972:	c4 ee       	ldi	r28, 0xE4	; 228
    1974:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    1976:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1978:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    197a:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    197c:	20 81       	ld	r18, Z
    197e:	25 ff       	sbrs	r18, 5
    1980:	e5 cf       	rjmp	.-54     	; 0x194c <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1982:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1986:	80 91 e8 00 	lds	r24, 0x00E8
    198a:	85 fd       	sbrc	r24, 5
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <m_usb_tx_char+0x9c>
    198e:	8a e3       	ldi	r24, 0x3A	; 58
    1990:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1994:	85 e0       	ldi	r24, 0x05	; 5
    1996:	80 93 76 01 	sts	0x0176, r24
	SREG = intr_state;
    199a:	9f bf       	out	0x3f, r25	; 63
	return 0;
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <m_usb_tx_char+0xb2>
    19a8:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    19c2:	e1 ee       	ldi	r30, 0xE1	; 225
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
        UDINT = 0;
    19c8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    19ca:	83 ff       	sbrs	r24, 3
    19cc:	11 c0       	rjmp	.+34     	; 0x19f0 <__vector_10+0x40>
		UENUM = 0;
    19ce:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    19d8:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    19dc:	92 e1       	ldi	r25, 0x12	; 18
    19de:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    19e2:	98 e0       	ldi	r25, 0x08	; 8
    19e4:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    19e8:	10 92 77 01 	sts	0x0177, r1
		cdc_line_rtsdtr = 0;
    19ec:	10 92 78 01 	sts	0x0178, r1
        }
	if (intbits & (1<<SOFI)) {
    19f0:	82 ff       	sbrs	r24, 2
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <__vector_10+0x6a>
		if (usb_configuration) {
    19f4:	80 91 77 01 	lds	r24, 0x0177
    19f8:	88 23       	and	r24, r24
    19fa:	79 f0       	breq	.+30     	; 0x1a1a <__vector_10+0x6a>
			t = transmit_flush_timer;
    19fc:	80 91 76 01 	lds	r24, 0x0176
			if (t) {
    1a00:	88 23       	and	r24, r24
    1a02:	59 f0       	breq	.+22     	; 0x1a1a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1a04:	81 50       	subi	r24, 0x01	; 1
    1a06:	80 93 76 01 	sts	0x0176, r24
				if (!t) {
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1a14:	8a e3       	ldi	r24, 0x3A	; 58
    1a16:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1a1a:	ff 91       	pop	r31
    1a1c:	ef 91       	pop	r30
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1a56:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1a5a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1a5e:	83 ff       	sbrs	r24, 3
    1a60:	51 c1       	rjmp	.+674    	; 0x1d04 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    1a62:	e1 ef       	ldi	r30, 0xF1	; 241
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1a68:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1a6a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1a6c:	30 81       	ld	r19, Z
    1a6e:	93 2f       	mov	r25, r19
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	dc 01       	movw	r26, r24
    1a74:	a2 2b       	or	r26, r18
    1a76:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1a78:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1a7a:	60 81       	ld	r22, Z
    1a7c:	96 2f       	mov	r25, r22
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	85 2b       	or	r24, r21
                wLength = UEDATX;
    1a82:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    1a84:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1a86:	52 ef       	ldi	r21, 0xF2	; 242
    1a88:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1a8c:	46 30       	cpi	r20, 0x06	; 6
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <__vector_11+0x66>
    1a90:	5c c0       	rjmp	.+184    	; 0x1b4a <__vector_11+0x11e>
    1a92:	04 c0       	rjmp	.+8      	; 0x1a9c <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1a94:	81 e2       	ldi	r24, 0x21	; 33
    1a96:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1a9a:	3b c1       	rjmp	.+630    	; 0x1d12 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1a9c:	c6 e0       	ldi	r28, 0x06	; 6
    1a9e:	47 ef       	ldi	r20, 0xF7	; 247
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1aa2:	fa 01       	movw	r30, r20
    1aa4:	65 91       	lpm	r22, Z+
    1aa6:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1aa8:	26 17       	cp	r18, r22
    1aaa:	37 07       	cpc	r19, r23
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1aae:	49 5f       	subi	r20, 0xF9	; 249
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1ab2:	20 c0       	rjmp	.+64     	; 0x1af4 <__vector_11+0xc8>
				}
				list += 2;
    1ab4:	fa 01       	movw	r30, r20
    1ab6:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1ab8:	65 91       	lpm	r22, Z+
    1aba:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1abc:	86 17       	cp	r24, r22
    1abe:	97 07       	cpc	r25, r23
    1ac0:	19 f0       	breq	.+6      	; 0x1ac8 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    1ac2:	49 5f       	subi	r20, 0xF9	; 249
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1ac6:	16 c0       	rjmp	.+44     	; 0x1af4 <__vector_11+0xc8>
				}
				list += 2;
    1ac8:	fa 01       	movw	r30, r20
    1aca:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1acc:	85 91       	lpm	r24, Z+
    1ace:	94 91       	lpm	r25, Z
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	39 2f       	mov	r19, r25
				list += 2;
    1ad4:	fa 01       	movw	r30, r20
    1ad6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1ad8:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1ada:	9b 2f       	mov	r25, r27
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1ae0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <__vector_11+0xc0>
    1ae6:	10 f0       	brcs	.+4      	; 0x1aec <__vector_11+0xc0>
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	84 17       	cp	r24, r20
    1aee:	28 f4       	brcc	.+10     	; 0x1afa <__vector_11+0xce>
    1af0:	48 2f       	mov	r20, r24
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <__vector_11+0xce>
    1af4:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1af6:	a9 f6       	brne	.-86     	; 0x1aa2 <__vector_11+0x76>
    1af8:	cd cf       	rjmp	.-102    	; 0x1a94 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1afa:	c8 ee       	ldi	r28, 0xE8	; 232
    1afc:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1afe:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1b00:	a1 ef       	ldi	r26, 0xF1	; 241
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1b04:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1b06:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1b08:	98 2f       	mov	r25, r24
    1b0a:	95 70       	andi	r25, 0x05	; 5
    1b0c:	e1 f3       	breq	.-8      	; 0x1b06 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    1b0e:	82 fd       	sbrc	r24, 2
    1b10:	00 c1       	rjmp	.+512    	; 0x1d12 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1b12:	64 2f       	mov	r22, r20
    1b14:	41 31       	cpi	r20, 0x11	; 17
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <__vector_11+0xee>
    1b18:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1b1a:	66 23       	and	r22, r22
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <__vector_11+0xf4>
    1b1e:	f6 c0       	rjmp	.+492    	; 0x1d0c <__vector_11+0x2e0>
    1b20:	c9 01       	movw	r24, r18
    1b22:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    1b24:	fc 01       	movw	r30, r24
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	e4 91       	lpm	r30, Z
    1b2a:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1b2c:	51 50       	subi	r21, 0x01	; 1
    1b2e:	d1 f7       	brne	.-12     	; 0x1b24 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1b30:	86 2f       	mov	r24, r22
    1b32:	81 50       	subi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	28 0f       	add	r18, r24
    1b3a:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1b3c:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b3e:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1b40:	41 11       	cpse	r20, r1
    1b42:	e1 cf       	rjmp	.-62     	; 0x1b06 <__vector_11+0xda>
    1b44:	60 31       	cpi	r22, 0x10	; 16
    1b46:	f9 f2       	breq	.-66     	; 0x1b06 <__vector_11+0xda>
    1b48:	e4 c0       	rjmp	.+456    	; 0x1d12 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1b4a:	45 30       	cpi	r20, 0x05	; 5
    1b4c:	61 f4       	brne	.+24     	; 0x1b66 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b4e:	8e ef       	ldi	r24, 0xFE	; 254
    1b50:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b54:	e8 ee       	ldi	r30, 0xE8	; 232
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 ff       	sbrs	r24, 0
    1b5c:	fd cf       	rjmp	.-6      	; 0x1b58 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1b5e:	20 68       	ori	r18, 0x80	; 128
    1b60:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1b64:	d6 c0       	rjmp	.+428    	; 0x1d12 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1b66:	49 30       	cpi	r20, 0x09	; 9
    1b68:	a1 f5       	brne	.+104    	; 0x1bd2 <__vector_11+0x1a6>
    1b6a:	71 11       	cpse	r23, r1
    1b6c:	5b c0       	rjmp	.+182    	; 0x1c24 <__vector_11+0x1f8>
			usb_configuration = wValue;
    1b6e:	20 93 77 01 	sts	0x0177, r18
			cdc_line_rtsdtr = 0;
    1b72:	10 92 78 01 	sts	0x0178, r1
			transmit_flush_timer = 0;
    1b76:	10 92 76 01 	sts	0x0176, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b7a:	8e ef       	ldi	r24, 0xFE	; 254
    1b7c:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1b80:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1b82:	81 e2       	ldi	r24, 0x21	; 33
    1b84:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1b86:	c9 ee       	ldi	r28, 0xE9	; 233
    1b88:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1b8a:	ab ee       	ldi	r26, 0xEB	; 235
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1b8e:	6c ee       	ldi	r22, 0xEC	; 236
    1b90:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1b92:	4d ee       	ldi	r20, 0xED	; 237
    1b94:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1b96:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1b98:	9c 01       	movw	r18, r24
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	04 91       	lpm	r16, Z
				UECONX = en;
    1ba2:	0c 93       	st	X, r16
				if (en) {
    1ba4:	00 23       	and	r16, r16
    1ba6:	59 f0       	breq	.+22     	; 0x1bbe <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1ba8:	f9 01       	movw	r30, r18
    1baa:	24 91       	lpm	r18, Z
    1bac:	fb 01       	movw	r30, r22
    1bae:	20 83       	st	Z, r18
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    1bb4:	03 96       	adiw	r24, 0x03	; 3
    1bb6:	24 91       	lpm	r18, Z
    1bb8:	fa 01       	movw	r30, r20
    1bba:	20 83       	st	Z, r18
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1bbe:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1bc0:	1f 5f       	subi	r17, 0xFF	; 255
    1bc2:	15 30       	cpi	r17, 0x05	; 5
    1bc4:	41 f7       	brne	.-48     	; 0x1b96 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1bc6:	ea ee       	ldi	r30, 0xEA	; 234
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8e e1       	ldi	r24, 0x1E	; 30
    1bcc:	80 83       	st	Z, r24
        		UERST = 0;
    1bce:	10 82       	st	Z, r1
			return;
    1bd0:	a0 c0       	rjmp	.+320    	; 0x1d12 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1bd2:	48 30       	cpi	r20, 0x08	; 8
    1bd4:	81 f4       	brne	.+32     	; 0x1bf6 <__vector_11+0x1ca>
    1bd6:	70 38       	cpi	r23, 0x80	; 128
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <__vector_11+0x1b0>
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1bdc:	e8 ee       	ldi	r30, 0xE8	; 232
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	80 ff       	sbrs	r24, 0
    1be4:	fd cf       	rjmp	.-6      	; 0x1be0 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1be6:	80 91 77 01 	lds	r24, 0x0177
    1bea:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bee:	8e ef       	ldi	r24, 0xFE	; 254
    1bf0:	80 93 e8 00 	sts	0x00E8, r24
    1bf4:	8e c0       	rjmp	.+284    	; 0x1d12 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1bf6:	41 32       	cpi	r20, 0x21	; 33
    1bf8:	a9 f4       	brne	.+42     	; 0x1c24 <__vector_11+0x1f8>
    1bfa:	71 3a       	cpi	r23, 0xA1	; 161
    1bfc:	f1 f5       	brne	.+124    	; 0x1c7a <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1bfe:	e8 ee       	ldi	r30, 0xE8	; 232
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 ff       	sbrs	r24, 0
    1c06:	fd cf       	rjmp	.-6      	; 0x1c02 <__vector_11+0x1d6>
    1c08:	ec e0       	ldi	r30, 0x0C	; 12
    1c0a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1c0c:	a1 ef       	ldi	r26, 0xF1	; 241
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	81 91       	ld	r24, Z+
    1c12:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	e3 31       	cpi	r30, 0x13	; 19
    1c18:	f4 07       	cpc	r31, r20
    1c1a:	d1 f7       	brne	.-12     	; 0x1c10 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c1c:	8e ef       	ldi	r24, 0xFE	; 254
    1c1e:	80 93 e8 00 	sts	0x00E8, r24
    1c22:	77 c0       	rjmp	.+238    	; 0x1d12 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1c24:	40 32       	cpi	r20, 0x20	; 32
    1c26:	c9 f4       	brne	.+50     	; 0x1c5a <__vector_11+0x22e>
    1c28:	71 32       	cpi	r23, 0x21	; 33
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__vector_11+0x202>
    1c2c:	6b c0       	rjmp	.+214    	; 0x1d04 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1c2e:	e8 ee       	ldi	r30, 0xE8	; 232
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	82 ff       	sbrs	r24, 2
    1c36:	fd cf       	rjmp	.-6      	; 0x1c32 <__vector_11+0x206>
    1c38:	ec e0       	ldi	r30, 0x0C	; 12
    1c3a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1c3c:	a1 ef       	ldi	r26, 0xF1	; 241
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	8c 91       	ld	r24, X
    1c42:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1c44:	51 e0       	ldi	r21, 0x01	; 1
    1c46:	e3 31       	cpi	r30, 0x13	; 19
    1c48:	f5 07       	cpc	r31, r21
    1c4a:	d1 f7       	brne	.-12     	; 0x1c40 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1c4c:	e8 ee       	ldi	r30, 0xE8	; 232
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8b ef       	ldi	r24, 0xFB	; 251
    1c52:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c54:	8e ef       	ldi	r24, 0xFE	; 254
    1c56:	80 83       	st	Z, r24
    1c58:	5c c0       	rjmp	.+184    	; 0x1d12 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1c5a:	42 32       	cpi	r20, 0x22	; 34
    1c5c:	71 f4       	brne	.+28     	; 0x1c7a <__vector_11+0x24e>
    1c5e:	71 32       	cpi	r23, 0x21	; 33
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <__vector_11+0x238>
    1c62:	50 c0       	rjmp	.+160    	; 0x1d04 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1c64:	20 93 78 01 	sts	0x0178, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c68:	e8 ee       	ldi	r30, 0xE8	; 232
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 ff       	sbrs	r24, 0
    1c70:	fd cf       	rjmp	.-6      	; 0x1c6c <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c72:	8e ef       	ldi	r24, 0xFE	; 254
    1c74:	80 93 e8 00 	sts	0x00E8, r24
    1c78:	4c c0       	rjmp	.+152    	; 0x1d12 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1c7a:	41 11       	cpse	r20, r1
    1c7c:	1a c0       	rjmp	.+52     	; 0x1cb2 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c7e:	e8 ee       	ldi	r30, 0xE8	; 232
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	20 81       	ld	r18, Z
    1c84:	20 ff       	sbrs	r18, 0
    1c86:	fd cf       	rjmp	.-6      	; 0x1c82 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1c88:	72 38       	cpi	r23, 0x82	; 130
    1c8a:	51 f4       	brne	.+20     	; 0x1ca0 <__vector_11+0x274>
				UENUM = wIndex;
    1c8c:	e9 ee       	ldi	r30, 0xE9	; 233
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1c92:	80 91 eb 00 	lds	r24, 0x00EB
    1c96:	85 fb       	bst	r24, 5
    1c98:	88 27       	eor	r24, r24
    1c9a:	80 f9       	bld	r24, 0
				UENUM = 0;
    1c9c:	10 82       	st	Z, r1
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1ca2:	e1 ef       	ldi	r30, 0xF1	; 241
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 83       	st	Z, r24
			UEDATX = 0;
    1ca8:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1caa:	8e ef       	ldi	r24, 0xFE	; 254
    1cac:	80 93 e8 00 	sts	0x00E8, r24
    1cb0:	30 c0       	rjmp	.+96     	; 0x1d12 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1cb2:	41 30       	cpi	r20, 0x01	; 1
    1cb4:	11 f0       	breq	.+4      	; 0x1cba <__vector_11+0x28e>
    1cb6:	43 30       	cpi	r20, 0x03	; 3
    1cb8:	29 f5       	brne	.+74     	; 0x1d04 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1cba:	72 30       	cpi	r23, 0x02	; 2
    1cbc:	19 f5       	brne	.+70     	; 0x1d04 <__vector_11+0x2d8>
    1cbe:	23 2b       	or	r18, r19
    1cc0:	09 f5       	brne	.+66     	; 0x1d04 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1cc2:	8f 77       	andi	r24, 0x7F	; 127
    1cc4:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1cc6:	38 2f       	mov	r19, r24
    1cc8:	31 50       	subi	r19, 0x01	; 1
    1cca:	34 30       	cpi	r19, 0x04	; 4
    1ccc:	d8 f4       	brcc	.+54     	; 0x1d04 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cce:	3e ef       	ldi	r19, 0xFE	; 254
    1cd0:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1cd4:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1cd8:	43 30       	cpi	r20, 0x03	; 3
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1cdc:	81 e2       	ldi	r24, 0x21	; 33
    1cde:	80 93 eb 00 	sts	0x00EB, r24
    1ce2:	17 c0       	rjmp	.+46     	; 0x1d12 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1ce4:	99 e1       	ldi	r25, 0x19	; 25
    1ce6:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	d9 01       	movw	r26, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <__vector_11+0x2ca>
    1cf2:	aa 0f       	add	r26, r26
    1cf4:	bb 1f       	adc	r27, r27
    1cf6:	8a 95       	dec	r24
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <__vector_11+0x2c6>
    1cfa:	ea ee       	ldi	r30, 0xEA	; 234
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	a0 83       	st	Z, r26
					UERST = 0;
    1d00:	10 82       	st	Z, r1
    1d02:	07 c0       	rjmp	.+14     	; 0x1d12 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1d04:	81 e2       	ldi	r24, 0x21	; 33
    1d06:	80 93 eb 00 	sts	0x00EB, r24
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d0c:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1d0e:	41 11       	cpse	r20, r1
    1d10:	fa ce       	rjmp	.-524    	; 0x1b06 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1d12:	ff 91       	pop	r31
    1d14:	ef 91       	pop	r30
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	bf 91       	pop	r27
    1d1c:	af 91       	pop	r26
    1d1e:	9f 91       	pop	r25
    1d20:	8f 91       	pop	r24
    1d22:	7f 91       	pop	r23
    1d24:	6f 91       	pop	r22
    1d26:	5f 91       	pop	r21
    1d28:	4f 91       	pop	r20
    1d2a:	3f 91       	pop	r19
    1d2c:	2f 91       	pop	r18
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	0f 90       	pop	r0
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	0f 90       	pop	r0
    1d38:	1f 90       	pop	r1
    1d3a:	18 95       	reti

00001d3c <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	27 97       	sbiw	r28, 0x07	; 7
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1d58:	8e 01       	movw	r16, r28
    1d5a:	0f 5f       	subi	r16, 0xFF	; 255
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	27 e0       	ldi	r18, 0x07	; 7
    1d60:	f8 01       	movw	r30, r16
    1d62:	11 92       	st	Z+, r1
    1d64:	2a 95       	dec	r18
    1d66:	e9 f7       	brne	.-6      	; 0x1d62 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1d68:	4a e0       	ldi	r20, 0x0A	; 10
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	b8 01       	movw	r22, r16
    1d6e:	0e 94 26 14 	call	0x284c	; 0x284c <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1d72:	7e 01       	movw	r14, r28
    1d74:	f8 e0       	ldi	r31, 0x08	; 8
    1d76:	ef 0e       	add	r14, r31
    1d78:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	81 91       	ld	r24, Z+
    1d7e:	8f 01       	movw	r16, r30
    1d80:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1d82:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1d86:	0e 15       	cp	r16, r14
    1d88:	1f 05       	cpc	r17, r15
    1d8a:	b9 f7       	brne	.-18     	; 0x1d7a <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1d8c:	27 96       	adiw	r28, 0x07	; 7
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	08 95       	ret

00001da6 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1daa:	ec eb       	ldi	r30, 0xBC	; 188
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 23       	and	r24, r24
    1db2:	34 f0       	brlt	.+12     	; 0x1dc0 <twi_wait+0x1a>
    1db4:	2f 5f       	subi	r18, 0xFF	; 255
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	29 3e       	cpi	r18, 0xE9	; 233
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	38 07       	cpc	r19, r24
    1dbe:	b9 f7       	brne	.-18     	; 0x1dae <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	28 3e       	cpi	r18, 0xE8	; 232
    1dc4:	33 40       	sbci	r19, 0x03	; 3
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <twi_wait+0x24>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1dca:	08 95       	ret

00001dcc <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1dcc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1dd0:	84 e8       	ldi	r24, 0x84	; 132
    1dd2:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1dd6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <twi_wait>
    1dda:	88 23       	and	r24, r24
    1ddc:	21 f0       	breq	.+8      	; 0x1de6 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1dde:	80 91 b9 00 	lds	r24, 0x00B9
    1de2:	88 7f       	andi	r24, 0xF8	; 248
    1de4:	08 95       	ret
	} else {
		return 0;					// comm failure
    1de6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1de8:	08 95       	ret

00001dea <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1dea:	cf 93       	push	r28
    1dec:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1dee:	94 ea       	ldi	r25, 0xA4	; 164
    1df0:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1df4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <twi_wait>
    1df8:	88 23       	and	r24, r24
    1dfa:	61 f0       	breq	.+24     	; 0x1e14 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1dfc:	8c 2f       	mov	r24, r28
    1dfe:	88 0f       	add	r24, r24
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1e06:	88 34       	cpi	r24, 0x48	; 72
    1e08:	39 f4       	brne	.+14     	; 0x1e18 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1e0a:	84 e9       	ldi	r24, 0x94	; 148
    1e0c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1e18:	81 e0       	ldi	r24, 0x01	; 1
}	
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1e1e:	cf 93       	push	r28
    1e20:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1e22:	94 ea       	ldi	r25, 0xA4	; 164
    1e24:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1e28:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <twi_wait>
    1e2c:	88 23       	and	r24, r24
    1e2e:	59 f0       	breq	.+22     	; 0x1e46 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1e30:	8c 2f       	mov	r24, r28
    1e32:	88 0f       	add	r24, r24
    1e34:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1e38:	80 32       	cpi	r24, 0x20	; 32
    1e3a:	39 f4       	brne	.+14     	; 0x1e4a <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1e3c:	84 e9       	ldi	r24, 0x94	; 148
    1e3e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
}	
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e50:	84 e9       	ldi	r24, 0x94	; 148
    1e52:	80 93 bc 00 	sts	0x00BC, r24
    1e56:	08 95       	ret

00001e58 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	60 97       	sbiw	r28, 0x10	; 16
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	e8 2e       	mov	r14, r24
    1e76:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1e78:	fe 01       	movw	r30, r28
    1e7a:	31 96       	adiw	r30, 0x01	; 1
    1e7c:	80 e1       	ldi	r24, 0x10	; 16
    1e7e:	df 01       	movw	r26, r30
    1e80:	1d 92       	st	X+, r1
    1e82:	8a 95       	dec	r24
    1e84:	e9 f7       	brne	.-6      	; 0x1e80 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e86:	88 e5       	ldi	r24, 0x58	; 88
    1e88:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    1e8c:	88 23       	and	r24, r24
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <m_wii_read+0x3a>
    1e90:	66 c0       	rjmp	.+204    	; 0x1f5e <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1e92:	86 e3       	ldi	r24, 0x36	; 54
    1e94:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <m_wii_read+0x46>
    1e9c:	62 c0       	rjmp	.+196    	; 0x1f62 <m_wii_read+0x10a>
	end();
    1e9e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ea2:	b8 e0       	ldi	r27, 0x08	; 8
    1ea4:	ba 95       	dec	r27
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <m_wii_read+0x4c>
    1ea8:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1eaa:	88 e5       	ldi	r24, 0x58	; 88
    1eac:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <start_read>
    1eb0:	88 23       	and	r24, r24
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <m_wii_read+0x5e>
    1eb4:	58 c0       	rjmp	.+176    	; 0x1f66 <m_wii_read+0x10e>
    1eb6:	ae 01       	movw	r20, r28
    1eb8:	4f 5f       	subi	r20, 0xFF	; 255
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1ebc:	8e 01       	movw	r16, r28
    1ebe:	00 5f       	subi	r16, 0xF0	; 240
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ec2:	ec eb       	ldi	r30, 0xBC	; 188
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1ec8:	2b eb       	ldi	r18, 0xBB	; 187
    1eca:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ecc:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 23       	and	r24, r24
    1ed2:	ec f7       	brge	.-6      	; 0x1ece <m_wii_read+0x76>
		temp[i] = TWDR;
    1ed4:	d9 01       	movw	r26, r18
    1ed6:	8c 91       	ld	r24, X
    1ed8:	da 01       	movw	r26, r20
    1eda:	8d 93       	st	X+, r24
    1edc:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1ede:	a0 17       	cp	r26, r16
    1ee0:	b1 07       	cpc	r27, r17
    1ee2:	a1 f7       	brne	.-24     	; 0x1ecc <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1ee4:	84 e8       	ldi	r24, 0x84	; 132
    1ee6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1eea:	ec eb       	ldi	r30, 0xBC	; 188
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 23       	and	r24, r24
    1ef2:	ec f7       	brge	.-6      	; 0x1eee <m_wii_read+0x96>
	temp[15] = TWDR;
    1ef4:	80 91 bb 00 	lds	r24, 0x00BB
    1ef8:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1efa:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
    1efe:	de 01       	movw	r26, r28
    1f00:	14 96       	adiw	r26, 0x04	; 4
    1f02:	6e 2d       	mov	r22, r14
    1f04:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1f06:	4c 91       	ld	r20, X
    1f08:	24 2f       	mov	r18, r20
    1f0a:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1f10:	fc 01       	movw	r30, r24
    1f12:	80 81       	ld	r24, Z
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	f0 e1       	ldi	r31, 0x10	; 16
    1f18:	2f 9f       	mul	r18, r31
    1f1a:	80 0d       	add	r24, r0
    1f1c:	91 1d       	adc	r25, r1
    1f1e:	11 24       	eor	r1, r1
    1f20:	fb 01       	movw	r30, r22
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1f26:	84 2f       	mov	r24, r20
    1f28:	80 7c       	andi	r24, 0xC0	; 192
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1f34:	9d 01       	movw	r18, r26
    1f36:	21 50       	subi	r18, 0x01	; 1
    1f38:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	20 81       	ld	r18, Z
    1f3e:	82 0f       	add	r24, r18
    1f40:	91 1d       	adc	r25, r1
    1f42:	fb 01       	movw	r30, r22
    1f44:	93 83       	std	Z+3, r25	; 0x03
    1f46:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1f48:	4f 70       	andi	r20, 0x0F	; 15
    1f4a:	44 83       	std	Z+4, r20	; 0x04
    1f4c:	15 82       	std	Z+5, r1	; 0x05
    1f4e:	13 96       	adiw	r26, 0x03	; 3
    1f50:	6a 5f       	subi	r22, 0xFA	; 250
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1f54:	0a 17       	cp	r16, r26
    1f56:	1b 07       	cpc	r17, r27
    1f58:	b1 f6       	brne	.-84     	; 0x1f06 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1f66:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1f68:	60 96       	adiw	r28, 0x10	; 16
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	08 95       	ret

00001f82 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1f82:	0e 94 22 05 	call	0xa44	; 0xa44 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f86:	88 e5       	ldi	r24, 0x58	; 88
    1f88:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    1f8c:	88 23       	and	r24, r24
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <m_wii_open+0x10>
    1f90:	c7 c0       	rjmp	.+398    	; 0x2120 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1f92:	80 e3       	ldi	r24, 0x30	; 48
    1f94:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <m_wii_open+0x1c>
    1f9c:	c3 c0       	rjmp	.+390    	; 0x2124 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1fa4:	88 23       	and	r24, r24
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <m_wii_open+0x28>
    1fa8:	bf c0       	rjmp	.+382    	; 0x2128 <m_wii_open+0x1a6>
	end();
    1faa:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fae:	83 ec       	ldi	r24, 0xC3	; 195
    1fb0:	99 e0       	ldi	r25, 0x09	; 9
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <m_wii_open+0x30>
    1fb6:	00 c0       	rjmp	.+0      	; 0x1fb8 <m_wii_open+0x36>
    1fb8:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1fba:	88 e5       	ldi	r24, 0x58	; 88
    1fbc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    1fc0:	88 23       	and	r24, r24
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <m_wii_open+0x44>
    1fc4:	b3 c0       	rjmp	.+358    	; 0x212c <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <m_wii_open+0x50>
    1fd0:	af c0       	rjmp	.+350    	; 0x2130 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1fd8:	88 23       	and	r24, r24
    1fda:	09 f4       	brne	.+2      	; 0x1fde <m_wii_open+0x5c>
    1fdc:	ab c0       	rjmp	.+342    	; 0x2134 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <m_wii_open+0x68>
    1fe8:	a7 c0       	rjmp	.+334    	; 0x2138 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <m_wii_open+0x74>
    1ff4:	a3 c0       	rjmp	.+326    	; 0x213c <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    1ffc:	88 23       	and	r24, r24
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <m_wii_open+0x80>
    2000:	9f c0       	rjmp	.+318    	; 0x2140 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2008:	88 23       	and	r24, r24
    200a:	09 f4       	brne	.+2      	; 0x200e <m_wii_open+0x8c>
    200c:	9b c0       	rjmp	.+310    	; 0x2144 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2014:	88 23       	and	r24, r24
    2016:	09 f4       	brne	.+2      	; 0x201a <m_wii_open+0x98>
    2018:	97 c0       	rjmp	.+302    	; 0x2148 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    201a:	80 e9       	ldi	r24, 0x90	; 144
    201c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2020:	88 23       	and	r24, r24
    2022:	09 f4       	brne	.+2      	; 0x2026 <m_wii_open+0xa4>
    2024:	93 c0       	rjmp	.+294    	; 0x214c <m_wii_open+0x1ca>
	end();
    2026:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
    202a:	83 ec       	ldi	r24, 0xC3	; 195
    202c:	99 e0       	ldi	r25, 0x09	; 9
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <m_wii_open+0xac>
    2032:	00 c0       	rjmp	.+0      	; 0x2034 <m_wii_open+0xb2>
    2034:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2036:	88 e5       	ldi	r24, 0x58	; 88
    2038:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    203c:	88 23       	and	r24, r24
    203e:	09 f4       	brne	.+2      	; 0x2042 <m_wii_open+0xc0>
    2040:	87 c0       	rjmp	.+270    	; 0x2150 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2042:	87 e0       	ldi	r24, 0x07	; 7
    2044:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2048:	88 23       	and	r24, r24
    204a:	09 f4       	brne	.+2      	; 0x204e <m_wii_open+0xcc>
    204c:	83 c0       	rjmp	.+262    	; 0x2154 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2054:	88 23       	and	r24, r24
    2056:	09 f4       	brne	.+2      	; 0x205a <m_wii_open+0xd8>
    2058:	7f c0       	rjmp	.+254    	; 0x2158 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    205a:	81 e4       	ldi	r24, 0x41	; 65
    205c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2060:	88 23       	and	r24, r24
    2062:	09 f4       	brne	.+2      	; 0x2066 <m_wii_open+0xe4>
    2064:	7b c0       	rjmp	.+246    	; 0x215c <m_wii_open+0x1da>
	end();
    2066:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
    206a:	83 ec       	ldi	r24, 0xC3	; 195
    206c:	99 e0       	ldi	r25, 0x09	; 9
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <m_wii_open+0xec>
    2072:	00 c0       	rjmp	.+0      	; 0x2074 <m_wii_open+0xf2>
    2074:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2076:	88 e5       	ldi	r24, 0x58	; 88
    2078:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    207c:	88 23       	and	r24, r24
    207e:	09 f4       	brne	.+2      	; 0x2082 <m_wii_open+0x100>
    2080:	6f c0       	rjmp	.+222    	; 0x2160 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    2082:	8a e1       	ldi	r24, 0x1A	; 26
    2084:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2088:	88 23       	and	r24, r24
    208a:	09 f4       	brne	.+2      	; 0x208e <m_wii_open+0x10c>
    208c:	6b c0       	rjmp	.+214    	; 0x2164 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    208e:	80 e4       	ldi	r24, 0x40	; 64
    2090:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2094:	88 23       	and	r24, r24
    2096:	09 f4       	brne	.+2      	; 0x209a <m_wii_open+0x118>
    2098:	67 c0       	rjmp	.+206    	; 0x2168 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    20a0:	88 23       	and	r24, r24
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <m_wii_open+0x124>
    20a4:	63 c0       	rjmp	.+198    	; 0x216c <m_wii_open+0x1ea>
	end();
    20a6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
    20aa:	83 ec       	ldi	r24, 0xC3	; 195
    20ac:	99 e0       	ldi	r25, 0x09	; 9
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <m_wii_open+0x12c>
    20b2:	00 c0       	rjmp	.+0      	; 0x20b4 <m_wii_open+0x132>
    20b4:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20b6:	88 e5       	ldi	r24, 0x58	; 88
    20b8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    20bc:	88 23       	and	r24, r24
    20be:	09 f4       	brne	.+2      	; 0x20c2 <m_wii_open+0x140>
    20c0:	57 c0       	rjmp	.+174    	; 0x2170 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    20c2:	83 e3       	ldi	r24, 0x33	; 51
    20c4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    20c8:	88 23       	and	r24, r24
    20ca:	09 f4       	brne	.+2      	; 0x20ce <m_wii_open+0x14c>
    20cc:	53 c0       	rjmp	.+166    	; 0x2174 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    20d4:	88 23       	and	r24, r24
    20d6:	09 f4       	brne	.+2      	; 0x20da <m_wii_open+0x158>
    20d8:	4f c0       	rjmp	.+158    	; 0x2178 <m_wii_open+0x1f6>
	end();
    20da:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
    20de:	83 ec       	ldi	r24, 0xC3	; 195
    20e0:	99 e0       	ldi	r25, 0x09	; 9
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <m_wii_open+0x160>
    20e6:	00 c0       	rjmp	.+0      	; 0x20e8 <m_wii_open+0x166>
    20e8:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20ea:	88 e5       	ldi	r24, 0x58	; 88
    20ec:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <start_write>
    20f0:	88 23       	and	r24, r24
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <m_wii_open+0x174>
    20f4:	43 c0       	rjmp	.+134    	; 0x217c <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    20f6:	80 e3       	ldi	r24, 0x30	; 48
    20f8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    20fc:	88 23       	and	r24, r24
    20fe:	09 f4       	brne	.+2      	; 0x2102 <m_wii_open+0x180>
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2102:	88 e0       	ldi	r24, 0x08	; 8
    2104:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <send_byte>
    2108:	88 23       	and	r24, r24
    210a:	e1 f1       	breq	.+120    	; 0x2184 <m_wii_open+0x202>
	end();
    210c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <end>
    2110:	83 ec       	ldi	r24, 0xC3	; 195
    2112:	99 e0       	ldi	r25, 0x09	; 9
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <m_wii_open+0x192>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <m_wii_open+0x198>
    211a:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2184:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2186:	08 95       	ret

00002188 <__subsf3>:
    2188:	50 58       	subi	r21, 0x80	; 128

0000218a <__addsf3>:
    218a:	bb 27       	eor	r27, r27
    218c:	aa 27       	eor	r26, r26
    218e:	0e d0       	rcall	.+28     	; 0x21ac <__addsf3x>
    2190:	27 c2       	rjmp	.+1102   	; 0x25e0 <__fp_round>
    2192:	f0 d1       	rcall	.+992    	; 0x2574 <__fp_pscA>
    2194:	30 f0       	brcs	.+12     	; 0x21a2 <__addsf3+0x18>
    2196:	f5 d1       	rcall	.+1002   	; 0x2582 <__fp_pscB>
    2198:	20 f0       	brcs	.+8      	; 0x21a2 <__addsf3+0x18>
    219a:	31 f4       	brne	.+12     	; 0x21a8 <__addsf3+0x1e>
    219c:	9f 3f       	cpi	r25, 0xFF	; 255
    219e:	11 f4       	brne	.+4      	; 0x21a4 <__addsf3+0x1a>
    21a0:	1e f4       	brtc	.+6      	; 0x21a8 <__addsf3+0x1e>
    21a2:	c0 c1       	rjmp	.+896    	; 0x2524 <__fp_nan>
    21a4:	0e f4       	brtc	.+2      	; 0x21a8 <__addsf3+0x1e>
    21a6:	e0 95       	com	r30
    21a8:	e7 fb       	bst	r30, 7
    21aa:	b6 c1       	rjmp	.+876    	; 0x2518 <__fp_inf>

000021ac <__addsf3x>:
    21ac:	e9 2f       	mov	r30, r25
    21ae:	3a d2       	rcall	.+1140   	; 0x2624 <__fp_split3>
    21b0:	80 f3       	brcs	.-32     	; 0x2192 <__addsf3+0x8>
    21b2:	ba 17       	cp	r27, r26
    21b4:	62 07       	cpc	r22, r18
    21b6:	73 07       	cpc	r23, r19
    21b8:	84 07       	cpc	r24, r20
    21ba:	95 07       	cpc	r25, r21
    21bc:	18 f0       	brcs	.+6      	; 0x21c4 <__addsf3x+0x18>
    21be:	71 f4       	brne	.+28     	; 0x21dc <__addsf3x+0x30>
    21c0:	9e f5       	brtc	.+102    	; 0x2228 <__addsf3x+0x7c>
    21c2:	52 c2       	rjmp	.+1188   	; 0x2668 <__fp_zero>
    21c4:	0e f4       	brtc	.+2      	; 0x21c8 <__addsf3x+0x1c>
    21c6:	e0 95       	com	r30
    21c8:	0b 2e       	mov	r0, r27
    21ca:	ba 2f       	mov	r27, r26
    21cc:	a0 2d       	mov	r26, r0
    21ce:	0b 01       	movw	r0, r22
    21d0:	b9 01       	movw	r22, r18
    21d2:	90 01       	movw	r18, r0
    21d4:	0c 01       	movw	r0, r24
    21d6:	ca 01       	movw	r24, r20
    21d8:	a0 01       	movw	r20, r0
    21da:	11 24       	eor	r1, r1
    21dc:	ff 27       	eor	r31, r31
    21de:	59 1b       	sub	r21, r25
    21e0:	99 f0       	breq	.+38     	; 0x2208 <__addsf3x+0x5c>
    21e2:	59 3f       	cpi	r21, 0xF9	; 249
    21e4:	50 f4       	brcc	.+20     	; 0x21fa <__addsf3x+0x4e>
    21e6:	50 3e       	cpi	r21, 0xE0	; 224
    21e8:	68 f1       	brcs	.+90     	; 0x2244 <__addsf3x+0x98>
    21ea:	1a 16       	cp	r1, r26
    21ec:	f0 40       	sbci	r31, 0x00	; 0
    21ee:	a2 2f       	mov	r26, r18
    21f0:	23 2f       	mov	r18, r19
    21f2:	34 2f       	mov	r19, r20
    21f4:	44 27       	eor	r20, r20
    21f6:	58 5f       	subi	r21, 0xF8	; 248
    21f8:	f3 cf       	rjmp	.-26     	; 0x21e0 <__addsf3x+0x34>
    21fa:	46 95       	lsr	r20
    21fc:	37 95       	ror	r19
    21fe:	27 95       	ror	r18
    2200:	a7 95       	ror	r26
    2202:	f0 40       	sbci	r31, 0x00	; 0
    2204:	53 95       	inc	r21
    2206:	c9 f7       	brne	.-14     	; 0x21fa <__addsf3x+0x4e>
    2208:	7e f4       	brtc	.+30     	; 0x2228 <__addsf3x+0x7c>
    220a:	1f 16       	cp	r1, r31
    220c:	ba 0b       	sbc	r27, r26
    220e:	62 0b       	sbc	r22, r18
    2210:	73 0b       	sbc	r23, r19
    2212:	84 0b       	sbc	r24, r20
    2214:	ba f0       	brmi	.+46     	; 0x2244 <__addsf3x+0x98>
    2216:	91 50       	subi	r25, 0x01	; 1
    2218:	a1 f0       	breq	.+40     	; 0x2242 <__addsf3x+0x96>
    221a:	ff 0f       	add	r31, r31
    221c:	bb 1f       	adc	r27, r27
    221e:	66 1f       	adc	r22, r22
    2220:	77 1f       	adc	r23, r23
    2222:	88 1f       	adc	r24, r24
    2224:	c2 f7       	brpl	.-16     	; 0x2216 <__addsf3x+0x6a>
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <__addsf3x+0x98>
    2228:	ba 0f       	add	r27, r26
    222a:	62 1f       	adc	r22, r18
    222c:	73 1f       	adc	r23, r19
    222e:	84 1f       	adc	r24, r20
    2230:	48 f4       	brcc	.+18     	; 0x2244 <__addsf3x+0x98>
    2232:	87 95       	ror	r24
    2234:	77 95       	ror	r23
    2236:	67 95       	ror	r22
    2238:	b7 95       	ror	r27
    223a:	f7 95       	ror	r31
    223c:	9e 3f       	cpi	r25, 0xFE	; 254
    223e:	08 f0       	brcs	.+2      	; 0x2242 <__addsf3x+0x96>
    2240:	b3 cf       	rjmp	.-154    	; 0x21a8 <__addsf3+0x1e>
    2242:	93 95       	inc	r25
    2244:	88 0f       	add	r24, r24
    2246:	08 f0       	brcs	.+2      	; 0x224a <__addsf3x+0x9e>
    2248:	99 27       	eor	r25, r25
    224a:	ee 0f       	add	r30, r30
    224c:	97 95       	ror	r25
    224e:	87 95       	ror	r24
    2250:	08 95       	ret
    2252:	90 d1       	rcall	.+800    	; 0x2574 <__fp_pscA>
    2254:	58 f0       	brcs	.+22     	; 0x226c <__addsf3x+0xc0>
    2256:	80 e8       	ldi	r24, 0x80	; 128
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	09 f4       	brne	.+2      	; 0x225e <__addsf3x+0xb2>
    225c:	9e ef       	ldi	r25, 0xFE	; 254
    225e:	91 d1       	rcall	.+802    	; 0x2582 <__fp_pscB>
    2260:	28 f0       	brcs	.+10     	; 0x226c <__addsf3x+0xc0>
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	51 e0       	ldi	r21, 0x01	; 1
    2266:	59 f4       	brne	.+22     	; 0x227e <atan2+0xe>
    2268:	5e ef       	ldi	r21, 0xFE	; 254
    226a:	09 c0       	rjmp	.+18     	; 0x227e <atan2+0xe>
    226c:	5b c1       	rjmp	.+694    	; 0x2524 <__fp_nan>
    226e:	fc c1       	rjmp	.+1016   	; 0x2668 <__fp_zero>

00002270 <atan2>:
    2270:	e9 2f       	mov	r30, r25
    2272:	e0 78       	andi	r30, 0x80	; 128
    2274:	d7 d1       	rcall	.+942    	; 0x2624 <__fp_split3>
    2276:	68 f3       	brcs	.-38     	; 0x2252 <__addsf3x+0xa6>
    2278:	09 2e       	mov	r0, r25
    227a:	05 2a       	or	r0, r21
    227c:	c1 f3       	breq	.-16     	; 0x226e <__addsf3x+0xc2>
    227e:	26 17       	cp	r18, r22
    2280:	37 07       	cpc	r19, r23
    2282:	48 07       	cpc	r20, r24
    2284:	59 07       	cpc	r21, r25
    2286:	38 f0       	brcs	.+14     	; 0x2296 <atan2+0x26>
    2288:	0e 2e       	mov	r0, r30
    228a:	07 f8       	bld	r0, 7
    228c:	e0 25       	eor	r30, r0
    228e:	69 f0       	breq	.+26     	; 0x22aa <atan2+0x3a>
    2290:	e0 25       	eor	r30, r0
    2292:	e0 64       	ori	r30, 0x40	; 64
    2294:	0a c0       	rjmp	.+20     	; 0x22aa <atan2+0x3a>
    2296:	ef 63       	ori	r30, 0x3F	; 63
    2298:	07 f8       	bld	r0, 7
    229a:	00 94       	com	r0
    229c:	07 fa       	bst	r0, 7
    229e:	db 01       	movw	r26, r22
    22a0:	b9 01       	movw	r22, r18
    22a2:	9d 01       	movw	r18, r26
    22a4:	dc 01       	movw	r26, r24
    22a6:	ca 01       	movw	r24, r20
    22a8:	ad 01       	movw	r20, r26
    22aa:	ef 93       	push	r30
    22ac:	4a d0       	rcall	.+148    	; 0x2342 <__divsf3_pse>
    22ae:	98 d1       	rcall	.+816    	; 0x25e0 <__fp_round>
    22b0:	0a d0       	rcall	.+20     	; 0x22c6 <atan>
    22b2:	5f 91       	pop	r21
    22b4:	55 23       	and	r21, r21
    22b6:	31 f0       	breq	.+12     	; 0x22c4 <atan2+0x54>
    22b8:	2b ed       	ldi	r18, 0xDB	; 219
    22ba:	3f e0       	ldi	r19, 0x0F	; 15
    22bc:	49 e4       	ldi	r20, 0x49	; 73
    22be:	50 fd       	sbrc	r21, 0
    22c0:	49 ec       	ldi	r20, 0xC9	; 201
    22c2:	63 cf       	rjmp	.-314    	; 0x218a <__addsf3>
    22c4:	08 95       	ret

000022c6 <atan>:
    22c6:	df 93       	push	r29
    22c8:	dd 27       	eor	r29, r29
    22ca:	b9 2f       	mov	r27, r25
    22cc:	bf 77       	andi	r27, 0x7F	; 127
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	16 16       	cp	r1, r22
    22d4:	17 06       	cpc	r1, r23
    22d6:	48 07       	cpc	r20, r24
    22d8:	5b 07       	cpc	r21, r27
    22da:	10 f4       	brcc	.+4      	; 0x22e0 <atan+0x1a>
    22dc:	d9 2f       	mov	r29, r25
    22de:	cf d1       	rcall	.+926    	; 0x267e <inverse>
    22e0:	9f 93       	push	r25
    22e2:	8f 93       	push	r24
    22e4:	7f 93       	push	r23
    22e6:	6f 93       	push	r22
    22e8:	7c d2       	rcall	.+1272   	; 0x27e2 <square>
    22ea:	ec ea       	ldi	r30, 0xAC	; 172
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	1d d1       	rcall	.+570    	; 0x252a <__fp_powser>
    22f0:	77 d1       	rcall	.+750    	; 0x25e0 <__fp_round>
    22f2:	2f 91       	pop	r18
    22f4:	3f 91       	pop	r19
    22f6:	4f 91       	pop	r20
    22f8:	5f 91       	pop	r21
    22fa:	d4 d1       	rcall	.+936    	; 0x26a4 <__mulsf3x>
    22fc:	dd 23       	and	r29, r29
    22fe:	49 f0       	breq	.+18     	; 0x2312 <atan+0x4c>
    2300:	90 58       	subi	r25, 0x80	; 128
    2302:	a2 ea       	ldi	r26, 0xA2	; 162
    2304:	2a ed       	ldi	r18, 0xDA	; 218
    2306:	3f e0       	ldi	r19, 0x0F	; 15
    2308:	49 ec       	ldi	r20, 0xC9	; 201
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	d0 78       	andi	r29, 0x80	; 128
    230e:	5d 27       	eor	r21, r29
    2310:	4d df       	rcall	.-358    	; 0x21ac <__addsf3x>
    2312:	df 91       	pop	r29
    2314:	65 c1       	rjmp	.+714    	; 0x25e0 <__fp_round>

00002316 <__cmpsf2>:
    2316:	dc d0       	rcall	.+440    	; 0x24d0 <__fp_cmp>
    2318:	08 f4       	brcc	.+2      	; 0x231c <__cmpsf2+0x6>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	08 95       	ret

0000231e <cos>:
    231e:	39 d1       	rcall	.+626    	; 0x2592 <__fp_rempio2>
    2320:	e3 95       	inc	r30
    2322:	6f c1       	rjmp	.+734    	; 0x2602 <__fp_sinus>

00002324 <__divsf3>:
    2324:	0c d0       	rcall	.+24     	; 0x233e <__divsf3x>
    2326:	5c c1       	rjmp	.+696    	; 0x25e0 <__fp_round>
    2328:	2c d1       	rcall	.+600    	; 0x2582 <__fp_pscB>
    232a:	40 f0       	brcs	.+16     	; 0x233c <__divsf3+0x18>
    232c:	23 d1       	rcall	.+582    	; 0x2574 <__fp_pscA>
    232e:	30 f0       	brcs	.+12     	; 0x233c <__divsf3+0x18>
    2330:	21 f4       	brne	.+8      	; 0x233a <__divsf3+0x16>
    2332:	5f 3f       	cpi	r21, 0xFF	; 255
    2334:	19 f0       	breq	.+6      	; 0x233c <__divsf3+0x18>
    2336:	f0 c0       	rjmp	.+480    	; 0x2518 <__fp_inf>
    2338:	51 11       	cpse	r21, r1
    233a:	97 c1       	rjmp	.+814    	; 0x266a <__fp_szero>
    233c:	f3 c0       	rjmp	.+486    	; 0x2524 <__fp_nan>

0000233e <__divsf3x>:
    233e:	72 d1       	rcall	.+740    	; 0x2624 <__fp_split3>
    2340:	98 f3       	brcs	.-26     	; 0x2328 <__divsf3+0x4>

00002342 <__divsf3_pse>:
    2342:	99 23       	and	r25, r25
    2344:	c9 f3       	breq	.-14     	; 0x2338 <__divsf3+0x14>
    2346:	55 23       	and	r21, r21
    2348:	b1 f3       	breq	.-20     	; 0x2336 <__divsf3+0x12>
    234a:	95 1b       	sub	r25, r21
    234c:	55 0b       	sbc	r21, r21
    234e:	bb 27       	eor	r27, r27
    2350:	aa 27       	eor	r26, r26
    2352:	62 17       	cp	r22, r18
    2354:	73 07       	cpc	r23, r19
    2356:	84 07       	cpc	r24, r20
    2358:	38 f0       	brcs	.+14     	; 0x2368 <__divsf3_pse+0x26>
    235a:	9f 5f       	subi	r25, 0xFF	; 255
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	22 0f       	add	r18, r18
    2360:	33 1f       	adc	r19, r19
    2362:	44 1f       	adc	r20, r20
    2364:	aa 1f       	adc	r26, r26
    2366:	a9 f3       	breq	.-22     	; 0x2352 <__divsf3_pse+0x10>
    2368:	33 d0       	rcall	.+102    	; 0x23d0 <__divsf3_pse+0x8e>
    236a:	0e 2e       	mov	r0, r30
    236c:	3a f0       	brmi	.+14     	; 0x237c <__divsf3_pse+0x3a>
    236e:	e0 e8       	ldi	r30, 0x80	; 128
    2370:	30 d0       	rcall	.+96     	; 0x23d2 <__divsf3_pse+0x90>
    2372:	91 50       	subi	r25, 0x01	; 1
    2374:	50 40       	sbci	r21, 0x00	; 0
    2376:	e6 95       	lsr	r30
    2378:	00 1c       	adc	r0, r0
    237a:	ca f7       	brpl	.-14     	; 0x236e <__divsf3_pse+0x2c>
    237c:	29 d0       	rcall	.+82     	; 0x23d0 <__divsf3_pse+0x8e>
    237e:	fe 2f       	mov	r31, r30
    2380:	27 d0       	rcall	.+78     	; 0x23d0 <__divsf3_pse+0x8e>
    2382:	66 0f       	add	r22, r22
    2384:	77 1f       	adc	r23, r23
    2386:	88 1f       	adc	r24, r24
    2388:	bb 1f       	adc	r27, r27
    238a:	26 17       	cp	r18, r22
    238c:	37 07       	cpc	r19, r23
    238e:	48 07       	cpc	r20, r24
    2390:	ab 07       	cpc	r26, r27
    2392:	b0 e8       	ldi	r27, 0x80	; 128
    2394:	09 f0       	breq	.+2      	; 0x2398 <__divsf3_pse+0x56>
    2396:	bb 0b       	sbc	r27, r27
    2398:	80 2d       	mov	r24, r0
    239a:	bf 01       	movw	r22, r30
    239c:	ff 27       	eor	r31, r31
    239e:	93 58       	subi	r25, 0x83	; 131
    23a0:	5f 4f       	sbci	r21, 0xFF	; 255
    23a2:	2a f0       	brmi	.+10     	; 0x23ae <__divsf3_pse+0x6c>
    23a4:	9e 3f       	cpi	r25, 0xFE	; 254
    23a6:	51 05       	cpc	r21, r1
    23a8:	68 f0       	brcs	.+26     	; 0x23c4 <__divsf3_pse+0x82>
    23aa:	b6 c0       	rjmp	.+364    	; 0x2518 <__fp_inf>
    23ac:	5e c1       	rjmp	.+700    	; 0x266a <__fp_szero>
    23ae:	5f 3f       	cpi	r21, 0xFF	; 255
    23b0:	ec f3       	brlt	.-6      	; 0x23ac <__divsf3_pse+0x6a>
    23b2:	98 3e       	cpi	r25, 0xE8	; 232
    23b4:	dc f3       	brlt	.-10     	; 0x23ac <__divsf3_pse+0x6a>
    23b6:	86 95       	lsr	r24
    23b8:	77 95       	ror	r23
    23ba:	67 95       	ror	r22
    23bc:	b7 95       	ror	r27
    23be:	f7 95       	ror	r31
    23c0:	9f 5f       	subi	r25, 0xFF	; 255
    23c2:	c9 f7       	brne	.-14     	; 0x23b6 <__divsf3_pse+0x74>
    23c4:	88 0f       	add	r24, r24
    23c6:	91 1d       	adc	r25, r1
    23c8:	96 95       	lsr	r25
    23ca:	87 95       	ror	r24
    23cc:	97 f9       	bld	r25, 7
    23ce:	08 95       	ret
    23d0:	e1 e0       	ldi	r30, 0x01	; 1
    23d2:	66 0f       	add	r22, r22
    23d4:	77 1f       	adc	r23, r23
    23d6:	88 1f       	adc	r24, r24
    23d8:	bb 1f       	adc	r27, r27
    23da:	62 17       	cp	r22, r18
    23dc:	73 07       	cpc	r23, r19
    23de:	84 07       	cpc	r24, r20
    23e0:	ba 07       	cpc	r27, r26
    23e2:	20 f0       	brcs	.+8      	; 0x23ec <__divsf3_pse+0xaa>
    23e4:	62 1b       	sub	r22, r18
    23e6:	73 0b       	sbc	r23, r19
    23e8:	84 0b       	sbc	r24, r20
    23ea:	ba 0b       	sbc	r27, r26
    23ec:	ee 1f       	adc	r30, r30
    23ee:	88 f7       	brcc	.-30     	; 0x23d2 <__divsf3_pse+0x90>
    23f0:	e0 95       	com	r30
    23f2:	08 95       	ret

000023f4 <__fixsfsi>:
    23f4:	04 d0       	rcall	.+8      	; 0x23fe <__fixunssfsi>
    23f6:	68 94       	set
    23f8:	b1 11       	cpse	r27, r1
    23fa:	37 c1       	rjmp	.+622    	; 0x266a <__fp_szero>
    23fc:	08 95       	ret

000023fe <__fixunssfsi>:
    23fe:	1a d1       	rcall	.+564    	; 0x2634 <__fp_splitA>
    2400:	88 f0       	brcs	.+34     	; 0x2424 <__fixunssfsi+0x26>
    2402:	9f 57       	subi	r25, 0x7F	; 127
    2404:	90 f0       	brcs	.+36     	; 0x242a <__fixunssfsi+0x2c>
    2406:	b9 2f       	mov	r27, r25
    2408:	99 27       	eor	r25, r25
    240a:	b7 51       	subi	r27, 0x17	; 23
    240c:	a0 f0       	brcs	.+40     	; 0x2436 <__fixunssfsi+0x38>
    240e:	d1 f0       	breq	.+52     	; 0x2444 <__fixunssfsi+0x46>
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	1a f0       	brmi	.+6      	; 0x2420 <__fixunssfsi+0x22>
    241a:	ba 95       	dec	r27
    241c:	c9 f7       	brne	.-14     	; 0x2410 <__fixunssfsi+0x12>
    241e:	12 c0       	rjmp	.+36     	; 0x2444 <__fixunssfsi+0x46>
    2420:	b1 30       	cpi	r27, 0x01	; 1
    2422:	81 f0       	breq	.+32     	; 0x2444 <__fixunssfsi+0x46>
    2424:	21 d1       	rcall	.+578    	; 0x2668 <__fp_zero>
    2426:	b1 e0       	ldi	r27, 0x01	; 1
    2428:	08 95       	ret
    242a:	1e c1       	rjmp	.+572    	; 0x2668 <__fp_zero>
    242c:	67 2f       	mov	r22, r23
    242e:	78 2f       	mov	r23, r24
    2430:	88 27       	eor	r24, r24
    2432:	b8 5f       	subi	r27, 0xF8	; 248
    2434:	39 f0       	breq	.+14     	; 0x2444 <__fixunssfsi+0x46>
    2436:	b9 3f       	cpi	r27, 0xF9	; 249
    2438:	cc f3       	brlt	.-14     	; 0x242c <__fixunssfsi+0x2e>
    243a:	86 95       	lsr	r24
    243c:	77 95       	ror	r23
    243e:	67 95       	ror	r22
    2440:	b3 95       	inc	r27
    2442:	d9 f7       	brne	.-10     	; 0x243a <__fixunssfsi+0x3c>
    2444:	3e f4       	brtc	.+14     	; 0x2454 <__fixunssfsi+0x56>
    2446:	90 95       	com	r25
    2448:	80 95       	com	r24
    244a:	70 95       	com	r23
    244c:	61 95       	neg	r22
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	08 95       	ret

00002456 <__floatunsisf>:
    2456:	e8 94       	clt
    2458:	09 c0       	rjmp	.+18     	; 0x246c <__floatsisf+0x12>

0000245a <__floatsisf>:
    245a:	97 fb       	bst	r25, 7
    245c:	3e f4       	brtc	.+14     	; 0x246c <__floatsisf+0x12>
    245e:	90 95       	com	r25
    2460:	80 95       	com	r24
    2462:	70 95       	com	r23
    2464:	61 95       	neg	r22
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	8f 4f       	sbci	r24, 0xFF	; 255
    246a:	9f 4f       	sbci	r25, 0xFF	; 255
    246c:	99 23       	and	r25, r25
    246e:	a9 f0       	breq	.+42     	; 0x249a <__floatsisf+0x40>
    2470:	f9 2f       	mov	r31, r25
    2472:	96 e9       	ldi	r25, 0x96	; 150
    2474:	bb 27       	eor	r27, r27
    2476:	93 95       	inc	r25
    2478:	f6 95       	lsr	r31
    247a:	87 95       	ror	r24
    247c:	77 95       	ror	r23
    247e:	67 95       	ror	r22
    2480:	b7 95       	ror	r27
    2482:	f1 11       	cpse	r31, r1
    2484:	f8 cf       	rjmp	.-16     	; 0x2476 <__floatsisf+0x1c>
    2486:	fa f4       	brpl	.+62     	; 0x24c6 <__floatsisf+0x6c>
    2488:	bb 0f       	add	r27, r27
    248a:	11 f4       	brne	.+4      	; 0x2490 <__floatsisf+0x36>
    248c:	60 ff       	sbrs	r22, 0
    248e:	1b c0       	rjmp	.+54     	; 0x24c6 <__floatsisf+0x6c>
    2490:	6f 5f       	subi	r22, 0xFF	; 255
    2492:	7f 4f       	sbci	r23, 0xFF	; 255
    2494:	8f 4f       	sbci	r24, 0xFF	; 255
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	16 c0       	rjmp	.+44     	; 0x24c6 <__floatsisf+0x6c>
    249a:	88 23       	and	r24, r24
    249c:	11 f0       	breq	.+4      	; 0x24a2 <__floatsisf+0x48>
    249e:	96 e9       	ldi	r25, 0x96	; 150
    24a0:	11 c0       	rjmp	.+34     	; 0x24c4 <__floatsisf+0x6a>
    24a2:	77 23       	and	r23, r23
    24a4:	21 f0       	breq	.+8      	; 0x24ae <__floatsisf+0x54>
    24a6:	9e e8       	ldi	r25, 0x8E	; 142
    24a8:	87 2f       	mov	r24, r23
    24aa:	76 2f       	mov	r23, r22
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <__floatsisf+0x5e>
    24ae:	66 23       	and	r22, r22
    24b0:	71 f0       	breq	.+28     	; 0x24ce <__floatsisf+0x74>
    24b2:	96 e8       	ldi	r25, 0x86	; 134
    24b4:	86 2f       	mov	r24, r22
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	2a f0       	brmi	.+10     	; 0x24c6 <__floatsisf+0x6c>
    24bc:	9a 95       	dec	r25
    24be:	66 0f       	add	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	da f7       	brpl	.-10     	; 0x24bc <__floatsisf+0x62>
    24c6:	88 0f       	add	r24, r24
    24c8:	96 95       	lsr	r25
    24ca:	87 95       	ror	r24
    24cc:	97 f9       	bld	r25, 7
    24ce:	08 95       	ret

000024d0 <__fp_cmp>:
    24d0:	99 0f       	add	r25, r25
    24d2:	00 08       	sbc	r0, r0
    24d4:	55 0f       	add	r21, r21
    24d6:	aa 0b       	sbc	r26, r26
    24d8:	e0 e8       	ldi	r30, 0x80	; 128
    24da:	fe ef       	ldi	r31, 0xFE	; 254
    24dc:	16 16       	cp	r1, r22
    24de:	17 06       	cpc	r1, r23
    24e0:	e8 07       	cpc	r30, r24
    24e2:	f9 07       	cpc	r31, r25
    24e4:	c0 f0       	brcs	.+48     	; 0x2516 <__fp_cmp+0x46>
    24e6:	12 16       	cp	r1, r18
    24e8:	13 06       	cpc	r1, r19
    24ea:	e4 07       	cpc	r30, r20
    24ec:	f5 07       	cpc	r31, r21
    24ee:	98 f0       	brcs	.+38     	; 0x2516 <__fp_cmp+0x46>
    24f0:	62 1b       	sub	r22, r18
    24f2:	73 0b       	sbc	r23, r19
    24f4:	84 0b       	sbc	r24, r20
    24f6:	95 0b       	sbc	r25, r21
    24f8:	39 f4       	brne	.+14     	; 0x2508 <__fp_cmp+0x38>
    24fa:	0a 26       	eor	r0, r26
    24fc:	61 f0       	breq	.+24     	; 0x2516 <__fp_cmp+0x46>
    24fe:	23 2b       	or	r18, r19
    2500:	24 2b       	or	r18, r20
    2502:	25 2b       	or	r18, r21
    2504:	21 f4       	brne	.+8      	; 0x250e <__fp_cmp+0x3e>
    2506:	08 95       	ret
    2508:	0a 26       	eor	r0, r26
    250a:	09 f4       	brne	.+2      	; 0x250e <__fp_cmp+0x3e>
    250c:	a1 40       	sbci	r26, 0x01	; 1
    250e:	a6 95       	lsr	r26
    2510:	8f ef       	ldi	r24, 0xFF	; 255
    2512:	81 1d       	adc	r24, r1
    2514:	81 1d       	adc	r24, r1
    2516:	08 95       	ret

00002518 <__fp_inf>:
    2518:	97 f9       	bld	r25, 7
    251a:	9f 67       	ori	r25, 0x7F	; 127
    251c:	80 e8       	ldi	r24, 0x80	; 128
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	08 95       	ret

00002524 <__fp_nan>:
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	80 ec       	ldi	r24, 0xC0	; 192
    2528:	08 95       	ret

0000252a <__fp_powser>:
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	1f 93       	push	r17
    2530:	0f 93       	push	r16
    2532:	ff 92       	push	r15
    2534:	ef 92       	push	r14
    2536:	df 92       	push	r13
    2538:	7b 01       	movw	r14, r22
    253a:	8c 01       	movw	r16, r24
    253c:	68 94       	set
    253e:	05 c0       	rjmp	.+10     	; 0x254a <__fp_powser+0x20>
    2540:	da 2e       	mov	r13, r26
    2542:	ef 01       	movw	r28, r30
    2544:	af d0       	rcall	.+350    	; 0x26a4 <__mulsf3x>
    2546:	fe 01       	movw	r30, r28
    2548:	e8 94       	clt
    254a:	a5 91       	lpm	r26, Z+
    254c:	25 91       	lpm	r18, Z+
    254e:	35 91       	lpm	r19, Z+
    2550:	45 91       	lpm	r20, Z+
    2552:	55 91       	lpm	r21, Z+
    2554:	ae f3       	brts	.-22     	; 0x2540 <__fp_powser+0x16>
    2556:	ef 01       	movw	r28, r30
    2558:	29 de       	rcall	.-942    	; 0x21ac <__addsf3x>
    255a:	fe 01       	movw	r30, r28
    255c:	97 01       	movw	r18, r14
    255e:	a8 01       	movw	r20, r16
    2560:	da 94       	dec	r13
    2562:	79 f7       	brne	.-34     	; 0x2542 <__fp_powser+0x18>
    2564:	df 90       	pop	r13
    2566:	ef 90       	pop	r14
    2568:	ff 90       	pop	r15
    256a:	0f 91       	pop	r16
    256c:	1f 91       	pop	r17
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <__fp_pscA>:
    2574:	00 24       	eor	r0, r0
    2576:	0a 94       	dec	r0
    2578:	16 16       	cp	r1, r22
    257a:	17 06       	cpc	r1, r23
    257c:	18 06       	cpc	r1, r24
    257e:	09 06       	cpc	r0, r25
    2580:	08 95       	ret

00002582 <__fp_pscB>:
    2582:	00 24       	eor	r0, r0
    2584:	0a 94       	dec	r0
    2586:	12 16       	cp	r1, r18
    2588:	13 06       	cpc	r1, r19
    258a:	14 06       	cpc	r1, r20
    258c:	05 06       	cpc	r0, r21
    258e:	08 95       	ret
    2590:	c9 cf       	rjmp	.-110    	; 0x2524 <__fp_nan>

00002592 <__fp_rempio2>:
    2592:	50 d0       	rcall	.+160    	; 0x2634 <__fp_splitA>
    2594:	e8 f3       	brcs	.-6      	; 0x2590 <__fp_pscB+0xe>
    2596:	e8 94       	clt
    2598:	e0 e0       	ldi	r30, 0x00	; 0
    259a:	bb 27       	eor	r27, r27
    259c:	9f 57       	subi	r25, 0x7F	; 127
    259e:	f0 f0       	brcs	.+60     	; 0x25dc <__fp_rempio2+0x4a>
    25a0:	2a ed       	ldi	r18, 0xDA	; 218
    25a2:	3f e0       	ldi	r19, 0x0F	; 15
    25a4:	49 ec       	ldi	r20, 0xC9	; 201
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <__fp_rempio2+0x22>
    25a8:	ee 0f       	add	r30, r30
    25aa:	bb 0f       	add	r27, r27
    25ac:	66 1f       	adc	r22, r22
    25ae:	77 1f       	adc	r23, r23
    25b0:	88 1f       	adc	r24, r24
    25b2:	28 f0       	brcs	.+10     	; 0x25be <__fp_rempio2+0x2c>
    25b4:	b2 3a       	cpi	r27, 0xA2	; 162
    25b6:	62 07       	cpc	r22, r18
    25b8:	73 07       	cpc	r23, r19
    25ba:	84 07       	cpc	r24, r20
    25bc:	28 f0       	brcs	.+10     	; 0x25c8 <__fp_rempio2+0x36>
    25be:	b2 5a       	subi	r27, 0xA2	; 162
    25c0:	62 0b       	sbc	r22, r18
    25c2:	73 0b       	sbc	r23, r19
    25c4:	84 0b       	sbc	r24, r20
    25c6:	e3 95       	inc	r30
    25c8:	9a 95       	dec	r25
    25ca:	72 f7       	brpl	.-36     	; 0x25a8 <__fp_rempio2+0x16>
    25cc:	80 38       	cpi	r24, 0x80	; 128
    25ce:	30 f4       	brcc	.+12     	; 0x25dc <__fp_rempio2+0x4a>
    25d0:	9a 95       	dec	r25
    25d2:	bb 0f       	add	r27, r27
    25d4:	66 1f       	adc	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	88 1f       	adc	r24, r24
    25da:	d2 f7       	brpl	.-12     	; 0x25d0 <__fp_rempio2+0x3e>
    25dc:	90 48       	sbci	r25, 0x80	; 128
    25de:	06 c1       	rjmp	.+524    	; 0x27ec <__fp_mpack_finite>

000025e0 <__fp_round>:
    25e0:	09 2e       	mov	r0, r25
    25e2:	03 94       	inc	r0
    25e4:	00 0c       	add	r0, r0
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__fp_round+0xc>
    25e8:	88 23       	and	r24, r24
    25ea:	52 f0       	brmi	.+20     	; 0x2600 <__fp_round+0x20>
    25ec:	bb 0f       	add	r27, r27
    25ee:	40 f4       	brcc	.+16     	; 0x2600 <__fp_round+0x20>
    25f0:	bf 2b       	or	r27, r31
    25f2:	11 f4       	brne	.+4      	; 0x25f8 <__fp_round+0x18>
    25f4:	60 ff       	sbrs	r22, 0
    25f6:	04 c0       	rjmp	.+8      	; 0x2600 <__fp_round+0x20>
    25f8:	6f 5f       	subi	r22, 0xFF	; 255
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	8f 4f       	sbci	r24, 0xFF	; 255
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	08 95       	ret

00002602 <__fp_sinus>:
    2602:	ef 93       	push	r30
    2604:	e0 ff       	sbrs	r30, 0
    2606:	06 c0       	rjmp	.+12     	; 0x2614 <__fp_sinus+0x12>
    2608:	a2 ea       	ldi	r26, 0xA2	; 162
    260a:	2a ed       	ldi	r18, 0xDA	; 218
    260c:	3f e0       	ldi	r19, 0x0F	; 15
    260e:	49 ec       	ldi	r20, 0xC9	; 201
    2610:	5f eb       	ldi	r21, 0xBF	; 191
    2612:	cc dd       	rcall	.-1128   	; 0x21ac <__addsf3x>
    2614:	e5 df       	rcall	.-54     	; 0x25e0 <__fp_round>
    2616:	0f 90       	pop	r0
    2618:	03 94       	inc	r0
    261a:	01 fc       	sbrc	r0, 1
    261c:	90 58       	subi	r25, 0x80	; 128
    261e:	e9 ed       	ldi	r30, 0xD9	; 217
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	f7 c0       	rjmp	.+494    	; 0x2812 <__fp_powsodd>

00002624 <__fp_split3>:
    2624:	57 fd       	sbrc	r21, 7
    2626:	90 58       	subi	r25, 0x80	; 128
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	59 f0       	breq	.+22     	; 0x2644 <__fp_splitA+0x10>
    262e:	5f 3f       	cpi	r21, 0xFF	; 255
    2630:	71 f0       	breq	.+28     	; 0x264e <__fp_splitA+0x1a>
    2632:	47 95       	ror	r20

00002634 <__fp_splitA>:
    2634:	88 0f       	add	r24, r24
    2636:	97 fb       	bst	r25, 7
    2638:	99 1f       	adc	r25, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <__fp_splitA+0x20>
    263c:	9f 3f       	cpi	r25, 0xFF	; 255
    263e:	79 f0       	breq	.+30     	; 0x265e <__fp_splitA+0x2a>
    2640:	87 95       	ror	r24
    2642:	08 95       	ret
    2644:	12 16       	cp	r1, r18
    2646:	13 06       	cpc	r1, r19
    2648:	14 06       	cpc	r1, r20
    264a:	55 1f       	adc	r21, r21
    264c:	f2 cf       	rjmp	.-28     	; 0x2632 <__fp_split3+0xe>
    264e:	46 95       	lsr	r20
    2650:	f1 df       	rcall	.-30     	; 0x2634 <__fp_splitA>
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <__fp_splitA+0x30>
    2654:	16 16       	cp	r1, r22
    2656:	17 06       	cpc	r1, r23
    2658:	18 06       	cpc	r1, r24
    265a:	99 1f       	adc	r25, r25
    265c:	f1 cf       	rjmp	.-30     	; 0x2640 <__fp_splitA+0xc>
    265e:	86 95       	lsr	r24
    2660:	71 05       	cpc	r23, r1
    2662:	61 05       	cpc	r22, r1
    2664:	08 94       	sec
    2666:	08 95       	ret

00002668 <__fp_zero>:
    2668:	e8 94       	clt

0000266a <__fp_szero>:
    266a:	bb 27       	eor	r27, r27
    266c:	66 27       	eor	r22, r22
    266e:	77 27       	eor	r23, r23
    2670:	cb 01       	movw	r24, r22
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret

00002676 <__gesf2>:
    2676:	2c df       	rcall	.-424    	; 0x24d0 <__fp_cmp>
    2678:	08 f4       	brcc	.+2      	; 0x267c <__gesf2+0x6>
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	08 95       	ret

0000267e <inverse>:
    267e:	9b 01       	movw	r18, r22
    2680:	ac 01       	movw	r20, r24
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	80 e8       	ldi	r24, 0x80	; 128
    2688:	9f e3       	ldi	r25, 0x3F	; 63
    268a:	4c ce       	rjmp	.-872    	; 0x2324 <__divsf3>

0000268c <__mulsf3>:
    268c:	0b d0       	rcall	.+22     	; 0x26a4 <__mulsf3x>
    268e:	a8 cf       	rjmp	.-176    	; 0x25e0 <__fp_round>
    2690:	71 df       	rcall	.-286    	; 0x2574 <__fp_pscA>
    2692:	28 f0       	brcs	.+10     	; 0x269e <__mulsf3+0x12>
    2694:	76 df       	rcall	.-276    	; 0x2582 <__fp_pscB>
    2696:	18 f0       	brcs	.+6      	; 0x269e <__mulsf3+0x12>
    2698:	95 23       	and	r25, r21
    269a:	09 f0       	breq	.+2      	; 0x269e <__mulsf3+0x12>
    269c:	3d cf       	rjmp	.-390    	; 0x2518 <__fp_inf>
    269e:	42 cf       	rjmp	.-380    	; 0x2524 <__fp_nan>
    26a0:	11 24       	eor	r1, r1
    26a2:	e3 cf       	rjmp	.-58     	; 0x266a <__fp_szero>

000026a4 <__mulsf3x>:
    26a4:	bf df       	rcall	.-130    	; 0x2624 <__fp_split3>
    26a6:	a0 f3       	brcs	.-24     	; 0x2690 <__mulsf3+0x4>

000026a8 <__mulsf3_pse>:
    26a8:	95 9f       	mul	r25, r21
    26aa:	d1 f3       	breq	.-12     	; 0x26a0 <__mulsf3+0x14>
    26ac:	95 0f       	add	r25, r21
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	55 1f       	adc	r21, r21
    26b2:	62 9f       	mul	r22, r18
    26b4:	f0 01       	movw	r30, r0
    26b6:	72 9f       	mul	r23, r18
    26b8:	bb 27       	eor	r27, r27
    26ba:	f0 0d       	add	r31, r0
    26bc:	b1 1d       	adc	r27, r1
    26be:	63 9f       	mul	r22, r19
    26c0:	aa 27       	eor	r26, r26
    26c2:	f0 0d       	add	r31, r0
    26c4:	b1 1d       	adc	r27, r1
    26c6:	aa 1f       	adc	r26, r26
    26c8:	64 9f       	mul	r22, r20
    26ca:	66 27       	eor	r22, r22
    26cc:	b0 0d       	add	r27, r0
    26ce:	a1 1d       	adc	r26, r1
    26d0:	66 1f       	adc	r22, r22
    26d2:	82 9f       	mul	r24, r18
    26d4:	22 27       	eor	r18, r18
    26d6:	b0 0d       	add	r27, r0
    26d8:	a1 1d       	adc	r26, r1
    26da:	62 1f       	adc	r22, r18
    26dc:	73 9f       	mul	r23, r19
    26de:	b0 0d       	add	r27, r0
    26e0:	a1 1d       	adc	r26, r1
    26e2:	62 1f       	adc	r22, r18
    26e4:	83 9f       	mul	r24, r19
    26e6:	a0 0d       	add	r26, r0
    26e8:	61 1d       	adc	r22, r1
    26ea:	22 1f       	adc	r18, r18
    26ec:	74 9f       	mul	r23, r20
    26ee:	33 27       	eor	r19, r19
    26f0:	a0 0d       	add	r26, r0
    26f2:	61 1d       	adc	r22, r1
    26f4:	23 1f       	adc	r18, r19
    26f6:	84 9f       	mul	r24, r20
    26f8:	60 0d       	add	r22, r0
    26fa:	21 1d       	adc	r18, r1
    26fc:	82 2f       	mov	r24, r18
    26fe:	76 2f       	mov	r23, r22
    2700:	6a 2f       	mov	r22, r26
    2702:	11 24       	eor	r1, r1
    2704:	9f 57       	subi	r25, 0x7F	; 127
    2706:	50 40       	sbci	r21, 0x00	; 0
    2708:	8a f0       	brmi	.+34     	; 0x272c <__mulsf3_pse+0x84>
    270a:	e1 f0       	breq	.+56     	; 0x2744 <__mulsf3_pse+0x9c>
    270c:	88 23       	and	r24, r24
    270e:	4a f0       	brmi	.+18     	; 0x2722 <__mulsf3_pse+0x7a>
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	bb 1f       	adc	r27, r27
    2716:	66 1f       	adc	r22, r22
    2718:	77 1f       	adc	r23, r23
    271a:	88 1f       	adc	r24, r24
    271c:	91 50       	subi	r25, 0x01	; 1
    271e:	50 40       	sbci	r21, 0x00	; 0
    2720:	a9 f7       	brne	.-22     	; 0x270c <__mulsf3_pse+0x64>
    2722:	9e 3f       	cpi	r25, 0xFE	; 254
    2724:	51 05       	cpc	r21, r1
    2726:	70 f0       	brcs	.+28     	; 0x2744 <__mulsf3_pse+0x9c>
    2728:	f7 ce       	rjmp	.-530    	; 0x2518 <__fp_inf>
    272a:	9f cf       	rjmp	.-194    	; 0x266a <__fp_szero>
    272c:	5f 3f       	cpi	r21, 0xFF	; 255
    272e:	ec f3       	brlt	.-6      	; 0x272a <__mulsf3_pse+0x82>
    2730:	98 3e       	cpi	r25, 0xE8	; 232
    2732:	dc f3       	brlt	.-10     	; 0x272a <__mulsf3_pse+0x82>
    2734:	86 95       	lsr	r24
    2736:	77 95       	ror	r23
    2738:	67 95       	ror	r22
    273a:	b7 95       	ror	r27
    273c:	f7 95       	ror	r31
    273e:	e7 95       	ror	r30
    2740:	9f 5f       	subi	r25, 0xFF	; 255
    2742:	c1 f7       	brne	.-16     	; 0x2734 <__mulsf3_pse+0x8c>
    2744:	fe 2b       	or	r31, r30
    2746:	88 0f       	add	r24, r24
    2748:	91 1d       	adc	r25, r1
    274a:	96 95       	lsr	r25
    274c:	87 95       	ror	r24
    274e:	97 f9       	bld	r25, 7
    2750:	08 95       	ret

00002752 <sin>:
    2752:	9f 93       	push	r25
    2754:	1e df       	rcall	.-452    	; 0x2592 <__fp_rempio2>
    2756:	0f 90       	pop	r0
    2758:	07 fc       	sbrc	r0, 7
    275a:	ee 5f       	subi	r30, 0xFE	; 254
    275c:	52 cf       	rjmp	.-348    	; 0x2602 <__fp_sinus>
    275e:	11 f4       	brne	.+4      	; 0x2764 <sin+0x12>
    2760:	0e f4       	brtc	.+2      	; 0x2764 <sin+0x12>
    2762:	e0 ce       	rjmp	.-576    	; 0x2524 <__fp_nan>
    2764:	41 c0       	rjmp	.+130    	; 0x27e8 <__fp_mpack>

00002766 <sqrt>:
    2766:	66 df       	rcall	.-308    	; 0x2634 <__fp_splitA>
    2768:	d0 f3       	brcs	.-12     	; 0x275e <sin+0xc>
    276a:	99 23       	and	r25, r25
    276c:	d9 f3       	breq	.-10     	; 0x2764 <sin+0x12>
    276e:	ce f3       	brts	.-14     	; 0x2762 <sin+0x10>
    2770:	9f 57       	subi	r25, 0x7F	; 127
    2772:	55 0b       	sbc	r21, r21
    2774:	87 ff       	sbrs	r24, 7
    2776:	46 d0       	rcall	.+140    	; 0x2804 <__fp_norm2>
    2778:	00 24       	eor	r0, r0
    277a:	a0 e6       	ldi	r26, 0x60	; 96
    277c:	40 ea       	ldi	r20, 0xA0	; 160
    277e:	90 01       	movw	r18, r0
    2780:	80 58       	subi	r24, 0x80	; 128
    2782:	56 95       	lsr	r21
    2784:	97 95       	ror	r25
    2786:	28 f4       	brcc	.+10     	; 0x2792 <sqrt+0x2c>
    2788:	80 5c       	subi	r24, 0xC0	; 192
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	20 f0       	brcs	.+8      	; 0x279a <sqrt+0x34>
    2792:	26 17       	cp	r18, r22
    2794:	37 07       	cpc	r19, r23
    2796:	48 07       	cpc	r20, r24
    2798:	30 f4       	brcc	.+12     	; 0x27a6 <sqrt+0x40>
    279a:	62 1b       	sub	r22, r18
    279c:	73 0b       	sbc	r23, r19
    279e:	84 0b       	sbc	r24, r20
    27a0:	20 29       	or	r18, r0
    27a2:	31 29       	or	r19, r1
    27a4:	4a 2b       	or	r20, r26
    27a6:	a6 95       	lsr	r26
    27a8:	17 94       	ror	r1
    27aa:	07 94       	ror	r0
    27ac:	20 25       	eor	r18, r0
    27ae:	31 25       	eor	r19, r1
    27b0:	4a 27       	eor	r20, r26
    27b2:	58 f7       	brcc	.-42     	; 0x278a <sqrt+0x24>
    27b4:	66 0f       	add	r22, r22
    27b6:	77 1f       	adc	r23, r23
    27b8:	88 1f       	adc	r24, r24
    27ba:	20 f0       	brcs	.+8      	; 0x27c4 <sqrt+0x5e>
    27bc:	26 17       	cp	r18, r22
    27be:	37 07       	cpc	r19, r23
    27c0:	48 07       	cpc	r20, r24
    27c2:	30 f4       	brcc	.+12     	; 0x27d0 <sqrt+0x6a>
    27c4:	62 0b       	sbc	r22, r18
    27c6:	73 0b       	sbc	r23, r19
    27c8:	84 0b       	sbc	r24, r20
    27ca:	20 0d       	add	r18, r0
    27cc:	31 1d       	adc	r19, r1
    27ce:	41 1d       	adc	r20, r1
    27d0:	a0 95       	com	r26
    27d2:	81 f7       	brne	.-32     	; 0x27b4 <sqrt+0x4e>
    27d4:	b9 01       	movw	r22, r18
    27d6:	84 2f       	mov	r24, r20
    27d8:	91 58       	subi	r25, 0x81	; 129
    27da:	88 0f       	add	r24, r24
    27dc:	96 95       	lsr	r25
    27de:	87 95       	ror	r24
    27e0:	08 95       	ret

000027e2 <square>:
    27e2:	9b 01       	movw	r18, r22
    27e4:	ac 01       	movw	r20, r24
    27e6:	52 cf       	rjmp	.-348    	; 0x268c <__mulsf3>

000027e8 <__fp_mpack>:
    27e8:	9f 3f       	cpi	r25, 0xFF	; 255
    27ea:	31 f0       	breq	.+12     	; 0x27f8 <__fp_mpack_finite+0xc>

000027ec <__fp_mpack_finite>:
    27ec:	91 50       	subi	r25, 0x01	; 1
    27ee:	20 f4       	brcc	.+8      	; 0x27f8 <__fp_mpack_finite+0xc>
    27f0:	87 95       	ror	r24
    27f2:	77 95       	ror	r23
    27f4:	67 95       	ror	r22
    27f6:	b7 95       	ror	r27
    27f8:	88 0f       	add	r24, r24
    27fa:	91 1d       	adc	r25, r1
    27fc:	96 95       	lsr	r25
    27fe:	87 95       	ror	r24
    2800:	97 f9       	bld	r25, 7
    2802:	08 95       	ret

00002804 <__fp_norm2>:
    2804:	91 50       	subi	r25, 0x01	; 1
    2806:	50 40       	sbci	r21, 0x00	; 0
    2808:	66 0f       	add	r22, r22
    280a:	77 1f       	adc	r23, r23
    280c:	88 1f       	adc	r24, r24
    280e:	d2 f7       	brpl	.-12     	; 0x2804 <__fp_norm2>
    2810:	08 95       	ret

00002812 <__fp_powsodd>:
    2812:	9f 93       	push	r25
    2814:	8f 93       	push	r24
    2816:	7f 93       	push	r23
    2818:	6f 93       	push	r22
    281a:	ff 93       	push	r31
    281c:	ef 93       	push	r30
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	34 df       	rcall	.-408    	; 0x268c <__mulsf3>
    2824:	ef 91       	pop	r30
    2826:	ff 91       	pop	r31
    2828:	80 de       	rcall	.-768    	; 0x252a <__fp_powser>
    282a:	2f 91       	pop	r18
    282c:	3f 91       	pop	r19
    282e:	4f 91       	pop	r20
    2830:	5f 91       	pop	r21
    2832:	2c cf       	rjmp	.-424    	; 0x268c <__mulsf3>

00002834 <__umulhisi3>:
    2834:	a2 9f       	mul	r26, r18
    2836:	b0 01       	movw	r22, r0
    2838:	b3 9f       	mul	r27, r19
    283a:	c0 01       	movw	r24, r0
    283c:	a3 9f       	mul	r26, r19
    283e:	01 d0       	rcall	.+2      	; 0x2842 <__umulhisi3+0xe>
    2840:	b2 9f       	mul	r27, r18
    2842:	70 0d       	add	r23, r0
    2844:	81 1d       	adc	r24, r1
    2846:	11 24       	eor	r1, r1
    2848:	91 1d       	adc	r25, r1
    284a:	08 95       	ret

0000284c <itoa>:
    284c:	fb 01       	movw	r30, r22
    284e:	9f 01       	movw	r18, r30
    2850:	e8 94       	clt
    2852:	42 30       	cpi	r20, 0x02	; 2
    2854:	c4 f0       	brlt	.+48     	; 0x2886 <itoa+0x3a>
    2856:	45 32       	cpi	r20, 0x25	; 37
    2858:	b4 f4       	brge	.+44     	; 0x2886 <itoa+0x3a>
    285a:	4a 30       	cpi	r20, 0x0A	; 10
    285c:	29 f4       	brne	.+10     	; 0x2868 <itoa+0x1c>
    285e:	97 fb       	bst	r25, 7
    2860:	1e f4       	brtc	.+6      	; 0x2868 <itoa+0x1c>
    2862:	90 95       	com	r25
    2864:	81 95       	neg	r24
    2866:	9f 4f       	sbci	r25, 0xFF	; 255
    2868:	64 2f       	mov	r22, r20
    286a:	77 27       	eor	r23, r23
    286c:	0e 94 57 14 	call	0x28ae	; 0x28ae <__udivmodhi4>
    2870:	80 5d       	subi	r24, 0xD0	; 208
    2872:	8a 33       	cpi	r24, 0x3A	; 58
    2874:	0c f0       	brlt	.+2      	; 0x2878 <itoa+0x2c>
    2876:	89 5d       	subi	r24, 0xD9	; 217
    2878:	81 93       	st	Z+, r24
    287a:	cb 01       	movw	r24, r22
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a1 f7       	brne	.-24     	; 0x2868 <itoa+0x1c>
    2880:	16 f4       	brtc	.+4      	; 0x2886 <itoa+0x3a>
    2882:	5d e2       	ldi	r21, 0x2D	; 45
    2884:	51 93       	st	Z+, r21
    2886:	10 82       	st	Z, r1
    2888:	c9 01       	movw	r24, r18
    288a:	0c 94 47 14 	jmp	0x288e	; 0x288e <strrev>

0000288e <strrev>:
    288e:	dc 01       	movw	r26, r24
    2890:	fc 01       	movw	r30, r24
    2892:	67 2f       	mov	r22, r23
    2894:	71 91       	ld	r23, Z+
    2896:	77 23       	and	r23, r23
    2898:	e1 f7       	brne	.-8      	; 0x2892 <strrev+0x4>
    289a:	32 97       	sbiw	r30, 0x02	; 2
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <strrev+0x18>
    289e:	7c 91       	ld	r23, X
    28a0:	6d 93       	st	X+, r22
    28a2:	70 83       	st	Z, r23
    28a4:	62 91       	ld	r22, -Z
    28a6:	ae 17       	cp	r26, r30
    28a8:	bf 07       	cpc	r27, r31
    28aa:	c8 f3       	brcs	.-14     	; 0x289e <strrev+0x10>
    28ac:	08 95       	ret

000028ae <__udivmodhi4>:
    28ae:	aa 1b       	sub	r26, r26
    28b0:	bb 1b       	sub	r27, r27
    28b2:	51 e1       	ldi	r21, 0x11	; 17
    28b4:	07 c0       	rjmp	.+14     	; 0x28c4 <__udivmodhi4_ep>

000028b6 <__udivmodhi4_loop>:
    28b6:	aa 1f       	adc	r26, r26
    28b8:	bb 1f       	adc	r27, r27
    28ba:	a6 17       	cp	r26, r22
    28bc:	b7 07       	cpc	r27, r23
    28be:	10 f0       	brcs	.+4      	; 0x28c4 <__udivmodhi4_ep>
    28c0:	a6 1b       	sub	r26, r22
    28c2:	b7 0b       	sbc	r27, r23

000028c4 <__udivmodhi4_ep>:
    28c4:	88 1f       	adc	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	5a 95       	dec	r21
    28ca:	a9 f7       	brne	.-22     	; 0x28b6 <__udivmodhi4_loop>
    28cc:	80 95       	com	r24
    28ce:	90 95       	com	r25
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	08 95       	ret

000028d6 <_exit>:
    28d6:	f8 94       	cli

000028d8 <__stop_program>:
    28d8:	ff cf       	rjmp	.-2      	; 0x28d8 <__stop_program>
