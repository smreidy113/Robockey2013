
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001ce4  00001d78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800114  00800114  00001d8c  2**0
                  ALLOC
  3 .stab         0000387c  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00005608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000676e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  0000679d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001e90  00000000  00000000  00006985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007ec  00000000  00000000  00008815  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c98  00000000  00000000  00009001  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000604  00000000  00000000  00009c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006b4  00000000  00000000  0000a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000025a2  00000000  00000000  0000a954  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000200  00000000  00000000  0000cef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_10>
      2c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e4 ee       	ldi	r30, 0xE4	; 228
     1be:	fc e1       	ldi	r31, 0x1C	; 28
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a4 31       	cpi	r26, 0x14	; 20
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a4 e1       	ldi	r26, 0x14	; 20
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	aa 37       	cpi	r26, 0x7A	; 122
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
     1e0:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <main>:


 int main(void){
	 
	 //MATLAB PLOTTING STUFFS*****************************************************************
	m_clockdivide(0);
     1e8:	e1 e6       	ldi	r30, 0x61	; 97
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	80 83       	st	Z, r24
     1f0:	10 82       	st	Z, r1
		 
	long count = 0;
	
	m_red(ON);
     1f2:	6e 9a       	sbi	0x0d, 6	; 13
     1f4:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     1f6:	6a 9a       	sbi	0x0d, 2	; 13
     1f8:	72 98       	cbi	0x0e, 2	; 14

	m_bus_init();
     1fa:	0e 94 39 01 	call	0x272	; 0x272 <m_bus_init>
	m_wii_open();
     1fe:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <m_wii_open>
	//calibrate();
	m_usb_init(); // connect usb
     202:	0e 94 2e 06 	call	0xc5c	; 0xc5c <m_usb_init>
	while(!m_usb_isconnected()){};  //wait for connection
     206:	0e 94 47 06 	call	0xc8e	; 0xc8e <m_usb_isconnected>
     20a:	88 23       	and	r24, r24
     20c:	e1 f3       	breq	.-8      	; 0x206 <main+0x1e>

	m_red(OFF);
     20e:	6e 9a       	sbi	0x0d, 6	; 13
     210:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     212:	6a 9a       	sbi	0x0d, 2	; 13
     214:	72 9a       	sbi	0x0e, 2	; 14
 #define CLOCK 0
 
 //long count = 0;


 int main(void){
     216:	0a e9       	ldi	r16, 0x9A	; 154
     218:	11 e0       	ldi	r17, 0x01	; 1
	char rx_buffer; //computer interactions
	
	int i;
	while(1){

		m_red(ON);
     21a:	6e 9a       	sbi	0x0d, 6	; 13
     21c:	76 98       	cbi	0x0e, 6	; 14
		m_green(OFF);
     21e:	6a 9a       	sbi	0x0d, 2	; 13
     220:	72 9a       	sbi	0x0e, 2	; 14
		localize(data);
     222:	8e e5       	ldi	r24, 0x5E	; 94
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 0d 04 	call	0x81a	; 0x81a <localize>
		m_red(OFF);
     22a:	6e 9a       	sbi	0x0d, 6	; 13
     22c:	76 9a       	sbi	0x0e, 6	; 14
		m_green(ON);
     22e:	6a 9a       	sbi	0x0d, 2	; 13
     230:	72 98       	cbi	0x0e, 2	; 14

		while(!m_usb_rx_available());  	//wait for an indication from the computer
     232:	0e 94 68 06 	call	0xcd0	; 0xcd0 <m_usb_rx_available>
     236:	88 23       	and	r24, r24
     238:	e1 f3       	breq	.-8      	; 0x232 <main+0x4a>
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
     23a:	0e 94 4a 06 	call	0xc94	; 0xc94 <m_usb_rx_char>
     23e:	c8 2f       	mov	r28, r24

		m_usb_rx_flush();  				//clear buffer
     240:	0e 94 77 06 	call	0xcee	; 0xcee <m_usb_rx_flush>

		if(rx_buffer == 1) {  			//computer wants ir buffer
     244:	c1 30       	cpi	r28, 0x01	; 1
     246:	49 f7       	brne	.-46     	; 0x21a <main+0x32>
     248:	ce e5       	ldi	r28, 0x5E	; 94
     24a:	d1 e0       	ldi	r29, 0x01	; 1
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5		

			for (i = 0 ; i < 15 ; i++){
			m_usb_tx_int((int)data[i]);
     24c:	69 91       	ld	r22, Y+
     24e:	79 91       	ld	r23, Y+
     250:	89 91       	ld	r24, Y+
     252:	99 91       	ld	r25, Y+
     254:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fixsfsi>
     258:	cb 01       	movw	r24, r22
     25a:	0e 94 af 08 	call	0x115e	; 0x115e <m_usb_tx_int>
			m_usb_tx_char('\t');
     25e:	89 e0       	ldi	r24, 0x09	; 9
     260:	0e 94 8d 06 	call	0xd1a	; 0xd1a <m_usb_tx_char>
		m_usb_rx_flush();  				//clear buffer

		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5		

			for (i = 0 ; i < 15 ; i++){
     264:	c0 17       	cp	r28, r16
     266:	d1 07       	cpc	r29, r17
     268:	89 f7       	brne	.-30     	; 0x24c <main+0x64>
			m_usb_tx_int((int)data[i]);
			m_usb_tx_char('\t');

			}

			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <m_usb_tx_char>
     270:	d4 cf       	rjmp	.-88     	; 0x21a <main+0x32>

00000272 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     272:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     274:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     276:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     278:	8c e0       	ldi	r24, 0x0C	; 12
     27a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     27e:	e9 e6       	ldi	r30, 0x69	; 105
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	80 62       	ori	r24, 0x20	; 32
     286:	80 83       	st	Z, r24
     288:	80 81       	ld	r24, Z
     28a:	8f 7e       	andi	r24, 0xEF	; 239
     28c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     28e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     290:	78 94       	sei
     292:	08 95       	ret

00000294 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	8c 01       	movw	r16, r24
     29e:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     2a0:	82 e4       	ldi	r24, 0x42	; 66
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0e 94 3d 09 	call	0x127a	; 0x127a <m_wii_read>
	x[0] = blobs[0];
     2a8:	80 91 42 01 	lds	r24, 0x0142
     2ac:	90 91 43 01 	lds	r25, 0x0143
     2b0:	f8 01       	movw	r30, r16
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
	x[1] = blobs[3];
     2b6:	80 91 48 01 	lds	r24, 0x0148
     2ba:	90 91 49 01 	lds	r25, 0x0149
     2be:	93 83       	std	Z+3, r25	; 0x03
     2c0:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     2c2:	80 91 4e 01 	lds	r24, 0x014E
     2c6:	90 91 4f 01 	lds	r25, 0x014F
     2ca:	95 83       	std	Z+5, r25	; 0x05
     2cc:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     2ce:	80 91 54 01 	lds	r24, 0x0154
     2d2:	90 91 55 01 	lds	r25, 0x0155
     2d6:	97 83       	std	Z+7, r25	; 0x07
     2d8:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     2da:	80 91 44 01 	lds	r24, 0x0144
     2de:	90 91 45 01 	lds	r25, 0x0145
     2e2:	99 83       	std	Y+1, r25	; 0x01
     2e4:	88 83       	st	Y, r24
	y[1] = blobs[4];
     2e6:	80 91 4a 01 	lds	r24, 0x014A
     2ea:	90 91 4b 01 	lds	r25, 0x014B
     2ee:	9b 83       	std	Y+3, r25	; 0x03
     2f0:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     2f2:	80 91 50 01 	lds	r24, 0x0150
     2f6:	90 91 51 01 	lds	r25, 0x0151
     2fa:	9d 83       	std	Y+5, r25	; 0x05
     2fc:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     2fe:	80 91 56 01 	lds	r24, 0x0156
     302:	90 91 57 01 	lds	r25, 0x0157
     306:	9f 83       	std	Y+7, r25	; 0x07
     308:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	08 95       	ret

00000316 <determine_blobs>:

unsigned char determine_blobs() {
     316:	2f 92       	push	r2
     318:	3f 92       	push	r3
     31a:	4f 92       	push	r4
     31c:	5f 92       	push	r5
     31e:	6f 92       	push	r6
     320:	7f 92       	push	r7
     322:	8f 92       	push	r8
     324:	9f 92       	push	r9
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	6c 97       	sbiw	r28, 0x1c	; 28
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     34a:	10 92 22 01 	sts	0x0122, r1
     34e:	10 92 23 01 	sts	0x0123, r1
     352:	10 92 24 01 	sts	0x0124, r1
     356:	10 92 25 01 	sts	0x0125, r1
	distmin = 30000;
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e6       	ldi	r25, 0x60	; 96
     35e:	aa ee       	ldi	r26, 0xEA	; 234
     360:	b6 e4       	ldi	r27, 0x46	; 70
     362:	80 93 00 01 	sts	0x0100, r24
     366:	90 93 01 01 	sts	0x0101, r25
     36a:	a0 93 02 01 	sts	0x0102, r26
     36e:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     372:	0f 2e       	mov	r0, r31
     374:	f4 e3       	ldi	r31, 0x34	; 52
     376:	cf 2e       	mov	r12, r31
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	df 2e       	mov	r13, r31
     37c:	f0 2d       	mov	r31, r0
     37e:	06 e3       	ldi	r16, 0x36	; 54
     380:	11 e0       	ldi	r17, 0x01	; 1
     382:	0f 2e       	mov	r0, r31
     384:	f8 e3       	ldi	r31, 0x38	; 56
     386:	ef 2e       	mov	r14, r31
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	ff 2e       	mov	r15, r31
     38c:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     38e:	6a e2       	ldi	r22, 0x2A	; 42
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	82 e3       	ldi	r24, 0x32	; 50
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 4a 01 	call	0x294	; 0x294 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     39a:	80 91 32 01 	lds	r24, 0x0132
     39e:	90 91 33 01 	lds	r25, 0x0133
     3a2:	8f 3f       	cpi	r24, 0xFF	; 255
     3a4:	93 40       	sbci	r25, 0x03	; 3
     3a6:	98 f7       	brcc	.-26     	; 0x38e <determine_blobs+0x78>
     3a8:	f6 01       	movw	r30, r12
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	8f 3f       	cpi	r24, 0xFF	; 255
     3b0:	93 40       	sbci	r25, 0x03	; 3
     3b2:	68 f7       	brcc	.-38     	; 0x38e <determine_blobs+0x78>
     3b4:	f8 01       	movw	r30, r16
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	8f 3f       	cpi	r24, 0xFF	; 255
     3bc:	93 40       	sbci	r25, 0x03	; 3
     3be:	38 f7       	brcc	.-50     	; 0x38e <determine_blobs+0x78>
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 81       	ld	r24, Z
     3c4:	91 81       	ldd	r25, Z+1	; 0x01
     3c6:	8f 3f       	cpi	r24, 0xFF	; 255
     3c8:	93 40       	sbci	r25, 0x03	; 3
     3ca:	08 f7       	brcc	.-62     	; 0x38e <determine_blobs+0x78>
     3cc:	80 90 26 01 	lds	r8, 0x0126
     3d0:	90 90 27 01 	lds	r9, 0x0127
     3d4:	a0 90 28 01 	lds	r10, 0x0128
     3d8:	b0 90 29 01 	lds	r11, 0x0129
     3dc:	20 91 22 01 	lds	r18, 0x0122
     3e0:	29 83       	std	Y+1, r18	; 0x01
     3e2:	30 91 23 01 	lds	r19, 0x0123
     3e6:	3a 83       	std	Y+2, r19	; 0x02
     3e8:	40 91 24 01 	lds	r20, 0x0124
     3ec:	4b 83       	std	Y+3, r20	; 0x03
     3ee:	50 91 25 01 	lds	r21, 0x0125
     3f2:	5c 83       	std	Y+4, r21	; 0x04
     3f4:	60 91 1c 01 	lds	r22, 0x011C
     3f8:	6b 8b       	std	Y+19, r22	; 0x13
     3fa:	70 91 1d 01 	lds	r23, 0x011D
     3fe:	7c 8b       	std	Y+20, r23	; 0x14
     400:	80 91 1a 01 	lds	r24, 0x011A
     404:	89 8b       	std	Y+17, r24	; 0x11
     406:	90 91 1b 01 	lds	r25, 0x011B
     40a:	9a 8b       	std	Y+18, r25	; 0x12
     40c:	e0 91 1e 01 	lds	r30, 0x011E
     410:	ed 8b       	std	Y+21, r30	; 0x15
     412:	f0 91 1f 01 	lds	r31, 0x011F
     416:	fe 8b       	std	Y+22, r31	; 0x16
     418:	20 91 20 01 	lds	r18, 0x0120
     41c:	2f 8b       	std	Y+23, r18	; 0x17
     41e:	30 91 21 01 	lds	r19, 0x0121
     422:	38 8f       	std	Y+24, r19	; 0x18
     424:	40 91 00 01 	lds	r20, 0x0100
     428:	4d 83       	std	Y+5, r20	; 0x05
     42a:	50 91 01 01 	lds	r21, 0x0101
     42e:	5e 83       	std	Y+6, r21	; 0x06
     430:	20 90 02 01 	lds	r2, 0x0102
     434:	30 90 03 01 	lds	r3, 0x0103
     438:	60 91 18 01 	lds	r22, 0x0118
     43c:	69 8f       	std	Y+25, r22	; 0x19
     43e:	70 91 19 01 	lds	r23, 0x0119
     442:	7a 8f       	std	Y+26, r23	; 0x1a
     444:	80 91 16 01 	lds	r24, 0x0116
     448:	90 91 17 01 	lds	r25, 0x0117
     44c:	98 8b       	std	Y+16, r25	; 0x10
     44e:	8f 87       	std	Y+15, r24	; 0x0f
     450:	18 86       	std	Y+8, r1	; 0x08
     452:	1f 82       	std	Y+7, r1	; 0x07
     454:	c1 2c       	mov	r12, r1
     456:	d1 2c       	mov	r13, r1
     458:	b9 c0       	rjmp	.+370    	; 0x5cc <determine_blobs+0x2b6>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     45a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     45c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     45e:	e4 15       	cp	r30, r4
     460:	f5 05       	cpc	r31, r5
     462:	09 f4       	brne	.+2      	; 0x466 <determine_blobs+0x150>
     464:	9c c0       	rjmp	.+312    	; 0x59e <determine_blobs+0x288>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     466:	e9 85       	ldd	r30, Y+9	; 0x09
     468:	fa 85       	ldd	r31, Y+10	; 0x0a
     46a:	60 81       	ld	r22, Z
     46c:	71 81       	ldd	r23, Z+1	; 0x01
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     476:	6b 01       	movw	r12, r22
     478:	7c 01       	movw	r14, r24
     47a:	f3 01       	movw	r30, r6
     47c:	60 81       	ld	r22, Z
     47e:	71 81       	ldd	r23, Z+1	; 0x01
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     488:	9b 01       	movw	r18, r22
     48a:	ac 01       	movw	r20, r24
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     494:	c6 2e       	mov	r12, r22
     496:	d7 2e       	mov	r13, r23
     498:	e8 2e       	mov	r14, r24
     49a:	f9 2e       	mov	r15, r25
     49c:	eb 85       	ldd	r30, Y+11	; 0x0b
     49e:	fc 85       	ldd	r31, Y+12	; 0x0c
     4a0:	60 81       	ld	r22, Z
     4a2:	71 81       	ldd	r23, Z+1	; 0x01
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     4ac:	4b 01       	movw	r8, r22
     4ae:	5c 01       	movw	r10, r24
     4b0:	f8 01       	movw	r30, r16
     4b2:	60 81       	ld	r22, Z
     4b4:	71 81       	ldd	r23, Z+1	; 0x01
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     4be:	9b 01       	movw	r18, r22
     4c0:	ac 01       	movw	r20, r24
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     4ca:	86 2e       	mov	r8, r22
     4cc:	97 2e       	mov	r9, r23
     4ce:	a8 2e       	mov	r10, r24
     4d0:	b9 2e       	mov	r11, r25
     4d2:	2c 2d       	mov	r18, r12
     4d4:	3d 2d       	mov	r19, r13
     4d6:	4e 2d       	mov	r20, r14
     4d8:	5f 2d       	mov	r21, r15
     4da:	6c 2d       	mov	r22, r12
     4dc:	7d 2d       	mov	r23, r13
     4de:	8e 2d       	mov	r24, r14
     4e0:	9f 2d       	mov	r25, r15
     4e2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     4e6:	6b 01       	movw	r12, r22
     4e8:	7c 01       	movw	r14, r24
     4ea:	28 2d       	mov	r18, r8
     4ec:	39 2d       	mov	r19, r9
     4ee:	4a 2d       	mov	r20, r10
     4f0:	5b 2d       	mov	r21, r11
     4f2:	68 2d       	mov	r22, r8
     4f4:	79 2d       	mov	r23, r9
     4f6:	8a 2d       	mov	r24, r10
     4f8:	9b 2d       	mov	r25, r11
     4fa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     4fe:	9b 01       	movw	r18, r22
     500:	ac 01       	movw	r20, r24
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__addsf3>
     50a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <sqrt>
     50e:	86 2e       	mov	r8, r22
     510:	97 2e       	mov	r9, r23
     512:	a8 2e       	mov	r10, r24
     514:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     516:	79 81       	ldd	r23, Y+1	; 0x01
     518:	6a 81       	ldd	r22, Y+2	; 0x02
     51a:	9b 81       	ldd	r25, Y+3	; 0x03
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	27 2f       	mov	r18, r23
     520:	36 2f       	mov	r19, r22
     522:	49 2f       	mov	r20, r25
     524:	58 2f       	mov	r21, r24
     526:	68 2d       	mov	r22, r8
     528:	79 2d       	mov	r23, r9
     52a:	8a 2d       	mov	r24, r10
     52c:	9b 2d       	mov	r25, r11
     52e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__gesf2>
     532:	18 16       	cp	r1, r24
     534:	d4 f4       	brge	.+52     	; 0x56a <determine_blobs+0x254>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	5f e3       	ldi	r21, 0x3F	; 63
     53e:	68 2d       	mov	r22, r8
     540:	79 2d       	mov	r23, r9
     542:	8a 2d       	mov	r24, r10
     544:	9b 2d       	mov	r25, r11
     546:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     54a:	6d 8b       	std	Y+21, r22	; 0x15
     54c:	7e 8b       	std	Y+22, r23	; 0x16
     54e:	8f 8b       	std	Y+23, r24	; 0x17
     550:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     552:	fb 8d       	ldd	r31, Y+27	; 0x1b
     554:	f9 8b       	std	Y+17, r31	; 0x11
     556:	2c 8d       	ldd	r18, Y+28	; 0x1c
     558:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     55a:	3d 85       	ldd	r19, Y+13	; 0x0d
     55c:	3b 8b       	std	Y+19, r19	; 0x13
     55e:	4e 85       	ldd	r20, Y+14	; 0x0e
     560:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     562:	89 82       	std	Y+1, r8	; 0x01
     564:	9a 82       	std	Y+2, r9	; 0x02
     566:	ab 82       	std	Y+3, r10	; 0x03
     568:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     56a:	7d 81       	ldd	r23, Y+5	; 0x05
     56c:	6e 81       	ldd	r22, Y+6	; 0x06
     56e:	27 2f       	mov	r18, r23
     570:	36 2f       	mov	r19, r22
     572:	42 2d       	mov	r20, r2
     574:	53 2d       	mov	r21, r3
     576:	68 2d       	mov	r22, r8
     578:	79 2d       	mov	r23, r9
     57a:	8a 2d       	mov	r24, r10
     57c:	9b 2d       	mov	r25, r11
     57e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     582:	88 23       	and	r24, r24
     584:	64 f4       	brge	.+24     	; 0x59e <determine_blobs+0x288>
						distmin = dist;
						close1 = i;
						close2 = j;
     586:	6b 8d       	ldd	r22, Y+27	; 0x1b
     588:	7c 8d       	ldd	r23, Y+28	; 0x1c
     58a:	78 8b       	std	Y+16, r23	; 0x10
     58c:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     58e:	7d 85       	ldd	r23, Y+13	; 0x0d
     590:	79 8f       	std	Y+25, r23	; 0x19
     592:	8e 85       	ldd	r24, Y+14	; 0x0e
     594:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     596:	8d 82       	std	Y+5, r8	; 0x05
     598:	9e 82       	std	Y+6, r9	; 0x06
     59a:	2a 2c       	mov	r2, r10
     59c:	3b 2c       	mov	r3, r11
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	69 0e       	add	r6, r25
     5a2:	71 1c       	adc	r7, r1
     5a4:	0e 5f       	subi	r16, 0xFE	; 254
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     5a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
     5ac:	31 96       	adiw	r30, 0x01	; 1
     5ae:	fc 8f       	std	Y+28, r31	; 0x1c
     5b0:	eb 8f       	std	Y+27, r30	; 0x1b
     5b2:	34 97       	sbiw	r30, 0x04	; 4
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <determine_blobs+0x2a2>
     5b6:	51 cf       	rjmp	.-350    	; 0x45a <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     5b8:	2f 81       	ldd	r18, Y+7	; 0x07
     5ba:	38 85       	ldd	r19, Y+8	; 0x08
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	38 87       	std	Y+8, r19	; 0x08
     5c2:	2f 83       	std	Y+7, r18	; 0x07
     5c4:	69 01       	movw	r12, r18
     5c6:	24 30       	cpi	r18, 0x04	; 4
     5c8:	31 05       	cpc	r19, r1
     5ca:	39 f1       	breq	.+78     	; 0x61a <determine_blobs+0x304>
				for (int j = i; j < 4; j++) {
     5cc:	34 e0       	ldi	r19, 0x04	; 4
     5ce:	c3 16       	cp	r12, r19
     5d0:	d1 04       	cpc	r13, r1
     5d2:	94 f7       	brge	.-28     	; 0x5b8 <determine_blobs+0x2a2>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     5d4:	86 01       	movw	r16, r12
     5d6:	0f 5f       	subi	r16, 0xFF	; 255
     5d8:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     5da:	00 0f       	add	r16, r16
     5dc:	11 1f       	adc	r17, r17
     5de:	0f 2e       	mov	r0, r31
     5e0:	f2 e3       	ldi	r31, 0x32	; 50
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	ff 2e       	mov	r15, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	e0 0e       	add	r14, r16
     5ec:	f1 1e       	adc	r15, r17
     5ee:	06 5d       	subi	r16, 0xD6	; 214
     5f0:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     5f2:	c6 01       	movw	r24, r12
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	ac 01       	movw	r20, r24
     5fa:	4e 5c       	subi	r20, 0xCE	; 206
     5fc:	5e 4f       	sbci	r21, 0xFE	; 254
     5fe:	5a 87       	std	Y+10, r21	; 0x0a
     600:	49 87       	std	Y+9, r20	; 0x09
     602:	bc 01       	movw	r22, r24
     604:	66 5d       	subi	r22, 0xD6	; 214
     606:	7e 4f       	sbci	r23, 0xFE	; 254
     608:	7c 87       	std	Y+12, r23	; 0x0c
     60a:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     60c:	cd 86       	std	Y+13, r12	; 0x0d
     60e:	de 86       	std	Y+14, r13	; 0x0e
     610:	dc 8e       	std	Y+28, r13	; 0x1c
     612:	cb 8e       	std	Y+27, r12	; 0x1b
     614:	26 01       	movw	r4, r12
     616:	37 01       	movw	r6, r14
     618:	c7 cf       	rjmp	.-114    	; 0x5a8 <determine_blobs+0x292>
     61a:	88 2d       	mov	r24, r8
     61c:	99 2d       	mov	r25, r9
     61e:	aa 2d       	mov	r26, r10
     620:	bb 2d       	mov	r27, r11
     622:	80 93 26 01 	sts	0x0126, r24
     626:	90 93 27 01 	sts	0x0127, r25
     62a:	a0 93 28 01 	sts	0x0128, r26
     62e:	b0 93 29 01 	sts	0x0129, r27
     632:	59 81       	ldd	r21, Y+1	; 0x01
     634:	4a 81       	ldd	r20, Y+2	; 0x02
     636:	3b 81       	ldd	r19, Y+3	; 0x03
     638:	2c 81       	ldd	r18, Y+4	; 0x04
     63a:	85 2f       	mov	r24, r21
     63c:	94 2f       	mov	r25, r20
     63e:	a3 2f       	mov	r26, r19
     640:	b2 2f       	mov	r27, r18
     642:	80 93 22 01 	sts	0x0122, r24
     646:	90 93 23 01 	sts	0x0123, r25
     64a:	a0 93 24 01 	sts	0x0124, r26
     64e:	b0 93 25 01 	sts	0x0125, r27
     652:	7b 89       	ldd	r23, Y+19	; 0x13
     654:	70 93 1c 01 	sts	0x011C, r23
     658:	8c 89       	ldd	r24, Y+20	; 0x14
     65a:	80 93 1d 01 	sts	0x011D, r24
     65e:	99 89       	ldd	r25, Y+17	; 0x11
     660:	90 93 1a 01 	sts	0x011A, r25
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	e0 93 1b 01 	sts	0x011B, r30
     66a:	5d 89       	ldd	r21, Y+21	; 0x15
     66c:	4e 89       	ldd	r20, Y+22	; 0x16
     66e:	3f 89       	ldd	r19, Y+23	; 0x17
     670:	28 8d       	ldd	r18, Y+24	; 0x18
     672:	85 2f       	mov	r24, r21
     674:	94 2f       	mov	r25, r20
     676:	a3 2f       	mov	r26, r19
     678:	b2 2f       	mov	r27, r18
     67a:	80 93 1e 01 	sts	0x011E, r24
     67e:	90 93 1f 01 	sts	0x011F, r25
     682:	a0 93 20 01 	sts	0x0120, r26
     686:	b0 93 21 01 	sts	0x0121, r27
     68a:	5d 81       	ldd	r21, Y+5	; 0x05
     68c:	4e 81       	ldd	r20, Y+6	; 0x06
     68e:	85 2f       	mov	r24, r21
     690:	94 2f       	mov	r25, r20
     692:	a2 2d       	mov	r26, r2
     694:	b3 2d       	mov	r27, r3
     696:	80 93 00 01 	sts	0x0100, r24
     69a:	90 93 01 01 	sts	0x0101, r25
     69e:	a0 93 02 01 	sts	0x0102, r26
     6a2:	b0 93 03 01 	sts	0x0103, r27
     6a6:	f9 8d       	ldd	r31, Y+25	; 0x19
     6a8:	f0 93 18 01 	sts	0x0118, r31
     6ac:	2a 8d       	ldd	r18, Y+26	; 0x1a
     6ae:	20 93 19 01 	sts	0x0119, r18
     6b2:	3f 85       	ldd	r19, Y+15	; 0x0f
     6b4:	30 93 16 01 	sts	0x0116, r19
     6b8:	48 89       	ldd	r20, Y+16	; 0x10
     6ba:	40 93 17 01 	sts	0x0117, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     6be:	80 91 1c 01 	lds	r24, 0x011C
     6c2:	90 91 1d 01 	lds	r25, 0x011D
     6c6:	20 91 18 01 	lds	r18, 0x0118
     6ca:	30 91 19 01 	lds	r19, 0x0119
     6ce:	82 17       	cp	r24, r18
     6d0:	93 07       	cpc	r25, r19
     6d2:	19 f5       	brne	.+70     	; 0x71a <determine_blobs+0x404>
				top = far1;
     6d4:	90 93 41 01 	sts	0x0141, r25
     6d8:	80 93 40 01 	sts	0x0140, r24
				bottom = far2;
     6dc:	40 91 1a 01 	lds	r20, 0x011A
     6e0:	50 91 1b 01 	lds	r21, 0x011B
     6e4:	50 93 3f 01 	sts	0x013F, r21
     6e8:	40 93 3e 01 	sts	0x013E, r20
				right = close2;
     6ec:	20 91 16 01 	lds	r18, 0x0116
     6f0:	30 91 17 01 	lds	r19, 0x0117
     6f4:	30 93 3b 01 	sts	0x013B, r19
     6f8:	20 93 3a 01 	sts	0x013A, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     6fc:	69 e0       	ldi	r22, 0x09	; 9
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	fb 01       	movw	r30, r22
     702:	e8 1b       	sub	r30, r24
     704:	f9 0b       	sbc	r31, r25
     706:	cf 01       	movw	r24, r30
     708:	84 1b       	sub	r24, r20
     70a:	95 0b       	sbc	r25, r21
     70c:	82 1b       	sub	r24, r18
     70e:	93 0b       	sbc	r25, r19
     710:	90 93 3d 01 	sts	0x013D, r25
     714:	80 93 3c 01 	sts	0x013C, r24
     718:	66 c0       	rjmp	.+204    	; 0x7e6 <determine_blobs+0x4d0>
			}
			else if (far1 == close2) {
     71a:	4f 85       	ldd	r20, Y+15	; 0x0f
     71c:	58 89       	ldd	r21, Y+16	; 0x10
     71e:	84 17       	cp	r24, r20
     720:	95 07       	cpc	r25, r21
     722:	f9 f4       	brne	.+62     	; 0x762 <determine_blobs+0x44c>
				top = far1;
     724:	90 93 41 01 	sts	0x0141, r25
     728:	80 93 40 01 	sts	0x0140, r24
				bottom = far2;
     72c:	40 91 1a 01 	lds	r20, 0x011A
     730:	50 91 1b 01 	lds	r21, 0x011B
     734:	50 93 3f 01 	sts	0x013F, r21
     738:	40 93 3e 01 	sts	0x013E, r20
				right = close1;
     73c:	30 93 3b 01 	sts	0x013B, r19
     740:	20 93 3a 01 	sts	0x013A, r18
				left = 9 - top - bottom - right;
     744:	69 e0       	ldi	r22, 0x09	; 9
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	fb 01       	movw	r30, r22
     74a:	e8 1b       	sub	r30, r24
     74c:	f9 0b       	sbc	r31, r25
     74e:	cf 01       	movw	r24, r30
     750:	84 1b       	sub	r24, r20
     752:	95 0b       	sbc	r25, r21
     754:	82 1b       	sub	r24, r18
     756:	93 0b       	sbc	r25, r19
     758:	90 93 3d 01 	sts	0x013D, r25
     75c:	80 93 3c 01 	sts	0x013C, r24
     760:	42 c0       	rjmp	.+132    	; 0x7e6 <determine_blobs+0x4d0>
			}
			else if (far2 == close1) {
     762:	40 91 1a 01 	lds	r20, 0x011A
     766:	50 91 1b 01 	lds	r21, 0x011B
     76a:	24 17       	cp	r18, r20
     76c:	35 07       	cpc	r19, r21
     76e:	01 f5       	brne	.+64     	; 0x7b0 <determine_blobs+0x49a>
				top = far2;
     770:	30 93 41 01 	sts	0x0141, r19
     774:	20 93 40 01 	sts	0x0140, r18
				bottom = far1;
     778:	90 93 3f 01 	sts	0x013F, r25
     77c:	80 93 3e 01 	sts	0x013E, r24
				right = close2;
     780:	4f 85       	ldd	r20, Y+15	; 0x0f
     782:	58 89       	ldd	r21, Y+16	; 0x10
     784:	50 93 3b 01 	sts	0x013B, r21
     788:	40 93 3a 01 	sts	0x013A, r20
				left = 9 - top - bottom - right;
     78c:	49 e0       	ldi	r20, 0x09	; 9
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	ba 01       	movw	r22, r20
     792:	62 1b       	sub	r22, r18
     794:	73 0b       	sbc	r23, r19
     796:	fb 01       	movw	r30, r22
     798:	e8 1b       	sub	r30, r24
     79a:	f9 0b       	sbc	r31, r25
     79c:	cf 01       	movw	r24, r30
     79e:	2f 85       	ldd	r18, Y+15	; 0x0f
     7a0:	38 89       	ldd	r19, Y+16	; 0x10
     7a2:	82 1b       	sub	r24, r18
     7a4:	93 0b       	sbc	r25, r19
     7a6:	90 93 3d 01 	sts	0x013D, r25
     7aa:	80 93 3c 01 	sts	0x013C, r24
     7ae:	1b c0       	rjmp	.+54     	; 0x7e6 <determine_blobs+0x4d0>
			}
			else {
				top = far2;
     7b0:	50 93 41 01 	sts	0x0141, r21
     7b4:	40 93 40 01 	sts	0x0140, r20
				bottom = far1;
     7b8:	90 93 3f 01 	sts	0x013F, r25
     7bc:	80 93 3e 01 	sts	0x013E, r24
				right = close1;
     7c0:	30 93 3b 01 	sts	0x013B, r19
     7c4:	20 93 3a 01 	sts	0x013A, r18
				left = 9 - top - bottom - right;
     7c8:	69 e0       	ldi	r22, 0x09	; 9
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	fb 01       	movw	r30, r22
     7ce:	e4 1b       	sub	r30, r20
     7d0:	f5 0b       	sbc	r31, r21
     7d2:	bf 01       	movw	r22, r30
     7d4:	68 1b       	sub	r22, r24
     7d6:	79 0b       	sbc	r23, r25
     7d8:	cb 01       	movw	r24, r22
     7da:	82 1b       	sub	r24, r18
     7dc:	93 0b       	sbc	r25, r19
     7de:	90 93 3d 01 	sts	0x013D, r25
     7e2:	80 93 3c 01 	sts	0x013C, r24
			}
		}
	}
	return 1;
}
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	6c 96       	adiw	r28, 0x1c	; 28
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	9f 90       	pop	r9
     80a:	8f 90       	pop	r8
     80c:	7f 90       	pop	r7
     80e:	6f 90       	pop	r6
     810:	5f 90       	pop	r5
     812:	4f 90       	pop	r4
     814:	3f 90       	pop	r3
     816:	2f 90       	pop	r2
     818:	08 95       	ret

0000081a <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
     81a:	2f 92       	push	r2
     81c:	3f 92       	push	r3
     81e:	4f 92       	push	r4
     820:	5f 92       	push	r5
     822:	6f 92       	push	r6
     824:	7f 92       	push	r7
     826:	8f 92       	push	r8
     828:	9f 92       	push	r9
     82a:	af 92       	push	r10
     82c:	bf 92       	push	r11
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	2e 97       	sbiw	r28, 0x0e	; 14
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	1c 01       	movw	r2, r24
	numlost = 0;
     850:	10 92 15 01 	sts	0x0115, r1
     854:	10 92 14 01 	sts	0x0114, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
     858:	0e 94 8b 01 	call	0x316	; 0x316 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
     85c:	00 91 40 01 	lds	r16, 0x0140
     860:	10 91 41 01 	lds	r17, 0x0141
     864:	f8 01       	movw	r30, r16
     866:	ee 0f       	add	r30, r30
     868:	ff 1f       	adc	r31, r31
     86a:	ee 5c       	subi	r30, 0xCE	; 206
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	20 81       	ld	r18, Z
     870:	31 81       	ldd	r19, Z+1	; 0x01
     872:	3a 87       	std	Y+10, r19	; 0x0a
     874:	29 87       	std	Y+9, r18	; 0x09
     876:	2f 3f       	cpi	r18, 0xFF	; 255
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	38 07       	cpc	r19, r24
     87c:	08 f0       	brcs	.+2      	; 0x880 <localize+0x66>
     87e:	d5 c1       	rjmp	.+938    	; 0xc2a <__stack+0x12b>
     880:	c0 90 3e 01 	lds	r12, 0x013E
     884:	d0 90 3f 01 	lds	r13, 0x013F
     888:	f6 01       	movw	r30, r12
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ee 5c       	subi	r30, 0xCE	; 206
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	e0 80       	ld	r14, Z
     894:	f1 80       	ldd	r15, Z+1	; 0x01
     896:	9f ef       	ldi	r25, 0xFF	; 255
     898:	e9 16       	cp	r14, r25
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	f9 06       	cpc	r15, r25
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <localize+0x88>
     8a0:	c4 c1       	rjmp	.+904    	; 0xc2a <__stack+0x12b>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
     8a2:	40 90 08 01 	lds	r4, 0x0108
     8a6:	50 90 09 01 	lds	r5, 0x0109
     8aa:	60 90 0a 01 	lds	r6, 0x010A
     8ae:	70 90 0b 01 	lds	r7, 0x010B
     8b2:	b9 01       	movw	r22, r18
     8b4:	6e 0d       	add	r22, r14
     8b6:	7f 1d       	adc	r23, r15
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	5f e3       	ldi	r21, 0x3F	; 63
     8c8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     8cc:	a3 01       	movw	r20, r6
     8ce:	92 01       	movw	r18, r4
     8d0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     8d4:	69 83       	std	Y+1, r22	; 0x01
     8d6:	7a 83       	std	Y+2, r23	; 0x02
     8d8:	8b 83       	std	Y+3, r24	; 0x03
     8da:	9c 83       	std	Y+4, r25	; 0x04
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
     8dc:	f8 01       	movw	r30, r16
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e6 5d       	subi	r30, 0xD6	; 214
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	a0 80       	ld	r10, Z
     8e8:	b1 80       	ldd	r11, Z+1	; 0x01
     8ea:	f6 01       	movw	r30, r12
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	e6 5d       	subi	r30, 0xD6	; 214
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	00 81       	ld	r16, Z
     8f6:	11 81       	ldd	r17, Z+1	; 0x01
     8f8:	b8 01       	movw	r22, r16
     8fa:	6a 0d       	add	r22, r10
     8fc:	7b 1d       	adc	r23, r11
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	5f e3       	ldi	r21, 0x3F	; 63
     90e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     912:	20 91 04 01 	lds	r18, 0x0104
     916:	30 91 05 01 	lds	r19, 0x0105
     91a:	40 91 06 01 	lds	r20, 0x0106
     91e:	50 91 07 01 	lds	r21, 0x0107
     922:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     926:	6d 83       	std	Y+5, r22	; 0x05
     928:	7e 83       	std	Y+6, r23	; 0x06
     92a:	8f 83       	std	Y+7, r24	; 0x07
     92c:	98 87       	std	Y+8, r25	; 0x08
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
     92e:	b5 01       	movw	r22, r10
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     938:	4b 01       	movw	r8, r22
     93a:	5c 01       	movw	r10, r24
     93c:	b8 01       	movw	r22, r16
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c5 01       	movw	r24, r10
     94c:	b4 01       	movw	r22, r8
     94e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     952:	4b 01       	movw	r8, r22
     954:	5c 01       	movw	r10, r24
     956:	e9 85       	ldd	r30, Y+9	; 0x09
     958:	fa 85       	ldd	r31, Y+10	; 0x0a
     95a:	bf 01       	movw	r22, r30
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     964:	69 87       	std	Y+9, r22	; 0x09
     966:	7a 87       	std	Y+10, r23	; 0x0a
     968:	8b 87       	std	Y+11, r24	; 0x0b
     96a:	9c 87       	std	Y+12, r25	; 0x0c
     96c:	b7 01       	movw	r22, r14
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	69 85       	ldd	r22, Y+9	; 0x09
     97c:	7a 85       	ldd	r23, Y+10	; 0x0a
     97e:	8b 85       	ldd	r24, Y+11	; 0x0b
     980:	9c 85       	ldd	r25, Y+12	; 0x0c
     982:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     986:	a5 01       	movw	r20, r10
     988:	94 01       	movw	r18, r8
     98a:	0e 94 49 0b 	call	0x1692	; 0x1692 <atan2>
     98e:	69 87       	std	Y+9, r22	; 0x09
     990:	7a 87       	std	Y+10, r23	; 0x0a
     992:	8b 87       	std	Y+11, r24	; 0x0b
     994:	9c 87       	std	Y+12, r25	; 0x0c
		phi = ((float) atan2((double) posy, (double) posx));
     996:	79 81       	ldd	r23, Y+1	; 0x01
     998:	6a 81       	ldd	r22, Y+2	; 0x02
     99a:	9b 81       	ldd	r25, Y+3	; 0x03
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	27 2f       	mov	r18, r23
     9a0:	36 2f       	mov	r19, r22
     9a2:	49 2f       	mov	r20, r25
     9a4:	58 2f       	mov	r21, r24
     9a6:	bd 81       	ldd	r27, Y+5	; 0x05
     9a8:	ae 81       	ldd	r26, Y+6	; 0x06
     9aa:	ef 81       	ldd	r30, Y+7	; 0x07
     9ac:	18 85       	ldd	r17, Y+8	; 0x08
     9ae:	6b 2f       	mov	r22, r27
     9b0:	7a 2f       	mov	r23, r26
     9b2:	8e 2f       	mov	r24, r30
     9b4:	91 2f       	mov	r25, r17
     9b6:	0e 94 49 0b 	call	0x1692	; 0x1692 <atan2>
     9ba:	4b 01       	movw	r8, r22
     9bc:	5c 01       	movw	r10, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
     9be:	79 81       	ldd	r23, Y+1	; 0x01
     9c0:	6a 81       	ldd	r22, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	27 2f       	mov	r18, r23
     9c8:	36 2f       	mov	r19, r22
     9ca:	49 2f       	mov	r20, r25
     9cc:	58 2f       	mov	r21, r24
     9ce:	67 2f       	mov	r22, r23
     9d0:	73 2f       	mov	r23, r19
     9d2:	89 2f       	mov	r24, r25
     9d4:	95 2f       	mov	r25, r21
     9d6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24
     9de:	7d 81       	ldd	r23, Y+5	; 0x05
     9e0:	6e 81       	ldd	r22, Y+6	; 0x06
     9e2:	9f 81       	ldd	r25, Y+7	; 0x07
     9e4:	88 85       	ldd	r24, Y+8	; 0x08
     9e6:	27 2f       	mov	r18, r23
     9e8:	36 2f       	mov	r19, r22
     9ea:	49 2f       	mov	r20, r25
     9ec:	58 2f       	mov	r21, r24
     9ee:	67 2f       	mov	r22, r23
     9f0:	73 2f       	mov	r23, r19
     9f2:	89 2f       	mov	r24, r25
     9f4:	95 2f       	mov	r25, r21
     9f6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     9fa:	9b 01       	movw	r18, r22
     9fc:	ac 01       	movw	r20, r24
     9fe:	c7 01       	movw	r24, r14
     a00:	b6 01       	movw	r22, r12
     a02:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__addsf3>
     a06:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <sqrt>
     a0a:	6b 01       	movw	r12, r22
     a0c:	7c 01       	movw	r14, r24
		
		

		data[0] = (rcenterx + r * (float) sin((double) (((3 * 3.14)/2) - angle - phi)));
     a0e:	29 85       	ldd	r18, Y+9	; 0x09
     a10:	3a 85       	ldd	r19, Y+10	; 0x0a
     a12:	4b 85       	ldd	r20, Y+11	; 0x0b
     a14:	5c 85       	ldd	r21, Y+12	; 0x0c
     a16:	62 e5       	ldi	r22, 0x52	; 82
     a18:	78 eb       	ldi	r23, 0xB8	; 184
     a1a:	86 e9       	ldi	r24, 0x96	; 150
     a1c:	90 e4       	ldi	r25, 0x40	; 64
     a1e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     a22:	a5 01       	movw	r20, r10
     a24:	94 01       	movw	r18, r8
     a26:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
     a2a:	6e 87       	std	Y+14, r22	; 0x0e
     a2c:	7d 87       	std	Y+13, r23	; 0x0d
     a2e:	18 2f       	mov	r17, r24
     a30:	09 2f       	mov	r16, r25
     a32:	81 2f       	mov	r24, r17
     a34:	90 2f       	mov	r25, r16
     a36:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <sin>
     a3a:	a7 01       	movw	r20, r14
     a3c:	96 01       	movw	r18, r12
     a3e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	c3 01       	movw	r24, r6
     a48:	b2 01       	movw	r22, r4
     a4a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__addsf3>
     a4e:	f1 01       	movw	r30, r2
     a50:	60 83       	st	Z, r22
     a52:	71 83       	std	Z+1, r23	; 0x01
     a54:	82 83       	std	Z+2, r24	; 0x02
     a56:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery + r * (float) cos((double) (((3 * 3.14)/2) - angle - phi));
     a58:	5e 85       	ldd	r21, Y+14	; 0x0e
     a5a:	4d 85       	ldd	r20, Y+13	; 0x0d
     a5c:	65 2f       	mov	r22, r21
     a5e:	74 2f       	mov	r23, r20
     a60:	81 2f       	mov	r24, r17
     a62:	90 2f       	mov	r25, r16
     a64:	0e 94 a0 0b 	call	0x1740	; 0x1740 <cos>
     a68:	a7 01       	movw	r20, r14
     a6a:	96 01       	movw	r18, r12
     a6c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     a70:	20 91 04 01 	lds	r18, 0x0104
     a74:	30 91 05 01 	lds	r19, 0x0105
     a78:	40 91 06 01 	lds	r20, 0x0106
     a7c:	50 91 07 01 	lds	r21, 0x0107
     a80:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__addsf3>
     a84:	f1 01       	movw	r30, r2
     a86:	64 83       	std	Z+4, r22	; 0x04
     a88:	75 83       	std	Z+5, r23	; 0x05
     a8a:	86 83       	std	Z+6, r24	; 0x06
     a8c:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[2] = angle * 180.0 / 3.14;
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	44 e3       	ldi	r20, 0x34	; 52
     a94:	53 e4       	ldi	r21, 0x43	; 67
     a96:	69 85       	ldd	r22, Y+9	; 0x09
     a98:	7a 85       	ldd	r23, Y+10	; 0x0a
     a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a9e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     aa2:	23 ec       	ldi	r18, 0xC3	; 195
     aa4:	35 ef       	ldi	r19, 0xF5	; 245
     aa6:	48 e4       	ldi	r20, 0x48	; 72
     aa8:	50 e4       	ldi	r21, 0x40	; 64
     aaa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__divsf3>
     aae:	f1 01       	movw	r30, r2
     ab0:	60 87       	std	Z+8, r22	; 0x08
     ab2:	71 87       	std	Z+9, r23	; 0x09
     ab4:	82 87       	std	Z+10, r24	; 0x0a
     ab6:	93 87       	std	Z+11, r25	; 0x0b
		data[3] = x[top];
     ab8:	00 91 40 01 	lds	r16, 0x0140
     abc:	10 91 41 01 	lds	r17, 0x0141
     ac0:	00 0f       	add	r16, r16
     ac2:	11 1f       	adc	r17, r17
     ac4:	f8 01       	movw	r30, r16
     ac6:	ee 5c       	subi	r30, 0xCE	; 206
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	60 81       	ld	r22, Z
     acc:	71 81       	ldd	r23, Z+1	; 0x01
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     ad6:	f1 01       	movw	r30, r2
     ad8:	64 87       	std	Z+12, r22	; 0x0c
     ada:	75 87       	std	Z+13, r23	; 0x0d
     adc:	86 87       	std	Z+14, r24	; 0x0e
     ade:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
     ae0:	f8 01       	movw	r30, r16
     ae2:	e6 5d       	subi	r30, 0xD6	; 214
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	60 81       	ld	r22, Z
     ae8:	71 81       	ldd	r23, Z+1	; 0x01
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     af2:	f1 01       	movw	r30, r2
     af4:	60 8b       	std	Z+16, r22	; 0x10
     af6:	71 8b       	std	Z+17, r23	; 0x11
     af8:	82 8b       	std	Z+18, r24	; 0x12
     afa:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
     afc:	00 91 3e 01 	lds	r16, 0x013E
     b00:	10 91 3f 01 	lds	r17, 0x013F
     b04:	00 0f       	add	r16, r16
     b06:	11 1f       	adc	r17, r17
     b08:	f8 01       	movw	r30, r16
     b0a:	ee 5c       	subi	r30, 0xCE	; 206
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	60 81       	ld	r22, Z
     b10:	71 81       	ldd	r23, Z+1	; 0x01
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     b1a:	f1 01       	movw	r30, r2
     b1c:	64 8b       	std	Z+20, r22	; 0x14
     b1e:	75 8b       	std	Z+21, r23	; 0x15
     b20:	86 8b       	std	Z+22, r24	; 0x16
     b22:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
     b24:	f8 01       	movw	r30, r16
     b26:	e6 5d       	subi	r30, 0xD6	; 214
     b28:	fe 4f       	sbci	r31, 0xFE	; 254
     b2a:	60 81       	ld	r22, Z
     b2c:	71 81       	ldd	r23, Z+1	; 0x01
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     b36:	f1 01       	movw	r30, r2
     b38:	60 8f       	std	Z+24, r22	; 0x18
     b3a:	71 8f       	std	Z+25, r23	; 0x19
     b3c:	82 8f       	std	Z+26, r24	; 0x1a
     b3e:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
     b40:	00 91 3a 01 	lds	r16, 0x013A
     b44:	10 91 3b 01 	lds	r17, 0x013B
     b48:	00 0f       	add	r16, r16
     b4a:	11 1f       	adc	r17, r17
     b4c:	f8 01       	movw	r30, r16
     b4e:	ee 5c       	subi	r30, 0xCE	; 206
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     b5e:	f1 01       	movw	r30, r2
     b60:	64 8f       	std	Z+28, r22	; 0x1c
     b62:	75 8f       	std	Z+29, r23	; 0x1d
     b64:	86 8f       	std	Z+30, r24	; 0x1e
     b66:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
     b68:	f8 01       	movw	r30, r16
     b6a:	e6 5d       	subi	r30, 0xD6	; 214
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     b7a:	f1 01       	movw	r30, r2
     b7c:	60 a3       	std	Z+32, r22	; 0x20
     b7e:	71 a3       	std	Z+33, r23	; 0x21
     b80:	82 a3       	std	Z+34, r24	; 0x22
     b82:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
     b84:	00 91 3c 01 	lds	r16, 0x013C
     b88:	10 91 3d 01 	lds	r17, 0x013D
     b8c:	00 0f       	add	r16, r16
     b8e:	11 1f       	adc	r17, r17
     b90:	f8 01       	movw	r30, r16
     b92:	ee 5c       	subi	r30, 0xCE	; 206
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	60 81       	ld	r22, Z
     b98:	71 81       	ldd	r23, Z+1	; 0x01
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     ba2:	f1 01       	movw	r30, r2
     ba4:	64 a3       	std	Z+36, r22	; 0x24
     ba6:	75 a3       	std	Z+37, r23	; 0x25
     ba8:	86 a3       	std	Z+38, r24	; 0x26
     baa:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
     bac:	f8 01       	movw	r30, r16
     bae:	e6 5d       	subi	r30, 0xD6	; 214
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__floatunsisf>
     bbe:	f1 01       	movw	r30, r2
     bc0:	60 a7       	std	Z+40, r22	; 0x28
     bc2:	71 a7       	std	Z+41, r23	; 0x29
     bc4:	82 a7       	std	Z+42, r24	; 0x2a
     bc6:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	44 e3       	ldi	r20, 0x34	; 52
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	c5 01       	movw	r24, r10
     bd2:	b4 01       	movw	r22, r8
     bd4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsf3>
     bd8:	23 ec       	ldi	r18, 0xC3	; 195
     bda:	35 ef       	ldi	r19, 0xF5	; 245
     bdc:	48 e4       	ldi	r20, 0x48	; 72
     bde:	50 e4       	ldi	r21, 0x40	; 64
     be0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__divsf3>
     be4:	f1 01       	movw	r30, r2
     be6:	64 a7       	std	Z+44, r22	; 0x2c
     be8:	75 a7       	std	Z+45, r23	; 0x2d
     bea:	86 a7       	std	Z+46, r24	; 0x2e
     bec:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
     bee:	59 81       	ldd	r21, Y+1	; 0x01
     bf0:	4a 81       	ldd	r20, Y+2	; 0x02
     bf2:	3b 81       	ldd	r19, Y+3	; 0x03
     bf4:	2c 81       	ldd	r18, Y+4	; 0x04
     bf6:	85 2f       	mov	r24, r21
     bf8:	94 2f       	mov	r25, r20
     bfa:	a3 2f       	mov	r26, r19
     bfc:	b2 2f       	mov	r27, r18
     bfe:	80 ab       	std	Z+48, r24	; 0x30
     c00:	91 ab       	std	Z+49, r25	; 0x31
     c02:	a2 ab       	std	Z+50, r26	; 0x32
     c04:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
     c06:	5d 81       	ldd	r21, Y+5	; 0x05
     c08:	4e 81       	ldd	r20, Y+6	; 0x06
     c0a:	3f 81       	ldd	r19, Y+7	; 0x07
     c0c:	28 85       	ldd	r18, Y+8	; 0x08
     c0e:	85 2f       	mov	r24, r21
     c10:	94 2f       	mov	r25, r20
     c12:	a3 2f       	mov	r26, r19
     c14:	b2 2f       	mov	r27, r18
     c16:	84 ab       	std	Z+52, r24	; 0x34
     c18:	95 ab       	std	Z+53, r25	; 0x35
     c1a:	a6 ab       	std	Z+54, r26	; 0x36
     c1c:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
     c1e:	c0 ae       	std	Z+56, r12	; 0x38
     c20:	d1 ae       	std	Z+57, r13	; 0x39
     c22:	e2 ae       	std	Z+58, r14	; 0x3a
     c24:	f3 ae       	std	Z+59, r15	; 0x3b
		return 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <__stack+0x12b>
		return 1;
	}
	
	return 0;
	*/
     c2a:	2e 96       	adiw	r28, 0x0e	; 14
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	08 95       	ret

00000c5c <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     c62:	80 ea       	ldi	r24, 0xA0	; 160
     c64:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     c68:	82 e1       	ldi	r24, 0x12	; 18
     c6a:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     c6c:	09 b4       	in	r0, 0x29	; 41
     c6e:	00 fe       	sbrs	r0, 0
     c70:	fd cf       	rjmp	.-6      	; 0xc6c <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     c72:	80 e9       	ldi	r24, 0x90	; 144
     c74:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     c78:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     c7c:	10 92 5b 01 	sts	0x015B, r1
	cdc_line_rtsdtr = 0;
     c80:	10 92 5c 01 	sts	0x015C, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     c84:	8c e0       	ldi	r24, 0x0C	; 12
     c86:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     c8a:	78 94       	sei
     c8c:	08 95       	ret

00000c8e <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
     c8e:	80 91 5b 01 	lds	r24, 0x015B
}
     c92:	08 95       	ret

00000c94 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     c94:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c96:	f8 94       	cli
	if (!usb_configuration) {
     c98:	80 91 5b 01 	lds	r24, 0x015B
     c9c:	81 11       	cpse	r24, r1
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <m_usb_rx_char+0x12>
		SREG = intr_state;
     ca0:	9f bf       	out	0x3f, r25	; 63
		return -1;
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     cac:	80 91 e8 00 	lds	r24, 0x00E8
     cb0:	85 fd       	sbrc	r24, 5
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
     cb4:	9f bf       	out	0x3f, r25	; 63
		return -1;
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
     cba:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     cbe:	20 91 e8 00 	lds	r18, 0x00E8
     cc2:	25 fd       	sbrc	r18, 5
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <m_usb_rx_char+0x38>
     cc6:	2b e6       	ldi	r18, 0x6B	; 107
     cc8:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
     ccc:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
     cce:	08 95       	ret

00000cd0 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     cd0:	9f b7       	in	r25, 0x3f	; 63
	cli();
     cd2:	f8 94       	cli
	if (usb_configuration) {
     cd4:	80 91 5b 01 	lds	r24, 0x015B
     cd8:	88 23       	and	r24, r24
     cda:	31 f0       	breq	.+12     	; 0xce8 <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     ce2:	80 91 f2 00 	lds	r24, 0x00F2
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
     cea:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     cec:	08 95       	ret

00000cee <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     cee:	80 91 5b 01 	lds	r24, 0x015B
     cf2:	88 23       	and	r24, r24
     cf4:	89 f0       	breq	.+34     	; 0xd18 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
     cf6:	2f b7       	in	r18, 0x3f	; 63
		cli();
     cf8:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
     d00:	80 91 e8 00 	lds	r24, 0x00E8
     d04:	85 ff       	sbrs	r24, 5
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
     d08:	e8 ee       	ldi	r30, 0xE8	; 232
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	9b e6       	ldi	r25, 0x6B	; 107
     d0e:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     d10:	80 81       	ld	r24, Z
     d12:	85 fd       	sbrc	r24, 5
     d14:	fc cf       	rjmp	.-8      	; 0xd0e <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     d16:	2f bf       	out	0x3f, r18	; 63
     d18:	08 95       	ret

00000d1a <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     d1e:	90 91 5b 01 	lds	r25, 0x015B
     d22:	99 23       	and	r25, r25
     d24:	09 f4       	brne	.+2      	; 0xd28 <m_usb_tx_char+0xe>
     d26:	4d c0       	rjmp	.+154    	; 0xdc2 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     d28:	9f b7       	in	r25, 0x3f	; 63
	cli();
     d2a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     d2c:	24 e0       	ldi	r18, 0x04	; 4
     d2e:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     d32:	20 91 5d 01 	lds	r18, 0x015D
     d36:	22 23       	and	r18, r18
     d38:	49 f0       	breq	.+18     	; 0xd4c <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     d3a:	20 91 e8 00 	lds	r18, 0x00E8
     d3e:	25 fd       	sbrc	r18, 5
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     d42:	9f bf       	out	0x3f, r25	; 63
			return -1;
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	42 c0       	rjmp	.+132    	; 0xdcc <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
     d48:	10 92 5d 01 	sts	0x015D, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     d4c:	30 91 e4 00 	lds	r19, 0x00E4
     d50:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     d52:	20 91 e8 00 	lds	r18, 0x00E8
     d56:	25 fd       	sbrc	r18, 5
     d58:	25 c0       	rjmp	.+74     	; 0xda4 <m_usb_tx_char+0x8a>
		SREG = intr_state;
     d5a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     d5c:	90 91 e4 00 	lds	r25, 0x00E4
     d60:	93 17       	cp	r25, r19
     d62:	49 f0       	breq	.+18     	; 0xd76 <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     d64:	90 91 5b 01 	lds	r25, 0x015B
     d68:	91 11       	cpse	r25, r1
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <m_usb_tx_char+0x70>
     d6c:	2c c0       	rjmp	.+88     	; 0xdc6 <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     d6e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     d70:	98 81       	ld	r25, Y
     d72:	93 13       	cpse	r25, r19
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	80 93 5d 01 	sts	0x015D, r24
			return -1;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	26 c0       	rjmp	.+76     	; 0xdcc <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     d80:	90 91 5b 01 	lds	r25, 0x015B
     d84:	91 11       	cpse	r25, r1
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <m_usb_tx_char+0x7e>
     d88:	20 c0       	rjmp	.+64     	; 0xdca <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     d8a:	a9 ee       	ldi	r26, 0xE9	; 233
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     d90:	e8 ee       	ldi	r30, 0xE8	; 232
     d92:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     d94:	c4 ee       	ldi	r28, 0xE4	; 228
     d96:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
     d98:	9f b7       	in	r25, 0x3f	; 63
		cli();
     d9a:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     d9c:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     d9e:	20 81       	ld	r18, Z
     da0:	25 ff       	sbrs	r18, 5
     da2:	e5 cf       	rjmp	.-54     	; 0xd6e <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     da4:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     da8:	80 91 e8 00 	lds	r24, 0x00E8
     dac:	85 fd       	sbrc	r24, 5
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <m_usb_tx_char+0x9c>
     db0:	8a e3       	ldi	r24, 0x3A	; 58
     db2:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     db6:	85 e0       	ldi	r24, 0x05	; 5
     db8:	80 93 5a 01 	sts	0x015A, r24
	SREG = intr_state;
     dbc:	9f bf       	out	0x3f, r25	; 63
	return 0;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <m_usb_tx_char+0xb2>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     de4:	e1 ee       	ldi	r30, 0xE1	; 225
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
        UDINT = 0;
     dea:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     dec:	83 ff       	sbrs	r24, 3
     dee:	11 c0       	rjmp	.+34     	; 0xe12 <__vector_10+0x40>
		UENUM = 0;
     df0:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     dfa:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     dfe:	92 e1       	ldi	r25, 0x12	; 18
     e00:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     e04:	98 e0       	ldi	r25, 0x08	; 8
     e06:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     e0a:	10 92 5b 01 	sts	0x015B, r1
		cdc_line_rtsdtr = 0;
     e0e:	10 92 5c 01 	sts	0x015C, r1
        }
	if (intbits & (1<<SOFI)) {
     e12:	82 ff       	sbrs	r24, 2
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <__vector_10+0x6a>
		if (usb_configuration) {
     e16:	80 91 5b 01 	lds	r24, 0x015B
     e1a:	88 23       	and	r24, r24
     e1c:	79 f0       	breq	.+30     	; 0xe3c <__vector_10+0x6a>
			t = transmit_flush_timer;
     e1e:	80 91 5a 01 	lds	r24, 0x015A
			if (t) {
     e22:	88 23       	and	r24, r24
     e24:	59 f0       	breq	.+22     	; 0xe3c <__vector_10+0x6a>
				transmit_flush_timer = --t;
     e26:	81 50       	subi	r24, 0x01	; 1
     e28:	80 93 5a 01 	sts	0x015A, r24
				if (!t) {
     e2c:	81 11       	cpse	r24, r1
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     e36:	8a e3       	ldi	r24, 0x3A	; 58
     e38:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     e78:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     e80:	83 ff       	sbrs	r24, 3
     e82:	51 c1       	rjmp	.+674    	; 0x1126 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
     e84:	e1 ef       	ldi	r30, 0xF1	; 241
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	70 81       	ld	r23, Z
                bRequest = UEDATX;
     e8a:	40 81       	ld	r20, Z
                wValue = UEDATX;
     e8c:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     e8e:	30 81       	ld	r19, Z
     e90:	93 2f       	mov	r25, r19
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	dc 01       	movw	r26, r24
     e96:	a2 2b       	or	r26, r18
     e98:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
     e9a:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
     e9c:	60 81       	ld	r22, Z
     e9e:	96 2f       	mov	r25, r22
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	85 2b       	or	r24, r21
                wLength = UEDATX;
     ea4:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
     ea6:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     ea8:	52 ef       	ldi	r21, 0xF2	; 242
     eaa:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
     eae:	46 30       	cpi	r20, 0x06	; 6
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__vector_11+0x66>
     eb2:	5c c0       	rjmp	.+184    	; 0xf6c <__vector_11+0x11e>
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     eb6:	81 e2       	ldi	r24, 0x21	; 33
     eb8:	80 93 eb 00 	sts	0x00EB, r24
					return;
     ebc:	3b c1       	rjmp	.+630    	; 0x1134 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
     ebe:	c6 e0       	ldi	r28, 0x06	; 6
     ec0:	47 ef       	ldi	r20, 0xF7	; 247
     ec2:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
     ec4:	fa 01       	movw	r30, r20
     ec6:	65 91       	lpm	r22, Z+
     ec8:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
     eca:	26 17       	cp	r18, r22
     ecc:	37 07       	cpc	r19, r23
     ece:	19 f0       	breq	.+6      	; 0xed6 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
     ed0:	49 5f       	subi	r20, 0xF9	; 249
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
     ed4:	20 c0       	rjmp	.+64     	; 0xf16 <__vector_11+0xc8>
				}
				list += 2;
     ed6:	fa 01       	movw	r30, r20
     ed8:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     eda:	65 91       	lpm	r22, Z+
     edc:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
     ede:	86 17       	cp	r24, r22
     ee0:	97 07       	cpc	r25, r23
     ee2:	19 f0       	breq	.+6      	; 0xeea <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
     ee4:	49 5f       	subi	r20, 0xF9	; 249
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
     ee8:	16 c0       	rjmp	.+44     	; 0xf16 <__vector_11+0xc8>
				}
				list += 2;
     eea:	fa 01       	movw	r30, r20
     eec:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     eee:	85 91       	lpm	r24, Z+
     ef0:	94 91       	lpm	r25, Z
     ef2:	28 2f       	mov	r18, r24
     ef4:	39 2f       	mov	r19, r25
				list += 2;
     ef6:	fa 01       	movw	r30, r20
     ef8:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     efa:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     efc:	9b 2f       	mov	r25, r27
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     f02:	8f 3f       	cpi	r24, 0xFF	; 255
     f04:	91 05       	cpc	r25, r1
     f06:	19 f0       	breq	.+6      	; 0xf0e <__vector_11+0xc0>
     f08:	10 f0       	brcs	.+4      	; 0xf0e <__vector_11+0xc0>
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	84 17       	cp	r24, r20
     f10:	28 f4       	brcc	.+10     	; 0xf1c <__vector_11+0xce>
     f12:	48 2f       	mov	r20, r24
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <__vector_11+0xce>
     f16:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     f18:	a9 f6       	brne	.-86     	; 0xec4 <__vector_11+0x76>
     f1a:	cd cf       	rjmp	.-102    	; 0xeb6 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     f1c:	c8 ee       	ldi	r28, 0xE8	; 232
     f1e:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f20:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     f22:	a1 ef       	ldi	r26, 0xF1	; 241
     f24:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     f26:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     f28:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     f2a:	98 2f       	mov	r25, r24
     f2c:	95 70       	andi	r25, 0x05	; 5
     f2e:	e1 f3       	breq	.-8      	; 0xf28 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
     f30:	82 fd       	sbrc	r24, 2
     f32:	00 c1       	rjmp	.+512    	; 0x1134 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     f34:	64 2f       	mov	r22, r20
     f36:	41 31       	cpi	r20, 0x11	; 17
     f38:	08 f0       	brcs	.+2      	; 0xf3c <__vector_11+0xee>
     f3a:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
     f3c:	66 23       	and	r22, r22
     f3e:	09 f4       	brne	.+2      	; 0xf42 <__vector_11+0xf4>
     f40:	f6 c0       	rjmp	.+492    	; 0x112e <__vector_11+0x2e0>
     f42:	c9 01       	movw	r24, r18
     f44:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
     f46:	fc 01       	movw	r30, r24
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	e4 91       	lpm	r30, Z
     f4c:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     f4e:	51 50       	subi	r21, 0x01	; 1
     f50:	d1 f7       	brne	.-12     	; 0xf46 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
     f52:	86 2f       	mov	r24, r22
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	28 0f       	add	r18, r24
     f5c:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     f5e:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f60:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     f62:	41 11       	cpse	r20, r1
     f64:	e1 cf       	rjmp	.-62     	; 0xf28 <__vector_11+0xda>
     f66:	60 31       	cpi	r22, 0x10	; 16
     f68:	f9 f2       	breq	.-66     	; 0xf28 <__vector_11+0xda>
     f6a:	e4 c0       	rjmp	.+456    	; 0x1134 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     f6c:	45 30       	cpi	r20, 0x05	; 5
     f6e:	61 f4       	brne	.+24     	; 0xf88 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f70:	8e ef       	ldi	r24, 0xFE	; 254
     f72:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f76:	e8 ee       	ldi	r30, 0xE8	; 232
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 ff       	sbrs	r24, 0
     f7e:	fd cf       	rjmp	.-6      	; 0xf7a <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     f80:	20 68       	ori	r18, 0x80	; 128
     f82:	20 93 e3 00 	sts	0x00E3, r18
			return;
     f86:	d6 c0       	rjmp	.+428    	; 0x1134 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     f88:	49 30       	cpi	r20, 0x09	; 9
     f8a:	a1 f5       	brne	.+104    	; 0xff4 <__vector_11+0x1a6>
     f8c:	71 11       	cpse	r23, r1
     f8e:	5b c0       	rjmp	.+182    	; 0x1046 <__vector_11+0x1f8>
			usb_configuration = wValue;
     f90:	20 93 5b 01 	sts	0x015B, r18
			cdc_line_rtsdtr = 0;
     f94:	10 92 5c 01 	sts	0x015C, r1
			transmit_flush_timer = 0;
     f98:	10 92 5a 01 	sts	0x015A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f9c:	8e ef       	ldi	r24, 0xFE	; 254
     f9e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     fa2:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     fa4:	81 e2       	ldi	r24, 0x21	; 33
     fa6:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     fa8:	c9 ee       	ldi	r28, 0xE9	; 233
     faa:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     fac:	ab ee       	ldi	r26, 0xEB	; 235
     fae:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     fb0:	6c ee       	ldi	r22, 0xEC	; 236
     fb2:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     fb4:	4d ee       	ldi	r20, 0xED	; 237
     fb6:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     fb8:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
     fba:	9c 01       	movw	r18, r24
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	fc 01       	movw	r30, r24
     fc2:	04 91       	lpm	r16, Z
				UECONX = en;
     fc4:	0c 93       	st	X, r16
				if (en) {
     fc6:	00 23       	and	r16, r16
     fc8:	59 f0       	breq	.+22     	; 0xfe0 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
     fca:	f9 01       	movw	r30, r18
     fcc:	24 91       	lpm	r18, Z
     fce:	fb 01       	movw	r30, r22
     fd0:	20 83       	st	Z, r18
     fd2:	fc 01       	movw	r30, r24
     fd4:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
     fd6:	03 96       	adiw	r24, 0x03	; 3
     fd8:	24 91       	lpm	r18, Z
     fda:	fa 01       	movw	r30, r20
     fdc:	20 83       	st	Z, r18
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     fe0:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     fe2:	1f 5f       	subi	r17, 0xFF	; 255
     fe4:	15 30       	cpi	r17, 0x05	; 5
     fe6:	41 f7       	brne	.-48     	; 0xfb8 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     fe8:	ea ee       	ldi	r30, 0xEA	; 234
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	8e e1       	ldi	r24, 0x1E	; 30
     fee:	80 83       	st	Z, r24
        		UERST = 0;
     ff0:	10 82       	st	Z, r1
			return;
     ff2:	a0 c0       	rjmp	.+320    	; 0x1134 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     ff4:	48 30       	cpi	r20, 0x08	; 8
     ff6:	81 f4       	brne	.+32     	; 0x1018 <__vector_11+0x1ca>
     ff8:	70 38       	cpi	r23, 0x80	; 128
     ffa:	09 f0       	breq	.+2      	; 0xffe <__vector_11+0x1b0>
     ffc:	3f c0       	rjmp	.+126    	; 0x107c <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     ffe:	e8 ee       	ldi	r30, 0xE8	; 232
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 ff       	sbrs	r24, 0
    1006:	fd cf       	rjmp	.-6      	; 0x1002 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1008:	80 91 5b 01 	lds	r24, 0x015B
    100c:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1010:	8e ef       	ldi	r24, 0xFE	; 254
    1012:	80 93 e8 00 	sts	0x00E8, r24
    1016:	8e c0       	rjmp	.+284    	; 0x1134 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1018:	41 32       	cpi	r20, 0x21	; 33
    101a:	a9 f4       	brne	.+42     	; 0x1046 <__vector_11+0x1f8>
    101c:	71 3a       	cpi	r23, 0xA1	; 161
    101e:	f1 f5       	brne	.+124    	; 0x109c <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1020:	e8 ee       	ldi	r30, 0xE8	; 232
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 ff       	sbrs	r24, 0
    1028:	fd cf       	rjmp	.-6      	; 0x1024 <__vector_11+0x1d6>
    102a:	ec e0       	ldi	r30, 0x0C	; 12
    102c:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    102e:	a1 ef       	ldi	r26, 0xF1	; 241
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	81 91       	ld	r24, Z+
    1034:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	e3 31       	cpi	r30, 0x13	; 19
    103a:	f4 07       	cpc	r31, r20
    103c:	d1 f7       	brne	.-12     	; 0x1032 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    103e:	8e ef       	ldi	r24, 0xFE	; 254
    1040:	80 93 e8 00 	sts	0x00E8, r24
    1044:	77 c0       	rjmp	.+238    	; 0x1134 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1046:	40 32       	cpi	r20, 0x20	; 32
    1048:	c9 f4       	brne	.+50     	; 0x107c <__vector_11+0x22e>
    104a:	71 32       	cpi	r23, 0x21	; 33
    104c:	09 f0       	breq	.+2      	; 0x1050 <__vector_11+0x202>
    104e:	6b c0       	rjmp	.+214    	; 0x1126 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1050:	e8 ee       	ldi	r30, 0xE8	; 232
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	82 ff       	sbrs	r24, 2
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <__vector_11+0x206>
    105a:	ec e0       	ldi	r30, 0x0C	; 12
    105c:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    105e:	a1 ef       	ldi	r26, 0xF1	; 241
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	8c 91       	ld	r24, X
    1064:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1066:	51 e0       	ldi	r21, 0x01	; 1
    1068:	e3 31       	cpi	r30, 0x13	; 19
    106a:	f5 07       	cpc	r31, r21
    106c:	d1 f7       	brne	.-12     	; 0x1062 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    106e:	e8 ee       	ldi	r30, 0xE8	; 232
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8b ef       	ldi	r24, 0xFB	; 251
    1074:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1076:	8e ef       	ldi	r24, 0xFE	; 254
    1078:	80 83       	st	Z, r24
    107a:	5c c0       	rjmp	.+184    	; 0x1134 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    107c:	42 32       	cpi	r20, 0x22	; 34
    107e:	71 f4       	brne	.+28     	; 0x109c <__vector_11+0x24e>
    1080:	71 32       	cpi	r23, 0x21	; 33
    1082:	09 f0       	breq	.+2      	; 0x1086 <__vector_11+0x238>
    1084:	50 c0       	rjmp	.+160    	; 0x1126 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1086:	20 93 5c 01 	sts	0x015C, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    108a:	e8 ee       	ldi	r30, 0xE8	; 232
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 ff       	sbrs	r24, 0
    1092:	fd cf       	rjmp	.-6      	; 0x108e <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1094:	8e ef       	ldi	r24, 0xFE	; 254
    1096:	80 93 e8 00 	sts	0x00E8, r24
    109a:	4c c0       	rjmp	.+152    	; 0x1134 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    109c:	41 11       	cpse	r20, r1
    109e:	1a c0       	rjmp	.+52     	; 0x10d4 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    10a0:	e8 ee       	ldi	r30, 0xE8	; 232
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	20 81       	ld	r18, Z
    10a6:	20 ff       	sbrs	r18, 0
    10a8:	fd cf       	rjmp	.-6      	; 0x10a4 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    10aa:	72 38       	cpi	r23, 0x82	; 130
    10ac:	51 f4       	brne	.+20     	; 0x10c2 <__vector_11+0x274>
				UENUM = wIndex;
    10ae:	e9 ee       	ldi	r30, 0xE9	; 233
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    10b4:	80 91 eb 00 	lds	r24, 0x00EB
    10b8:	85 fb       	bst	r24, 5
    10ba:	88 27       	eor	r24, r24
    10bc:	80 f9       	bld	r24, 0
				UENUM = 0;
    10be:	10 82       	st	Z, r1
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    10c2:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    10c4:	e1 ef       	ldi	r30, 0xF1	; 241
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 83       	st	Z, r24
			UEDATX = 0;
    10ca:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10cc:	8e ef       	ldi	r24, 0xFE	; 254
    10ce:	80 93 e8 00 	sts	0x00E8, r24
    10d2:	30 c0       	rjmp	.+96     	; 0x1134 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    10d4:	41 30       	cpi	r20, 0x01	; 1
    10d6:	11 f0       	breq	.+4      	; 0x10dc <__vector_11+0x28e>
    10d8:	43 30       	cpi	r20, 0x03	; 3
    10da:	29 f5       	brne	.+74     	; 0x1126 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    10dc:	72 30       	cpi	r23, 0x02	; 2
    10de:	19 f5       	brne	.+70     	; 0x1126 <__vector_11+0x2d8>
    10e0:	23 2b       	or	r18, r19
    10e2:	09 f5       	brne	.+66     	; 0x1126 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    10e4:	8f 77       	andi	r24, 0x7F	; 127
    10e6:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    10e8:	38 2f       	mov	r19, r24
    10ea:	31 50       	subi	r19, 0x01	; 1
    10ec:	34 30       	cpi	r19, 0x04	; 4
    10ee:	d8 f4       	brcc	.+54     	; 0x1126 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10f0:	3e ef       	ldi	r19, 0xFE	; 254
    10f2:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    10f6:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    10fa:	43 30       	cpi	r20, 0x03	; 3
    10fc:	21 f4       	brne	.+8      	; 0x1106 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    10fe:	81 e2       	ldi	r24, 0x21	; 33
    1100:	80 93 eb 00 	sts	0x00EB, r24
    1104:	17 c0       	rjmp	.+46     	; 0x1134 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1106:	99 e1       	ldi	r25, 0x19	; 25
    1108:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	d9 01       	movw	r26, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <__vector_11+0x2ca>
    1114:	aa 0f       	add	r26, r26
    1116:	bb 1f       	adc	r27, r27
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <__vector_11+0x2c6>
    111c:	ea ee       	ldi	r30, 0xEA	; 234
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	a0 83       	st	Z, r26
					UERST = 0;
    1122:	10 82       	st	Z, r1
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1126:	81 e2       	ldi	r24, 0x21	; 33
    1128:	80 93 eb 00 	sts	0x00EB, r24
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    112e:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1130:	41 11       	cpse	r20, r1
    1132:	fa ce       	rjmp	.-524    	; 0xf28 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	27 97       	sbiw	r28, 0x07	; 7
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    117a:	8e 01       	movw	r16, r28
    117c:	0f 5f       	subi	r16, 0xFF	; 255
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	27 e0       	ldi	r18, 0x07	; 7
    1182:	f8 01       	movw	r30, r16
    1184:	11 92       	st	Z+, r1
    1186:	2a 95       	dec	r18
    1188:	e9 f7       	brne	.-6      	; 0x1184 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    118a:	4a e0       	ldi	r20, 0x0A	; 10
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	b8 01       	movw	r22, r16
    1190:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1194:	7e 01       	movw	r14, r28
    1196:	f8 e0       	ldi	r31, 0x08	; 8
    1198:	ef 0e       	add	r14, r31
    119a:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    119c:	f8 01       	movw	r30, r16
    119e:	81 91       	ld	r24, Z+
    11a0:	8f 01       	movw	r16, r30
    11a2:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    11a4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    11a8:	0e 15       	cp	r16, r14
    11aa:	1f 05       	cpc	r17, r15
    11ac:	b9 f7       	brne	.-18     	; 0x119c <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    11ae:	27 96       	adiw	r28, 0x07	; 7
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	08 95       	ret

000011c8 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    11cc:	ec eb       	ldi	r30, 0xBC	; 188
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	88 23       	and	r24, r24
    11d4:	34 f0       	brlt	.+12     	; 0x11e2 <twi_wait+0x1a>
    11d6:	2f 5f       	subi	r18, 0xFF	; 255
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	29 3e       	cpi	r18, 0xE9	; 233
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	38 07       	cpc	r19, r24
    11e0:	b9 f7       	brne	.-18     	; 0x11d0 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	28 3e       	cpi	r18, 0xE8	; 232
    11e6:	33 40       	sbci	r19, 0x03	; 3
    11e8:	09 f4       	brne	.+2      	; 0x11ec <twi_wait+0x24>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    11ec:	08 95       	ret

000011ee <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    11ee:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    11f2:	84 e8       	ldi	r24, 0x84	; 132
    11f4:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    11f8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <twi_wait>
    11fc:	88 23       	and	r24, r24
    11fe:	21 f0       	breq	.+8      	; 0x1208 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1200:	80 91 b9 00 	lds	r24, 0x00B9
    1204:	88 7f       	andi	r24, 0xF8	; 248
    1206:	08 95       	ret
	} else {
		return 0;					// comm failure
    1208:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    120a:	08 95       	ret

0000120c <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    120c:	cf 93       	push	r28
    120e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1210:	94 ea       	ldi	r25, 0xA4	; 164
    1212:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1216:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <twi_wait>
    121a:	88 23       	and	r24, r24
    121c:	61 f0       	breq	.+24     	; 0x1236 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    121e:	8c 2f       	mov	r24, r28
    1220:	88 0f       	add	r24, r24
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1228:	88 34       	cpi	r24, 0x48	; 72
    122a:	39 f4       	brne	.+14     	; 0x123a <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    122c:	84 e9       	ldi	r24, 0x94	; 148
    122e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	03 c0       	rjmp	.+6      	; 0x123c <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	01 c0       	rjmp	.+2      	; 0x123c <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    123a:	81 e0       	ldi	r24, 0x01	; 1
}	
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1240:	cf 93       	push	r28
    1242:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1244:	94 ea       	ldi	r25, 0xA4	; 164
    1246:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    124a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <twi_wait>
    124e:	88 23       	and	r24, r24
    1250:	59 f0       	breq	.+22     	; 0x1268 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1252:	8c 2f       	mov	r24, r28
    1254:	88 0f       	add	r24, r24
    1256:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    125a:	80 32       	cpi	r24, 0x20	; 32
    125c:	39 f4       	brne	.+14     	; 0x126c <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    125e:	84 e9       	ldi	r24, 0x94	; 148
    1260:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	03 c0       	rjmp	.+6      	; 0x126e <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	01 c0       	rjmp	.+2      	; 0x126e <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    126c:	81 e0       	ldi	r24, 0x01	; 1
}	
    126e:	cf 91       	pop	r28
    1270:	08 95       	ret

00001272 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1272:	84 e9       	ldi	r24, 0x94	; 148
    1274:	80 93 bc 00 	sts	0x00BC, r24
    1278:	08 95       	ret

0000127a <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	60 97       	sbiw	r28, 0x10	; 16
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	e8 2e       	mov	r14, r24
    1298:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    129a:	fe 01       	movw	r30, r28
    129c:	31 96       	adiw	r30, 0x01	; 1
    129e:	80 e1       	ldi	r24, 0x10	; 16
    12a0:	df 01       	movw	r26, r30
    12a2:	1d 92       	st	X+, r1
    12a4:	8a 95       	dec	r24
    12a6:	e9 f7       	brne	.-6      	; 0x12a2 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    12a8:	88 e5       	ldi	r24, 0x58	; 88
    12aa:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <m_wii_read+0x3a>
    12b2:	66 c0       	rjmp	.+204    	; 0x1380 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    12b4:	86 e3       	ldi	r24, 0x36	; 54
    12b6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    12ba:	88 23       	and	r24, r24
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <m_wii_read+0x46>
    12be:	62 c0       	rjmp	.+196    	; 0x1384 <m_wii_read+0x10a>
	end();
    12c0:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12c4:	b8 e0       	ldi	r27, 0x08	; 8
    12c6:	ba 95       	dec	r27
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <m_wii_read+0x4c>
    12ca:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    12cc:	88 e5       	ldi	r24, 0x58	; 88
    12ce:	0e 94 06 09 	call	0x120c	; 0x120c <start_read>
    12d2:	88 23       	and	r24, r24
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <m_wii_read+0x5e>
    12d6:	58 c0       	rjmp	.+176    	; 0x1388 <m_wii_read+0x10e>
    12d8:	ae 01       	movw	r20, r28
    12da:	4f 5f       	subi	r20, 0xFF	; 255
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    12de:	8e 01       	movw	r16, r28
    12e0:	00 5f       	subi	r16, 0xF0	; 240
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    12e4:	ec eb       	ldi	r30, 0xBC	; 188
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    12ea:	2b eb       	ldi	r18, 0xBB	; 187
    12ec:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    12ee:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    12f0:	80 81       	ld	r24, Z
    12f2:	88 23       	and	r24, r24
    12f4:	ec f7       	brge	.-6      	; 0x12f0 <m_wii_read+0x76>
		temp[i] = TWDR;
    12f6:	d9 01       	movw	r26, r18
    12f8:	8c 91       	ld	r24, X
    12fa:	da 01       	movw	r26, r20
    12fc:	8d 93       	st	X+, r24
    12fe:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1300:	a0 17       	cp	r26, r16
    1302:	b1 07       	cpc	r27, r17
    1304:	a1 f7       	brne	.-24     	; 0x12ee <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1306:	84 e8       	ldi	r24, 0x84	; 132
    1308:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    130c:	ec eb       	ldi	r30, 0xBC	; 188
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 23       	and	r24, r24
    1314:	ec f7       	brge	.-6      	; 0x1310 <m_wii_read+0x96>
	temp[15] = TWDR;
    1316:	80 91 bb 00 	lds	r24, 0x00BB
    131a:	88 8b       	std	Y+16, r24	; 0x10
	end();
    131c:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
    1320:	de 01       	movw	r26, r28
    1322:	14 96       	adiw	r26, 0x04	; 4
    1324:	6e 2d       	mov	r22, r14
    1326:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1328:	4c 91       	ld	r20, X
    132a:	24 2f       	mov	r18, r20
    132c:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    132e:	cd 01       	movw	r24, r26
    1330:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1332:	fc 01       	movw	r30, r24
    1334:	80 81       	ld	r24, Z
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	f0 e1       	ldi	r31, 0x10	; 16
    133a:	2f 9f       	mul	r18, r31
    133c:	80 0d       	add	r24, r0
    133e:	91 1d       	adc	r25, r1
    1340:	11 24       	eor	r1, r1
    1342:	fb 01       	movw	r30, r22
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1348:	84 2f       	mov	r24, r20
    134a:	80 7c       	andi	r24, 0xC0	; 192
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1356:	9d 01       	movw	r18, r26
    1358:	21 50       	subi	r18, 0x01	; 1
    135a:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	82 0f       	add	r24, r18
    1362:	91 1d       	adc	r25, r1
    1364:	fb 01       	movw	r30, r22
    1366:	93 83       	std	Z+3, r25	; 0x03
    1368:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    136a:	4f 70       	andi	r20, 0x0F	; 15
    136c:	44 83       	std	Z+4, r20	; 0x04
    136e:	15 82       	std	Z+5, r1	; 0x05
    1370:	13 96       	adiw	r26, 0x03	; 3
    1372:	6a 5f       	subi	r22, 0xFA	; 250
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1376:	0a 17       	cp	r16, r26
    1378:	1b 07       	cpc	r17, r27
    137a:	b1 f6       	brne	.-84     	; 0x1328 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	05 c0       	rjmp	.+10     	; 0x138a <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	03 c0       	rjmp	.+6      	; 0x138a <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	01 c0       	rjmp	.+2      	; 0x138a <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1388:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    138a:	60 96       	adiw	r28, 0x10	; 16
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    13a4:	0e 94 39 01 	call	0x272	; 0x272 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    13a8:	88 e5       	ldi	r24, 0x58	; 88
    13aa:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    13ae:	88 23       	and	r24, r24
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <m_wii_open+0x10>
    13b2:	c7 c0       	rjmp	.+398    	; 0x1542 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    13b4:	80 e3       	ldi	r24, 0x30	; 48
    13b6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <m_wii_open+0x1c>
    13be:	c3 c0       	rjmp	.+390    	; 0x1546 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    13c6:	88 23       	and	r24, r24
    13c8:	09 f4       	brne	.+2      	; 0x13cc <m_wii_open+0x28>
    13ca:	bf c0       	rjmp	.+382    	; 0x154a <m_wii_open+0x1a6>
	end();
    13cc:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13d0:	83 ec       	ldi	r24, 0xC3	; 195
    13d2:	99 e0       	ldi	r25, 0x09	; 9
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <m_wii_open+0x30>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <m_wii_open+0x36>
    13da:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    13dc:	88 e5       	ldi	r24, 0x58	; 88
    13de:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <m_wii_open+0x44>
    13e6:	b3 c0       	rjmp	.+358    	; 0x154e <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <m_wii_open+0x50>
    13f2:	af c0       	rjmp	.+350    	; 0x1552 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    13fa:	88 23       	and	r24, r24
    13fc:	09 f4       	brne	.+2      	; 0x1400 <m_wii_open+0x5c>
    13fe:	ab c0       	rjmp	.+342    	; 0x1556 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <m_wii_open+0x68>
    140a:	a7 c0       	rjmp	.+334    	; 0x155a <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <m_wii_open+0x74>
    1416:	a3 c0       	rjmp	.+326    	; 0x155e <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    141e:	88 23       	and	r24, r24
    1420:	09 f4       	brne	.+2      	; 0x1424 <m_wii_open+0x80>
    1422:	9f c0       	rjmp	.+318    	; 0x1562 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <m_wii_open+0x8c>
    142e:	9b c0       	rjmp	.+310    	; 0x1566 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    1436:	88 23       	and	r24, r24
    1438:	09 f4       	brne	.+2      	; 0x143c <m_wii_open+0x98>
    143a:	97 c0       	rjmp	.+302    	; 0x156a <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    143c:	80 e9       	ldi	r24, 0x90	; 144
    143e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    1442:	88 23       	and	r24, r24
    1444:	09 f4       	brne	.+2      	; 0x1448 <m_wii_open+0xa4>
    1446:	93 c0       	rjmp	.+294    	; 0x156e <m_wii_open+0x1ca>
	end();
    1448:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
    144c:	83 ec       	ldi	r24, 0xC3	; 195
    144e:	99 e0       	ldi	r25, 0x09	; 9
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <m_wii_open+0xac>
    1454:	00 c0       	rjmp	.+0      	; 0x1456 <m_wii_open+0xb2>
    1456:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1458:	88 e5       	ldi	r24, 0x58	; 88
    145a:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <m_wii_open+0xc0>
    1462:	87 c0       	rjmp	.+270    	; 0x1572 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1464:	87 e0       	ldi	r24, 0x07	; 7
    1466:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    146a:	88 23       	and	r24, r24
    146c:	09 f4       	brne	.+2      	; 0x1470 <m_wii_open+0xcc>
    146e:	83 c0       	rjmp	.+262    	; 0x1576 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <m_wii_open+0xd8>
    147a:	7f c0       	rjmp	.+254    	; 0x157a <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    147c:	81 e4       	ldi	r24, 0x41	; 65
    147e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    1482:	88 23       	and	r24, r24
    1484:	09 f4       	brne	.+2      	; 0x1488 <m_wii_open+0xe4>
    1486:	7b c0       	rjmp	.+246    	; 0x157e <m_wii_open+0x1da>
	end();
    1488:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
    148c:	83 ec       	ldi	r24, 0xC3	; 195
    148e:	99 e0       	ldi	r25, 0x09	; 9
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <m_wii_open+0xec>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <m_wii_open+0xf2>
    1496:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1498:	88 e5       	ldi	r24, 0x58	; 88
    149a:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <m_wii_open+0x100>
    14a2:	6f c0       	rjmp	.+222    	; 0x1582 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    14a4:	8a e1       	ldi	r24, 0x1A	; 26
    14a6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    14aa:	88 23       	and	r24, r24
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <m_wii_open+0x10c>
    14ae:	6b c0       	rjmp	.+214    	; 0x1586 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    14b0:	80 e4       	ldi	r24, 0x40	; 64
    14b2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <m_wii_open+0x118>
    14ba:	67 c0       	rjmp	.+206    	; 0x158a <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    14c2:	88 23       	and	r24, r24
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <m_wii_open+0x124>
    14c6:	63 c0       	rjmp	.+198    	; 0x158e <m_wii_open+0x1ea>
	end();
    14c8:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
    14cc:	83 ec       	ldi	r24, 0xC3	; 195
    14ce:	99 e0       	ldi	r25, 0x09	; 9
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <m_wii_open+0x12c>
    14d4:	00 c0       	rjmp	.+0      	; 0x14d6 <m_wii_open+0x132>
    14d6:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    14d8:	88 e5       	ldi	r24, 0x58	; 88
    14da:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    14de:	88 23       	and	r24, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <m_wii_open+0x140>
    14e2:	57 c0       	rjmp	.+174    	; 0x1592 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    14e4:	83 e3       	ldi	r24, 0x33	; 51
    14e6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    14ea:	88 23       	and	r24, r24
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <m_wii_open+0x14c>
    14ee:	53 c0       	rjmp	.+166    	; 0x1596 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    14f6:	88 23       	and	r24, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <m_wii_open+0x158>
    14fa:	4f c0       	rjmp	.+158    	; 0x159a <m_wii_open+0x1f6>
	end();
    14fc:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
    1500:	83 ec       	ldi	r24, 0xC3	; 195
    1502:	99 e0       	ldi	r25, 0x09	; 9
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <m_wii_open+0x160>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <m_wii_open+0x166>
    150a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    150c:	88 e5       	ldi	r24, 0x58	; 88
    150e:	0e 94 20 09 	call	0x1240	; 0x1240 <start_write>
    1512:	88 23       	and	r24, r24
    1514:	09 f4       	brne	.+2      	; 0x1518 <m_wii_open+0x174>
    1516:	43 c0       	rjmp	.+134    	; 0x159e <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1518:	80 e3       	ldi	r24, 0x30	; 48
    151a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    151e:	88 23       	and	r24, r24
    1520:	09 f4       	brne	.+2      	; 0x1524 <m_wii_open+0x180>
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1524:	88 e0       	ldi	r24, 0x08	; 8
    1526:	0e 94 f7 08 	call	0x11ee	; 0x11ee <send_byte>
    152a:	88 23       	and	r24, r24
    152c:	e1 f1       	breq	.+120    	; 0x15a6 <m_wii_open+0x202>
	end();
    152e:	0e 94 39 09 	call	0x1272	; 0x1272 <end>
    1532:	83 ec       	ldi	r24, 0xC3	; 195
    1534:	99 e0       	ldi	r25, 0x09	; 9
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <m_wii_open+0x192>
    153a:	00 c0       	rjmp	.+0      	; 0x153c <m_wii_open+0x198>
    153c:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    15a6:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    15a8:	08 95       	ret

000015aa <__subsf3>:
    15aa:	50 58       	subi	r21, 0x80	; 128

000015ac <__addsf3>:
    15ac:	bb 27       	eor	r27, r27
    15ae:	aa 27       	eor	r26, r26
    15b0:	0e d0       	rcall	.+28     	; 0x15ce <__addsf3x>
    15b2:	27 c2       	rjmp	.+1102   	; 0x1a02 <__fp_round>
    15b4:	f0 d1       	rcall	.+992    	; 0x1996 <__fp_pscA>
    15b6:	30 f0       	brcs	.+12     	; 0x15c4 <__addsf3+0x18>
    15b8:	f5 d1       	rcall	.+1002   	; 0x19a4 <__fp_pscB>
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <__addsf3+0x18>
    15bc:	31 f4       	brne	.+12     	; 0x15ca <__addsf3+0x1e>
    15be:	9f 3f       	cpi	r25, 0xFF	; 255
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <__addsf3+0x1a>
    15c2:	1e f4       	brtc	.+6      	; 0x15ca <__addsf3+0x1e>
    15c4:	c0 c1       	rjmp	.+896    	; 0x1946 <__fp_nan>
    15c6:	0e f4       	brtc	.+2      	; 0x15ca <__addsf3+0x1e>
    15c8:	e0 95       	com	r30
    15ca:	e7 fb       	bst	r30, 7
    15cc:	b6 c1       	rjmp	.+876    	; 0x193a <__fp_inf>

000015ce <__addsf3x>:
    15ce:	e9 2f       	mov	r30, r25
    15d0:	3a d2       	rcall	.+1140   	; 0x1a46 <__fp_split3>
    15d2:	80 f3       	brcs	.-32     	; 0x15b4 <__addsf3+0x8>
    15d4:	ba 17       	cp	r27, r26
    15d6:	62 07       	cpc	r22, r18
    15d8:	73 07       	cpc	r23, r19
    15da:	84 07       	cpc	r24, r20
    15dc:	95 07       	cpc	r25, r21
    15de:	18 f0       	brcs	.+6      	; 0x15e6 <__addsf3x+0x18>
    15e0:	71 f4       	brne	.+28     	; 0x15fe <__addsf3x+0x30>
    15e2:	9e f5       	brtc	.+102    	; 0x164a <__addsf3x+0x7c>
    15e4:	52 c2       	rjmp	.+1188   	; 0x1a8a <__fp_zero>
    15e6:	0e f4       	brtc	.+2      	; 0x15ea <__addsf3x+0x1c>
    15e8:	e0 95       	com	r30
    15ea:	0b 2e       	mov	r0, r27
    15ec:	ba 2f       	mov	r27, r26
    15ee:	a0 2d       	mov	r26, r0
    15f0:	0b 01       	movw	r0, r22
    15f2:	b9 01       	movw	r22, r18
    15f4:	90 01       	movw	r18, r0
    15f6:	0c 01       	movw	r0, r24
    15f8:	ca 01       	movw	r24, r20
    15fa:	a0 01       	movw	r20, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	ff 27       	eor	r31, r31
    1600:	59 1b       	sub	r21, r25
    1602:	99 f0       	breq	.+38     	; 0x162a <__addsf3x+0x5c>
    1604:	59 3f       	cpi	r21, 0xF9	; 249
    1606:	50 f4       	brcc	.+20     	; 0x161c <__addsf3x+0x4e>
    1608:	50 3e       	cpi	r21, 0xE0	; 224
    160a:	68 f1       	brcs	.+90     	; 0x1666 <__addsf3x+0x98>
    160c:	1a 16       	cp	r1, r26
    160e:	f0 40       	sbci	r31, 0x00	; 0
    1610:	a2 2f       	mov	r26, r18
    1612:	23 2f       	mov	r18, r19
    1614:	34 2f       	mov	r19, r20
    1616:	44 27       	eor	r20, r20
    1618:	58 5f       	subi	r21, 0xF8	; 248
    161a:	f3 cf       	rjmp	.-26     	; 0x1602 <__addsf3x+0x34>
    161c:	46 95       	lsr	r20
    161e:	37 95       	ror	r19
    1620:	27 95       	ror	r18
    1622:	a7 95       	ror	r26
    1624:	f0 40       	sbci	r31, 0x00	; 0
    1626:	53 95       	inc	r21
    1628:	c9 f7       	brne	.-14     	; 0x161c <__addsf3x+0x4e>
    162a:	7e f4       	brtc	.+30     	; 0x164a <__addsf3x+0x7c>
    162c:	1f 16       	cp	r1, r31
    162e:	ba 0b       	sbc	r27, r26
    1630:	62 0b       	sbc	r22, r18
    1632:	73 0b       	sbc	r23, r19
    1634:	84 0b       	sbc	r24, r20
    1636:	ba f0       	brmi	.+46     	; 0x1666 <__addsf3x+0x98>
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	a1 f0       	breq	.+40     	; 0x1664 <__addsf3x+0x96>
    163c:	ff 0f       	add	r31, r31
    163e:	bb 1f       	adc	r27, r27
    1640:	66 1f       	adc	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	c2 f7       	brpl	.-16     	; 0x1638 <__addsf3x+0x6a>
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <__addsf3x+0x98>
    164a:	ba 0f       	add	r27, r26
    164c:	62 1f       	adc	r22, r18
    164e:	73 1f       	adc	r23, r19
    1650:	84 1f       	adc	r24, r20
    1652:	48 f4       	brcc	.+18     	; 0x1666 <__addsf3x+0x98>
    1654:	87 95       	ror	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f7 95       	ror	r31
    165e:	9e 3f       	cpi	r25, 0xFE	; 254
    1660:	08 f0       	brcs	.+2      	; 0x1664 <__addsf3x+0x96>
    1662:	b3 cf       	rjmp	.-154    	; 0x15ca <__addsf3+0x1e>
    1664:	93 95       	inc	r25
    1666:	88 0f       	add	r24, r24
    1668:	08 f0       	brcs	.+2      	; 0x166c <__addsf3x+0x9e>
    166a:	99 27       	eor	r25, r25
    166c:	ee 0f       	add	r30, r30
    166e:	97 95       	ror	r25
    1670:	87 95       	ror	r24
    1672:	08 95       	ret
    1674:	90 d1       	rcall	.+800    	; 0x1996 <__fp_pscA>
    1676:	58 f0       	brcs	.+22     	; 0x168e <__addsf3x+0xc0>
    1678:	80 e8       	ldi	r24, 0x80	; 128
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	09 f4       	brne	.+2      	; 0x1680 <__addsf3x+0xb2>
    167e:	9e ef       	ldi	r25, 0xFE	; 254
    1680:	91 d1       	rcall	.+802    	; 0x19a4 <__fp_pscB>
    1682:	28 f0       	brcs	.+10     	; 0x168e <__addsf3x+0xc0>
    1684:	40 e8       	ldi	r20, 0x80	; 128
    1686:	51 e0       	ldi	r21, 0x01	; 1
    1688:	59 f4       	brne	.+22     	; 0x16a0 <atan2+0xe>
    168a:	5e ef       	ldi	r21, 0xFE	; 254
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <atan2+0xe>
    168e:	5b c1       	rjmp	.+694    	; 0x1946 <__fp_nan>
    1690:	fc c1       	rjmp	.+1016   	; 0x1a8a <__fp_zero>

00001692 <atan2>:
    1692:	e9 2f       	mov	r30, r25
    1694:	e0 78       	andi	r30, 0x80	; 128
    1696:	d7 d1       	rcall	.+942    	; 0x1a46 <__fp_split3>
    1698:	68 f3       	brcs	.-38     	; 0x1674 <__addsf3x+0xa6>
    169a:	09 2e       	mov	r0, r25
    169c:	05 2a       	or	r0, r21
    169e:	c1 f3       	breq	.-16     	; 0x1690 <__addsf3x+0xc2>
    16a0:	26 17       	cp	r18, r22
    16a2:	37 07       	cpc	r19, r23
    16a4:	48 07       	cpc	r20, r24
    16a6:	59 07       	cpc	r21, r25
    16a8:	38 f0       	brcs	.+14     	; 0x16b8 <atan2+0x26>
    16aa:	0e 2e       	mov	r0, r30
    16ac:	07 f8       	bld	r0, 7
    16ae:	e0 25       	eor	r30, r0
    16b0:	69 f0       	breq	.+26     	; 0x16cc <atan2+0x3a>
    16b2:	e0 25       	eor	r30, r0
    16b4:	e0 64       	ori	r30, 0x40	; 64
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <atan2+0x3a>
    16b8:	ef 63       	ori	r30, 0x3F	; 63
    16ba:	07 f8       	bld	r0, 7
    16bc:	00 94       	com	r0
    16be:	07 fa       	bst	r0, 7
    16c0:	db 01       	movw	r26, r22
    16c2:	b9 01       	movw	r22, r18
    16c4:	9d 01       	movw	r18, r26
    16c6:	dc 01       	movw	r26, r24
    16c8:	ca 01       	movw	r24, r20
    16ca:	ad 01       	movw	r20, r26
    16cc:	ef 93       	push	r30
    16ce:	4a d0       	rcall	.+148    	; 0x1764 <__divsf3_pse>
    16d0:	98 d1       	rcall	.+816    	; 0x1a02 <__fp_round>
    16d2:	0a d0       	rcall	.+20     	; 0x16e8 <atan>
    16d4:	5f 91       	pop	r21
    16d6:	55 23       	and	r21, r21
    16d8:	31 f0       	breq	.+12     	; 0x16e6 <atan2+0x54>
    16da:	2b ed       	ldi	r18, 0xDB	; 219
    16dc:	3f e0       	ldi	r19, 0x0F	; 15
    16de:	49 e4       	ldi	r20, 0x49	; 73
    16e0:	50 fd       	sbrc	r21, 0
    16e2:	49 ec       	ldi	r20, 0xC9	; 201
    16e4:	63 cf       	rjmp	.-314    	; 0x15ac <__addsf3>
    16e6:	08 95       	ret

000016e8 <atan>:
    16e8:	df 93       	push	r29
    16ea:	dd 27       	eor	r29, r29
    16ec:	b9 2f       	mov	r27, r25
    16ee:	bf 77       	andi	r27, 0x7F	; 127
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	16 16       	cp	r1, r22
    16f6:	17 06       	cpc	r1, r23
    16f8:	48 07       	cpc	r20, r24
    16fa:	5b 07       	cpc	r21, r27
    16fc:	10 f4       	brcc	.+4      	; 0x1702 <atan+0x1a>
    16fe:	d9 2f       	mov	r29, r25
    1700:	cf d1       	rcall	.+926    	; 0x1aa0 <inverse>
    1702:	9f 93       	push	r25
    1704:	8f 93       	push	r24
    1706:	7f 93       	push	r23
    1708:	6f 93       	push	r22
    170a:	7c d2       	rcall	.+1272   	; 0x1c04 <square>
    170c:	ec ea       	ldi	r30, 0xAC	; 172
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	1d d1       	rcall	.+570    	; 0x194c <__fp_powser>
    1712:	77 d1       	rcall	.+750    	; 0x1a02 <__fp_round>
    1714:	2f 91       	pop	r18
    1716:	3f 91       	pop	r19
    1718:	4f 91       	pop	r20
    171a:	5f 91       	pop	r21
    171c:	d4 d1       	rcall	.+936    	; 0x1ac6 <__mulsf3x>
    171e:	dd 23       	and	r29, r29
    1720:	49 f0       	breq	.+18     	; 0x1734 <atan+0x4c>
    1722:	90 58       	subi	r25, 0x80	; 128
    1724:	a2 ea       	ldi	r26, 0xA2	; 162
    1726:	2a ed       	ldi	r18, 0xDA	; 218
    1728:	3f e0       	ldi	r19, 0x0F	; 15
    172a:	49 ec       	ldi	r20, 0xC9	; 201
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	d0 78       	andi	r29, 0x80	; 128
    1730:	5d 27       	eor	r21, r29
    1732:	4d df       	rcall	.-358    	; 0x15ce <__addsf3x>
    1734:	df 91       	pop	r29
    1736:	65 c1       	rjmp	.+714    	; 0x1a02 <__fp_round>

00001738 <__cmpsf2>:
    1738:	dc d0       	rcall	.+440    	; 0x18f2 <__fp_cmp>
    173a:	08 f4       	brcc	.+2      	; 0x173e <__cmpsf2+0x6>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	08 95       	ret

00001740 <cos>:
    1740:	39 d1       	rcall	.+626    	; 0x19b4 <__fp_rempio2>
    1742:	e3 95       	inc	r30
    1744:	6f c1       	rjmp	.+734    	; 0x1a24 <__fp_sinus>

00001746 <__divsf3>:
    1746:	0c d0       	rcall	.+24     	; 0x1760 <__divsf3x>
    1748:	5c c1       	rjmp	.+696    	; 0x1a02 <__fp_round>
    174a:	2c d1       	rcall	.+600    	; 0x19a4 <__fp_pscB>
    174c:	40 f0       	brcs	.+16     	; 0x175e <__divsf3+0x18>
    174e:	23 d1       	rcall	.+582    	; 0x1996 <__fp_pscA>
    1750:	30 f0       	brcs	.+12     	; 0x175e <__divsf3+0x18>
    1752:	21 f4       	brne	.+8      	; 0x175c <__divsf3+0x16>
    1754:	5f 3f       	cpi	r21, 0xFF	; 255
    1756:	19 f0       	breq	.+6      	; 0x175e <__divsf3+0x18>
    1758:	f0 c0       	rjmp	.+480    	; 0x193a <__fp_inf>
    175a:	51 11       	cpse	r21, r1
    175c:	97 c1       	rjmp	.+814    	; 0x1a8c <__fp_szero>
    175e:	f3 c0       	rjmp	.+486    	; 0x1946 <__fp_nan>

00001760 <__divsf3x>:
    1760:	72 d1       	rcall	.+740    	; 0x1a46 <__fp_split3>
    1762:	98 f3       	brcs	.-26     	; 0x174a <__divsf3+0x4>

00001764 <__divsf3_pse>:
    1764:	99 23       	and	r25, r25
    1766:	c9 f3       	breq	.-14     	; 0x175a <__divsf3+0x14>
    1768:	55 23       	and	r21, r21
    176a:	b1 f3       	breq	.-20     	; 0x1758 <__divsf3+0x12>
    176c:	95 1b       	sub	r25, r21
    176e:	55 0b       	sbc	r21, r21
    1770:	bb 27       	eor	r27, r27
    1772:	aa 27       	eor	r26, r26
    1774:	62 17       	cp	r22, r18
    1776:	73 07       	cpc	r23, r19
    1778:	84 07       	cpc	r24, r20
    177a:	38 f0       	brcs	.+14     	; 0x178a <__divsf3_pse+0x26>
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	5f 4f       	sbci	r21, 0xFF	; 255
    1780:	22 0f       	add	r18, r18
    1782:	33 1f       	adc	r19, r19
    1784:	44 1f       	adc	r20, r20
    1786:	aa 1f       	adc	r26, r26
    1788:	a9 f3       	breq	.-22     	; 0x1774 <__divsf3_pse+0x10>
    178a:	33 d0       	rcall	.+102    	; 0x17f2 <__divsf3_pse+0x8e>
    178c:	0e 2e       	mov	r0, r30
    178e:	3a f0       	brmi	.+14     	; 0x179e <__divsf3_pse+0x3a>
    1790:	e0 e8       	ldi	r30, 0x80	; 128
    1792:	30 d0       	rcall	.+96     	; 0x17f4 <__divsf3_pse+0x90>
    1794:	91 50       	subi	r25, 0x01	; 1
    1796:	50 40       	sbci	r21, 0x00	; 0
    1798:	e6 95       	lsr	r30
    179a:	00 1c       	adc	r0, r0
    179c:	ca f7       	brpl	.-14     	; 0x1790 <__divsf3_pse+0x2c>
    179e:	29 d0       	rcall	.+82     	; 0x17f2 <__divsf3_pse+0x8e>
    17a0:	fe 2f       	mov	r31, r30
    17a2:	27 d0       	rcall	.+78     	; 0x17f2 <__divsf3_pse+0x8e>
    17a4:	66 0f       	add	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	bb 1f       	adc	r27, r27
    17ac:	26 17       	cp	r18, r22
    17ae:	37 07       	cpc	r19, r23
    17b0:	48 07       	cpc	r20, r24
    17b2:	ab 07       	cpc	r26, r27
    17b4:	b0 e8       	ldi	r27, 0x80	; 128
    17b6:	09 f0       	breq	.+2      	; 0x17ba <__divsf3_pse+0x56>
    17b8:	bb 0b       	sbc	r27, r27
    17ba:	80 2d       	mov	r24, r0
    17bc:	bf 01       	movw	r22, r30
    17be:	ff 27       	eor	r31, r31
    17c0:	93 58       	subi	r25, 0x83	; 131
    17c2:	5f 4f       	sbci	r21, 0xFF	; 255
    17c4:	2a f0       	brmi	.+10     	; 0x17d0 <__divsf3_pse+0x6c>
    17c6:	9e 3f       	cpi	r25, 0xFE	; 254
    17c8:	51 05       	cpc	r21, r1
    17ca:	68 f0       	brcs	.+26     	; 0x17e6 <__divsf3_pse+0x82>
    17cc:	b6 c0       	rjmp	.+364    	; 0x193a <__fp_inf>
    17ce:	5e c1       	rjmp	.+700    	; 0x1a8c <__fp_szero>
    17d0:	5f 3f       	cpi	r21, 0xFF	; 255
    17d2:	ec f3       	brlt	.-6      	; 0x17ce <__divsf3_pse+0x6a>
    17d4:	98 3e       	cpi	r25, 0xE8	; 232
    17d6:	dc f3       	brlt	.-10     	; 0x17ce <__divsf3_pse+0x6a>
    17d8:	86 95       	lsr	r24
    17da:	77 95       	ror	r23
    17dc:	67 95       	ror	r22
    17de:	b7 95       	ror	r27
    17e0:	f7 95       	ror	r31
    17e2:	9f 5f       	subi	r25, 0xFF	; 255
    17e4:	c9 f7       	brne	.-14     	; 0x17d8 <__divsf3_pse+0x74>
    17e6:	88 0f       	add	r24, r24
    17e8:	91 1d       	adc	r25, r1
    17ea:	96 95       	lsr	r25
    17ec:	87 95       	ror	r24
    17ee:	97 f9       	bld	r25, 7
    17f0:	08 95       	ret
    17f2:	e1 e0       	ldi	r30, 0x01	; 1
    17f4:	66 0f       	add	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	bb 1f       	adc	r27, r27
    17fc:	62 17       	cp	r22, r18
    17fe:	73 07       	cpc	r23, r19
    1800:	84 07       	cpc	r24, r20
    1802:	ba 07       	cpc	r27, r26
    1804:	20 f0       	brcs	.+8      	; 0x180e <__divsf3_pse+0xaa>
    1806:	62 1b       	sub	r22, r18
    1808:	73 0b       	sbc	r23, r19
    180a:	84 0b       	sbc	r24, r20
    180c:	ba 0b       	sbc	r27, r26
    180e:	ee 1f       	adc	r30, r30
    1810:	88 f7       	brcc	.-30     	; 0x17f4 <__divsf3_pse+0x90>
    1812:	e0 95       	com	r30
    1814:	08 95       	ret

00001816 <__fixsfsi>:
    1816:	04 d0       	rcall	.+8      	; 0x1820 <__fixunssfsi>
    1818:	68 94       	set
    181a:	b1 11       	cpse	r27, r1
    181c:	37 c1       	rjmp	.+622    	; 0x1a8c <__fp_szero>
    181e:	08 95       	ret

00001820 <__fixunssfsi>:
    1820:	1a d1       	rcall	.+564    	; 0x1a56 <__fp_splitA>
    1822:	88 f0       	brcs	.+34     	; 0x1846 <__fixunssfsi+0x26>
    1824:	9f 57       	subi	r25, 0x7F	; 127
    1826:	90 f0       	brcs	.+36     	; 0x184c <__fixunssfsi+0x2c>
    1828:	b9 2f       	mov	r27, r25
    182a:	99 27       	eor	r25, r25
    182c:	b7 51       	subi	r27, 0x17	; 23
    182e:	a0 f0       	brcs	.+40     	; 0x1858 <__fixunssfsi+0x38>
    1830:	d1 f0       	breq	.+52     	; 0x1866 <__fixunssfsi+0x46>
    1832:	66 0f       	add	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	1a f0       	brmi	.+6      	; 0x1842 <__fixunssfsi+0x22>
    183c:	ba 95       	dec	r27
    183e:	c9 f7       	brne	.-14     	; 0x1832 <__fixunssfsi+0x12>
    1840:	12 c0       	rjmp	.+36     	; 0x1866 <__fixunssfsi+0x46>
    1842:	b1 30       	cpi	r27, 0x01	; 1
    1844:	81 f0       	breq	.+32     	; 0x1866 <__fixunssfsi+0x46>
    1846:	21 d1       	rcall	.+578    	; 0x1a8a <__fp_zero>
    1848:	b1 e0       	ldi	r27, 0x01	; 1
    184a:	08 95       	ret
    184c:	1e c1       	rjmp	.+572    	; 0x1a8a <__fp_zero>
    184e:	67 2f       	mov	r22, r23
    1850:	78 2f       	mov	r23, r24
    1852:	88 27       	eor	r24, r24
    1854:	b8 5f       	subi	r27, 0xF8	; 248
    1856:	39 f0       	breq	.+14     	; 0x1866 <__fixunssfsi+0x46>
    1858:	b9 3f       	cpi	r27, 0xF9	; 249
    185a:	cc f3       	brlt	.-14     	; 0x184e <__fixunssfsi+0x2e>
    185c:	86 95       	lsr	r24
    185e:	77 95       	ror	r23
    1860:	67 95       	ror	r22
    1862:	b3 95       	inc	r27
    1864:	d9 f7       	brne	.-10     	; 0x185c <__fixunssfsi+0x3c>
    1866:	3e f4       	brtc	.+14     	; 0x1876 <__fixunssfsi+0x56>
    1868:	90 95       	com	r25
    186a:	80 95       	com	r24
    186c:	70 95       	com	r23
    186e:	61 95       	neg	r22
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	8f 4f       	sbci	r24, 0xFF	; 255
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	08 95       	ret

00001878 <__floatunsisf>:
    1878:	e8 94       	clt
    187a:	09 c0       	rjmp	.+18     	; 0x188e <__floatsisf+0x12>

0000187c <__floatsisf>:
    187c:	97 fb       	bst	r25, 7
    187e:	3e f4       	brtc	.+14     	; 0x188e <__floatsisf+0x12>
    1880:	90 95       	com	r25
    1882:	80 95       	com	r24
    1884:	70 95       	com	r23
    1886:	61 95       	neg	r22
    1888:	7f 4f       	sbci	r23, 0xFF	; 255
    188a:	8f 4f       	sbci	r24, 0xFF	; 255
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	99 23       	and	r25, r25
    1890:	a9 f0       	breq	.+42     	; 0x18bc <__floatsisf+0x40>
    1892:	f9 2f       	mov	r31, r25
    1894:	96 e9       	ldi	r25, 0x96	; 150
    1896:	bb 27       	eor	r27, r27
    1898:	93 95       	inc	r25
    189a:	f6 95       	lsr	r31
    189c:	87 95       	ror	r24
    189e:	77 95       	ror	r23
    18a0:	67 95       	ror	r22
    18a2:	b7 95       	ror	r27
    18a4:	f1 11       	cpse	r31, r1
    18a6:	f8 cf       	rjmp	.-16     	; 0x1898 <__floatsisf+0x1c>
    18a8:	fa f4       	brpl	.+62     	; 0x18e8 <__floatsisf+0x6c>
    18aa:	bb 0f       	add	r27, r27
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <__floatsisf+0x36>
    18ae:	60 ff       	sbrs	r22, 0
    18b0:	1b c0       	rjmp	.+54     	; 0x18e8 <__floatsisf+0x6c>
    18b2:	6f 5f       	subi	r22, 0xFF	; 255
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	8f 4f       	sbci	r24, 0xFF	; 255
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	16 c0       	rjmp	.+44     	; 0x18e8 <__floatsisf+0x6c>
    18bc:	88 23       	and	r24, r24
    18be:	11 f0       	breq	.+4      	; 0x18c4 <__floatsisf+0x48>
    18c0:	96 e9       	ldi	r25, 0x96	; 150
    18c2:	11 c0       	rjmp	.+34     	; 0x18e6 <__floatsisf+0x6a>
    18c4:	77 23       	and	r23, r23
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <__floatsisf+0x54>
    18c8:	9e e8       	ldi	r25, 0x8E	; 142
    18ca:	87 2f       	mov	r24, r23
    18cc:	76 2f       	mov	r23, r22
    18ce:	05 c0       	rjmp	.+10     	; 0x18da <__floatsisf+0x5e>
    18d0:	66 23       	and	r22, r22
    18d2:	71 f0       	breq	.+28     	; 0x18f0 <__floatsisf+0x74>
    18d4:	96 e8       	ldi	r25, 0x86	; 134
    18d6:	86 2f       	mov	r24, r22
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	2a f0       	brmi	.+10     	; 0x18e8 <__floatsisf+0x6c>
    18de:	9a 95       	dec	r25
    18e0:	66 0f       	add	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	da f7       	brpl	.-10     	; 0x18de <__floatsisf+0x62>
    18e8:	88 0f       	add	r24, r24
    18ea:	96 95       	lsr	r25
    18ec:	87 95       	ror	r24
    18ee:	97 f9       	bld	r25, 7
    18f0:	08 95       	ret

000018f2 <__fp_cmp>:
    18f2:	99 0f       	add	r25, r25
    18f4:	00 08       	sbc	r0, r0
    18f6:	55 0f       	add	r21, r21
    18f8:	aa 0b       	sbc	r26, r26
    18fa:	e0 e8       	ldi	r30, 0x80	; 128
    18fc:	fe ef       	ldi	r31, 0xFE	; 254
    18fe:	16 16       	cp	r1, r22
    1900:	17 06       	cpc	r1, r23
    1902:	e8 07       	cpc	r30, r24
    1904:	f9 07       	cpc	r31, r25
    1906:	c0 f0       	brcs	.+48     	; 0x1938 <__fp_cmp+0x46>
    1908:	12 16       	cp	r1, r18
    190a:	13 06       	cpc	r1, r19
    190c:	e4 07       	cpc	r30, r20
    190e:	f5 07       	cpc	r31, r21
    1910:	98 f0       	brcs	.+38     	; 0x1938 <__fp_cmp+0x46>
    1912:	62 1b       	sub	r22, r18
    1914:	73 0b       	sbc	r23, r19
    1916:	84 0b       	sbc	r24, r20
    1918:	95 0b       	sbc	r25, r21
    191a:	39 f4       	brne	.+14     	; 0x192a <__fp_cmp+0x38>
    191c:	0a 26       	eor	r0, r26
    191e:	61 f0       	breq	.+24     	; 0x1938 <__fp_cmp+0x46>
    1920:	23 2b       	or	r18, r19
    1922:	24 2b       	or	r18, r20
    1924:	25 2b       	or	r18, r21
    1926:	21 f4       	brne	.+8      	; 0x1930 <__fp_cmp+0x3e>
    1928:	08 95       	ret
    192a:	0a 26       	eor	r0, r26
    192c:	09 f4       	brne	.+2      	; 0x1930 <__fp_cmp+0x3e>
    192e:	a1 40       	sbci	r26, 0x01	; 1
    1930:	a6 95       	lsr	r26
    1932:	8f ef       	ldi	r24, 0xFF	; 255
    1934:	81 1d       	adc	r24, r1
    1936:	81 1d       	adc	r24, r1
    1938:	08 95       	ret

0000193a <__fp_inf>:
    193a:	97 f9       	bld	r25, 7
    193c:	9f 67       	ori	r25, 0x7F	; 127
    193e:	80 e8       	ldi	r24, 0x80	; 128
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	08 95       	ret

00001946 <__fp_nan>:
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	80 ec       	ldi	r24, 0xC0	; 192
    194a:	08 95       	ret

0000194c <__fp_powser>:
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	1f 93       	push	r17
    1952:	0f 93       	push	r16
    1954:	ff 92       	push	r15
    1956:	ef 92       	push	r14
    1958:	df 92       	push	r13
    195a:	7b 01       	movw	r14, r22
    195c:	8c 01       	movw	r16, r24
    195e:	68 94       	set
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__fp_powser+0x20>
    1962:	da 2e       	mov	r13, r26
    1964:	ef 01       	movw	r28, r30
    1966:	af d0       	rcall	.+350    	; 0x1ac6 <__mulsf3x>
    1968:	fe 01       	movw	r30, r28
    196a:	e8 94       	clt
    196c:	a5 91       	lpm	r26, Z+
    196e:	25 91       	lpm	r18, Z+
    1970:	35 91       	lpm	r19, Z+
    1972:	45 91       	lpm	r20, Z+
    1974:	55 91       	lpm	r21, Z+
    1976:	ae f3       	brts	.-22     	; 0x1962 <__fp_powser+0x16>
    1978:	ef 01       	movw	r28, r30
    197a:	29 de       	rcall	.-942    	; 0x15ce <__addsf3x>
    197c:	fe 01       	movw	r30, r28
    197e:	97 01       	movw	r18, r14
    1980:	a8 01       	movw	r20, r16
    1982:	da 94       	dec	r13
    1984:	79 f7       	brne	.-34     	; 0x1964 <__fp_powser+0x18>
    1986:	df 90       	pop	r13
    1988:	ef 90       	pop	r14
    198a:	ff 90       	pop	r15
    198c:	0f 91       	pop	r16
    198e:	1f 91       	pop	r17
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <__fp_pscA>:
    1996:	00 24       	eor	r0, r0
    1998:	0a 94       	dec	r0
    199a:	16 16       	cp	r1, r22
    199c:	17 06       	cpc	r1, r23
    199e:	18 06       	cpc	r1, r24
    19a0:	09 06       	cpc	r0, r25
    19a2:	08 95       	ret

000019a4 <__fp_pscB>:
    19a4:	00 24       	eor	r0, r0
    19a6:	0a 94       	dec	r0
    19a8:	12 16       	cp	r1, r18
    19aa:	13 06       	cpc	r1, r19
    19ac:	14 06       	cpc	r1, r20
    19ae:	05 06       	cpc	r0, r21
    19b0:	08 95       	ret
    19b2:	c9 cf       	rjmp	.-110    	; 0x1946 <__fp_nan>

000019b4 <__fp_rempio2>:
    19b4:	50 d0       	rcall	.+160    	; 0x1a56 <__fp_splitA>
    19b6:	e8 f3       	brcs	.-6      	; 0x19b2 <__fp_pscB+0xe>
    19b8:	e8 94       	clt
    19ba:	e0 e0       	ldi	r30, 0x00	; 0
    19bc:	bb 27       	eor	r27, r27
    19be:	9f 57       	subi	r25, 0x7F	; 127
    19c0:	f0 f0       	brcs	.+60     	; 0x19fe <__fp_rempio2+0x4a>
    19c2:	2a ed       	ldi	r18, 0xDA	; 218
    19c4:	3f e0       	ldi	r19, 0x0F	; 15
    19c6:	49 ec       	ldi	r20, 0xC9	; 201
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <__fp_rempio2+0x22>
    19ca:	ee 0f       	add	r30, r30
    19cc:	bb 0f       	add	r27, r27
    19ce:	66 1f       	adc	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	28 f0       	brcs	.+10     	; 0x19e0 <__fp_rempio2+0x2c>
    19d6:	b2 3a       	cpi	r27, 0xA2	; 162
    19d8:	62 07       	cpc	r22, r18
    19da:	73 07       	cpc	r23, r19
    19dc:	84 07       	cpc	r24, r20
    19de:	28 f0       	brcs	.+10     	; 0x19ea <__fp_rempio2+0x36>
    19e0:	b2 5a       	subi	r27, 0xA2	; 162
    19e2:	62 0b       	sbc	r22, r18
    19e4:	73 0b       	sbc	r23, r19
    19e6:	84 0b       	sbc	r24, r20
    19e8:	e3 95       	inc	r30
    19ea:	9a 95       	dec	r25
    19ec:	72 f7       	brpl	.-36     	; 0x19ca <__fp_rempio2+0x16>
    19ee:	80 38       	cpi	r24, 0x80	; 128
    19f0:	30 f4       	brcc	.+12     	; 0x19fe <__fp_rempio2+0x4a>
    19f2:	9a 95       	dec	r25
    19f4:	bb 0f       	add	r27, r27
    19f6:	66 1f       	adc	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	88 1f       	adc	r24, r24
    19fc:	d2 f7       	brpl	.-12     	; 0x19f2 <__fp_rempio2+0x3e>
    19fe:	90 48       	sbci	r25, 0x80	; 128
    1a00:	06 c1       	rjmp	.+524    	; 0x1c0e <__fp_mpack_finite>

00001a02 <__fp_round>:
    1a02:	09 2e       	mov	r0, r25
    1a04:	03 94       	inc	r0
    1a06:	00 0c       	add	r0, r0
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <__fp_round+0xc>
    1a0a:	88 23       	and	r24, r24
    1a0c:	52 f0       	brmi	.+20     	; 0x1a22 <__fp_round+0x20>
    1a0e:	bb 0f       	add	r27, r27
    1a10:	40 f4       	brcc	.+16     	; 0x1a22 <__fp_round+0x20>
    1a12:	bf 2b       	or	r27, r31
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <__fp_round+0x18>
    1a16:	60 ff       	sbrs	r22, 0
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__fp_round+0x20>
    1a1a:	6f 5f       	subi	r22, 0xFF	; 255
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	08 95       	ret

00001a24 <__fp_sinus>:
    1a24:	ef 93       	push	r30
    1a26:	e0 ff       	sbrs	r30, 0
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <__fp_sinus+0x12>
    1a2a:	a2 ea       	ldi	r26, 0xA2	; 162
    1a2c:	2a ed       	ldi	r18, 0xDA	; 218
    1a2e:	3f e0       	ldi	r19, 0x0F	; 15
    1a30:	49 ec       	ldi	r20, 0xC9	; 201
    1a32:	5f eb       	ldi	r21, 0xBF	; 191
    1a34:	cc dd       	rcall	.-1128   	; 0x15ce <__addsf3x>
    1a36:	e5 df       	rcall	.-54     	; 0x1a02 <__fp_round>
    1a38:	0f 90       	pop	r0
    1a3a:	03 94       	inc	r0
    1a3c:	01 fc       	sbrc	r0, 1
    1a3e:	90 58       	subi	r25, 0x80	; 128
    1a40:	e9 ed       	ldi	r30, 0xD9	; 217
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	f7 c0       	rjmp	.+494    	; 0x1c34 <__fp_powsodd>

00001a46 <__fp_split3>:
    1a46:	57 fd       	sbrc	r21, 7
    1a48:	90 58       	subi	r25, 0x80	; 128
    1a4a:	44 0f       	add	r20, r20
    1a4c:	55 1f       	adc	r21, r21
    1a4e:	59 f0       	breq	.+22     	; 0x1a66 <__fp_splitA+0x10>
    1a50:	5f 3f       	cpi	r21, 0xFF	; 255
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <__fp_splitA+0x1a>
    1a54:	47 95       	ror	r20

00001a56 <__fp_splitA>:
    1a56:	88 0f       	add	r24, r24
    1a58:	97 fb       	bst	r25, 7
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <__fp_splitA+0x20>
    1a5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a60:	79 f0       	breq	.+30     	; 0x1a80 <__fp_splitA+0x2a>
    1a62:	87 95       	ror	r24
    1a64:	08 95       	ret
    1a66:	12 16       	cp	r1, r18
    1a68:	13 06       	cpc	r1, r19
    1a6a:	14 06       	cpc	r1, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	f2 cf       	rjmp	.-28     	; 0x1a54 <__fp_split3+0xe>
    1a70:	46 95       	lsr	r20
    1a72:	f1 df       	rcall	.-30     	; 0x1a56 <__fp_splitA>
    1a74:	08 c0       	rjmp	.+16     	; 0x1a86 <__fp_splitA+0x30>
    1a76:	16 16       	cp	r1, r22
    1a78:	17 06       	cpc	r1, r23
    1a7a:	18 06       	cpc	r1, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	f1 cf       	rjmp	.-30     	; 0x1a62 <__fp_splitA+0xc>
    1a80:	86 95       	lsr	r24
    1a82:	71 05       	cpc	r23, r1
    1a84:	61 05       	cpc	r22, r1
    1a86:	08 94       	sec
    1a88:	08 95       	ret

00001a8a <__fp_zero>:
    1a8a:	e8 94       	clt

00001a8c <__fp_szero>:
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	66 27       	eor	r22, r22
    1a90:	77 27       	eor	r23, r23
    1a92:	cb 01       	movw	r24, r22
    1a94:	97 f9       	bld	r25, 7
    1a96:	08 95       	ret

00001a98 <__gesf2>:
    1a98:	2c df       	rcall	.-424    	; 0x18f2 <__fp_cmp>
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <__gesf2+0x6>
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	08 95       	ret

00001aa0 <inverse>:
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	9f e3       	ldi	r25, 0x3F	; 63
    1aac:	4c ce       	rjmp	.-872    	; 0x1746 <__divsf3>

00001aae <__mulsf3>:
    1aae:	0b d0       	rcall	.+22     	; 0x1ac6 <__mulsf3x>
    1ab0:	a8 cf       	rjmp	.-176    	; 0x1a02 <__fp_round>
    1ab2:	71 df       	rcall	.-286    	; 0x1996 <__fp_pscA>
    1ab4:	28 f0       	brcs	.+10     	; 0x1ac0 <__mulsf3+0x12>
    1ab6:	76 df       	rcall	.-276    	; 0x19a4 <__fp_pscB>
    1ab8:	18 f0       	brcs	.+6      	; 0x1ac0 <__mulsf3+0x12>
    1aba:	95 23       	and	r25, r21
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__mulsf3+0x12>
    1abe:	3d cf       	rjmp	.-390    	; 0x193a <__fp_inf>
    1ac0:	42 cf       	rjmp	.-380    	; 0x1946 <__fp_nan>
    1ac2:	11 24       	eor	r1, r1
    1ac4:	e3 cf       	rjmp	.-58     	; 0x1a8c <__fp_szero>

00001ac6 <__mulsf3x>:
    1ac6:	bf df       	rcall	.-130    	; 0x1a46 <__fp_split3>
    1ac8:	a0 f3       	brcs	.-24     	; 0x1ab2 <__mulsf3+0x4>

00001aca <__mulsf3_pse>:
    1aca:	95 9f       	mul	r25, r21
    1acc:	d1 f3       	breq	.-12     	; 0x1ac2 <__mulsf3+0x14>
    1ace:	95 0f       	add	r25, r21
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	55 1f       	adc	r21, r21
    1ad4:	62 9f       	mul	r22, r18
    1ad6:	f0 01       	movw	r30, r0
    1ad8:	72 9f       	mul	r23, r18
    1ada:	bb 27       	eor	r27, r27
    1adc:	f0 0d       	add	r31, r0
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	63 9f       	mul	r22, r19
    1ae2:	aa 27       	eor	r26, r26
    1ae4:	f0 0d       	add	r31, r0
    1ae6:	b1 1d       	adc	r27, r1
    1ae8:	aa 1f       	adc	r26, r26
    1aea:	64 9f       	mul	r22, r20
    1aec:	66 27       	eor	r22, r22
    1aee:	b0 0d       	add	r27, r0
    1af0:	a1 1d       	adc	r26, r1
    1af2:	66 1f       	adc	r22, r22
    1af4:	82 9f       	mul	r24, r18
    1af6:	22 27       	eor	r18, r18
    1af8:	b0 0d       	add	r27, r0
    1afa:	a1 1d       	adc	r26, r1
    1afc:	62 1f       	adc	r22, r18
    1afe:	73 9f       	mul	r23, r19
    1b00:	b0 0d       	add	r27, r0
    1b02:	a1 1d       	adc	r26, r1
    1b04:	62 1f       	adc	r22, r18
    1b06:	83 9f       	mul	r24, r19
    1b08:	a0 0d       	add	r26, r0
    1b0a:	61 1d       	adc	r22, r1
    1b0c:	22 1f       	adc	r18, r18
    1b0e:	74 9f       	mul	r23, r20
    1b10:	33 27       	eor	r19, r19
    1b12:	a0 0d       	add	r26, r0
    1b14:	61 1d       	adc	r22, r1
    1b16:	23 1f       	adc	r18, r19
    1b18:	84 9f       	mul	r24, r20
    1b1a:	60 0d       	add	r22, r0
    1b1c:	21 1d       	adc	r18, r1
    1b1e:	82 2f       	mov	r24, r18
    1b20:	76 2f       	mov	r23, r22
    1b22:	6a 2f       	mov	r22, r26
    1b24:	11 24       	eor	r1, r1
    1b26:	9f 57       	subi	r25, 0x7F	; 127
    1b28:	50 40       	sbci	r21, 0x00	; 0
    1b2a:	8a f0       	brmi	.+34     	; 0x1b4e <__mulsf3_pse+0x84>
    1b2c:	e1 f0       	breq	.+56     	; 0x1b66 <__mulsf3_pse+0x9c>
    1b2e:	88 23       	and	r24, r24
    1b30:	4a f0       	brmi	.+18     	; 0x1b44 <__mulsf3_pse+0x7a>
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	bb 1f       	adc	r27, r27
    1b38:	66 1f       	adc	r22, r22
    1b3a:	77 1f       	adc	r23, r23
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	91 50       	subi	r25, 0x01	; 1
    1b40:	50 40       	sbci	r21, 0x00	; 0
    1b42:	a9 f7       	brne	.-22     	; 0x1b2e <__mulsf3_pse+0x64>
    1b44:	9e 3f       	cpi	r25, 0xFE	; 254
    1b46:	51 05       	cpc	r21, r1
    1b48:	70 f0       	brcs	.+28     	; 0x1b66 <__mulsf3_pse+0x9c>
    1b4a:	f7 ce       	rjmp	.-530    	; 0x193a <__fp_inf>
    1b4c:	9f cf       	rjmp	.-194    	; 0x1a8c <__fp_szero>
    1b4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b50:	ec f3       	brlt	.-6      	; 0x1b4c <__mulsf3_pse+0x82>
    1b52:	98 3e       	cpi	r25, 0xE8	; 232
    1b54:	dc f3       	brlt	.-10     	; 0x1b4c <__mulsf3_pse+0x82>
    1b56:	86 95       	lsr	r24
    1b58:	77 95       	ror	r23
    1b5a:	67 95       	ror	r22
    1b5c:	b7 95       	ror	r27
    1b5e:	f7 95       	ror	r31
    1b60:	e7 95       	ror	r30
    1b62:	9f 5f       	subi	r25, 0xFF	; 255
    1b64:	c1 f7       	brne	.-16     	; 0x1b56 <__mulsf3_pse+0x8c>
    1b66:	fe 2b       	or	r31, r30
    1b68:	88 0f       	add	r24, r24
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	97 f9       	bld	r25, 7
    1b72:	08 95       	ret

00001b74 <sin>:
    1b74:	9f 93       	push	r25
    1b76:	1e df       	rcall	.-452    	; 0x19b4 <__fp_rempio2>
    1b78:	0f 90       	pop	r0
    1b7a:	07 fc       	sbrc	r0, 7
    1b7c:	ee 5f       	subi	r30, 0xFE	; 254
    1b7e:	52 cf       	rjmp	.-348    	; 0x1a24 <__fp_sinus>
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <sin+0x12>
    1b82:	0e f4       	brtc	.+2      	; 0x1b86 <sin+0x12>
    1b84:	e0 ce       	rjmp	.-576    	; 0x1946 <__fp_nan>
    1b86:	41 c0       	rjmp	.+130    	; 0x1c0a <__fp_mpack>

00001b88 <sqrt>:
    1b88:	66 df       	rcall	.-308    	; 0x1a56 <__fp_splitA>
    1b8a:	d0 f3       	brcs	.-12     	; 0x1b80 <sin+0xc>
    1b8c:	99 23       	and	r25, r25
    1b8e:	d9 f3       	breq	.-10     	; 0x1b86 <sin+0x12>
    1b90:	ce f3       	brts	.-14     	; 0x1b84 <sin+0x10>
    1b92:	9f 57       	subi	r25, 0x7F	; 127
    1b94:	55 0b       	sbc	r21, r21
    1b96:	87 ff       	sbrs	r24, 7
    1b98:	46 d0       	rcall	.+140    	; 0x1c26 <__fp_norm2>
    1b9a:	00 24       	eor	r0, r0
    1b9c:	a0 e6       	ldi	r26, 0x60	; 96
    1b9e:	40 ea       	ldi	r20, 0xA0	; 160
    1ba0:	90 01       	movw	r18, r0
    1ba2:	80 58       	subi	r24, 0x80	; 128
    1ba4:	56 95       	lsr	r21
    1ba6:	97 95       	ror	r25
    1ba8:	28 f4       	brcc	.+10     	; 0x1bb4 <sqrt+0x2c>
    1baa:	80 5c       	subi	r24, 0xC0	; 192
    1bac:	66 0f       	add	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	20 f0       	brcs	.+8      	; 0x1bbc <sqrt+0x34>
    1bb4:	26 17       	cp	r18, r22
    1bb6:	37 07       	cpc	r19, r23
    1bb8:	48 07       	cpc	r20, r24
    1bba:	30 f4       	brcc	.+12     	; 0x1bc8 <sqrt+0x40>
    1bbc:	62 1b       	sub	r22, r18
    1bbe:	73 0b       	sbc	r23, r19
    1bc0:	84 0b       	sbc	r24, r20
    1bc2:	20 29       	or	r18, r0
    1bc4:	31 29       	or	r19, r1
    1bc6:	4a 2b       	or	r20, r26
    1bc8:	a6 95       	lsr	r26
    1bca:	17 94       	ror	r1
    1bcc:	07 94       	ror	r0
    1bce:	20 25       	eor	r18, r0
    1bd0:	31 25       	eor	r19, r1
    1bd2:	4a 27       	eor	r20, r26
    1bd4:	58 f7       	brcc	.-42     	; 0x1bac <sqrt+0x24>
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	20 f0       	brcs	.+8      	; 0x1be6 <sqrt+0x5e>
    1bde:	26 17       	cp	r18, r22
    1be0:	37 07       	cpc	r19, r23
    1be2:	48 07       	cpc	r20, r24
    1be4:	30 f4       	brcc	.+12     	; 0x1bf2 <sqrt+0x6a>
    1be6:	62 0b       	sbc	r22, r18
    1be8:	73 0b       	sbc	r23, r19
    1bea:	84 0b       	sbc	r24, r20
    1bec:	20 0d       	add	r18, r0
    1bee:	31 1d       	adc	r19, r1
    1bf0:	41 1d       	adc	r20, r1
    1bf2:	a0 95       	com	r26
    1bf4:	81 f7       	brne	.-32     	; 0x1bd6 <sqrt+0x4e>
    1bf6:	b9 01       	movw	r22, r18
    1bf8:	84 2f       	mov	r24, r20
    1bfa:	91 58       	subi	r25, 0x81	; 129
    1bfc:	88 0f       	add	r24, r24
    1bfe:	96 95       	lsr	r25
    1c00:	87 95       	ror	r24
    1c02:	08 95       	ret

00001c04 <square>:
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	52 cf       	rjmp	.-348    	; 0x1aae <__mulsf3>

00001c0a <__fp_mpack>:
    1c0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c0c:	31 f0       	breq	.+12     	; 0x1c1a <__fp_mpack_finite+0xc>

00001c0e <__fp_mpack_finite>:
    1c0e:	91 50       	subi	r25, 0x01	; 1
    1c10:	20 f4       	brcc	.+8      	; 0x1c1a <__fp_mpack_finite+0xc>
    1c12:	87 95       	ror	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	b7 95       	ror	r27
    1c1a:	88 0f       	add	r24, r24
    1c1c:	91 1d       	adc	r25, r1
    1c1e:	96 95       	lsr	r25
    1c20:	87 95       	ror	r24
    1c22:	97 f9       	bld	r25, 7
    1c24:	08 95       	ret

00001c26 <__fp_norm2>:
    1c26:	91 50       	subi	r25, 0x01	; 1
    1c28:	50 40       	sbci	r21, 0x00	; 0
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	d2 f7       	brpl	.-12     	; 0x1c26 <__fp_norm2>
    1c32:	08 95       	ret

00001c34 <__fp_powsodd>:
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	7f 93       	push	r23
    1c3a:	6f 93       	push	r22
    1c3c:	ff 93       	push	r31
    1c3e:	ef 93       	push	r30
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	34 df       	rcall	.-408    	; 0x1aae <__mulsf3>
    1c46:	ef 91       	pop	r30
    1c48:	ff 91       	pop	r31
    1c4a:	80 de       	rcall	.-768    	; 0x194c <__fp_powser>
    1c4c:	2f 91       	pop	r18
    1c4e:	3f 91       	pop	r19
    1c50:	4f 91       	pop	r20
    1c52:	5f 91       	pop	r21
    1c54:	2c cf       	rjmp	.-424    	; 0x1aae <__mulsf3>

00001c56 <itoa>:
    1c56:	fb 01       	movw	r30, r22
    1c58:	9f 01       	movw	r18, r30
    1c5a:	e8 94       	clt
    1c5c:	42 30       	cpi	r20, 0x02	; 2
    1c5e:	c4 f0       	brlt	.+48     	; 0x1c90 <itoa+0x3a>
    1c60:	45 32       	cpi	r20, 0x25	; 37
    1c62:	b4 f4       	brge	.+44     	; 0x1c90 <itoa+0x3a>
    1c64:	4a 30       	cpi	r20, 0x0A	; 10
    1c66:	29 f4       	brne	.+10     	; 0x1c72 <itoa+0x1c>
    1c68:	97 fb       	bst	r25, 7
    1c6a:	1e f4       	brtc	.+6      	; 0x1c72 <itoa+0x1c>
    1c6c:	90 95       	com	r25
    1c6e:	81 95       	neg	r24
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	64 2f       	mov	r22, r20
    1c74:	77 27       	eor	r23, r23
    1c76:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__udivmodhi4>
    1c7a:	80 5d       	subi	r24, 0xD0	; 208
    1c7c:	8a 33       	cpi	r24, 0x3A	; 58
    1c7e:	0c f0       	brlt	.+2      	; 0x1c82 <itoa+0x2c>
    1c80:	89 5d       	subi	r24, 0xD9	; 217
    1c82:	81 93       	st	Z+, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	a1 f7       	brne	.-24     	; 0x1c72 <itoa+0x1c>
    1c8a:	16 f4       	brtc	.+4      	; 0x1c90 <itoa+0x3a>
    1c8c:	5d e2       	ldi	r21, 0x2D	; 45
    1c8e:	51 93       	st	Z+, r21
    1c90:	10 82       	st	Z, r1
    1c92:	c9 01       	movw	r24, r18
    1c94:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <strrev>

00001c98 <strrev>:
    1c98:	dc 01       	movw	r26, r24
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	67 2f       	mov	r22, r23
    1c9e:	71 91       	ld	r23, Z+
    1ca0:	77 23       	and	r23, r23
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <strrev+0x4>
    1ca4:	32 97       	sbiw	r30, 0x02	; 2
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <strrev+0x18>
    1ca8:	7c 91       	ld	r23, X
    1caa:	6d 93       	st	X+, r22
    1cac:	70 83       	st	Z, r23
    1cae:	62 91       	ld	r22, -Z
    1cb0:	ae 17       	cp	r26, r30
    1cb2:	bf 07       	cpc	r27, r31
    1cb4:	c8 f3       	brcs	.-14     	; 0x1ca8 <strrev+0x10>
    1cb6:	08 95       	ret

00001cb8 <__udivmodhi4>:
    1cb8:	aa 1b       	sub	r26, r26
    1cba:	bb 1b       	sub	r27, r27
    1cbc:	51 e1       	ldi	r21, 0x11	; 17
    1cbe:	07 c0       	rjmp	.+14     	; 0x1cce <__udivmodhi4_ep>

00001cc0 <__udivmodhi4_loop>:
    1cc0:	aa 1f       	adc	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	a6 17       	cp	r26, r22
    1cc6:	b7 07       	cpc	r27, r23
    1cc8:	10 f0       	brcs	.+4      	; 0x1cce <__udivmodhi4_ep>
    1cca:	a6 1b       	sub	r26, r22
    1ccc:	b7 0b       	sbc	r27, r23

00001cce <__udivmodhi4_ep>:
    1cce:	88 1f       	adc	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	5a 95       	dec	r21
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <__udivmodhi4_loop>
    1cd6:	80 95       	com	r24
    1cd8:	90 95       	com	r25
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	08 95       	ret

00001ce0 <_exit>:
    1ce0:	f8 94       	cli

00001ce2 <__stop_program>:
    1ce2:	ff cf       	rjmp	.-2      	; 0x1ce2 <__stop_program>
