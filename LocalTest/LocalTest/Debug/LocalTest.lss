
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000287e  00002912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000287e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800114  00800114  00002926  2**0
                  ALLOC
  3 .stab         0000387c  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000730a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a0  00000000  00000000  00007339  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a2a  00000000  00000000  000075d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000abb  00000000  00000000  0000a003  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001254  00000000  00000000  0000aabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008cc  00000000  00000000  0000bd14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000081b  00000000  00000000  0000c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030ff  00000000  00000000  0000cdfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a8  00000000  00000000  0000fefa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_3>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_10>
      2c:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_29>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	ee e7       	ldi	r30, 0x7E	; 126
     1be:	f8 e2       	ldi	r31, 0x28	; 40
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a4 31       	cpi	r26, 0x14	; 20
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a4 e1       	ldi	r26, 0x14	; 20
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	aa 3a       	cpi	r26, 0xAA	; 170
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 c4 02 	call	0x588	; 0x588 <main>
     1e0:	0c 94 3d 14 	jmp	0x287a	; 0x287a <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <turn>:
// 		array[1] = (char)data[1];
// 		array[2] = 3;
// 		cli();
// 		m_rf_send(ADDRESS,array,PACKET_LENGTH);
// 		sei();
		if (sqrt((data[1]-y)*(data[1]-y)+(data[0]-x)*(data[0]-x)) < 5) {
     1e8:	8f 92       	push	r8
			exit = 1;
		}
		if (changedState) return;
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
	}
	m_red(OFF);
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
	game_pause();
     1fe:	df 93       	push	r29
     200:	6a 01       	movw	r12, r20
     202:	7b 01       	movw	r14, r22
// 		m_rf_send(ADDRESS,array,PACKET_LENGTH);
// 		sei();
		if (sqrt((data[1]-y)*(data[1]-y)+(data[0]-x)*(data[0]-x)) < 5) {
			exit = 1;
		}
		if (changedState) return;
     204:	48 01       	movw	r8, r16
     206:	59 01       	movw	r10, r18
     208:	2a 9a       	sbi	0x05, 2	; 5
     20a:	2b 9a       	sbi	0x05, 3	; 5
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	91 05       	cpc	r25, r1
	}
	m_red(OFF);
	game_pause();
}
     210:	81 f5       	brne	.+96     	; 0x272 <turn+0x8a>
     212:	60 91 96 00 	lds	r22, 0x0096
     216:	70 91 97 00 	lds	r23, 0x0097
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     222:	a7 01       	movw	r20, r14
     224:	96 01       	movw	r18, r12
     226:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     22a:	0e 94 c9 11 	call	0x2392	; 0x2392 <__fixunssfsi>
     22e:	70 93 99 00 	sts	0x0099, r23
     232:	60 93 98 00 	sts	0x0098, r22
     236:	c0 91 88 00 	lds	r28, 0x0088
     23a:	d0 91 89 00 	lds	r29, 0x0089
     23e:	a7 01       	movw	r20, r14
     240:	96 01       	movw	r18, r12
void turn(int dir,float speed, float degree) {
	set(PORTB,2);
	set(PORTB,3);
	if (dir == LEFT) {
		OCR3A = (unsigned int) ((float)ICR3 * speed);
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     242:	c5 01       	movw	r24, r10
     244:	b4 01       	movw	r22, r8
     246:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     24a:	6b 01       	movw	r12, r22
     24c:	7c 01       	movw	r14, r24
     24e:	be 01       	movw	r22, r28
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     258:	9b 01       	movw	r18, r22
     25a:	ac 01       	movw	r20, r24
     25c:	c7 01       	movw	r24, r14
     25e:	b6 01       	movw	r22, r12
     260:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     264:	0e 94 c9 11 	call	0x2392	; 0x2392 <__fixunssfsi>
     268:	70 93 8b 00 	sts	0x008B, r23
     26c:	60 93 8a 00 	sts	0x008A, r22
     270:	31 c0       	rjmp	.+98     	; 0x2d4 <turn+0xec>
	}
	
		if (dir == RIGHT) {
     272:	89 2b       	or	r24, r25
     274:	79 f5       	brne	.+94     	; 0x2d4 <turn+0xec>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     276:	c0 91 96 00 	lds	r28, 0x0096
     27a:	d0 91 97 00 	lds	r29, 0x0097
     27e:	9a 01       	movw	r18, r20
     280:	ab 01       	movw	r20, r22
     282:	c5 01       	movw	r24, r10
     284:	b4 01       	movw	r22, r8
     286:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     28a:	4b 01       	movw	r8, r22
     28c:	5c 01       	movw	r10, r24
     28e:	be 01       	movw	r22, r28
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     298:	9b 01       	movw	r18, r22
     29a:	ac 01       	movw	r20, r24
     29c:	c5 01       	movw	r24, r10
     29e:	b4 01       	movw	r22, r8
     2a0:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     2a4:	0e 94 c9 11 	call	0x2392	; 0x2392 <__fixunssfsi>
     2a8:	70 93 99 00 	sts	0x0099, r23
     2ac:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     2b0:	60 91 88 00 	lds	r22, 0x0088
     2b4:	70 91 89 00 	lds	r23, 0x0089
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     2c0:	a7 01       	movw	r20, r14
     2c2:	96 01       	movw	r18, r12
     2c4:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     2c8:	0e 94 c9 11 	call	0x2392	; 0x2392 <__fixunssfsi>
     2cc:	70 93 8b 00 	sts	0x008B, r23
     2d0:	60 93 8a 00 	sts	0x008A, r22
		}
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	bf 90       	pop	r11
     2e6:	af 90       	pop	r10
     2e8:	9f 90       	pop	r9
     2ea:	8f 90       	pop	r8
     2ec:	08 95       	ret

000002ee <drive_to_point2>:

void drive_to_puck() {

}

void drive_to_point2(int x, int y) {
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	2a 97       	sbiw	r28, 0x0a	; 10
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	2c 01       	movw	r4, r24
     304:	4b 01       	movw	r8, r22
	m_green(ON);
     306:	6a 9a       	sbi	0x0d, 2	; 13
     308:	72 98       	cbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	2f ef       	ldi	r18, 0xFF	; 255
     30c:	89 e6       	ldi	r24, 0x69	; 105
     30e:	98 e1       	ldi	r25, 0x18	; 24
     310:	21 50       	subi	r18, 0x01	; 1
     312:	80 40       	sbci	r24, 0x00	; 0
     314:	90 40       	sbci	r25, 0x00	; 0
     316:	e1 f7       	brne	.-8      	; 0x310 <drive_to_point2+0x22>
     318:	00 c0       	rjmp	.+0      	; 0x31a <drive_to_point2+0x2c>
     31a:	00 00       	nop
	m_wait(500);
	float speed_cap = 0.25;
	localize(data);
     31c:	84 e8       	ldi	r24, 0x84	; 132
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 0c 08 	call	0x1018	; 0x1018 <localize>
	int dir = 0;
	while(1) {
		localize(data);
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     324:	66 24       	eor	r6, r6
     326:	57 fc       	sbrc	r5, 7
     328:	60 94       	com	r6
     32a:	76 2c       	mov	r7, r6
     32c:	c4 01       	movw	r24, r8
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	89 83       	std	Y+1, r24	; 0x01
     338:	9a 83       	std	Y+2, r25	; 0x02
     33a:	ab 83       	std	Y+3, r26	; 0x03
     33c:	bc 83       	std	Y+4, r27	; 0x04
     33e:	0f 2e       	mov	r0, r31
     340:	f8 e6       	ldi	r31, 0x68	; 104
     342:	2f 2e       	mov	r2, r31
     344:	33 24       	eor	r3, r3
     346:	33 94       	inc	r3
     348:	f0 2d       	mov	r31, r0
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = 1.0 - (((float)angle_dif)/180.0);
		//Set distance
		dist = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
		spd = ((float)dist)/70.0;
		if (spd > speed_cap) spd = speed_cap;
     34a:	4d 82       	std	Y+5, r4	; 0x05
     34c:	5e 82       	std	Y+6, r5	; 0x06
     34e:	6f 82       	std	Y+7, r6	; 0x07
     350:	78 86       	std	Y+8, r7	; 0x08
	float dist = 0.0;
	float spd = 0.0;
	float deg = 0.0;
	int dir = 0;
	while(1) {
		localize(data);
     352:	84 e8       	ldi	r24, 0x84	; 132
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 0c 08 	call	0x1018	; 0x1018 <localize>
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     35a:	6d 81       	ldd	r22, Y+5	; 0x05
     35c:	7e 81       	ldd	r23, Y+6	; 0x06
     35e:	8f 81       	ldd	r24, Y+7	; 0x07
     360:	98 85       	ldd	r25, Y+8	; 0x08
     362:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__floatsisf>
     366:	20 91 84 01 	lds	r18, 0x0184
     36a:	30 91 85 01 	lds	r19, 0x0185
     36e:	40 91 86 01 	lds	r20, 0x0186
     372:	50 91 87 01 	lds	r21, 0x0187
     376:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     37a:	06 2f       	mov	r16, r22
     37c:	17 2f       	mov	r17, r23
     37e:	8a 87       	std	Y+10, r24	; 0x0a
     380:	99 87       	std	Y+9, r25	; 0x09
     382:	69 81       	ldd	r22, Y+1	; 0x01
     384:	7a 81       	ldd	r23, Y+2	; 0x02
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__floatsisf>
     38e:	a8 e8       	ldi	r26, 0x88	; 136
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	2d 91       	ld	r18, X+
     394:	3d 91       	ld	r19, X+
     396:	4d 91       	ld	r20, X+
     398:	5c 91       	ld	r21, X
     39a:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     39e:	46 2e       	mov	r4, r22
     3a0:	57 2e       	mov	r5, r23
     3a2:	68 2e       	mov	r6, r24
     3a4:	79 2e       	mov	r7, r25
     3a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a8:	89 85       	ldd	r24, Y+9	; 0x09
     3aa:	20 2f       	mov	r18, r16
     3ac:	31 2f       	mov	r19, r17
     3ae:	49 2f       	mov	r20, r25
     3b0:	58 2f       	mov	r21, r24
     3b2:	64 2d       	mov	r22, r4
     3b4:	75 2d       	mov	r23, r5
     3b6:	86 2d       	mov	r24, r6
     3b8:	97 2d       	mov	r25, r7
     3ba:	0e 94 02 11 	call	0x2204	; 0x2204 <atan2>
     3be:	4b 01       	movw	r8, r22
     3c0:	5c 01       	movw	r10, r24
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	44 eb       	ldi	r20, 0xB4	; 180
     3c8:	52 e4       	ldi	r21, 0x42	; 66
     3ca:	ec e8       	ldi	r30, 0x8C	; 140
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	60 81       	ld	r22, Z
     3d0:	71 81       	ldd	r23, Z+1	; 0x01
     3d2:	82 81       	ldd	r24, Z+2	; 0x02
     3d4:	93 81       	ldd	r25, Z+3	; 0x03
     3d6:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
     3de:	f7 fa       	bst	r15, 7
     3e0:	f0 94       	com	r15
     3e2:	f7 f8       	bld	r15, 7
     3e4:	f0 94       	com	r15
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	44 e3       	ldi	r20, 0x34	; 52
     3ec:	53 e4       	ldi	r21, 0x43	; 67
     3ee:	c5 01       	movw	r24, r10
     3f0:	b4 01       	movw	r22, r8
     3f2:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     3f6:	23 ec       	ldi	r18, 0xC3	; 195
     3f8:	35 ef       	ldi	r19, 0xF5	; 245
     3fa:	48 e4       	ldi	r20, 0x48	; 72
     3fc:	50 e4       	ldi	r21, 0x40	; 64
     3fe:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	c7 01       	movw	r24, r14
     408:	b6 01       	movw	r22, r12
     40a:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     40e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fixsfsi>
     412:	cb 01       	movw	r24, r22
     414:	8c 57       	subi	r24, 0x7C	; 124
     416:	9c 4f       	sbci	r25, 0xFC	; 252
     418:	b1 01       	movw	r22, r2
     41a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__divmodhi4>
     41e:	bc 01       	movw	r22, r24
     420:	64 5b       	subi	r22, 0xB4	; 180
     422:	71 09       	sbc	r23, r1
     424:	88 27       	eor	r24, r24
     426:	77 fd       	sbrc	r23, 7
     428:	80 95       	com	r24
     42a:	98 2f       	mov	r25, r24
     42c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__floatsisf>
     430:	b6 2e       	mov	r11, r22
     432:	c7 2e       	mov	r12, r23
     434:	d8 2e       	mov	r13, r24
     436:	e9 2e       	mov	r14, r25
		if (angle_dif > 0) {
     438:	ff 24       	eor	r15, r15
     43a:	f3 94       	inc	r15
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	0e 94 05 13 	call	0x260a	; 0x260a <__gesf2>
     446:	18 16       	cp	r1, r24
     448:	0c f0       	brlt	.+2      	; 0x44c <drive_to_point2+0x15e>
     44a:	f1 2c       	mov	r15, r1
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	ff 26       	eor	r15, r31
		}
		else {
			dir = LEFT;
		}
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = 1.0 - (((float)angle_dif)/180.0);
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	44 e3       	ldi	r20, 0x34	; 52
     456:	53 e4       	ldi	r21, 0x43	; 67
     458:	6b 2d       	mov	r22, r11
     45a:	7c 2d       	mov	r23, r12
     45c:	8d 2d       	mov	r24, r13
     45e:	9e 2d       	mov	r25, r14
     460:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	9f e3       	ldi	r25, 0x3F	; 63
     470:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     474:	b6 2e       	mov	r11, r22
     476:	c7 2e       	mov	r12, r23
     478:	d8 2e       	mov	r13, r24
     47a:	e9 2e       	mov	r14, r25
		//Set distance
		dist = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     47c:	24 2d       	mov	r18, r4
     47e:	35 2d       	mov	r19, r5
     480:	46 2d       	mov	r20, r6
     482:	57 2d       	mov	r21, r7
     484:	64 2d       	mov	r22, r4
     486:	75 2d       	mov	r23, r5
     488:	86 2d       	mov	r24, r6
     48a:	97 2d       	mov	r25, r7
     48c:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     490:	2b 01       	movw	r4, r22
     492:	3c 01       	movw	r6, r24
     494:	9a 85       	ldd	r25, Y+10	; 0x0a
     496:	89 85       	ldd	r24, Y+9	; 0x09
     498:	20 2f       	mov	r18, r16
     49a:	31 2f       	mov	r19, r17
     49c:	49 2f       	mov	r20, r25
     49e:	58 2f       	mov	r21, r24
     4a0:	60 2f       	mov	r22, r16
     4a2:	71 2f       	mov	r23, r17
     4a4:	89 2f       	mov	r24, r25
     4a6:	95 2f       	mov	r25, r21
     4a8:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     4ac:	9b 01       	movw	r18, r22
     4ae:	ac 01       	movw	r20, r24
     4b0:	c3 01       	movw	r24, r6
     4b2:	b2 01       	movw	r22, r4
     4b4:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
     4b8:	0e 94 7d 13 	call	0x26fa	; 0x26fa <sqrt>
     4bc:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fixsfsi>
     4c0:	88 27       	eor	r24, r24
     4c2:	77 fd       	sbrc	r23, 7
     4c4:	80 95       	com	r24
     4c6:	98 2f       	mov	r25, r24
     4c8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__floatsisf>
		spd = ((float)dist)/70.0;
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	4c e8       	ldi	r20, 0x8C	; 140
     4d2:	52 e4       	ldi	r21, 0x42	; 66
     4d4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
     4d8:	96 2e       	mov	r9, r22
     4da:	a7 2e       	mov	r10, r23
     4dc:	78 2e       	mov	r7, r24
     4de:	89 2e       	mov	r8, r25
		if (spd > speed_cap) spd = speed_cap;
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e8       	ldi	r20, 0x80	; 128
     4e6:	5e e3       	ldi	r21, 0x3E	; 62
     4e8:	0e 94 05 13 	call	0x260a	; 0x260a <__gesf2>
     4ec:	18 16       	cp	r1, r24
     4ee:	4c f4       	brge	.+18     	; 0x502 <drive_to_point2+0x214>
     4f0:	91 2c       	mov	r9, r1
     4f2:	a1 2c       	mov	r10, r1
     4f4:	68 94       	set
     4f6:	77 24       	eor	r7, r7
     4f8:	77 f8       	bld	r7, 7
     4fa:	0f 2e       	mov	r0, r31
     4fc:	fe e3       	ldi	r31, 0x3E	; 62
     4fe:	8f 2e       	mov	r8, r31
     500:	f0 2d       	mov	r31, r0
		turn(dir, spd, deg);
     502:	0b 2d       	mov	r16, r11
     504:	1c 2d       	mov	r17, r12
     506:	2d 2d       	mov	r18, r13
     508:	3e 2d       	mov	r19, r14
     50a:	49 2d       	mov	r20, r9
     50c:	5a 2d       	mov	r21, r10
     50e:	67 2d       	mov	r22, r7
     510:	78 2d       	mov	r23, r8
     512:	8f 2d       	mov	r24, r15
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turn>
	}
     51a:	1b cf       	rjmp	.-458    	; 0x352 <drive_to_point2+0x64>

0000051c <drive_to_goal>:
	m_red(OFF);
	game_pause();
}

void drive_to_goal() {
	drive_to_point2(60,0);
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	8c e3       	ldi	r24, 0x3C	; 60
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 77 01 	call	0x2ee	; 0x2ee <drive_to_point2>

00000528 <shoot>:
}

void shoot() {
		set(PORTB,7);
     528:	2f 9a       	sbi	0x05, 7	; 5
     52a:	2f ef       	ldi	r18, 0xFF	; 255
     52c:	81 ee       	ldi	r24, 0xE1	; 225
     52e:	94 e0       	ldi	r25, 0x04	; 4
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <shoot+0x8>
     538:	00 c0       	rjmp	.+0      	; 0x53a <shoot+0x12>
     53a:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     53c:	2f 98       	cbi	0x05, 7	; 5
     53e:	08 95       	ret

00000540 <game_pause>:
}

void game_pause() {
	OCR1B = 0;
     540:	10 92 8b 00 	sts	0x008B, r1
     544:	10 92 8a 00 	sts	0x008A, r1
	OCR3A = 0;
     548:	10 92 99 00 	sts	0x0099, r1
     54c:	10 92 98 00 	sts	0x0098, r1
	clear(PORTB,2);
     550:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     552:	2b 98       	cbi	0x05, 3	; 5
     554:	08 95       	ret

00000556 <comm_test>:
	set(PORTB,2);
	set(PORTB,3);
}

void comm_test() {
	set(PORTD,5);
     556:	5d 9a       	sbi	0x0b, 5	; 11
     558:	2f ef       	ldi	r18, 0xFF	; 255
     55a:	89 e6       	ldi	r24, 0x69	; 105
     55c:	98 e1       	ldi	r25, 0x18	; 24
     55e:	21 50       	subi	r18, 0x01	; 1
     560:	80 40       	sbci	r24, 0x00	; 0
     562:	90 40       	sbci	r25, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <comm_test+0x8>
     566:	00 c0       	rjmp	.+0      	; 0x568 <comm_test+0x12>
     568:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     56a:	5d 98       	cbi	0x0b, 5	; 11
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	89 e6       	ldi	r24, 0x69	; 105
     570:	98 e1       	ldi	r25, 0x18	; 24
     572:	21 50       	subi	r18, 0x01	; 1
     574:	80 40       	sbci	r24, 0x00	; 0
     576:	90 40       	sbci	r25, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <comm_test+0x1c>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <comm_test+0x26>
     57c:	00 00       	nop
	m_wait(500);
	state = 0;
     57e:	10 92 15 01 	sts	0x0115, r1
     582:	10 92 14 01 	sts	0x0114, r1
     586:	08 95       	ret

00000588 <main>:
		*/
}

int main(void)
{
	set(DDRD,5);
     588:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     58a:	0e 94 2c 05 	call	0xa58	; 0xa58 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     58e:	4a e0       	ldi	r20, 0x0A	; 10
     590:	68 e0       	ldi	r22, 0x08	; 8
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	0e 94 42 0b 	call	0x1684	; 0x1684 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     598:	e1 e6       	ldi	r30, 0x61	; 97
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 e8       	ldi	r24, 0x80	; 128
     59e:	80 83       	st	Z, r24
     5a0:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     5a2:	85 b5       	in	r24, 0x25	; 37
     5a4:	88 60       	ori	r24, 0x08	; 8
     5a6:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     5a8:	84 b5       	in	r24, 0x24	; 36
     5aa:	82 60       	ori	r24, 0x02	; 2
     5ac:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     5ae:	84 b5       	in	r24, 0x24	; 36
     5b0:	82 60       	ori	r24, 0x02	; 2
     5b2:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     5b4:	84 b5       	in	r24, 0x24	; 36
     5b6:	80 62       	ori	r24, 0x20	; 32
     5b8:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     5ba:	84 b5       	in	r24, 0x24	; 36
     5bc:	8f 7e       	andi	r24, 0xEF	; 239
     5be:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     5c0:	85 b5       	in	r24, 0x25	; 37
     5c2:	84 60       	ori	r24, 0x04	; 4
     5c4:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     5c6:	85 b5       	in	r24, 0x25	; 37
     5c8:	82 60       	ori	r24, 0x02	; 2
     5ca:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     5cc:	85 b5       	in	r24, 0x25	; 37
     5ce:	81 60       	ori	r24, 0x01	; 1
     5d0:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     5d2:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     5d8:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     5da:	e1 e8       	ldi	r30, 0x81	; 129
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 61       	ori	r24, 0x10	; 16
     5e2:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     5e4:	80 81       	ld	r24, Z
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     5ea:	a0 e8       	ldi	r26, 0x80	; 128
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	8c 91       	ld	r24, X
     5f0:	82 60       	ori	r24, 0x02	; 2
     5f2:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     5f4:	8c 91       	ld	r24, X
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     5fa:	8c 91       	ld	r24, X
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     600:	8c 91       	ld	r24, X
     602:	8f 7e       	andi	r24, 0xEF	; 239
     604:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     606:	80 81       	ld	r24, Z
     608:	8b 7f       	andi	r24, 0xFB	; 251
     60a:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     60c:	80 81       	ld	r24, Z
     60e:	8d 7f       	andi	r24, 0xFD	; 253
     610:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     612:	80 81       	ld	r24, Z
     614:	81 60       	ori	r24, 0x01	; 1
     616:	80 83       	st	Z, r24
	
	set(DDRB,6);
     618:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	90 93 89 00 	sts	0x0089, r25
     622:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     626:	10 92 8b 00 	sts	0x008B, r1
     62a:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     62e:	e1 e9       	ldi	r30, 0x91	; 145
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	20 81       	ld	r18, Z
     634:	20 61       	ori	r18, 0x10	; 16
     636:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     638:	20 81       	ld	r18, Z
     63a:	28 60       	ori	r18, 0x08	; 8
     63c:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     63e:	a0 e9       	ldi	r26, 0x90	; 144
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	2c 91       	ld	r18, X
     644:	22 60       	ori	r18, 0x02	; 2
     646:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     648:	2c 91       	ld	r18, X
     64a:	2e 7f       	andi	r18, 0xFE	; 254
     64c:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     64e:	2c 91       	ld	r18, X
     650:	20 68       	ori	r18, 0x80	; 128
     652:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     654:	2c 91       	ld	r18, X
     656:	2f 7b       	andi	r18, 0xBF	; 191
     658:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     65a:	20 81       	ld	r18, Z
     65c:	2b 7f       	andi	r18, 0xFB	; 251
     65e:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     660:	20 81       	ld	r18, Z
     662:	2d 7f       	andi	r18, 0xFD	; 253
     664:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     666:	20 81       	ld	r18, Z
     668:	21 60       	ori	r18, 0x01	; 1
     66a:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     66c:	90 93 97 00 	sts	0x0097, r25
     670:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     674:	10 92 99 00 	sts	0x0099, r1
     678:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     67c:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     67e:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     680:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     682:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     684:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     686:	78 94       	sei
	set(ADCSRA,ADIE);
     688:	ea e7       	ldi	r30, 0x7A	; 122
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	88 60       	ori	r24, 0x08	; 8
     690:	80 83       	st	Z, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     692:	ac e7       	ldi	r26, 0x7C	; 124
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	8c 91       	ld	r24, X
     698:	8f 77       	andi	r24, 0x7F	; 127
     69a:	8c 93       	st	X, r24
	clear(ADMUX, REFS0);	//^
     69c:	8c 91       	ld	r24, X
     69e:	8f 7b       	andi	r24, 0xBF	; 191
     6a0:	8c 93       	st	X, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     6a2:	80 81       	ld	r24, Z
     6a4:	84 60       	ori	r24, 0x04	; 4
     6a6:	80 83       	st	Z, r24
	set(ADCSRA, ADPS1);	//^
     6a8:	80 81       	ld	r24, Z
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);	//^
     6ae:	80 81       	ld	r24, Z
     6b0:	81 60       	ori	r24, 0x01	; 1
     6b2:	80 83       	st	Z, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     6b4:	ae e7       	ldi	r26, 0x7E	; 126
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	8c 91       	ld	r24, X
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	8c 93       	st	X, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
     6be:	8c 91       	ld	r24, X
     6c0:	82 60       	ori	r24, 0x02	; 2
     6c2:	8c 93       	st	X, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
     6c4:	8c 91       	ld	r24, X
     6c6:	80 61       	ori	r24, 0x10	; 16
     6c8:	8c 93       	st	X, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
     6ca:	8c 91       	ld	r24, X
     6cc:	80 62       	ori	r24, 0x20	; 32
     6ce:	8c 93       	st	X, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
     6d0:	8c 91       	ld	r24, X
     6d2:	80 64       	ori	r24, 0x40	; 64
     6d4:	8c 93       	st	X, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
     6d6:	ad e7       	ldi	r26, 0x7D	; 125
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	8c 91       	ld	r24, X
     6dc:	81 60       	ori	r24, 0x01	; 1
     6de:	8c 93       	st	X, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
     6e0:	8c 91       	ld	r24, X
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	8c 93       	st	X, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     6e6:	80 81       	ld	r24, Z
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     6ec:	80 81       	ld	r24, Z
     6ee:	80 61       	ori	r24, 0x10	; 16
     6f0:	80 83       	st	Z, r24
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     6f2:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     6f4:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     6f6:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     6f8:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = 0; //set state
     6fa:	10 92 15 01 	sts	0x0115, r1
     6fe:	10 92 14 01 	sts	0x0114, r1
	long count = 0;
	
	char yes;
	//m_bus_init();
	m_wii_open();
     702:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <m_wii_open>
	m_usb_init();
     706:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <m_usb_init>
	//while(!m_usb_isconnected());
	local_init();
     70a:	0e 94 00 08 	call	0x1000	; 0x1000 <local_init>

		m_usb_rx_flush();  				//clear buffer

		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			data[3] = fabs(atan2((float)0-data[1],(float)0-data[0])-(data[2] * 3.14 / 180.0));
     70e:	0f 2e       	mov	r0, r31
     710:	f8 e8       	ldi	r31, 0x88	; 136
     712:	af 2e       	mov	r10, r31
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	bf 2e       	mov	r11, r31
     718:	f0 2d       	mov	r31, r0
			data[4] = (3.14/100.0) * 1000.0;
     71a:	0f 2e       	mov	r0, r31
     71c:	f5 e3       	ldi	r31, 0x35	; 53
     71e:	cf 2e       	mov	r12, r31
     720:	f3 e3       	ldi	r31, 0x33	; 51
     722:	df 2e       	mov	r13, r31
     724:	fb ef       	ldi	r31, 0xFB	; 251
     726:	ef 2e       	mov	r14, r31
     728:	f1 e4       	ldi	r31, 0x41	; 65
     72a:	ff 2e       	mov	r15, r31
     72c:	f0 2d       	mov	r31, r0
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
		}
		*/
}

int main(void)
     72e:	c0 ea       	ldi	r28, 0xA0	; 160
     730:	d1 e0       	ldi	r29, 0x01	; 1
			break;
			
			case 20:

	//m_rf_send(ADDRESS, array, PACKET_LENGTH);
			m_green(TOGGLE);
     732:	68 94       	set
     734:	22 24       	eor	r2, r2
     736:	22 f8       	bld	r2, 2
		}
		
		//*/

		//switch states
        switch (state) {
     738:	41 2c       	mov	r4, r1
	
	char rx_buffer;

    while(1)
    {
		changedState = 0;
     73a:	10 92 17 01 	sts	0x0117, r1
     73e:	10 92 16 01 	sts	0x0116, r1
		*/
		
		//constant localization
		//m_red(ON);
		//m_green(OFF);
		localize(data);
     742:	84 e8       	ldi	r24, 0x84	; 132
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 0c 08 	call	0x1018	; 0x1018 <localize>
		//m_red(OFF);
		//m_green(ON);
		
		//*
		//while(!m_usb_rx_available());  	//wait for an indication from the computer
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
     74a:	0e 94 12 0c 	call	0x1824	; 0x1824 <m_usb_rx_char>
     74e:	18 2f       	mov	r17, r24

		m_usb_rx_flush();  				//clear buffer
     750:	0e 94 30 0c 	call	0x1860	; 0x1860 <m_usb_rx_flush>

		if(rx_buffer == 1) {  			//computer wants ir buffer
     754:	11 30       	cpi	r17, 0x01	; 1
     756:	09 f0       	breq	.+2      	; 0x75a <main+0x1d2>
     758:	5c c0       	rjmp	.+184    	; 0x812 <main+0x28a>
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			data[3] = fabs(atan2((float)0-data[1],(float)0-data[0])-(data[2] * 3.14 / 180.0));
     75a:	20 91 84 01 	lds	r18, 0x0184
     75e:	30 91 85 01 	lds	r19, 0x0185
     762:	40 91 86 01 	lds	r20, 0x0186
     766:	50 91 87 01 	lds	r21, 0x0187
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	cb 01       	movw	r24, r22
     770:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     774:	3b 01       	movw	r6, r22
     776:	4c 01       	movw	r8, r24
     778:	f5 01       	movw	r30, r10
     77a:	20 81       	ld	r18, Z
     77c:	31 81       	ldd	r19, Z+1	; 0x01
     77e:	42 81       	ldd	r20, Z+2	; 0x02
     780:	53 81       	ldd	r21, Z+3	; 0x03
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	cb 01       	movw	r24, r22
     788:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     78c:	a4 01       	movw	r20, r8
     78e:	93 01       	movw	r18, r6
     790:	0e 94 02 11 	call	0x2204	; 0x2204 <atan2>
     794:	3b 01       	movw	r6, r22
     796:	4c 01       	movw	r8, r24
     798:	23 ec       	ldi	r18, 0xC3	; 195
     79a:	35 ef       	ldi	r19, 0xF5	; 245
     79c:	48 e4       	ldi	r20, 0x48	; 72
     79e:	50 e4       	ldi	r21, 0x40	; 64
     7a0:	ec e8       	ldi	r30, 0x8C	; 140
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	60 81       	ld	r22, Z
     7a6:	71 81       	ldd	r23, Z+1	; 0x01
     7a8:	82 81       	ldd	r24, Z+2	; 0x02
     7aa:	93 81       	ldd	r25, Z+3	; 0x03
     7ac:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	44 e3       	ldi	r20, 0x34	; 52
     7b6:	53 e4       	ldi	r21, 0x43	; 67
     7b8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
     7bc:	9b 01       	movw	r18, r22
     7be:	ac 01       	movw	r20, r24
     7c0:	c4 01       	movw	r24, r8
     7c2:	b3 01       	movw	r22, r6
     7c4:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	bf 77       	andi	r27, 0x7F	; 127
     7ce:	e0 e9       	ldi	r30, 0x90	; 144
     7d0:	f1 e0       	ldi	r31, 0x01	; 1
     7d2:	80 83       	st	Z, r24
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	a2 83       	std	Z+2, r26	; 0x02
     7d8:	b3 83       	std	Z+3, r27	; 0x03
			data[4] = (3.14/100.0) * 1000.0;
     7da:	e4 e9       	ldi	r30, 0x94	; 148
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	c0 82       	st	Z, r12
     7e0:	d1 82       	std	Z+1, r13	; 0x01
     7e2:	e2 82       	std	Z+2, r14	; 0x02
     7e4:	f3 82       	std	Z+3, r15	; 0x03
     7e6:	04 e8       	ldi	r16, 0x84	; 132
     7e8:	11 e0       	ldi	r17, 0x01	; 1
			for (int i = 0 ; i < 7 ; i++){
				m_usb_tx_int((int)data[i]);
     7ea:	f8 01       	movw	r30, r16
     7ec:	61 91       	ld	r22, Z+
     7ee:	71 91       	ld	r23, Z+
     7f0:	81 91       	ld	r24, Z+
     7f2:	91 91       	ld	r25, Z+
     7f4:	8f 01       	movw	r16, r30
     7f6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fixsfsi>
     7fa:	cb 01       	movw	r24, r22
     7fc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <m_usb_tx_int>
				m_usb_tx_char('\t');
     800:	89 e0       	ldi	r24, 0x09	; 9
     802:	0e 94 46 0c 	call	0x188c	; 0x188c <m_usb_tx_char>

		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5
			data[3] = fabs(atan2((float)0-data[1],(float)0-data[0])-(data[2] * 3.14 / 180.0));
			data[4] = (3.14/100.0) * 1000.0;
			for (int i = 0 ; i < 7 ; i++){
     806:	0c 17       	cp	r16, r28
     808:	1d 07       	cpc	r17, r29
     80a:	79 f7       	brne	.-34     	; 0x7ea <main+0x262>
				m_usb_tx_int((int)data[i]);
				m_usb_tx_char('\t');

			}

			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     80c:	8a e0       	ldi	r24, 0x0A	; 10
     80e:	0e 94 46 0c 	call	0x188c	; 0x188c <m_usb_tx_char>
		}
		
		//*/

		//switch states
        switch (state) {
     812:	80 91 14 01 	lds	r24, 0x0114
     816:	90 91 15 01 	lds	r25, 0x0115
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	91 05       	cpc	r25, r1
     81e:	dc f4       	brge	.+54     	; 0x856 <main+0x2ce>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	91 05       	cpc	r25, r1
     824:	0c f0       	brlt	.+2      	; 0x828 <main+0x2a0>
     826:	89 cf       	rjmp	.-238    	; 0x73a <main+0x1b2>
     828:	8e 3f       	cpi	r24, 0xFE	; 254
     82a:	ff ef       	ldi	r31, 0xFF	; 255
     82c:	9f 07       	cpc	r25, r31
     82e:	09 f4       	brne	.+2      	; 0x832 <main+0x2aa>
     830:	5c c0       	rjmp	.+184    	; 0x8ea <main+0x362>
     832:	44 f4       	brge	.+16     	; 0x844 <main+0x2bc>
     834:	8c 3f       	cpi	r24, 0xFC	; 252
     836:	ef ef       	ldi	r30, 0xFF	; 255
     838:	9e 07       	cpc	r25, r30
     83a:	39 f1       	breq	.+78     	; 0x88a <main+0x302>
     83c:	03 96       	adiw	r24, 0x03	; 3
     83e:	09 f0       	breq	.+2      	; 0x842 <main+0x2ba>
     840:	b7 c0       	rjmp	.+366    	; 0x9b0 <main+0x428>
     842:	35 c0       	rjmp	.+106    	; 0x8ae <main+0x326>
     844:	8f 3f       	cpi	r24, 0xFF	; 255
     846:	2f ef       	ldi	r18, 0xFF	; 255
     848:	92 07       	cpc	r25, r18
     84a:	09 f4       	brne	.+2      	; 0x84e <main+0x2c6>
     84c:	92 c0       	rjmp	.+292    	; 0x972 <main+0x3ea>
     84e:	89 2b       	or	r24, r25
     850:	09 f4       	brne	.+2      	; 0x854 <main+0x2cc>
     852:	99 c0       	rjmp	.+306    	; 0x986 <main+0x3fe>
     854:	ad c0       	rjmp	.+346    	; 0x9b0 <main+0x428>
     856:	84 31       	cpi	r24, 0x14	; 20
     858:	91 05       	cpc	r25, r1
     85a:	09 f4       	brne	.+2      	; 0x85e <main+0x2d6>
     85c:	9c c0       	rjmp	.+312    	; 0x996 <main+0x40e>
     85e:	44 f4       	brge	.+16     	; 0x870 <main+0x2e8>
     860:	83 30       	cpi	r24, 0x03	; 3
     862:	91 05       	cpc	r25, r1
     864:	09 f4       	brne	.+2      	; 0x868 <main+0x2e0>
     866:	92 c0       	rjmp	.+292    	; 0x98c <main+0x404>
     868:	04 97       	sbiw	r24, 0x04	; 4
     86a:	09 f0       	breq	.+2      	; 0x86e <main+0x2e6>
     86c:	a1 c0       	rjmp	.+322    	; 0x9b0 <main+0x428>
     86e:	90 c0       	rjmp	.+288    	; 0x990 <main+0x408>
     870:	81 3a       	cpi	r24, 0xA1	; 161
     872:	91 05       	cpc	r25, r1
     874:	09 f4       	brne	.+2      	; 0x878 <main+0x2f0>
     876:	9a c0       	rjmp	.+308    	; 0x9ac <main+0x424>
     878:	84 3a       	cpi	r24, 0xA4	; 164
     87a:	91 05       	cpc	r25, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <main+0x2f8>
     87e:	90 c0       	rjmp	.+288    	; 0x9a0 <main+0x418>
     880:	80 3a       	cpi	r24, 0xA0	; 160
     882:	91 05       	cpc	r25, r1
     884:	09 f0       	breq	.+2      	; 0x888 <main+0x300>
     886:	94 c0       	rjmp	.+296    	; 0x9b0 <main+0x428>
     888:	8e c0       	rjmp	.+284    	; 0x9a6 <main+0x41e>
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	93 ed       	ldi	r25, 0xD3	; 211
     88e:	e0 e3       	ldi	r30, 0x30	; 48
     890:	81 50       	subi	r24, 0x01	; 1
     892:	90 40       	sbci	r25, 0x00	; 0
     894:	e0 40       	sbci	r30, 0x00	; 0
     896:	e1 f7       	brne	.-8      	; 0x890 <main+0x308>
     898:	00 c0       	rjmp	.+0      	; 0x89a <main+0x312>
     89a:	00 00       	nop
			
			case -4:
			m_wait(1000);
				shoot();
     89c:	0e 94 94 02 	call	0x528	; 0x528 <shoot>
				state = -3;
     8a0:	8d ef       	ldi	r24, 0xFD	; 253
     8a2:	9f ef       	ldi	r25, 0xFF	; 255
     8a4:	90 93 15 01 	sts	0x0115, r25
     8a8:	80 93 14 01 	sts	0x0114, r24
			break;
     8ac:	46 cf       	rjmp	.-372    	; 0x73a <main+0x1b2>
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     8ae:	e8 e8       	ldi	r30, 0x88	; 136
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	91 81       	ldd	r25, Z+1	; 0x01
     8b6:	ea e8       	ldi	r30, 0x8A	; 138
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	91 83       	std	Z+1, r25	; 0x01
     8bc:	80 83       	st	Z, r24
				OCR3A = ICR3;
     8be:	e6 e9       	ldi	r30, 0x96	; 150
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	90 93 99 00 	sts	0x0099, r25
     8ca:	80 93 98 00 	sts	0x0098, r24
				set(PORTB,2);
     8ce:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
     8d0:	2b 9a       	sbi	0x05, 3	; 5
     8d2:	ff ef       	ldi	r31, 0xFF	; 255
     8d4:	23 ed       	ldi	r18, 0xD3	; 211
     8d6:	80 e3       	ldi	r24, 0x30	; 48
     8d8:	f1 50       	subi	r31, 0x01	; 1
     8da:	20 40       	sbci	r18, 0x00	; 0
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <main+0x350>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <main+0x35a>
     8e2:	00 00       	nop
				m_wait(1000);
				clear(PORTB,3);
     8e4:	2b 98       	cbi	0x05, 3	; 5
				clear(PORTB,2);
     8e6:	2a 98       	cbi	0x05, 2	; 5
			break;
     8e8:	28 cf       	rjmp	.-432    	; 0x73a <main+0x1b2>
		}
		
		//*/

		//switch states
        switch (state) {
     8ea:	0f 2e       	mov	r0, r31
     8ec:	f6 e0       	ldi	r31, 0x06	; 6
     8ee:	8f 2e       	mov	r8, r31
     8f0:	91 2c       	mov	r9, r1
     8f2:	f0 2d       	mov	r31, r0
     8f4:	34 2c       	mov	r3, r4
     8f6:	54 2c       	mov	r5, r4
     8f8:	64 2c       	mov	r6, r4
     8fa:	74 2c       	mov	r7, r4
				clear(PORTB,2);
			break;
			
			case -2: //test turning n driving n stuff
				for (float i = 0; i <= 1; i += .2) {
					turn(LEFT,1.0,i);
     8fc:	03 2d       	mov	r16, r3
     8fe:	15 2d       	mov	r17, r5
     900:	26 2d       	mov	r18, r6
     902:	37 2d       	mov	r19, r7
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	60 e8       	ldi	r22, 0x80	; 128
     90a:	7f e3       	ldi	r23, 0x3F	; 63
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turn>
     914:	9f ef       	ldi	r25, 0xFF	; 255
     916:	e3 ed       	ldi	r30, 0xD3	; 211
     918:	f0 e3       	ldi	r31, 0x30	; 48
     91a:	91 50       	subi	r25, 0x01	; 1
     91c:	e0 40       	sbci	r30, 0x00	; 0
     91e:	f0 40       	sbci	r31, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <main+0x392>
     922:	00 c0       	rjmp	.+0      	; 0x924 <main+0x39c>
     924:	00 00       	nop
					m_wait(1000);
					turn(RIGHT,1.0,i);
     926:	26 2d       	mov	r18, r6
     928:	37 2d       	mov	r19, r7
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	60 e8       	ldi	r22, 0x80	; 128
     930:	7f e3       	ldi	r23, 0x3F	; 63
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turn>
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	83 ed       	ldi	r24, 0xD3	; 211
     93e:	90 e3       	ldi	r25, 0x30	; 48
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <main+0x3b8>
     948:	00 c0       	rjmp	.+0      	; 0x94a <main+0x3c2>
     94a:	00 00       	nop
				clear(PORTB,3);
				clear(PORTB,2);
			break;
			
			case -2: //test turning n driving n stuff
				for (float i = 0; i <= 1; i += .2) {
     94c:	2d ec       	ldi	r18, 0xCD	; 205
     94e:	3c ec       	ldi	r19, 0xCC	; 204
     950:	4c e4       	ldi	r20, 0x4C	; 76
     952:	5e e3       	ldi	r21, 0x3E	; 62
     954:	63 2d       	mov	r22, r3
     956:	75 2d       	mov	r23, r5
     958:	86 2d       	mov	r24, r6
     95a:	97 2d       	mov	r25, r7
     95c:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
     960:	36 2e       	mov	r3, r22
     962:	57 2e       	mov	r5, r23
     964:	68 2e       	mov	r6, r24
     966:	79 2e       	mov	r7, r25
     968:	e1 e0       	ldi	r30, 0x01	; 1
     96a:	8e 1a       	sub	r8, r30
     96c:	91 08       	sbc	r9, r1
     96e:	31 f6       	brne	.-116    	; 0x8fc <main+0x374>
     970:	e4 ce       	rjmp	.-568    	; 0x73a <main+0x1b2>
     972:	ff ef       	ldi	r31, 0xFF	; 255
     974:	29 e6       	ldi	r18, 0x69	; 105
     976:	88 e1       	ldi	r24, 0x18	; 24
     978:	f1 50       	subi	r31, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <main+0x3f0>
     980:	00 c0       	rjmp	.+0      	; 0x982 <main+0x3fa>
     982:	00 00       	nop
     984:	da ce       	rjmp	.-588    	; 0x73a <main+0x1b2>
				//disp(8);
				//count++;
			break;
			
			case 0:
			game_pause();
     986:	0e 94 a0 02 	call	0x540	; 0x540 <game_pause>
			
			break;
     98a:	d7 ce       	rjmp	.-594    	; 0x73a <main+0x1b2>
			case 2:
			drive_to_puck();
			break;
			
			case 3:
			drive_to_goal();
     98c:	0e 94 8e 02 	call	0x51c	; 0x51c <drive_to_goal>
			break;
			
			case 4:
			shoot();
     990:	0e 94 94 02 	call	0x528	; 0x528 <shoot>
			break;
     994:	d2 ce       	rjmp	.-604    	; 0x73a <main+0x1b2>
			
			case 20:

	//m_rf_send(ADDRESS, array, PACKET_LENGTH);
			m_green(TOGGLE);
     996:	6a 9a       	sbi	0x0d, 2	; 13
     998:	8e b1       	in	r24, 0x0e	; 14
     99a:	82 25       	eor	r24, r2
     99c:	8e b9       	out	0x0e, r24	; 14
     99e:	cd ce       	rjmp	.-614    	; 0x73a <main+0x1b2>
			
			break;
			
			case 0xA4:
			game_pause();
     9a0:	0e 94 a0 02 	call	0x540	; 0x540 <game_pause>
			break;
     9a4:	ca ce       	rjmp	.-620    	; 0x73a <main+0x1b2>
			
			case 0xA0:
			comm_test();
     9a6:	0e 94 ab 02 	call	0x556	; 0x556 <comm_test>
			break;
     9aa:	c7 ce       	rjmp	.-626    	; 0x73a <main+0x1b2>
			
			case 0xA1:
			drive_to_goal();
     9ac:	0e 94 8e 02 	call	0x51c	; 0x51c <drive_to_goal>
			break;
			
			default:
			game_pause();
     9b0:	0e 94 a0 02 	call	0x540	; 0x540 <game_pause>
			break;
     9b4:	c2 ce       	rjmp	.-636    	; 0x73a <main+0x1b2>

000009b6 <__vector_29>:
		}
        
    }
}

ISR(ADC_vect) {
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	2f 93       	push	r18
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
	if (ADC  > 500) {
     9c6:	80 91 78 00 	lds	r24, 0x0078
     9ca:	90 91 79 00 	lds	r25, 0x0079
     9ce:	85 3f       	cpi	r24, 0xF5	; 245
     9d0:	91 40       	sbci	r25, 0x01	; 1
     9d2:	18 f0       	brcs	.+6      	; 0x9da <__vector_29+0x24>
		m_green(ON);
     9d4:	6a 9a       	sbi	0x0d, 2	; 13
     9d6:	72 98       	cbi	0x0e, 2	; 14
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__vector_29+0x28>
	}
	
	else {
		m_green(OFF);
     9da:	6a 9a       	sbi	0x0d, 2	; 13
     9dc:	72 9a       	sbi	0x0e, 2	; 14
	}
}
     9de:	9f 91       	pop	r25
     9e0:	8f 91       	pop	r24
     9e2:	2f 91       	pop	r18
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	0f 90       	pop	r0
     9ea:	1f 90       	pop	r1
     9ec:	18 95       	reti

000009ee <__vector_3>:

ISR(INT2_vect)  {
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
	cli();
     a10:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     a12:	6a e0       	ldi	r22, 0x0A	; 10
     a14:	8a e7       	ldi	r24, 0x7A	; 122
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 98 0b 	call	0x1730	; 0x1730 <m_rf_read>
	sei();
     a1c:	78 94       	sei
	state=buffer[0];
     a1e:	80 91 7a 01 	lds	r24, 0x017A
     a22:	80 93 14 01 	sts	0x0114, r24
     a26:	10 92 15 01 	sts	0x0115, r1
	changedState = 1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 17 01 	sts	0x0117, r25
     a32:	80 93 16 01 	sts	0x0116, r24
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	bf 91       	pop	r27
     a3c:	af 91       	pop	r26
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	7f 91       	pop	r23
     a44:	6f 91       	pop	r22
     a46:	5f 91       	pop	r21
     a48:	4f 91       	pop	r20
     a4a:	3f 91       	pop	r19
     a4c:	2f 91       	pop	r18
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     a58:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     a5a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     a5c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
     a60:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     a64:	e9 e6       	ldi	r30, 0x69	; 105
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	80 62       	ori	r24, 0x20	; 32
     a6c:	80 83       	st	Z, r24
     a6e:	80 81       	ld	r24, Z
     a70:	8f 7e       	andi	r24, 0xEF	; 239
     a72:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     a74:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     a76:	78 94       	sei
     a78:	08 95       	ret

00000a7a <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	8c 01       	movw	r16, r24
     a84:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     a86:	8e e5       	ldi	r24, 0x5E	; 94
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <m_wii_read>
	x[0] = blobs[0];
     a8e:	80 91 5e 01 	lds	r24, 0x015E
     a92:	90 91 5f 01 	lds	r25, 0x015F
     a96:	f8 01       	movw	r30, r16
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	80 83       	st	Z, r24
	x[1] = blobs[3];
     a9c:	80 91 64 01 	lds	r24, 0x0164
     aa0:	90 91 65 01 	lds	r25, 0x0165
     aa4:	93 83       	std	Z+3, r25	; 0x03
     aa6:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     aa8:	80 91 6a 01 	lds	r24, 0x016A
     aac:	90 91 6b 01 	lds	r25, 0x016B
     ab0:	95 83       	std	Z+5, r25	; 0x05
     ab2:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     ab4:	80 91 70 01 	lds	r24, 0x0170
     ab8:	90 91 71 01 	lds	r25, 0x0171
     abc:	97 83       	std	Z+7, r25	; 0x07
     abe:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     ac0:	80 91 60 01 	lds	r24, 0x0160
     ac4:	90 91 61 01 	lds	r25, 0x0161
     ac8:	99 83       	std	Y+1, r25	; 0x01
     aca:	88 83       	st	Y, r24
	y[1] = blobs[4];
     acc:	80 91 66 01 	lds	r24, 0x0166
     ad0:	90 91 67 01 	lds	r25, 0x0167
     ad4:	9b 83       	std	Y+3, r25	; 0x03
     ad6:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     ad8:	80 91 6c 01 	lds	r24, 0x016C
     adc:	90 91 6d 01 	lds	r25, 0x016D
     ae0:	9d 83       	std	Y+5, r25	; 0x05
     ae2:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     ae4:	80 91 72 01 	lds	r24, 0x0172
     ae8:	90 91 73 01 	lds	r25, 0x0173
     aec:	9f 83       	std	Y+7, r25	; 0x07
     aee:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <determine_blobs>:

unsigned char determine_blobs() {
     afc:	2f 92       	push	r2
     afe:	3f 92       	push	r3
     b00:	4f 92       	push	r4
     b02:	5f 92       	push	r5
     b04:	6f 92       	push	r6
     b06:	7f 92       	push	r7
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	6c 97       	sbiw	r28, 0x1c	; 28
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     b30:	10 92 26 01 	sts	0x0126, r1
     b34:	10 92 27 01 	sts	0x0127, r1
     b38:	10 92 28 01 	sts	0x0128, r1
     b3c:	10 92 29 01 	sts	0x0129, r1
	distmin = 30000;
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e6       	ldi	r25, 0x60	; 96
     b44:	aa ee       	ldi	r26, 0xEA	; 234
     b46:	b6 e4       	ldi	r27, 0x46	; 70
     b48:	80 93 00 01 	sts	0x0100, r24
     b4c:	90 93 01 01 	sts	0x0101, r25
     b50:	a0 93 02 01 	sts	0x0102, r26
     b54:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     b58:	0f 2e       	mov	r0, r31
     b5a:	f8 e3       	ldi	r31, 0x38	; 56
     b5c:	cf 2e       	mov	r12, r31
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	df 2e       	mov	r13, r31
     b62:	f0 2d       	mov	r31, r0
     b64:	0a e3       	ldi	r16, 0x3A	; 58
     b66:	11 e0       	ldi	r17, 0x01	; 1
     b68:	0f 2e       	mov	r0, r31
     b6a:	fc e3       	ldi	r31, 0x3C	; 60
     b6c:	ef 2e       	mov	r14, r31
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	ff 2e       	mov	r15, r31
     b72:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     b74:	6e e2       	ldi	r22, 0x2E	; 46
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	86 e3       	ldi	r24, 0x36	; 54
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     b80:	80 91 36 01 	lds	r24, 0x0136
     b84:	90 91 37 01 	lds	r25, 0x0137
     b88:	8f 3f       	cpi	r24, 0xFF	; 255
     b8a:	93 40       	sbci	r25, 0x03	; 3
     b8c:	98 f7       	brcc	.-26     	; 0xb74 <__stack+0x75>
     b8e:	f6 01       	movw	r30, r12
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	8f 3f       	cpi	r24, 0xFF	; 255
     b96:	93 40       	sbci	r25, 0x03	; 3
     b98:	68 f7       	brcc	.-38     	; 0xb74 <__stack+0x75>
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	8f 3f       	cpi	r24, 0xFF	; 255
     ba2:	93 40       	sbci	r25, 0x03	; 3
     ba4:	38 f7       	brcc	.-50     	; 0xb74 <__stack+0x75>
     ba6:	f7 01       	movw	r30, r14
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	93 40       	sbci	r25, 0x03	; 3
     bb0:	08 f7       	brcc	.-62     	; 0xb74 <__stack+0x75>
     bb2:	80 90 2a 01 	lds	r8, 0x012A
     bb6:	90 90 2b 01 	lds	r9, 0x012B
     bba:	a0 90 2c 01 	lds	r10, 0x012C
     bbe:	b0 90 2d 01 	lds	r11, 0x012D
     bc2:	20 91 26 01 	lds	r18, 0x0126
     bc6:	29 83       	std	Y+1, r18	; 0x01
     bc8:	30 91 27 01 	lds	r19, 0x0127
     bcc:	3a 83       	std	Y+2, r19	; 0x02
     bce:	40 91 28 01 	lds	r20, 0x0128
     bd2:	4b 83       	std	Y+3, r20	; 0x03
     bd4:	50 91 29 01 	lds	r21, 0x0129
     bd8:	5c 83       	std	Y+4, r21	; 0x04
     bda:	60 91 20 01 	lds	r22, 0x0120
     bde:	6b 8b       	std	Y+19, r22	; 0x13
     be0:	70 91 21 01 	lds	r23, 0x0121
     be4:	7c 8b       	std	Y+20, r23	; 0x14
     be6:	80 91 1e 01 	lds	r24, 0x011E
     bea:	89 8b       	std	Y+17, r24	; 0x11
     bec:	90 91 1f 01 	lds	r25, 0x011F
     bf0:	9a 8b       	std	Y+18, r25	; 0x12
     bf2:	e0 91 22 01 	lds	r30, 0x0122
     bf6:	ed 8b       	std	Y+21, r30	; 0x15
     bf8:	f0 91 23 01 	lds	r31, 0x0123
     bfc:	fe 8b       	std	Y+22, r31	; 0x16
     bfe:	20 91 24 01 	lds	r18, 0x0124
     c02:	2f 8b       	std	Y+23, r18	; 0x17
     c04:	30 91 25 01 	lds	r19, 0x0125
     c08:	38 8f       	std	Y+24, r19	; 0x18
     c0a:	40 91 00 01 	lds	r20, 0x0100
     c0e:	4d 83       	std	Y+5, r20	; 0x05
     c10:	50 91 01 01 	lds	r21, 0x0101
     c14:	5e 83       	std	Y+6, r21	; 0x06
     c16:	20 90 02 01 	lds	r2, 0x0102
     c1a:	30 90 03 01 	lds	r3, 0x0103
     c1e:	60 91 1c 01 	lds	r22, 0x011C
     c22:	69 8f       	std	Y+25, r22	; 0x19
     c24:	70 91 1d 01 	lds	r23, 0x011D
     c28:	7a 8f       	std	Y+26, r23	; 0x1a
     c2a:	80 91 1a 01 	lds	r24, 0x011A
     c2e:	90 91 1b 01 	lds	r25, 0x011B
     c32:	98 8b       	std	Y+16, r25	; 0x10
     c34:	8f 87       	std	Y+15, r24	; 0x0f
     c36:	18 86       	std	Y+8, r1	; 0x08
     c38:	1f 82       	std	Y+7, r1	; 0x07
     c3a:	c1 2c       	mov	r12, r1
     c3c:	d1 2c       	mov	r13, r1
     c3e:	b9 c0       	rjmp	.+370    	; 0xdb2 <__stack+0x2b3>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     c40:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c42:	fc 8d       	ldd	r31, Y+28	; 0x1c
     c44:	e4 15       	cp	r30, r4
     c46:	f5 05       	cpc	r31, r5
     c48:	09 f4       	brne	.+2      	; 0xc4c <__stack+0x14d>
     c4a:	9c c0       	rjmp	.+312    	; 0xd84 <__stack+0x285>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     c4c:	e9 85       	ldd	r30, Y+9	; 0x09
     c4e:	fa 85       	ldd	r31, Y+10	; 0x0a
     c50:	60 81       	ld	r22, Z
     c52:	71 81       	ldd	r23, Z+1	; 0x01
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	f3 01       	movw	r30, r6
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     c7a:	c6 2e       	mov	r12, r22
     c7c:	d7 2e       	mov	r13, r23
     c7e:	e8 2e       	mov	r14, r24
     c80:	f9 2e       	mov	r15, r25
     c82:	eb 85       	ldd	r30, Y+11	; 0x0b
     c84:	fc 85       	ldd	r31, Y+12	; 0x0c
     c86:	60 81       	ld	r22, Z
     c88:	71 81       	ldd	r23, Z+1	; 0x01
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     c92:	4b 01       	movw	r8, r22
     c94:	5c 01       	movw	r10, r24
     c96:	f8 01       	movw	r30, r16
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	c5 01       	movw	r24, r10
     caa:	b4 01       	movw	r22, r8
     cac:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
     cb0:	86 2e       	mov	r8, r22
     cb2:	97 2e       	mov	r9, r23
     cb4:	a8 2e       	mov	r10, r24
     cb6:	b9 2e       	mov	r11, r25
     cb8:	2c 2d       	mov	r18, r12
     cba:	3d 2d       	mov	r19, r13
     cbc:	4e 2d       	mov	r20, r14
     cbe:	5f 2d       	mov	r21, r15
     cc0:	6c 2d       	mov	r22, r12
     cc2:	7d 2d       	mov	r23, r13
     cc4:	8e 2d       	mov	r24, r14
     cc6:	9f 2d       	mov	r25, r15
     cc8:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     ccc:	6b 01       	movw	r12, r22
     cce:	7c 01       	movw	r14, r24
     cd0:	28 2d       	mov	r18, r8
     cd2:	39 2d       	mov	r19, r9
     cd4:	4a 2d       	mov	r20, r10
     cd6:	5b 2d       	mov	r21, r11
     cd8:	68 2d       	mov	r22, r8
     cda:	79 2d       	mov	r23, r9
     cdc:	8a 2d       	mov	r24, r10
     cde:	9b 2d       	mov	r25, r11
     ce0:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
     cf0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <sqrt>
     cf4:	86 2e       	mov	r8, r22
     cf6:	97 2e       	mov	r9, r23
     cf8:	a8 2e       	mov	r10, r24
     cfa:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     cfc:	79 81       	ldd	r23, Y+1	; 0x01
     cfe:	6a 81       	ldd	r22, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	27 2f       	mov	r18, r23
     d06:	36 2f       	mov	r19, r22
     d08:	49 2f       	mov	r20, r25
     d0a:	58 2f       	mov	r21, r24
     d0c:	68 2d       	mov	r22, r8
     d0e:	79 2d       	mov	r23, r9
     d10:	8a 2d       	mov	r24, r10
     d12:	9b 2d       	mov	r25, r11
     d14:	0e 94 05 13 	call	0x260a	; 0x260a <__gesf2>
     d18:	18 16       	cp	r1, r24
     d1a:	d4 f4       	brge	.+52     	; 0xd50 <__stack+0x251>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	68 2d       	mov	r22, r8
     d26:	79 2d       	mov	r23, r9
     d28:	8a 2d       	mov	r24, r10
     d2a:	9b 2d       	mov	r25, r11
     d2c:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
     d30:	6d 8b       	std	Y+21, r22	; 0x15
     d32:	7e 8b       	std	Y+22, r23	; 0x16
     d34:	8f 8b       	std	Y+23, r24	; 0x17
     d36:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     d38:	fb 8d       	ldd	r31, Y+27	; 0x1b
     d3a:	f9 8b       	std	Y+17, r31	; 0x11
     d3c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d3e:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     d40:	3d 85       	ldd	r19, Y+13	; 0x0d
     d42:	3b 8b       	std	Y+19, r19	; 0x13
     d44:	4e 85       	ldd	r20, Y+14	; 0x0e
     d46:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     d48:	89 82       	std	Y+1, r8	; 0x01
     d4a:	9a 82       	std	Y+2, r9	; 0x02
     d4c:	ab 82       	std	Y+3, r10	; 0x03
     d4e:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     d50:	7d 81       	ldd	r23, Y+5	; 0x05
     d52:	6e 81       	ldd	r22, Y+6	; 0x06
     d54:	27 2f       	mov	r18, r23
     d56:	36 2f       	mov	r19, r22
     d58:	42 2d       	mov	r20, r2
     d5a:	53 2d       	mov	r21, r3
     d5c:	68 2d       	mov	r22, r8
     d5e:	79 2d       	mov	r23, r9
     d60:	8a 2d       	mov	r24, r10
     d62:	9b 2d       	mov	r25, r11
     d64:	0e 94 55 11 	call	0x22aa	; 0x22aa <__cmpsf2>
     d68:	88 23       	and	r24, r24
     d6a:	64 f4       	brge	.+24     	; 0xd84 <__stack+0x285>
						distmin = dist;
						close1 = i;
						close2 = j;
     d6c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d6e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d70:	78 8b       	std	Y+16, r23	; 0x10
     d72:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     d74:	7d 85       	ldd	r23, Y+13	; 0x0d
     d76:	79 8f       	std	Y+25, r23	; 0x19
     d78:	8e 85       	ldd	r24, Y+14	; 0x0e
     d7a:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     d7c:	8d 82       	std	Y+5, r8	; 0x05
     d7e:	9e 82       	std	Y+6, r9	; 0x06
     d80:	2a 2c       	mov	r2, r10
     d82:	3b 2c       	mov	r3, r11
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	69 0e       	add	r6, r25
     d88:	71 1c       	adc	r7, r1
     d8a:	0e 5f       	subi	r16, 0xFE	; 254
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     d8e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d90:	fc 8d       	ldd	r31, Y+28	; 0x1c
     d92:	31 96       	adiw	r30, 0x01	; 1
     d94:	fc 8f       	std	Y+28, r31	; 0x1c
     d96:	eb 8f       	std	Y+27, r30	; 0x1b
     d98:	34 97       	sbiw	r30, 0x04	; 4
     d9a:	09 f0       	breq	.+2      	; 0xd9e <__stack+0x29f>
     d9c:	51 cf       	rjmp	.-350    	; 0xc40 <__stack+0x141>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     d9e:	2f 81       	ldd	r18, Y+7	; 0x07
     da0:	38 85       	ldd	r19, Y+8	; 0x08
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	38 87       	std	Y+8, r19	; 0x08
     da8:	2f 83       	std	Y+7, r18	; 0x07
     daa:	69 01       	movw	r12, r18
     dac:	24 30       	cpi	r18, 0x04	; 4
     dae:	31 05       	cpc	r19, r1
     db0:	39 f1       	breq	.+78     	; 0xe00 <__stack+0x301>
				for (int j = i; j < 4; j++) {
     db2:	34 e0       	ldi	r19, 0x04	; 4
     db4:	c3 16       	cp	r12, r19
     db6:	d1 04       	cpc	r13, r1
     db8:	94 f7       	brge	.-28     	; 0xd9e <__stack+0x29f>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     dba:	86 01       	movw	r16, r12
     dbc:	0f 5f       	subi	r16, 0xFF	; 255
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     dc0:	00 0f       	add	r16, r16
     dc2:	11 1f       	adc	r17, r17
     dc4:	0f 2e       	mov	r0, r31
     dc6:	f6 e3       	ldi	r31, 0x36	; 54
     dc8:	ef 2e       	mov	r14, r31
     dca:	f1 e0       	ldi	r31, 0x01	; 1
     dcc:	ff 2e       	mov	r15, r31
     dce:	f0 2d       	mov	r31, r0
     dd0:	e0 0e       	add	r14, r16
     dd2:	f1 1e       	adc	r15, r17
     dd4:	02 5d       	subi	r16, 0xD2	; 210
     dd6:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     dd8:	c6 01       	movw	r24, r12
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	ac 01       	movw	r20, r24
     de0:	4a 5c       	subi	r20, 0xCA	; 202
     de2:	5e 4f       	sbci	r21, 0xFE	; 254
     de4:	5a 87       	std	Y+10, r21	; 0x0a
     de6:	49 87       	std	Y+9, r20	; 0x09
     de8:	bc 01       	movw	r22, r24
     dea:	62 5d       	subi	r22, 0xD2	; 210
     dec:	7e 4f       	sbci	r23, 0xFE	; 254
     dee:	7c 87       	std	Y+12, r23	; 0x0c
     df0:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     df2:	cd 86       	std	Y+13, r12	; 0x0d
     df4:	de 86       	std	Y+14, r13	; 0x0e
     df6:	dc 8e       	std	Y+28, r13	; 0x1c
     df8:	cb 8e       	std	Y+27, r12	; 0x1b
     dfa:	26 01       	movw	r4, r12
     dfc:	37 01       	movw	r6, r14
     dfe:	c7 cf       	rjmp	.-114    	; 0xd8e <__stack+0x28f>
     e00:	88 2d       	mov	r24, r8
     e02:	99 2d       	mov	r25, r9
     e04:	aa 2d       	mov	r26, r10
     e06:	bb 2d       	mov	r27, r11
     e08:	80 93 2a 01 	sts	0x012A, r24
     e0c:	90 93 2b 01 	sts	0x012B, r25
     e10:	a0 93 2c 01 	sts	0x012C, r26
     e14:	b0 93 2d 01 	sts	0x012D, r27
     e18:	59 81       	ldd	r21, Y+1	; 0x01
     e1a:	4a 81       	ldd	r20, Y+2	; 0x02
     e1c:	3b 81       	ldd	r19, Y+3	; 0x03
     e1e:	2c 81       	ldd	r18, Y+4	; 0x04
     e20:	85 2f       	mov	r24, r21
     e22:	94 2f       	mov	r25, r20
     e24:	a3 2f       	mov	r26, r19
     e26:	b2 2f       	mov	r27, r18
     e28:	80 93 26 01 	sts	0x0126, r24
     e2c:	90 93 27 01 	sts	0x0127, r25
     e30:	a0 93 28 01 	sts	0x0128, r26
     e34:	b0 93 29 01 	sts	0x0129, r27
     e38:	7b 89       	ldd	r23, Y+19	; 0x13
     e3a:	70 93 20 01 	sts	0x0120, r23
     e3e:	8c 89       	ldd	r24, Y+20	; 0x14
     e40:	80 93 21 01 	sts	0x0121, r24
     e44:	99 89       	ldd	r25, Y+17	; 0x11
     e46:	90 93 1e 01 	sts	0x011E, r25
     e4a:	ea 89       	ldd	r30, Y+18	; 0x12
     e4c:	e0 93 1f 01 	sts	0x011F, r30
     e50:	5d 89       	ldd	r21, Y+21	; 0x15
     e52:	4e 89       	ldd	r20, Y+22	; 0x16
     e54:	3f 89       	ldd	r19, Y+23	; 0x17
     e56:	28 8d       	ldd	r18, Y+24	; 0x18
     e58:	85 2f       	mov	r24, r21
     e5a:	94 2f       	mov	r25, r20
     e5c:	a3 2f       	mov	r26, r19
     e5e:	b2 2f       	mov	r27, r18
     e60:	80 93 22 01 	sts	0x0122, r24
     e64:	90 93 23 01 	sts	0x0123, r25
     e68:	a0 93 24 01 	sts	0x0124, r26
     e6c:	b0 93 25 01 	sts	0x0125, r27
     e70:	5d 81       	ldd	r21, Y+5	; 0x05
     e72:	4e 81       	ldd	r20, Y+6	; 0x06
     e74:	85 2f       	mov	r24, r21
     e76:	94 2f       	mov	r25, r20
     e78:	a2 2d       	mov	r26, r2
     e7a:	b3 2d       	mov	r27, r3
     e7c:	80 93 00 01 	sts	0x0100, r24
     e80:	90 93 01 01 	sts	0x0101, r25
     e84:	a0 93 02 01 	sts	0x0102, r26
     e88:	b0 93 03 01 	sts	0x0103, r27
     e8c:	f9 8d       	ldd	r31, Y+25	; 0x19
     e8e:	f0 93 1c 01 	sts	0x011C, r31
     e92:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e94:	20 93 1d 01 	sts	0x011D, r18
     e98:	3f 85       	ldd	r19, Y+15	; 0x0f
     e9a:	30 93 1a 01 	sts	0x011A, r19
     e9e:	48 89       	ldd	r20, Y+16	; 0x10
     ea0:	40 93 1b 01 	sts	0x011B, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     ea4:	80 91 20 01 	lds	r24, 0x0120
     ea8:	90 91 21 01 	lds	r25, 0x0121
     eac:	20 91 1c 01 	lds	r18, 0x011C
     eb0:	30 91 1d 01 	lds	r19, 0x011D
     eb4:	82 17       	cp	r24, r18
     eb6:	93 07       	cpc	r25, r19
     eb8:	19 f5       	brne	.+70     	; 0xf00 <__stack+0x401>
				top = far1;
     eba:	90 93 5d 01 	sts	0x015D, r25
     ebe:	80 93 5c 01 	sts	0x015C, r24
				bottom = far2;
     ec2:	40 91 1e 01 	lds	r20, 0x011E
     ec6:	50 91 1f 01 	lds	r21, 0x011F
     eca:	50 93 5b 01 	sts	0x015B, r21
     ece:	40 93 5a 01 	sts	0x015A, r20
				right = close2;
     ed2:	20 91 1a 01 	lds	r18, 0x011A
     ed6:	30 91 1b 01 	lds	r19, 0x011B
     eda:	30 93 57 01 	sts	0x0157, r19
     ede:	20 93 56 01 	sts	0x0156, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     ee2:	69 e0       	ldi	r22, 0x09	; 9
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	fb 01       	movw	r30, r22
     ee8:	e8 1b       	sub	r30, r24
     eea:	f9 0b       	sbc	r31, r25
     eec:	cf 01       	movw	r24, r30
     eee:	84 1b       	sub	r24, r20
     ef0:	95 0b       	sbc	r25, r21
     ef2:	82 1b       	sub	r24, r18
     ef4:	93 0b       	sbc	r25, r19
     ef6:	90 93 59 01 	sts	0x0159, r25
     efa:	80 93 58 01 	sts	0x0158, r24
     efe:	66 c0       	rjmp	.+204    	; 0xfcc <__stack+0x4cd>
			}
			else if (far1 == close2) {
     f00:	4f 85       	ldd	r20, Y+15	; 0x0f
     f02:	58 89       	ldd	r21, Y+16	; 0x10
     f04:	84 17       	cp	r24, r20
     f06:	95 07       	cpc	r25, r21
     f08:	f9 f4       	brne	.+62     	; 0xf48 <__stack+0x449>
				top = far1;
     f0a:	90 93 5d 01 	sts	0x015D, r25
     f0e:	80 93 5c 01 	sts	0x015C, r24
				bottom = far2;
     f12:	40 91 1e 01 	lds	r20, 0x011E
     f16:	50 91 1f 01 	lds	r21, 0x011F
     f1a:	50 93 5b 01 	sts	0x015B, r21
     f1e:	40 93 5a 01 	sts	0x015A, r20
				right = close1;
     f22:	30 93 57 01 	sts	0x0157, r19
     f26:	20 93 56 01 	sts	0x0156, r18
				left = 9 - top - bottom - right;
     f2a:	69 e0       	ldi	r22, 0x09	; 9
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	fb 01       	movw	r30, r22
     f30:	e8 1b       	sub	r30, r24
     f32:	f9 0b       	sbc	r31, r25
     f34:	cf 01       	movw	r24, r30
     f36:	84 1b       	sub	r24, r20
     f38:	95 0b       	sbc	r25, r21
     f3a:	82 1b       	sub	r24, r18
     f3c:	93 0b       	sbc	r25, r19
     f3e:	90 93 59 01 	sts	0x0159, r25
     f42:	80 93 58 01 	sts	0x0158, r24
     f46:	42 c0       	rjmp	.+132    	; 0xfcc <__stack+0x4cd>
			}
			else if (far2 == close1) {
     f48:	40 91 1e 01 	lds	r20, 0x011E
     f4c:	50 91 1f 01 	lds	r21, 0x011F
     f50:	24 17       	cp	r18, r20
     f52:	35 07       	cpc	r19, r21
     f54:	01 f5       	brne	.+64     	; 0xf96 <__stack+0x497>
				top = far2;
     f56:	30 93 5d 01 	sts	0x015D, r19
     f5a:	20 93 5c 01 	sts	0x015C, r18
				bottom = far1;
     f5e:	90 93 5b 01 	sts	0x015B, r25
     f62:	80 93 5a 01 	sts	0x015A, r24
				right = close2;
     f66:	4f 85       	ldd	r20, Y+15	; 0x0f
     f68:	58 89       	ldd	r21, Y+16	; 0x10
     f6a:	50 93 57 01 	sts	0x0157, r21
     f6e:	40 93 56 01 	sts	0x0156, r20
				left = 9 - top - bottom - right;
     f72:	49 e0       	ldi	r20, 0x09	; 9
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	ba 01       	movw	r22, r20
     f78:	62 1b       	sub	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	fb 01       	movw	r30, r22
     f7e:	e8 1b       	sub	r30, r24
     f80:	f9 0b       	sbc	r31, r25
     f82:	cf 01       	movw	r24, r30
     f84:	2f 85       	ldd	r18, Y+15	; 0x0f
     f86:	38 89       	ldd	r19, Y+16	; 0x10
     f88:	82 1b       	sub	r24, r18
     f8a:	93 0b       	sbc	r25, r19
     f8c:	90 93 59 01 	sts	0x0159, r25
     f90:	80 93 58 01 	sts	0x0158, r24
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <__stack+0x4cd>
			}
			else {
				top = far2;
     f96:	50 93 5d 01 	sts	0x015D, r21
     f9a:	40 93 5c 01 	sts	0x015C, r20
				bottom = far1;
     f9e:	90 93 5b 01 	sts	0x015B, r25
     fa2:	80 93 5a 01 	sts	0x015A, r24
				right = close1;
     fa6:	30 93 57 01 	sts	0x0157, r19
     faa:	20 93 56 01 	sts	0x0156, r18
				left = 9 - top - bottom - right;
     fae:	69 e0       	ldi	r22, 0x09	; 9
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	fb 01       	movw	r30, r22
     fb4:	e4 1b       	sub	r30, r20
     fb6:	f5 0b       	sbc	r31, r21
     fb8:	bf 01       	movw	r22, r30
     fba:	68 1b       	sub	r22, r24
     fbc:	79 0b       	sbc	r23, r25
     fbe:	cb 01       	movw	r24, r22
     fc0:	82 1b       	sub	r24, r18
     fc2:	93 0b       	sbc	r25, r19
     fc4:	90 93 59 01 	sts	0x0159, r25
     fc8:	80 93 58 01 	sts	0x0158, r24
			}
		}
	}
	return 1;
}
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	6c 96       	adiw	r28, 0x1c	; 28
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	bf 90       	pop	r11
     fec:	af 90       	pop	r10
     fee:	9f 90       	pop	r9
     ff0:	8f 90       	pop	r8
     ff2:	7f 90       	pop	r7
     ff4:	6f 90       	pop	r6
     ff6:	5f 90       	pop	r5
     ff8:	4f 90       	pop	r4
     ffa:	3f 90       	pop	r3
     ffc:	2f 90       	pop	r2
     ffe:	08 95       	ret

00001000 <local_init>:
	
	return 1;
}

unsigned char local_init() {
	m_wii_open();
    1000:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <m_wii_open>
	
	getData(x,y);
    1004:	6e e2       	ldi	r22, 0x2E	; 46
    1006:	71 e0       	ldi	r23, 0x01	; 1
    1008:	86 e3       	ldi	r24, 0x36	; 54
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <getData>
	

	//Determine indices of all top, bottom, left, right points
	determine_blobs();
    1010:	0e 94 7e 05 	call	0xafc	; 0xafc <determine_blobs>
	
	return 1;
}
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	08 95       	ret

00001018 <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    1018:	2f 92       	push	r2
    101a:	3f 92       	push	r3
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	2d 97       	sbiw	r28, 0x0d	; 13
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	8c 01       	movw	r16, r24
	numlost = 0;
    104e:	10 92 19 01 	sts	0x0119, r1
    1052:	10 92 18 01 	sts	0x0118, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    1056:	0e 94 7e 05 	call	0xafc	; 0xafc <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    105a:	e0 90 5c 01 	lds	r14, 0x015C
    105e:	f0 90 5d 01 	lds	r15, 0x015D
    1062:	f7 01       	movw	r30, r14
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ea 5c       	subi	r30, 0xCA	; 202
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	20 81       	ld	r18, Z
    106e:	31 81       	ldd	r19, Z+1	; 0x01
    1070:	3a 83       	std	Y+2, r19	; 0x02
    1072:	29 83       	std	Y+1, r18	; 0x01
    1074:	2f 3f       	cpi	r18, 0xFF	; 255
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	38 07       	cpc	r19, r24
    107a:	08 f0       	brcs	.+2      	; 0x107e <localize+0x66>
    107c:	ea c2       	rjmp	.+1492   	; 0x1652 <localize+0x63a>
    107e:	a0 90 5a 01 	lds	r10, 0x015A
    1082:	b0 90 5b 01 	lds	r11, 0x015B
    1086:	f5 01       	movw	r30, r10
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	ea 5c       	subi	r30, 0xCA	; 202
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	c0 80       	ld	r12, Z
    1092:	d1 80       	ldd	r13, Z+1	; 0x01
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	c9 16       	cp	r12, r25
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	d9 06       	cpc	r13, r25
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <localize+0x88>
    109e:	d9 c2       	rjmp	.+1458   	; 0x1652 <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    10a0:	b9 01       	movw	r22, r18
    10a2:	6c 0d       	add	r22, r12
    10a4:	7d 1d       	adc	r23, r13
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    10ba:	20 91 08 01 	lds	r18, 0x0108
    10be:	30 91 09 01 	lds	r19, 0x0109
    10c2:	40 91 0a 01 	lds	r20, 0x010A
    10c6:	50 91 0b 01 	lds	r21, 0x010B
    10ca:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    10ce:	6d 83       	std	Y+5, r22	; 0x05
    10d0:	7e 83       	std	Y+6, r23	; 0x06
    10d2:	8f 83       	std	Y+7, r24	; 0x07
    10d4:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    10d6:	f7 01       	movw	r30, r14
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e2 5d       	subi	r30, 0xD2	; 210
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	e0 80       	ld	r14, Z
    10e2:	f1 80       	ldd	r15, Z+1	; 0x01
    10e4:	f5 01       	movw	r30, r10
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	e2 5d       	subi	r30, 0xD2	; 210
    10ec:	fe 4f       	sbci	r31, 0xFE	; 254
    10ee:	a0 80       	ld	r10, Z
    10f0:	b1 80       	ldd	r11, Z+1	; 0x01
    10f2:	b5 01       	movw	r22, r10
    10f4:	6e 0d       	add	r22, r14
    10f6:	7f 1d       	adc	r23, r15
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    110c:	20 91 04 01 	lds	r18, 0x0104
    1110:	30 91 05 01 	lds	r19, 0x0105
    1114:	40 91 06 01 	lds	r20, 0x0106
    1118:	50 91 07 01 	lds	r21, 0x0107
    111c:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    1120:	69 87       	std	Y+9, r22	; 0x09
    1122:	7a 87       	std	Y+10, r23	; 0x0a
    1124:	28 2e       	mov	r2, r24
    1126:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    1128:	b7 01       	movw	r22, r14
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    1132:	2b 01       	movw	r4, r22
    1134:	3c 01       	movw	r6, r24
    1136:	b5 01       	movw	r22, r10
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	c3 01       	movw	r24, r6
    1146:	b2 01       	movw	r22, r4
    1148:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    114c:	4b 01       	movw	r8, r22
    114e:	5c 01       	movw	r10, r24
    1150:	e9 81       	ldd	r30, Y+1	; 0x01
    1152:	fa 81       	ldd	r31, Y+2	; 0x02
    1154:	bf 01       	movw	r22, r30
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    115e:	2b 01       	movw	r4, r22
    1160:	3c 01       	movw	r6, r24
    1162:	b6 01       	movw	r22, r12
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    116c:	9b 01       	movw	r18, r22
    116e:	ac 01       	movw	r20, r24
    1170:	c3 01       	movw	r24, r6
    1172:	b2 01       	movw	r22, r4
    1174:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    1178:	a5 01       	movw	r20, r10
    117a:	94 01       	movw	r18, r8
    117c:	0e 94 02 11 	call	0x2204	; 0x2204 <atan2>
    1180:	4b 01       	movw	r8, r22
    1182:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    1184:	7d 81       	ldd	r23, Y+5	; 0x05
    1186:	6e 81       	ldd	r22, Y+6	; 0x06
    1188:	9f 81       	ldd	r25, Y+7	; 0x07
    118a:	88 85       	ldd	r24, Y+8	; 0x08
    118c:	27 2f       	mov	r18, r23
    118e:	36 2f       	mov	r19, r22
    1190:	49 2f       	mov	r20, r25
    1192:	58 2f       	mov	r21, r24
    1194:	b9 85       	ldd	r27, Y+9	; 0x09
    1196:	aa 85       	ldd	r26, Y+10	; 0x0a
    1198:	6b 2f       	mov	r22, r27
    119a:	7a 2f       	mov	r23, r26
    119c:	82 2d       	mov	r24, r2
    119e:	93 2d       	mov	r25, r3
    11a0:	0e 94 02 11 	call	0x2204	; 0x2204 <atan2>
    11a4:	2b 01       	movw	r4, r22
    11a6:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    11a8:	7d 81       	ldd	r23, Y+5	; 0x05
    11aa:	6e 81       	ldd	r22, Y+6	; 0x06
    11ac:	9f 81       	ldd	r25, Y+7	; 0x07
    11ae:	88 85       	ldd	r24, Y+8	; 0x08
    11b0:	27 2f       	mov	r18, r23
    11b2:	36 2f       	mov	r19, r22
    11b4:	49 2f       	mov	r20, r25
    11b6:	58 2f       	mov	r21, r24
    11b8:	67 2f       	mov	r22, r23
    11ba:	73 2f       	mov	r23, r19
    11bc:	89 2f       	mov	r24, r25
    11be:	95 2f       	mov	r25, r21
    11c0:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    11c4:	6b 01       	movw	r12, r22
    11c6:	7c 01       	movw	r14, r24
    11c8:	79 85       	ldd	r23, Y+9	; 0x09
    11ca:	6a 85       	ldd	r22, Y+10	; 0x0a
    11cc:	27 2f       	mov	r18, r23
    11ce:	36 2f       	mov	r19, r22
    11d0:	42 2d       	mov	r20, r2
    11d2:	53 2d       	mov	r21, r3
    11d4:	67 2f       	mov	r22, r23
    11d6:	73 2f       	mov	r23, r19
    11d8:	82 2d       	mov	r24, r2
    11da:	93 2d       	mov	r25, r3
    11dc:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
    11ec:	0e 94 7d 13 	call	0x26fa	; 0x26fa <sqrt>
    11f0:	6b 01       	movw	r12, r22
    11f2:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	60 91 3e 01 	lds	r22, 0x013E
    11fe:	70 91 3f 01 	lds	r23, 0x013F
    1202:	80 91 40 01 	lds	r24, 0x0140
    1206:	90 91 41 01 	lds	r25, 0x0141
    120a:	0e 94 55 11 	call	0x22aa	; 0x22aa <__cmpsf2>
    120e:	81 11       	cpse	r24, r1
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <localize+0x20a>
			ai1 = angle;
    1212:	80 92 3e 01 	sts	0x013E, r8
    1216:	90 92 3f 01 	sts	0x013F, r9
    121a:	a0 92 40 01 	sts	0x0140, r10
    121e:	b0 92 41 01 	sts	0x0141, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    1222:	23 e3       	ldi	r18, 0x33	; 51
    1224:	33 e3       	ldi	r19, 0x33	; 51
    1226:	43 e7       	ldi	r20, 0x73	; 115
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	60 91 3e 01 	lds	r22, 0x013E
    122e:	70 91 3f 01 	lds	r23, 0x013F
    1232:	80 91 40 01 	lds	r24, 0x0140
    1236:	90 91 41 01 	lds	r25, 0x0141
    123a:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    123e:	4b 01       	movw	r8, r22
    1240:	5c 01       	movw	r10, r24
    1242:	20 ed       	ldi	r18, 0xD0	; 208
    1244:	3c ec       	ldi	r19, 0xCC	; 204
    1246:	4c e4       	ldi	r20, 0x4C	; 76
    1248:	5d e3       	ldi	r21, 0x3D	; 61
    124a:	60 91 4a 01 	lds	r22, 0x014A
    124e:	70 91 4b 01 	lds	r23, 0x014B
    1252:	80 91 4c 01 	lds	r24, 0x014C
    1256:	90 91 4d 01 	lds	r25, 0x014D
    125a:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    125e:	9b 01       	movw	r18, r22
    1260:	ac 01       	movw	r20, r24
    1262:	c5 01       	movw	r24, r10
    1264:	b4 01       	movw	r22, r8
    1266:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	44 e3       	ldi	r20, 0x34	; 52
    1270:	53 e4       	ldi	r21, 0x43	; 67
    1272:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    1276:	23 ec       	ldi	r18, 0xC3	; 195
    1278:	35 ef       	ldi	r19, 0xF5	; 245
    127a:	48 e4       	ldi	r20, 0x48	; 72
    127c:	50 e4       	ldi	r21, 0x40	; 64
    127e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
    1282:	86 2e       	mov	r8, r22
    1284:	97 2e       	mov	r9, r23
    1286:	a8 2e       	mov	r10, r24
    1288:	b9 2e       	mov	r11, r25
    128a:	f8 01       	movw	r30, r16
    128c:	80 86       	std	Z+8, r8	; 0x08
    128e:	91 86       	std	Z+9, r9	; 0x09
    1290:	a2 86       	std	Z+10, r10	; 0x0a
    1292:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1294:	23 ec       	ldi	r18, 0xC3	; 195
    1296:	35 ef       	ldi	r19, 0xF5	; 245
    1298:	48 e4       	ldi	r20, 0x48	; 72
    129a:	50 e4       	ldi	r21, 0x40	; 64
    129c:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	44 e3       	ldi	r20, 0x34	; 52
    12a6:	53 e4       	ldi	r21, 0x43	; 67
    12a8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	62 e5       	ldi	r22, 0x52	; 82
    12b2:	78 eb       	ldi	r23, 0xB8	; 184
    12b4:	86 e9       	ldi	r24, 0x96	; 150
    12b6:	90 e4       	ldi	r25, 0x40	; 64
    12b8:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    12bc:	a3 01       	movw	r20, r6
    12be:	92 01       	movw	r18, r4
    12c0:	0e 94 8e 10 	call	0x211c	; 0x211c <__subsf3>
    12c4:	86 2e       	mov	r8, r22
    12c6:	97 2e       	mov	r9, r23
    12c8:	a8 2e       	mov	r10, r24
    12ca:	b9 2e       	mov	r11, r25
    12cc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <sin>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	90 58       	subi	r25, 0x80	; 128
    12da:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    12de:	29 e3       	ldi	r18, 0x39	; 57
    12e0:	3e e8       	ldi	r19, 0x8E	; 142
    12e2:	43 ea       	ldi	r20, 0xA3	; 163
    12e4:	5e e3       	ldi	r21, 0x3E	; 62
    12e6:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    12ea:	69 83       	std	Y+1, r22	; 0x01
    12ec:	7b 87       	std	Y+11, r23	; 0x0b
    12ee:	8d 87       	std	Y+13, r24	; 0x0d
    12f0:	9c 87       	std	Y+12, r25	; 0x0c
    12f2:	47 2f       	mov	r20, r23
    12f4:	38 2f       	mov	r19, r24
    12f6:	29 2f       	mov	r18, r25
    12f8:	86 2f       	mov	r24, r22
    12fa:	94 2f       	mov	r25, r20
    12fc:	a3 2f       	mov	r26, r19
    12fe:	b2 2f       	mov	r27, r18
    1300:	80 93 52 01 	sts	0x0152, r24
    1304:	90 93 53 01 	sts	0x0153, r25
    1308:	a0 93 54 01 	sts	0x0154, r26
    130c:	b0 93 55 01 	sts	0x0155, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1310:	68 2d       	mov	r22, r8
    1312:	79 2d       	mov	r23, r9
    1314:	8a 2d       	mov	r24, r10
    1316:	9b 2d       	mov	r25, r11
    1318:	0e 94 59 11 	call	0x22b2	; 0x22b2 <cos>
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    1324:	29 e8       	ldi	r18, 0x89	; 137
    1326:	3a ed       	ldi	r19, 0xDA	; 218
    1328:	45 e9       	ldi	r20, 0x95	; 149
    132a:	5e e3       	ldi	r21, 0x3E	; 62
    132c:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    1330:	86 2e       	mov	r8, r22
    1332:	97 2e       	mov	r9, r23
    1334:	a8 2e       	mov	r10, r24
    1336:	b9 2e       	mov	r11, r25
    1338:	86 2f       	mov	r24, r22
    133a:	99 2d       	mov	r25, r9
    133c:	aa 2d       	mov	r26, r10
    133e:	bb 2d       	mov	r27, r11
    1340:	80 93 4e 01 	sts	0x014E, r24
    1344:	90 93 4f 01 	sts	0x014F, r25
    1348:	a0 93 50 01 	sts	0x0150, r26
    134c:	b0 93 51 01 	sts	0x0151, r27
		
		if (xi1 == 0 && yi1 == 0) {
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	60 91 46 01 	lds	r22, 0x0146
    135a:	70 91 47 01 	lds	r23, 0x0147
    135e:	80 91 48 01 	lds	r24, 0x0148
    1362:	90 91 49 01 	lds	r25, 0x0149
    1366:	0e 94 55 11 	call	0x22aa	; 0x22aa <__cmpsf2>
    136a:	81 11       	cpse	r24, r1
    136c:	2b c0       	rjmp	.+86     	; 0x13c4 <localize+0x3ac>
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	a9 01       	movw	r20, r18
    1374:	60 91 42 01 	lds	r22, 0x0142
    1378:	70 91 43 01 	lds	r23, 0x0143
    137c:	80 91 44 01 	lds	r24, 0x0144
    1380:	90 91 45 01 	lds	r25, 0x0145
    1384:	0e 94 55 11 	call	0x22aa	; 0x22aa <__cmpsf2>
    1388:	81 11       	cpse	r24, r1
    138a:	1c c0       	rjmp	.+56     	; 0x13c4 <localize+0x3ac>
			xi1 = xi;
    138c:	59 81       	ldd	r21, Y+1	; 0x01
    138e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1390:	3d 85       	ldd	r19, Y+13	; 0x0d
    1392:	2c 85       	ldd	r18, Y+12	; 0x0c
    1394:	85 2f       	mov	r24, r21
    1396:	94 2f       	mov	r25, r20
    1398:	a3 2f       	mov	r26, r19
    139a:	b2 2f       	mov	r27, r18
    139c:	80 93 46 01 	sts	0x0146, r24
    13a0:	90 93 47 01 	sts	0x0147, r25
    13a4:	a0 93 48 01 	sts	0x0148, r26
    13a8:	b0 93 49 01 	sts	0x0149, r27
			yi1 = yi;
    13ac:	88 2d       	mov	r24, r8
    13ae:	99 2d       	mov	r25, r9
    13b0:	aa 2d       	mov	r26, r10
    13b2:	bb 2d       	mov	r27, r11
    13b4:	80 93 42 01 	sts	0x0142, r24
    13b8:	90 93 43 01 	sts	0x0143, r25
    13bc:	a0 93 44 01 	sts	0x0144, r26
    13c0:	b0 93 45 01 	sts	0x0145, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    13c4:	23 e3       	ldi	r18, 0x33	; 51
    13c6:	33 e3       	ldi	r19, 0x33	; 51
    13c8:	43 e7       	ldi	r20, 0x73	; 115
    13ca:	5f e3       	ldi	r21, 0x3F	; 63
    13cc:	60 91 46 01 	lds	r22, 0x0146
    13d0:	70 91 47 01 	lds	r23, 0x0147
    13d4:	80 91 48 01 	lds	r24, 0x0148
    13d8:	90 91 49 01 	lds	r25, 0x0149
    13dc:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    13e0:	4b 01       	movw	r8, r22
    13e2:	5c 01       	movw	r10, r24
    13e4:	20 ed       	ldi	r18, 0xD0	; 208
    13e6:	3c ec       	ldi	r19, 0xCC	; 204
    13e8:	4c e4       	ldi	r20, 0x4C	; 76
    13ea:	5d e3       	ldi	r21, 0x3D	; 61
    13ec:	b9 81       	ldd	r27, Y+1	; 0x01
    13ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    13f0:	fd 85       	ldd	r31, Y+13	; 0x0d
    13f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    13f4:	6b 2f       	mov	r22, r27
    13f6:	7a 2f       	mov	r23, r26
    13f8:	8f 2f       	mov	r24, r31
    13fa:	9e 2f       	mov	r25, r30
    13fc:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    1400:	9b 01       	movw	r18, r22
    1402:	ac 01       	movw	r20, r24
    1404:	c5 01       	movw	r24, r10
    1406:	b4 01       	movw	r22, r8
    1408:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
    140c:	f8 01       	movw	r30, r16
    140e:	60 83       	st	Z, r22
    1410:	71 83       	std	Z+1, r23	; 0x01
    1412:	82 83       	std	Z+2, r24	; 0x02
    1414:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    1416:	80 90 4e 01 	lds	r8, 0x014E
    141a:	90 90 4f 01 	lds	r9, 0x014F
    141e:	a0 90 50 01 	lds	r10, 0x0150
    1422:	b0 90 51 01 	lds	r11, 0x0151
    1426:	23 e3       	ldi	r18, 0x33	; 51
    1428:	33 e3       	ldi	r19, 0x33	; 51
    142a:	43 e7       	ldi	r20, 0x73	; 115
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	60 91 42 01 	lds	r22, 0x0142
    1432:	70 91 43 01 	lds	r23, 0x0143
    1436:	80 91 44 01 	lds	r24, 0x0144
    143a:	90 91 45 01 	lds	r25, 0x0145
    143e:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    1442:	69 83       	std	Y+1, r22	; 0x01
    1444:	7a 83       	std	Y+2, r23	; 0x02
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	20 ed       	ldi	r18, 0xD0	; 208
    144c:	3c ec       	ldi	r19, 0xCC	; 204
    144e:	4c e4       	ldi	r20, 0x4C	; 76
    1450:	5d e3       	ldi	r21, 0x3D	; 61
    1452:	c5 01       	movw	r24, r10
    1454:	b4 01       	movw	r22, r8
    1456:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	69 81       	ldd	r22, Y+1	; 0x01
    1460:	7a 81       	ldd	r23, Y+2	; 0x02
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	0e 94 8f 10 	call	0x211e	; 0x211e <__addsf3>
    146a:	f8 01       	movw	r30, r16
    146c:	64 83       	std	Z+4, r22	; 0x04
    146e:	75 83       	std	Z+5, r23	; 0x05
    1470:	86 83       	std	Z+6, r24	; 0x06
    1472:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1474:	80 91 5c 01 	lds	r24, 0x015C
    1478:	90 91 5d 01 	lds	r25, 0x015D
    147c:	9c 01       	movw	r18, r24
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	3a 83       	std	Y+2, r19	; 0x02
    1484:	29 83       	std	Y+1, r18	; 0x01
    1486:	f9 01       	movw	r30, r18
    1488:	ea 5c       	subi	r30, 0xCA	; 202
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    1498:	f8 01       	movw	r30, r16
    149a:	64 87       	std	Z+12, r22	; 0x0c
    149c:	75 87       	std	Z+13, r23	; 0x0d
    149e:	86 87       	std	Z+14, r24	; 0x0e
    14a0:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	e2 5d       	subi	r30, 0xD2	; 210
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    14b6:	f8 01       	movw	r30, r16
    14b8:	60 8b       	std	Z+16, r22	; 0x10
    14ba:	71 8b       	std	Z+17, r23	; 0x11
    14bc:	82 8b       	std	Z+18, r24	; 0x12
    14be:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    14c0:	80 91 5a 01 	lds	r24, 0x015A
    14c4:	90 91 5b 01 	lds	r25, 0x015B
    14c8:	9c 01       	movw	r18, r24
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	3a 83       	std	Y+2, r19	; 0x02
    14d0:	29 83       	std	Y+1, r18	; 0x01
    14d2:	f9 01       	movw	r30, r18
    14d4:	ea 5c       	subi	r30, 0xCA	; 202
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    14e4:	f8 01       	movw	r30, r16
    14e6:	64 8b       	std	Z+20, r22	; 0x14
    14e8:	75 8b       	std	Z+21, r23	; 0x15
    14ea:	86 8b       	std	Z+22, r24	; 0x16
    14ec:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	e2 5d       	subi	r30, 0xD2	; 210
    14f4:	fe 4f       	sbci	r31, 0xFE	; 254
    14f6:	60 81       	ld	r22, Z
    14f8:	71 81       	ldd	r23, Z+1	; 0x01
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    1502:	f8 01       	movw	r30, r16
    1504:	60 8f       	std	Z+24, r22	; 0x18
    1506:	71 8f       	std	Z+25, r23	; 0x19
    1508:	82 8f       	std	Z+26, r24	; 0x1a
    150a:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    150c:	80 91 56 01 	lds	r24, 0x0156
    1510:	90 91 57 01 	lds	r25, 0x0157
    1514:	9c 01       	movw	r18, r24
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	3a 83       	std	Y+2, r19	; 0x02
    151c:	29 83       	std	Y+1, r18	; 0x01
    151e:	f9 01       	movw	r30, r18
    1520:	ea 5c       	subi	r30, 0xCA	; 202
    1522:	fe 4f       	sbci	r31, 0xFE	; 254
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    1530:	f8 01       	movw	r30, r16
    1532:	64 8f       	std	Z+28, r22	; 0x1c
    1534:	75 8f       	std	Z+29, r23	; 0x1d
    1536:	86 8f       	std	Z+30, r24	; 0x1e
    1538:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	e2 5d       	subi	r30, 0xD2	; 210
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    154e:	f8 01       	movw	r30, r16
    1550:	60 a3       	std	Z+32, r22	; 0x20
    1552:	71 a3       	std	Z+33, r23	; 0x21
    1554:	82 a3       	std	Z+34, r24	; 0x22
    1556:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1558:	80 91 58 01 	lds	r24, 0x0158
    155c:	90 91 59 01 	lds	r25, 0x0159
    1560:	9c 01       	movw	r18, r24
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	3a 83       	std	Y+2, r19	; 0x02
    1568:	29 83       	std	Y+1, r18	; 0x01
    156a:	f9 01       	movw	r30, r18
    156c:	ea 5c       	subi	r30, 0xCA	; 202
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    157c:	f8 01       	movw	r30, r16
    157e:	64 a3       	std	Z+36, r22	; 0x24
    1580:	75 a3       	std	Z+37, r23	; 0x25
    1582:	86 a3       	std	Z+38, r24	; 0x26
    1584:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1586:	e9 81       	ldd	r30, Y+1	; 0x01
    1588:	fa 81       	ldd	r31, Y+2	; 0x02
    158a:	e2 5d       	subi	r30, 0xD2	; 210
    158c:	fe 4f       	sbci	r31, 0xFE	; 254
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__floatunsisf>
    159a:	f8 01       	movw	r30, r16
    159c:	60 a7       	std	Z+40, r22	; 0x28
    159e:	71 a7       	std	Z+41, r23	; 0x29
    15a0:	82 a7       	std	Z+42, r24	; 0x2a
    15a2:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	44 e3       	ldi	r20, 0x34	; 52
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	c3 01       	movw	r24, r6
    15ae:	b2 01       	movw	r22, r4
    15b0:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulsf3>
    15b4:	23 ec       	ldi	r18, 0xC3	; 195
    15b6:	35 ef       	ldi	r19, 0xF5	; 245
    15b8:	48 e4       	ldi	r20, 0x48	; 72
    15ba:	50 e4       	ldi	r21, 0x40	; 64
    15bc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
    15c0:	f8 01       	movw	r30, r16
    15c2:	64 a7       	std	Z+44, r22	; 0x2c
    15c4:	75 a7       	std	Z+45, r23	; 0x2d
    15c6:	86 a7       	std	Z+46, r24	; 0x2e
    15c8:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    15ca:	5d 81       	ldd	r21, Y+5	; 0x05
    15cc:	4e 81       	ldd	r20, Y+6	; 0x06
    15ce:	3f 81       	ldd	r19, Y+7	; 0x07
    15d0:	28 85       	ldd	r18, Y+8	; 0x08
    15d2:	85 2f       	mov	r24, r21
    15d4:	94 2f       	mov	r25, r20
    15d6:	a3 2f       	mov	r26, r19
    15d8:	b2 2f       	mov	r27, r18
    15da:	80 ab       	std	Z+48, r24	; 0x30
    15dc:	91 ab       	std	Z+49, r25	; 0x31
    15de:	a2 ab       	std	Z+50, r26	; 0x32
    15e0:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    15e2:	59 85       	ldd	r21, Y+9	; 0x09
    15e4:	4a 85       	ldd	r20, Y+10	; 0x0a
    15e6:	85 2f       	mov	r24, r21
    15e8:	94 2f       	mov	r25, r20
    15ea:	a2 2d       	mov	r26, r2
    15ec:	b3 2d       	mov	r27, r3
    15ee:	84 ab       	std	Z+52, r24	; 0x34
    15f0:	95 ab       	std	Z+53, r25	; 0x35
    15f2:	a6 ab       	std	Z+54, r26	; 0x36
    15f4:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    15f6:	c0 ae       	std	Z+56, r12	; 0x38
    15f8:	d1 ae       	std	Z+57, r13	; 0x39
    15fa:	e2 ae       	std	Z+58, r14	; 0x3a
    15fc:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    15fe:	80 91 52 01 	lds	r24, 0x0152
    1602:	90 91 53 01 	lds	r25, 0x0153
    1606:	a0 91 54 01 	lds	r26, 0x0154
    160a:	b0 91 55 01 	lds	r27, 0x0155
    160e:	80 93 46 01 	sts	0x0146, r24
    1612:	90 93 47 01 	sts	0x0147, r25
    1616:	a0 93 48 01 	sts	0x0148, r26
    161a:	b0 93 49 01 	sts	0x0149, r27
		yi1 = yi;
    161e:	80 92 42 01 	sts	0x0142, r8
    1622:	90 92 43 01 	sts	0x0143, r9
    1626:	a0 92 44 01 	sts	0x0144, r10
    162a:	b0 92 45 01 	sts	0x0145, r11
		ai1 = ai;
    162e:	80 91 4a 01 	lds	r24, 0x014A
    1632:	90 91 4b 01 	lds	r25, 0x014B
    1636:	a0 91 4c 01 	lds	r26, 0x014C
    163a:	b0 91 4d 01 	lds	r27, 0x014D
    163e:	80 93 3e 01 	sts	0x013E, r24
    1642:	90 93 3f 01 	sts	0x013F, r25
    1646:	a0 93 40 01 	sts	0x0140, r26
    164a:	b0 93 41 01 	sts	0x0141, r27
		
		return 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1652:	2d 96       	adiw	r28, 0x0d	; 13
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	7f 90       	pop	r7
    1678:	6f 90       	pop	r6
    167a:	5f 90       	pop	r5
    167c:	4f 90       	pop	r4
    167e:	3f 90       	pop	r3
    1680:	2f 90       	pop	r2
    1682:	08 95       	ret

00001684 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	18 2f       	mov	r17, r24
    168c:	d6 2f       	mov	r29, r22
    168e:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1690:	0e 94 2c 05 	call	0xa58	; 0xa58 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1694:	94 ea       	ldi	r25, 0xA4	; 164
    1696:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    169a:	ec eb       	ldi	r30, 0xBC	; 188
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	90 81       	ld	r25, Z
    16a0:	99 23       	and	r25, r25
    16a2:	ec f7       	brge	.-6      	; 0x169e <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    16a4:	90 e5       	ldi	r25, 0x50	; 80
    16a6:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    16aa:	94 e8       	ldi	r25, 0x84	; 132
    16ac:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    16b0:	ec eb       	ldi	r30, 0xBC	; 188
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	90 81       	ld	r25, Z
    16b6:	99 23       	and	r25, r25
    16b8:	ec f7       	brge	.-6      	; 0x16b4 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    16ba:	90 91 b9 00 	lds	r25, 0x00B9
    16be:	98 7f       	andi	r25, 0xF8	; 248
    16c0:	90 32       	cpi	r25, 0x20	; 32
    16c2:	29 f4       	brne	.+10     	; 0x16ce <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16c4:	84 e9       	ldi	r24, 0x94	; 148
    16c6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	2d c0       	rjmp	.+90     	; 0x1728 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    16d4:	84 e8       	ldi	r24, 0x84	; 132
    16d6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    16da:	ec eb       	ldi	r30, 0xBC	; 188
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	90 81       	ld	r25, Z
    16e0:	99 23       	and	r25, r25
    16e2:	ec f7       	brge	.-6      	; 0x16de <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    16e4:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    16e8:	84 e8       	ldi	r24, 0x84	; 132
    16ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    16ee:	ec eb       	ldi	r30, 0xBC	; 188
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	88 23       	and	r24, r24
    16f6:	ec f7       	brge	.-6      	; 0x16f2 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    16f8:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    16fc:	84 e8       	ldi	r24, 0x84	; 132
    16fe:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1702:	ec eb       	ldi	r30, 0xBC	; 188
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	88 23       	and	r24, r24
    170a:	ec f7       	brge	.-6      	; 0x1706 <m_rf_open+0x82>
	
	TWDR = packet_length;
    170c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1710:	84 e8       	ldi	r24, 0x84	; 132
    1712:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1716:	ec eb       	ldi	r30, 0xBC	; 188
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	88 23       	and	r24, r24
    171e:	ec f7       	brge	.-6      	; 0x171a <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1720:	84 e9       	ldi	r24, 0x94	; 148
    1722:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1726:	81 e0       	ldi	r24, 0x01	; 1
}
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	08 95       	ret

00001730 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1734:	24 ea       	ldi	r18, 0xA4	; 164
    1736:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    173a:	ec eb       	ldi	r30, 0xBC	; 188
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	20 81       	ld	r18, Z
    1740:	22 23       	and	r18, r18
    1742:	ec f7       	brge	.-6      	; 0x173e <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1744:	21 e5       	ldi	r18, 0x51	; 81
    1746:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    174a:	24 e8       	ldi	r18, 0x84	; 132
    174c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1750:	ec eb       	ldi	r30, 0xBC	; 188
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	20 81       	ld	r18, Z
    1756:	22 23       	and	r18, r18
    1758:	ec f7       	brge	.-6      	; 0x1754 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    175a:	20 91 b9 00 	lds	r18, 0x00B9
    175e:	28 7f       	andi	r18, 0xF8	; 248
    1760:	28 34       	cpi	r18, 0x48	; 72
    1762:	29 f4       	brne	.+10     	; 0x176e <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1764:	84 e9       	ldi	r24, 0x94	; 148
    1766:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    176e:	24 ec       	ldi	r18, 0xC4	; 196
    1770:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1774:	ec eb       	ldi	r30, 0xBC	; 188
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	20 81       	ld	r18, Z
    177a:	22 23       	and	r18, r18
    177c:	ec f7       	brge	.-6      	; 0x1778 <m_rf_read+0x48>
	bytes = TWDR;
    177e:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1782:	46 13       	cpse	r20, r22
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	41 50       	subi	r20, 0x01	; 1
    178a:	51 09       	sbc	r21, r1
    178c:	14 16       	cp	r1, r20
    178e:	15 06       	cpc	r1, r21
    1790:	44 f0       	brlt	.+16     	; 0x17a2 <m_rf_read+0x72>
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	18 c0       	rjmp	.+48     	; 0x17c8 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1798:	84 e9       	ldi	r24, 0x94	; 148
    179a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	25 c0       	rjmp	.+74     	; 0x17ec <m_rf_read+0xbc>
    17a2:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    17a8:	ec eb       	ldi	r30, 0xBC	; 188
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    17ae:	cb eb       	ldi	r28, 0xBB	; 187
    17b0:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    17b2:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    17b4:	60 81       	ld	r22, Z
    17b6:	66 23       	and	r22, r22
    17b8:	ec f7       	brge	.-6      	; 0x17b4 <m_rf_read+0x84>
		buffer[i] = TWDR;
    17ba:	68 81       	ld	r22, Y
    17bc:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	24 17       	cp	r18, r20
    17c4:	35 07       	cpc	r19, r21
    17c6:	ac f3       	brlt	.-22     	; 0x17b2 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    17c8:	24 e8       	ldi	r18, 0x84	; 132
    17ca:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    17ce:	ec eb       	ldi	r30, 0xBC	; 188
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	20 81       	ld	r18, Z
    17d4:	22 23       	and	r18, r18
    17d6:	ec f7       	brge	.-6      	; 0x17d2 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    17d8:	20 91 bb 00 	lds	r18, 0x00BB
    17dc:	fc 01       	movw	r30, r24
    17de:	e4 0f       	add	r30, r20
    17e0:	f5 1f       	adc	r31, r21
    17e2:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17e4:	84 e9       	ldi	r24, 0x94	; 148
    17e6:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    17fe:	82 e1       	ldi	r24, 0x12	; 18
    1800:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1802:	09 b4       	in	r0, 0x29	; 41
    1804:	00 fe       	sbrs	r0, 0
    1806:	fd cf       	rjmp	.-6      	; 0x1802 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1808:	80 e9       	ldi	r24, 0x90	; 144
    180a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    180e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1812:	10 92 77 01 	sts	0x0177, r1
	cdc_line_rtsdtr = 0;
    1816:	10 92 78 01 	sts	0x0178, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    181a:	8c e0       	ldi	r24, 0x0C	; 12
    181c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1820:	78 94       	sei
    1822:	08 95       	ret

00001824 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1824:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1826:	f8 94       	cli
	if (!usb_configuration) {
    1828:	80 91 77 01 	lds	r24, 0x0177
    182c:	81 11       	cpse	r24, r1
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <m_usb_rx_char+0x12>
		SREG = intr_state;
    1830:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    183c:	80 91 e8 00 	lds	r24, 0x00E8
    1840:	85 fd       	sbrc	r24, 5
    1842:	03 c0       	rjmp	.+6      	; 0x184a <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    1844:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    184a:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    184e:	20 91 e8 00 	lds	r18, 0x00E8
    1852:	25 fd       	sbrc	r18, 5
    1854:	03 c0       	rjmp	.+6      	; 0x185c <m_usb_rx_char+0x38>
    1856:	2b e6       	ldi	r18, 0x6B	; 107
    1858:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    185c:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    185e:	08 95       	ret

00001860 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1860:	80 91 77 01 	lds	r24, 0x0177
    1864:	88 23       	and	r24, r24
    1866:	89 f0       	breq	.+34     	; 0x188a <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    1868:	2f b7       	in	r18, 0x3f	; 63
		cli();
    186a:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    1872:	80 91 e8 00 	lds	r24, 0x00E8
    1876:	85 ff       	sbrs	r24, 5
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    187a:	e8 ee       	ldi	r30, 0xE8	; 232
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	9b e6       	ldi	r25, 0x6B	; 107
    1880:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    1882:	80 81       	ld	r24, Z
    1884:	85 fd       	sbrc	r24, 5
    1886:	fc cf       	rjmp	.-8      	; 0x1880 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    1888:	2f bf       	out	0x3f, r18	; 63
    188a:	08 95       	ret

0000188c <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1890:	90 91 77 01 	lds	r25, 0x0177
    1894:	99 23       	and	r25, r25
    1896:	09 f4       	brne	.+2      	; 0x189a <m_usb_tx_char+0xe>
    1898:	4d c0       	rjmp	.+154    	; 0x1934 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    189a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    189c:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    189e:	24 e0       	ldi	r18, 0x04	; 4
    18a0:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    18a4:	20 91 79 01 	lds	r18, 0x0179
    18a8:	22 23       	and	r18, r18
    18aa:	49 f0       	breq	.+18     	; 0x18be <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    18ac:	20 91 e8 00 	lds	r18, 0x00E8
    18b0:	25 fd       	sbrc	r18, 5
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <m_usb_tx_char+0x2e>
			SREG = intr_state;
    18b4:	9f bf       	out	0x3f, r25	; 63
			return -1;
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	42 c0       	rjmp	.+132    	; 0x193e <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    18ba:	10 92 79 01 	sts	0x0179, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    18be:	30 91 e4 00 	lds	r19, 0x00E4
    18c2:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    18c4:	20 91 e8 00 	lds	r18, 0x00E8
    18c8:	25 fd       	sbrc	r18, 5
    18ca:	25 c0       	rjmp	.+74     	; 0x1916 <m_usb_tx_char+0x8a>
		SREG = intr_state;
    18cc:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    18ce:	90 91 e4 00 	lds	r25, 0x00E4
    18d2:	93 17       	cp	r25, r19
    18d4:	49 f0       	breq	.+18     	; 0x18e8 <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    18d6:	90 91 77 01 	lds	r25, 0x0177
    18da:	91 11       	cpse	r25, r1
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <m_usb_tx_char+0x70>
    18de:	2c c0       	rjmp	.+88     	; 0x1938 <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    18e0:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    18e2:	98 81       	ld	r25, Y
    18e4:	93 13       	cpse	r25, r19
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 79 01 	sts	0x0179, r24
			return -1;
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	26 c0       	rjmp	.+76     	; 0x193e <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    18f2:	90 91 77 01 	lds	r25, 0x0177
    18f6:	91 11       	cpse	r25, r1
    18f8:	08 c0       	rjmp	.+16     	; 0x190a <m_usb_tx_char+0x7e>
    18fa:	20 c0       	rjmp	.+64     	; 0x193c <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    18fc:	a9 ee       	ldi	r26, 0xE9	; 233
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1902:	e8 ee       	ldi	r30, 0xE8	; 232
    1904:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1906:	c4 ee       	ldi	r28, 0xE4	; 228
    1908:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    190a:	9f b7       	in	r25, 0x3f	; 63
		cli();
    190c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    190e:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1910:	20 81       	ld	r18, Z
    1912:	25 ff       	sbrs	r18, 5
    1914:	e5 cf       	rjmp	.-54     	; 0x18e0 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1916:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    191a:	80 91 e8 00 	lds	r24, 0x00E8
    191e:	85 fd       	sbrc	r24, 5
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <m_usb_tx_char+0x9c>
    1922:	8a e3       	ldi	r24, 0x3A	; 58
    1924:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1928:	85 e0       	ldi	r24, 0x05	; 5
    192a:	80 93 76 01 	sts	0x0176, r24
	SREG = intr_state;
    192e:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	05 c0       	rjmp	.+10     	; 0x193e <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	03 c0       	rjmp	.+6      	; 0x193e <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	01 c0       	rjmp	.+2      	; 0x193e <m_usb_tx_char+0xb2>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1956:	e1 ee       	ldi	r30, 0xE1	; 225
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
        UDINT = 0;
    195c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    195e:	83 ff       	sbrs	r24, 3
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <__vector_10+0x40>
		UENUM = 0;
    1962:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    196c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1970:	92 e1       	ldi	r25, 0x12	; 18
    1972:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1976:	98 e0       	ldi	r25, 0x08	; 8
    1978:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    197c:	10 92 77 01 	sts	0x0177, r1
		cdc_line_rtsdtr = 0;
    1980:	10 92 78 01 	sts	0x0178, r1
        }
	if (intbits & (1<<SOFI)) {
    1984:	82 ff       	sbrs	r24, 2
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <__vector_10+0x6a>
		if (usb_configuration) {
    1988:	80 91 77 01 	lds	r24, 0x0177
    198c:	88 23       	and	r24, r24
    198e:	79 f0       	breq	.+30     	; 0x19ae <__vector_10+0x6a>
			t = transmit_flush_timer;
    1990:	80 91 76 01 	lds	r24, 0x0176
			if (t) {
    1994:	88 23       	and	r24, r24
    1996:	59 f0       	breq	.+22     	; 0x19ae <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	80 93 76 01 	sts	0x0176, r24
				if (!t) {
    199e:	81 11       	cpse	r24, r1
    19a0:	06 c0       	rjmp	.+12     	; 0x19ae <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    19a2:	84 e0       	ldi	r24, 0x04	; 4
    19a4:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    19a8:	8a e3       	ldi	r24, 0x3A	; 58
    19aa:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	9f 91       	pop	r25
    19b4:	8f 91       	pop	r24
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti

000019c0 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    19c0:	1f 92       	push	r1
    19c2:	0f 92       	push	r0
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	2f 93       	push	r18
    19d0:	3f 93       	push	r19
    19d2:	4f 93       	push	r20
    19d4:	5f 93       	push	r21
    19d6:	6f 93       	push	r22
    19d8:	7f 93       	push	r23
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	af 93       	push	r26
    19e0:	bf 93       	push	r27
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ef 93       	push	r30
    19e8:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    19ea:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    19ee:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    19f2:	83 ff       	sbrs	r24, 3
    19f4:	51 c1       	rjmp	.+674    	; 0x1c98 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    19f6:	e1 ef       	ldi	r30, 0xF1	; 241
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    19fc:	40 81       	ld	r20, Z
                wValue = UEDATX;
    19fe:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1a00:	30 81       	ld	r19, Z
    1a02:	93 2f       	mov	r25, r19
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	dc 01       	movw	r26, r24
    1a08:	a2 2b       	or	r26, r18
    1a0a:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1a0c:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1a0e:	60 81       	ld	r22, Z
    1a10:	96 2f       	mov	r25, r22
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	85 2b       	or	r24, r21
                wLength = UEDATX;
    1a16:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    1a18:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1a1a:	52 ef       	ldi	r21, 0xF2	; 242
    1a1c:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1a20:	46 30       	cpi	r20, 0x06	; 6
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <__vector_11+0x66>
    1a24:	5c c0       	rjmp	.+184    	; 0x1ade <__vector_11+0x11e>
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1a28:	81 e2       	ldi	r24, 0x21	; 33
    1a2a:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1a2e:	3b c1       	rjmp	.+630    	; 0x1ca6 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1a30:	c6 e0       	ldi	r28, 0x06	; 6
    1a32:	47 ef       	ldi	r20, 0xF7	; 247
    1a34:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1a36:	fa 01       	movw	r30, r20
    1a38:	65 91       	lpm	r22, Z+
    1a3a:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1a3c:	26 17       	cp	r18, r22
    1a3e:	37 07       	cpc	r19, r23
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1a42:	49 5f       	subi	r20, 0xF9	; 249
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1a46:	20 c0       	rjmp	.+64     	; 0x1a88 <__vector_11+0xc8>
				}
				list += 2;
    1a48:	fa 01       	movw	r30, r20
    1a4a:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1a4c:	65 91       	lpm	r22, Z+
    1a4e:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1a50:	86 17       	cp	r24, r22
    1a52:	97 07       	cpc	r25, r23
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    1a56:	49 5f       	subi	r20, 0xF9	; 249
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1a5a:	16 c0       	rjmp	.+44     	; 0x1a88 <__vector_11+0xc8>
				}
				list += 2;
    1a5c:	fa 01       	movw	r30, r20
    1a5e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1a60:	85 91       	lpm	r24, Z+
    1a62:	94 91       	lpm	r25, Z
    1a64:	28 2f       	mov	r18, r24
    1a66:	39 2f       	mov	r19, r25
				list += 2;
    1a68:	fa 01       	movw	r30, r20
    1a6a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1a6c:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1a6e:	9b 2f       	mov	r25, r27
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1a74:	8f 3f       	cpi	r24, 0xFF	; 255
    1a76:	91 05       	cpc	r25, r1
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <__vector_11+0xc0>
    1a7a:	10 f0       	brcs	.+4      	; 0x1a80 <__vector_11+0xc0>
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	84 17       	cp	r24, r20
    1a82:	28 f4       	brcc	.+10     	; 0x1a8e <__vector_11+0xce>
    1a84:	48 2f       	mov	r20, r24
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <__vector_11+0xce>
    1a88:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1a8a:	a9 f6       	brne	.-86     	; 0x1a36 <__vector_11+0x76>
    1a8c:	cd cf       	rjmp	.-102    	; 0x1a28 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1a8e:	c8 ee       	ldi	r28, 0xE8	; 232
    1a90:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a92:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1a94:	a1 ef       	ldi	r26, 0xF1	; 241
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1a98:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1a9a:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	95 70       	andi	r25, 0x05	; 5
    1aa0:	e1 f3       	breq	.-8      	; 0x1a9a <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    1aa2:	82 fd       	sbrc	r24, 2
    1aa4:	00 c1       	rjmp	.+512    	; 0x1ca6 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1aa6:	64 2f       	mov	r22, r20
    1aa8:	41 31       	cpi	r20, 0x11	; 17
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <__vector_11+0xee>
    1aac:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1aae:	66 23       	and	r22, r22
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <__vector_11+0xf4>
    1ab2:	f6 c0       	rjmp	.+492    	; 0x1ca0 <__vector_11+0x2e0>
    1ab4:	c9 01       	movw	r24, r18
    1ab6:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    1ab8:	fc 01       	movw	r30, r24
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	e4 91       	lpm	r30, Z
    1abe:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1ac0:	51 50       	subi	r21, 0x01	; 1
    1ac2:	d1 f7       	brne	.-12     	; 0x1ab8 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1ac4:	86 2f       	mov	r24, r22
    1ac6:	81 50       	subi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	28 0f       	add	r18, r24
    1ace:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1ad0:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ad2:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1ad4:	41 11       	cpse	r20, r1
    1ad6:	e1 cf       	rjmp	.-62     	; 0x1a9a <__vector_11+0xda>
    1ad8:	60 31       	cpi	r22, 0x10	; 16
    1ada:	f9 f2       	breq	.-66     	; 0x1a9a <__vector_11+0xda>
    1adc:	e4 c0       	rjmp	.+456    	; 0x1ca6 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1ade:	45 30       	cpi	r20, 0x05	; 5
    1ae0:	61 f4       	brne	.+24     	; 0x1afa <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ae2:	8e ef       	ldi	r24, 0xFE	; 254
    1ae4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ae8:	e8 ee       	ldi	r30, 0xE8	; 232
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 ff       	sbrs	r24, 0
    1af0:	fd cf       	rjmp	.-6      	; 0x1aec <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1af2:	20 68       	ori	r18, 0x80	; 128
    1af4:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1af8:	d6 c0       	rjmp	.+428    	; 0x1ca6 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1afa:	49 30       	cpi	r20, 0x09	; 9
    1afc:	a1 f5       	brne	.+104    	; 0x1b66 <__vector_11+0x1a6>
    1afe:	71 11       	cpse	r23, r1
    1b00:	5b c0       	rjmp	.+182    	; 0x1bb8 <__vector_11+0x1f8>
			usb_configuration = wValue;
    1b02:	20 93 77 01 	sts	0x0177, r18
			cdc_line_rtsdtr = 0;
    1b06:	10 92 78 01 	sts	0x0178, r1
			transmit_flush_timer = 0;
    1b0a:	10 92 76 01 	sts	0x0176, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b0e:	8e ef       	ldi	r24, 0xFE	; 254
    1b10:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1b14:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1b16:	81 e2       	ldi	r24, 0x21	; 33
    1b18:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1b1a:	c9 ee       	ldi	r28, 0xE9	; 233
    1b1c:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1b1e:	ab ee       	ldi	r26, 0xEB	; 235
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1b22:	6c ee       	ldi	r22, 0xEC	; 236
    1b24:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1b26:	4d ee       	ldi	r20, 0xED	; 237
    1b28:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1b2a:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	2f 5f       	subi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	fc 01       	movw	r30, r24
    1b34:	04 91       	lpm	r16, Z
				UECONX = en;
    1b36:	0c 93       	st	X, r16
				if (en) {
    1b38:	00 23       	and	r16, r16
    1b3a:	59 f0       	breq	.+22     	; 0x1b52 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	24 91       	lpm	r18, Z
    1b40:	fb 01       	movw	r30, r22
    1b42:	20 83       	st	Z, r18
    1b44:	fc 01       	movw	r30, r24
    1b46:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    1b48:	03 96       	adiw	r24, 0x03	; 3
    1b4a:	24 91       	lpm	r18, Z
    1b4c:	fa 01       	movw	r30, r20
    1b4e:	20 83       	st	Z, r18
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1b52:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1b54:	1f 5f       	subi	r17, 0xFF	; 255
    1b56:	15 30       	cpi	r17, 0x05	; 5
    1b58:	41 f7       	brne	.-48     	; 0x1b2a <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1b5a:	ea ee       	ldi	r30, 0xEA	; 234
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	8e e1       	ldi	r24, 0x1E	; 30
    1b60:	80 83       	st	Z, r24
        		UERST = 0;
    1b62:	10 82       	st	Z, r1
			return;
    1b64:	a0 c0       	rjmp	.+320    	; 0x1ca6 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1b66:	48 30       	cpi	r20, 0x08	; 8
    1b68:	81 f4       	brne	.+32     	; 0x1b8a <__vector_11+0x1ca>
    1b6a:	70 38       	cpi	r23, 0x80	; 128
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <__vector_11+0x1b0>
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b70:	e8 ee       	ldi	r30, 0xE8	; 232
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 ff       	sbrs	r24, 0
    1b78:	fd cf       	rjmp	.-6      	; 0x1b74 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1b7a:	80 91 77 01 	lds	r24, 0x0177
    1b7e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b82:	8e ef       	ldi	r24, 0xFE	; 254
    1b84:	80 93 e8 00 	sts	0x00E8, r24
    1b88:	8e c0       	rjmp	.+284    	; 0x1ca6 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1b8a:	41 32       	cpi	r20, 0x21	; 33
    1b8c:	a9 f4       	brne	.+42     	; 0x1bb8 <__vector_11+0x1f8>
    1b8e:	71 3a       	cpi	r23, 0xA1	; 161
    1b90:	f1 f5       	brne	.+124    	; 0x1c0e <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b92:	e8 ee       	ldi	r30, 0xE8	; 232
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 ff       	sbrs	r24, 0
    1b9a:	fd cf       	rjmp	.-6      	; 0x1b96 <__vector_11+0x1d6>
    1b9c:	ec e0       	ldi	r30, 0x0C	; 12
    1b9e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1ba0:	a1 ef       	ldi	r26, 0xF1	; 241
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	81 91       	ld	r24, Z+
    1ba6:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	e3 31       	cpi	r30, 0x13	; 19
    1bac:	f4 07       	cpc	r31, r20
    1bae:	d1 f7       	brne	.-12     	; 0x1ba4 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bb0:	8e ef       	ldi	r24, 0xFE	; 254
    1bb2:	80 93 e8 00 	sts	0x00E8, r24
    1bb6:	77 c0       	rjmp	.+238    	; 0x1ca6 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1bb8:	40 32       	cpi	r20, 0x20	; 32
    1bba:	c9 f4       	brne	.+50     	; 0x1bee <__vector_11+0x22e>
    1bbc:	71 32       	cpi	r23, 0x21	; 33
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <__vector_11+0x202>
    1bc0:	6b c0       	rjmp	.+214    	; 0x1c98 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1bc2:	e8 ee       	ldi	r30, 0xE8	; 232
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	82 ff       	sbrs	r24, 2
    1bca:	fd cf       	rjmp	.-6      	; 0x1bc6 <__vector_11+0x206>
    1bcc:	ec e0       	ldi	r30, 0x0C	; 12
    1bce:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1bd0:	a1 ef       	ldi	r26, 0xF1	; 241
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	8c 91       	ld	r24, X
    1bd6:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1bd8:	51 e0       	ldi	r21, 0x01	; 1
    1bda:	e3 31       	cpi	r30, 0x13	; 19
    1bdc:	f5 07       	cpc	r31, r21
    1bde:	d1 f7       	brne	.-12     	; 0x1bd4 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1be0:	e8 ee       	ldi	r30, 0xE8	; 232
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8b ef       	ldi	r24, 0xFB	; 251
    1be6:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1be8:	8e ef       	ldi	r24, 0xFE	; 254
    1bea:	80 83       	st	Z, r24
    1bec:	5c c0       	rjmp	.+184    	; 0x1ca6 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1bee:	42 32       	cpi	r20, 0x22	; 34
    1bf0:	71 f4       	brne	.+28     	; 0x1c0e <__vector_11+0x24e>
    1bf2:	71 32       	cpi	r23, 0x21	; 33
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <__vector_11+0x238>
    1bf6:	50 c0       	rjmp	.+160    	; 0x1c98 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1bf8:	20 93 78 01 	sts	0x0178, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1bfc:	e8 ee       	ldi	r30, 0xE8	; 232
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 ff       	sbrs	r24, 0
    1c04:	fd cf       	rjmp	.-6      	; 0x1c00 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c06:	8e ef       	ldi	r24, 0xFE	; 254
    1c08:	80 93 e8 00 	sts	0x00E8, r24
    1c0c:	4c c0       	rjmp	.+152    	; 0x1ca6 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1c0e:	41 11       	cpse	r20, r1
    1c10:	1a c0       	rjmp	.+52     	; 0x1c46 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c12:	e8 ee       	ldi	r30, 0xE8	; 232
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	20 81       	ld	r18, Z
    1c18:	20 ff       	sbrs	r18, 0
    1c1a:	fd cf       	rjmp	.-6      	; 0x1c16 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1c1c:	72 38       	cpi	r23, 0x82	; 130
    1c1e:	51 f4       	brne	.+20     	; 0x1c34 <__vector_11+0x274>
				UENUM = wIndex;
    1c20:	e9 ee       	ldi	r30, 0xE9	; 233
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1c26:	80 91 eb 00 	lds	r24, 0x00EB
    1c2a:	85 fb       	bst	r24, 5
    1c2c:	88 27       	eor	r24, r24
    1c2e:	80 f9       	bld	r24, 0
				UENUM = 0;
    1c30:	10 82       	st	Z, r1
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1c34:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1c36:	e1 ef       	ldi	r30, 0xF1	; 241
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 83       	st	Z, r24
			UEDATX = 0;
    1c3c:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c3e:	8e ef       	ldi	r24, 0xFE	; 254
    1c40:	80 93 e8 00 	sts	0x00E8, r24
    1c44:	30 c0       	rjmp	.+96     	; 0x1ca6 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1c46:	41 30       	cpi	r20, 0x01	; 1
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <__vector_11+0x28e>
    1c4a:	43 30       	cpi	r20, 0x03	; 3
    1c4c:	29 f5       	brne	.+74     	; 0x1c98 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1c4e:	72 30       	cpi	r23, 0x02	; 2
    1c50:	19 f5       	brne	.+70     	; 0x1c98 <__vector_11+0x2d8>
    1c52:	23 2b       	or	r18, r19
    1c54:	09 f5       	brne	.+66     	; 0x1c98 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1c56:	8f 77       	andi	r24, 0x7F	; 127
    1c58:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1c5a:	38 2f       	mov	r19, r24
    1c5c:	31 50       	subi	r19, 0x01	; 1
    1c5e:	34 30       	cpi	r19, 0x04	; 4
    1c60:	d8 f4       	brcc	.+54     	; 0x1c98 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c62:	3e ef       	ldi	r19, 0xFE	; 254
    1c64:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1c68:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1c6c:	43 30       	cpi	r20, 0x03	; 3
    1c6e:	21 f4       	brne	.+8      	; 0x1c78 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1c70:	81 e2       	ldi	r24, 0x21	; 33
    1c72:	80 93 eb 00 	sts	0x00EB, r24
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1c78:	99 e1       	ldi	r25, 0x19	; 25
    1c7a:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1c7e:	21 e0       	ldi	r18, 0x01	; 1
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	d9 01       	movw	r26, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <__vector_11+0x2ca>
    1c86:	aa 0f       	add	r26, r26
    1c88:	bb 1f       	adc	r27, r27
    1c8a:	8a 95       	dec	r24
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <__vector_11+0x2c6>
    1c8e:	ea ee       	ldi	r30, 0xEA	; 234
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	a0 83       	st	Z, r26
					UERST = 0;
    1c94:	10 82       	st	Z, r1
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1c98:	81 e2       	ldi	r24, 0x21	; 33
    1c9a:	80 93 eb 00 	sts	0x00EB, r24
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ca0:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1ca2:	41 11       	cpse	r20, r1
    1ca4:	fa ce       	rjmp	.-524    	; 0x1a9a <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1ca6:	ff 91       	pop	r31
    1ca8:	ef 91       	pop	r30
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	bf 91       	pop	r27
    1cb0:	af 91       	pop	r26
    1cb2:	9f 91       	pop	r25
    1cb4:	8f 91       	pop	r24
    1cb6:	7f 91       	pop	r23
    1cb8:	6f 91       	pop	r22
    1cba:	5f 91       	pop	r21
    1cbc:	4f 91       	pop	r20
    1cbe:	3f 91       	pop	r19
    1cc0:	2f 91       	pop	r18
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	0f 90       	pop	r0
    1ccc:	1f 90       	pop	r1
    1cce:	18 95       	reti

00001cd0 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	27 97       	sbiw	r28, 0x07	; 7
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1cec:	8e 01       	movw	r16, r28
    1cee:	0f 5f       	subi	r16, 0xFF	; 255
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	27 e0       	ldi	r18, 0x07	; 7
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	11 92       	st	Z+, r1
    1cf8:	2a 95       	dec	r18
    1cfa:	e9 f7       	brne	.-6      	; 0x1cf6 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1cfc:	4a e0       	ldi	r20, 0x0A	; 10
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	b8 01       	movw	r22, r16
    1d02:	0e 94 0c 14 	call	0x2818	; 0x2818 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1d06:	7e 01       	movw	r14, r28
    1d08:	f8 e0       	ldi	r31, 0x08	; 8
    1d0a:	ef 0e       	add	r14, r31
    1d0c:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1d0e:	f8 01       	movw	r30, r16
    1d10:	81 91       	ld	r24, Z+
    1d12:	8f 01       	movw	r16, r30
    1d14:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1d16:	0e 94 46 0c 	call	0x188c	; 0x188c <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1d1a:	0e 15       	cp	r16, r14
    1d1c:	1f 05       	cpc	r17, r15
    1d1e:	b9 f7       	brne	.-18     	; 0x1d0e <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1d20:	27 96       	adiw	r28, 0x07	; 7
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	08 95       	ret

00001d3a <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1d3e:	ec eb       	ldi	r30, 0xBC	; 188
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	88 23       	and	r24, r24
    1d46:	34 f0       	brlt	.+12     	; 0x1d54 <twi_wait+0x1a>
    1d48:	2f 5f       	subi	r18, 0xFF	; 255
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	29 3e       	cpi	r18, 0xE9	; 233
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	38 07       	cpc	r19, r24
    1d52:	b9 f7       	brne	.-18     	; 0x1d42 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	28 3e       	cpi	r18, 0xE8	; 232
    1d58:	33 40       	sbci	r19, 0x03	; 3
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <twi_wait+0x24>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1d5e:	08 95       	ret

00001d60 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1d60:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1d64:	84 e8       	ldi	r24, 0x84	; 132
    1d66:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1d6a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <twi_wait>
    1d6e:	88 23       	and	r24, r24
    1d70:	21 f0       	breq	.+8      	; 0x1d7a <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1d72:	80 91 b9 00 	lds	r24, 0x00B9
    1d76:	88 7f       	andi	r24, 0xF8	; 248
    1d78:	08 95       	ret
	} else {
		return 0;					// comm failure
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d7c:	08 95       	ret

00001d7e <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1d7e:	cf 93       	push	r28
    1d80:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d82:	94 ea       	ldi	r25, 0xA4	; 164
    1d84:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1d88:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <twi_wait>
    1d8c:	88 23       	and	r24, r24
    1d8e:	61 f0       	breq	.+24     	; 0x1da8 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1d90:	8c 2f       	mov	r24, r28
    1d92:	88 0f       	add	r24, r24
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1d9a:	88 34       	cpi	r24, 0x48	; 72
    1d9c:	39 f4       	brne	.+14     	; 0x1dac <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d9e:	84 e9       	ldi	r24, 0x94	; 148
    1da0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1dac:	81 e0       	ldi	r24, 0x01	; 1
}	
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1db2:	cf 93       	push	r28
    1db4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1db6:	94 ea       	ldi	r25, 0xA4	; 164
    1db8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1dbc:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <twi_wait>
    1dc0:	88 23       	and	r24, r24
    1dc2:	59 f0       	breq	.+22     	; 0x1dda <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1dc4:	8c 2f       	mov	r24, r28
    1dc6:	88 0f       	add	r24, r24
    1dc8:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1dcc:	80 32       	cpi	r24, 0x20	; 32
    1dce:	39 f4       	brne	.+14     	; 0x1dde <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1dd0:	84 e9       	ldi	r24, 0x94	; 148
    1dd2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1dde:	81 e0       	ldi	r24, 0x01	; 1
}	
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1de4:	84 e9       	ldi	r24, 0x94	; 148
    1de6:	80 93 bc 00 	sts	0x00BC, r24
    1dea:	08 95       	ret

00001dec <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	60 97       	sbiw	r28, 0x10	; 16
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	e8 2e       	mov	r14, r24
    1e0a:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	31 96       	adiw	r30, 0x01	; 1
    1e10:	80 e1       	ldi	r24, 0x10	; 16
    1e12:	df 01       	movw	r26, r30
    1e14:	1d 92       	st	X+, r1
    1e16:	8a 95       	dec	r24
    1e18:	e9 f7       	brne	.-6      	; 0x1e14 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e1a:	88 e5       	ldi	r24, 0x58	; 88
    1e1c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    1e20:	88 23       	and	r24, r24
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <m_wii_read+0x3a>
    1e24:	66 c0       	rjmp	.+204    	; 0x1ef2 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1e26:	86 e3       	ldi	r24, 0x36	; 54
    1e28:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1e2c:	88 23       	and	r24, r24
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <m_wii_read+0x46>
    1e30:	62 c0       	rjmp	.+196    	; 0x1ef6 <m_wii_read+0x10a>
	end();
    1e32:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e36:	b8 e0       	ldi	r27, 0x08	; 8
    1e38:	ba 95       	dec	r27
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <m_wii_read+0x4c>
    1e3c:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1e3e:	88 e5       	ldi	r24, 0x58	; 88
    1e40:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <start_read>
    1e44:	88 23       	and	r24, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <m_wii_read+0x5e>
    1e48:	58 c0       	rjmp	.+176    	; 0x1efa <m_wii_read+0x10e>
    1e4a:	ae 01       	movw	r20, r28
    1e4c:	4f 5f       	subi	r20, 0xFF	; 255
    1e4e:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1e50:	8e 01       	movw	r16, r28
    1e52:	00 5f       	subi	r16, 0xF0	; 240
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1e56:	ec eb       	ldi	r30, 0xBC	; 188
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1e5c:	2b eb       	ldi	r18, 0xBB	; 187
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1e60:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	ec f7       	brge	.-6      	; 0x1e62 <m_wii_read+0x76>
		temp[i] = TWDR;
    1e68:	d9 01       	movw	r26, r18
    1e6a:	8c 91       	ld	r24, X
    1e6c:	da 01       	movw	r26, r20
    1e6e:	8d 93       	st	X+, r24
    1e70:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1e72:	a0 17       	cp	r26, r16
    1e74:	b1 07       	cpc	r27, r17
    1e76:	a1 f7       	brne	.-24     	; 0x1e60 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1e78:	84 e8       	ldi	r24, 0x84	; 132
    1e7a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e7e:	ec eb       	ldi	r30, 0xBC	; 188
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 23       	and	r24, r24
    1e86:	ec f7       	brge	.-6      	; 0x1e82 <m_wii_read+0x96>
	temp[15] = TWDR;
    1e88:	80 91 bb 00 	lds	r24, 0x00BB
    1e8c:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1e8e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
    1e92:	de 01       	movw	r26, r28
    1e94:	14 96       	adiw	r26, 0x04	; 4
    1e96:	6e 2d       	mov	r22, r14
    1e98:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1e9a:	4c 91       	ld	r20, X
    1e9c:	24 2f       	mov	r18, r20
    1e9e:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	80 81       	ld	r24, Z
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	f0 e1       	ldi	r31, 0x10	; 16
    1eac:	2f 9f       	mul	r18, r31
    1eae:	80 0d       	add	r24, r0
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	11 24       	eor	r1, r1
    1eb4:	fb 01       	movw	r30, r22
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1eba:	84 2f       	mov	r24, r20
    1ebc:	80 7c       	andi	r24, 0xC0	; 192
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1ec8:	9d 01       	movw	r18, r26
    1eca:	21 50       	subi	r18, 0x01	; 1
    1ecc:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1ece:	f9 01       	movw	r30, r18
    1ed0:	20 81       	ld	r18, Z
    1ed2:	82 0f       	add	r24, r18
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	fb 01       	movw	r30, r22
    1ed8:	93 83       	std	Z+3, r25	; 0x03
    1eda:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1edc:	4f 70       	andi	r20, 0x0F	; 15
    1ede:	44 83       	std	Z+4, r20	; 0x04
    1ee0:	15 82       	std	Z+5, r1	; 0x05
    1ee2:	13 96       	adiw	r26, 0x03	; 3
    1ee4:	6a 5f       	subi	r22, 0xFA	; 250
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1ee8:	0a 17       	cp	r16, r26
    1eea:	1b 07       	cpc	r17, r27
    1eec:	b1 f6       	brne	.-84     	; 0x1e9a <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	05 c0       	rjmp	.+10     	; 0x1efc <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	03 c0       	rjmp	.+6      	; 0x1efc <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1efa:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1efc:	60 96       	adiw	r28, 0x10	; 16
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	08 95       	ret

00001f16 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1f16:	0e 94 2c 05 	call	0xa58	; 0xa58 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f1a:	88 e5       	ldi	r24, 0x58	; 88
    1f1c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    1f20:	88 23       	and	r24, r24
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <m_wii_open+0x10>
    1f24:	c7 c0       	rjmp	.+398    	; 0x20b4 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1f26:	80 e3       	ldi	r24, 0x30	; 48
    1f28:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f2c:	88 23       	and	r24, r24
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <m_wii_open+0x1c>
    1f30:	c3 c0       	rjmp	.+390    	; 0x20b8 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f38:	88 23       	and	r24, r24
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <m_wii_open+0x28>
    1f3c:	bf c0       	rjmp	.+382    	; 0x20bc <m_wii_open+0x1a6>
	end();
    1f3e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f42:	83 ec       	ldi	r24, 0xC3	; 195
    1f44:	99 e0       	ldi	r25, 0x09	; 9
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <m_wii_open+0x30>
    1f4a:	00 c0       	rjmp	.+0      	; 0x1f4c <m_wii_open+0x36>
    1f4c:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1f4e:	88 e5       	ldi	r24, 0x58	; 88
    1f50:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    1f54:	88 23       	and	r24, r24
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <m_wii_open+0x44>
    1f58:	b3 c0       	rjmp	.+358    	; 0x20c0 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f60:	88 23       	and	r24, r24
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <m_wii_open+0x50>
    1f64:	af c0       	rjmp	.+350    	; 0x20c4 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <m_wii_open+0x5c>
    1f70:	ab c0       	rjmp	.+342    	; 0x20c8 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <m_wii_open+0x68>
    1f7c:	a7 c0       	rjmp	.+334    	; 0x20cc <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <m_wii_open+0x74>
    1f88:	a3 c0       	rjmp	.+326    	; 0x20d0 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f90:	88 23       	and	r24, r24
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <m_wii_open+0x80>
    1f94:	9f c0       	rjmp	.+318    	; 0x20d4 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <m_wii_open+0x8c>
    1fa0:	9b c0       	rjmp	.+310    	; 0x20d8 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <m_wii_open+0x98>
    1fac:	97 c0       	rjmp	.+302    	; 0x20dc <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1fae:	80 e9       	ldi	r24, 0x90	; 144
    1fb0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <m_wii_open+0xa4>
    1fb8:	93 c0       	rjmp	.+294    	; 0x20e0 <m_wii_open+0x1ca>
	end();
    1fba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
    1fbe:	83 ec       	ldi	r24, 0xC3	; 195
    1fc0:	99 e0       	ldi	r25, 0x09	; 9
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <m_wii_open+0xac>
    1fc6:	00 c0       	rjmp	.+0      	; 0x1fc8 <m_wii_open+0xb2>
    1fc8:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1fca:	88 e5       	ldi	r24, 0x58	; 88
    1fcc:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    1fd0:	88 23       	and	r24, r24
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <m_wii_open+0xc0>
    1fd4:	87 c0       	rjmp	.+270    	; 0x20e4 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1fd6:	87 e0       	ldi	r24, 0x07	; 7
    1fd8:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1fdc:	88 23       	and	r24, r24
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <m_wii_open+0xcc>
    1fe0:	83 c0       	rjmp	.+262    	; 0x20e8 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f4       	brne	.+2      	; 0x1fee <m_wii_open+0xd8>
    1fec:	7f c0       	rjmp	.+254    	; 0x20ec <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1fee:	81 e4       	ldi	r24, 0x41	; 65
    1ff0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <m_wii_open+0xe4>
    1ff8:	7b c0       	rjmp	.+246    	; 0x20f0 <m_wii_open+0x1da>
	end();
    1ffa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
    1ffe:	83 ec       	ldi	r24, 0xC3	; 195
    2000:	99 e0       	ldi	r25, 0x09	; 9
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <m_wii_open+0xec>
    2006:	00 c0       	rjmp	.+0      	; 0x2008 <m_wii_open+0xf2>
    2008:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    200a:	88 e5       	ldi	r24, 0x58	; 88
    200c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    2010:	88 23       	and	r24, r24
    2012:	09 f4       	brne	.+2      	; 0x2016 <m_wii_open+0x100>
    2014:	6f c0       	rjmp	.+222    	; 0x20f4 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    2016:	8a e1       	ldi	r24, 0x1A	; 26
    2018:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <m_wii_open+0x10c>
    2020:	6b c0       	rjmp	.+214    	; 0x20f8 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    2022:	80 e4       	ldi	r24, 0x40	; 64
    2024:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <m_wii_open+0x118>
    202c:	67 c0       	rjmp	.+206    	; 0x20fc <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    2034:	88 23       	and	r24, r24
    2036:	09 f4       	brne	.+2      	; 0x203a <m_wii_open+0x124>
    2038:	63 c0       	rjmp	.+198    	; 0x2100 <m_wii_open+0x1ea>
	end();
    203a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
    203e:	83 ec       	ldi	r24, 0xC3	; 195
    2040:	99 e0       	ldi	r25, 0x09	; 9
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <m_wii_open+0x12c>
    2046:	00 c0       	rjmp	.+0      	; 0x2048 <m_wii_open+0x132>
    2048:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    204a:	88 e5       	ldi	r24, 0x58	; 88
    204c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    2050:	88 23       	and	r24, r24
    2052:	09 f4       	brne	.+2      	; 0x2056 <m_wii_open+0x140>
    2054:	57 c0       	rjmp	.+174    	; 0x2104 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    2056:	83 e3       	ldi	r24, 0x33	; 51
    2058:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    205c:	88 23       	and	r24, r24
    205e:	09 f4       	brne	.+2      	; 0x2062 <m_wii_open+0x14c>
    2060:	53 c0       	rjmp	.+166    	; 0x2108 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <m_wii_open+0x158>
    206c:	4f c0       	rjmp	.+158    	; 0x210c <m_wii_open+0x1f6>
	end();
    206e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
    2072:	83 ec       	ldi	r24, 0xC3	; 195
    2074:	99 e0       	ldi	r25, 0x09	; 9
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <m_wii_open+0x160>
    207a:	00 c0       	rjmp	.+0      	; 0x207c <m_wii_open+0x166>
    207c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    207e:	88 e5       	ldi	r24, 0x58	; 88
    2080:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <start_write>
    2084:	88 23       	and	r24, r24
    2086:	09 f4       	brne	.+2      	; 0x208a <m_wii_open+0x174>
    2088:	43 c0       	rjmp	.+134    	; 0x2110 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    208a:	80 e3       	ldi	r24, 0x30	; 48
    208c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <m_wii_open+0x180>
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <send_byte>
    209c:	88 23       	and	r24, r24
    209e:	e1 f1       	breq	.+120    	; 0x2118 <m_wii_open+0x202>
	end();
    20a0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <end>
    20a4:	83 ec       	ldi	r24, 0xC3	; 195
    20a6:	99 e0       	ldi	r25, 0x09	; 9
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <m_wii_open+0x192>
    20ac:	00 c0       	rjmp	.+0      	; 0x20ae <m_wii_open+0x198>
    20ae:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2118:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    211a:	08 95       	ret

0000211c <__subsf3>:
    211c:	50 58       	subi	r21, 0x80	; 128

0000211e <__addsf3>:
    211e:	bb 27       	eor	r27, r27
    2120:	aa 27       	eor	r26, r26
    2122:	0e d0       	rcall	.+28     	; 0x2140 <__addsf3x>
    2124:	27 c2       	rjmp	.+1102   	; 0x2574 <__fp_round>
    2126:	f0 d1       	rcall	.+992    	; 0x2508 <__fp_pscA>
    2128:	30 f0       	brcs	.+12     	; 0x2136 <__addsf3+0x18>
    212a:	f5 d1       	rcall	.+1002   	; 0x2516 <__fp_pscB>
    212c:	20 f0       	brcs	.+8      	; 0x2136 <__addsf3+0x18>
    212e:	31 f4       	brne	.+12     	; 0x213c <__addsf3+0x1e>
    2130:	9f 3f       	cpi	r25, 0xFF	; 255
    2132:	11 f4       	brne	.+4      	; 0x2138 <__addsf3+0x1a>
    2134:	1e f4       	brtc	.+6      	; 0x213c <__addsf3+0x1e>
    2136:	c0 c1       	rjmp	.+896    	; 0x24b8 <__fp_nan>
    2138:	0e f4       	brtc	.+2      	; 0x213c <__addsf3+0x1e>
    213a:	e0 95       	com	r30
    213c:	e7 fb       	bst	r30, 7
    213e:	b6 c1       	rjmp	.+876    	; 0x24ac <__fp_inf>

00002140 <__addsf3x>:
    2140:	e9 2f       	mov	r30, r25
    2142:	3a d2       	rcall	.+1140   	; 0x25b8 <__fp_split3>
    2144:	80 f3       	brcs	.-32     	; 0x2126 <__addsf3+0x8>
    2146:	ba 17       	cp	r27, r26
    2148:	62 07       	cpc	r22, r18
    214a:	73 07       	cpc	r23, r19
    214c:	84 07       	cpc	r24, r20
    214e:	95 07       	cpc	r25, r21
    2150:	18 f0       	brcs	.+6      	; 0x2158 <__addsf3x+0x18>
    2152:	71 f4       	brne	.+28     	; 0x2170 <__addsf3x+0x30>
    2154:	9e f5       	brtc	.+102    	; 0x21bc <__addsf3x+0x7c>
    2156:	52 c2       	rjmp	.+1188   	; 0x25fc <__fp_zero>
    2158:	0e f4       	brtc	.+2      	; 0x215c <__addsf3x+0x1c>
    215a:	e0 95       	com	r30
    215c:	0b 2e       	mov	r0, r27
    215e:	ba 2f       	mov	r27, r26
    2160:	a0 2d       	mov	r26, r0
    2162:	0b 01       	movw	r0, r22
    2164:	b9 01       	movw	r22, r18
    2166:	90 01       	movw	r18, r0
    2168:	0c 01       	movw	r0, r24
    216a:	ca 01       	movw	r24, r20
    216c:	a0 01       	movw	r20, r0
    216e:	11 24       	eor	r1, r1
    2170:	ff 27       	eor	r31, r31
    2172:	59 1b       	sub	r21, r25
    2174:	99 f0       	breq	.+38     	; 0x219c <__addsf3x+0x5c>
    2176:	59 3f       	cpi	r21, 0xF9	; 249
    2178:	50 f4       	brcc	.+20     	; 0x218e <__addsf3x+0x4e>
    217a:	50 3e       	cpi	r21, 0xE0	; 224
    217c:	68 f1       	brcs	.+90     	; 0x21d8 <__addsf3x+0x98>
    217e:	1a 16       	cp	r1, r26
    2180:	f0 40       	sbci	r31, 0x00	; 0
    2182:	a2 2f       	mov	r26, r18
    2184:	23 2f       	mov	r18, r19
    2186:	34 2f       	mov	r19, r20
    2188:	44 27       	eor	r20, r20
    218a:	58 5f       	subi	r21, 0xF8	; 248
    218c:	f3 cf       	rjmp	.-26     	; 0x2174 <__addsf3x+0x34>
    218e:	46 95       	lsr	r20
    2190:	37 95       	ror	r19
    2192:	27 95       	ror	r18
    2194:	a7 95       	ror	r26
    2196:	f0 40       	sbci	r31, 0x00	; 0
    2198:	53 95       	inc	r21
    219a:	c9 f7       	brne	.-14     	; 0x218e <__addsf3x+0x4e>
    219c:	7e f4       	brtc	.+30     	; 0x21bc <__addsf3x+0x7c>
    219e:	1f 16       	cp	r1, r31
    21a0:	ba 0b       	sbc	r27, r26
    21a2:	62 0b       	sbc	r22, r18
    21a4:	73 0b       	sbc	r23, r19
    21a6:	84 0b       	sbc	r24, r20
    21a8:	ba f0       	brmi	.+46     	; 0x21d8 <__addsf3x+0x98>
    21aa:	91 50       	subi	r25, 0x01	; 1
    21ac:	a1 f0       	breq	.+40     	; 0x21d6 <__addsf3x+0x96>
    21ae:	ff 0f       	add	r31, r31
    21b0:	bb 1f       	adc	r27, r27
    21b2:	66 1f       	adc	r22, r22
    21b4:	77 1f       	adc	r23, r23
    21b6:	88 1f       	adc	r24, r24
    21b8:	c2 f7       	brpl	.-16     	; 0x21aa <__addsf3x+0x6a>
    21ba:	0e c0       	rjmp	.+28     	; 0x21d8 <__addsf3x+0x98>
    21bc:	ba 0f       	add	r27, r26
    21be:	62 1f       	adc	r22, r18
    21c0:	73 1f       	adc	r23, r19
    21c2:	84 1f       	adc	r24, r20
    21c4:	48 f4       	brcc	.+18     	; 0x21d8 <__addsf3x+0x98>
    21c6:	87 95       	ror	r24
    21c8:	77 95       	ror	r23
    21ca:	67 95       	ror	r22
    21cc:	b7 95       	ror	r27
    21ce:	f7 95       	ror	r31
    21d0:	9e 3f       	cpi	r25, 0xFE	; 254
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <__addsf3x+0x96>
    21d4:	b3 cf       	rjmp	.-154    	; 0x213c <__addsf3+0x1e>
    21d6:	93 95       	inc	r25
    21d8:	88 0f       	add	r24, r24
    21da:	08 f0       	brcs	.+2      	; 0x21de <__addsf3x+0x9e>
    21dc:	99 27       	eor	r25, r25
    21de:	ee 0f       	add	r30, r30
    21e0:	97 95       	ror	r25
    21e2:	87 95       	ror	r24
    21e4:	08 95       	ret
    21e6:	90 d1       	rcall	.+800    	; 0x2508 <__fp_pscA>
    21e8:	58 f0       	brcs	.+22     	; 0x2200 <__addsf3x+0xc0>
    21ea:	80 e8       	ldi	r24, 0x80	; 128
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <__addsf3x+0xb2>
    21f0:	9e ef       	ldi	r25, 0xFE	; 254
    21f2:	91 d1       	rcall	.+802    	; 0x2516 <__fp_pscB>
    21f4:	28 f0       	brcs	.+10     	; 0x2200 <__addsf3x+0xc0>
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	51 e0       	ldi	r21, 0x01	; 1
    21fa:	59 f4       	brne	.+22     	; 0x2212 <atan2+0xe>
    21fc:	5e ef       	ldi	r21, 0xFE	; 254
    21fe:	09 c0       	rjmp	.+18     	; 0x2212 <atan2+0xe>
    2200:	5b c1       	rjmp	.+694    	; 0x24b8 <__fp_nan>
    2202:	fc c1       	rjmp	.+1016   	; 0x25fc <__fp_zero>

00002204 <atan2>:
    2204:	e9 2f       	mov	r30, r25
    2206:	e0 78       	andi	r30, 0x80	; 128
    2208:	d7 d1       	rcall	.+942    	; 0x25b8 <__fp_split3>
    220a:	68 f3       	brcs	.-38     	; 0x21e6 <__addsf3x+0xa6>
    220c:	09 2e       	mov	r0, r25
    220e:	05 2a       	or	r0, r21
    2210:	c1 f3       	breq	.-16     	; 0x2202 <__addsf3x+0xc2>
    2212:	26 17       	cp	r18, r22
    2214:	37 07       	cpc	r19, r23
    2216:	48 07       	cpc	r20, r24
    2218:	59 07       	cpc	r21, r25
    221a:	38 f0       	brcs	.+14     	; 0x222a <atan2+0x26>
    221c:	0e 2e       	mov	r0, r30
    221e:	07 f8       	bld	r0, 7
    2220:	e0 25       	eor	r30, r0
    2222:	69 f0       	breq	.+26     	; 0x223e <atan2+0x3a>
    2224:	e0 25       	eor	r30, r0
    2226:	e0 64       	ori	r30, 0x40	; 64
    2228:	0a c0       	rjmp	.+20     	; 0x223e <atan2+0x3a>
    222a:	ef 63       	ori	r30, 0x3F	; 63
    222c:	07 f8       	bld	r0, 7
    222e:	00 94       	com	r0
    2230:	07 fa       	bst	r0, 7
    2232:	db 01       	movw	r26, r22
    2234:	b9 01       	movw	r22, r18
    2236:	9d 01       	movw	r18, r26
    2238:	dc 01       	movw	r26, r24
    223a:	ca 01       	movw	r24, r20
    223c:	ad 01       	movw	r20, r26
    223e:	ef 93       	push	r30
    2240:	4a d0       	rcall	.+148    	; 0x22d6 <__divsf3_pse>
    2242:	98 d1       	rcall	.+816    	; 0x2574 <__fp_round>
    2244:	0a d0       	rcall	.+20     	; 0x225a <atan>
    2246:	5f 91       	pop	r21
    2248:	55 23       	and	r21, r21
    224a:	31 f0       	breq	.+12     	; 0x2258 <atan2+0x54>
    224c:	2b ed       	ldi	r18, 0xDB	; 219
    224e:	3f e0       	ldi	r19, 0x0F	; 15
    2250:	49 e4       	ldi	r20, 0x49	; 73
    2252:	50 fd       	sbrc	r21, 0
    2254:	49 ec       	ldi	r20, 0xC9	; 201
    2256:	63 cf       	rjmp	.-314    	; 0x211e <__addsf3>
    2258:	08 95       	ret

0000225a <atan>:
    225a:	df 93       	push	r29
    225c:	dd 27       	eor	r29, r29
    225e:	b9 2f       	mov	r27, r25
    2260:	bf 77       	andi	r27, 0x7F	; 127
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	16 16       	cp	r1, r22
    2268:	17 06       	cpc	r1, r23
    226a:	48 07       	cpc	r20, r24
    226c:	5b 07       	cpc	r21, r27
    226e:	10 f4       	brcc	.+4      	; 0x2274 <atan+0x1a>
    2270:	d9 2f       	mov	r29, r25
    2272:	cf d1       	rcall	.+926    	; 0x2612 <inverse>
    2274:	9f 93       	push	r25
    2276:	8f 93       	push	r24
    2278:	7f 93       	push	r23
    227a:	6f 93       	push	r22
    227c:	7c d2       	rcall	.+1272   	; 0x2776 <square>
    227e:	ec ea       	ldi	r30, 0xAC	; 172
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	1d d1       	rcall	.+570    	; 0x24be <__fp_powser>
    2284:	77 d1       	rcall	.+750    	; 0x2574 <__fp_round>
    2286:	2f 91       	pop	r18
    2288:	3f 91       	pop	r19
    228a:	4f 91       	pop	r20
    228c:	5f 91       	pop	r21
    228e:	d4 d1       	rcall	.+936    	; 0x2638 <__mulsf3x>
    2290:	dd 23       	and	r29, r29
    2292:	49 f0       	breq	.+18     	; 0x22a6 <atan+0x4c>
    2294:	90 58       	subi	r25, 0x80	; 128
    2296:	a2 ea       	ldi	r26, 0xA2	; 162
    2298:	2a ed       	ldi	r18, 0xDA	; 218
    229a:	3f e0       	ldi	r19, 0x0F	; 15
    229c:	49 ec       	ldi	r20, 0xC9	; 201
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	d0 78       	andi	r29, 0x80	; 128
    22a2:	5d 27       	eor	r21, r29
    22a4:	4d df       	rcall	.-358    	; 0x2140 <__addsf3x>
    22a6:	df 91       	pop	r29
    22a8:	65 c1       	rjmp	.+714    	; 0x2574 <__fp_round>

000022aa <__cmpsf2>:
    22aa:	dc d0       	rcall	.+440    	; 0x2464 <__fp_cmp>
    22ac:	08 f4       	brcc	.+2      	; 0x22b0 <__cmpsf2+0x6>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	08 95       	ret

000022b2 <cos>:
    22b2:	39 d1       	rcall	.+626    	; 0x2526 <__fp_rempio2>
    22b4:	e3 95       	inc	r30
    22b6:	6f c1       	rjmp	.+734    	; 0x2596 <__fp_sinus>

000022b8 <__divsf3>:
    22b8:	0c d0       	rcall	.+24     	; 0x22d2 <__divsf3x>
    22ba:	5c c1       	rjmp	.+696    	; 0x2574 <__fp_round>
    22bc:	2c d1       	rcall	.+600    	; 0x2516 <__fp_pscB>
    22be:	40 f0       	brcs	.+16     	; 0x22d0 <__divsf3+0x18>
    22c0:	23 d1       	rcall	.+582    	; 0x2508 <__fp_pscA>
    22c2:	30 f0       	brcs	.+12     	; 0x22d0 <__divsf3+0x18>
    22c4:	21 f4       	brne	.+8      	; 0x22ce <__divsf3+0x16>
    22c6:	5f 3f       	cpi	r21, 0xFF	; 255
    22c8:	19 f0       	breq	.+6      	; 0x22d0 <__divsf3+0x18>
    22ca:	f0 c0       	rjmp	.+480    	; 0x24ac <__fp_inf>
    22cc:	51 11       	cpse	r21, r1
    22ce:	97 c1       	rjmp	.+814    	; 0x25fe <__fp_szero>
    22d0:	f3 c0       	rjmp	.+486    	; 0x24b8 <__fp_nan>

000022d2 <__divsf3x>:
    22d2:	72 d1       	rcall	.+740    	; 0x25b8 <__fp_split3>
    22d4:	98 f3       	brcs	.-26     	; 0x22bc <__divsf3+0x4>

000022d6 <__divsf3_pse>:
    22d6:	99 23       	and	r25, r25
    22d8:	c9 f3       	breq	.-14     	; 0x22cc <__divsf3+0x14>
    22da:	55 23       	and	r21, r21
    22dc:	b1 f3       	breq	.-20     	; 0x22ca <__divsf3+0x12>
    22de:	95 1b       	sub	r25, r21
    22e0:	55 0b       	sbc	r21, r21
    22e2:	bb 27       	eor	r27, r27
    22e4:	aa 27       	eor	r26, r26
    22e6:	62 17       	cp	r22, r18
    22e8:	73 07       	cpc	r23, r19
    22ea:	84 07       	cpc	r24, r20
    22ec:	38 f0       	brcs	.+14     	; 0x22fc <__divsf3_pse+0x26>
    22ee:	9f 5f       	subi	r25, 0xFF	; 255
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	44 1f       	adc	r20, r20
    22f8:	aa 1f       	adc	r26, r26
    22fa:	a9 f3       	breq	.-22     	; 0x22e6 <__divsf3_pse+0x10>
    22fc:	33 d0       	rcall	.+102    	; 0x2364 <__divsf3_pse+0x8e>
    22fe:	0e 2e       	mov	r0, r30
    2300:	3a f0       	brmi	.+14     	; 0x2310 <__divsf3_pse+0x3a>
    2302:	e0 e8       	ldi	r30, 0x80	; 128
    2304:	30 d0       	rcall	.+96     	; 0x2366 <__divsf3_pse+0x90>
    2306:	91 50       	subi	r25, 0x01	; 1
    2308:	50 40       	sbci	r21, 0x00	; 0
    230a:	e6 95       	lsr	r30
    230c:	00 1c       	adc	r0, r0
    230e:	ca f7       	brpl	.-14     	; 0x2302 <__divsf3_pse+0x2c>
    2310:	29 d0       	rcall	.+82     	; 0x2364 <__divsf3_pse+0x8e>
    2312:	fe 2f       	mov	r31, r30
    2314:	27 d0       	rcall	.+78     	; 0x2364 <__divsf3_pse+0x8e>
    2316:	66 0f       	add	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	bb 1f       	adc	r27, r27
    231e:	26 17       	cp	r18, r22
    2320:	37 07       	cpc	r19, r23
    2322:	48 07       	cpc	r20, r24
    2324:	ab 07       	cpc	r26, r27
    2326:	b0 e8       	ldi	r27, 0x80	; 128
    2328:	09 f0       	breq	.+2      	; 0x232c <__divsf3_pse+0x56>
    232a:	bb 0b       	sbc	r27, r27
    232c:	80 2d       	mov	r24, r0
    232e:	bf 01       	movw	r22, r30
    2330:	ff 27       	eor	r31, r31
    2332:	93 58       	subi	r25, 0x83	; 131
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	2a f0       	brmi	.+10     	; 0x2342 <__divsf3_pse+0x6c>
    2338:	9e 3f       	cpi	r25, 0xFE	; 254
    233a:	51 05       	cpc	r21, r1
    233c:	68 f0       	brcs	.+26     	; 0x2358 <__divsf3_pse+0x82>
    233e:	b6 c0       	rjmp	.+364    	; 0x24ac <__fp_inf>
    2340:	5e c1       	rjmp	.+700    	; 0x25fe <__fp_szero>
    2342:	5f 3f       	cpi	r21, 0xFF	; 255
    2344:	ec f3       	brlt	.-6      	; 0x2340 <__divsf3_pse+0x6a>
    2346:	98 3e       	cpi	r25, 0xE8	; 232
    2348:	dc f3       	brlt	.-10     	; 0x2340 <__divsf3_pse+0x6a>
    234a:	86 95       	lsr	r24
    234c:	77 95       	ror	r23
    234e:	67 95       	ror	r22
    2350:	b7 95       	ror	r27
    2352:	f7 95       	ror	r31
    2354:	9f 5f       	subi	r25, 0xFF	; 255
    2356:	c9 f7       	brne	.-14     	; 0x234a <__divsf3_pse+0x74>
    2358:	88 0f       	add	r24, r24
    235a:	91 1d       	adc	r25, r1
    235c:	96 95       	lsr	r25
    235e:	87 95       	ror	r24
    2360:	97 f9       	bld	r25, 7
    2362:	08 95       	ret
    2364:	e1 e0       	ldi	r30, 0x01	; 1
    2366:	66 0f       	add	r22, r22
    2368:	77 1f       	adc	r23, r23
    236a:	88 1f       	adc	r24, r24
    236c:	bb 1f       	adc	r27, r27
    236e:	62 17       	cp	r22, r18
    2370:	73 07       	cpc	r23, r19
    2372:	84 07       	cpc	r24, r20
    2374:	ba 07       	cpc	r27, r26
    2376:	20 f0       	brcs	.+8      	; 0x2380 <__divsf3_pse+0xaa>
    2378:	62 1b       	sub	r22, r18
    237a:	73 0b       	sbc	r23, r19
    237c:	84 0b       	sbc	r24, r20
    237e:	ba 0b       	sbc	r27, r26
    2380:	ee 1f       	adc	r30, r30
    2382:	88 f7       	brcc	.-30     	; 0x2366 <__divsf3_pse+0x90>
    2384:	e0 95       	com	r30
    2386:	08 95       	ret

00002388 <__fixsfsi>:
    2388:	04 d0       	rcall	.+8      	; 0x2392 <__fixunssfsi>
    238a:	68 94       	set
    238c:	b1 11       	cpse	r27, r1
    238e:	37 c1       	rjmp	.+622    	; 0x25fe <__fp_szero>
    2390:	08 95       	ret

00002392 <__fixunssfsi>:
    2392:	1a d1       	rcall	.+564    	; 0x25c8 <__fp_splitA>
    2394:	88 f0       	brcs	.+34     	; 0x23b8 <__fixunssfsi+0x26>
    2396:	9f 57       	subi	r25, 0x7F	; 127
    2398:	90 f0       	brcs	.+36     	; 0x23be <__fixunssfsi+0x2c>
    239a:	b9 2f       	mov	r27, r25
    239c:	99 27       	eor	r25, r25
    239e:	b7 51       	subi	r27, 0x17	; 23
    23a0:	a0 f0       	brcs	.+40     	; 0x23ca <__fixunssfsi+0x38>
    23a2:	d1 f0       	breq	.+52     	; 0x23d8 <__fixunssfsi+0x46>
    23a4:	66 0f       	add	r22, r22
    23a6:	77 1f       	adc	r23, r23
    23a8:	88 1f       	adc	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	1a f0       	brmi	.+6      	; 0x23b4 <__fixunssfsi+0x22>
    23ae:	ba 95       	dec	r27
    23b0:	c9 f7       	brne	.-14     	; 0x23a4 <__fixunssfsi+0x12>
    23b2:	12 c0       	rjmp	.+36     	; 0x23d8 <__fixunssfsi+0x46>
    23b4:	b1 30       	cpi	r27, 0x01	; 1
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <__fixunssfsi+0x46>
    23b8:	21 d1       	rcall	.+578    	; 0x25fc <__fp_zero>
    23ba:	b1 e0       	ldi	r27, 0x01	; 1
    23bc:	08 95       	ret
    23be:	1e c1       	rjmp	.+572    	; 0x25fc <__fp_zero>
    23c0:	67 2f       	mov	r22, r23
    23c2:	78 2f       	mov	r23, r24
    23c4:	88 27       	eor	r24, r24
    23c6:	b8 5f       	subi	r27, 0xF8	; 248
    23c8:	39 f0       	breq	.+14     	; 0x23d8 <__fixunssfsi+0x46>
    23ca:	b9 3f       	cpi	r27, 0xF9	; 249
    23cc:	cc f3       	brlt	.-14     	; 0x23c0 <__fixunssfsi+0x2e>
    23ce:	86 95       	lsr	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	b3 95       	inc	r27
    23d6:	d9 f7       	brne	.-10     	; 0x23ce <__fixunssfsi+0x3c>
    23d8:	3e f4       	brtc	.+14     	; 0x23e8 <__fixunssfsi+0x56>
    23da:	90 95       	com	r25
    23dc:	80 95       	com	r24
    23de:	70 95       	com	r23
    23e0:	61 95       	neg	r22
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	8f 4f       	sbci	r24, 0xFF	; 255
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	08 95       	ret

000023ea <__floatunsisf>:
    23ea:	e8 94       	clt
    23ec:	09 c0       	rjmp	.+18     	; 0x2400 <__floatsisf+0x12>

000023ee <__floatsisf>:
    23ee:	97 fb       	bst	r25, 7
    23f0:	3e f4       	brtc	.+14     	; 0x2400 <__floatsisf+0x12>
    23f2:	90 95       	com	r25
    23f4:	80 95       	com	r24
    23f6:	70 95       	com	r23
    23f8:	61 95       	neg	r22
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	8f 4f       	sbci	r24, 0xFF	; 255
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	99 23       	and	r25, r25
    2402:	a9 f0       	breq	.+42     	; 0x242e <__floatsisf+0x40>
    2404:	f9 2f       	mov	r31, r25
    2406:	96 e9       	ldi	r25, 0x96	; 150
    2408:	bb 27       	eor	r27, r27
    240a:	93 95       	inc	r25
    240c:	f6 95       	lsr	r31
    240e:	87 95       	ror	r24
    2410:	77 95       	ror	r23
    2412:	67 95       	ror	r22
    2414:	b7 95       	ror	r27
    2416:	f1 11       	cpse	r31, r1
    2418:	f8 cf       	rjmp	.-16     	; 0x240a <__floatsisf+0x1c>
    241a:	fa f4       	brpl	.+62     	; 0x245a <__floatsisf+0x6c>
    241c:	bb 0f       	add	r27, r27
    241e:	11 f4       	brne	.+4      	; 0x2424 <__floatsisf+0x36>
    2420:	60 ff       	sbrs	r22, 0
    2422:	1b c0       	rjmp	.+54     	; 0x245a <__floatsisf+0x6c>
    2424:	6f 5f       	subi	r22, 0xFF	; 255
    2426:	7f 4f       	sbci	r23, 0xFF	; 255
    2428:	8f 4f       	sbci	r24, 0xFF	; 255
    242a:	9f 4f       	sbci	r25, 0xFF	; 255
    242c:	16 c0       	rjmp	.+44     	; 0x245a <__floatsisf+0x6c>
    242e:	88 23       	and	r24, r24
    2430:	11 f0       	breq	.+4      	; 0x2436 <__floatsisf+0x48>
    2432:	96 e9       	ldi	r25, 0x96	; 150
    2434:	11 c0       	rjmp	.+34     	; 0x2458 <__floatsisf+0x6a>
    2436:	77 23       	and	r23, r23
    2438:	21 f0       	breq	.+8      	; 0x2442 <__floatsisf+0x54>
    243a:	9e e8       	ldi	r25, 0x8E	; 142
    243c:	87 2f       	mov	r24, r23
    243e:	76 2f       	mov	r23, r22
    2440:	05 c0       	rjmp	.+10     	; 0x244c <__floatsisf+0x5e>
    2442:	66 23       	and	r22, r22
    2444:	71 f0       	breq	.+28     	; 0x2462 <__floatsisf+0x74>
    2446:	96 e8       	ldi	r25, 0x86	; 134
    2448:	86 2f       	mov	r24, r22
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	2a f0       	brmi	.+10     	; 0x245a <__floatsisf+0x6c>
    2450:	9a 95       	dec	r25
    2452:	66 0f       	add	r22, r22
    2454:	77 1f       	adc	r23, r23
    2456:	88 1f       	adc	r24, r24
    2458:	da f7       	brpl	.-10     	; 0x2450 <__floatsisf+0x62>
    245a:	88 0f       	add	r24, r24
    245c:	96 95       	lsr	r25
    245e:	87 95       	ror	r24
    2460:	97 f9       	bld	r25, 7
    2462:	08 95       	ret

00002464 <__fp_cmp>:
    2464:	99 0f       	add	r25, r25
    2466:	00 08       	sbc	r0, r0
    2468:	55 0f       	add	r21, r21
    246a:	aa 0b       	sbc	r26, r26
    246c:	e0 e8       	ldi	r30, 0x80	; 128
    246e:	fe ef       	ldi	r31, 0xFE	; 254
    2470:	16 16       	cp	r1, r22
    2472:	17 06       	cpc	r1, r23
    2474:	e8 07       	cpc	r30, r24
    2476:	f9 07       	cpc	r31, r25
    2478:	c0 f0       	brcs	.+48     	; 0x24aa <__fp_cmp+0x46>
    247a:	12 16       	cp	r1, r18
    247c:	13 06       	cpc	r1, r19
    247e:	e4 07       	cpc	r30, r20
    2480:	f5 07       	cpc	r31, r21
    2482:	98 f0       	brcs	.+38     	; 0x24aa <__fp_cmp+0x46>
    2484:	62 1b       	sub	r22, r18
    2486:	73 0b       	sbc	r23, r19
    2488:	84 0b       	sbc	r24, r20
    248a:	95 0b       	sbc	r25, r21
    248c:	39 f4       	brne	.+14     	; 0x249c <__fp_cmp+0x38>
    248e:	0a 26       	eor	r0, r26
    2490:	61 f0       	breq	.+24     	; 0x24aa <__fp_cmp+0x46>
    2492:	23 2b       	or	r18, r19
    2494:	24 2b       	or	r18, r20
    2496:	25 2b       	or	r18, r21
    2498:	21 f4       	brne	.+8      	; 0x24a2 <__fp_cmp+0x3e>
    249a:	08 95       	ret
    249c:	0a 26       	eor	r0, r26
    249e:	09 f4       	brne	.+2      	; 0x24a2 <__fp_cmp+0x3e>
    24a0:	a1 40       	sbci	r26, 0x01	; 1
    24a2:	a6 95       	lsr	r26
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	81 1d       	adc	r24, r1
    24a8:	81 1d       	adc	r24, r1
    24aa:	08 95       	ret

000024ac <__fp_inf>:
    24ac:	97 f9       	bld	r25, 7
    24ae:	9f 67       	ori	r25, 0x7F	; 127
    24b0:	80 e8       	ldi	r24, 0x80	; 128
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	08 95       	ret

000024b8 <__fp_nan>:
    24b8:	9f ef       	ldi	r25, 0xFF	; 255
    24ba:	80 ec       	ldi	r24, 0xC0	; 192
    24bc:	08 95       	ret

000024be <__fp_powser>:
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	1f 93       	push	r17
    24c4:	0f 93       	push	r16
    24c6:	ff 92       	push	r15
    24c8:	ef 92       	push	r14
    24ca:	df 92       	push	r13
    24cc:	7b 01       	movw	r14, r22
    24ce:	8c 01       	movw	r16, r24
    24d0:	68 94       	set
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <__fp_powser+0x20>
    24d4:	da 2e       	mov	r13, r26
    24d6:	ef 01       	movw	r28, r30
    24d8:	af d0       	rcall	.+350    	; 0x2638 <__mulsf3x>
    24da:	fe 01       	movw	r30, r28
    24dc:	e8 94       	clt
    24de:	a5 91       	lpm	r26, Z+
    24e0:	25 91       	lpm	r18, Z+
    24e2:	35 91       	lpm	r19, Z+
    24e4:	45 91       	lpm	r20, Z+
    24e6:	55 91       	lpm	r21, Z+
    24e8:	ae f3       	brts	.-22     	; 0x24d4 <__fp_powser+0x16>
    24ea:	ef 01       	movw	r28, r30
    24ec:	29 de       	rcall	.-942    	; 0x2140 <__addsf3x>
    24ee:	fe 01       	movw	r30, r28
    24f0:	97 01       	movw	r18, r14
    24f2:	a8 01       	movw	r20, r16
    24f4:	da 94       	dec	r13
    24f6:	79 f7       	brne	.-34     	; 0x24d6 <__fp_powser+0x18>
    24f8:	df 90       	pop	r13
    24fa:	ef 90       	pop	r14
    24fc:	ff 90       	pop	r15
    24fe:	0f 91       	pop	r16
    2500:	1f 91       	pop	r17
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <__fp_pscA>:
    2508:	00 24       	eor	r0, r0
    250a:	0a 94       	dec	r0
    250c:	16 16       	cp	r1, r22
    250e:	17 06       	cpc	r1, r23
    2510:	18 06       	cpc	r1, r24
    2512:	09 06       	cpc	r0, r25
    2514:	08 95       	ret

00002516 <__fp_pscB>:
    2516:	00 24       	eor	r0, r0
    2518:	0a 94       	dec	r0
    251a:	12 16       	cp	r1, r18
    251c:	13 06       	cpc	r1, r19
    251e:	14 06       	cpc	r1, r20
    2520:	05 06       	cpc	r0, r21
    2522:	08 95       	ret
    2524:	c9 cf       	rjmp	.-110    	; 0x24b8 <__fp_nan>

00002526 <__fp_rempio2>:
    2526:	50 d0       	rcall	.+160    	; 0x25c8 <__fp_splitA>
    2528:	e8 f3       	brcs	.-6      	; 0x2524 <__fp_pscB+0xe>
    252a:	e8 94       	clt
    252c:	e0 e0       	ldi	r30, 0x00	; 0
    252e:	bb 27       	eor	r27, r27
    2530:	9f 57       	subi	r25, 0x7F	; 127
    2532:	f0 f0       	brcs	.+60     	; 0x2570 <__fp_rempio2+0x4a>
    2534:	2a ed       	ldi	r18, 0xDA	; 218
    2536:	3f e0       	ldi	r19, 0x0F	; 15
    2538:	49 ec       	ldi	r20, 0xC9	; 201
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <__fp_rempio2+0x22>
    253c:	ee 0f       	add	r30, r30
    253e:	bb 0f       	add	r27, r27
    2540:	66 1f       	adc	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	88 1f       	adc	r24, r24
    2546:	28 f0       	brcs	.+10     	; 0x2552 <__fp_rempio2+0x2c>
    2548:	b2 3a       	cpi	r27, 0xA2	; 162
    254a:	62 07       	cpc	r22, r18
    254c:	73 07       	cpc	r23, r19
    254e:	84 07       	cpc	r24, r20
    2550:	28 f0       	brcs	.+10     	; 0x255c <__fp_rempio2+0x36>
    2552:	b2 5a       	subi	r27, 0xA2	; 162
    2554:	62 0b       	sbc	r22, r18
    2556:	73 0b       	sbc	r23, r19
    2558:	84 0b       	sbc	r24, r20
    255a:	e3 95       	inc	r30
    255c:	9a 95       	dec	r25
    255e:	72 f7       	brpl	.-36     	; 0x253c <__fp_rempio2+0x16>
    2560:	80 38       	cpi	r24, 0x80	; 128
    2562:	30 f4       	brcc	.+12     	; 0x2570 <__fp_rempio2+0x4a>
    2564:	9a 95       	dec	r25
    2566:	bb 0f       	add	r27, r27
    2568:	66 1f       	adc	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	d2 f7       	brpl	.-12     	; 0x2564 <__fp_rempio2+0x3e>
    2570:	90 48       	sbci	r25, 0x80	; 128
    2572:	06 c1       	rjmp	.+524    	; 0x2780 <__fp_mpack_finite>

00002574 <__fp_round>:
    2574:	09 2e       	mov	r0, r25
    2576:	03 94       	inc	r0
    2578:	00 0c       	add	r0, r0
    257a:	11 f4       	brne	.+4      	; 0x2580 <__fp_round+0xc>
    257c:	88 23       	and	r24, r24
    257e:	52 f0       	brmi	.+20     	; 0x2594 <__fp_round+0x20>
    2580:	bb 0f       	add	r27, r27
    2582:	40 f4       	brcc	.+16     	; 0x2594 <__fp_round+0x20>
    2584:	bf 2b       	or	r27, r31
    2586:	11 f4       	brne	.+4      	; 0x258c <__fp_round+0x18>
    2588:	60 ff       	sbrs	r22, 0
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <__fp_round+0x20>
    258c:	6f 5f       	subi	r22, 0xFF	; 255
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	8f 4f       	sbci	r24, 0xFF	; 255
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	08 95       	ret

00002596 <__fp_sinus>:
    2596:	ef 93       	push	r30
    2598:	e0 ff       	sbrs	r30, 0
    259a:	06 c0       	rjmp	.+12     	; 0x25a8 <__fp_sinus+0x12>
    259c:	a2 ea       	ldi	r26, 0xA2	; 162
    259e:	2a ed       	ldi	r18, 0xDA	; 218
    25a0:	3f e0       	ldi	r19, 0x0F	; 15
    25a2:	49 ec       	ldi	r20, 0xC9	; 201
    25a4:	5f eb       	ldi	r21, 0xBF	; 191
    25a6:	cc dd       	rcall	.-1128   	; 0x2140 <__addsf3x>
    25a8:	e5 df       	rcall	.-54     	; 0x2574 <__fp_round>
    25aa:	0f 90       	pop	r0
    25ac:	03 94       	inc	r0
    25ae:	01 fc       	sbrc	r0, 1
    25b0:	90 58       	subi	r25, 0x80	; 128
    25b2:	e9 ed       	ldi	r30, 0xD9	; 217
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	f7 c0       	rjmp	.+494    	; 0x27a6 <__fp_powsodd>

000025b8 <__fp_split3>:
    25b8:	57 fd       	sbrc	r21, 7
    25ba:	90 58       	subi	r25, 0x80	; 128
    25bc:	44 0f       	add	r20, r20
    25be:	55 1f       	adc	r21, r21
    25c0:	59 f0       	breq	.+22     	; 0x25d8 <__fp_splitA+0x10>
    25c2:	5f 3f       	cpi	r21, 0xFF	; 255
    25c4:	71 f0       	breq	.+28     	; 0x25e2 <__fp_splitA+0x1a>
    25c6:	47 95       	ror	r20

000025c8 <__fp_splitA>:
    25c8:	88 0f       	add	r24, r24
    25ca:	97 fb       	bst	r25, 7
    25cc:	99 1f       	adc	r25, r25
    25ce:	61 f0       	breq	.+24     	; 0x25e8 <__fp_splitA+0x20>
    25d0:	9f 3f       	cpi	r25, 0xFF	; 255
    25d2:	79 f0       	breq	.+30     	; 0x25f2 <__fp_splitA+0x2a>
    25d4:	87 95       	ror	r24
    25d6:	08 95       	ret
    25d8:	12 16       	cp	r1, r18
    25da:	13 06       	cpc	r1, r19
    25dc:	14 06       	cpc	r1, r20
    25de:	55 1f       	adc	r21, r21
    25e0:	f2 cf       	rjmp	.-28     	; 0x25c6 <__fp_split3+0xe>
    25e2:	46 95       	lsr	r20
    25e4:	f1 df       	rcall	.-30     	; 0x25c8 <__fp_splitA>
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <__fp_splitA+0x30>
    25e8:	16 16       	cp	r1, r22
    25ea:	17 06       	cpc	r1, r23
    25ec:	18 06       	cpc	r1, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	f1 cf       	rjmp	.-30     	; 0x25d4 <__fp_splitA+0xc>
    25f2:	86 95       	lsr	r24
    25f4:	71 05       	cpc	r23, r1
    25f6:	61 05       	cpc	r22, r1
    25f8:	08 94       	sec
    25fa:	08 95       	ret

000025fc <__fp_zero>:
    25fc:	e8 94       	clt

000025fe <__fp_szero>:
    25fe:	bb 27       	eor	r27, r27
    2600:	66 27       	eor	r22, r22
    2602:	77 27       	eor	r23, r23
    2604:	cb 01       	movw	r24, r22
    2606:	97 f9       	bld	r25, 7
    2608:	08 95       	ret

0000260a <__gesf2>:
    260a:	2c df       	rcall	.-424    	; 0x2464 <__fp_cmp>
    260c:	08 f4       	brcc	.+2      	; 0x2610 <__gesf2+0x6>
    260e:	8f ef       	ldi	r24, 0xFF	; 255
    2610:	08 95       	ret

00002612 <inverse>:
    2612:	9b 01       	movw	r18, r22
    2614:	ac 01       	movw	r20, r24
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	80 e8       	ldi	r24, 0x80	; 128
    261c:	9f e3       	ldi	r25, 0x3F	; 63
    261e:	4c ce       	rjmp	.-872    	; 0x22b8 <__divsf3>

00002620 <__mulsf3>:
    2620:	0b d0       	rcall	.+22     	; 0x2638 <__mulsf3x>
    2622:	a8 cf       	rjmp	.-176    	; 0x2574 <__fp_round>
    2624:	71 df       	rcall	.-286    	; 0x2508 <__fp_pscA>
    2626:	28 f0       	brcs	.+10     	; 0x2632 <__mulsf3+0x12>
    2628:	76 df       	rcall	.-276    	; 0x2516 <__fp_pscB>
    262a:	18 f0       	brcs	.+6      	; 0x2632 <__mulsf3+0x12>
    262c:	95 23       	and	r25, r21
    262e:	09 f0       	breq	.+2      	; 0x2632 <__mulsf3+0x12>
    2630:	3d cf       	rjmp	.-390    	; 0x24ac <__fp_inf>
    2632:	42 cf       	rjmp	.-380    	; 0x24b8 <__fp_nan>
    2634:	11 24       	eor	r1, r1
    2636:	e3 cf       	rjmp	.-58     	; 0x25fe <__fp_szero>

00002638 <__mulsf3x>:
    2638:	bf df       	rcall	.-130    	; 0x25b8 <__fp_split3>
    263a:	a0 f3       	brcs	.-24     	; 0x2624 <__mulsf3+0x4>

0000263c <__mulsf3_pse>:
    263c:	95 9f       	mul	r25, r21
    263e:	d1 f3       	breq	.-12     	; 0x2634 <__mulsf3+0x14>
    2640:	95 0f       	add	r25, r21
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	55 1f       	adc	r21, r21
    2646:	62 9f       	mul	r22, r18
    2648:	f0 01       	movw	r30, r0
    264a:	72 9f       	mul	r23, r18
    264c:	bb 27       	eor	r27, r27
    264e:	f0 0d       	add	r31, r0
    2650:	b1 1d       	adc	r27, r1
    2652:	63 9f       	mul	r22, r19
    2654:	aa 27       	eor	r26, r26
    2656:	f0 0d       	add	r31, r0
    2658:	b1 1d       	adc	r27, r1
    265a:	aa 1f       	adc	r26, r26
    265c:	64 9f       	mul	r22, r20
    265e:	66 27       	eor	r22, r22
    2660:	b0 0d       	add	r27, r0
    2662:	a1 1d       	adc	r26, r1
    2664:	66 1f       	adc	r22, r22
    2666:	82 9f       	mul	r24, r18
    2668:	22 27       	eor	r18, r18
    266a:	b0 0d       	add	r27, r0
    266c:	a1 1d       	adc	r26, r1
    266e:	62 1f       	adc	r22, r18
    2670:	73 9f       	mul	r23, r19
    2672:	b0 0d       	add	r27, r0
    2674:	a1 1d       	adc	r26, r1
    2676:	62 1f       	adc	r22, r18
    2678:	83 9f       	mul	r24, r19
    267a:	a0 0d       	add	r26, r0
    267c:	61 1d       	adc	r22, r1
    267e:	22 1f       	adc	r18, r18
    2680:	74 9f       	mul	r23, r20
    2682:	33 27       	eor	r19, r19
    2684:	a0 0d       	add	r26, r0
    2686:	61 1d       	adc	r22, r1
    2688:	23 1f       	adc	r18, r19
    268a:	84 9f       	mul	r24, r20
    268c:	60 0d       	add	r22, r0
    268e:	21 1d       	adc	r18, r1
    2690:	82 2f       	mov	r24, r18
    2692:	76 2f       	mov	r23, r22
    2694:	6a 2f       	mov	r22, r26
    2696:	11 24       	eor	r1, r1
    2698:	9f 57       	subi	r25, 0x7F	; 127
    269a:	50 40       	sbci	r21, 0x00	; 0
    269c:	8a f0       	brmi	.+34     	; 0x26c0 <__mulsf3_pse+0x84>
    269e:	e1 f0       	breq	.+56     	; 0x26d8 <__mulsf3_pse+0x9c>
    26a0:	88 23       	and	r24, r24
    26a2:	4a f0       	brmi	.+18     	; 0x26b6 <__mulsf3_pse+0x7a>
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	bb 1f       	adc	r27, r27
    26aa:	66 1f       	adc	r22, r22
    26ac:	77 1f       	adc	r23, r23
    26ae:	88 1f       	adc	r24, r24
    26b0:	91 50       	subi	r25, 0x01	; 1
    26b2:	50 40       	sbci	r21, 0x00	; 0
    26b4:	a9 f7       	brne	.-22     	; 0x26a0 <__mulsf3_pse+0x64>
    26b6:	9e 3f       	cpi	r25, 0xFE	; 254
    26b8:	51 05       	cpc	r21, r1
    26ba:	70 f0       	brcs	.+28     	; 0x26d8 <__mulsf3_pse+0x9c>
    26bc:	f7 ce       	rjmp	.-530    	; 0x24ac <__fp_inf>
    26be:	9f cf       	rjmp	.-194    	; 0x25fe <__fp_szero>
    26c0:	5f 3f       	cpi	r21, 0xFF	; 255
    26c2:	ec f3       	brlt	.-6      	; 0x26be <__mulsf3_pse+0x82>
    26c4:	98 3e       	cpi	r25, 0xE8	; 232
    26c6:	dc f3       	brlt	.-10     	; 0x26be <__mulsf3_pse+0x82>
    26c8:	86 95       	lsr	r24
    26ca:	77 95       	ror	r23
    26cc:	67 95       	ror	r22
    26ce:	b7 95       	ror	r27
    26d0:	f7 95       	ror	r31
    26d2:	e7 95       	ror	r30
    26d4:	9f 5f       	subi	r25, 0xFF	; 255
    26d6:	c1 f7       	brne	.-16     	; 0x26c8 <__mulsf3_pse+0x8c>
    26d8:	fe 2b       	or	r31, r30
    26da:	88 0f       	add	r24, r24
    26dc:	91 1d       	adc	r25, r1
    26de:	96 95       	lsr	r25
    26e0:	87 95       	ror	r24
    26e2:	97 f9       	bld	r25, 7
    26e4:	08 95       	ret

000026e6 <sin>:
    26e6:	9f 93       	push	r25
    26e8:	1e df       	rcall	.-452    	; 0x2526 <__fp_rempio2>
    26ea:	0f 90       	pop	r0
    26ec:	07 fc       	sbrc	r0, 7
    26ee:	ee 5f       	subi	r30, 0xFE	; 254
    26f0:	52 cf       	rjmp	.-348    	; 0x2596 <__fp_sinus>
    26f2:	11 f4       	brne	.+4      	; 0x26f8 <sin+0x12>
    26f4:	0e f4       	brtc	.+2      	; 0x26f8 <sin+0x12>
    26f6:	e0 ce       	rjmp	.-576    	; 0x24b8 <__fp_nan>
    26f8:	41 c0       	rjmp	.+130    	; 0x277c <__fp_mpack>

000026fa <sqrt>:
    26fa:	66 df       	rcall	.-308    	; 0x25c8 <__fp_splitA>
    26fc:	d0 f3       	brcs	.-12     	; 0x26f2 <sin+0xc>
    26fe:	99 23       	and	r25, r25
    2700:	d9 f3       	breq	.-10     	; 0x26f8 <sin+0x12>
    2702:	ce f3       	brts	.-14     	; 0x26f6 <sin+0x10>
    2704:	9f 57       	subi	r25, 0x7F	; 127
    2706:	55 0b       	sbc	r21, r21
    2708:	87 ff       	sbrs	r24, 7
    270a:	46 d0       	rcall	.+140    	; 0x2798 <__fp_norm2>
    270c:	00 24       	eor	r0, r0
    270e:	a0 e6       	ldi	r26, 0x60	; 96
    2710:	40 ea       	ldi	r20, 0xA0	; 160
    2712:	90 01       	movw	r18, r0
    2714:	80 58       	subi	r24, 0x80	; 128
    2716:	56 95       	lsr	r21
    2718:	97 95       	ror	r25
    271a:	28 f4       	brcc	.+10     	; 0x2726 <sqrt+0x2c>
    271c:	80 5c       	subi	r24, 0xC0	; 192
    271e:	66 0f       	add	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	20 f0       	brcs	.+8      	; 0x272e <sqrt+0x34>
    2726:	26 17       	cp	r18, r22
    2728:	37 07       	cpc	r19, r23
    272a:	48 07       	cpc	r20, r24
    272c:	30 f4       	brcc	.+12     	; 0x273a <sqrt+0x40>
    272e:	62 1b       	sub	r22, r18
    2730:	73 0b       	sbc	r23, r19
    2732:	84 0b       	sbc	r24, r20
    2734:	20 29       	or	r18, r0
    2736:	31 29       	or	r19, r1
    2738:	4a 2b       	or	r20, r26
    273a:	a6 95       	lsr	r26
    273c:	17 94       	ror	r1
    273e:	07 94       	ror	r0
    2740:	20 25       	eor	r18, r0
    2742:	31 25       	eor	r19, r1
    2744:	4a 27       	eor	r20, r26
    2746:	58 f7       	brcc	.-42     	; 0x271e <sqrt+0x24>
    2748:	66 0f       	add	r22, r22
    274a:	77 1f       	adc	r23, r23
    274c:	88 1f       	adc	r24, r24
    274e:	20 f0       	brcs	.+8      	; 0x2758 <sqrt+0x5e>
    2750:	26 17       	cp	r18, r22
    2752:	37 07       	cpc	r19, r23
    2754:	48 07       	cpc	r20, r24
    2756:	30 f4       	brcc	.+12     	; 0x2764 <sqrt+0x6a>
    2758:	62 0b       	sbc	r22, r18
    275a:	73 0b       	sbc	r23, r19
    275c:	84 0b       	sbc	r24, r20
    275e:	20 0d       	add	r18, r0
    2760:	31 1d       	adc	r19, r1
    2762:	41 1d       	adc	r20, r1
    2764:	a0 95       	com	r26
    2766:	81 f7       	brne	.-32     	; 0x2748 <sqrt+0x4e>
    2768:	b9 01       	movw	r22, r18
    276a:	84 2f       	mov	r24, r20
    276c:	91 58       	subi	r25, 0x81	; 129
    276e:	88 0f       	add	r24, r24
    2770:	96 95       	lsr	r25
    2772:	87 95       	ror	r24
    2774:	08 95       	ret

00002776 <square>:
    2776:	9b 01       	movw	r18, r22
    2778:	ac 01       	movw	r20, r24
    277a:	52 cf       	rjmp	.-348    	; 0x2620 <__mulsf3>

0000277c <__fp_mpack>:
    277c:	9f 3f       	cpi	r25, 0xFF	; 255
    277e:	31 f0       	breq	.+12     	; 0x278c <__fp_mpack_finite+0xc>

00002780 <__fp_mpack_finite>:
    2780:	91 50       	subi	r25, 0x01	; 1
    2782:	20 f4       	brcc	.+8      	; 0x278c <__fp_mpack_finite+0xc>
    2784:	87 95       	ror	r24
    2786:	77 95       	ror	r23
    2788:	67 95       	ror	r22
    278a:	b7 95       	ror	r27
    278c:	88 0f       	add	r24, r24
    278e:	91 1d       	adc	r25, r1
    2790:	96 95       	lsr	r25
    2792:	87 95       	ror	r24
    2794:	97 f9       	bld	r25, 7
    2796:	08 95       	ret

00002798 <__fp_norm2>:
    2798:	91 50       	subi	r25, 0x01	; 1
    279a:	50 40       	sbci	r21, 0x00	; 0
    279c:	66 0f       	add	r22, r22
    279e:	77 1f       	adc	r23, r23
    27a0:	88 1f       	adc	r24, r24
    27a2:	d2 f7       	brpl	.-12     	; 0x2798 <__fp_norm2>
    27a4:	08 95       	ret

000027a6 <__fp_powsodd>:
    27a6:	9f 93       	push	r25
    27a8:	8f 93       	push	r24
    27aa:	7f 93       	push	r23
    27ac:	6f 93       	push	r22
    27ae:	ff 93       	push	r31
    27b0:	ef 93       	push	r30
    27b2:	9b 01       	movw	r18, r22
    27b4:	ac 01       	movw	r20, r24
    27b6:	34 df       	rcall	.-408    	; 0x2620 <__mulsf3>
    27b8:	ef 91       	pop	r30
    27ba:	ff 91       	pop	r31
    27bc:	80 de       	rcall	.-768    	; 0x24be <__fp_powser>
    27be:	2f 91       	pop	r18
    27c0:	3f 91       	pop	r19
    27c2:	4f 91       	pop	r20
    27c4:	5f 91       	pop	r21
    27c6:	2c cf       	rjmp	.-424    	; 0x2620 <__mulsf3>

000027c8 <__divmodhi4>:
    27c8:	97 fb       	bst	r25, 7
    27ca:	07 2e       	mov	r0, r23
    27cc:	16 f4       	brtc	.+4      	; 0x27d2 <__divmodhi4+0xa>
    27ce:	00 94       	com	r0
    27d0:	07 d0       	rcall	.+14     	; 0x27e0 <__divmodhi4_neg1>
    27d2:	77 fd       	sbrc	r23, 7
    27d4:	09 d0       	rcall	.+18     	; 0x27e8 <__divmodhi4_neg2>
    27d6:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__udivmodhi4>
    27da:	07 fc       	sbrc	r0, 7
    27dc:	05 d0       	rcall	.+10     	; 0x27e8 <__divmodhi4_neg2>
    27de:	3e f4       	brtc	.+14     	; 0x27ee <__divmodhi4_exit>

000027e0 <__divmodhi4_neg1>:
    27e0:	90 95       	com	r25
    27e2:	81 95       	neg	r24
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	08 95       	ret

000027e8 <__divmodhi4_neg2>:
    27e8:	70 95       	com	r23
    27ea:	61 95       	neg	r22
    27ec:	7f 4f       	sbci	r23, 0xFF	; 255

000027ee <__divmodhi4_exit>:
    27ee:	08 95       	ret

000027f0 <__udivmodhi4>:
    27f0:	aa 1b       	sub	r26, r26
    27f2:	bb 1b       	sub	r27, r27
    27f4:	51 e1       	ldi	r21, 0x11	; 17
    27f6:	07 c0       	rjmp	.+14     	; 0x2806 <__udivmodhi4_ep>

000027f8 <__udivmodhi4_loop>:
    27f8:	aa 1f       	adc	r26, r26
    27fa:	bb 1f       	adc	r27, r27
    27fc:	a6 17       	cp	r26, r22
    27fe:	b7 07       	cpc	r27, r23
    2800:	10 f0       	brcs	.+4      	; 0x2806 <__udivmodhi4_ep>
    2802:	a6 1b       	sub	r26, r22
    2804:	b7 0b       	sbc	r27, r23

00002806 <__udivmodhi4_ep>:
    2806:	88 1f       	adc	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	5a 95       	dec	r21
    280c:	a9 f7       	brne	.-22     	; 0x27f8 <__udivmodhi4_loop>
    280e:	80 95       	com	r24
    2810:	90 95       	com	r25
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	08 95       	ret

00002818 <itoa>:
    2818:	fb 01       	movw	r30, r22
    281a:	9f 01       	movw	r18, r30
    281c:	e8 94       	clt
    281e:	42 30       	cpi	r20, 0x02	; 2
    2820:	c4 f0       	brlt	.+48     	; 0x2852 <itoa+0x3a>
    2822:	45 32       	cpi	r20, 0x25	; 37
    2824:	b4 f4       	brge	.+44     	; 0x2852 <itoa+0x3a>
    2826:	4a 30       	cpi	r20, 0x0A	; 10
    2828:	29 f4       	brne	.+10     	; 0x2834 <itoa+0x1c>
    282a:	97 fb       	bst	r25, 7
    282c:	1e f4       	brtc	.+6      	; 0x2834 <itoa+0x1c>
    282e:	90 95       	com	r25
    2830:	81 95       	neg	r24
    2832:	9f 4f       	sbci	r25, 0xFF	; 255
    2834:	64 2f       	mov	r22, r20
    2836:	77 27       	eor	r23, r23
    2838:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__udivmodhi4>
    283c:	80 5d       	subi	r24, 0xD0	; 208
    283e:	8a 33       	cpi	r24, 0x3A	; 58
    2840:	0c f0       	brlt	.+2      	; 0x2844 <itoa+0x2c>
    2842:	89 5d       	subi	r24, 0xD9	; 217
    2844:	81 93       	st	Z+, r24
    2846:	cb 01       	movw	r24, r22
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	a1 f7       	brne	.-24     	; 0x2834 <itoa+0x1c>
    284c:	16 f4       	brtc	.+4      	; 0x2852 <itoa+0x3a>
    284e:	5d e2       	ldi	r21, 0x2D	; 45
    2850:	51 93       	st	Z+, r21
    2852:	10 82       	st	Z, r1
    2854:	c9 01       	movw	r24, r18
    2856:	0c 94 2d 14 	jmp	0x285a	; 0x285a <strrev>

0000285a <strrev>:
    285a:	dc 01       	movw	r26, r24
    285c:	fc 01       	movw	r30, r24
    285e:	67 2f       	mov	r22, r23
    2860:	71 91       	ld	r23, Z+
    2862:	77 23       	and	r23, r23
    2864:	e1 f7       	brne	.-8      	; 0x285e <strrev+0x4>
    2866:	32 97       	sbiw	r30, 0x02	; 2
    2868:	04 c0       	rjmp	.+8      	; 0x2872 <strrev+0x18>
    286a:	7c 91       	ld	r23, X
    286c:	6d 93       	st	X+, r22
    286e:	70 83       	st	Z, r23
    2870:	62 91       	ld	r22, -Z
    2872:	ae 17       	cp	r26, r30
    2874:	bf 07       	cpc	r27, r31
    2876:	c8 f3       	brcs	.-14     	; 0x286a <strrev+0x10>
    2878:	08 95       	ret

0000287a <_exit>:
    287a:	f8 94       	cli

0000287c <__stop_program>:
    287c:	ff cf       	rjmp	.-2      	; 0x287c <__stop_program>
