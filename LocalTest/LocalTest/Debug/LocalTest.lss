
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002ffe  00003092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  00800118  00800118  000030aa  2**0
                  ALLOC
  3 .stab         000043e0  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001329  00000000  00000000  0000748c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000087b5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c0  00000000  00000000  000087e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e8a  00000000  00000000  00008aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b7a  00000000  00000000  0000b92e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012f8  00000000  00000000  0000c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000924  00000000  00000000  0000d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008c4  00000000  00000000  0000e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000311e  00000000  00000000  0000e988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c8  00000000  00000000  00011aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_3>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_10>
      2c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_11>
      30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_29>
      78:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      7c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      80:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 08       	sbc	r3, r15
     120:	00 00       	nop
     122:	00 be       	out	0x30, r0	; 48
     124:	92 24       	eor	r9, r2
     126:	49 12       	cpse	r4, r25
     128:	3e ab       	std	Y+54, r19	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	cd cc       	rjmp	.-1638   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     130:	cc 4c       	sbci	r28, 0xCC	; 204
     132:	3e 00       	.word	0x003e	; ????
     134:	00 00       	nop
     136:	80 be       	out	0x30, r8	; 48
     138:	ab aa       	std	Y+51, r10	; 0x33
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	3e 00       	.word	0x003e	; ????
     13e:	00 00       	nop
     140:	00 bf       	out	0x30, r16	; 48
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 00       	.word	0x003f	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	08 41       	sbci	r16, 0x18	; 24
     14e:	78 d3       	rcall	.+1776   	; 0x840 <drive_to_puck+0x138>
     150:	bb 43       	sbci	r27, 0x3B	; 59
     152:	87 d1       	rcall	.+782    	; 0x462 <getADC+0xb4>
     154:	13 3d       	cpi	r17, 0xD3	; 211
     156:	19 0e       	add	r1, r25
     158:	3c c3       	rjmp	.+1656   	; 0x7d2 <drive_to_puck+0xca>
     15a:	bd 42       	sbci	r27, 0x2D	; 45
     15c:	82 ad       	ldd	r24, Z+58	; 0x3a
     15e:	2b 3e       	cpi	r18, 0xEB	; 235
     160:	68 ec       	ldi	r22, 0xC8	; 200
     162:	82 76       	andi	r24, 0x62	; 98
     164:	be d9       	rcall	.-3204   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	a9 3e       	cpi	r26, 0xE9	; 233
     16a:	4c 80       	ldd	r4, Y+4	; 0x04
     16c:	ef ff       	.word	0xffef	; ????
     16e:	be 01       	movw	r22, r28
     170:	c4 ff       	sbrs	r28, 4
     172:	7f 3f       	cpi	r23, 0xFF	; 255
     174:	00 00       	nop
     176:	00 00       	nop
	...

00000179 <descriptor_list>:
     179:	00 01 00 00 ad 01 12 00 02 00 00 bf 01 43 00 03     .............C..
     189:	00 00 02 02 04 01 03 09 04 06 02 12 02 03 09 04     ................
     199:	1a 02 06 03 03 09 04 22 02 08                       ......."..

000001a3 <endpoint_config_table>:
     1a3:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001ad <device_descriptor>:
     1ad:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1bd:	03 01                                               ..

000001bf <config1_descriptor>:
     1bf:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1cf:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1df:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1ef:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1ff:	40 00 00                                            @..

00000202 <string0>:
     202:	04 03 09 04                                         ....

00000206 <string1>:
     206:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     216:	65 00 00 00                                         e...

0000021a <string2>:
     21a:	06 03 4d 00 32 00 00 00                             ..M.2...

00000222 <string3>:
     222:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	ee ef       	ldi	r30, 0xFE	; 254
     240:	ff e2       	ldi	r31, 0x2F	; 47
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a8 31       	cpi	r26, 0x18	; 24
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	a8 e1       	ldi	r26, 0x18	; 24
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a4 3f       	cpi	r26, 0xF4	; 244
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <main>
     262:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <_exit>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <chooseInput>:
	int maxval = 0;
	int diff = 0;
	float deg = 0.0;

void chooseInput(int i) {
	switch (i) {
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	91 05       	cpc	r25, r1
     26e:	09 f4       	brne	.+2      	; 0x272 <chooseInput+0x8>
     270:	49 c0       	rjmp	.+146    	; 0x304 <chooseInput+0x9a>
     272:	3c f4       	brge	.+14     	; 0x282 <chooseInput+0x18>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	91 05       	cpc	r25, r1
     278:	19 f1       	breq	.+70     	; 0x2c0 <chooseInput+0x56>
     27a:	9c f5       	brge	.+102    	; 0x2e2 <chooseInput+0x78>
     27c:	89 2b       	or	r24, r25
     27e:	79 f0       	breq	.+30     	; 0x29e <chooseInput+0x34>
     280:	08 95       	ret
     282:	85 30       	cpi	r24, 0x05	; 5
     284:	91 05       	cpc	r25, r1
     286:	09 f4       	brne	.+2      	; 0x28a <chooseInput+0x20>
     288:	5f c0       	rjmp	.+190    	; 0x348 <chooseInput+0xde>
     28a:	0c f4       	brge	.+2      	; 0x28e <chooseInput+0x24>
     28c:	4c c0       	rjmp	.+152    	; 0x326 <chooseInput+0xbc>
     28e:	86 30       	cpi	r24, 0x06	; 6
     290:	91 05       	cpc	r25, r1
     292:	09 f4       	brne	.+2      	; 0x296 <chooseInput+0x2c>
     294:	6a c0       	rjmp	.+212    	; 0x36a <chooseInput+0x100>
     296:	07 97       	sbiw	r24, 0x07	; 7
     298:	09 f0       	breq	.+2      	; 0x29c <chooseInput+0x32>
     29a:	88 c0       	rjmp	.+272    	; 0x3ac <chooseInput+0x142>
     29c:	77 c0       	rjmp	.+238    	; 0x38c <chooseInput+0x122>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F0)
     29e:	eb e7       	ldi	r30, 0x7B	; 123
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8f 7d       	andi	r24, 0xDF	; 223
     2a6:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2a8:	ec e7       	ldi	r30, 0x7C	; 124
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	8b 7f       	andi	r24, 0xFB	; 251
     2b0:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2b2:	80 81       	ld	r24, Z
     2b4:	8d 7f       	andi	r24, 0xFD	; 253
     2b6:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2b8:	80 81       	ld	r24, Z
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	80 83       	st	Z, r24

		break;
     2be:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F1)
     2c0:	eb e7       	ldi	r30, 0x7B	; 123
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     2ca:	ec e7       	ldi	r30, 0x7C	; 124
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8b 7f       	andi	r24, 0xFB	; 251
     2d2:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2d4:	80 81       	ld	r24, Z
     2d6:	8d 7f       	andi	r24, 0xFD	; 253
     2d8:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     2da:	80 81       	ld	r24, Z
     2dc:	81 60       	ori	r24, 0x01	; 1
     2de:	80 83       	st	Z, r24

		break;
     2e0:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
     2e2:	eb e7       	ldi	r30, 0x7B	; 123
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8f 7d       	andi	r24, 0xDF	; 223
     2ea:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     2ec:	ec e7       	ldi	r30, 0x7C	; 124
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	84 60       	ori	r24, 0x04	; 4
     2f4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     2f6:	80 81       	ld	r24, Z
     2f8:	8d 7f       	andi	r24, 0xFD	; 253
     2fa:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     2fc:	80 81       	ld	r24, Z
     2fe:	8e 7f       	andi	r24, 0xFE	; 254
     300:	80 83       	st	Z, r24

		break;
     302:	08 95       	ret
		case 3:

		clear(ADCSRB, MUX5);//Set analog input (F5)
     304:	eb e7       	ldi	r30, 0x7B	; 123
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8f 7d       	andi	r24, 0xDF	; 223
     30c:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     30e:	ec e7       	ldi	r30, 0x7C	; 124
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	84 60       	ori	r24, 0x04	; 4
     316:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     318:	80 81       	ld	r24, Z
     31a:	8d 7f       	andi	r24, 0xFD	; 253
     31c:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
		break;
     324:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F6)
     326:	eb e7       	ldi	r30, 0x7B	; 123
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
     330:	ec e7       	ldi	r30, 0x7C	; 124
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	84 60       	ori	r24, 0x04	; 4
     338:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
     33a:	80 81       	ld	r24, Z
     33c:	82 60       	ori	r24, 0x02	; 2
     33e:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     340:	80 81       	ld	r24, Z
     342:	8e 7f       	andi	r24, 0xFE	; 254
     344:	80 83       	st	Z, r24
		break;
     346:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
     348:	eb e7       	ldi	r30, 0x7B	; 123
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     352:	ec e7       	ldi	r30, 0x7C	; 124
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8b 7f       	andi	r24, 0xFB	; 251
     35a:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     35c:	80 81       	ld	r24, Z
     35e:	8d 7f       	andi	r24, 0xFD	; 253
     360:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
     362:	80 81       	ld	r24, Z
     364:	8e 7f       	andi	r24, 0xFE	; 254
     366:	80 83       	st	Z, r24
		break;
     368:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
     36a:	eb e7       	ldi	r30, 0x7B	; 123
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	80 62       	ori	r24, 0x20	; 32
     372:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
     374:	ec e7       	ldi	r30, 0x7C	; 124
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8b 7f       	andi	r24, 0xFB	; 251
     37c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
     37e:	80 81       	ld	r24, Z
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
     384:	80 81       	ld	r24, Z
     386:	81 60       	ori	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
		break;
     38a:	08 95       	ret
		case 7:
		clear(ADCSRB, MUX5);//Set analog input (F7)
     38c:	eb e7       	ldi	r30, 0x7B	; 123
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	8f 7d       	andi	r24, 0xDF	; 223
     394:	80 83       	st	Z, r24
		set(ADMUX, MUX2);
     396:	ec e7       	ldi	r30, 0x7C	; 124
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
		set(ADMUX, MUX1);
     3a0:	80 81       	ld	r24, Z
     3a2:	82 60       	ori	r24, 0x02	; 2
     3a4:	80 83       	st	Z, r24
		set(ADMUX, MUX0);
     3a6:	80 81       	ld	r24, Z
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	80 83       	st	Z, r24
     3ac:	08 95       	ret

000003ae <getADC>:
int ADC6 = 0;
int ADC7 = 0;
int conversion = 0;

void getADC() {
	if (conversion) {
     3ae:	80 91 2a 01 	lds	r24, 0x012A
     3b2:	90 91 2b 01 	lds	r25, 0x012B
     3b6:	89 2b       	or	r24, r25
     3b8:	09 f4       	brne	.+2      	; 0x3bc <getADC+0xe>
     3ba:	9c c0       	rjmp	.+312    	; 0x4f4 <getADC+0x146>
		switch (flag) {
     3bc:	80 91 56 01 	lds	r24, 0x0156
     3c0:	90 91 57 01 	lds	r25, 0x0157
     3c4:	83 30       	cpi	r24, 0x03	; 3
     3c6:	91 05       	cpc	r25, r1
     3c8:	71 f1       	breq	.+92     	; 0x426 <getADC+0x78>
     3ca:	3c f4       	brge	.+14     	; 0x3da <getADC+0x2c>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	91 05       	cpc	r25, r1
     3d0:	c1 f0       	breq	.+48     	; 0x402 <getADC+0x54>
     3d2:	04 f5       	brge	.+64     	; 0x414 <getADC+0x66>
     3d4:	89 2b       	or	r24, r25
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <getADC+0x42>
     3d8:	52 c0       	rjmp	.+164    	; 0x47e <getADC+0xd0>
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	91 05       	cpc	r25, r1
     3de:	a9 f1       	breq	.+106    	; 0x44a <getADC+0x9c>
     3e0:	5c f1       	brlt	.+86     	; 0x438 <getADC+0x8a>
     3e2:	86 30       	cpi	r24, 0x06	; 6
     3e4:	91 05       	cpc	r25, r1
     3e6:	d1 f1       	breq	.+116    	; 0x45c <getADC+0xae>
     3e8:	07 97       	sbiw	r24, 0x07	; 7
     3ea:	09 f0       	breq	.+2      	; 0x3ee <getADC+0x40>
     3ec:	48 c0       	rjmp	.+144    	; 0x47e <getADC+0xd0>
     3ee:	3f c0       	rjmp	.+126    	; 0x46e <getADC+0xc0>
			case 0:
			ADC0 = ADC;
     3f0:	80 91 78 00 	lds	r24, 0x0078
     3f4:	90 91 79 00 	lds	r25, 0x0079
     3f8:	90 93 3b 01 	sts	0x013B, r25
     3fc:	80 93 3a 01 	sts	0x013A, r24
			break;
     400:	3e c0       	rjmp	.+124    	; 0x47e <getADC+0xd0>
			case 1:
			ADC1 = ADC;
     402:	80 91 78 00 	lds	r24, 0x0078
     406:	90 91 79 00 	lds	r25, 0x0079
     40a:	90 93 39 01 	sts	0x0139, r25
     40e:	80 93 38 01 	sts	0x0138, r24
			break;
     412:	35 c0       	rjmp	.+106    	; 0x47e <getADC+0xd0>
			case 2:
			ADC2 = ADC;
     414:	80 91 78 00 	lds	r24, 0x0078
     418:	90 91 79 00 	lds	r25, 0x0079
     41c:	90 93 37 01 	sts	0x0137, r25
     420:	80 93 36 01 	sts	0x0136, r24
			break;
     424:	2c c0       	rjmp	.+88     	; 0x47e <getADC+0xd0>
			case 3:
			ADC3 = ADC;
     426:	80 91 78 00 	lds	r24, 0x0078
     42a:	90 91 79 00 	lds	r25, 0x0079
     42e:	90 93 35 01 	sts	0x0135, r25
     432:	80 93 34 01 	sts	0x0134, r24
			break;
     436:	23 c0       	rjmp	.+70     	; 0x47e <getADC+0xd0>
			case 4:
			ADC4 = ADC;
     438:	80 91 78 00 	lds	r24, 0x0078
     43c:	90 91 79 00 	lds	r25, 0x0079
     440:	90 93 33 01 	sts	0x0133, r25
     444:	80 93 32 01 	sts	0x0132, r24
			break;
     448:	1a c0       	rjmp	.+52     	; 0x47e <getADC+0xd0>
			case 5:
			ADC5 = ADC;
     44a:	80 91 78 00 	lds	r24, 0x0078
     44e:	90 91 79 00 	lds	r25, 0x0079
     452:	90 93 31 01 	sts	0x0131, r25
     456:	80 93 30 01 	sts	0x0130, r24
			break;
     45a:	11 c0       	rjmp	.+34     	; 0x47e <getADC+0xd0>
			case 6:
			ADC6 = ADC;
     45c:	80 91 78 00 	lds	r24, 0x0078
     460:	90 91 79 00 	lds	r25, 0x0079
     464:	90 93 2f 01 	sts	0x012F, r25
     468:	80 93 2e 01 	sts	0x012E, r24
			break;
     46c:	08 c0       	rjmp	.+16     	; 0x47e <getADC+0xd0>
			case 7:
			ADC7 = ADC;
     46e:	80 91 78 00 	lds	r24, 0x0078
     472:	90 91 79 00 	lds	r25, 0x0079
     476:	90 93 2d 01 	sts	0x012D, r25
     47a:	80 93 2c 01 	sts	0x012C, r24
			break;
		}
			clear(ADCSRA, ADEN);	//Enable/Start conversion
     47e:	ea e7       	ldi	r30, 0x7A	; 122
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	8f 77       	andi	r24, 0x7F	; 127
     486:	80 83       	st	Z, r24
			clear(ADCSRA, ADSC);	//^
     488:	80 81       	ld	r24, Z
     48a:	8f 7b       	andi	r24, 0xBF	; 191
     48c:	80 83       	st	Z, r24
			clear(ADCSRA, ADATE);
     48e:	80 81       	ld	r24, Z
     490:	8f 7d       	andi	r24, 0xDF	; 223
     492:	80 83       	st	Z, r24
			clear(ADCSRA, ADIF);
     494:	80 81       	ld	r24, Z
     496:	8f 7e       	andi	r24, 0xEF	; 239
     498:	80 83       	st	Z, r24
			if (flag >= 0 && flag < 8) {
     49a:	80 91 56 01 	lds	r24, 0x0156
     49e:	90 91 57 01 	lds	r25, 0x0157
     4a2:	88 30       	cpi	r24, 0x08	; 8
     4a4:	91 05       	cpc	r25, r1
     4a6:	a0 f4       	brcc	.+40     	; 0x4d0 <getADC+0x122>
				flag = (flag + 1) % 8;
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	9c 01       	movw	r18, r24
     4ac:	27 70       	andi	r18, 0x07	; 7
     4ae:	30 78       	andi	r19, 0x80	; 128
     4b0:	33 23       	and	r19, r19
     4b2:	34 f4       	brge	.+12     	; 0x4c0 <getADC+0x112>
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	31 09       	sbc	r19, r1
     4b8:	28 6f       	ori	r18, 0xF8	; 248
     4ba:	3f 6f       	ori	r19, 0xFF	; 255
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	20 93 56 01 	sts	0x0156, r18
     4c4:	30 93 57 01 	sts	0x0157, r19
				chooseInput(flag);
     4c8:	82 2f       	mov	r24, r18
     4ca:	93 2f       	mov	r25, r19
     4cc:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
			}
			set(ADCSRA, ADATE);	//Set trigger to free-running mode
     4d0:	ea e7       	ldi	r30, 0x7A	; 122
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	80 83       	st	Z, r24
			set(ADCSRA, ADEN);	//Enable/Start conversion
     4da:	80 81       	ld	r24, Z
     4dc:	80 68       	ori	r24, 0x80	; 128
     4de:	80 83       	st	Z, r24
			set(ADCSRA, ADSC);	//^
     4e0:	80 81       	ld	r24, Z
     4e2:	80 64       	ori	r24, 0x40	; 64
     4e4:	80 83       	st	Z, r24
			
			set(ADCSRA, ADIF);	//Enable reading results
     4e6:	80 81       	ld	r24, Z
     4e8:	80 61       	ori	r24, 0x10	; 16
     4ea:	80 83       	st	Z, r24
			conversion = 0;
     4ec:	10 92 2b 01 	sts	0x012B, r1
     4f0:	10 92 2a 01 	sts	0x012A, r1
	}

	ADCarr[0] = ADC0;
     4f4:	80 91 3a 01 	lds	r24, 0x013A
     4f8:	90 91 3b 01 	lds	r25, 0x013B
     4fc:	90 93 47 01 	sts	0x0147, r25
     500:	80 93 46 01 	sts	0x0146, r24
	ADCarr[1] = ADC1;
     504:	80 91 38 01 	lds	r24, 0x0138
     508:	90 91 39 01 	lds	r25, 0x0139
     50c:	90 93 49 01 	sts	0x0149, r25
     510:	80 93 48 01 	sts	0x0148, r24
	ADCarr[2] = ADC2;
     514:	80 91 36 01 	lds	r24, 0x0136
     518:	90 91 37 01 	lds	r25, 0x0137
     51c:	90 93 4b 01 	sts	0x014B, r25
     520:	80 93 4a 01 	sts	0x014A, r24
	ADCarr[3] = ADC3;
     524:	80 91 34 01 	lds	r24, 0x0134
     528:	90 91 35 01 	lds	r25, 0x0135
     52c:	90 93 4d 01 	sts	0x014D, r25
     530:	80 93 4c 01 	sts	0x014C, r24
	ADCarr[4] = ADC4;
     534:	80 91 32 01 	lds	r24, 0x0132
     538:	90 91 33 01 	lds	r25, 0x0133
     53c:	90 93 4f 01 	sts	0x014F, r25
     540:	80 93 4e 01 	sts	0x014E, r24
	ADCarr[5] = ADC5;
     544:	80 91 30 01 	lds	r24, 0x0130
     548:	90 91 31 01 	lds	r25, 0x0131
     54c:	90 93 51 01 	sts	0x0151, r25
     550:	80 93 50 01 	sts	0x0150, r24
	ADCarr[6] = ADC6;
     554:	80 91 2e 01 	lds	r24, 0x012E
     558:	90 91 2f 01 	lds	r25, 0x012F
     55c:	90 93 53 01 	sts	0x0153, r25
     560:	80 93 52 01 	sts	0x0152, r24
	ADCarr[7] = ADC7;
     564:	80 91 2c 01 	lds	r24, 0x012C
     568:	90 91 2d 01 	lds	r25, 0x012D
     56c:	90 93 55 01 	sts	0x0155, r25
     570:	80 93 54 01 	sts	0x0154, r24
     574:	08 95       	ret

00000576 <rotate>:
		m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
		//}
}

void rotate(int dir, float speed) {
	OCR1B = OCR1A;
     576:	20 91 88 00 	lds	r18, 0x0088
     57a:	30 91 89 00 	lds	r19, 0x0089
     57e:	30 93 8b 00 	sts	0x008B, r19
     582:	20 93 8a 00 	sts	0x008A, r18
	OCR3A = ICR3;
     586:	20 91 96 00 	lds	r18, 0x0096
     58a:	30 91 97 00 	lds	r19, 0x0097
     58e:	30 93 99 00 	sts	0x0099, r19
     592:	20 93 98 00 	sts	0x0098, r18
	if (dir == RIGHT) {
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	19 f4       	brne	.+6      	; 0x5a0 <rotate+0x2a>
		set(PORTB,2);
     59a:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     59c:	2b 98       	cbi	0x05, 3	; 5
     59e:	08 95       	ret
	}
	else if (dir == LEFT) {
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <rotate+0x32>
		clear(PORTB,2);
     5a4:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     5a6:	2b 9a       	sbi	0x05, 3	; 5
     5a8:	08 95       	ret

000005aa <turn>:
	}
}

void turn(int dir,float speed, float degree) {
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	6a 01       	movw	r12, r20
     5c6:	7b 01       	movw	r14, r22
     5c8:	48 01       	movw	r8, r16
     5ca:	59 01       	movw	r10, r18
	set(PORTB,2);
     5cc:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     5ce:	2b 9a       	sbi	0x05, 3	; 5
	if(iHaveThePuck && degree < 0.27) {
     5d0:	80 91 5b 01 	lds	r24, 0x015B
     5d4:	88 23       	and	r24, r24
     5d6:	a1 f0       	breq	.+40     	; 0x600 <turn+0x56>
     5d8:	21 e7       	ldi	r18, 0x71	; 113
     5da:	3d e3       	ldi	r19, 0x3D	; 61
     5dc:	4a e8       	ldi	r20, 0x8A	; 138
     5de:	5e e3       	ldi	r21, 0x3E	; 62
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 36 14 	call	0x286c	; 0x286c <__cmpsf2>
     5e8:	88 23       	and	r24, r24
     5ea:	54 f4       	brge	.+20     	; 0x600 <turn+0x56>
		degree = 0.27;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f1 e7       	ldi	r31, 0x71	; 113
     5f0:	8f 2e       	mov	r8, r31
     5f2:	fd e3       	ldi	r31, 0x3D	; 61
     5f4:	9f 2e       	mov	r9, r31
     5f6:	fa e8       	ldi	r31, 0x8A	; 138
     5f8:	af 2e       	mov	r10, r31
     5fa:	fe e3       	ldi	r31, 0x3E	; 62
     5fc:	bf 2e       	mov	r11, r31
     5fe:	f0 2d       	mov	r31, r0
	}
	if (dir == LEFT) {
     600:	c1 30       	cpi	r28, 0x01	; 1
     602:	d1 05       	cpc	r29, r1
     604:	81 f5       	brne	.+96     	; 0x666 <turn+0xbc>
		OCR3A = (unsigned int) ((float)ICR3 * speed);
     606:	60 91 96 00 	lds	r22, 0x0096
     60a:	70 91 97 00 	lds	r23, 0x0097
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
     616:	a7 01       	movw	r20, r14
     618:	96 01       	movw	r18, r12
     61a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     61e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__fixunssfsi>
     622:	70 93 99 00 	sts	0x0099, r23
     626:	60 93 98 00 	sts	0x0098, r22
		OCR1B = (unsigned int) (degree * speed * OCR1A);
     62a:	c0 91 88 00 	lds	r28, 0x0088
     62e:	d0 91 89 00 	lds	r29, 0x0089
     632:	a7 01       	movw	r20, r14
     634:	96 01       	movw	r18, r12
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
     642:	be 01       	movw	r22, r28
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
     64c:	9b 01       	movw	r18, r22
     64e:	ac 01       	movw	r20, r24
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     658:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__fixunssfsi>
     65c:	70 93 8b 00 	sts	0x008B, r23
     660:	60 93 8a 00 	sts	0x008A, r22
     664:	31 c0       	rjmp	.+98     	; 0x6c8 <turn+0x11e>
	}
	
		if (dir == RIGHT) {
     666:	cd 2b       	or	r28, r29
     668:	79 f5       	brne	.+94     	; 0x6c8 <turn+0x11e>
			OCR3A = (unsigned int) (degree * speed * ICR3);
     66a:	c0 91 96 00 	lds	r28, 0x0096
     66e:	d0 91 97 00 	lds	r29, 0x0097
     672:	a7 01       	movw	r20, r14
     674:	96 01       	movw	r18, r12
     676:	c5 01       	movw	r24, r10
     678:	b4 01       	movw	r22, r8
     67a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     67e:	4b 01       	movw	r8, r22
     680:	5c 01       	movw	r10, r24
     682:	be 01       	movw	r22, r28
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
     68c:	9b 01       	movw	r18, r22
     68e:	ac 01       	movw	r20, r24
     690:	c5 01       	movw	r24, r10
     692:	b4 01       	movw	r22, r8
     694:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     698:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__fixunssfsi>
     69c:	70 93 99 00 	sts	0x0099, r23
     6a0:	60 93 98 00 	sts	0x0098, r22
			OCR1B = (unsigned int) ((float) OCR1A * speed);
     6a4:	60 91 88 00 	lds	r22, 0x0088
     6a8:	70 91 89 00 	lds	r23, 0x0089
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
     6b4:	a7 01       	movw	r20, r14
     6b6:	96 01       	movw	r18, r12
     6b8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     6bc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__fixunssfsi>
     6c0:	70 93 8b 00 	sts	0x008B, r23
     6c4:	60 93 8a 00 	sts	0x008A, r22
		}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	9f 90       	pop	r9
     6de:	8f 90       	pop	r8
     6e0:	08 95       	ret

000006e2 <reverse>:

void reverse(){
	OCR1B = OCR1A;
     6e2:	80 91 88 00 	lds	r24, 0x0088
     6e6:	90 91 89 00 	lds	r25, 0x0089
     6ea:	90 93 8b 00 	sts	0x008B, r25
     6ee:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = ICR3;
     6f2:	80 91 96 00 	lds	r24, 0x0096
     6f6:	90 91 97 00 	lds	r25, 0x0097
     6fa:	90 93 99 00 	sts	0x0099, r25
     6fe:	80 93 98 00 	sts	0x0098, r24
	clear(PORTB,2);
     702:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     704:	2b 98       	cbi	0x05, 3	; 5
     706:	08 95       	ret

00000708 <drive_to_puck>:

void findPuck() {
	//TODO: Implement code
}

void drive_to_puck() {
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
		getADC();
     70c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	e6 e4       	ldi	r30, 0x46	; 70
     716:	f1 e0       	ldi	r31, 0x01	; 1
		index = 0;
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
			if (ADCarr[i] > maxval) {
     720:	21 91       	ld	r18, Z+
     722:	31 91       	ld	r19, Z+
     724:	42 17       	cp	r20, r18
     726:	53 07       	cpc	r21, r19
     728:	14 f4       	brge	.+4      	; 0x72e <drive_to_puck+0x26>
				index = i;
     72a:	bc 01       	movw	r22, r24
				maxval = ADCarr[i];
     72c:	a9 01       	movw	r20, r18

void drive_to_puck() {
		getADC();
		index = 0;
		maxval = 0;
		for(int i = 0; i < 7; i++) {
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	87 30       	cpi	r24, 0x07	; 7
     732:	91 05       	cpc	r25, r1
     734:	a9 f7       	brne	.-22     	; 0x720 <drive_to_puck+0x18>
     736:	50 93 43 01 	sts	0x0143, r21
     73a:	40 93 42 01 	sts	0x0142, r20
     73e:	60 93 44 01 	sts	0x0144, r22
     742:	70 93 45 01 	sts	0x0145, r23
			if (ADCarr[i] > maxval) {
				index = i;
				maxval = ADCarr[i];
			}
		}
		switch (index) {
     746:	63 30       	cpi	r22, 0x03	; 3
     748:	71 05       	cpc	r23, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <drive_to_puck+0x46>
     74c:	b0 c0       	rjmp	.+352    	; 0x8ae <drive_to_puck+0x1a6>
     74e:	4c f4       	brge	.+18     	; 0x762 <drive_to_puck+0x5a>
     750:	61 30       	cpi	r22, 0x01	; 1
     752:	71 05       	cpc	r23, r1
     754:	09 f4       	brne	.+2      	; 0x758 <drive_to_puck+0x50>
     756:	64 c0       	rjmp	.+200    	; 0x820 <drive_to_puck+0x118>
     758:	0c f0       	brlt	.+2      	; 0x75c <drive_to_puck+0x54>
     75a:	86 c0       	rjmp	.+268    	; 0x868 <drive_to_puck+0x160>
     75c:	67 2b       	or	r22, r23
     75e:	61 f0       	breq	.+24     	; 0x778 <drive_to_puck+0x70>
     760:	5c c1       	rjmp	.+696    	; 0xa1a <drive_to_puck+0x312>
     762:	65 30       	cpi	r22, 0x05	; 5
     764:	71 05       	cpc	r23, r1
     766:	09 f4       	brne	.+2      	; 0x76a <drive_to_puck+0x62>
     768:	e2 c0       	rjmp	.+452    	; 0x92e <drive_to_puck+0x226>
     76a:	0c f4       	brge	.+2      	; 0x76e <drive_to_puck+0x66>
     76c:	bd c0       	rjmp	.+378    	; 0x8e8 <drive_to_puck+0x1e0>
     76e:	66 30       	cpi	r22, 0x06	; 6
     770:	71 05       	cpc	r23, r1
     772:	09 f0       	breq	.+2      	; 0x776 <drive_to_puck+0x6e>
     774:	52 c1       	rjmp	.+676    	; 0xa1a <drive_to_puck+0x312>
     776:	ff c0       	rjmp	.+510    	; 0x976 <drive_to_puck+0x26e>
			case 0: 
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     778:	00 91 46 01 	lds	r16, 0x0146
     77c:	10 91 47 01 	lds	r17, 0x0147
     780:	b8 01       	movw	r22, r16
     782:	88 27       	eor	r24, r24
     784:	77 fd       	sbrc	r23, 7
     786:	80 95       	com	r24
     788:	98 2f       	mov	r25, r24
     78a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     78e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <log>
     792:	90 58       	subi	r25, 0x80	; 128
     794:	2e ea       	ldi	r18, 0xAE	; 174
     796:	37 e4       	ldi	r19, 0x47	; 71
     798:	43 eb       	ldi	r20, 0xB3	; 179
     79a:	52 e4       	ldi	r21, 0x42	; 66
     79c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     7a0:	2f e1       	ldi	r18, 0x1F	; 31
     7a2:	35 e2       	ldi	r19, 0x25	; 37
     7a4:	46 e2       	ldi	r20, 0x26	; 38
     7a6:	54 e4       	ldi	r21, 0x44	; 68
     7a8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
     7ac:	60 93 be 01 	sts	0x01BE, r22
     7b0:	70 93 bf 01 	sts	0x01BF, r23
     7b4:	80 93 c0 01 	sts	0x01C0, r24
     7b8:	90 93 c1 01 	sts	0x01C1, r25
				diff = ADCarr[0] - ADCarr[6];
     7bc:	80 91 52 01 	lds	r24, 0x0152
     7c0:	90 91 53 01 	lds	r25, 0x0153
     7c4:	b8 01       	movw	r22, r16
     7c6:	68 1b       	sub	r22, r24
     7c8:	79 0b       	sbc	r23, r25
     7ca:	70 93 41 01 	sts	0x0141, r23
     7ce:	60 93 40 01 	sts	0x0140, r22
				deg = exp(-1.0*(fabs((float)diff))/40.0);
     7d2:	88 27       	eor	r24, r24
     7d4:	77 fd       	sbrc	r23, 7
     7d6:	80 95       	com	r24
     7d8:	98 2f       	mov	r25, r24
     7da:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	bf 77       	andi	r27, 0x7F	; 127
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	90 58       	subi	r25, 0x80	; 128
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e2       	ldi	r20, 0x20	; 32
     7f0:	52 e4       	ldi	r21, 0x42	; 66
     7f2:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
     7f6:	0e 94 aa 14 	call	0x2954	; 0x2954 <exp>
     7fa:	8b 01       	movw	r16, r22
     7fc:	9c 01       	movw	r18, r24
     7fe:	60 93 3c 01 	sts	0x013C, r22
     802:	70 93 3d 01 	sts	0x013D, r23
     806:	80 93 3e 01 	sts	0x013E, r24
     80a:	90 93 3f 01 	sts	0x013F, r25
				turn(RIGHT,1.0,deg);
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	60 e8       	ldi	r22, 0x80	; 128
     814:	7f e3       	ldi	r23, 0x3F	; 63
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
				//m_green(ON);
				//m_red(OFF);
				break;
     81e:	fd c0       	rjmp	.+506    	; 0xa1a <drive_to_puck+0x312>
			case 1:
				if (ADCarr[1] > 800 && ADCarr[2] > 800) {
     820:	80 91 48 01 	lds	r24, 0x0148
     824:	90 91 49 01 	lds	r25, 0x0149
     828:	81 32       	cpi	r24, 0x21	; 33
     82a:	93 40       	sbci	r25, 0x03	; 3
     82c:	84 f0       	brlt	.+32     	; 0x84e <drive_to_puck+0x146>
     82e:	80 91 4a 01 	lds	r24, 0x014A
     832:	90 91 4b 01 	lds	r25, 0x014B
     836:	81 32       	cpi	r24, 0x21	; 33
     838:	93 40       	sbci	r25, 0x03	; 3
     83a:	4c f0       	brlt	.+18     	; 0x84e <drive_to_puck+0x146>
					rotate(LEFT,1);
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e8       	ldi	r22, 0x80	; 128
     842:	7f e3       	ldi	r23, 0x3F	; 63
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     84c:	e6 c0       	rjmp	.+460    	; 0xa1a <drive_to_puck+0x312>
				}else {
				turn(RIGHT,1.0,0.05);
     84e:	0d ec       	ldi	r16, 0xCD	; 205
     850:	1c ec       	ldi	r17, 0xCC	; 204
     852:	2c e4       	ldi	r18, 0x4C	; 76
     854:	3d e3       	ldi	r19, 0x3D	; 61
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	60 e8       	ldi	r22, 0x80	; 128
     85c:	7f e3       	ldi	r23, 0x3F	; 63
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     866:	d9 c0       	rjmp	.+434    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 2:
				if (ADCarr[1] > 800 && ADCarr[2] > 800) {
     868:	80 91 48 01 	lds	r24, 0x0148
     86c:	90 91 49 01 	lds	r25, 0x0149
     870:	81 32       	cpi	r24, 0x21	; 33
     872:	93 40       	sbci	r25, 0x03	; 3
     874:	84 f0       	brlt	.+32     	; 0x896 <drive_to_puck+0x18e>
     876:	80 91 4a 01 	lds	r24, 0x014A
     87a:	90 91 4b 01 	lds	r25, 0x014B
     87e:	81 32       	cpi	r24, 0x21	; 33
     880:	93 40       	sbci	r25, 0x03	; 3
     882:	4c f0       	brlt	.+18     	; 0x896 <drive_to_puck+0x18e>
					rotate(LEFT,1);
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e8       	ldi	r22, 0x80	; 128
     88a:	7f e3       	ldi	r23, 0x3F	; 63
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     894:	c2 c0       	rjmp	.+388    	; 0xa1a <drive_to_puck+0x312>
				}else {
					turn(RIGHT,1.0,0);
     896:	00 e0       	ldi	r16, 0x00	; 0
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	98 01       	movw	r18, r16
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e8       	ldi	r22, 0x80	; 128
     8a2:	7f e3       	ldi	r23, 0x3F	; 63
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     8ac:	b6 c0       	rjmp	.+364    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 3:
				if (ADCarr[2] > ADCarr[4]) {
     8ae:	20 91 4a 01 	lds	r18, 0x014A
     8b2:	30 91 4b 01 	lds	r19, 0x014B
     8b6:	80 91 4e 01 	lds	r24, 0x014E
     8ba:	90 91 4f 01 	lds	r25, 0x014F
     8be:	82 17       	cp	r24, r18
     8c0:	93 07       	cpc	r25, r19
     8c2:	4c f4       	brge	.+18     	; 0x8d6 <drive_to_puck+0x1ce>
					rotate(RIGHT, 1);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e8       	ldi	r22, 0x80	; 128
     8ca:	7f e3       	ldi	r23, 0x3F	; 63
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     8d4:	a2 c0       	rjmp	.+324    	; 0xa1a <drive_to_puck+0x312>
				}
				else {
					rotate(LEFT, 1);
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	60 e8       	ldi	r22, 0x80	; 128
     8dc:	7f e3       	ldi	r23, 0x3F	; 63
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     8e6:	99 c0       	rjmp	.+306    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 4:
				if (ADCarr[4] > 800 && ADCarr[5] > 800) {
     8e8:	80 91 4e 01 	lds	r24, 0x014E
     8ec:	90 91 4f 01 	lds	r25, 0x014F
     8f0:	81 32       	cpi	r24, 0x21	; 33
     8f2:	93 40       	sbci	r25, 0x03	; 3
     8f4:	84 f0       	brlt	.+32     	; 0x916 <drive_to_puck+0x20e>
     8f6:	80 91 50 01 	lds	r24, 0x0150
     8fa:	90 91 51 01 	lds	r25, 0x0151
     8fe:	81 32       	cpi	r24, 0x21	; 33
     900:	93 40       	sbci	r25, 0x03	; 3
     902:	4c f0       	brlt	.+18     	; 0x916 <drive_to_puck+0x20e>
					rotate(LEFT,1);
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	60 e8       	ldi	r22, 0x80	; 128
     90a:	7f e3       	ldi	r23, 0x3F	; 63
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     914:	82 c0       	rjmp	.+260    	; 0xa1a <drive_to_puck+0x312>
				}
				else {
					turn(LEFT,1.0,0);
     916:	00 e0       	ldi	r16, 0x00	; 0
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	98 01       	movw	r18, r16
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e8       	ldi	r22, 0x80	; 128
     922:	7f e3       	ldi	r23, 0x3F	; 63
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     92c:	76 c0       	rjmp	.+236    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 5:
				if (ADCarr[4] > 800 && ADCarr[5] > 800) {
     92e:	80 91 4e 01 	lds	r24, 0x014E
     932:	90 91 4f 01 	lds	r25, 0x014F
     936:	81 32       	cpi	r24, 0x21	; 33
     938:	93 40       	sbci	r25, 0x03	; 3
     93a:	84 f0       	brlt	.+32     	; 0x95c <drive_to_puck+0x254>
     93c:	80 91 50 01 	lds	r24, 0x0150
     940:	90 91 51 01 	lds	r25, 0x0151
     944:	81 32       	cpi	r24, 0x21	; 33
     946:	93 40       	sbci	r25, 0x03	; 3
     948:	4c f0       	brlt	.+18     	; 0x95c <drive_to_puck+0x254>
					rotate(LEFT,1);
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e8       	ldi	r22, 0x80	; 128
     950:	7f e3       	ldi	r23, 0x3F	; 63
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 bb 02 	call	0x576	; 0x576 <rotate>
     95a:	5f c0       	rjmp	.+190    	; 0xa1a <drive_to_puck+0x312>
				}else {
					turn(LEFT,1.0,0.15);
     95c:	0a e9       	ldi	r16, 0x9A	; 154
     95e:	19 e9       	ldi	r17, 0x99	; 153
     960:	29 e1       	ldi	r18, 0x19	; 25
     962:	3e e3       	ldi	r19, 0x3E	; 62
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	60 e8       	ldi	r22, 0x80	; 128
     96a:	7f e3       	ldi	r23, 0x3F	; 63
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <drive_to_puck+0x312>
				}
				break;
			case 6:
				puckdistance = (log(((double) ADCarr[0])) * -1.0 * 89.64) + 664.58;
     976:	00 91 46 01 	lds	r16, 0x0146
     97a:	10 91 47 01 	lds	r17, 0x0147
     97e:	b8 01       	movw	r22, r16
     980:	88 27       	eor	r24, r24
     982:	77 fd       	sbrc	r23, 7
     984:	80 95       	com	r24
     986:	98 2f       	mov	r25, r24
     988:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     98c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <log>
     990:	90 58       	subi	r25, 0x80	; 128
     992:	2e ea       	ldi	r18, 0xAE	; 174
     994:	37 e4       	ldi	r19, 0x47	; 71
     996:	43 eb       	ldi	r20, 0xB3	; 179
     998:	52 e4       	ldi	r21, 0x42	; 66
     99a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     99e:	2f e1       	ldi	r18, 0x1F	; 31
     9a0:	35 e2       	ldi	r19, 0x25	; 37
     9a2:	46 e2       	ldi	r20, 0x26	; 38
     9a4:	54 e4       	ldi	r21, 0x44	; 68
     9a6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
     9aa:	60 93 be 01 	sts	0x01BE, r22
     9ae:	70 93 bf 01 	sts	0x01BF, r23
     9b2:	80 93 c0 01 	sts	0x01C0, r24
     9b6:	90 93 c1 01 	sts	0x01C1, r25
				diff = ADCarr[6] - ADCarr[0];
     9ba:	60 91 52 01 	lds	r22, 0x0152
     9be:	70 91 53 01 	lds	r23, 0x0153
     9c2:	60 1b       	sub	r22, r16
     9c4:	71 0b       	sbc	r23, r17
     9c6:	70 93 41 01 	sts	0x0141, r23
     9ca:	60 93 40 01 	sts	0x0140, r22
				deg = exp(-1.0*(fabs((float)diff))/70.0);
     9ce:	88 27       	eor	r24, r24
     9d0:	77 fd       	sbrc	r23, 7
     9d2:	80 95       	com	r24
     9d4:	98 2f       	mov	r25, r24
     9d6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	bf 77       	andi	r27, 0x7F	; 127
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	90 58       	subi	r25, 0x80	; 128
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	4c e8       	ldi	r20, 0x8C	; 140
     9ec:	52 e4       	ldi	r21, 0x42	; 66
     9ee:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
     9f2:	0e 94 aa 14 	call	0x2954	; 0x2954 <exp>
     9f6:	8b 01       	movw	r16, r22
     9f8:	9c 01       	movw	r18, r24
     9fa:	60 93 3c 01 	sts	0x013C, r22
     9fe:	70 93 3d 01 	sts	0x013D, r23
     a02:	80 93 3e 01 	sts	0x013E, r24
     a06:	90 93 3f 01 	sts	0x013F, r25
				turn(LEFT,1.0,deg);
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e8       	ldi	r22, 0x80	; 128
     a10:	7f e3       	ldi	r23, 0x3F	; 63
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
				//m_red(ON);
				//m_green(ON);
				break;
		}
	//}
}
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <drive_to_point2>:
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	7b 01       	movw	r14, r22
	m_green(ON);
     a42:	6a 9a       	sbi	0x0d, 2	; 13
     a44:	72 98       	cbi	0x0e, 2	; 14

	//while(1) {
		//localize(data);
		
		//Set angle difference to be between -180 and 180
		angle_dif = (((int) (((data[2] + 90.0) * -1.0) - (float)(atan2((double)y-data[1],(double)x-data[0]))*180.0/3.14)) + 900) % 360 - 180;
     a46:	bc 01       	movw	r22, r24
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     a54:	20 91 ce 01 	lds	r18, 0x01CE
     a58:	30 91 cf 01 	lds	r19, 0x01CF
     a5c:	40 91 d0 01 	lds	r20, 0x01D0
     a60:	50 91 d1 01 	lds	r21, 0x01D1
     a64:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
     a68:	06 2f       	mov	r16, r22
     a6a:	17 2f       	mov	r17, r23
     a6c:	d8 2f       	mov	r29, r24
     a6e:	c9 2f       	mov	r28, r25
     a70:	b7 01       	movw	r22, r14
     a72:	88 27       	eor	r24, r24
     a74:	77 fd       	sbrc	r23, 7
     a76:	80 95       	com	r24
     a78:	98 2f       	mov	r25, r24
     a7a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     a7e:	20 91 d2 01 	lds	r18, 0x01D2
     a82:	30 91 d3 01 	lds	r19, 0x01D3
     a86:	40 91 d4 01 	lds	r20, 0x01D4
     a8a:	50 91 d5 01 	lds	r21, 0x01D5
     a8e:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
     a92:	c6 2e       	mov	r12, r22
     a94:	d7 2e       	mov	r13, r23
     a96:	e8 2e       	mov	r14, r24
     a98:	f9 2e       	mov	r15, r25
     a9a:	20 2f       	mov	r18, r16
     a9c:	31 2f       	mov	r19, r17
     a9e:	4d 2f       	mov	r20, r29
     aa0:	5c 2f       	mov	r21, r28
     aa2:	6c 2d       	mov	r22, r12
     aa4:	7d 2d       	mov	r23, r13
     aa6:	8e 2d       	mov	r24, r14
     aa8:	9f 2d       	mov	r25, r15
     aaa:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <atan2>
     aae:	2b 01       	movw	r4, r22
     ab0:	3c 01       	movw	r6, r24
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	44 eb       	ldi	r20, 0xB4	; 180
     ab8:	52 e4       	ldi	r21, 0x42	; 66
     aba:	60 91 d6 01 	lds	r22, 0x01D6
     abe:	70 91 d7 01 	lds	r23, 0x01D7
     ac2:	80 91 d8 01 	lds	r24, 0x01D8
     ac6:	90 91 d9 01 	lds	r25, 0x01D9
     aca:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
     ace:	4b 01       	movw	r8, r22
     ad0:	5c 01       	movw	r10, r24
     ad2:	b7 fa       	bst	r11, 7
     ad4:	b0 94       	com	r11
     ad6:	b7 f8       	bld	r11, 7
     ad8:	b0 94       	com	r11
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	44 e3       	ldi	r20, 0x34	; 52
     ae0:	53 e4       	ldi	r21, 0x43	; 67
     ae2:	c3 01       	movw	r24, r6
     ae4:	b2 01       	movw	r22, r4
     ae6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     aea:	23 ec       	ldi	r18, 0xC3	; 195
     aec:	35 ef       	ldi	r19, 0xF5	; 245
     aee:	48 e4       	ldi	r20, 0x48	; 72
     af0:	50 e4       	ldi	r21, 0x40	; 64
     af2:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	c5 01       	movw	r24, r10
     afc:	b4 01       	movw	r22, r8
     afe:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
     b02:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__fixsfsi>
     b06:	cb 01       	movw	r24, r22
     b08:	8c 57       	subi	r24, 0x7C	; 124
     b0a:	9c 4f       	sbci	r25, 0xFC	; 252
     b0c:	68 e6       	ldi	r22, 0x68	; 104
     b0e:	71 e0       	ldi	r23, 0x01	; 1
     b10:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__divmodhi4>
     b14:	bc 01       	movw	r22, r24
     b16:	64 5b       	subi	r22, 0xB4	; 180
     b18:	71 09       	sbc	r23, r1
     b1a:	88 27       	eor	r24, r24
     b1c:	77 fd       	sbrc	r23, 7
     b1e:	80 95       	com	r24
     b20:	98 2f       	mov	r25, r24
     b22:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     b26:	4b 01       	movw	r8, r22
     b28:	5c 01       	movw	r10, r24
     b2a:	60 93 26 01 	sts	0x0126, r22
     b2e:	70 93 27 01 	sts	0x0127, r23
     b32:	80 93 28 01 	sts	0x0128, r24
     b36:	90 93 29 01 	sts	0x0129, r25
		if (abs(angle_dif) < 5) {
			//shoot();
			//game_pause();
		}
		if (angle_dif > 0) {
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	a9 01       	movw	r20, r18
     b40:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__gesf2>
     b44:	18 16       	cp	r1, r24
     b46:	2c f4       	brge	.+10     	; 0xb52 <__stack+0x53>
			dir = RIGHT;
     b48:	10 92 1d 01 	sts	0x011D, r1
     b4c:	10 92 1c 01 	sts	0x011C, r1
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <__stack+0x5f>
		}
		else {
			dir = LEFT;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	90 93 1d 01 	sts	0x011D, r25
     b5a:	80 93 1c 01 	sts	0x011C, r24
		}
		
		//Angle of 180 corresponds to deg of 0; angle of 0 corresponds to deg of 1
		deg = exp(-1.0* ((double)fabs(angle_dif))/30.0);
     b5e:	e8 94       	clt
     b60:	b7 f8       	bld	r11, 7
     b62:	c5 01       	movw	r24, r10
     b64:	b4 01       	movw	r22, r8
     b66:	90 58       	subi	r25, 0x80	; 128
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 ef       	ldi	r20, 0xF0	; 240
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
     b74:	0e 94 aa 14 	call	0x2954	; 0x2954 <exp>
     b78:	60 93 3c 01 	sts	0x013C, r22
     b7c:	70 93 3d 01 	sts	0x013D, r23
     b80:	80 93 3e 01 	sts	0x013E, r24
     b84:	90 93 3f 01 	sts	0x013F, r25
		//Set distance
		distance = (int) sqrt(((double)y - data[1])*((double)y - data[1])+((double)x - data[0])*((double)x - data[0]));
     b88:	2c 2d       	mov	r18, r12
     b8a:	3d 2d       	mov	r19, r13
     b8c:	4e 2d       	mov	r20, r14
     b8e:	5f 2d       	mov	r21, r15
     b90:	6c 2d       	mov	r22, r12
     b92:	7d 2d       	mov	r23, r13
     b94:	8e 2d       	mov	r24, r14
     b96:	9f 2d       	mov	r25, r15
     b98:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     b9c:	6b 01       	movw	r12, r22
     b9e:	7c 01       	movw	r14, r24
     ba0:	20 2f       	mov	r18, r16
     ba2:	31 2f       	mov	r19, r17
     ba4:	4d 2f       	mov	r20, r29
     ba6:	5c 2f       	mov	r21, r28
     ba8:	60 2f       	mov	r22, r16
     baa:	71 2f       	mov	r23, r17
     bac:	8d 2f       	mov	r24, r29
     bae:	9c 2f       	mov	r25, r28
     bb0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     bb4:	9b 01       	movw	r18, r22
     bb6:	ac 01       	movw	r20, r24
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
     bc0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
     bc4:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__fixsfsi>
     bc8:	88 27       	eor	r24, r24
     bca:	77 fd       	sbrc	r23, 7
     bcc:	80 95       	com	r24
     bce:	98 2f       	mov	r25, r24
     bd0:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__floatsisf>
     bd4:	60 93 22 01 	sts	0x0122, r22
     bd8:	70 93 23 01 	sts	0x0123, r23
     bdc:	80 93 24 01 	sts	0x0124, r24
     be0:	90 93 25 01 	sts	0x0125, r25
		spd = ((float)distance)/70.0;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4c e8       	ldi	r20, 0x8C	; 140
     bea:	52 e4       	ldi	r21, 0x42	; 66
     bec:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
     bf0:	60 93 1e 01 	sts	0x011E, r22
     bf4:	70 93 1f 01 	sts	0x011F, r23
     bf8:	80 93 20 01 	sts	0x0120, r24
     bfc:	90 93 21 01 	sts	0x0121, r25
		//*****************************************************************************
			rx_buffer = m_usb_rx_char();  	//grab the computer packet
     c00:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <m_usb_rx_char>
     c04:	80 93 c3 01 	sts	0x01C3, r24

			m_usb_rx_flush();  				//clear buffer
     c08:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <m_usb_rx_flush>

			if(rx_buffer == 1) {  			//computer wants ir buffer
     c0c:	80 91 c3 01 	lds	r24, 0x01C3
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	09 f0       	breq	.+2      	; 0xc16 <__stack+0x117>
     c14:	62 c0       	rjmp	.+196    	; 0xcda <__stack+0x1db>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
     c16:	80 91 26 01 	lds	r24, 0x0126
     c1a:	90 91 27 01 	lds	r25, 0x0127
     c1e:	a0 91 28 01 	lds	r26, 0x0128
     c22:	b0 91 29 01 	lds	r27, 0x0129
     c26:	80 93 da 01 	sts	0x01DA, r24
     c2a:	90 93 db 01 	sts	0x01DB, r25
     c2e:	a0 93 dc 01 	sts	0x01DC, r26
     c32:	b0 93 dd 01 	sts	0x01DD, r27
				data[4] = deg*100.0;
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	48 ec       	ldi	r20, 0xC8	; 200
     c3c:	52 e4       	ldi	r21, 0x42	; 66
     c3e:	60 91 3c 01 	lds	r22, 0x013C
     c42:	70 91 3d 01 	lds	r23, 0x013D
     c46:	80 91 3e 01 	lds	r24, 0x013E
     c4a:	90 91 3f 01 	lds	r25, 0x013F
     c4e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     c52:	60 93 de 01 	sts	0x01DE, r22
     c56:	70 93 df 01 	sts	0x01DF, r23
     c5a:	80 93 e0 01 	sts	0x01E0, r24
     c5e:	90 93 e1 01 	sts	0x01E1, r25
				data[5] = distance;
     c62:	80 91 22 01 	lds	r24, 0x0122
     c66:	90 91 23 01 	lds	r25, 0x0123
     c6a:	a0 91 24 01 	lds	r26, 0x0124
     c6e:	b0 91 25 01 	lds	r27, 0x0125
     c72:	80 93 e2 01 	sts	0x01E2, r24
     c76:	90 93 e3 01 	sts	0x01E3, r25
     c7a:	a0 93 e4 01 	sts	0x01E4, r26
     c7e:	b0 93 e5 01 	sts	0x01E5, r27
				data[6] = spd*100.0;
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	48 ec       	ldi	r20, 0xC8	; 200
     c88:	52 e4       	ldi	r21, 0x42	; 66
     c8a:	60 91 1e 01 	lds	r22, 0x011E
     c8e:	70 91 1f 01 	lds	r23, 0x011F
     c92:	80 91 20 01 	lds	r24, 0x0120
     c96:	90 91 21 01 	lds	r25, 0x0121
     c9a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
     c9e:	60 93 e6 01 	sts	0x01E6, r22
     ca2:	70 93 e7 01 	sts	0x01E7, r23
     ca6:	80 93 e8 01 	sts	0x01E8, r24
     caa:	90 93 e9 01 	sts	0x01E9, r25
     cae:	ce ec       	ldi	r28, 0xCE	; 206
     cb0:	d1 e0       	ldi	r29, 0x01	; 1
	float angle_dif = 0.0;
	float distance = 0.0;
	float spd = 0.0;
	int dir = 0;

void drive_to_point2(int x, int y) {
     cb2:	0a ee       	ldi	r16, 0xEA	; 234
     cb4:	11 e0       	ldi	r17, 0x01	; 1
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
					m_usb_tx_int((int)data[i]);
     cb6:	69 91       	ld	r22, Y+
     cb8:	79 91       	ld	r23, Y+
     cba:	89 91       	ld	r24, Y+
     cbc:	99 91       	ld	r25, Y+
     cbe:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__fixsfsi>
     cc2:	cb 01       	movw	r24, r22
     cc4:	0e 94 49 11 	call	0x2292	; 0x2292 <m_usb_tx_int>
					m_usb_tx_char('\t');
     cc8:	89 e0       	ldi	r24, 0x09	; 9
     cca:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <m_usb_tx_char>
				//write ir buffer as concatenated hex:  i.e. f0f1f4f5
				data[3] = angle_dif;
				data[4] = deg*100.0;
				data[5] = distance;
				data[6] = spd*100.0;
				for (int i = 0 ; i < 7 ; i++){
     cce:	c0 17       	cp	r28, r16
     cd0:	d1 07       	cpc	r29, r17
     cd2:	89 f7       	brne	.-30     	; 0xcb6 <__stack+0x1b7>
					m_usb_tx_int((int)data[i]);
					m_usb_tx_char('\t');

				}

				m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <m_usb_tx_char>
			}
			
		//*********************************************************************************
		
		if (spd > speed_cap) spd = speed_cap;
     cda:	c0 90 00 01 	lds	r12, 0x0100
     cde:	d0 90 01 01 	lds	r13, 0x0101
     ce2:	e0 90 02 01 	lds	r14, 0x0102
     ce6:	f0 90 03 01 	lds	r15, 0x0103
     cea:	a7 01       	movw	r20, r14
     cec:	96 01       	movw	r18, r12
     cee:	60 91 1e 01 	lds	r22, 0x011E
     cf2:	70 91 1f 01 	lds	r23, 0x011F
     cf6:	80 91 20 01 	lds	r24, 0x0120
     cfa:	90 91 21 01 	lds	r25, 0x0121
     cfe:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__gesf2>
     d02:	18 16       	cp	r1, r24
     d04:	44 f4       	brge	.+16     	; 0xd16 <__stack+0x217>
     d06:	c0 92 1e 01 	sts	0x011E, r12
     d0a:	d0 92 1f 01 	sts	0x011F, r13
     d0e:	e0 92 20 01 	sts	0x0120, r14
     d12:	f0 92 21 01 	sts	0x0121, r15
		turn(dir, spd, deg);
     d16:	00 91 3c 01 	lds	r16, 0x013C
     d1a:	10 91 3d 01 	lds	r17, 0x013D
     d1e:	20 91 3e 01 	lds	r18, 0x013E
     d22:	30 91 3f 01 	lds	r19, 0x013F
     d26:	40 91 1e 01 	lds	r20, 0x011E
     d2a:	50 91 1f 01 	lds	r21, 0x011F
     d2e:	60 91 20 01 	lds	r22, 0x0120
     d32:	70 91 21 01 	lds	r23, 0x0121
     d36:	80 91 1c 01 	lds	r24, 0x011C
     d3a:	90 91 1d 01 	lds	r25, 0x011D
     d3e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn>
		
	//}
	if (distance < 10) {
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	60 91 22 01 	lds	r22, 0x0122
     d4e:	70 91 23 01 	lds	r23, 0x0123
     d52:	80 91 24 01 	lds	r24, 0x0124
     d56:	90 91 25 01 	lds	r25, 0x0125
     d5a:	0e 94 36 14 	call	0x286c	; 0x286c <__cmpsf2>
     d5e:	88 23       	and	r24, r24
     d60:	84 f4       	brge	.+32     	; 0xd82 <__stack+0x283>
		m_red(ON);
     d62:	6e 9a       	sbi	0x0d, 6	; 13
     d64:	76 98       	cbi	0x0e, 6	; 14
		reverse();
     d66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <reverse>
		OCR1B = 0;
     d6a:	10 92 8b 00 	sts	0x008B, r1
     d6e:	10 92 8a 00 	sts	0x008A, r1
		OCR3A = 0;
     d72:	10 92 99 00 	sts	0x0099, r1
     d76:	10 92 98 00 	sts	0x0098, r1
		state = 0;
     d7a:	10 92 59 01 	sts	0x0159, r1
     d7e:	10 92 58 01 	sts	0x0158, r1
	}
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	7f 90       	pop	r7
     d9c:	6f 90       	pop	r6
     d9e:	5f 90       	pop	r5
     da0:	4f 90       	pop	r4
     da2:	08 95       	ret

00000da4 <drive_to_goalB>:
void drive_to_goalA() {
	drive_to_point2(GOALAX,GOALAY);
}

void drive_to_goalB() {
	drive_to_point2(GOALBX,GOALBY);
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	83 e7       	ldi	r24, 0x73	; 115
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 10 05 	call	0xa20	; 0xa20 <drive_to_point2>
     db0:	08 95       	ret

00000db2 <main>:
float prevx = 0.0;
float prevy = 0.0;

int main(void)
{
	set(DDRD,5);
     db2:	55 9a       	sbi	0x0a, 5	; 10
	set(DDRD,3);
     db4:	53 9a       	sbi	0x0a, 3	; 10
	//wireless stuffs
	m_bus_init();
     db6:	0e 94 26 08 	call	0x104c	; 0x104c <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     dba:	4a e0       	ldi	r20, 0x0A	; 10
     dbc:	68 e0       	ldi	r22, 0x08	; 8
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     dc4:	e1 e6       	ldi	r30, 0x61	; 97
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	80 83       	st	Z, r24
     dcc:	10 82       	st	Z, r1
	
	m_disableJTAG();
     dce:	85 bf       	out	0x35, r24	; 53
     dd0:	85 bf       	out	0x35, r24	; 53
// 	
// 	set(TCCR0B, CS02);
// 	set(TCCR0B, CS01);
// 	set(TCCR0B, CS00);
// 	
	set(DDRB,7);
     dd2:	27 9a       	sbi	0x04, 7	; 4
// 	OCR0A = 0xFF;
// 	OCR0B = 0xff;
// 	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     dd4:	e1 e8       	ldi	r30, 0x81	; 129
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 61       	ori	r24, 0x10	; 16
     ddc:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     dde:	80 81       	ld	r24, Z
     de0:	88 60       	ori	r24, 0x08	; 8
     de2:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     de4:	a0 e8       	ldi	r26, 0x80	; 128
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	8c 91       	ld	r24, X
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     dee:	8c 91       	ld	r24, X
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     df4:	8c 91       	ld	r24, X
     df6:	80 62       	ori	r24, 0x20	; 32
     df8:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     dfa:	8c 91       	ld	r24, X
     dfc:	8f 7e       	andi	r24, 0xEF	; 239
     dfe:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     e00:	80 81       	ld	r24, Z
     e02:	8b 7f       	andi	r24, 0xFB	; 251
     e04:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     e06:	80 81       	ld	r24, Z
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	80 83       	st	Z, r24
	
	set(DDRB,6);
     e12:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	9f ef       	ldi	r25, 0xFF	; 255
     e18:	90 93 89 00 	sts	0x0089, r25
     e1c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     e20:	10 92 8b 00 	sts	0x008B, r1
     e24:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     e28:	e1 e9       	ldi	r30, 0x91	; 145
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	20 81       	ld	r18, Z
     e2e:	20 61       	ori	r18, 0x10	; 16
     e30:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     e32:	20 81       	ld	r18, Z
     e34:	28 60       	ori	r18, 0x08	; 8
     e36:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     e38:	a0 e9       	ldi	r26, 0x90	; 144
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	2c 91       	ld	r18, X
     e3e:	22 60       	ori	r18, 0x02	; 2
     e40:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     e42:	2c 91       	ld	r18, X
     e44:	2e 7f       	andi	r18, 0xFE	; 254
     e46:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     e48:	2c 91       	ld	r18, X
     e4a:	20 68       	ori	r18, 0x80	; 128
     e4c:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     e4e:	2c 91       	ld	r18, X
     e50:	2f 7b       	andi	r18, 0xBF	; 191
     e52:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     e54:	20 81       	ld	r18, Z
     e56:	2b 7f       	andi	r18, 0xFB	; 251
     e58:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     e5a:	20 81       	ld	r18, Z
     e5c:	2d 7f       	andi	r18, 0xFD	; 253
     e5e:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     e60:	20 81       	ld	r18, Z
     e62:	21 60       	ori	r18, 0x01	; 1
     e64:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     e66:	90 93 97 00 	sts	0x0097, r25
     e6a:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     e6e:	10 92 99 00 	sts	0x0099, r1
     e72:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     e76:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     e78:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     e7a:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     e7c:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     e7e:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     e80:	78 94       	sei
	set(ADCSRA, ADIE);
     e82:	ca e7       	ldi	r28, 0x7A	; 122
     e84:	d0 e0       	ldi	r29, 0x00	; 0
     e86:	88 81       	ld	r24, Y
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	88 83       	st	Y, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     e8c:	ec e7       	ldi	r30, 0x7C	; 124
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	80 83       	st	Z, r24
	clear(ADMUX, REFS0);	//^
     e96:	80 81       	ld	r24, Z
     e98:	8f 7b       	andi	r24, 0xBF	; 191
     e9a:	80 83       	st	Z, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     e9c:	88 81       	ld	r24, Y
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	88 83       	st	Y, r24
	set(ADCSRA, ADPS1);	//^
     ea2:	88 81       	ld	r24, Y
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	88 83       	st	Y, r24
	set(ADCSRA, ADPS0);	//^
     ea8:	88 81       	ld	r24, Y
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	88 83       	st	Y, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     eae:	ee e7       	ldi	r30, 0x7E	; 126
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	80 83       	st	Z, r24
	set(DIDR0, ADC1D),
     eb8:	80 81       	ld	r24, Z
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	80 83       	st	Z, r24
	set(DIDR0, ADC4D);
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	80 83       	st	Z, r24
	set(DIDR0, ADC5D);
     ec4:	80 81       	ld	r24, Z
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	80 83       	st	Z, r24
	set(DIDR0, ADC6D);
     eca:	80 81       	ld	r24, Z
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	80 83       	st	Z, r24
	set(DIDR0, ADC7D);
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	80 83       	st	Z, r24
	set(DIDR2, ADC8D);
     ed6:	ed e7       	ldi	r30, 0x7D	; 125
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 83       	st	Z, r24
	set(DIDR2, ADC9D);
     ee0:	80 81       	ld	r24, Z
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	80 83       	st	Z, r24
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     ee6:	88 81       	ld	r24, Y
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	88 83       	st	Y, r24
	
	chooseInput(0);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 35 01 	call	0x26a	; 0x26a <chooseInput>
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
     ef4:	88 81       	ld	r24, Y
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	88 83       	st	Y, r24
	set(ADCSRA, ADSC);	//^
     efa:	88 81       	ld	r24, Y
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	88 83       	st	Y, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     f00:	88 81       	ld	r24, Y
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	88 83       	st	Y, r24
	
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     f06:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     f08:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     f0a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     f0c:	29 98       	cbi	0x05, 1	; 5
	 
	//int state; // state variable
	state = 2; //set state
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 59 01 	sts	0x0159, r25
     f16:	80 93 58 01 	sts	0x0158, r24
			m_usb_init(); // connect usb
			while(!m_usb_isconnected());  //wait for connection
	}

	//m_bus_init();
	m_wii_open();
     f1a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <m_wii_open>
	//m_usb_init();
	local_init();
     f1e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <local_init>
			prevy = data[1];
			loccounter = 0;
		}*/
		loccounter++;
		localize(data);
		toggle(PORTD,3);
     f22:	68 94       	set
     f24:	dd 24       	eor	r13, r13
     f26:	d3 f8       	bld	r13, 3
		changedState = 0;
		angle_dif = 0;
		
		//Detect weather we have the puck
		getADC();
		if (ADCarr[7] > 500) {
     f28:	c4 e5       	ldi	r28, 0x54	; 84
     f2a:	d1 e0       	ldi	r29, 0x01	; 1
			set(PORTD,5);
			iHaveThePuck = 1;
     f2c:	cc 24       	eor	r12, r12
     f2e:	c3 94       	inc	r12
			clear(PORTD,5);
			iHaveThePuck = 0;
		}
		
		if(iHaveThePuck) {
			state = 0xA3;
     f30:	0f 2e       	mov	r0, r31
     f32:	f3 ea       	ldi	r31, 0xA3	; 163
     f34:	ef 2e       	mov	r14, r31
     f36:	f1 2c       	mov	r15, r1
     f38:	f0 2d       	mov	r31, r0
		}
		else {
			state = 2;
     f3a:	02 e0       	ldi	r16, 0x02	; 2
     f3c:	10 e0       	ldi	r17, 0x00	; 0
			}
			prevx = data[0];
			prevy = data[1];
			loccounter = 0;
		}*/
		loccounter++;
     f3e:	80 91 18 01 	lds	r24, 0x0118
     f42:	90 91 19 01 	lds	r25, 0x0119
     f46:	a0 91 1a 01 	lds	r26, 0x011A
     f4a:	b0 91 1b 01 	lds	r27, 0x011B
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	a1 1d       	adc	r26, r1
     f52:	b1 1d       	adc	r27, r1
     f54:	80 93 18 01 	sts	0x0118, r24
     f58:	90 93 19 01 	sts	0x0119, r25
     f5c:	a0 93 1a 01 	sts	0x011A, r26
     f60:	b0 93 1b 01 	sts	0x011B, r27
		localize(data);
     f64:	8e ec       	ldi	r24, 0xCE	; 206
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 06 0b 	call	0x160c	; 0x160c <localize>
		toggle(PORTD,3);
     f6c:	8b b1       	in	r24, 0x0b	; 11
     f6e:	8d 25       	eor	r24, r13
     f70:	8b b9       	out	0x0b, r24	; 11
		changedState = 0;
     f72:	10 92 5a 01 	sts	0x015A, r1
		angle_dif = 0;
     f76:	10 92 26 01 	sts	0x0126, r1
     f7a:	10 92 27 01 	sts	0x0127, r1
     f7e:	10 92 28 01 	sts	0x0128, r1
     f82:	10 92 29 01 	sts	0x0129, r1
		
		//Detect weather we have the puck
		getADC();
     f86:	0e 94 d7 01 	call	0x3ae	; 0x3ae <getADC>
		if (ADCarr[7] > 500) {
     f8a:	88 81       	ld	r24, Y
     f8c:	99 81       	ldd	r25, Y+1	; 0x01
     f8e:	85 3f       	cpi	r24, 0xF5	; 245
     f90:	91 40       	sbci	r25, 0x01	; 1
     f92:	54 f0       	brlt	.+20     	; 0xfa8 <main+0x1f6>
			set(PORTD,5);
     f94:	5d 9a       	sbi	0x0b, 5	; 11
			iHaveThePuck = 1;
     f96:	c0 92 5b 01 	sts	0x015B, r12
			clear(PORTD,5);
			iHaveThePuck = 0;
		}
		
		if(iHaveThePuck) {
			state = 0xA3;
     f9a:	f0 92 59 01 	sts	0x0159, r15
     f9e:	e0 92 58 01 	sts	0x0158, r14
			case 0xA2:
			drive_to_goalA();
			break;
			
			case 0xA3:
			drive_to_goalB();
     fa2:	0e 94 d2 06 	call	0xda4	; 0xda4 <drive_to_goalB>
			break;
     fa6:	cb cf       	rjmp	.-106    	; 0xf3e <main+0x18c>
		getADC();
		if (ADCarr[7] > 500) {
			set(PORTD,5);
			iHaveThePuck = 1;
		} else {
			clear(PORTD,5);
     fa8:	5d 98       	cbi	0x0b, 5	; 11
			iHaveThePuck = 0;
     faa:	10 92 5b 01 	sts	0x015B, r1
		
		if(iHaveThePuck) {
			state = 0xA3;
		}
		else {
			state = 2;
     fae:	10 93 59 01 	sts	0x0159, r17
     fb2:	00 93 58 01 	sts	0x0158, r16
			findPuck();
			break;
			
			case 2:
			//m_red(ON);
			drive_to_puck();
     fb6:	0e 94 84 03 	call	0x708	; 0x708 <drive_to_puck>
			break;
     fba:	c1 cf       	rjmp	.-126    	; 0xf3e <main+0x18c>

00000fbc <__vector_3>:
        
    }
}


ISR(INT2_vect)  {
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
	cli();
     fde:	f8 94       	cli
	m_rf_read(buffer,PACKET_LENGTH);
     fe0:	6a e0       	ldi	r22, 0x0A	; 10
     fe2:	84 ec       	ldi	r24, 0xC4	; 196
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <m_rf_read>
	sei();
     fea:	78 94       	sei
	state=buffer[0];
     fec:	80 91 c4 01 	lds	r24, 0x01C4
     ff0:	80 93 58 01 	sts	0x0158, r24
     ff4:	10 92 59 01 	sts	0x0159, r1
	changedState = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 5a 01 	sts	0x015A, r24
}
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <__vector_29>:

ISR(ADC_vect) {
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
	cli();
    102e:	f8 94       	cli
	conversion = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	90 93 2b 01 	sts	0x012B, r25
    1038:	80 93 2a 01 	sts	0x012A, r24
	sei();
    103c:	78 94       	sei
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    104c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    104e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1050:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1052:	8c e0       	ldi	r24, 0x0C	; 12
    1054:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1058:	e9 e6       	ldi	r30, 0x69	; 105
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 62       	ori	r24, 0x20	; 32
    1060:	80 83       	st	Z, r24
    1062:	80 81       	ld	r24, Z
    1064:	8f 7e       	andi	r24, 0xEF	; 239
    1066:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1068:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    106a:	78 94       	sei
    106c:	08 95       	ret

0000106e <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	8c 01       	movw	r16, r24
    1078:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
    107a:	82 ea       	ldi	r24, 0xA2	; 162
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <m_wii_read>
	x[0] = blobs[0];
    1082:	80 91 a2 01 	lds	r24, 0x01A2
    1086:	90 91 a3 01 	lds	r25, 0x01A3
    108a:	f8 01       	movw	r30, r16
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
	x[1] = blobs[3];
    1090:	80 91 a8 01 	lds	r24, 0x01A8
    1094:	90 91 a9 01 	lds	r25, 0x01A9
    1098:	93 83       	std	Z+3, r25	; 0x03
    109a:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
    109c:	80 91 ae 01 	lds	r24, 0x01AE
    10a0:	90 91 af 01 	lds	r25, 0x01AF
    10a4:	95 83       	std	Z+5, r25	; 0x05
    10a6:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
    10a8:	80 91 b4 01 	lds	r24, 0x01B4
    10ac:	90 91 b5 01 	lds	r25, 0x01B5
    10b0:	97 83       	std	Z+7, r25	; 0x07
    10b2:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
    10b4:	80 91 a4 01 	lds	r24, 0x01A4
    10b8:	90 91 a5 01 	lds	r25, 0x01A5
    10bc:	99 83       	std	Y+1, r25	; 0x01
    10be:	88 83       	st	Y, r24
	y[1] = blobs[4];
    10c0:	80 91 aa 01 	lds	r24, 0x01AA
    10c4:	90 91 ab 01 	lds	r25, 0x01AB
    10c8:	9b 83       	std	Y+3, r25	; 0x03
    10ca:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
    10cc:	80 91 b0 01 	lds	r24, 0x01B0
    10d0:	90 91 b1 01 	lds	r25, 0x01B1
    10d4:	9d 83       	std	Y+5, r25	; 0x05
    10d6:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
    10d8:	80 91 b6 01 	lds	r24, 0x01B6
    10dc:	90 91 b7 01 	lds	r25, 0x01B7
    10e0:	9f 83       	std	Y+7, r25	; 0x07
    10e2:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <determine_blobs>:

unsigned char determine_blobs() {
    10f0:	2f 92       	push	r2
    10f2:	3f 92       	push	r3
    10f4:	4f 92       	push	r4
    10f6:	5f 92       	push	r5
    10f8:	6f 92       	push	r6
    10fa:	7f 92       	push	r7
    10fc:	8f 92       	push	r8
    10fe:	9f 92       	push	r9
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	6c 97       	sbiw	r28, 0x1c	; 28
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
    1124:	10 92 6a 01 	sts	0x016A, r1
    1128:	10 92 6b 01 	sts	0x016B, r1
    112c:	10 92 6c 01 	sts	0x016C, r1
    1130:	10 92 6d 01 	sts	0x016D, r1
	distmin = 30000;
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e6       	ldi	r25, 0x60	; 96
    1138:	aa ee       	ldi	r26, 0xEA	; 234
    113a:	b6 e4       	ldi	r27, 0x46	; 70
    113c:	80 93 04 01 	sts	0x0104, r24
    1140:	90 93 05 01 	sts	0x0105, r25
    1144:	a0 93 06 01 	sts	0x0106, r26
    1148:	b0 93 07 01 	sts	0x0107, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    114c:	0f 2e       	mov	r0, r31
    114e:	fc e7       	ldi	r31, 0x7C	; 124
    1150:	cf 2e       	mov	r12, r31
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	df 2e       	mov	r13, r31
    1156:	f0 2d       	mov	r31, r0
    1158:	0e e7       	ldi	r16, 0x7E	; 126
    115a:	11 e0       	ldi	r17, 0x01	; 1
    115c:	0f 2e       	mov	r0, r31
    115e:	f0 e8       	ldi	r31, 0x80	; 128
    1160:	ef 2e       	mov	r14, r31
    1162:	f1 e0       	ldi	r31, 0x01	; 1
    1164:	ff 2e       	mov	r15, r31
    1166:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
    1168:	62 e7       	ldi	r22, 0x72	; 114
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	8a e7       	ldi	r24, 0x7A	; 122
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	0e 94 37 08 	call	0x106e	; 0x106e <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
    1174:	80 91 7a 01 	lds	r24, 0x017A
    1178:	90 91 7b 01 	lds	r25, 0x017B
    117c:	8f 3f       	cpi	r24, 0xFF	; 255
    117e:	93 40       	sbci	r25, 0x03	; 3
    1180:	98 f7       	brcc	.-26     	; 0x1168 <determine_blobs+0x78>
    1182:	f6 01       	movw	r30, r12
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	8f 3f       	cpi	r24, 0xFF	; 255
    118a:	93 40       	sbci	r25, 0x03	; 3
    118c:	68 f7       	brcc	.-38     	; 0x1168 <determine_blobs+0x78>
    118e:	f8 01       	movw	r30, r16
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	93 40       	sbci	r25, 0x03	; 3
    1198:	38 f7       	brcc	.-50     	; 0x1168 <determine_blobs+0x78>
    119a:	f7 01       	movw	r30, r14
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	8f 3f       	cpi	r24, 0xFF	; 255
    11a2:	93 40       	sbci	r25, 0x03	; 3
    11a4:	08 f7       	brcc	.-62     	; 0x1168 <determine_blobs+0x78>
    11a6:	80 90 6e 01 	lds	r8, 0x016E
    11aa:	90 90 6f 01 	lds	r9, 0x016F
    11ae:	a0 90 70 01 	lds	r10, 0x0170
    11b2:	b0 90 71 01 	lds	r11, 0x0171
    11b6:	20 91 6a 01 	lds	r18, 0x016A
    11ba:	29 83       	std	Y+1, r18	; 0x01
    11bc:	30 91 6b 01 	lds	r19, 0x016B
    11c0:	3a 83       	std	Y+2, r19	; 0x02
    11c2:	40 91 6c 01 	lds	r20, 0x016C
    11c6:	4b 83       	std	Y+3, r20	; 0x03
    11c8:	50 91 6d 01 	lds	r21, 0x016D
    11cc:	5c 83       	std	Y+4, r21	; 0x04
    11ce:	60 91 64 01 	lds	r22, 0x0164
    11d2:	6b 8b       	std	Y+19, r22	; 0x13
    11d4:	70 91 65 01 	lds	r23, 0x0165
    11d8:	7c 8b       	std	Y+20, r23	; 0x14
    11da:	80 91 62 01 	lds	r24, 0x0162
    11de:	89 8b       	std	Y+17, r24	; 0x11
    11e0:	90 91 63 01 	lds	r25, 0x0163
    11e4:	9a 8b       	std	Y+18, r25	; 0x12
    11e6:	e0 91 66 01 	lds	r30, 0x0166
    11ea:	ed 8b       	std	Y+21, r30	; 0x15
    11ec:	f0 91 67 01 	lds	r31, 0x0167
    11f0:	fe 8b       	std	Y+22, r31	; 0x16
    11f2:	20 91 68 01 	lds	r18, 0x0168
    11f6:	2f 8b       	std	Y+23, r18	; 0x17
    11f8:	30 91 69 01 	lds	r19, 0x0169
    11fc:	38 8f       	std	Y+24, r19	; 0x18
    11fe:	40 91 04 01 	lds	r20, 0x0104
    1202:	4d 83       	std	Y+5, r20	; 0x05
    1204:	50 91 05 01 	lds	r21, 0x0105
    1208:	5e 83       	std	Y+6, r21	; 0x06
    120a:	20 90 06 01 	lds	r2, 0x0106
    120e:	30 90 07 01 	lds	r3, 0x0107
    1212:	60 91 60 01 	lds	r22, 0x0160
    1216:	69 8f       	std	Y+25, r22	; 0x19
    1218:	70 91 61 01 	lds	r23, 0x0161
    121c:	7a 8f       	std	Y+26, r23	; 0x1a
    121e:	80 91 5e 01 	lds	r24, 0x015E
    1222:	90 91 5f 01 	lds	r25, 0x015F
    1226:	98 8b       	std	Y+16, r25	; 0x10
    1228:	8f 87       	std	Y+15, r24	; 0x0f
    122a:	18 86       	std	Y+8, r1	; 0x08
    122c:	1f 82       	std	Y+7, r1	; 0x07
    122e:	c1 2c       	mov	r12, r1
    1230:	d1 2c       	mov	r13, r1
    1232:	b9 c0       	rjmp	.+370    	; 0x13a6 <determine_blobs+0x2b6>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
    1234:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1236:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1238:	e4 15       	cp	r30, r4
    123a:	f5 05       	cpc	r31, r5
    123c:	09 f4       	brne	.+2      	; 0x1240 <determine_blobs+0x150>
    123e:	9c c0       	rjmp	.+312    	; 0x1378 <determine_blobs+0x288>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    1240:	e9 85       	ldd	r30, Y+9	; 0x09
    1242:	fa 85       	ldd	r31, Y+10	; 0x0a
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1250:	6b 01       	movw	r12, r22
    1252:	7c 01       	movw	r14, r24
    1254:	f3 01       	movw	r30, r6
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	c7 01       	movw	r24, r14
    1268:	b6 01       	movw	r22, r12
    126a:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    126e:	c6 2e       	mov	r12, r22
    1270:	d7 2e       	mov	r13, r23
    1272:	e8 2e       	mov	r14, r24
    1274:	f9 2e       	mov	r15, r25
    1276:	eb 85       	ldd	r30, Y+11	; 0x0b
    1278:	fc 85       	ldd	r31, Y+12	; 0x0c
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1286:	4b 01       	movw	r8, r22
    1288:	5c 01       	movw	r10, r24
    128a:	f8 01       	movw	r30, r16
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1298:	9b 01       	movw	r18, r22
    129a:	ac 01       	movw	r20, r24
    129c:	c5 01       	movw	r24, r10
    129e:	b4 01       	movw	r22, r8
    12a0:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    12a4:	86 2e       	mov	r8, r22
    12a6:	97 2e       	mov	r9, r23
    12a8:	a8 2e       	mov	r10, r24
    12aa:	b9 2e       	mov	r11, r25
    12ac:	2c 2d       	mov	r18, r12
    12ae:	3d 2d       	mov	r19, r13
    12b0:	4e 2d       	mov	r20, r14
    12b2:	5f 2d       	mov	r21, r15
    12b4:	6c 2d       	mov	r22, r12
    12b6:	7d 2d       	mov	r23, r13
    12b8:	8e 2d       	mov	r24, r14
    12ba:	9f 2d       	mov	r25, r15
    12bc:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    12c0:	6b 01       	movw	r12, r22
    12c2:	7c 01       	movw	r14, r24
    12c4:	28 2d       	mov	r18, r8
    12c6:	39 2d       	mov	r19, r9
    12c8:	4a 2d       	mov	r20, r10
    12ca:	5b 2d       	mov	r21, r11
    12cc:	68 2d       	mov	r22, r8
    12ce:	79 2d       	mov	r23, r9
    12d0:	8a 2d       	mov	r24, r10
    12d2:	9b 2d       	mov	r25, r11
    12d4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	c7 01       	movw	r24, r14
    12de:	b6 01       	movw	r22, r12
    12e0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
    12e4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
    12e8:	86 2e       	mov	r8, r22
    12ea:	97 2e       	mov	r9, r23
    12ec:	a8 2e       	mov	r10, r24
    12ee:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
    12f0:	79 81       	ldd	r23, Y+1	; 0x01
    12f2:	6a 81       	ldd	r22, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	27 2f       	mov	r18, r23
    12fa:	36 2f       	mov	r19, r22
    12fc:	49 2f       	mov	r20, r25
    12fe:	58 2f       	mov	r21, r24
    1300:	68 2d       	mov	r22, r8
    1302:	79 2d       	mov	r23, r9
    1304:	8a 2d       	mov	r24, r10
    1306:	9b 2d       	mov	r25, r11
    1308:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__gesf2>
    130c:	18 16       	cp	r1, r24
    130e:	d4 f4       	brge	.+52     	; 0x1344 <determine_blobs+0x254>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	68 2d       	mov	r22, r8
    131a:	79 2d       	mov	r23, r9
    131c:	8a 2d       	mov	r24, r10
    131e:	9b 2d       	mov	r25, r11
    1320:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1324:	6d 8b       	std	Y+21, r22	; 0x15
    1326:	7e 8b       	std	Y+22, r23	; 0x16
    1328:	8f 8b       	std	Y+23, r24	; 0x17
    132a:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
    132c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    132e:	f9 8b       	std	Y+17, r31	; 0x11
    1330:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1332:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
    1334:	3d 85       	ldd	r19, Y+13	; 0x0d
    1336:	3b 8b       	std	Y+19, r19	; 0x13
    1338:	4e 85       	ldd	r20, Y+14	; 0x0e
    133a:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
    133c:	89 82       	std	Y+1, r8	; 0x01
    133e:	9a 82       	std	Y+2, r9	; 0x02
    1340:	ab 82       	std	Y+3, r10	; 0x03
    1342:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
    1344:	7d 81       	ldd	r23, Y+5	; 0x05
    1346:	6e 81       	ldd	r22, Y+6	; 0x06
    1348:	27 2f       	mov	r18, r23
    134a:	36 2f       	mov	r19, r22
    134c:	42 2d       	mov	r20, r2
    134e:	53 2d       	mov	r21, r3
    1350:	68 2d       	mov	r22, r8
    1352:	79 2d       	mov	r23, r9
    1354:	8a 2d       	mov	r24, r10
    1356:	9b 2d       	mov	r25, r11
    1358:	0e 94 36 14 	call	0x286c	; 0x286c <__cmpsf2>
    135c:	88 23       	and	r24, r24
    135e:	64 f4       	brge	.+24     	; 0x1378 <determine_blobs+0x288>
						distmin = dist;
						close1 = i;
						close2 = j;
    1360:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1362:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1364:	78 8b       	std	Y+16, r23	; 0x10
    1366:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    1368:	7d 85       	ldd	r23, Y+13	; 0x0d
    136a:	79 8f       	std	Y+25, r23	; 0x19
    136c:	8e 85       	ldd	r24, Y+14	; 0x0e
    136e:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
    1370:	8d 82       	std	Y+5, r8	; 0x05
    1372:	9e 82       	std	Y+6, r9	; 0x06
    1374:	2a 2c       	mov	r2, r10
    1376:	3b 2c       	mov	r3, r11
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	69 0e       	add	r6, r25
    137c:	71 1c       	adc	r7, r1
    137e:	0e 5f       	subi	r16, 0xFE	; 254
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
    1382:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1384:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1386:	31 96       	adiw	r30, 0x01	; 1
    1388:	fc 8f       	std	Y+28, r31	; 0x1c
    138a:	eb 8f       	std	Y+27, r30	; 0x1b
    138c:	34 97       	sbiw	r30, 0x04	; 4
    138e:	09 f0       	breq	.+2      	; 0x1392 <determine_blobs+0x2a2>
    1390:	51 cf       	rjmp	.-350    	; 0x1234 <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
    1392:	2f 81       	ldd	r18, Y+7	; 0x07
    1394:	38 85       	ldd	r19, Y+8	; 0x08
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	38 87       	std	Y+8, r19	; 0x08
    139c:	2f 83       	std	Y+7, r18	; 0x07
    139e:	69 01       	movw	r12, r18
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	31 05       	cpc	r19, r1
    13a4:	39 f1       	breq	.+78     	; 0x13f4 <determine_blobs+0x304>
				for (int j = i; j < 4; j++) {
    13a6:	34 e0       	ldi	r19, 0x04	; 4
    13a8:	c3 16       	cp	r12, r19
    13aa:	d1 04       	cpc	r13, r1
    13ac:	94 f7       	brge	.-28     	; 0x1392 <determine_blobs+0x2a2>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    13ae:	86 01       	movw	r16, r12
    13b0:	0f 5f       	subi	r16, 0xFF	; 255
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
    13b4:	00 0f       	add	r16, r16
    13b6:	11 1f       	adc	r17, r17
    13b8:	0f 2e       	mov	r0, r31
    13ba:	fa e7       	ldi	r31, 0x7A	; 122
    13bc:	ef 2e       	mov	r14, r31
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	ff 2e       	mov	r15, r31
    13c2:	f0 2d       	mov	r31, r0
    13c4:	e0 0e       	add	r14, r16
    13c6:	f1 1e       	adc	r15, r17
    13c8:	0e 58       	subi	r16, 0x8E	; 142
    13ca:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
    13cc:	c6 01       	movw	r24, r12
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	ac 01       	movw	r20, r24
    13d4:	46 58       	subi	r20, 0x86	; 134
    13d6:	5e 4f       	sbci	r21, 0xFE	; 254
    13d8:	5a 87       	std	Y+10, r21	; 0x0a
    13da:	49 87       	std	Y+9, r20	; 0x09
    13dc:	bc 01       	movw	r22, r24
    13de:	6e 58       	subi	r22, 0x8E	; 142
    13e0:	7e 4f       	sbci	r23, 0xFE	; 254
    13e2:	7c 87       	std	Y+12, r23	; 0x0c
    13e4:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
    13e6:	cd 86       	std	Y+13, r12	; 0x0d
    13e8:	de 86       	std	Y+14, r13	; 0x0e
    13ea:	dc 8e       	std	Y+28, r13	; 0x1c
    13ec:	cb 8e       	std	Y+27, r12	; 0x1b
    13ee:	26 01       	movw	r4, r12
    13f0:	37 01       	movw	r6, r14
    13f2:	c7 cf       	rjmp	.-114    	; 0x1382 <determine_blobs+0x292>
    13f4:	88 2d       	mov	r24, r8
    13f6:	99 2d       	mov	r25, r9
    13f8:	aa 2d       	mov	r26, r10
    13fa:	bb 2d       	mov	r27, r11
    13fc:	80 93 6e 01 	sts	0x016E, r24
    1400:	90 93 6f 01 	sts	0x016F, r25
    1404:	a0 93 70 01 	sts	0x0170, r26
    1408:	b0 93 71 01 	sts	0x0171, r27
    140c:	59 81       	ldd	r21, Y+1	; 0x01
    140e:	4a 81       	ldd	r20, Y+2	; 0x02
    1410:	3b 81       	ldd	r19, Y+3	; 0x03
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	85 2f       	mov	r24, r21
    1416:	94 2f       	mov	r25, r20
    1418:	a3 2f       	mov	r26, r19
    141a:	b2 2f       	mov	r27, r18
    141c:	80 93 6a 01 	sts	0x016A, r24
    1420:	90 93 6b 01 	sts	0x016B, r25
    1424:	a0 93 6c 01 	sts	0x016C, r26
    1428:	b0 93 6d 01 	sts	0x016D, r27
    142c:	7b 89       	ldd	r23, Y+19	; 0x13
    142e:	70 93 64 01 	sts	0x0164, r23
    1432:	8c 89       	ldd	r24, Y+20	; 0x14
    1434:	80 93 65 01 	sts	0x0165, r24
    1438:	99 89       	ldd	r25, Y+17	; 0x11
    143a:	90 93 62 01 	sts	0x0162, r25
    143e:	ea 89       	ldd	r30, Y+18	; 0x12
    1440:	e0 93 63 01 	sts	0x0163, r30
    1444:	5d 89       	ldd	r21, Y+21	; 0x15
    1446:	4e 89       	ldd	r20, Y+22	; 0x16
    1448:	3f 89       	ldd	r19, Y+23	; 0x17
    144a:	28 8d       	ldd	r18, Y+24	; 0x18
    144c:	85 2f       	mov	r24, r21
    144e:	94 2f       	mov	r25, r20
    1450:	a3 2f       	mov	r26, r19
    1452:	b2 2f       	mov	r27, r18
    1454:	80 93 66 01 	sts	0x0166, r24
    1458:	90 93 67 01 	sts	0x0167, r25
    145c:	a0 93 68 01 	sts	0x0168, r26
    1460:	b0 93 69 01 	sts	0x0169, r27
    1464:	5d 81       	ldd	r21, Y+5	; 0x05
    1466:	4e 81       	ldd	r20, Y+6	; 0x06
    1468:	85 2f       	mov	r24, r21
    146a:	94 2f       	mov	r25, r20
    146c:	a2 2d       	mov	r26, r2
    146e:	b3 2d       	mov	r27, r3
    1470:	80 93 04 01 	sts	0x0104, r24
    1474:	90 93 05 01 	sts	0x0105, r25
    1478:	a0 93 06 01 	sts	0x0106, r26
    147c:	b0 93 07 01 	sts	0x0107, r27
    1480:	f9 8d       	ldd	r31, Y+25	; 0x19
    1482:	f0 93 60 01 	sts	0x0160, r31
    1486:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1488:	20 93 61 01 	sts	0x0161, r18
    148c:	3f 85       	ldd	r19, Y+15	; 0x0f
    148e:	30 93 5e 01 	sts	0x015E, r19
    1492:	48 89       	ldd	r20, Y+16	; 0x10
    1494:	40 93 5f 01 	sts	0x015F, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
    1498:	80 91 64 01 	lds	r24, 0x0164
    149c:	90 91 65 01 	lds	r25, 0x0165
    14a0:	20 91 60 01 	lds	r18, 0x0160
    14a4:	30 91 61 01 	lds	r19, 0x0161
    14a8:	82 17       	cp	r24, r18
    14aa:	93 07       	cpc	r25, r19
    14ac:	19 f5       	brne	.+70     	; 0x14f4 <determine_blobs+0x404>
				top = far1;
    14ae:	90 93 a1 01 	sts	0x01A1, r25
    14b2:	80 93 a0 01 	sts	0x01A0, r24
				bottom = far2;
    14b6:	40 91 62 01 	lds	r20, 0x0162
    14ba:	50 91 63 01 	lds	r21, 0x0163
    14be:	50 93 9f 01 	sts	0x019F, r21
    14c2:	40 93 9e 01 	sts	0x019E, r20
				right = close2;
    14c6:	20 91 5e 01 	lds	r18, 0x015E
    14ca:	30 91 5f 01 	lds	r19, 0x015F
    14ce:	30 93 9b 01 	sts	0x019B, r19
    14d2:	20 93 9a 01 	sts	0x019A, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
    14d6:	69 e0       	ldi	r22, 0x09	; 9
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	fb 01       	movw	r30, r22
    14dc:	e8 1b       	sub	r30, r24
    14de:	f9 0b       	sbc	r31, r25
    14e0:	cf 01       	movw	r24, r30
    14e2:	84 1b       	sub	r24, r20
    14e4:	95 0b       	sbc	r25, r21
    14e6:	82 1b       	sub	r24, r18
    14e8:	93 0b       	sbc	r25, r19
    14ea:	90 93 9d 01 	sts	0x019D, r25
    14ee:	80 93 9c 01 	sts	0x019C, r24
    14f2:	66 c0       	rjmp	.+204    	; 0x15c0 <determine_blobs+0x4d0>
			}
			else if (far1 == close2) {
    14f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    14f6:	58 89       	ldd	r21, Y+16	; 0x10
    14f8:	84 17       	cp	r24, r20
    14fa:	95 07       	cpc	r25, r21
    14fc:	f9 f4       	brne	.+62     	; 0x153c <determine_blobs+0x44c>
				top = far1;
    14fe:	90 93 a1 01 	sts	0x01A1, r25
    1502:	80 93 a0 01 	sts	0x01A0, r24
				bottom = far2;
    1506:	40 91 62 01 	lds	r20, 0x0162
    150a:	50 91 63 01 	lds	r21, 0x0163
    150e:	50 93 9f 01 	sts	0x019F, r21
    1512:	40 93 9e 01 	sts	0x019E, r20
				right = close1;
    1516:	30 93 9b 01 	sts	0x019B, r19
    151a:	20 93 9a 01 	sts	0x019A, r18
				left = 9 - top - bottom - right;
    151e:	69 e0       	ldi	r22, 0x09	; 9
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	fb 01       	movw	r30, r22
    1524:	e8 1b       	sub	r30, r24
    1526:	f9 0b       	sbc	r31, r25
    1528:	cf 01       	movw	r24, r30
    152a:	84 1b       	sub	r24, r20
    152c:	95 0b       	sbc	r25, r21
    152e:	82 1b       	sub	r24, r18
    1530:	93 0b       	sbc	r25, r19
    1532:	90 93 9d 01 	sts	0x019D, r25
    1536:	80 93 9c 01 	sts	0x019C, r24
    153a:	42 c0       	rjmp	.+132    	; 0x15c0 <determine_blobs+0x4d0>
			}
			else if (far2 == close1) {
    153c:	40 91 62 01 	lds	r20, 0x0162
    1540:	50 91 63 01 	lds	r21, 0x0163
    1544:	24 17       	cp	r18, r20
    1546:	35 07       	cpc	r19, r21
    1548:	01 f5       	brne	.+64     	; 0x158a <determine_blobs+0x49a>
				top = far2;
    154a:	30 93 a1 01 	sts	0x01A1, r19
    154e:	20 93 a0 01 	sts	0x01A0, r18
				bottom = far1;
    1552:	90 93 9f 01 	sts	0x019F, r25
    1556:	80 93 9e 01 	sts	0x019E, r24
				right = close2;
    155a:	4f 85       	ldd	r20, Y+15	; 0x0f
    155c:	58 89       	ldd	r21, Y+16	; 0x10
    155e:	50 93 9b 01 	sts	0x019B, r21
    1562:	40 93 9a 01 	sts	0x019A, r20
				left = 9 - top - bottom - right;
    1566:	49 e0       	ldi	r20, 0x09	; 9
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	ba 01       	movw	r22, r20
    156c:	62 1b       	sub	r22, r18
    156e:	73 0b       	sbc	r23, r19
    1570:	fb 01       	movw	r30, r22
    1572:	e8 1b       	sub	r30, r24
    1574:	f9 0b       	sbc	r31, r25
    1576:	cf 01       	movw	r24, r30
    1578:	2f 85       	ldd	r18, Y+15	; 0x0f
    157a:	38 89       	ldd	r19, Y+16	; 0x10
    157c:	82 1b       	sub	r24, r18
    157e:	93 0b       	sbc	r25, r19
    1580:	90 93 9d 01 	sts	0x019D, r25
    1584:	80 93 9c 01 	sts	0x019C, r24
    1588:	1b c0       	rjmp	.+54     	; 0x15c0 <determine_blobs+0x4d0>
			}
			else {
				top = far2;
    158a:	50 93 a1 01 	sts	0x01A1, r21
    158e:	40 93 a0 01 	sts	0x01A0, r20
				bottom = far1;
    1592:	90 93 9f 01 	sts	0x019F, r25
    1596:	80 93 9e 01 	sts	0x019E, r24
				right = close1;
    159a:	30 93 9b 01 	sts	0x019B, r19
    159e:	20 93 9a 01 	sts	0x019A, r18
				left = 9 - top - bottom - right;
    15a2:	69 e0       	ldi	r22, 0x09	; 9
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	fb 01       	movw	r30, r22
    15a8:	e4 1b       	sub	r30, r20
    15aa:	f5 0b       	sbc	r31, r21
    15ac:	bf 01       	movw	r22, r30
    15ae:	68 1b       	sub	r22, r24
    15b0:	79 0b       	sbc	r23, r25
    15b2:	cb 01       	movw	r24, r22
    15b4:	82 1b       	sub	r24, r18
    15b6:	93 0b       	sbc	r25, r19
    15b8:	90 93 9d 01 	sts	0x019D, r25
    15bc:	80 93 9c 01 	sts	0x019C, r24
			}
		}
	}
	return 1;
}
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	6c 96       	adiw	r28, 0x1c	; 28
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	7f 90       	pop	r7
    15e8:	6f 90       	pop	r6
    15ea:	5f 90       	pop	r5
    15ec:	4f 90       	pop	r4
    15ee:	3f 90       	pop	r3
    15f0:	2f 90       	pop	r2
    15f2:	08 95       	ret

000015f4 <local_init>:
	
	return 1;
}

unsigned char local_init() {
	m_wii_open();
    15f4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <m_wii_open>
	
	getData(x,y);
    15f8:	62 e7       	ldi	r22, 0x72	; 114
    15fa:	71 e0       	ldi	r23, 0x01	; 1
    15fc:	8a e7       	ldi	r24, 0x7A	; 122
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 37 08 	call	0x106e	; 0x106e <getData>
	

	//Determine indices of all top, bottom, left, right points
	determine_blobs();
    1604:	0e 94 78 08 	call	0x10f0	; 0x10f0 <determine_blobs>
	
	return 1;
}
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	08 95       	ret

0000160c <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
    160c:	2f 92       	push	r2
    160e:	3f 92       	push	r3
    1610:	4f 92       	push	r4
    1612:	5f 92       	push	r5
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	2d 97       	sbiw	r28, 0x0d	; 13
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	8c 01       	movw	r16, r24
	numlost = 0;
    1642:	10 92 5d 01 	sts	0x015D, r1
    1646:	10 92 5c 01 	sts	0x015C, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
    164a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
    164e:	e0 90 a0 01 	lds	r14, 0x01A0
    1652:	f0 90 a1 01 	lds	r15, 0x01A1
    1656:	f7 01       	movw	r30, r14
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	e6 58       	subi	r30, 0x86	; 134
    165e:	fe 4f       	sbci	r31, 0xFE	; 254
    1660:	20 81       	ld	r18, Z
    1662:	31 81       	ldd	r19, Z+1	; 0x01
    1664:	3a 83       	std	Y+2, r19	; 0x02
    1666:	29 83       	std	Y+1, r18	; 0x01
    1668:	2f 3f       	cpi	r18, 0xFF	; 255
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	38 07       	cpc	r19, r24
    166e:	08 f0       	brcs	.+2      	; 0x1672 <localize+0x66>
    1670:	ea c2       	rjmp	.+1492   	; 0x1c46 <localize+0x63a>
    1672:	a0 90 9e 01 	lds	r10, 0x019E
    1676:	b0 90 9f 01 	lds	r11, 0x019F
    167a:	f5 01       	movw	r30, r10
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	e6 58       	subi	r30, 0x86	; 134
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
    1684:	c0 80       	ld	r12, Z
    1686:	d1 80       	ldd	r13, Z+1	; 0x01
    1688:	9f ef       	ldi	r25, 0xFF	; 255
    168a:	c9 16       	cp	r12, r25
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	d9 06       	cpc	r13, r25
    1690:	08 f0       	brcs	.+2      	; 0x1694 <localize+0x88>
    1692:	d9 c2       	rjmp	.+1458   	; 0x1c46 <localize+0x63a>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
    1694:	b9 01       	movw	r22, r18
    1696:	6c 0d       	add	r22, r12
    1698:	7d 1d       	adc	r23, r13
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    16ae:	20 91 0c 01 	lds	r18, 0x010C
    16b2:	30 91 0d 01 	lds	r19, 0x010D
    16b6:	40 91 0e 01 	lds	r20, 0x010E
    16ba:	50 91 0f 01 	lds	r21, 0x010F
    16be:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    16c2:	6d 83       	std	Y+5, r22	; 0x05
    16c4:	7e 83       	std	Y+6, r23	; 0x06
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
    16ca:	f7 01       	movw	r30, r14
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	ee 58       	subi	r30, 0x8E	; 142
    16d2:	fe 4f       	sbci	r31, 0xFE	; 254
    16d4:	e0 80       	ld	r14, Z
    16d6:	f1 80       	ldd	r15, Z+1	; 0x01
    16d8:	f5 01       	movw	r30, r10
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	ee 58       	subi	r30, 0x8E	; 142
    16e0:	fe 4f       	sbci	r31, 0xFE	; 254
    16e2:	a0 80       	ld	r10, Z
    16e4:	b1 80       	ldd	r11, Z+1	; 0x01
    16e6:	b5 01       	movw	r22, r10
    16e8:	6e 0d       	add	r22, r14
    16ea:	7f 1d       	adc	r23, r15
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1700:	20 91 08 01 	lds	r18, 0x0108
    1704:	30 91 09 01 	lds	r19, 0x0109
    1708:	40 91 0a 01 	lds	r20, 0x010A
    170c:	50 91 0b 01 	lds	r21, 0x010B
    1710:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    1714:	69 87       	std	Y+9, r22	; 0x09
    1716:	7a 87       	std	Y+10, r23	; 0x0a
    1718:	28 2e       	mov	r2, r24
    171a:	39 2e       	mov	r3, r25
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
    171c:	b7 01       	movw	r22, r14
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1726:	2b 01       	movw	r4, r22
    1728:	3c 01       	movw	r6, r24
    172a:	b5 01       	movw	r22, r10
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	c3 01       	movw	r24, r6
    173a:	b2 01       	movw	r22, r4
    173c:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    1740:	4b 01       	movw	r8, r22
    1742:	5c 01       	movw	r10, r24
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	bf 01       	movw	r22, r30
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1752:	2b 01       	movw	r4, r22
    1754:	3c 01       	movw	r6, r24
    1756:	b6 01       	movw	r22, r12
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	c3 01       	movw	r24, r6
    1766:	b2 01       	movw	r22, r4
    1768:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    176c:	a5 01       	movw	r20, r10
    176e:	94 01       	movw	r18, r8
    1770:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <atan2>
    1774:	4b 01       	movw	r8, r22
    1776:	5c 01       	movw	r10, r24
		phi = ((float) atan2((double) posy, (double) posx));
    1778:	7d 81       	ldd	r23, Y+5	; 0x05
    177a:	6e 81       	ldd	r22, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	88 85       	ldd	r24, Y+8	; 0x08
    1780:	27 2f       	mov	r18, r23
    1782:	36 2f       	mov	r19, r22
    1784:	49 2f       	mov	r20, r25
    1786:	58 2f       	mov	r21, r24
    1788:	b9 85       	ldd	r27, Y+9	; 0x09
    178a:	aa 85       	ldd	r26, Y+10	; 0x0a
    178c:	6b 2f       	mov	r22, r27
    178e:	7a 2f       	mov	r23, r26
    1790:	82 2d       	mov	r24, r2
    1792:	93 2d       	mov	r25, r3
    1794:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <atan2>
    1798:	2b 01       	movw	r4, r22
    179a:	3c 01       	movw	r6, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
    179c:	7d 81       	ldd	r23, Y+5	; 0x05
    179e:	6e 81       	ldd	r22, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	88 85       	ldd	r24, Y+8	; 0x08
    17a4:	27 2f       	mov	r18, r23
    17a6:	36 2f       	mov	r19, r22
    17a8:	49 2f       	mov	r20, r25
    17aa:	58 2f       	mov	r21, r24
    17ac:	67 2f       	mov	r22, r23
    17ae:	73 2f       	mov	r23, r19
    17b0:	89 2f       	mov	r24, r25
    17b2:	95 2f       	mov	r25, r21
    17b4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    17b8:	6b 01       	movw	r12, r22
    17ba:	7c 01       	movw	r14, r24
    17bc:	79 85       	ldd	r23, Y+9	; 0x09
    17be:	6a 85       	ldd	r22, Y+10	; 0x0a
    17c0:	27 2f       	mov	r18, r23
    17c2:	36 2f       	mov	r19, r22
    17c4:	42 2d       	mov	r20, r2
    17c6:	53 2d       	mov	r21, r3
    17c8:	67 2f       	mov	r22, r23
    17ca:	73 2f       	mov	r23, r19
    17cc:	82 2d       	mov	r24, r2
    17ce:	93 2d       	mov	r25, r3
    17d0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    17d4:	9b 01       	movw	r18, r22
    17d6:	ac 01       	movw	r20, r24
    17d8:	c7 01       	movw	r24, r14
    17da:	b6 01       	movw	r22, r12
    17dc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
    17e0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
    17e4:	6b 01       	movw	r12, r22
    17e6:	7c 01       	movw	r14, r24
		
		if (ai1 == 0) {
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	a9 01       	movw	r20, r18
    17ee:	60 91 82 01 	lds	r22, 0x0182
    17f2:	70 91 83 01 	lds	r23, 0x0183
    17f6:	80 91 84 01 	lds	r24, 0x0184
    17fa:	90 91 85 01 	lds	r25, 0x0185
    17fe:	0e 94 36 14 	call	0x286c	; 0x286c <__cmpsf2>
    1802:	81 11       	cpse	r24, r1
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <localize+0x20a>
			ai1 = angle;
    1806:	80 92 82 01 	sts	0x0182, r8
    180a:	90 92 83 01 	sts	0x0183, r9
    180e:	a0 92 84 01 	sts	0x0184, r10
    1812:	b0 92 85 01 	sts	0x0185, r11
		}
		
		data[2] = (BETAa * ai1 + (1 - BETAa) * ai) * 180.0 / 3.14;
    1816:	23 e3       	ldi	r18, 0x33	; 51
    1818:	33 e3       	ldi	r19, 0x33	; 51
    181a:	43 e7       	ldi	r20, 0x73	; 115
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	60 91 82 01 	lds	r22, 0x0182
    1822:	70 91 83 01 	lds	r23, 0x0183
    1826:	80 91 84 01 	lds	r24, 0x0184
    182a:	90 91 85 01 	lds	r25, 0x0185
    182e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1832:	4b 01       	movw	r8, r22
    1834:	5c 01       	movw	r10, r24
    1836:	20 ed       	ldi	r18, 0xD0	; 208
    1838:	3c ec       	ldi	r19, 0xCC	; 204
    183a:	4c e4       	ldi	r20, 0x4C	; 76
    183c:	5d e3       	ldi	r21, 0x3D	; 61
    183e:	60 91 8e 01 	lds	r22, 0x018E
    1842:	70 91 8f 01 	lds	r23, 0x018F
    1846:	80 91 90 01 	lds	r24, 0x0190
    184a:	90 91 91 01 	lds	r25, 0x0191
    184e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1852:	9b 01       	movw	r18, r22
    1854:	ac 01       	movw	r20, r24
    1856:	c5 01       	movw	r24, r10
    1858:	b4 01       	movw	r22, r8
    185a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	44 e3       	ldi	r20, 0x34	; 52
    1864:	53 e4       	ldi	r21, 0x43	; 67
    1866:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    186a:	23 ec       	ldi	r18, 0xC3	; 195
    186c:	35 ef       	ldi	r19, 0xF5	; 245
    186e:	48 e4       	ldi	r20, 0x48	; 72
    1870:	50 e4       	ldi	r21, 0x40	; 64
    1872:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
    1876:	86 2e       	mov	r8, r22
    1878:	97 2e       	mov	r9, r23
    187a:	a8 2e       	mov	r10, r24
    187c:	b9 2e       	mov	r11, r25
    187e:	f8 01       	movw	r30, r16
    1880:	80 86       	std	Z+8, r8	; 0x08
    1882:	91 86       	std	Z+9, r9	; 0x09
    1884:	a2 86       	std	Z+10, r10	; 0x0a
    1886:	b3 86       	std	Z+11, r11	; 0x0b
		
		xi = (115/360.0) * (-1 * r * (float) sin((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180) - phi)));
    1888:	23 ec       	ldi	r18, 0xC3	; 195
    188a:	35 ef       	ldi	r19, 0xF5	; 245
    188c:	48 e4       	ldi	r20, 0x48	; 72
    188e:	50 e4       	ldi	r21, 0x40	; 64
    1890:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	44 e3       	ldi	r20, 0x34	; 52
    189a:	53 e4       	ldi	r21, 0x43	; 67
    189c:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
    18a0:	9b 01       	movw	r18, r22
    18a2:	ac 01       	movw	r20, r24
    18a4:	62 e5       	ldi	r22, 0x52	; 82
    18a6:	78 eb       	ldi	r23, 0xB8	; 184
    18a8:	86 e9       	ldi	r24, 0x96	; 150
    18aa:	90 e4       	ldi	r25, 0x40	; 64
    18ac:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    18b0:	a3 01       	movw	r20, r6
    18b2:	92 01       	movw	r18, r4
    18b4:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    18b8:	86 2e       	mov	r8, r22
    18ba:	97 2e       	mov	r9, r23
    18bc:	a8 2e       	mov	r10, r24
    18be:	b9 2e       	mov	r11, r25
    18c0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <sin>
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	c7 01       	movw	r24, r14
    18ca:	b6 01       	movw	r22, r12
    18cc:	90 58       	subi	r25, 0x80	; 128
    18ce:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    18d2:	29 e3       	ldi	r18, 0x39	; 57
    18d4:	3e e8       	ldi	r19, 0x8E	; 142
    18d6:	43 ea       	ldi	r20, 0xA3	; 163
    18d8:	5e e3       	ldi	r21, 0x3E	; 62
    18da:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    18de:	69 83       	std	Y+1, r22	; 0x01
    18e0:	7b 87       	std	Y+11, r23	; 0x0b
    18e2:	8d 87       	std	Y+13, r24	; 0x0d
    18e4:	9c 87       	std	Y+12, r25	; 0x0c
    18e6:	47 2f       	mov	r20, r23
    18e8:	38 2f       	mov	r19, r24
    18ea:	29 2f       	mov	r18, r25
    18ec:	86 2f       	mov	r24, r22
    18ee:	94 2f       	mov	r25, r20
    18f0:	a3 2f       	mov	r26, r19
    18f2:	b2 2f       	mov	r27, r18
    18f4:	80 93 96 01 	sts	0x0196, r24
    18f8:	90 93 97 01 	sts	0x0197, r25
    18fc:	a0 93 98 01 	sts	0x0198, r26
    1900:	b0 93 99 01 	sts	0x0199, r27
		yi = (60/205.0) * (r * (float) cos((double) (((3 * 3.14)/2) - (data[2] * 3.14 / 180)) - phi));
    1904:	68 2d       	mov	r22, r8
    1906:	79 2d       	mov	r23, r9
    1908:	8a 2d       	mov	r24, r10
    190a:	9b 2d       	mov	r25, r11
    190c:	0e 94 3a 14 	call	0x2874	; 0x2874 <cos>
    1910:	a7 01       	movw	r20, r14
    1912:	96 01       	movw	r18, r12
    1914:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1918:	29 e8       	ldi	r18, 0x89	; 137
    191a:	3a ed       	ldi	r19, 0xDA	; 218
    191c:	45 e9       	ldi	r20, 0x95	; 149
    191e:	5e e3       	ldi	r21, 0x3E	; 62
    1920:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1924:	86 2e       	mov	r8, r22
    1926:	97 2e       	mov	r9, r23
    1928:	a8 2e       	mov	r10, r24
    192a:	b9 2e       	mov	r11, r25
    192c:	86 2f       	mov	r24, r22
    192e:	99 2d       	mov	r25, r9
    1930:	aa 2d       	mov	r26, r10
    1932:	bb 2d       	mov	r27, r11
    1934:	80 93 92 01 	sts	0x0192, r24
    1938:	90 93 93 01 	sts	0x0193, r25
    193c:	a0 93 94 01 	sts	0x0194, r26
    1940:	b0 93 95 01 	sts	0x0195, r27
		
		if (xi1 == 0 && yi1 == 0) {
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	a9 01       	movw	r20, r18
    194a:	60 91 8a 01 	lds	r22, 0x018A
    194e:	70 91 8b 01 	lds	r23, 0x018B
    1952:	80 91 8c 01 	lds	r24, 0x018C
    1956:	90 91 8d 01 	lds	r25, 0x018D
    195a:	0e 94 36 14 	call	0x286c	; 0x286c <__cmpsf2>
    195e:	81 11       	cpse	r24, r1
    1960:	2b c0       	rjmp	.+86     	; 0x19b8 <localize+0x3ac>
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	a9 01       	movw	r20, r18
    1968:	60 91 86 01 	lds	r22, 0x0186
    196c:	70 91 87 01 	lds	r23, 0x0187
    1970:	80 91 88 01 	lds	r24, 0x0188
    1974:	90 91 89 01 	lds	r25, 0x0189
    1978:	0e 94 36 14 	call	0x286c	; 0x286c <__cmpsf2>
    197c:	81 11       	cpse	r24, r1
    197e:	1c c0       	rjmp	.+56     	; 0x19b8 <localize+0x3ac>
			xi1 = xi;
    1980:	59 81       	ldd	r21, Y+1	; 0x01
    1982:	4b 85       	ldd	r20, Y+11	; 0x0b
    1984:	3d 85       	ldd	r19, Y+13	; 0x0d
    1986:	2c 85       	ldd	r18, Y+12	; 0x0c
    1988:	85 2f       	mov	r24, r21
    198a:	94 2f       	mov	r25, r20
    198c:	a3 2f       	mov	r26, r19
    198e:	b2 2f       	mov	r27, r18
    1990:	80 93 8a 01 	sts	0x018A, r24
    1994:	90 93 8b 01 	sts	0x018B, r25
    1998:	a0 93 8c 01 	sts	0x018C, r26
    199c:	b0 93 8d 01 	sts	0x018D, r27
			yi1 = yi;
    19a0:	88 2d       	mov	r24, r8
    19a2:	99 2d       	mov	r25, r9
    19a4:	aa 2d       	mov	r26, r10
    19a6:	bb 2d       	mov	r27, r11
    19a8:	80 93 86 01 	sts	0x0186, r24
    19ac:	90 93 87 01 	sts	0x0187, r25
    19b0:	a0 93 88 01 	sts	0x0188, r26
    19b4:	b0 93 89 01 	sts	0x0189, r27
		}

		data[0] = BETA * xi1 + (1 - BETA) * xi;
    19b8:	23 e3       	ldi	r18, 0x33	; 51
    19ba:	33 e3       	ldi	r19, 0x33	; 51
    19bc:	43 e7       	ldi	r20, 0x73	; 115
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	60 91 8a 01 	lds	r22, 0x018A
    19c4:	70 91 8b 01 	lds	r23, 0x018B
    19c8:	80 91 8c 01 	lds	r24, 0x018C
    19cc:	90 91 8d 01 	lds	r25, 0x018D
    19d0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    19d4:	4b 01       	movw	r8, r22
    19d6:	5c 01       	movw	r10, r24
    19d8:	20 ed       	ldi	r18, 0xD0	; 208
    19da:	3c ec       	ldi	r19, 0xCC	; 204
    19dc:	4c e4       	ldi	r20, 0x4C	; 76
    19de:	5d e3       	ldi	r21, 0x3D	; 61
    19e0:	b9 81       	ldd	r27, Y+1	; 0x01
    19e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    19e4:	fd 85       	ldd	r31, Y+13	; 0x0d
    19e6:	ec 85       	ldd	r30, Y+12	; 0x0c
    19e8:	6b 2f       	mov	r22, r27
    19ea:	7a 2f       	mov	r23, r26
    19ec:	8f 2f       	mov	r24, r31
    19ee:	9e 2f       	mov	r25, r30
    19f0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    19f4:	9b 01       	movw	r18, r22
    19f6:	ac 01       	movw	r20, r24
    19f8:	c5 01       	movw	r24, r10
    19fa:	b4 01       	movw	r22, r8
    19fc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
    1a00:	f8 01       	movw	r30, r16
    1a02:	60 83       	st	Z, r22
    1a04:	71 83       	std	Z+1, r23	; 0x01
    1a06:	82 83       	std	Z+2, r24	; 0x02
    1a08:	93 83       	std	Z+3, r25	; 0x03
		data[1] = BETA * yi1 + (1 - BETA) * yi;
    1a0a:	80 90 92 01 	lds	r8, 0x0192
    1a0e:	90 90 93 01 	lds	r9, 0x0193
    1a12:	a0 90 94 01 	lds	r10, 0x0194
    1a16:	b0 90 95 01 	lds	r11, 0x0195
    1a1a:	23 e3       	ldi	r18, 0x33	; 51
    1a1c:	33 e3       	ldi	r19, 0x33	; 51
    1a1e:	43 e7       	ldi	r20, 0x73	; 115
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	60 91 86 01 	lds	r22, 0x0186
    1a26:	70 91 87 01 	lds	r23, 0x0187
    1a2a:	80 91 88 01 	lds	r24, 0x0188
    1a2e:	90 91 89 01 	lds	r25, 0x0189
    1a32:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1a36:	69 83       	std	Y+1, r22	; 0x01
    1a38:	7a 83       	std	Y+2, r23	; 0x02
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	20 ed       	ldi	r18, 0xD0	; 208
    1a40:	3c ec       	ldi	r19, 0xCC	; 204
    1a42:	4c e4       	ldi	r20, 0x4C	; 76
    1a44:	5d e3       	ldi	r21, 0x3D	; 61
    1a46:	c5 01       	movw	r24, r10
    1a48:	b4 01       	movw	r22, r8
    1a4a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1a4e:	9b 01       	movw	r18, r22
    1a50:	ac 01       	movw	r20, r24
    1a52:	69 81       	ldd	r22, Y+1	; 0x01
    1a54:	7a 81       	ldd	r23, Y+2	; 0x02
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
    1a5e:	f8 01       	movw	r30, r16
    1a60:	64 83       	std	Z+4, r22	; 0x04
    1a62:	75 83       	std	Z+5, r23	; 0x05
    1a64:	86 83       	std	Z+6, r24	; 0x06
    1a66:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[3] = x[top];
    1a68:	80 91 a0 01 	lds	r24, 0x01A0
    1a6c:	90 91 a1 01 	lds	r25, 0x01A1
    1a70:	9c 01       	movw	r18, r24
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	3a 83       	std	Y+2, r19	; 0x02
    1a78:	29 83       	std	Y+1, r18	; 0x01
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	e6 58       	subi	r30, 0x86	; 134
    1a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	64 87       	std	Z+12, r22	; 0x0c
    1a90:	75 87       	std	Z+13, r23	; 0x0d
    1a92:	86 87       	std	Z+14, r24	; 0x0e
    1a94:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    1a96:	e9 81       	ldd	r30, Y+1	; 0x01
    1a98:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9a:	ee 58       	subi	r30, 0x8E	; 142
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1aaa:	f8 01       	movw	r30, r16
    1aac:	60 8b       	std	Z+16, r22	; 0x10
    1aae:	71 8b       	std	Z+17, r23	; 0x11
    1ab0:	82 8b       	std	Z+18, r24	; 0x12
    1ab2:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    1ab4:	80 91 9e 01 	lds	r24, 0x019E
    1ab8:	90 91 9f 01 	lds	r25, 0x019F
    1abc:	9c 01       	movw	r18, r24
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	3a 83       	std	Y+2, r19	; 0x02
    1ac4:	29 83       	std	Y+1, r18	; 0x01
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	e6 58       	subi	r30, 0x86	; 134
    1aca:	fe 4f       	sbci	r31, 0xFE	; 254
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1ad8:	f8 01       	movw	r30, r16
    1ada:	64 8b       	std	Z+20, r22	; 0x14
    1adc:	75 8b       	std	Z+21, r23	; 0x15
    1ade:	86 8b       	std	Z+22, r24	; 0x16
    1ae0:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    1ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae6:	ee 58       	subi	r30, 0x8E	; 142
    1ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1af6:	f8 01       	movw	r30, r16
    1af8:	60 8f       	std	Z+24, r22	; 0x18
    1afa:	71 8f       	std	Z+25, r23	; 0x19
    1afc:	82 8f       	std	Z+26, r24	; 0x1a
    1afe:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1b00:	80 91 9a 01 	lds	r24, 0x019A
    1b04:	90 91 9b 01 	lds	r25, 0x019B
    1b08:	9c 01       	movw	r18, r24
    1b0a:	22 0f       	add	r18, r18
    1b0c:	33 1f       	adc	r19, r19
    1b0e:	3a 83       	std	Y+2, r19	; 0x02
    1b10:	29 83       	std	Y+1, r18	; 0x01
    1b12:	f9 01       	movw	r30, r18
    1b14:	e6 58       	subi	r30, 0x86	; 134
    1b16:	fe 4f       	sbci	r31, 0xFE	; 254
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1b24:	f8 01       	movw	r30, r16
    1b26:	64 8f       	std	Z+28, r22	; 0x1c
    1b28:	75 8f       	std	Z+29, r23	; 0x1d
    1b2a:	86 8f       	std	Z+30, r24	; 0x1e
    1b2c:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	ee 58       	subi	r30, 0x8E	; 142
    1b34:	fe 4f       	sbci	r31, 0xFE	; 254
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1b42:	f8 01       	movw	r30, r16
    1b44:	60 a3       	std	Z+32, r22	; 0x20
    1b46:	71 a3       	std	Z+33, r23	; 0x21
    1b48:	82 a3       	std	Z+34, r24	; 0x22
    1b4a:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1b4c:	80 91 9c 01 	lds	r24, 0x019C
    1b50:	90 91 9d 01 	lds	r25, 0x019D
    1b54:	9c 01       	movw	r18, r24
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	3a 83       	std	Y+2, r19	; 0x02
    1b5c:	29 83       	std	Y+1, r18	; 0x01
    1b5e:	f9 01       	movw	r30, r18
    1b60:	e6 58       	subi	r30, 0x86	; 134
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1b70:	f8 01       	movw	r30, r16
    1b72:	64 a3       	std	Z+36, r22	; 0x24
    1b74:	75 a3       	std	Z+37, r23	; 0x25
    1b76:	86 a3       	std	Z+38, r24	; 0x26
    1b78:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    1b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7e:	ee 58       	subi	r30, 0x8E	; 142
    1b80:	fe 4f       	sbci	r31, 0xFE	; 254
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__floatunsisf>
    1b8e:	f8 01       	movw	r30, r16
    1b90:	60 a7       	std	Z+40, r22	; 0x28
    1b92:	71 a7       	std	Z+41, r23	; 0x29
    1b94:	82 a7       	std	Z+42, r24	; 0x2a
    1b96:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	44 e3       	ldi	r20, 0x34	; 52
    1b9e:	53 e4       	ldi	r21, 0x43	; 67
    1ba0:	c3 01       	movw	r24, r6
    1ba2:	b2 01       	movw	r22, r4
    1ba4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsf3>
    1ba8:	23 ec       	ldi	r18, 0xC3	; 195
    1baa:	35 ef       	ldi	r19, 0xF5	; 245
    1bac:	48 e4       	ldi	r20, 0x48	; 72
    1bae:	50 e4       	ldi	r21, 0x40	; 64
    1bb0:	0e 94 3d 14 	call	0x287a	; 0x287a <__divsf3>
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	64 a7       	std	Z+44, r22	; 0x2c
    1bb8:	75 a7       	std	Z+45, r23	; 0x2d
    1bba:	86 a7       	std	Z+46, r24	; 0x2e
    1bbc:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    1bbe:	5d 81       	ldd	r21, Y+5	; 0x05
    1bc0:	4e 81       	ldd	r20, Y+6	; 0x06
    1bc2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc4:	28 85       	ldd	r18, Y+8	; 0x08
    1bc6:	85 2f       	mov	r24, r21
    1bc8:	94 2f       	mov	r25, r20
    1bca:	a3 2f       	mov	r26, r19
    1bcc:	b2 2f       	mov	r27, r18
    1bce:	80 ab       	std	Z+48, r24	; 0x30
    1bd0:	91 ab       	std	Z+49, r25	; 0x31
    1bd2:	a2 ab       	std	Z+50, r26	; 0x32
    1bd4:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    1bd6:	59 85       	ldd	r21, Y+9	; 0x09
    1bd8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bda:	85 2f       	mov	r24, r21
    1bdc:	94 2f       	mov	r25, r20
    1bde:	a2 2d       	mov	r26, r2
    1be0:	b3 2d       	mov	r27, r3
    1be2:	84 ab       	std	Z+52, r24	; 0x34
    1be4:	95 ab       	std	Z+53, r25	; 0x35
    1be6:	a6 ab       	std	Z+54, r26	; 0x36
    1be8:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    1bea:	c0 ae       	std	Z+56, r12	; 0x38
    1bec:	d1 ae       	std	Z+57, r13	; 0x39
    1bee:	e2 ae       	std	Z+58, r14	; 0x3a
    1bf0:	f3 ae       	std	Z+59, r15	; 0x3b
		
		xi1 = xi;
    1bf2:	80 91 96 01 	lds	r24, 0x0196
    1bf6:	90 91 97 01 	lds	r25, 0x0197
    1bfa:	a0 91 98 01 	lds	r26, 0x0198
    1bfe:	b0 91 99 01 	lds	r27, 0x0199
    1c02:	80 93 8a 01 	sts	0x018A, r24
    1c06:	90 93 8b 01 	sts	0x018B, r25
    1c0a:	a0 93 8c 01 	sts	0x018C, r26
    1c0e:	b0 93 8d 01 	sts	0x018D, r27
		yi1 = yi;
    1c12:	80 92 86 01 	sts	0x0186, r8
    1c16:	90 92 87 01 	sts	0x0187, r9
    1c1a:	a0 92 88 01 	sts	0x0188, r10
    1c1e:	b0 92 89 01 	sts	0x0189, r11
		ai1 = ai;
    1c22:	80 91 8e 01 	lds	r24, 0x018E
    1c26:	90 91 8f 01 	lds	r25, 0x018F
    1c2a:	a0 91 90 01 	lds	r26, 0x0190
    1c2e:	b0 91 91 01 	lds	r27, 0x0191
    1c32:	80 93 82 01 	sts	0x0182, r24
    1c36:	90 93 83 01 	sts	0x0183, r25
    1c3a:	a0 93 84 01 	sts	0x0184, r26
    1c3e:	b0 93 85 01 	sts	0x0185, r27
		
		return 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <localize+0x63a>
		return 1;
	}
	
	return 0;
	*/
    1c46:	2d 96       	adiw	r28, 0x0d	; 13
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	bf 90       	pop	r11
    1c64:	af 90       	pop	r10
    1c66:	9f 90       	pop	r9
    1c68:	8f 90       	pop	r8
    1c6a:	7f 90       	pop	r7
    1c6c:	6f 90       	pop	r6
    1c6e:	5f 90       	pop	r5
    1c70:	4f 90       	pop	r4
    1c72:	3f 90       	pop	r3
    1c74:	2f 90       	pop	r2
    1c76:	08 95       	ret

00001c78 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	18 2f       	mov	r17, r24
    1c80:	d6 2f       	mov	r29, r22
    1c82:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1c84:	0e 94 26 08 	call	0x104c	; 0x104c <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1c88:	94 ea       	ldi	r25, 0xA4	; 164
    1c8a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c8e:	ec eb       	ldi	r30, 0xBC	; 188
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	90 81       	ld	r25, Z
    1c94:	99 23       	and	r25, r25
    1c96:	ec f7       	brge	.-6      	; 0x1c92 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1c98:	90 e5       	ldi	r25, 0x50	; 80
    1c9a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c9e:	94 e8       	ldi	r25, 0x84	; 132
    1ca0:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1ca4:	ec eb       	ldi	r30, 0xBC	; 188
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	90 81       	ld	r25, Z
    1caa:	99 23       	and	r25, r25
    1cac:	ec f7       	brge	.-6      	; 0x1ca8 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1cae:	90 91 b9 00 	lds	r25, 0x00B9
    1cb2:	98 7f       	andi	r25, 0xF8	; 248
    1cb4:	90 32       	cpi	r25, 0x20	; 32
    1cb6:	29 f4       	brne	.+10     	; 0x1cc2 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1cb8:	84 e9       	ldi	r24, 0x94	; 148
    1cba:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	2d c0       	rjmp	.+90     	; 0x1d1c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cc8:	84 e8       	ldi	r24, 0x84	; 132
    1cca:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1cce:	ec eb       	ldi	r30, 0xBC	; 188
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	90 81       	ld	r25, Z
    1cd4:	99 23       	and	r25, r25
    1cd6:	ec f7       	brge	.-6      	; 0x1cd2 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1cd8:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cdc:	84 e8       	ldi	r24, 0x84	; 132
    1cde:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ce2:	ec eb       	ldi	r30, 0xBC	; 188
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 23       	and	r24, r24
    1cea:	ec f7       	brge	.-6      	; 0x1ce6 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1cec:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1cf0:	84 e8       	ldi	r24, 0x84	; 132
    1cf2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1cf6:	ec eb       	ldi	r30, 0xBC	; 188
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	88 23       	and	r24, r24
    1cfe:	ec f7       	brge	.-6      	; 0x1cfa <m_rf_open+0x82>
	
	TWDR = packet_length;
    1d00:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d04:	84 e8       	ldi	r24, 0x84	; 132
    1d06:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1d0a:	ec eb       	ldi	r30, 0xBC	; 188
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	88 23       	and	r24, r24
    1d12:	ec f7       	brge	.-6      	; 0x1d0e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d14:	84 e9       	ldi	r24, 0x94	; 148
    1d16:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
}
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	08 95       	ret

00001d24 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d28:	24 ea       	ldi	r18, 0xA4	; 164
    1d2a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1d2e:	ec eb       	ldi	r30, 0xBC	; 188
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	20 81       	ld	r18, Z
    1d34:	22 23       	and	r18, r18
    1d36:	ec f7       	brge	.-6      	; 0x1d32 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1d38:	21 e5       	ldi	r18, 0x51	; 81
    1d3a:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d3e:	24 e8       	ldi	r18, 0x84	; 132
    1d40:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1d44:	ec eb       	ldi	r30, 0xBC	; 188
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	20 81       	ld	r18, Z
    1d4a:	22 23       	and	r18, r18
    1d4c:	ec f7       	brge	.-6      	; 0x1d48 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1d4e:	20 91 b9 00 	lds	r18, 0x00B9
    1d52:	28 7f       	andi	r18, 0xF8	; 248
    1d54:	28 34       	cpi	r18, 0x48	; 72
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d58:	84 e9       	ldi	r24, 0x94	; 148
    1d5a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d62:	24 ec       	ldi	r18, 0xC4	; 196
    1d64:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1d68:	ec eb       	ldi	r30, 0xBC	; 188
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	20 81       	ld	r18, Z
    1d6e:	22 23       	and	r18, r18
    1d70:	ec f7       	brge	.-6      	; 0x1d6c <m_rf_read+0x48>
	bytes = TWDR;
    1d72:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1d76:	46 13       	cpse	r20, r22
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	41 50       	subi	r20, 0x01	; 1
    1d7e:	51 09       	sbc	r21, r1
    1d80:	14 16       	cp	r1, r20
    1d82:	15 06       	cpc	r1, r21
    1d84:	44 f0       	brlt	.+16     	; 0x1d96 <m_rf_read+0x72>
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	18 c0       	rjmp	.+48     	; 0x1dbc <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d8c:	84 e9       	ldi	r24, 0x94	; 148
    1d8e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	25 c0       	rjmp	.+74     	; 0x1de0 <m_rf_read+0xbc>
    1d96:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1d9c:	ec eb       	ldi	r30, 0xBC	; 188
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1da2:	cb eb       	ldi	r28, 0xBB	; 187
    1da4:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1da6:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1da8:	60 81       	ld	r22, Z
    1daa:	66 23       	and	r22, r22
    1dac:	ec f7       	brge	.-6      	; 0x1da8 <m_rf_read+0x84>
		buffer[i] = TWDR;
    1dae:	68 81       	ld	r22, Y
    1db0:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	24 17       	cp	r18, r20
    1db8:	35 07       	cpc	r19, r21
    1dba:	ac f3       	brlt	.-22     	; 0x1da6 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1dbc:	24 e8       	ldi	r18, 0x84	; 132
    1dbe:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1dc2:	ec eb       	ldi	r30, 0xBC	; 188
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	20 81       	ld	r18, Z
    1dc8:	22 23       	and	r18, r18
    1dca:	ec f7       	brge	.-6      	; 0x1dc6 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    1dcc:	20 91 bb 00 	lds	r18, 0x00BB
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	e4 0f       	add	r30, r20
    1dd4:	f5 1f       	adc	r31, r21
    1dd6:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1dd8:	84 e9       	ldi	r24, 0x94	; 148
    1dda:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1de6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1de8:	f8 94       	cli
	if (!usb_configuration) {
    1dea:	80 91 bb 01 	lds	r24, 0x01BB
    1dee:	81 11       	cpse	r24, r1
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <m_usb_rx_char+0x12>
		SREG = intr_state;
    1df2:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1df4:	8f ef       	ldi	r24, 0xFF	; 255
    1df6:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    1df8:	83 e0       	ldi	r24, 0x03	; 3
    1dfa:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    1dfe:	80 91 e8 00 	lds	r24, 0x00E8
    1e02:	85 fd       	sbrc	r24, 5
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    1e06:	9f bf       	out	0x3f, r25	; 63
		return -1;
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    1e0c:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    1e10:	20 91 e8 00 	lds	r18, 0x00E8
    1e14:	25 fd       	sbrc	r18, 5
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <m_usb_rx_char+0x38>
    1e18:	2b e6       	ldi	r18, 0x6B	; 107
    1e1a:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    1e1e:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    1e20:	08 95       	ret

00001e22 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1e22:	80 91 bb 01 	lds	r24, 0x01BB
    1e26:	88 23       	and	r24, r24
    1e28:	89 f0       	breq	.+34     	; 0x1e4c <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    1e2a:	2f b7       	in	r18, 0x3f	; 63
		cli();
    1e2c:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    1e34:	80 91 e8 00 	lds	r24, 0x00E8
    1e38:	85 ff       	sbrs	r24, 5
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    1e3c:	e8 ee       	ldi	r30, 0xE8	; 232
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	9b e6       	ldi	r25, 0x6B	; 107
    1e42:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    1e44:	80 81       	ld	r24, Z
    1e46:	85 fd       	sbrc	r24, 5
    1e48:	fc cf       	rjmp	.-8      	; 0x1e42 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    1e4a:	2f bf       	out	0x3f, r18	; 63
    1e4c:	08 95       	ret

00001e4e <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1e52:	90 91 bb 01 	lds	r25, 0x01BB
    1e56:	99 23       	and	r25, r25
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <m_usb_tx_char+0xe>
    1e5a:	4d c0       	rjmp	.+154    	; 0x1ef6 <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1e5c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e5e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1e60:	24 e0       	ldi	r18, 0x04	; 4
    1e62:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1e66:	20 91 bd 01 	lds	r18, 0x01BD
    1e6a:	22 23       	and	r18, r18
    1e6c:	49 f0       	breq	.+18     	; 0x1e80 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1e6e:	20 91 e8 00 	lds	r18, 0x00E8
    1e72:	25 fd       	sbrc	r18, 5
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1e76:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	42 c0       	rjmp	.+132    	; 0x1f00 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    1e7c:	10 92 bd 01 	sts	0x01BD, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1e80:	30 91 e4 00 	lds	r19, 0x00E4
    1e84:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1e86:	20 91 e8 00 	lds	r18, 0x00E8
    1e8a:	25 fd       	sbrc	r18, 5
    1e8c:	25 c0       	rjmp	.+74     	; 0x1ed8 <m_usb_tx_char+0x8a>
		SREG = intr_state;
    1e8e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1e90:	90 91 e4 00 	lds	r25, 0x00E4
    1e94:	93 17       	cp	r25, r19
    1e96:	49 f0       	breq	.+18     	; 0x1eaa <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1e98:	90 91 bb 01 	lds	r25, 0x01BB
    1e9c:	91 11       	cpse	r25, r1
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <m_usb_tx_char+0x70>
    1ea0:	2c c0       	rjmp	.+88     	; 0x1efa <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1ea2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1ea4:	98 81       	ld	r25, Y
    1ea6:	93 13       	cpse	r25, r19
    1ea8:	05 c0       	rjmp	.+10     	; 0x1eb4 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	80 93 bd 01 	sts	0x01BD, r24
			return -1;
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	26 c0       	rjmp	.+76     	; 0x1f00 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1eb4:	90 91 bb 01 	lds	r25, 0x01BB
    1eb8:	91 11       	cpse	r25, r1
    1eba:	08 c0       	rjmp	.+16     	; 0x1ecc <m_usb_tx_char+0x7e>
    1ebc:	20 c0       	rjmp	.+64     	; 0x1efe <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1ebe:	a9 ee       	ldi	r26, 0xE9	; 233
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1ec4:	e8 ee       	ldi	r30, 0xE8	; 232
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1ec8:	c4 ee       	ldi	r28, 0xE4	; 228
    1eca:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    1ecc:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1ece:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1ed0:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1ed2:	20 81       	ld	r18, Z
    1ed4:	25 ff       	sbrs	r18, 5
    1ed6:	e5 cf       	rjmp	.-54     	; 0x1ea2 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1ed8:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1edc:	80 91 e8 00 	lds	r24, 0x00E8
    1ee0:	85 fd       	sbrc	r24, 5
    1ee2:	03 c0       	rjmp	.+6      	; 0x1eea <m_usb_tx_char+0x9c>
    1ee4:	8a e3       	ldi	r24, 0x3A	; 58
    1ee6:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1eea:	85 e0       	ldi	r24, 0x05	; 5
    1eec:	80 93 ba 01 	sts	0x01BA, r24
	SREG = intr_state;
    1ef0:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <m_usb_tx_char+0xb2>
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	08 95       	ret

00001f06 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	ef 93       	push	r30
    1f16:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1f18:	e1 ee       	ldi	r30, 0xE1	; 225
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
        UDINT = 0;
    1f1e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1f20:	83 ff       	sbrs	r24, 3
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <__vector_10+0x40>
		UENUM = 0;
    1f24:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1f2e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1f32:	92 e1       	ldi	r25, 0x12	; 18
    1f34:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1f38:	98 e0       	ldi	r25, 0x08	; 8
    1f3a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1f3e:	10 92 bb 01 	sts	0x01BB, r1
		cdc_line_rtsdtr = 0;
    1f42:	10 92 bc 01 	sts	0x01BC, r1
        }
	if (intbits & (1<<SOFI)) {
    1f46:	82 ff       	sbrs	r24, 2
    1f48:	13 c0       	rjmp	.+38     	; 0x1f70 <__vector_10+0x6a>
		if (usb_configuration) {
    1f4a:	80 91 bb 01 	lds	r24, 0x01BB
    1f4e:	88 23       	and	r24, r24
    1f50:	79 f0       	breq	.+30     	; 0x1f70 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1f52:	80 91 ba 01 	lds	r24, 0x01BA
			if (t) {
    1f56:	88 23       	and	r24, r24
    1f58:	59 f0       	breq	.+22     	; 0x1f70 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	80 93 ba 01 	sts	0x01BA, r24
				if (!t) {
    1f60:	81 11       	cpse	r24, r1
    1f62:	06 c0       	rjmp	.+12     	; 0x1f70 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1f64:	84 e0       	ldi	r24, 0x04	; 4
    1f66:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1f6a:	8a e3       	ldi	r24, 0x3A	; 58
    1f6c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1f70:	ff 91       	pop	r31
    1f72:	ef 91       	pop	r30
    1f74:	9f 91       	pop	r25
    1f76:	8f 91       	pop	r24
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	0f 90       	pop	r0
    1f7e:	1f 90       	pop	r1
    1f80:	18 95       	reti

00001f82 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	2f 93       	push	r18
    1f92:	3f 93       	push	r19
    1f94:	4f 93       	push	r20
    1f96:	5f 93       	push	r21
    1f98:	6f 93       	push	r22
    1f9a:	7f 93       	push	r23
    1f9c:	8f 93       	push	r24
    1f9e:	9f 93       	push	r25
    1fa0:	af 93       	push	r26
    1fa2:	bf 93       	push	r27
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1fac:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1fb0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1fb4:	83 ff       	sbrs	r24, 3
    1fb6:	51 c1       	rjmp	.+674    	; 0x225a <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    1fb8:	e1 ef       	ldi	r30, 0xF1	; 241
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1fbe:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1fc0:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1fc2:	30 81       	ld	r19, Z
    1fc4:	93 2f       	mov	r25, r19
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	dc 01       	movw	r26, r24
    1fca:	a2 2b       	or	r26, r18
    1fcc:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1fce:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1fd0:	60 81       	ld	r22, Z
    1fd2:	96 2f       	mov	r25, r22
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	85 2b       	or	r24, r21
                wLength = UEDATX;
    1fd8:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    1fda:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1fdc:	52 ef       	ldi	r21, 0xF2	; 242
    1fde:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1fe2:	46 30       	cpi	r20, 0x06	; 6
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <__vector_11+0x66>
    1fe6:	5c c0       	rjmp	.+184    	; 0x20a0 <__vector_11+0x11e>
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1fea:	81 e2       	ldi	r24, 0x21	; 33
    1fec:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1ff0:	3b c1       	rjmp	.+630    	; 0x2268 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1ff2:	c6 e0       	ldi	r28, 0x06	; 6
    1ff4:	49 e7       	ldi	r20, 0x79	; 121
    1ff6:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1ff8:	fa 01       	movw	r30, r20
    1ffa:	65 91       	lpm	r22, Z+
    1ffc:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1ffe:	26 17       	cp	r18, r22
    2000:	37 07       	cpc	r19, r23
    2002:	19 f0       	breq	.+6      	; 0x200a <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    2004:	49 5f       	subi	r20, 0xF9	; 249
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    2008:	20 c0       	rjmp	.+64     	; 0x204a <__vector_11+0xc8>
				}
				list += 2;
    200a:	fa 01       	movw	r30, r20
    200c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    200e:	65 91       	lpm	r22, Z+
    2010:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2012:	86 17       	cp	r24, r22
    2014:	97 07       	cpc	r25, r23
    2016:	19 f0       	breq	.+6      	; 0x201e <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    2018:	49 5f       	subi	r20, 0xF9	; 249
    201a:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    201c:	16 c0       	rjmp	.+44     	; 0x204a <__vector_11+0xc8>
				}
				list += 2;
    201e:	fa 01       	movw	r30, r20
    2020:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2022:	85 91       	lpm	r24, Z+
    2024:	94 91       	lpm	r25, Z
    2026:	28 2f       	mov	r18, r24
    2028:	39 2f       	mov	r19, r25
				list += 2;
    202a:	fa 01       	movw	r30, r20
    202c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    202e:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2030:	9b 2f       	mov	r25, r27
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2036:	8f 3f       	cpi	r24, 0xFF	; 255
    2038:	91 05       	cpc	r25, r1
    203a:	19 f0       	breq	.+6      	; 0x2042 <__vector_11+0xc0>
    203c:	10 f0       	brcs	.+4      	; 0x2042 <__vector_11+0xc0>
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	84 17       	cp	r24, r20
    2044:	28 f4       	brcc	.+10     	; 0x2050 <__vector_11+0xce>
    2046:	48 2f       	mov	r20, r24
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <__vector_11+0xce>
    204a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    204c:	a9 f6       	brne	.-86     	; 0x1ff8 <__vector_11+0x76>
    204e:	cd cf       	rjmp	.-102    	; 0x1fea <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2050:	c8 ee       	ldi	r28, 0xE8	; 232
    2052:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2054:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2056:	a1 ef       	ldi	r26, 0xF1	; 241
    2058:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    205a:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    205c:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    205e:	98 2f       	mov	r25, r24
    2060:	95 70       	andi	r25, 0x05	; 5
    2062:	e1 f3       	breq	.-8      	; 0x205c <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2064:	82 fd       	sbrc	r24, 2
    2066:	00 c1       	rjmp	.+512    	; 0x2268 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2068:	64 2f       	mov	r22, r20
    206a:	41 31       	cpi	r20, 0x11	; 17
    206c:	08 f0       	brcs	.+2      	; 0x2070 <__vector_11+0xee>
    206e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    2070:	66 23       	and	r22, r22
    2072:	09 f4       	brne	.+2      	; 0x2076 <__vector_11+0xf4>
    2074:	f6 c0       	rjmp	.+492    	; 0x2262 <__vector_11+0x2e0>
    2076:	c9 01       	movw	r24, r18
    2078:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    207a:	fc 01       	movw	r30, r24
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	e4 91       	lpm	r30, Z
    2080:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2082:	51 50       	subi	r21, 0x01	; 1
    2084:	d1 f7       	brne	.-12     	; 0x207a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2086:	86 2f       	mov	r24, r22
    2088:	81 50       	subi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2092:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2094:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2096:	41 11       	cpse	r20, r1
    2098:	e1 cf       	rjmp	.-62     	; 0x205c <__vector_11+0xda>
    209a:	60 31       	cpi	r22, 0x10	; 16
    209c:	f9 f2       	breq	.-66     	; 0x205c <__vector_11+0xda>
    209e:	e4 c0       	rjmp	.+456    	; 0x2268 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    20a0:	45 30       	cpi	r20, 0x05	; 5
    20a2:	61 f4       	brne	.+24     	; 0x20bc <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    20a4:	8e ef       	ldi	r24, 0xFE	; 254
    20a6:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    20aa:	e8 ee       	ldi	r30, 0xE8	; 232
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 ff       	sbrs	r24, 0
    20b2:	fd cf       	rjmp	.-6      	; 0x20ae <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    20b4:	20 68       	ori	r18, 0x80	; 128
    20b6:	20 93 e3 00 	sts	0x00E3, r18
			return;
    20ba:	d6 c0       	rjmp	.+428    	; 0x2268 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    20bc:	49 30       	cpi	r20, 0x09	; 9
    20be:	a1 f5       	brne	.+104    	; 0x2128 <__vector_11+0x1a6>
    20c0:	71 11       	cpse	r23, r1
    20c2:	5b c0       	rjmp	.+182    	; 0x217a <__vector_11+0x1f8>
			usb_configuration = wValue;
    20c4:	20 93 bb 01 	sts	0x01BB, r18
			cdc_line_rtsdtr = 0;
    20c8:	10 92 bc 01 	sts	0x01BC, r1
			transmit_flush_timer = 0;
    20cc:	10 92 ba 01 	sts	0x01BA, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    20d0:	8e ef       	ldi	r24, 0xFE	; 254
    20d2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    20d6:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    20d8:	83 ea       	ldi	r24, 0xA3	; 163
    20da:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    20dc:	c9 ee       	ldi	r28, 0xE9	; 233
    20de:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    20e0:	ab ee       	ldi	r26, 0xEB	; 235
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    20e4:	6c ee       	ldi	r22, 0xEC	; 236
    20e6:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    20e8:	4d ee       	ldi	r20, 0xED	; 237
    20ea:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    20ec:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    20ee:	9c 01       	movw	r18, r24
    20f0:	2f 5f       	subi	r18, 0xFF	; 255
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	fc 01       	movw	r30, r24
    20f6:	04 91       	lpm	r16, Z
				UECONX = en;
    20f8:	0c 93       	st	X, r16
				if (en) {
    20fa:	00 23       	and	r16, r16
    20fc:	59 f0       	breq	.+22     	; 0x2114 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    20fe:	f9 01       	movw	r30, r18
    2100:	24 91       	lpm	r18, Z
    2102:	fb 01       	movw	r30, r22
    2104:	20 83       	st	Z, r18
    2106:	fc 01       	movw	r30, r24
    2108:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    210a:	03 96       	adiw	r24, 0x03	; 3
    210c:	24 91       	lpm	r18, Z
    210e:	fa 01       	movw	r30, r20
    2110:	20 83       	st	Z, r18
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2114:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2116:	1f 5f       	subi	r17, 0xFF	; 255
    2118:	15 30       	cpi	r17, 0x05	; 5
    211a:	41 f7       	brne	.-48     	; 0x20ec <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    211c:	ea ee       	ldi	r30, 0xEA	; 234
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	8e e1       	ldi	r24, 0x1E	; 30
    2122:	80 83       	st	Z, r24
        		UERST = 0;
    2124:	10 82       	st	Z, r1
			return;
    2126:	a0 c0       	rjmp	.+320    	; 0x2268 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2128:	48 30       	cpi	r20, 0x08	; 8
    212a:	81 f4       	brne	.+32     	; 0x214c <__vector_11+0x1ca>
    212c:	70 38       	cpi	r23, 0x80	; 128
    212e:	09 f0       	breq	.+2      	; 0x2132 <__vector_11+0x1b0>
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2132:	e8 ee       	ldi	r30, 0xE8	; 232
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	80 ff       	sbrs	r24, 0
    213a:	fd cf       	rjmp	.-6      	; 0x2136 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    213c:	80 91 bb 01 	lds	r24, 0x01BB
    2140:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2144:	8e ef       	ldi	r24, 0xFE	; 254
    2146:	80 93 e8 00 	sts	0x00E8, r24
    214a:	8e c0       	rjmp	.+284    	; 0x2268 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    214c:	41 32       	cpi	r20, 0x21	; 33
    214e:	a9 f4       	brne	.+42     	; 0x217a <__vector_11+0x1f8>
    2150:	71 3a       	cpi	r23, 0xA1	; 161
    2152:	f1 f5       	brne	.+124    	; 0x21d0 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2154:	e8 ee       	ldi	r30, 0xE8	; 232
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 ff       	sbrs	r24, 0
    215c:	fd cf       	rjmp	.-6      	; 0x2158 <__vector_11+0x1d6>
    215e:	e0 e1       	ldi	r30, 0x10	; 16
    2160:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2162:	a1 ef       	ldi	r26, 0xF1	; 241
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	81 91       	ld	r24, Z+
    2168:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	e7 31       	cpi	r30, 0x17	; 23
    216e:	f4 07       	cpc	r31, r20
    2170:	d1 f7       	brne	.-12     	; 0x2166 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2172:	8e ef       	ldi	r24, 0xFE	; 254
    2174:	80 93 e8 00 	sts	0x00E8, r24
    2178:	77 c0       	rjmp	.+238    	; 0x2268 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    217a:	40 32       	cpi	r20, 0x20	; 32
    217c:	c9 f4       	brne	.+50     	; 0x21b0 <__vector_11+0x22e>
    217e:	71 32       	cpi	r23, 0x21	; 33
    2180:	09 f0       	breq	.+2      	; 0x2184 <__vector_11+0x202>
    2182:	6b c0       	rjmp	.+214    	; 0x225a <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2184:	e8 ee       	ldi	r30, 0xE8	; 232
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	82 ff       	sbrs	r24, 2
    218c:	fd cf       	rjmp	.-6      	; 0x2188 <__vector_11+0x206>
    218e:	e0 e1       	ldi	r30, 0x10	; 16
    2190:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2192:	a1 ef       	ldi	r26, 0xF1	; 241
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	8c 91       	ld	r24, X
    2198:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    219a:	51 e0       	ldi	r21, 0x01	; 1
    219c:	e7 31       	cpi	r30, 0x17	; 23
    219e:	f5 07       	cpc	r31, r21
    21a0:	d1 f7       	brne	.-12     	; 0x2196 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    21a2:	e8 ee       	ldi	r30, 0xE8	; 232
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8b ef       	ldi	r24, 0xFB	; 251
    21a8:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21aa:	8e ef       	ldi	r24, 0xFE	; 254
    21ac:	80 83       	st	Z, r24
    21ae:	5c c0       	rjmp	.+184    	; 0x2268 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    21b0:	42 32       	cpi	r20, 0x22	; 34
    21b2:	71 f4       	brne	.+28     	; 0x21d0 <__vector_11+0x24e>
    21b4:	71 32       	cpi	r23, 0x21	; 33
    21b6:	09 f0       	breq	.+2      	; 0x21ba <__vector_11+0x238>
    21b8:	50 c0       	rjmp	.+160    	; 0x225a <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    21ba:	20 93 bc 01 	sts	0x01BC, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21be:	e8 ee       	ldi	r30, 0xE8	; 232
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 ff       	sbrs	r24, 0
    21c6:	fd cf       	rjmp	.-6      	; 0x21c2 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21c8:	8e ef       	ldi	r24, 0xFE	; 254
    21ca:	80 93 e8 00 	sts	0x00E8, r24
    21ce:	4c c0       	rjmp	.+152    	; 0x2268 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    21d0:	41 11       	cpse	r20, r1
    21d2:	1a c0       	rjmp	.+52     	; 0x2208 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21d4:	e8 ee       	ldi	r30, 0xE8	; 232
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	20 81       	ld	r18, Z
    21da:	20 ff       	sbrs	r18, 0
    21dc:	fd cf       	rjmp	.-6      	; 0x21d8 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    21de:	72 38       	cpi	r23, 0x82	; 130
    21e0:	51 f4       	brne	.+20     	; 0x21f6 <__vector_11+0x274>
				UENUM = wIndex;
    21e2:	e9 ee       	ldi	r30, 0xE9	; 233
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    21e8:	80 91 eb 00 	lds	r24, 0x00EB
    21ec:	85 fb       	bst	r24, 5
    21ee:	88 27       	eor	r24, r24
    21f0:	80 f9       	bld	r24, 0
				UENUM = 0;
    21f2:	10 82       	st	Z, r1
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    21f6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    21f8:	e1 ef       	ldi	r30, 0xF1	; 241
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 83       	st	Z, r24
			UEDATX = 0;
    21fe:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2200:	8e ef       	ldi	r24, 0xFE	; 254
    2202:	80 93 e8 00 	sts	0x00E8, r24
    2206:	30 c0       	rjmp	.+96     	; 0x2268 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2208:	41 30       	cpi	r20, 0x01	; 1
    220a:	11 f0       	breq	.+4      	; 0x2210 <__vector_11+0x28e>
    220c:	43 30       	cpi	r20, 0x03	; 3
    220e:	29 f5       	brne	.+74     	; 0x225a <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    2210:	72 30       	cpi	r23, 0x02	; 2
    2212:	19 f5       	brne	.+70     	; 0x225a <__vector_11+0x2d8>
    2214:	23 2b       	or	r18, r19
    2216:	09 f5       	brne	.+66     	; 0x225a <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    2218:	8f 77       	andi	r24, 0x7F	; 127
    221a:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    221c:	38 2f       	mov	r19, r24
    221e:	31 50       	subi	r19, 0x01	; 1
    2220:	34 30       	cpi	r19, 0x04	; 4
    2222:	d8 f4       	brcc	.+54     	; 0x225a <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2224:	3e ef       	ldi	r19, 0xFE	; 254
    2226:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    222a:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    222e:	43 30       	cpi	r20, 0x03	; 3
    2230:	21 f4       	brne	.+8      	; 0x223a <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2232:	81 e2       	ldi	r24, 0x21	; 33
    2234:	80 93 eb 00 	sts	0x00EB, r24
    2238:	17 c0       	rjmp	.+46     	; 0x2268 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    223a:	99 e1       	ldi	r25, 0x19	; 25
    223c:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    2240:	21 e0       	ldi	r18, 0x01	; 1
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	d9 01       	movw	r26, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <__vector_11+0x2ca>
    2248:	aa 0f       	add	r26, r26
    224a:	bb 1f       	adc	r27, r27
    224c:	8a 95       	dec	r24
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <__vector_11+0x2c6>
    2250:	ea ee       	ldi	r30, 0xEA	; 234
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	a0 83       	st	Z, r26
					UERST = 0;
    2256:	10 82       	st	Z, r1
    2258:	07 c0       	rjmp	.+14     	; 0x2268 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    225a:	81 e2       	ldi	r24, 0x21	; 33
    225c:	80 93 eb 00 	sts	0x00EB, r24
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2262:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2264:	41 11       	cpse	r20, r1
    2266:	fa ce       	rjmp	.-524    	; 0x205c <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2268:	ff 91       	pop	r31
    226a:	ef 91       	pop	r30
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	0f 90       	pop	r0
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	0f 90       	pop	r0
    228e:	1f 90       	pop	r1
    2290:	18 95       	reti

00002292 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	27 97       	sbiw	r28, 0x07	; 7
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    22ae:	8e 01       	movw	r16, r28
    22b0:	0f 5f       	subi	r16, 0xFF	; 255
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	27 e0       	ldi	r18, 0x07	; 7
    22b6:	f8 01       	movw	r30, r16
    22b8:	11 92       	st	Z+, r1
    22ba:	2a 95       	dec	r18
    22bc:	e9 f7       	brne	.-6      	; 0x22b8 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    22be:	4a e0       	ldi	r20, 0x0A	; 10
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	b8 01       	movw	r22, r16
    22c4:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    22c8:	7e 01       	movw	r14, r28
    22ca:	f8 e0       	ldi	r31, 0x08	; 8
    22cc:	ef 0e       	add	r14, r31
    22ce:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    22d0:	f8 01       	movw	r30, r16
    22d2:	81 91       	ld	r24, Z+
    22d4:	8f 01       	movw	r16, r30
    22d6:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    22d8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    22dc:	0e 15       	cp	r16, r14
    22de:	1f 05       	cpc	r17, r15
    22e0:	b9 f7       	brne	.-18     	; 0x22d0 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    22e2:	27 96       	adiw	r28, 0x07	; 7
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	08 95       	ret

000022fc <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2300:	ec eb       	ldi	r30, 0xBC	; 188
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	88 23       	and	r24, r24
    2308:	34 f0       	brlt	.+12     	; 0x2316 <twi_wait+0x1a>
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	29 3e       	cpi	r18, 0xE9	; 233
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	38 07       	cpc	r19, r24
    2314:	b9 f7       	brne	.-18     	; 0x2304 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	28 3e       	cpi	r18, 0xE8	; 232
    231a:	33 40       	sbci	r19, 0x03	; 3
    231c:	09 f4       	brne	.+2      	; 0x2320 <twi_wait+0x24>
    231e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2320:	08 95       	ret

00002322 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2322:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2326:	84 e8       	ldi	r24, 0x84	; 132
    2328:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    232c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <twi_wait>
    2330:	88 23       	and	r24, r24
    2332:	21 f0       	breq	.+8      	; 0x233c <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2334:	80 91 b9 00 	lds	r24, 0x00B9
    2338:	88 7f       	andi	r24, 0xF8	; 248
    233a:	08 95       	ret
	} else {
		return 0;					// comm failure
    233c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    233e:	08 95       	ret

00002340 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2340:	cf 93       	push	r28
    2342:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2344:	94 ea       	ldi	r25, 0xA4	; 164
    2346:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    234a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <twi_wait>
    234e:	88 23       	and	r24, r24
    2350:	61 f0       	breq	.+24     	; 0x236a <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2352:	8c 2f       	mov	r24, r28
    2354:	88 0f       	add	r24, r24
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    235c:	88 34       	cpi	r24, 0x48	; 72
    235e:	39 f4       	brne	.+14     	; 0x236e <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2360:	84 e9       	ldi	r24, 0x94	; 148
    2362:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	01 c0       	rjmp	.+2      	; 0x2370 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    236e:	81 e0       	ldi	r24, 0x01	; 1
}	
    2370:	cf 91       	pop	r28
    2372:	08 95       	ret

00002374 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2374:	cf 93       	push	r28
    2376:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2378:	94 ea       	ldi	r25, 0xA4	; 164
    237a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    237e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <twi_wait>
    2382:	88 23       	and	r24, r24
    2384:	59 f0       	breq	.+22     	; 0x239c <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2386:	8c 2f       	mov	r24, r28
    2388:	88 0f       	add	r24, r24
    238a:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    238e:	80 32       	cpi	r24, 0x20	; 32
    2390:	39 f4       	brne	.+14     	; 0x23a0 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2392:	84 e9       	ldi	r24, 0x94	; 148
    2394:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	03 c0       	rjmp	.+6      	; 0x23a2 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	01 c0       	rjmp	.+2      	; 0x23a2 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    23a0:	81 e0       	ldi	r24, 0x01	; 1
}	
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    23a6:	84 e9       	ldi	r24, 0x94	; 148
    23a8:	80 93 bc 00 	sts	0x00BC, r24
    23ac:	08 95       	ret

000023ae <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	60 97       	sbiw	r28, 0x10	; 16
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	e8 2e       	mov	r14, r24
    23cc:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    23ce:	fe 01       	movw	r30, r28
    23d0:	31 96       	adiw	r30, 0x01	; 1
    23d2:	80 e1       	ldi	r24, 0x10	; 16
    23d4:	df 01       	movw	r26, r30
    23d6:	1d 92       	st	X+, r1
    23d8:	8a 95       	dec	r24
    23da:	e9 f7       	brne	.-6      	; 0x23d6 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    23dc:	88 e5       	ldi	r24, 0x58	; 88
    23de:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    23e2:	88 23       	and	r24, r24
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <m_wii_read+0x3a>
    23e6:	66 c0       	rjmp	.+204    	; 0x24b4 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    23e8:	86 e3       	ldi	r24, 0x36	; 54
    23ea:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    23ee:	88 23       	and	r24, r24
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <m_wii_read+0x46>
    23f2:	62 c0       	rjmp	.+196    	; 0x24b8 <m_wii_read+0x10a>
	end();
    23f4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23f8:	b8 e0       	ldi	r27, 0x08	; 8
    23fa:	ba 95       	dec	r27
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <m_wii_read+0x4c>
    23fe:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2400:	88 e5       	ldi	r24, 0x58	; 88
    2402:	0e 94 a0 11 	call	0x2340	; 0x2340 <start_read>
    2406:	88 23       	and	r24, r24
    2408:	09 f4       	brne	.+2      	; 0x240c <m_wii_read+0x5e>
    240a:	58 c0       	rjmp	.+176    	; 0x24bc <m_wii_read+0x10e>
    240c:	ae 01       	movw	r20, r28
    240e:	4f 5f       	subi	r20, 0xFF	; 255
    2410:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2412:	8e 01       	movw	r16, r28
    2414:	00 5f       	subi	r16, 0xF0	; 240
    2416:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2418:	ec eb       	ldi	r30, 0xBC	; 188
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    241e:	2b eb       	ldi	r18, 0xBB	; 187
    2420:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2422:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2424:	80 81       	ld	r24, Z
    2426:	88 23       	and	r24, r24
    2428:	ec f7       	brge	.-6      	; 0x2424 <m_wii_read+0x76>
		temp[i] = TWDR;
    242a:	d9 01       	movw	r26, r18
    242c:	8c 91       	ld	r24, X
    242e:	da 01       	movw	r26, r20
    2430:	8d 93       	st	X+, r24
    2432:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2434:	a0 17       	cp	r26, r16
    2436:	b1 07       	cpc	r27, r17
    2438:	a1 f7       	brne	.-24     	; 0x2422 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    243a:	84 e8       	ldi	r24, 0x84	; 132
    243c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2440:	ec eb       	ldi	r30, 0xBC	; 188
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	88 23       	and	r24, r24
    2448:	ec f7       	brge	.-6      	; 0x2444 <m_wii_read+0x96>
	temp[15] = TWDR;
    244a:	80 91 bb 00 	lds	r24, 0x00BB
    244e:	88 8b       	std	Y+16, r24	; 0x10
	end();
    2450:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
    2454:	de 01       	movw	r26, r28
    2456:	14 96       	adiw	r26, 0x04	; 4
    2458:	6e 2d       	mov	r22, r14
    245a:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    245c:	4c 91       	ld	r20, X
    245e:	24 2f       	mov	r18, r20
    2460:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2462:	cd 01       	movw	r24, r26
    2464:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2466:	fc 01       	movw	r30, r24
    2468:	80 81       	ld	r24, Z
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	f0 e1       	ldi	r31, 0x10	; 16
    246e:	2f 9f       	mul	r18, r31
    2470:	80 0d       	add	r24, r0
    2472:	91 1d       	adc	r25, r1
    2474:	11 24       	eor	r1, r1
    2476:	fb 01       	movw	r30, r22
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    247c:	84 2f       	mov	r24, r20
    247e:	80 7c       	andi	r24, 0xC0	; 192
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    248a:	9d 01       	movw	r18, r26
    248c:	21 50       	subi	r18, 0x01	; 1
    248e:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2490:	f9 01       	movw	r30, r18
    2492:	20 81       	ld	r18, Z
    2494:	82 0f       	add	r24, r18
    2496:	91 1d       	adc	r25, r1
    2498:	fb 01       	movw	r30, r22
    249a:	93 83       	std	Z+3, r25	; 0x03
    249c:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    249e:	4f 70       	andi	r20, 0x0F	; 15
    24a0:	44 83       	std	Z+4, r20	; 0x04
    24a2:	15 82       	std	Z+5, r1	; 0x05
    24a4:	13 96       	adiw	r26, 0x03	; 3
    24a6:	6a 5f       	subi	r22, 0xFA	; 250
    24a8:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    24aa:	0a 17       	cp	r16, r26
    24ac:	1b 07       	cpc	r17, r27
    24ae:	b1 f6       	brne	.-84     	; 0x245c <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	01 c0       	rjmp	.+2      	; 0x24be <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    24bc:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    24be:	60 96       	adiw	r28, 0x10	; 16
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	08 95       	ret

000024d8 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    24d8:	0e 94 26 08 	call	0x104c	; 0x104c <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    24dc:	88 e5       	ldi	r24, 0x58	; 88
    24de:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    24e2:	88 23       	and	r24, r24
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <m_wii_open+0x10>
    24e6:	c7 c0       	rjmp	.+398    	; 0x2676 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    24e8:	80 e3       	ldi	r24, 0x30	; 48
    24ea:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    24ee:	88 23       	and	r24, r24
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <m_wii_open+0x1c>
    24f2:	c3 c0       	rjmp	.+390    	; 0x267a <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    24fa:	88 23       	and	r24, r24
    24fc:	09 f4       	brne	.+2      	; 0x2500 <m_wii_open+0x28>
    24fe:	bf c0       	rjmp	.+382    	; 0x267e <m_wii_open+0x1a6>
	end();
    2500:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2504:	83 ec       	ldi	r24, 0xC3	; 195
    2506:	99 e0       	ldi	r25, 0x09	; 9
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <m_wii_open+0x30>
    250c:	00 c0       	rjmp	.+0      	; 0x250e <m_wii_open+0x36>
    250e:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2510:	88 e5       	ldi	r24, 0x58	; 88
    2512:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    2516:	88 23       	and	r24, r24
    2518:	09 f4       	brne	.+2      	; 0x251c <m_wii_open+0x44>
    251a:	b3 c0       	rjmp	.+358    	; 0x2682 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    2522:	88 23       	and	r24, r24
    2524:	09 f4       	brne	.+2      	; 0x2528 <m_wii_open+0x50>
    2526:	af c0       	rjmp	.+350    	; 0x2686 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <m_wii_open+0x5c>
    2532:	ab c0       	rjmp	.+342    	; 0x268a <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    253a:	88 23       	and	r24, r24
    253c:	09 f4       	brne	.+2      	; 0x2540 <m_wii_open+0x68>
    253e:	a7 c0       	rjmp	.+334    	; 0x268e <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    2546:	88 23       	and	r24, r24
    2548:	09 f4       	brne	.+2      	; 0x254c <m_wii_open+0x74>
    254a:	a3 c0       	rjmp	.+326    	; 0x2692 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    2552:	88 23       	and	r24, r24
    2554:	09 f4       	brne	.+2      	; 0x2558 <m_wii_open+0x80>
    2556:	9f c0       	rjmp	.+318    	; 0x2696 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    255e:	88 23       	and	r24, r24
    2560:	09 f4       	brne	.+2      	; 0x2564 <m_wii_open+0x8c>
    2562:	9b c0       	rjmp	.+310    	; 0x269a <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    256a:	88 23       	and	r24, r24
    256c:	09 f4       	brne	.+2      	; 0x2570 <m_wii_open+0x98>
    256e:	97 c0       	rjmp	.+302    	; 0x269e <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2570:	80 e9       	ldi	r24, 0x90	; 144
    2572:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    2576:	88 23       	and	r24, r24
    2578:	09 f4       	brne	.+2      	; 0x257c <m_wii_open+0xa4>
    257a:	93 c0       	rjmp	.+294    	; 0x26a2 <m_wii_open+0x1ca>
	end();
    257c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
    2580:	83 ec       	ldi	r24, 0xC3	; 195
    2582:	99 e0       	ldi	r25, 0x09	; 9
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <m_wii_open+0xac>
    2588:	00 c0       	rjmp	.+0      	; 0x258a <m_wii_open+0xb2>
    258a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    258c:	88 e5       	ldi	r24, 0x58	; 88
    258e:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    2592:	88 23       	and	r24, r24
    2594:	09 f4       	brne	.+2      	; 0x2598 <m_wii_open+0xc0>
    2596:	87 c0       	rjmp	.+270    	; 0x26a6 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2598:	87 e0       	ldi	r24, 0x07	; 7
    259a:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    259e:	88 23       	and	r24, r24
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <m_wii_open+0xcc>
    25a2:	83 c0       	rjmp	.+262    	; 0x26aa <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    25aa:	88 23       	and	r24, r24
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <m_wii_open+0xd8>
    25ae:	7f c0       	rjmp	.+254    	; 0x26ae <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    25b0:	81 e4       	ldi	r24, 0x41	; 65
    25b2:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    25b6:	88 23       	and	r24, r24
    25b8:	09 f4       	brne	.+2      	; 0x25bc <m_wii_open+0xe4>
    25ba:	7b c0       	rjmp	.+246    	; 0x26b2 <m_wii_open+0x1da>
	end();
    25bc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
    25c0:	83 ec       	ldi	r24, 0xC3	; 195
    25c2:	99 e0       	ldi	r25, 0x09	; 9
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <m_wii_open+0xec>
    25c8:	00 c0       	rjmp	.+0      	; 0x25ca <m_wii_open+0xf2>
    25ca:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    25cc:	88 e5       	ldi	r24, 0x58	; 88
    25ce:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    25d2:	88 23       	and	r24, r24
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <m_wii_open+0x100>
    25d6:	6f c0       	rjmp	.+222    	; 0x26b6 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    25d8:	8a e1       	ldi	r24, 0x1A	; 26
    25da:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    25de:	88 23       	and	r24, r24
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <m_wii_open+0x10c>
    25e2:	6b c0       	rjmp	.+214    	; 0x26ba <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    25e4:	80 e4       	ldi	r24, 0x40	; 64
    25e6:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    25ea:	88 23       	and	r24, r24
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <m_wii_open+0x118>
    25ee:	67 c0       	rjmp	.+206    	; 0x26be <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    25f6:	88 23       	and	r24, r24
    25f8:	09 f4       	brne	.+2      	; 0x25fc <m_wii_open+0x124>
    25fa:	63 c0       	rjmp	.+198    	; 0x26c2 <m_wii_open+0x1ea>
	end();
    25fc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
    2600:	83 ec       	ldi	r24, 0xC3	; 195
    2602:	99 e0       	ldi	r25, 0x09	; 9
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <m_wii_open+0x12c>
    2608:	00 c0       	rjmp	.+0      	; 0x260a <m_wii_open+0x132>
    260a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    260c:	88 e5       	ldi	r24, 0x58	; 88
    260e:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    2612:	88 23       	and	r24, r24
    2614:	09 f4       	brne	.+2      	; 0x2618 <m_wii_open+0x140>
    2616:	57 c0       	rjmp	.+174    	; 0x26c6 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    2618:	83 e3       	ldi	r24, 0x33	; 51
    261a:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    261e:	88 23       	and	r24, r24
    2620:	09 f4       	brne	.+2      	; 0x2624 <m_wii_open+0x14c>
    2622:	53 c0       	rjmp	.+166    	; 0x26ca <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    262a:	88 23       	and	r24, r24
    262c:	09 f4       	brne	.+2      	; 0x2630 <m_wii_open+0x158>
    262e:	4f c0       	rjmp	.+158    	; 0x26ce <m_wii_open+0x1f6>
	end();
    2630:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
    2634:	83 ec       	ldi	r24, 0xC3	; 195
    2636:	99 e0       	ldi	r25, 0x09	; 9
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <m_wii_open+0x160>
    263c:	00 c0       	rjmp	.+0      	; 0x263e <m_wii_open+0x166>
    263e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2640:	88 e5       	ldi	r24, 0x58	; 88
    2642:	0e 94 ba 11 	call	0x2374	; 0x2374 <start_write>
    2646:	88 23       	and	r24, r24
    2648:	09 f4       	brne	.+2      	; 0x264c <m_wii_open+0x174>
    264a:	43 c0       	rjmp	.+134    	; 0x26d2 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    264c:	80 e3       	ldi	r24, 0x30	; 48
    264e:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    2652:	88 23       	and	r24, r24
    2654:	09 f4       	brne	.+2      	; 0x2658 <m_wii_open+0x180>
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2658:	88 e0       	ldi	r24, 0x08	; 8
    265a:	0e 94 91 11 	call	0x2322	; 0x2322 <send_byte>
    265e:	88 23       	and	r24, r24
    2660:	e1 f1       	breq	.+120    	; 0x26da <m_wii_open+0x202>
	end();
    2662:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <end>
    2666:	83 ec       	ldi	r24, 0xC3	; 195
    2668:	99 e0       	ldi	r25, 0x09	; 9
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <m_wii_open+0x192>
    266e:	00 c0       	rjmp	.+0      	; 0x2670 <m_wii_open+0x198>
    2670:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    26da:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    26dc:	08 95       	ret

000026de <__subsf3>:
    26de:	50 58       	subi	r21, 0x80	; 128

000026e0 <__addsf3>:
    26e0:	bb 27       	eor	r27, r27
    26e2:	aa 27       	eor	r26, r26
    26e4:	0e d0       	rcall	.+28     	; 0x2702 <__addsf3x>
    26e6:	58 c2       	rjmp	.+1200   	; 0x2b98 <__fp_round>
    26e8:	21 d2       	rcall	.+1090   	; 0x2b2c <__fp_pscA>
    26ea:	30 f0       	brcs	.+12     	; 0x26f8 <__addsf3+0x18>
    26ec:	26 d2       	rcall	.+1100   	; 0x2b3a <__fp_pscB>
    26ee:	20 f0       	brcs	.+8      	; 0x26f8 <__addsf3+0x18>
    26f0:	31 f4       	brne	.+12     	; 0x26fe <__addsf3+0x1e>
    26f2:	9f 3f       	cpi	r25, 0xFF	; 255
    26f4:	11 f4       	brne	.+4      	; 0x26fa <__addsf3+0x1a>
    26f6:	1e f4       	brtc	.+6      	; 0x26fe <__addsf3+0x1e>
    26f8:	f1 c1       	rjmp	.+994    	; 0x2adc <__fp_nan>
    26fa:	0e f4       	brtc	.+2      	; 0x26fe <__addsf3+0x1e>
    26fc:	e0 95       	com	r30
    26fe:	e7 fb       	bst	r30, 7
    2700:	e7 c1       	rjmp	.+974    	; 0x2ad0 <__fp_inf>

00002702 <__addsf3x>:
    2702:	e9 2f       	mov	r30, r25
    2704:	6b d2       	rcall	.+1238   	; 0x2bdc <__fp_split3>
    2706:	80 f3       	brcs	.-32     	; 0x26e8 <__addsf3+0x8>
    2708:	ba 17       	cp	r27, r26
    270a:	62 07       	cpc	r22, r18
    270c:	73 07       	cpc	r23, r19
    270e:	84 07       	cpc	r24, r20
    2710:	95 07       	cpc	r25, r21
    2712:	18 f0       	brcs	.+6      	; 0x271a <__addsf3x+0x18>
    2714:	71 f4       	brne	.+28     	; 0x2732 <__addsf3x+0x30>
    2716:	9e f5       	brtc	.+102    	; 0x277e <__addsf3x+0x7c>
    2718:	83 c2       	rjmp	.+1286   	; 0x2c20 <__fp_zero>
    271a:	0e f4       	brtc	.+2      	; 0x271e <__addsf3x+0x1c>
    271c:	e0 95       	com	r30
    271e:	0b 2e       	mov	r0, r27
    2720:	ba 2f       	mov	r27, r26
    2722:	a0 2d       	mov	r26, r0
    2724:	0b 01       	movw	r0, r22
    2726:	b9 01       	movw	r22, r18
    2728:	90 01       	movw	r18, r0
    272a:	0c 01       	movw	r0, r24
    272c:	ca 01       	movw	r24, r20
    272e:	a0 01       	movw	r20, r0
    2730:	11 24       	eor	r1, r1
    2732:	ff 27       	eor	r31, r31
    2734:	59 1b       	sub	r21, r25
    2736:	99 f0       	breq	.+38     	; 0x275e <__addsf3x+0x5c>
    2738:	59 3f       	cpi	r21, 0xF9	; 249
    273a:	50 f4       	brcc	.+20     	; 0x2750 <__addsf3x+0x4e>
    273c:	50 3e       	cpi	r21, 0xE0	; 224
    273e:	68 f1       	brcs	.+90     	; 0x279a <__addsf3x+0x98>
    2740:	1a 16       	cp	r1, r26
    2742:	f0 40       	sbci	r31, 0x00	; 0
    2744:	a2 2f       	mov	r26, r18
    2746:	23 2f       	mov	r18, r19
    2748:	34 2f       	mov	r19, r20
    274a:	44 27       	eor	r20, r20
    274c:	58 5f       	subi	r21, 0xF8	; 248
    274e:	f3 cf       	rjmp	.-26     	; 0x2736 <__addsf3x+0x34>
    2750:	46 95       	lsr	r20
    2752:	37 95       	ror	r19
    2754:	27 95       	ror	r18
    2756:	a7 95       	ror	r26
    2758:	f0 40       	sbci	r31, 0x00	; 0
    275a:	53 95       	inc	r21
    275c:	c9 f7       	brne	.-14     	; 0x2750 <__addsf3x+0x4e>
    275e:	7e f4       	brtc	.+30     	; 0x277e <__addsf3x+0x7c>
    2760:	1f 16       	cp	r1, r31
    2762:	ba 0b       	sbc	r27, r26
    2764:	62 0b       	sbc	r22, r18
    2766:	73 0b       	sbc	r23, r19
    2768:	84 0b       	sbc	r24, r20
    276a:	ba f0       	brmi	.+46     	; 0x279a <__addsf3x+0x98>
    276c:	91 50       	subi	r25, 0x01	; 1
    276e:	a1 f0       	breq	.+40     	; 0x2798 <__addsf3x+0x96>
    2770:	ff 0f       	add	r31, r31
    2772:	bb 1f       	adc	r27, r27
    2774:	66 1f       	adc	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	88 1f       	adc	r24, r24
    277a:	c2 f7       	brpl	.-16     	; 0x276c <__addsf3x+0x6a>
    277c:	0e c0       	rjmp	.+28     	; 0x279a <__addsf3x+0x98>
    277e:	ba 0f       	add	r27, r26
    2780:	62 1f       	adc	r22, r18
    2782:	73 1f       	adc	r23, r19
    2784:	84 1f       	adc	r24, r20
    2786:	48 f4       	brcc	.+18     	; 0x279a <__addsf3x+0x98>
    2788:	87 95       	ror	r24
    278a:	77 95       	ror	r23
    278c:	67 95       	ror	r22
    278e:	b7 95       	ror	r27
    2790:	f7 95       	ror	r31
    2792:	9e 3f       	cpi	r25, 0xFE	; 254
    2794:	08 f0       	brcs	.+2      	; 0x2798 <__addsf3x+0x96>
    2796:	b3 cf       	rjmp	.-154    	; 0x26fe <__addsf3+0x1e>
    2798:	93 95       	inc	r25
    279a:	88 0f       	add	r24, r24
    279c:	08 f0       	brcs	.+2      	; 0x27a0 <__addsf3x+0x9e>
    279e:	99 27       	eor	r25, r25
    27a0:	ee 0f       	add	r30, r30
    27a2:	97 95       	ror	r25
    27a4:	87 95       	ror	r24
    27a6:	08 95       	ret
    27a8:	c1 d1       	rcall	.+898    	; 0x2b2c <__fp_pscA>
    27aa:	58 f0       	brcs	.+22     	; 0x27c2 <__addsf3x+0xc0>
    27ac:	80 e8       	ldi	r24, 0x80	; 128
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <__addsf3x+0xb2>
    27b2:	9e ef       	ldi	r25, 0xFE	; 254
    27b4:	c2 d1       	rcall	.+900    	; 0x2b3a <__fp_pscB>
    27b6:	28 f0       	brcs	.+10     	; 0x27c2 <__addsf3x+0xc0>
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	51 e0       	ldi	r21, 0x01	; 1
    27bc:	59 f4       	brne	.+22     	; 0x27d4 <atan2+0xe>
    27be:	5e ef       	ldi	r21, 0xFE	; 254
    27c0:	09 c0       	rjmp	.+18     	; 0x27d4 <atan2+0xe>
    27c2:	8c c1       	rjmp	.+792    	; 0x2adc <__fp_nan>
    27c4:	2d c2       	rjmp	.+1114   	; 0x2c20 <__fp_zero>

000027c6 <atan2>:
    27c6:	e9 2f       	mov	r30, r25
    27c8:	e0 78       	andi	r30, 0x80	; 128
    27ca:	08 d2       	rcall	.+1040   	; 0x2bdc <__fp_split3>
    27cc:	68 f3       	brcs	.-38     	; 0x27a8 <__addsf3x+0xa6>
    27ce:	09 2e       	mov	r0, r25
    27d0:	05 2a       	or	r0, r21
    27d2:	c1 f3       	breq	.-16     	; 0x27c4 <__addsf3x+0xc2>
    27d4:	26 17       	cp	r18, r22
    27d6:	37 07       	cpc	r19, r23
    27d8:	48 07       	cpc	r20, r24
    27da:	59 07       	cpc	r21, r25
    27dc:	38 f0       	brcs	.+14     	; 0x27ec <atan2+0x26>
    27de:	0e 2e       	mov	r0, r30
    27e0:	07 f8       	bld	r0, 7
    27e2:	e0 25       	eor	r30, r0
    27e4:	69 f0       	breq	.+26     	; 0x2800 <atan2+0x3a>
    27e6:	e0 25       	eor	r30, r0
    27e8:	e0 64       	ori	r30, 0x40	; 64
    27ea:	0a c0       	rjmp	.+20     	; 0x2800 <atan2+0x3a>
    27ec:	ef 63       	ori	r30, 0x3F	; 63
    27ee:	07 f8       	bld	r0, 7
    27f0:	00 94       	com	r0
    27f2:	07 fa       	bst	r0, 7
    27f4:	db 01       	movw	r26, r22
    27f6:	b9 01       	movw	r22, r18
    27f8:	9d 01       	movw	r18, r26
    27fa:	dc 01       	movw	r26, r24
    27fc:	ca 01       	movw	r24, r20
    27fe:	ad 01       	movw	r20, r26
    2800:	ef 93       	push	r30
    2802:	4a d0       	rcall	.+148    	; 0x2898 <__divsf3_pse>
    2804:	c9 d1       	rcall	.+914    	; 0x2b98 <__fp_round>
    2806:	0a d0       	rcall	.+20     	; 0x281c <atan>
    2808:	5f 91       	pop	r21
    280a:	55 23       	and	r21, r21
    280c:	31 f0       	breq	.+12     	; 0x281a <atan2+0x54>
    280e:	2b ed       	ldi	r18, 0xDB	; 219
    2810:	3f e0       	ldi	r19, 0x0F	; 15
    2812:	49 e4       	ldi	r20, 0x49	; 73
    2814:	50 fd       	sbrc	r21, 0
    2816:	49 ec       	ldi	r20, 0xC9	; 201
    2818:	63 cf       	rjmp	.-314    	; 0x26e0 <__addsf3>
    281a:	08 95       	ret

0000281c <atan>:
    281c:	df 93       	push	r29
    281e:	dd 27       	eor	r29, r29
    2820:	b9 2f       	mov	r27, r25
    2822:	bf 77       	andi	r27, 0x7F	; 127
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	16 16       	cp	r1, r22
    282a:	17 06       	cpc	r1, r23
    282c:	48 07       	cpc	r20, r24
    282e:	5b 07       	cpc	r21, r27
    2830:	10 f4       	brcc	.+4      	; 0x2836 <atan+0x1a>
    2832:	d9 2f       	mov	r29, r25
    2834:	00 d2       	rcall	.+1024   	; 0x2c36 <inverse>
    2836:	9f 93       	push	r25
    2838:	8f 93       	push	r24
    283a:	7f 93       	push	r23
    283c:	6f 93       	push	r22
    283e:	5b d3       	rcall	.+1718   	; 0x2ef6 <square>
    2840:	ec ea       	ldi	r30, 0xAC	; 172
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	4e d1       	rcall	.+668    	; 0x2ae2 <__fp_powser>
    2846:	a8 d1       	rcall	.+848    	; 0x2b98 <__fp_round>
    2848:	2f 91       	pop	r18
    284a:	3f 91       	pop	r19
    284c:	4f 91       	pop	r20
    284e:	5f 91       	pop	r21
    2850:	b3 d2       	rcall	.+1382   	; 0x2db8 <__mulsf3x>
    2852:	dd 23       	and	r29, r29
    2854:	49 f0       	breq	.+18     	; 0x2868 <atan+0x4c>
    2856:	90 58       	subi	r25, 0x80	; 128
    2858:	a2 ea       	ldi	r26, 0xA2	; 162
    285a:	2a ed       	ldi	r18, 0xDA	; 218
    285c:	3f e0       	ldi	r19, 0x0F	; 15
    285e:	49 ec       	ldi	r20, 0xC9	; 201
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	d0 78       	andi	r29, 0x80	; 128
    2864:	5d 27       	eor	r21, r29
    2866:	4d df       	rcall	.-358    	; 0x2702 <__addsf3x>
    2868:	df 91       	pop	r29
    286a:	96 c1       	rjmp	.+812    	; 0x2b98 <__fp_round>

0000286c <__cmpsf2>:
    286c:	0d d1       	rcall	.+538    	; 0x2a88 <__fp_cmp>
    286e:	08 f4       	brcc	.+2      	; 0x2872 <__cmpsf2+0x6>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	08 95       	ret

00002874 <cos>:
    2874:	6a d1       	rcall	.+724    	; 0x2b4a <__fp_rempio2>
    2876:	e3 95       	inc	r30
    2878:	a0 c1       	rjmp	.+832    	; 0x2bba <__fp_sinus>

0000287a <__divsf3>:
    287a:	0c d0       	rcall	.+24     	; 0x2894 <__divsf3x>
    287c:	8d c1       	rjmp	.+794    	; 0x2b98 <__fp_round>
    287e:	5d d1       	rcall	.+698    	; 0x2b3a <__fp_pscB>
    2880:	40 f0       	brcs	.+16     	; 0x2892 <__divsf3+0x18>
    2882:	54 d1       	rcall	.+680    	; 0x2b2c <__fp_pscA>
    2884:	30 f0       	brcs	.+12     	; 0x2892 <__divsf3+0x18>
    2886:	21 f4       	brne	.+8      	; 0x2890 <__divsf3+0x16>
    2888:	5f 3f       	cpi	r21, 0xFF	; 255
    288a:	19 f0       	breq	.+6      	; 0x2892 <__divsf3+0x18>
    288c:	21 c1       	rjmp	.+578    	; 0x2ad0 <__fp_inf>
    288e:	51 11       	cpse	r21, r1
    2890:	c8 c1       	rjmp	.+912    	; 0x2c22 <__fp_szero>
    2892:	24 c1       	rjmp	.+584    	; 0x2adc <__fp_nan>

00002894 <__divsf3x>:
    2894:	a3 d1       	rcall	.+838    	; 0x2bdc <__fp_split3>
    2896:	98 f3       	brcs	.-26     	; 0x287e <__divsf3+0x4>

00002898 <__divsf3_pse>:
    2898:	99 23       	and	r25, r25
    289a:	c9 f3       	breq	.-14     	; 0x288e <__divsf3+0x14>
    289c:	55 23       	and	r21, r21
    289e:	b1 f3       	breq	.-20     	; 0x288c <__divsf3+0x12>
    28a0:	95 1b       	sub	r25, r21
    28a2:	55 0b       	sbc	r21, r21
    28a4:	bb 27       	eor	r27, r27
    28a6:	aa 27       	eor	r26, r26
    28a8:	62 17       	cp	r22, r18
    28aa:	73 07       	cpc	r23, r19
    28ac:	84 07       	cpc	r24, r20
    28ae:	38 f0       	brcs	.+14     	; 0x28be <__divsf3_pse+0x26>
    28b0:	9f 5f       	subi	r25, 0xFF	; 255
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255
    28b4:	22 0f       	add	r18, r18
    28b6:	33 1f       	adc	r19, r19
    28b8:	44 1f       	adc	r20, r20
    28ba:	aa 1f       	adc	r26, r26
    28bc:	a9 f3       	breq	.-22     	; 0x28a8 <__divsf3_pse+0x10>
    28be:	33 d0       	rcall	.+102    	; 0x2926 <__divsf3_pse+0x8e>
    28c0:	0e 2e       	mov	r0, r30
    28c2:	3a f0       	brmi	.+14     	; 0x28d2 <__divsf3_pse+0x3a>
    28c4:	e0 e8       	ldi	r30, 0x80	; 128
    28c6:	30 d0       	rcall	.+96     	; 0x2928 <__divsf3_pse+0x90>
    28c8:	91 50       	subi	r25, 0x01	; 1
    28ca:	50 40       	sbci	r21, 0x00	; 0
    28cc:	e6 95       	lsr	r30
    28ce:	00 1c       	adc	r0, r0
    28d0:	ca f7       	brpl	.-14     	; 0x28c4 <__divsf3_pse+0x2c>
    28d2:	29 d0       	rcall	.+82     	; 0x2926 <__divsf3_pse+0x8e>
    28d4:	fe 2f       	mov	r31, r30
    28d6:	27 d0       	rcall	.+78     	; 0x2926 <__divsf3_pse+0x8e>
    28d8:	66 0f       	add	r22, r22
    28da:	77 1f       	adc	r23, r23
    28dc:	88 1f       	adc	r24, r24
    28de:	bb 1f       	adc	r27, r27
    28e0:	26 17       	cp	r18, r22
    28e2:	37 07       	cpc	r19, r23
    28e4:	48 07       	cpc	r20, r24
    28e6:	ab 07       	cpc	r26, r27
    28e8:	b0 e8       	ldi	r27, 0x80	; 128
    28ea:	09 f0       	breq	.+2      	; 0x28ee <__divsf3_pse+0x56>
    28ec:	bb 0b       	sbc	r27, r27
    28ee:	80 2d       	mov	r24, r0
    28f0:	bf 01       	movw	r22, r30
    28f2:	ff 27       	eor	r31, r31
    28f4:	93 58       	subi	r25, 0x83	; 131
    28f6:	5f 4f       	sbci	r21, 0xFF	; 255
    28f8:	2a f0       	brmi	.+10     	; 0x2904 <__divsf3_pse+0x6c>
    28fa:	9e 3f       	cpi	r25, 0xFE	; 254
    28fc:	51 05       	cpc	r21, r1
    28fe:	68 f0       	brcs	.+26     	; 0x291a <__divsf3_pse+0x82>
    2900:	e7 c0       	rjmp	.+462    	; 0x2ad0 <__fp_inf>
    2902:	8f c1       	rjmp	.+798    	; 0x2c22 <__fp_szero>
    2904:	5f 3f       	cpi	r21, 0xFF	; 255
    2906:	ec f3       	brlt	.-6      	; 0x2902 <__divsf3_pse+0x6a>
    2908:	98 3e       	cpi	r25, 0xE8	; 232
    290a:	dc f3       	brlt	.-10     	; 0x2902 <__divsf3_pse+0x6a>
    290c:	86 95       	lsr	r24
    290e:	77 95       	ror	r23
    2910:	67 95       	ror	r22
    2912:	b7 95       	ror	r27
    2914:	f7 95       	ror	r31
    2916:	9f 5f       	subi	r25, 0xFF	; 255
    2918:	c9 f7       	brne	.-14     	; 0x290c <__divsf3_pse+0x74>
    291a:	88 0f       	add	r24, r24
    291c:	91 1d       	adc	r25, r1
    291e:	96 95       	lsr	r25
    2920:	87 95       	ror	r24
    2922:	97 f9       	bld	r25, 7
    2924:	08 95       	ret
    2926:	e1 e0       	ldi	r30, 0x01	; 1
    2928:	66 0f       	add	r22, r22
    292a:	77 1f       	adc	r23, r23
    292c:	88 1f       	adc	r24, r24
    292e:	bb 1f       	adc	r27, r27
    2930:	62 17       	cp	r22, r18
    2932:	73 07       	cpc	r23, r19
    2934:	84 07       	cpc	r24, r20
    2936:	ba 07       	cpc	r27, r26
    2938:	20 f0       	brcs	.+8      	; 0x2942 <__divsf3_pse+0xaa>
    293a:	62 1b       	sub	r22, r18
    293c:	73 0b       	sbc	r23, r19
    293e:	84 0b       	sbc	r24, r20
    2940:	ba 0b       	sbc	r27, r26
    2942:	ee 1f       	adc	r30, r30
    2944:	88 f7       	brcc	.-30     	; 0x2928 <__divsf3_pse+0x90>
    2946:	e0 95       	com	r30
    2948:	08 95       	ret
    294a:	19 f4       	brne	.+6      	; 0x2952 <__divsf3_pse+0xba>
    294c:	0e f0       	brts	.+2      	; 0x2950 <__divsf3_pse+0xb8>
    294e:	c0 c0       	rjmp	.+384    	; 0x2ad0 <__fp_inf>
    2950:	67 c1       	rjmp	.+718    	; 0x2c20 <__fp_zero>
    2952:	c4 c0       	rjmp	.+392    	; 0x2adc <__fp_nan>

00002954 <exp>:
    2954:	4b d1       	rcall	.+662    	; 0x2bec <__fp_splitA>
    2956:	c8 f3       	brcs	.-14     	; 0x294a <__divsf3_pse+0xb2>
    2958:	96 38       	cpi	r25, 0x86	; 134
    295a:	c0 f7       	brcc	.-16     	; 0x294c <__divsf3_pse+0xb4>
    295c:	07 f8       	bld	r0, 7
    295e:	0f 92       	push	r0
    2960:	e8 94       	clt
    2962:	2b e3       	ldi	r18, 0x3B	; 59
    2964:	3a ea       	ldi	r19, 0xAA	; 170
    2966:	48 eb       	ldi	r20, 0xB8	; 184
    2968:	5f e7       	ldi	r21, 0x7F	; 127
    296a:	28 d2       	rcall	.+1104   	; 0x2dbc <__mulsf3_pse>
    296c:	0f 92       	push	r0
    296e:	0f 92       	push	r0
    2970:	0f 92       	push	r0
    2972:	4d b7       	in	r20, 0x3d	; 61
    2974:	5e b7       	in	r21, 0x3e	; 62
    2976:	0f 92       	push	r0
    2978:	e0 d1       	rcall	.+960    	; 0x2d3a <modf>
    297a:	e9 ed       	ldi	r30, 0xD9	; 217
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	b1 d0       	rcall	.+354    	; 0x2ae2 <__fp_powser>
    2980:	4f 91       	pop	r20
    2982:	5f 91       	pop	r21
    2984:	ef 91       	pop	r30
    2986:	ff 91       	pop	r31
    2988:	e5 95       	asr	r30
    298a:	ee 1f       	adc	r30, r30
    298c:	ff 1f       	adc	r31, r31
    298e:	49 f0       	breq	.+18     	; 0x29a2 <exp+0x4e>
    2990:	fe 57       	subi	r31, 0x7E	; 126
    2992:	e0 68       	ori	r30, 0x80	; 128
    2994:	44 27       	eor	r20, r20
    2996:	ee 0f       	add	r30, r30
    2998:	44 1f       	adc	r20, r20
    299a:	fa 95       	dec	r31
    299c:	e1 f7       	brne	.-8      	; 0x2996 <exp+0x42>
    299e:	41 95       	neg	r20
    29a0:	55 0b       	sbc	r21, r21
    29a2:	52 d1       	rcall	.+676    	; 0x2c48 <ldexp>
    29a4:	0f 90       	pop	r0
    29a6:	07 fe       	sbrs	r0, 7
    29a8:	46 c1       	rjmp	.+652    	; 0x2c36 <inverse>
    29aa:	08 95       	ret

000029ac <__fixsfsi>:
    29ac:	04 d0       	rcall	.+8      	; 0x29b6 <__fixunssfsi>
    29ae:	68 94       	set
    29b0:	b1 11       	cpse	r27, r1
    29b2:	37 c1       	rjmp	.+622    	; 0x2c22 <__fp_szero>
    29b4:	08 95       	ret

000029b6 <__fixunssfsi>:
    29b6:	1a d1       	rcall	.+564    	; 0x2bec <__fp_splitA>
    29b8:	88 f0       	brcs	.+34     	; 0x29dc <__fixunssfsi+0x26>
    29ba:	9f 57       	subi	r25, 0x7F	; 127
    29bc:	90 f0       	brcs	.+36     	; 0x29e2 <__fixunssfsi+0x2c>
    29be:	b9 2f       	mov	r27, r25
    29c0:	99 27       	eor	r25, r25
    29c2:	b7 51       	subi	r27, 0x17	; 23
    29c4:	a0 f0       	brcs	.+40     	; 0x29ee <__fixunssfsi+0x38>
    29c6:	d1 f0       	breq	.+52     	; 0x29fc <__fixunssfsi+0x46>
    29c8:	66 0f       	add	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	1a f0       	brmi	.+6      	; 0x29d8 <__fixunssfsi+0x22>
    29d2:	ba 95       	dec	r27
    29d4:	c9 f7       	brne	.-14     	; 0x29c8 <__fixunssfsi+0x12>
    29d6:	12 c0       	rjmp	.+36     	; 0x29fc <__fixunssfsi+0x46>
    29d8:	b1 30       	cpi	r27, 0x01	; 1
    29da:	81 f0       	breq	.+32     	; 0x29fc <__fixunssfsi+0x46>
    29dc:	21 d1       	rcall	.+578    	; 0x2c20 <__fp_zero>
    29de:	b1 e0       	ldi	r27, 0x01	; 1
    29e0:	08 95       	ret
    29e2:	1e c1       	rjmp	.+572    	; 0x2c20 <__fp_zero>
    29e4:	67 2f       	mov	r22, r23
    29e6:	78 2f       	mov	r23, r24
    29e8:	88 27       	eor	r24, r24
    29ea:	b8 5f       	subi	r27, 0xF8	; 248
    29ec:	39 f0       	breq	.+14     	; 0x29fc <__fixunssfsi+0x46>
    29ee:	b9 3f       	cpi	r27, 0xF9	; 249
    29f0:	cc f3       	brlt	.-14     	; 0x29e4 <__fixunssfsi+0x2e>
    29f2:	86 95       	lsr	r24
    29f4:	77 95       	ror	r23
    29f6:	67 95       	ror	r22
    29f8:	b3 95       	inc	r27
    29fa:	d9 f7       	brne	.-10     	; 0x29f2 <__fixunssfsi+0x3c>
    29fc:	3e f4       	brtc	.+14     	; 0x2a0c <__fixunssfsi+0x56>
    29fe:	90 95       	com	r25
    2a00:	80 95       	com	r24
    2a02:	70 95       	com	r23
    2a04:	61 95       	neg	r22
    2a06:	7f 4f       	sbci	r23, 0xFF	; 255
    2a08:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	08 95       	ret

00002a0e <__floatunsisf>:
    2a0e:	e8 94       	clt
    2a10:	09 c0       	rjmp	.+18     	; 0x2a24 <__floatsisf+0x12>

00002a12 <__floatsisf>:
    2a12:	97 fb       	bst	r25, 7
    2a14:	3e f4       	brtc	.+14     	; 0x2a24 <__floatsisf+0x12>
    2a16:	90 95       	com	r25
    2a18:	80 95       	com	r24
    2a1a:	70 95       	com	r23
    2a1c:	61 95       	neg	r22
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	8f 4f       	sbci	r24, 0xFF	; 255
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	99 23       	and	r25, r25
    2a26:	a9 f0       	breq	.+42     	; 0x2a52 <__floatsisf+0x40>
    2a28:	f9 2f       	mov	r31, r25
    2a2a:	96 e9       	ldi	r25, 0x96	; 150
    2a2c:	bb 27       	eor	r27, r27
    2a2e:	93 95       	inc	r25
    2a30:	f6 95       	lsr	r31
    2a32:	87 95       	ror	r24
    2a34:	77 95       	ror	r23
    2a36:	67 95       	ror	r22
    2a38:	b7 95       	ror	r27
    2a3a:	f1 11       	cpse	r31, r1
    2a3c:	f8 cf       	rjmp	.-16     	; 0x2a2e <__floatsisf+0x1c>
    2a3e:	fa f4       	brpl	.+62     	; 0x2a7e <__floatsisf+0x6c>
    2a40:	bb 0f       	add	r27, r27
    2a42:	11 f4       	brne	.+4      	; 0x2a48 <__floatsisf+0x36>
    2a44:	60 ff       	sbrs	r22, 0
    2a46:	1b c0       	rjmp	.+54     	; 0x2a7e <__floatsisf+0x6c>
    2a48:	6f 5f       	subi	r22, 0xFF	; 255
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a50:	16 c0       	rjmp	.+44     	; 0x2a7e <__floatsisf+0x6c>
    2a52:	88 23       	and	r24, r24
    2a54:	11 f0       	breq	.+4      	; 0x2a5a <__floatsisf+0x48>
    2a56:	96 e9       	ldi	r25, 0x96	; 150
    2a58:	11 c0       	rjmp	.+34     	; 0x2a7c <__floatsisf+0x6a>
    2a5a:	77 23       	and	r23, r23
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <__floatsisf+0x54>
    2a5e:	9e e8       	ldi	r25, 0x8E	; 142
    2a60:	87 2f       	mov	r24, r23
    2a62:	76 2f       	mov	r23, r22
    2a64:	05 c0       	rjmp	.+10     	; 0x2a70 <__floatsisf+0x5e>
    2a66:	66 23       	and	r22, r22
    2a68:	71 f0       	breq	.+28     	; 0x2a86 <__floatsisf+0x74>
    2a6a:	96 e8       	ldi	r25, 0x86	; 134
    2a6c:	86 2f       	mov	r24, r22
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	2a f0       	brmi	.+10     	; 0x2a7e <__floatsisf+0x6c>
    2a74:	9a 95       	dec	r25
    2a76:	66 0f       	add	r22, r22
    2a78:	77 1f       	adc	r23, r23
    2a7a:	88 1f       	adc	r24, r24
    2a7c:	da f7       	brpl	.-10     	; 0x2a74 <__floatsisf+0x62>
    2a7e:	88 0f       	add	r24, r24
    2a80:	96 95       	lsr	r25
    2a82:	87 95       	ror	r24
    2a84:	97 f9       	bld	r25, 7
    2a86:	08 95       	ret

00002a88 <__fp_cmp>:
    2a88:	99 0f       	add	r25, r25
    2a8a:	00 08       	sbc	r0, r0
    2a8c:	55 0f       	add	r21, r21
    2a8e:	aa 0b       	sbc	r26, r26
    2a90:	e0 e8       	ldi	r30, 0x80	; 128
    2a92:	fe ef       	ldi	r31, 0xFE	; 254
    2a94:	16 16       	cp	r1, r22
    2a96:	17 06       	cpc	r1, r23
    2a98:	e8 07       	cpc	r30, r24
    2a9a:	f9 07       	cpc	r31, r25
    2a9c:	c0 f0       	brcs	.+48     	; 0x2ace <__fp_cmp+0x46>
    2a9e:	12 16       	cp	r1, r18
    2aa0:	13 06       	cpc	r1, r19
    2aa2:	e4 07       	cpc	r30, r20
    2aa4:	f5 07       	cpc	r31, r21
    2aa6:	98 f0       	brcs	.+38     	; 0x2ace <__fp_cmp+0x46>
    2aa8:	62 1b       	sub	r22, r18
    2aaa:	73 0b       	sbc	r23, r19
    2aac:	84 0b       	sbc	r24, r20
    2aae:	95 0b       	sbc	r25, r21
    2ab0:	39 f4       	brne	.+14     	; 0x2ac0 <__fp_cmp+0x38>
    2ab2:	0a 26       	eor	r0, r26
    2ab4:	61 f0       	breq	.+24     	; 0x2ace <__fp_cmp+0x46>
    2ab6:	23 2b       	or	r18, r19
    2ab8:	24 2b       	or	r18, r20
    2aba:	25 2b       	or	r18, r21
    2abc:	21 f4       	brne	.+8      	; 0x2ac6 <__fp_cmp+0x3e>
    2abe:	08 95       	ret
    2ac0:	0a 26       	eor	r0, r26
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <__fp_cmp+0x3e>
    2ac4:	a1 40       	sbci	r26, 0x01	; 1
    2ac6:	a6 95       	lsr	r26
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	81 1d       	adc	r24, r1
    2acc:	81 1d       	adc	r24, r1
    2ace:	08 95       	ret

00002ad0 <__fp_inf>:
    2ad0:	97 f9       	bld	r25, 7
    2ad2:	9f 67       	ori	r25, 0x7F	; 127
    2ad4:	80 e8       	ldi	r24, 0x80	; 128
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	08 95       	ret

00002adc <__fp_nan>:
    2adc:	9f ef       	ldi	r25, 0xFF	; 255
    2ade:	80 ec       	ldi	r24, 0xC0	; 192
    2ae0:	08 95       	ret

00002ae2 <__fp_powser>:
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	1f 93       	push	r17
    2ae8:	0f 93       	push	r16
    2aea:	ff 92       	push	r15
    2aec:	ef 92       	push	r14
    2aee:	df 92       	push	r13
    2af0:	7b 01       	movw	r14, r22
    2af2:	8c 01       	movw	r16, r24
    2af4:	68 94       	set
    2af6:	05 c0       	rjmp	.+10     	; 0x2b02 <__fp_powser+0x20>
    2af8:	da 2e       	mov	r13, r26
    2afa:	ef 01       	movw	r28, r30
    2afc:	5d d1       	rcall	.+698    	; 0x2db8 <__mulsf3x>
    2afe:	fe 01       	movw	r30, r28
    2b00:	e8 94       	clt
    2b02:	a5 91       	lpm	r26, Z+
    2b04:	25 91       	lpm	r18, Z+
    2b06:	35 91       	lpm	r19, Z+
    2b08:	45 91       	lpm	r20, Z+
    2b0a:	55 91       	lpm	r21, Z+
    2b0c:	ae f3       	brts	.-22     	; 0x2af8 <__fp_powser+0x16>
    2b0e:	ef 01       	movw	r28, r30
    2b10:	f8 dd       	rcall	.-1040   	; 0x2702 <__addsf3x>
    2b12:	fe 01       	movw	r30, r28
    2b14:	97 01       	movw	r18, r14
    2b16:	a8 01       	movw	r20, r16
    2b18:	da 94       	dec	r13
    2b1a:	79 f7       	brne	.-34     	; 0x2afa <__fp_powser+0x18>
    2b1c:	df 90       	pop	r13
    2b1e:	ef 90       	pop	r14
    2b20:	ff 90       	pop	r15
    2b22:	0f 91       	pop	r16
    2b24:	1f 91       	pop	r17
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <__fp_pscA>:
    2b2c:	00 24       	eor	r0, r0
    2b2e:	0a 94       	dec	r0
    2b30:	16 16       	cp	r1, r22
    2b32:	17 06       	cpc	r1, r23
    2b34:	18 06       	cpc	r1, r24
    2b36:	09 06       	cpc	r0, r25
    2b38:	08 95       	ret

00002b3a <__fp_pscB>:
    2b3a:	00 24       	eor	r0, r0
    2b3c:	0a 94       	dec	r0
    2b3e:	12 16       	cp	r1, r18
    2b40:	13 06       	cpc	r1, r19
    2b42:	14 06       	cpc	r1, r20
    2b44:	05 06       	cpc	r0, r21
    2b46:	08 95       	ret
    2b48:	c9 cf       	rjmp	.-110    	; 0x2adc <__fp_nan>

00002b4a <__fp_rempio2>:
    2b4a:	50 d0       	rcall	.+160    	; 0x2bec <__fp_splitA>
    2b4c:	e8 f3       	brcs	.-6      	; 0x2b48 <__fp_pscB+0xe>
    2b4e:	e8 94       	clt
    2b50:	e0 e0       	ldi	r30, 0x00	; 0
    2b52:	bb 27       	eor	r27, r27
    2b54:	9f 57       	subi	r25, 0x7F	; 127
    2b56:	f0 f0       	brcs	.+60     	; 0x2b94 <__fp_rempio2+0x4a>
    2b58:	2a ed       	ldi	r18, 0xDA	; 218
    2b5a:	3f e0       	ldi	r19, 0x0F	; 15
    2b5c:	49 ec       	ldi	r20, 0xC9	; 201
    2b5e:	06 c0       	rjmp	.+12     	; 0x2b6c <__fp_rempio2+0x22>
    2b60:	ee 0f       	add	r30, r30
    2b62:	bb 0f       	add	r27, r27
    2b64:	66 1f       	adc	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	88 1f       	adc	r24, r24
    2b6a:	28 f0       	brcs	.+10     	; 0x2b76 <__fp_rempio2+0x2c>
    2b6c:	b2 3a       	cpi	r27, 0xA2	; 162
    2b6e:	62 07       	cpc	r22, r18
    2b70:	73 07       	cpc	r23, r19
    2b72:	84 07       	cpc	r24, r20
    2b74:	28 f0       	brcs	.+10     	; 0x2b80 <__fp_rempio2+0x36>
    2b76:	b2 5a       	subi	r27, 0xA2	; 162
    2b78:	62 0b       	sbc	r22, r18
    2b7a:	73 0b       	sbc	r23, r19
    2b7c:	84 0b       	sbc	r24, r20
    2b7e:	e3 95       	inc	r30
    2b80:	9a 95       	dec	r25
    2b82:	72 f7       	brpl	.-36     	; 0x2b60 <__fp_rempio2+0x16>
    2b84:	80 38       	cpi	r24, 0x80	; 128
    2b86:	30 f4       	brcc	.+12     	; 0x2b94 <__fp_rempio2+0x4a>
    2b88:	9a 95       	dec	r25
    2b8a:	bb 0f       	add	r27, r27
    2b8c:	66 1f       	adc	r22, r22
    2b8e:	77 1f       	adc	r23, r23
    2b90:	88 1f       	adc	r24, r24
    2b92:	d2 f7       	brpl	.-12     	; 0x2b88 <__fp_rempio2+0x3e>
    2b94:	90 48       	sbci	r25, 0x80	; 128
    2b96:	b4 c1       	rjmp	.+872    	; 0x2f00 <__fp_mpack_finite>

00002b98 <__fp_round>:
    2b98:	09 2e       	mov	r0, r25
    2b9a:	03 94       	inc	r0
    2b9c:	00 0c       	add	r0, r0
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <__fp_round+0xc>
    2ba0:	88 23       	and	r24, r24
    2ba2:	52 f0       	brmi	.+20     	; 0x2bb8 <__fp_round+0x20>
    2ba4:	bb 0f       	add	r27, r27
    2ba6:	40 f4       	brcc	.+16     	; 0x2bb8 <__fp_round+0x20>
    2ba8:	bf 2b       	or	r27, r31
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <__fp_round+0x18>
    2bac:	60 ff       	sbrs	r22, 0
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <__fp_round+0x20>
    2bb0:	6f 5f       	subi	r22, 0xFF	; 255
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	08 95       	ret

00002bba <__fp_sinus>:
    2bba:	ef 93       	push	r30
    2bbc:	e0 ff       	sbrs	r30, 0
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <__fp_sinus+0x12>
    2bc0:	a2 ea       	ldi	r26, 0xA2	; 162
    2bc2:	2a ed       	ldi	r18, 0xDA	; 218
    2bc4:	3f e0       	ldi	r19, 0x0F	; 15
    2bc6:	49 ec       	ldi	r20, 0xC9	; 201
    2bc8:	5f eb       	ldi	r21, 0xBF	; 191
    2bca:	9b dd       	rcall	.-1226   	; 0x2702 <__addsf3x>
    2bcc:	e5 df       	rcall	.-54     	; 0x2b98 <__fp_round>
    2bce:	0f 90       	pop	r0
    2bd0:	03 94       	inc	r0
    2bd2:	01 fc       	sbrc	r0, 1
    2bd4:	90 58       	subi	r25, 0x80	; 128
    2bd6:	e1 e0       	ldi	r30, 0x01	; 1
    2bd8:	f1 e0       	ldi	r31, 0x01	; 1
    2bda:	a5 c1       	rjmp	.+842    	; 0x2f26 <__fp_powsodd>

00002bdc <__fp_split3>:
    2bdc:	57 fd       	sbrc	r21, 7
    2bde:	90 58       	subi	r25, 0x80	; 128
    2be0:	44 0f       	add	r20, r20
    2be2:	55 1f       	adc	r21, r21
    2be4:	59 f0       	breq	.+22     	; 0x2bfc <__fp_splitA+0x10>
    2be6:	5f 3f       	cpi	r21, 0xFF	; 255
    2be8:	71 f0       	breq	.+28     	; 0x2c06 <__fp_splitA+0x1a>
    2bea:	47 95       	ror	r20

00002bec <__fp_splitA>:
    2bec:	88 0f       	add	r24, r24
    2bee:	97 fb       	bst	r25, 7
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	61 f0       	breq	.+24     	; 0x2c0c <__fp_splitA+0x20>
    2bf4:	9f 3f       	cpi	r25, 0xFF	; 255
    2bf6:	79 f0       	breq	.+30     	; 0x2c16 <__fp_splitA+0x2a>
    2bf8:	87 95       	ror	r24
    2bfa:	08 95       	ret
    2bfc:	12 16       	cp	r1, r18
    2bfe:	13 06       	cpc	r1, r19
    2c00:	14 06       	cpc	r1, r20
    2c02:	55 1f       	adc	r21, r21
    2c04:	f2 cf       	rjmp	.-28     	; 0x2bea <__fp_split3+0xe>
    2c06:	46 95       	lsr	r20
    2c08:	f1 df       	rcall	.-30     	; 0x2bec <__fp_splitA>
    2c0a:	08 c0       	rjmp	.+16     	; 0x2c1c <__fp_splitA+0x30>
    2c0c:	16 16       	cp	r1, r22
    2c0e:	17 06       	cpc	r1, r23
    2c10:	18 06       	cpc	r1, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	f1 cf       	rjmp	.-30     	; 0x2bf8 <__fp_splitA+0xc>
    2c16:	86 95       	lsr	r24
    2c18:	71 05       	cpc	r23, r1
    2c1a:	61 05       	cpc	r22, r1
    2c1c:	08 94       	sec
    2c1e:	08 95       	ret

00002c20 <__fp_zero>:
    2c20:	e8 94       	clt

00002c22 <__fp_szero>:
    2c22:	bb 27       	eor	r27, r27
    2c24:	66 27       	eor	r22, r22
    2c26:	77 27       	eor	r23, r23
    2c28:	cb 01       	movw	r24, r22
    2c2a:	97 f9       	bld	r25, 7
    2c2c:	08 95       	ret

00002c2e <__gesf2>:
    2c2e:	2c df       	rcall	.-424    	; 0x2a88 <__fp_cmp>
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <__gesf2+0x6>
    2c32:	8f ef       	ldi	r24, 0xFF	; 255
    2c34:	08 95       	ret

00002c36 <inverse>:
    2c36:	9b 01       	movw	r18, r22
    2c38:	ac 01       	movw	r20, r24
    2c3a:	60 e0       	ldi	r22, 0x00	; 0
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	80 e8       	ldi	r24, 0x80	; 128
    2c40:	9f e3       	ldi	r25, 0x3F	; 63
    2c42:	1b ce       	rjmp	.-970    	; 0x287a <__divsf3>
    2c44:	45 cf       	rjmp	.-374    	; 0x2ad0 <__fp_inf>
    2c46:	5a c1       	rjmp	.+692    	; 0x2efc <__fp_mpack>

00002c48 <ldexp>:
    2c48:	d1 df       	rcall	.-94     	; 0x2bec <__fp_splitA>
    2c4a:	e8 f3       	brcs	.-6      	; 0x2c46 <inverse+0x10>
    2c4c:	99 23       	and	r25, r25
    2c4e:	d9 f3       	breq	.-10     	; 0x2c46 <inverse+0x10>
    2c50:	94 0f       	add	r25, r20
    2c52:	51 1d       	adc	r21, r1
    2c54:	bb f3       	brvs	.-18     	; 0x2c44 <inverse+0xe>
    2c56:	91 50       	subi	r25, 0x01	; 1
    2c58:	50 40       	sbci	r21, 0x00	; 0
    2c5a:	94 f0       	brlt	.+36     	; 0x2c80 <ldexp+0x38>
    2c5c:	59 f0       	breq	.+22     	; 0x2c74 <ldexp+0x2c>
    2c5e:	88 23       	and	r24, r24
    2c60:	32 f0       	brmi	.+12     	; 0x2c6e <ldexp+0x26>
    2c62:	66 0f       	add	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	88 1f       	adc	r24, r24
    2c68:	91 50       	subi	r25, 0x01	; 1
    2c6a:	50 40       	sbci	r21, 0x00	; 0
    2c6c:	c1 f7       	brne	.-16     	; 0x2c5e <ldexp+0x16>
    2c6e:	9e 3f       	cpi	r25, 0xFE	; 254
    2c70:	51 05       	cpc	r21, r1
    2c72:	44 f7       	brge	.-48     	; 0x2c44 <inverse+0xe>
    2c74:	88 0f       	add	r24, r24
    2c76:	91 1d       	adc	r25, r1
    2c78:	96 95       	lsr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	97 f9       	bld	r25, 7
    2c7e:	08 95       	ret
    2c80:	5f 3f       	cpi	r21, 0xFF	; 255
    2c82:	ac f0       	brlt	.+42     	; 0x2cae <ldexp+0x66>
    2c84:	98 3e       	cpi	r25, 0xE8	; 232
    2c86:	9c f0       	brlt	.+38     	; 0x2cae <ldexp+0x66>
    2c88:	bb 27       	eor	r27, r27
    2c8a:	86 95       	lsr	r24
    2c8c:	77 95       	ror	r23
    2c8e:	67 95       	ror	r22
    2c90:	b7 95       	ror	r27
    2c92:	08 f4       	brcc	.+2      	; 0x2c96 <ldexp+0x4e>
    2c94:	b1 60       	ori	r27, 0x01	; 1
    2c96:	93 95       	inc	r25
    2c98:	c1 f7       	brne	.-16     	; 0x2c8a <ldexp+0x42>
    2c9a:	bb 0f       	add	r27, r27
    2c9c:	58 f7       	brcc	.-42     	; 0x2c74 <ldexp+0x2c>
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <ldexp+0x5c>
    2ca0:	60 ff       	sbrs	r22, 0
    2ca2:	e8 cf       	rjmp	.-48     	; 0x2c74 <ldexp+0x2c>
    2ca4:	6f 5f       	subi	r22, 0xFF	; 255
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    2caa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cac:	e3 cf       	rjmp	.-58     	; 0x2c74 <ldexp+0x2c>
    2cae:	b9 cf       	rjmp	.-142    	; 0x2c22 <__fp_szero>
    2cb0:	0e f0       	brts	.+2      	; 0x2cb4 <ldexp+0x6c>
    2cb2:	24 c1       	rjmp	.+584    	; 0x2efc <__fp_mpack>
    2cb4:	13 cf       	rjmp	.-474    	; 0x2adc <__fp_nan>
    2cb6:	68 94       	set
    2cb8:	0b cf       	rjmp	.-490    	; 0x2ad0 <__fp_inf>

00002cba <log>:
    2cba:	98 df       	rcall	.-208    	; 0x2bec <__fp_splitA>
    2cbc:	c8 f3       	brcs	.-14     	; 0x2cb0 <ldexp+0x68>
    2cbe:	99 23       	and	r25, r25
    2cc0:	d1 f3       	breq	.-12     	; 0x2cb6 <ldexp+0x6e>
    2cc2:	c6 f3       	brts	.-16     	; 0x2cb4 <ldexp+0x6c>
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	1f 93       	push	r17
    2cca:	0f 93       	push	r16
    2ccc:	ff 92       	push	r15
    2cce:	c9 2f       	mov	r28, r25
    2cd0:	dd 27       	eor	r29, r29
    2cd2:	88 23       	and	r24, r24
    2cd4:	2a f0       	brmi	.+10     	; 0x2ce0 <log+0x26>
    2cd6:	21 97       	sbiw	r28, 0x01	; 1
    2cd8:	66 0f       	add	r22, r22
    2cda:	77 1f       	adc	r23, r23
    2cdc:	88 1f       	adc	r24, r24
    2cde:	da f7       	brpl	.-10     	; 0x2cd6 <log+0x1c>
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f eb       	ldi	r21, 0xBF	; 191
    2ce8:	9f e3       	ldi	r25, 0x3F	; 63
    2cea:	88 39       	cpi	r24, 0x98	; 152
    2cec:	20 f0       	brcs	.+8      	; 0x2cf6 <log+0x3c>
    2cee:	80 3e       	cpi	r24, 0xE0	; 224
    2cf0:	30 f0       	brcs	.+12     	; 0x2cfe <log+0x44>
    2cf2:	21 96       	adiw	r28, 0x01	; 1
    2cf4:	8f 77       	andi	r24, 0x7F	; 127
    2cf6:	f4 dc       	rcall	.-1560   	; 0x26e0 <__addsf3>
    2cf8:	ef e1       	ldi	r30, 0x1F	; 31
    2cfa:	f1 e0       	ldi	r31, 0x01	; 1
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <log+0x4a>
    2cfe:	f0 dc       	rcall	.-1568   	; 0x26e0 <__addsf3>
    2d00:	ec e4       	ldi	r30, 0x4C	; 76
    2d02:	f1 e0       	ldi	r31, 0x01	; 1
    2d04:	ee de       	rcall	.-548    	; 0x2ae2 <__fp_powser>
    2d06:	8b 01       	movw	r16, r22
    2d08:	be 01       	movw	r22, r28
    2d0a:	ec 01       	movw	r28, r24
    2d0c:	fb 2e       	mov	r15, r27
    2d0e:	6f 57       	subi	r22, 0x7F	; 127
    2d10:	71 09       	sbc	r23, r1
    2d12:	75 95       	asr	r23
    2d14:	77 1f       	adc	r23, r23
    2d16:	88 0b       	sbc	r24, r24
    2d18:	99 0b       	sbc	r25, r25
    2d1a:	7b de       	rcall	.-778    	; 0x2a12 <__floatsisf>
    2d1c:	28 e1       	ldi	r18, 0x18	; 24
    2d1e:	32 e7       	ldi	r19, 0x72	; 114
    2d20:	41 e3       	ldi	r20, 0x31	; 49
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	49 d0       	rcall	.+146    	; 0x2db8 <__mulsf3x>
    2d26:	af 2d       	mov	r26, r15
    2d28:	98 01       	movw	r18, r16
    2d2a:	ae 01       	movw	r20, r28
    2d2c:	ff 90       	pop	r15
    2d2e:	0f 91       	pop	r16
    2d30:	1f 91       	pop	r17
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	e5 dc       	rcall	.-1590   	; 0x2702 <__addsf3x>
    2d38:	2f cf       	rjmp	.-418    	; 0x2b98 <__fp_round>

00002d3a <modf>:
    2d3a:	fa 01       	movw	r30, r20
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	aa 0f       	add	r26, r26
    2d40:	bb 1f       	adc	r27, r27
    2d42:	9b 01       	movw	r18, r22
    2d44:	ac 01       	movw	r20, r24
    2d46:	bf 57       	subi	r27, 0x7F	; 127
    2d48:	28 f4       	brcc	.+10     	; 0x2d54 <modf+0x1a>
    2d4a:	22 27       	eor	r18, r18
    2d4c:	33 27       	eor	r19, r19
    2d4e:	44 27       	eor	r20, r20
    2d50:	50 78       	andi	r21, 0x80	; 128
    2d52:	1f c0       	rjmp	.+62     	; 0x2d92 <modf+0x58>
    2d54:	b7 51       	subi	r27, 0x17	; 23
    2d56:	88 f4       	brcc	.+34     	; 0x2d7a <modf+0x40>
    2d58:	ab 2f       	mov	r26, r27
    2d5a:	00 24       	eor	r0, r0
    2d5c:	46 95       	lsr	r20
    2d5e:	37 95       	ror	r19
    2d60:	27 95       	ror	r18
    2d62:	01 1c       	adc	r0, r1
    2d64:	a3 95       	inc	r26
    2d66:	d2 f3       	brmi	.-12     	; 0x2d5c <modf+0x22>
    2d68:	00 20       	and	r0, r0
    2d6a:	69 f0       	breq	.+26     	; 0x2d86 <modf+0x4c>
    2d6c:	22 0f       	add	r18, r18
    2d6e:	33 1f       	adc	r19, r19
    2d70:	44 1f       	adc	r20, r20
    2d72:	b3 95       	inc	r27
    2d74:	da f3       	brmi	.-10     	; 0x2d6c <modf+0x32>
    2d76:	0d d0       	rcall	.+26     	; 0x2d92 <modf+0x58>
    2d78:	b2 cc       	rjmp	.-1692   	; 0x26de <__subsf3>
    2d7a:	61 30       	cpi	r22, 0x01	; 1
    2d7c:	71 05       	cpc	r23, r1
    2d7e:	a0 e8       	ldi	r26, 0x80	; 128
    2d80:	8a 07       	cpc	r24, r26
    2d82:	b9 46       	sbci	r27, 0x69	; 105
    2d84:	30 f4       	brcc	.+12     	; 0x2d92 <modf+0x58>
    2d86:	9b 01       	movw	r18, r22
    2d88:	ac 01       	movw	r20, r24
    2d8a:	66 27       	eor	r22, r22
    2d8c:	77 27       	eor	r23, r23
    2d8e:	88 27       	eor	r24, r24
    2d90:	90 78       	andi	r25, 0x80	; 128
    2d92:	30 96       	adiw	r30, 0x00	; 0
    2d94:	21 f0       	breq	.+8      	; 0x2d9e <modf+0x64>
    2d96:	20 83       	st	Z, r18
    2d98:	31 83       	std	Z+1, r19	; 0x01
    2d9a:	42 83       	std	Z+2, r20	; 0x02
    2d9c:	53 83       	std	Z+3, r21	; 0x03
    2d9e:	08 95       	ret

00002da0 <__mulsf3>:
    2da0:	0b d0       	rcall	.+22     	; 0x2db8 <__mulsf3x>
    2da2:	fa ce       	rjmp	.-524    	; 0x2b98 <__fp_round>
    2da4:	c3 de       	rcall	.-634    	; 0x2b2c <__fp_pscA>
    2da6:	28 f0       	brcs	.+10     	; 0x2db2 <__mulsf3+0x12>
    2da8:	c8 de       	rcall	.-624    	; 0x2b3a <__fp_pscB>
    2daa:	18 f0       	brcs	.+6      	; 0x2db2 <__mulsf3+0x12>
    2dac:	95 23       	and	r25, r21
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <__mulsf3+0x12>
    2db0:	8f ce       	rjmp	.-738    	; 0x2ad0 <__fp_inf>
    2db2:	94 ce       	rjmp	.-728    	; 0x2adc <__fp_nan>
    2db4:	11 24       	eor	r1, r1
    2db6:	35 cf       	rjmp	.-406    	; 0x2c22 <__fp_szero>

00002db8 <__mulsf3x>:
    2db8:	11 df       	rcall	.-478    	; 0x2bdc <__fp_split3>
    2dba:	a0 f3       	brcs	.-24     	; 0x2da4 <__mulsf3+0x4>

00002dbc <__mulsf3_pse>:
    2dbc:	95 9f       	mul	r25, r21
    2dbe:	d1 f3       	breq	.-12     	; 0x2db4 <__mulsf3+0x14>
    2dc0:	95 0f       	add	r25, r21
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	55 1f       	adc	r21, r21
    2dc6:	62 9f       	mul	r22, r18
    2dc8:	f0 01       	movw	r30, r0
    2dca:	72 9f       	mul	r23, r18
    2dcc:	bb 27       	eor	r27, r27
    2dce:	f0 0d       	add	r31, r0
    2dd0:	b1 1d       	adc	r27, r1
    2dd2:	63 9f       	mul	r22, r19
    2dd4:	aa 27       	eor	r26, r26
    2dd6:	f0 0d       	add	r31, r0
    2dd8:	b1 1d       	adc	r27, r1
    2dda:	aa 1f       	adc	r26, r26
    2ddc:	64 9f       	mul	r22, r20
    2dde:	66 27       	eor	r22, r22
    2de0:	b0 0d       	add	r27, r0
    2de2:	a1 1d       	adc	r26, r1
    2de4:	66 1f       	adc	r22, r22
    2de6:	82 9f       	mul	r24, r18
    2de8:	22 27       	eor	r18, r18
    2dea:	b0 0d       	add	r27, r0
    2dec:	a1 1d       	adc	r26, r1
    2dee:	62 1f       	adc	r22, r18
    2df0:	73 9f       	mul	r23, r19
    2df2:	b0 0d       	add	r27, r0
    2df4:	a1 1d       	adc	r26, r1
    2df6:	62 1f       	adc	r22, r18
    2df8:	83 9f       	mul	r24, r19
    2dfa:	a0 0d       	add	r26, r0
    2dfc:	61 1d       	adc	r22, r1
    2dfe:	22 1f       	adc	r18, r18
    2e00:	74 9f       	mul	r23, r20
    2e02:	33 27       	eor	r19, r19
    2e04:	a0 0d       	add	r26, r0
    2e06:	61 1d       	adc	r22, r1
    2e08:	23 1f       	adc	r18, r19
    2e0a:	84 9f       	mul	r24, r20
    2e0c:	60 0d       	add	r22, r0
    2e0e:	21 1d       	adc	r18, r1
    2e10:	82 2f       	mov	r24, r18
    2e12:	76 2f       	mov	r23, r22
    2e14:	6a 2f       	mov	r22, r26
    2e16:	11 24       	eor	r1, r1
    2e18:	9f 57       	subi	r25, 0x7F	; 127
    2e1a:	50 40       	sbci	r21, 0x00	; 0
    2e1c:	8a f0       	brmi	.+34     	; 0x2e40 <__mulsf3_pse+0x84>
    2e1e:	e1 f0       	breq	.+56     	; 0x2e58 <__mulsf3_pse+0x9c>
    2e20:	88 23       	and	r24, r24
    2e22:	4a f0       	brmi	.+18     	; 0x2e36 <__mulsf3_pse+0x7a>
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	bb 1f       	adc	r27, r27
    2e2a:	66 1f       	adc	r22, r22
    2e2c:	77 1f       	adc	r23, r23
    2e2e:	88 1f       	adc	r24, r24
    2e30:	91 50       	subi	r25, 0x01	; 1
    2e32:	50 40       	sbci	r21, 0x00	; 0
    2e34:	a9 f7       	brne	.-22     	; 0x2e20 <__mulsf3_pse+0x64>
    2e36:	9e 3f       	cpi	r25, 0xFE	; 254
    2e38:	51 05       	cpc	r21, r1
    2e3a:	70 f0       	brcs	.+28     	; 0x2e58 <__mulsf3_pse+0x9c>
    2e3c:	49 ce       	rjmp	.-878    	; 0x2ad0 <__fp_inf>
    2e3e:	f1 ce       	rjmp	.-542    	; 0x2c22 <__fp_szero>
    2e40:	5f 3f       	cpi	r21, 0xFF	; 255
    2e42:	ec f3       	brlt	.-6      	; 0x2e3e <__mulsf3_pse+0x82>
    2e44:	98 3e       	cpi	r25, 0xE8	; 232
    2e46:	dc f3       	brlt	.-10     	; 0x2e3e <__mulsf3_pse+0x82>
    2e48:	86 95       	lsr	r24
    2e4a:	77 95       	ror	r23
    2e4c:	67 95       	ror	r22
    2e4e:	b7 95       	ror	r27
    2e50:	f7 95       	ror	r31
    2e52:	e7 95       	ror	r30
    2e54:	9f 5f       	subi	r25, 0xFF	; 255
    2e56:	c1 f7       	brne	.-16     	; 0x2e48 <__mulsf3_pse+0x8c>
    2e58:	fe 2b       	or	r31, r30
    2e5a:	88 0f       	add	r24, r24
    2e5c:	91 1d       	adc	r25, r1
    2e5e:	96 95       	lsr	r25
    2e60:	87 95       	ror	r24
    2e62:	97 f9       	bld	r25, 7
    2e64:	08 95       	ret

00002e66 <sin>:
    2e66:	9f 93       	push	r25
    2e68:	70 de       	rcall	.-800    	; 0x2b4a <__fp_rempio2>
    2e6a:	0f 90       	pop	r0
    2e6c:	07 fc       	sbrc	r0, 7
    2e6e:	ee 5f       	subi	r30, 0xFE	; 254
    2e70:	a4 ce       	rjmp	.-696    	; 0x2bba <__fp_sinus>
    2e72:	11 f4       	brne	.+4      	; 0x2e78 <sin+0x12>
    2e74:	0e f4       	brtc	.+2      	; 0x2e78 <sin+0x12>
    2e76:	32 ce       	rjmp	.-924    	; 0x2adc <__fp_nan>
    2e78:	41 c0       	rjmp	.+130    	; 0x2efc <__fp_mpack>

00002e7a <sqrt>:
    2e7a:	b8 de       	rcall	.-656    	; 0x2bec <__fp_splitA>
    2e7c:	d0 f3       	brcs	.-12     	; 0x2e72 <sin+0xc>
    2e7e:	99 23       	and	r25, r25
    2e80:	d9 f3       	breq	.-10     	; 0x2e78 <sin+0x12>
    2e82:	ce f3       	brts	.-14     	; 0x2e76 <sin+0x10>
    2e84:	9f 57       	subi	r25, 0x7F	; 127
    2e86:	55 0b       	sbc	r21, r21
    2e88:	87 ff       	sbrs	r24, 7
    2e8a:	46 d0       	rcall	.+140    	; 0x2f18 <__fp_norm2>
    2e8c:	00 24       	eor	r0, r0
    2e8e:	a0 e6       	ldi	r26, 0x60	; 96
    2e90:	40 ea       	ldi	r20, 0xA0	; 160
    2e92:	90 01       	movw	r18, r0
    2e94:	80 58       	subi	r24, 0x80	; 128
    2e96:	56 95       	lsr	r21
    2e98:	97 95       	ror	r25
    2e9a:	28 f4       	brcc	.+10     	; 0x2ea6 <sqrt+0x2c>
    2e9c:	80 5c       	subi	r24, 0xC0	; 192
    2e9e:	66 0f       	add	r22, r22
    2ea0:	77 1f       	adc	r23, r23
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	20 f0       	brcs	.+8      	; 0x2eae <sqrt+0x34>
    2ea6:	26 17       	cp	r18, r22
    2ea8:	37 07       	cpc	r19, r23
    2eaa:	48 07       	cpc	r20, r24
    2eac:	30 f4       	brcc	.+12     	; 0x2eba <sqrt+0x40>
    2eae:	62 1b       	sub	r22, r18
    2eb0:	73 0b       	sbc	r23, r19
    2eb2:	84 0b       	sbc	r24, r20
    2eb4:	20 29       	or	r18, r0
    2eb6:	31 29       	or	r19, r1
    2eb8:	4a 2b       	or	r20, r26
    2eba:	a6 95       	lsr	r26
    2ebc:	17 94       	ror	r1
    2ebe:	07 94       	ror	r0
    2ec0:	20 25       	eor	r18, r0
    2ec2:	31 25       	eor	r19, r1
    2ec4:	4a 27       	eor	r20, r26
    2ec6:	58 f7       	brcc	.-42     	; 0x2e9e <sqrt+0x24>
    2ec8:	66 0f       	add	r22, r22
    2eca:	77 1f       	adc	r23, r23
    2ecc:	88 1f       	adc	r24, r24
    2ece:	20 f0       	brcs	.+8      	; 0x2ed8 <sqrt+0x5e>
    2ed0:	26 17       	cp	r18, r22
    2ed2:	37 07       	cpc	r19, r23
    2ed4:	48 07       	cpc	r20, r24
    2ed6:	30 f4       	brcc	.+12     	; 0x2ee4 <sqrt+0x6a>
    2ed8:	62 0b       	sbc	r22, r18
    2eda:	73 0b       	sbc	r23, r19
    2edc:	84 0b       	sbc	r24, r20
    2ede:	20 0d       	add	r18, r0
    2ee0:	31 1d       	adc	r19, r1
    2ee2:	41 1d       	adc	r20, r1
    2ee4:	a0 95       	com	r26
    2ee6:	81 f7       	brne	.-32     	; 0x2ec8 <sqrt+0x4e>
    2ee8:	b9 01       	movw	r22, r18
    2eea:	84 2f       	mov	r24, r20
    2eec:	91 58       	subi	r25, 0x81	; 129
    2eee:	88 0f       	add	r24, r24
    2ef0:	96 95       	lsr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	08 95       	ret

00002ef6 <square>:
    2ef6:	9b 01       	movw	r18, r22
    2ef8:	ac 01       	movw	r20, r24
    2efa:	52 cf       	rjmp	.-348    	; 0x2da0 <__mulsf3>

00002efc <__fp_mpack>:
    2efc:	9f 3f       	cpi	r25, 0xFF	; 255
    2efe:	31 f0       	breq	.+12     	; 0x2f0c <__fp_mpack_finite+0xc>

00002f00 <__fp_mpack_finite>:
    2f00:	91 50       	subi	r25, 0x01	; 1
    2f02:	20 f4       	brcc	.+8      	; 0x2f0c <__fp_mpack_finite+0xc>
    2f04:	87 95       	ror	r24
    2f06:	77 95       	ror	r23
    2f08:	67 95       	ror	r22
    2f0a:	b7 95       	ror	r27
    2f0c:	88 0f       	add	r24, r24
    2f0e:	91 1d       	adc	r25, r1
    2f10:	96 95       	lsr	r25
    2f12:	87 95       	ror	r24
    2f14:	97 f9       	bld	r25, 7
    2f16:	08 95       	ret

00002f18 <__fp_norm2>:
    2f18:	91 50       	subi	r25, 0x01	; 1
    2f1a:	50 40       	sbci	r21, 0x00	; 0
    2f1c:	66 0f       	add	r22, r22
    2f1e:	77 1f       	adc	r23, r23
    2f20:	88 1f       	adc	r24, r24
    2f22:	d2 f7       	brpl	.-12     	; 0x2f18 <__fp_norm2>
    2f24:	08 95       	ret

00002f26 <__fp_powsodd>:
    2f26:	9f 93       	push	r25
    2f28:	8f 93       	push	r24
    2f2a:	7f 93       	push	r23
    2f2c:	6f 93       	push	r22
    2f2e:	ff 93       	push	r31
    2f30:	ef 93       	push	r30
    2f32:	9b 01       	movw	r18, r22
    2f34:	ac 01       	movw	r20, r24
    2f36:	34 df       	rcall	.-408    	; 0x2da0 <__mulsf3>
    2f38:	ef 91       	pop	r30
    2f3a:	ff 91       	pop	r31
    2f3c:	d2 dd       	rcall	.-1116   	; 0x2ae2 <__fp_powser>
    2f3e:	2f 91       	pop	r18
    2f40:	3f 91       	pop	r19
    2f42:	4f 91       	pop	r20
    2f44:	5f 91       	pop	r21
    2f46:	2c cf       	rjmp	.-424    	; 0x2da0 <__mulsf3>

00002f48 <__divmodhi4>:
    2f48:	97 fb       	bst	r25, 7
    2f4a:	07 2e       	mov	r0, r23
    2f4c:	16 f4       	brtc	.+4      	; 0x2f52 <__divmodhi4+0xa>
    2f4e:	00 94       	com	r0
    2f50:	07 d0       	rcall	.+14     	; 0x2f60 <__divmodhi4_neg1>
    2f52:	77 fd       	sbrc	r23, 7
    2f54:	09 d0       	rcall	.+18     	; 0x2f68 <__divmodhi4_neg2>
    2f56:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__udivmodhi4>
    2f5a:	07 fc       	sbrc	r0, 7
    2f5c:	05 d0       	rcall	.+10     	; 0x2f68 <__divmodhi4_neg2>
    2f5e:	3e f4       	brtc	.+14     	; 0x2f6e <__divmodhi4_exit>

00002f60 <__divmodhi4_neg1>:
    2f60:	90 95       	com	r25
    2f62:	81 95       	neg	r24
    2f64:	9f 4f       	sbci	r25, 0xFF	; 255
    2f66:	08 95       	ret

00002f68 <__divmodhi4_neg2>:
    2f68:	70 95       	com	r23
    2f6a:	61 95       	neg	r22
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255

00002f6e <__divmodhi4_exit>:
    2f6e:	08 95       	ret

00002f70 <__udivmodhi4>:
    2f70:	aa 1b       	sub	r26, r26
    2f72:	bb 1b       	sub	r27, r27
    2f74:	51 e1       	ldi	r21, 0x11	; 17
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <__udivmodhi4_ep>

00002f78 <__udivmodhi4_loop>:
    2f78:	aa 1f       	adc	r26, r26
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	a6 17       	cp	r26, r22
    2f7e:	b7 07       	cpc	r27, r23
    2f80:	10 f0       	brcs	.+4      	; 0x2f86 <__udivmodhi4_ep>
    2f82:	a6 1b       	sub	r26, r22
    2f84:	b7 0b       	sbc	r27, r23

00002f86 <__udivmodhi4_ep>:
    2f86:	88 1f       	adc	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	5a 95       	dec	r21
    2f8c:	a9 f7       	brne	.-22     	; 0x2f78 <__udivmodhi4_loop>
    2f8e:	80 95       	com	r24
    2f90:	90 95       	com	r25
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	08 95       	ret

00002f98 <itoa>:
    2f98:	fb 01       	movw	r30, r22
    2f9a:	9f 01       	movw	r18, r30
    2f9c:	e8 94       	clt
    2f9e:	42 30       	cpi	r20, 0x02	; 2
    2fa0:	c4 f0       	brlt	.+48     	; 0x2fd2 <itoa+0x3a>
    2fa2:	45 32       	cpi	r20, 0x25	; 37
    2fa4:	b4 f4       	brge	.+44     	; 0x2fd2 <itoa+0x3a>
    2fa6:	4a 30       	cpi	r20, 0x0A	; 10
    2fa8:	29 f4       	brne	.+10     	; 0x2fb4 <itoa+0x1c>
    2faa:	97 fb       	bst	r25, 7
    2fac:	1e f4       	brtc	.+6      	; 0x2fb4 <itoa+0x1c>
    2fae:	90 95       	com	r25
    2fb0:	81 95       	neg	r24
    2fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb4:	64 2f       	mov	r22, r20
    2fb6:	77 27       	eor	r23, r23
    2fb8:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__udivmodhi4>
    2fbc:	80 5d       	subi	r24, 0xD0	; 208
    2fbe:	8a 33       	cpi	r24, 0x3A	; 58
    2fc0:	0c f0       	brlt	.+2      	; 0x2fc4 <itoa+0x2c>
    2fc2:	89 5d       	subi	r24, 0xD9	; 217
    2fc4:	81 93       	st	Z+, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	a1 f7       	brne	.-24     	; 0x2fb4 <itoa+0x1c>
    2fcc:	16 f4       	brtc	.+4      	; 0x2fd2 <itoa+0x3a>
    2fce:	5d e2       	ldi	r21, 0x2D	; 45
    2fd0:	51 93       	st	Z+, r21
    2fd2:	10 82       	st	Z, r1
    2fd4:	c9 01       	movw	r24, r18
    2fd6:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <strrev>

00002fda <strrev>:
    2fda:	dc 01       	movw	r26, r24
    2fdc:	fc 01       	movw	r30, r24
    2fde:	67 2f       	mov	r22, r23
    2fe0:	71 91       	ld	r23, Z+
    2fe2:	77 23       	and	r23, r23
    2fe4:	e1 f7       	brne	.-8      	; 0x2fde <strrev+0x4>
    2fe6:	32 97       	sbiw	r30, 0x02	; 2
    2fe8:	04 c0       	rjmp	.+8      	; 0x2ff2 <strrev+0x18>
    2fea:	7c 91       	ld	r23, X
    2fec:	6d 93       	st	X+, r22
    2fee:	70 83       	st	Z, r23
    2ff0:	62 91       	ld	r22, -Z
    2ff2:	ae 17       	cp	r26, r30
    2ff4:	bf 07       	cpc	r27, r31
    2ff6:	c8 f3       	brcs	.-14     	; 0x2fea <strrev+0x10>
    2ff8:	08 95       	ret

00002ffa <_exit>:
    2ffa:	f8 94       	cli

00002ffc <__stop_program>:
    2ffc:	ff cf       	rjmp	.-2      	; 0x2ffc <__stop_program>
