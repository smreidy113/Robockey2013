
Robockey.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f3a  00000fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800108  00800108  00000fd6  2**0
                  ALLOC
  3 .stab         00000804  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ed  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000270  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028ab  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008f9  00000000  00000000  00004613  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f4b  00000000  00000000  00004f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000644  00000000  00000000  00005e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006c8  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000272d  00000000  00000000  00006b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000250  00000000  00000000  00009291  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x30)){return 0;}
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x01)){return 0;}
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	end();
  28:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  2c:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x90)){return 0;} // p0
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	end();
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
  bc:	00 00 35 01 04 01 03 09 04 39 01 12 02 03 09 04     ..5......9......
	if(!send_byte(0x07)){return 0;}
	if(!send_byte(0x00)){return 0;}
  cc:	4d 01 06 03 03 09 04 55 01 08                       M......U..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
	if(!send_byte(0x41)){return 0;} // p1
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
	if(!send_byte(0x1A)){return 0;}
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
	if(!send_byte(0x40)){return 0;} // p2
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
	if(!send_byte(0x00)){return 0;} // p3
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
	if(!send_byte(0x33)){return 0;}
 149:	65 00 00 00                                         e...

0000014d <string2>:
	if(!send_byte(0x03)){return 0;}
 14d:	06 03 4d 00 32 00 00 00                             ..M.2...

00000155 <string3>:
 155:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ea e3       	ldi	r30, 0x3A	; 58
	if(!send_byte(0x30)){return 0;}
 174:	ff e0       	ldi	r31, 0x0F	; 15
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
	if(!send_byte(0x08)){return 0;}
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
	end();
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ad 30       	cpi	r26, 0x0D	; 13
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 19 06 	call	0xc32	; 0xc32 <main>
 196:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <_exit>

0000019a <__bad_interrupt>:
	
	m_wait(INTERPACKET);

	return 1;
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <m_bus_init>:
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 19e:	58 9a       	sbi	0x0b, 0	; 11
 1a0:	59 9a       	sbi	0x0b, 1	; 11
	if(!send_byte(0x30)){return 0;}
 1a2:	5a 9a       	sbi	0x0b, 2	; 11
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
	if(!send_byte(0x01)){return 0;}
 1a6:	80 93 b8 00 	sts	0x00B8, r24
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 1aa:	e9 e6       	ldi	r30, 0x69	; 105
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
	if(!send_byte(0x00)){return 0;}
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
	if(!send_byte(0x00)){return 0;}
 1b2:	80 83       	st	Z, r24
 1b4:	80 81       	ld	r24, Z
	if(!send_byte(0x00)){return 0;}
 1b6:	8f 7e       	andi	r24, 0xEF	; 239
 1b8:	80 83       	st	Z, r24
	if(!send_byte(0x00)){return 0;}
 1ba:	ea 9a       	sbi	0x1d, 2	; 29
 1bc:	78 94       	sei
	if(!send_byte(0x00)){return 0;}
 1be:	08 95       	ret

000001c0 <twi_read_byte>:
 1c0:	84 e8       	ldi	r24, 0x84	; 132
	if(!send_byte(0x00)){return 0;}
 1c2:	80 93 bc 00 	sts	0x00BC, r24
	if(!send_byte(0x00)){return 0;}
 1c6:	ec eb       	ldi	r30, 0xBC	; 188
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
	if(!send_byte(0x90)){return 0;} // p0
 1ca:	80 81       	ld	r24, Z
 1cc:	88 23       	and	r24, r24
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 1ce:	ec f7       	brge	.-6      	; 0x1ca <twi_read_byte+0xa>
 1d0:	80 91 bb 00 	lds	r24, 0x00BB
	if(!send_byte(0x07)){return 0;}
 1d4:	08 95       	ret

000001d6 <twi_stop>:
	if(!send_byte(0x00)){return 0;}
 1d6:	84 e9       	ldi	r24, 0x94	; 148
 1d8:	80 93 bc 00 	sts	0x00BC, r24
	if(!send_byte(0x41)){return 0;} // p1
 1dc:	08 95       	ret

000001de <twi_wait_for_ack>:
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
	if(!send_byte(0x1A)){return 0;}
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
	if(!send_byte(0x40)){return 0;} // p2
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
	if(!send_byte(0x00)){return 0;} // p3
 1ea:	34 f0       	brlt	.+12     	; 0x1f8 <twi_wait_for_ack+0x1a>
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	29 3e       	cpi	r18, 0xE9	; 233
	if(!send_byte(0x33)){return 0;}
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	38 07       	cpc	r19, r24
	if(!send_byte(0x03)){return 0;}
 1f6:	b9 f7       	brne	.-18     	; 0x1e6 <twi_wait_for_ack+0x8>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 1fa:	28 3e       	cpi	r18, 0xE8	; 232
 1fc:	33 40       	sbci	r19, 0x03	; 3
	if(!send_byte(0x30)){return 0;}
 1fe:	09 f4       	brne	.+2      	; 0x202 <twi_wait_for_ack+0x24>
 200:	80 e0       	ldi	r24, 0x00	; 0
	if(!send_byte(0x08)){return 0;}
 202:	08 95       	ret

00000204 <twi_send_byte>:
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
 204:	80 93 bb 00 	sts	0x00BB, r24

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
 20e:	0e 94 ef 00 	call	0x1de	; 0x1de <twi_wait_for_ack>
 212:	88 23       	and	r24, r24
 214:	21 f0       	breq	.+8      	; 0x21e <twi_send_byte+0x1a>
 216:	80 91 b9 00 	lds	r24, 0x00B9
 21a:	88 7f       	andi	r24, 0xF8	; 248
 21c:	08 95       	ret
 21e:	80 e0       	ldi	r24, 0x00	; 0
}
 220:	08 95       	ret

00000222 <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	c8 2f       	mov	r28, r24
 228:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 22a:	94 ea       	ldi	r25, 0xA4	; 164
 22c:	90 93 bc 00 	sts	0x00BC, r25
    if(!twi_wait_for_ack()){
 230:	0e 94 ef 00 	call	0x1de	; 0x1de <twi_wait_for_ack>
 234:	81 11       	cpse	r24, r1
 236:	04 c0       	rjmp	.+8      	; 0x240 <twi_start+0x1e>
        twi_stop();
 238:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <twi_stop>
        return 0; // COMM failure
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	1a c0       	rjmp	.+52     	; 0x274 <twi_start+0x52>
    }
    
    // ADDRESS packet:
    if(readwrite)
 240:	dd 23       	and	r29, r29
 242:	59 f0       	breq	.+22     	; 0x25a <twi_start+0x38>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
 244:	8c 2f       	mov	r24, r28
 246:	88 0f       	add	r24, r24
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	0e 94 02 01 	call	0x204	; 0x204 <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
 24e:	88 34       	cpi	r24, 0x48	; 72
 250:	71 f4       	brne	.+28     	; 0x26e <twi_start+0x4c>
            twi_stop();    
 252:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <twi_stop>
            return 0;	// failure
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0d c0       	rjmp	.+26     	; 0x274 <twi_start+0x52>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
 25a:	8c 2f       	mov	r24, r28
 25c:	88 0f       	add	r24, r24
 25e:	0e 94 02 01 	call	0x204	; 0x204 <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
 262:	80 32       	cpi	r24, 0x20	; 32
 264:	31 f4       	brne	.+12     	; 0x272 <twi_start+0x50>
            twi_stop();
 266:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <twi_stop>
            return 0;	// failure
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	03 c0       	rjmp	.+6      	; 0x274 <twi_start+0x52>
        }	        
    }
    return 1;	// success
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <twi_start+0x52>
 272:	81 e0       	ldi	r24, 0x01	; 1
    
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <m_write_register>:
    if(!twi_start(addr,READ)) return 0;  // START + R
	return(twi_read_byte());             // return register value
}

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	c6 2f       	mov	r28, r22
 280:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	0e 94 11 01 	call	0x222	; 0x222 <twi_start>
 288:	88 23       	and	r24, r24
 28a:	71 f0       	breq	.+28     	; 0x2a8 <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 02 01 	call	0x204	; 0x204 <twi_send_byte>
 292:	88 23       	and	r24, r24
 294:	59 f0       	breq	.+22     	; 0x2ac <m_write_register+0x32>
    if(!twi_send_byte(value)) return 0;  // value
 296:	8d 2f       	mov	r24, r29
 298:	0e 94 02 01 	call	0x204	; 0x204 <twi_send_byte>
 29c:	88 23       	and	r24, r24
 29e:	41 f0       	breq	.+16     	; 0x2b0 <m_write_register+0x36>
    twi_stop();                          // STOP
 2a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <twi_stop>
    return(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <m_write_register+0x38>
	return(twi_read_byte());             // return register value
}

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <m_write_register+0x38>
	if(!twi_send_byte(reg)) return 0;    // register to write to
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <m_write_register+0x38>
    if(!twi_send_byte(value)) return 0;  // value
 2b0:	80 e0       	ldi	r24, 0x00	; 0
    twi_stop();                          // STOP
    return(1);
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	c8 2f       	mov	r28, r24
 2be:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	0e 94 11 01 	call	0x222	; 0x222 <twi_start>
 2c6:	88 23       	and	r24, r24
 2c8:	81 f0       	breq	.+32     	; 0x2ea <m_read_register+0x32>
	if(!twi_send_byte(reg)) return 0;    // register to read
 2ca:	8d 2f       	mov	r24, r29
 2cc:	0e 94 02 01 	call	0x204	; 0x204 <twi_send_byte>
 2d0:	88 23       	and	r24, r24
 2d2:	69 f0       	breq	.+26     	; 0x2ee <m_read_register+0x36>
    twi_stop();                          // STOP
 2d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <twi_stop>
    if(!twi_start(addr,READ)) return 0;  // START + R
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	8c 2f       	mov	r24, r28
 2dc:	0e 94 11 01 	call	0x222	; 0x222 <twi_start>
 2e0:	88 23       	and	r24, r24
 2e2:	39 f0       	breq	.+14     	; 0x2f2 <m_read_register+0x3a>
	return(twi_read_byte());             // return register value
 2e4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <twi_read_byte>
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <m_read_register+0x3c>
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <m_read_register+0x3c>
	if(!twi_send_byte(reg)) return 0;    // register to read
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <m_read_register+0x3c>
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
 2f2:	80 e0       	ldi	r24, 0x00	; 0
	return(twi_read_byte());             // return register value
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <disp>:
#include "m_port.h"

#define ADDR 0x20

void disp(int num) {
	switch (num) {
 2fa:	84 30       	cpi	r24, 0x04	; 4
 2fc:	91 05       	cpc	r25, r1
 2fe:	09 f4       	brne	.+2      	; 0x302 <disp+0x8>
 300:	91 c0       	rjmp	.+290    	; 0x424 <disp+0x12a>
 302:	7c f4       	brge	.+30     	; 0x322 <disp+0x28>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	91 05       	cpc	r25, r1
 308:	09 f1       	breq	.+66     	; 0x34c <disp+0x52>
 30a:	24 f4       	brge	.+8      	; 0x314 <disp+0x1a>
 30c:	89 2b       	or	r24, r25
 30e:	09 f4       	brne	.+2      	; 0x312 <disp+0x18>
 310:	61 c1       	rjmp	.+706    	; 0x5d4 <disp+0x2da>
 312:	08 95       	ret
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	e9 f1       	breq	.+122    	; 0x394 <disp+0x9a>
 31a:	03 97       	sbiw	r24, 0x03	; 3
 31c:	09 f0       	breq	.+2      	; 0x320 <disp+0x26>
 31e:	7d c1       	rjmp	.+762    	; 0x61a <disp+0x320>
 320:	5d c0       	rjmp	.+186    	; 0x3dc <disp+0xe2>
 322:	87 30       	cpi	r24, 0x07	; 7
 324:	91 05       	cpc	r25, r1
 326:	09 f4       	brne	.+2      	; 0x32a <disp+0x30>
 328:	e9 c0       	rjmp	.+466    	; 0x4fc <disp+0x202>
 32a:	44 f4       	brge	.+16     	; 0x33c <disp+0x42>
 32c:	85 30       	cpi	r24, 0x05	; 5
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <disp+0x3a>
 332:	9c c0       	rjmp	.+312    	; 0x46c <disp+0x172>
 334:	06 97       	sbiw	r24, 0x06	; 6
 336:	09 f0       	breq	.+2      	; 0x33a <disp+0x40>
 338:	70 c1       	rjmp	.+736    	; 0x61a <disp+0x320>
 33a:	bc c0       	rjmp	.+376    	; 0x4b4 <disp+0x1ba>
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	91 05       	cpc	r25, r1
 340:	09 f4       	brne	.+2      	; 0x344 <disp+0x4a>
 342:	00 c1       	rjmp	.+512    	; 0x544 <disp+0x24a>
 344:	09 97       	sbiw	r24, 0x09	; 9
 346:	09 f0       	breq	.+2      	; 0x34a <disp+0x50>
 348:	68 c1       	rjmp	.+720    	; 0x61a <disp+0x320>
 34a:	20 c1       	rjmp	.+576    	; 0x58c <disp+0x292>
		case 1:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 34c:	46 e0       	ldi	r20, 0x06	; 6
 34e:	62 e1       	ldi	r22, 0x12	; 18
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 356:	43 e0       	ldi	r20, 0x03	; 3
 358:	62 e1       	ldi	r22, 0x12	; 18
 35a:	80 e2       	ldi	r24, 0x20	; 32
 35c:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,TOP1,TOP2);
 360:	42 e0       	ldi	r20, 0x02	; 2
 362:	62 e1       	ldi	r22, 0x12	; 18
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,UPPERLEFT1,UPPERLEFT2);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	62 e1       	ldi	r22, 0x12	; 18
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,LOWERLEFT1,LOWERLEFT2);
 374:	44 e0       	ldi	r20, 0x04	; 4
 376:	62 e1       	ldi	r22, 0x12	; 18
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,BOTTOM1,BOTTOM2);
 37e:	45 e0       	ldi	r20, 0x05	; 5
 380:	62 e1       	ldi	r22, 0x12	; 18
 382:	80 e2       	ldi	r24, 0x20	; 32
 384:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,MIDDLE1,MIDDLE2);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	62 e1       	ldi	r22, 0x12	; 18
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			break;
 392:	08 95       	ret
		case 2:
			m_port_clear(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 394:	46 e0       	ldi	r20, 0x06	; 6
 396:	62 e1       	ldi	r22, 0x12	; 18
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 39e:	43 e0       	ldi	r20, 0x03	; 3
 3a0:	62 e1       	ldi	r22, 0x12	; 18
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,TOP1,TOP2);
 3a8:	42 e0       	ldi	r20, 0x02	; 2
 3aa:	62 e1       	ldi	r22, 0x12	; 18
 3ac:	80 e2       	ldi	r24, 0x20	; 32
 3ae:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,UPPERLEFT1,UPPERLEFT2);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	62 e1       	ldi	r22, 0x12	; 18
 3b6:	80 e2       	ldi	r24, 0x20	; 32
 3b8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,LOWERLEFT1,LOWERLEFT2);
 3bc:	44 e0       	ldi	r20, 0x04	; 4
 3be:	62 e1       	ldi	r22, 0x12	; 18
 3c0:	80 e2       	ldi	r24, 0x20	; 32
 3c2:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 3c6:	45 e0       	ldi	r20, 0x05	; 5
 3c8:	62 e1       	ldi	r22, 0x12	; 18
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	62 e1       	ldi	r22, 0x12	; 18
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			break;
 3da:	08 95       	ret
		case 3:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 3dc:	46 e0       	ldi	r20, 0x06	; 6
 3de:	62 e1       	ldi	r22, 0x12	; 18
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 3e6:	43 e0       	ldi	r20, 0x03	; 3
 3e8:	62 e1       	ldi	r22, 0x12	; 18
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,TOP1,TOP2);
 3f0:	42 e0       	ldi	r20, 0x02	; 2
 3f2:	62 e1       	ldi	r22, 0x12	; 18
 3f4:	80 e2       	ldi	r24, 0x20	; 32
 3f6:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,UPPERLEFT1,UPPERLEFT2);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	62 e1       	ldi	r22, 0x12	; 18
 3fe:	80 e2       	ldi	r24, 0x20	; 32
 400:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,LOWERLEFT1,LOWERLEFT2);
 404:	44 e0       	ldi	r20, 0x04	; 4
 406:	62 e1       	ldi	r22, 0x12	; 18
 408:	80 e2       	ldi	r24, 0x20	; 32
 40a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 40e:	45 e0       	ldi	r20, 0x05	; 5
 410:	62 e1       	ldi	r22, 0x12	; 18
 412:	80 e2       	ldi	r24, 0x20	; 32
 414:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	62 e1       	ldi	r22, 0x12	; 18
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			break;
 422:	08 95       	ret
		case 4:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 424:	46 e0       	ldi	r20, 0x06	; 6
 426:	62 e1       	ldi	r22, 0x12	; 18
 428:	80 e2       	ldi	r24, 0x20	; 32
 42a:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 42e:	43 e0       	ldi	r20, 0x03	; 3
 430:	62 e1       	ldi	r22, 0x12	; 18
 432:	80 e2       	ldi	r24, 0x20	; 32
 434:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,TOP1,TOP2);
 438:	42 e0       	ldi	r20, 0x02	; 2
 43a:	62 e1       	ldi	r22, 0x12	; 18
 43c:	80 e2       	ldi	r24, 0x20	; 32
 43e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,UPPERLEFT1,UPPERLEFT2);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	62 e1       	ldi	r22, 0x12	; 18
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,LOWERLEFT1,LOWERLEFT2);
 44c:	44 e0       	ldi	r20, 0x04	; 4
 44e:	62 e1       	ldi	r22, 0x12	; 18
 450:	80 e2       	ldi	r24, 0x20	; 32
 452:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,BOTTOM1,BOTTOM2);
 456:	45 e0       	ldi	r20, 0x05	; 5
 458:	62 e1       	ldi	r22, 0x12	; 18
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	62 e1       	ldi	r22, 0x12	; 18
 464:	80 e2       	ldi	r24, 0x20	; 32
 466:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			break;
 46a:	08 95       	ret
		case 5:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 46c:	46 e0       	ldi	r20, 0x06	; 6
 46e:	62 e1       	ldi	r22, 0x12	; 18
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 476:	43 e0       	ldi	r20, 0x03	; 3
 478:	62 e1       	ldi	r22, 0x12	; 18
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,TOP1,TOP2);
 480:	42 e0       	ldi	r20, 0x02	; 2
 482:	62 e1       	ldi	r22, 0x12	; 18
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERLEFT1,UPPERLEFT2);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	62 e1       	ldi	r22, 0x12	; 18
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,LOWERLEFT1,LOWERLEFT2);
 494:	44 e0       	ldi	r20, 0x04	; 4
 496:	62 e1       	ldi	r22, 0x12	; 18
 498:	80 e2       	ldi	r24, 0x20	; 32
 49a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 49e:	45 e0       	ldi	r20, 0x05	; 5
 4a0:	62 e1       	ldi	r22, 0x12	; 18
 4a2:	80 e2       	ldi	r24, 0x20	; 32
 4a4:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	62 e1       	ldi	r22, 0x12	; 18
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
		break;
 4b2:	08 95       	ret
		case 6:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 4b4:	46 e0       	ldi	r20, 0x06	; 6
 4b6:	62 e1       	ldi	r22, 0x12	; 18
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 4be:	43 e0       	ldi	r20, 0x03	; 3
 4c0:	62 e1       	ldi	r22, 0x12	; 18
 4c2:	80 e2       	ldi	r24, 0x20	; 32
 4c4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,TOP1,TOP2);
 4c8:	42 e0       	ldi	r20, 0x02	; 2
 4ca:	62 e1       	ldi	r22, 0x12	; 18
 4cc:	80 e2       	ldi	r24, 0x20	; 32
 4ce:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERLEFT1,UPPERLEFT2);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	62 e1       	ldi	r22, 0x12	; 18
 4d6:	80 e2       	ldi	r24, 0x20	; 32
 4d8:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,LOWERLEFT1,LOWERLEFT2);
 4dc:	44 e0       	ldi	r20, 0x04	; 4
 4de:	62 e1       	ldi	r22, 0x12	; 18
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 4e6:	45 e0       	ldi	r20, 0x05	; 5
 4e8:	62 e1       	ldi	r22, 0x12	; 18
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	62 e1       	ldi	r22, 0x12	; 18
 4f4:	80 e2       	ldi	r24, 0x20	; 32
 4f6:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			break;
 4fa:	08 95       	ret
		case 7:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 4fc:	46 e0       	ldi	r20, 0x06	; 6
 4fe:	62 e1       	ldi	r22, 0x12	; 18
 500:	80 e2       	ldi	r24, 0x20	; 32
 502:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 506:	43 e0       	ldi	r20, 0x03	; 3
 508:	62 e1       	ldi	r22, 0x12	; 18
 50a:	80 e2       	ldi	r24, 0x20	; 32
 50c:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,TOP1,TOP2);
 510:	42 e0       	ldi	r20, 0x02	; 2
 512:	62 e1       	ldi	r22, 0x12	; 18
 514:	80 e2       	ldi	r24, 0x20	; 32
 516:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,UPPERLEFT1,UPPERLEFT2);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	62 e1       	ldi	r22, 0x12	; 18
 51e:	80 e2       	ldi	r24, 0x20	; 32
 520:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,LOWERLEFT1,LOWERLEFT2);
 524:	44 e0       	ldi	r20, 0x04	; 4
 526:	62 e1       	ldi	r22, 0x12	; 18
 528:	80 e2       	ldi	r24, 0x20	; 32
 52a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,BOTTOM1,BOTTOM2);
 52e:	45 e0       	ldi	r20, 0x05	; 5
 530:	62 e1       	ldi	r22, 0x12	; 18
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_clear(ADDR,MIDDLE1,MIDDLE2);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	62 e1       	ldi	r22, 0x12	; 18
 53c:	80 e2       	ldi	r24, 0x20	; 32
 53e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			break;
 542:	08 95       	ret
		case 8:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 544:	46 e0       	ldi	r20, 0x06	; 6
 546:	62 e1       	ldi	r22, 0x12	; 18
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 54e:	43 e0       	ldi	r20, 0x03	; 3
 550:	62 e1       	ldi	r22, 0x12	; 18
 552:	80 e2       	ldi	r24, 0x20	; 32
 554:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,TOP1,TOP2);
 558:	42 e0       	ldi	r20, 0x02	; 2
 55a:	62 e1       	ldi	r22, 0x12	; 18
 55c:	80 e2       	ldi	r24, 0x20	; 32
 55e:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERLEFT1,UPPERLEFT2);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	62 e1       	ldi	r22, 0x12	; 18
 566:	80 e2       	ldi	r24, 0x20	; 32
 568:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,LOWERLEFT1,LOWERLEFT2);
 56c:	44 e0       	ldi	r20, 0x04	; 4
 56e:	62 e1       	ldi	r22, 0x12	; 18
 570:	80 e2       	ldi	r24, 0x20	; 32
 572:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 576:	45 e0       	ldi	r20, 0x05	; 5
 578:	62 e1       	ldi	r22, 0x12	; 18
 57a:	80 e2       	ldi	r24, 0x20	; 32
 57c:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	62 e1       	ldi	r22, 0x12	; 18
 584:	80 e2       	ldi	r24, 0x20	; 32
 586:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			break;
 58a:	08 95       	ret
		case 9:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 58c:	46 e0       	ldi	r20, 0x06	; 6
 58e:	62 e1       	ldi	r22, 0x12	; 18
 590:	80 e2       	ldi	r24, 0x20	; 32
 592:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 596:	43 e0       	ldi	r20, 0x03	; 3
 598:	62 e1       	ldi	r22, 0x12	; 18
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,TOP1,TOP2);
 5a0:	42 e0       	ldi	r20, 0x02	; 2
 5a2:	62 e1       	ldi	r22, 0x12	; 18
 5a4:	80 e2       	ldi	r24, 0x20	; 32
 5a6:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERLEFT1,UPPERLEFT2);
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	62 e1       	ldi	r22, 0x12	; 18
 5ae:	80 e2       	ldi	r24, 0x20	; 32
 5b0:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,LOWERLEFT1,LOWERLEFT2);
 5b4:	44 e0       	ldi	r20, 0x04	; 4
 5b6:	62 e1       	ldi	r22, 0x12	; 18
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 5be:	45 e0       	ldi	r20, 0x05	; 5
 5c0:	62 e1       	ldi	r22, 0x12	; 18
 5c2:	80 e2       	ldi	r24, 0x20	; 32
 5c4:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,MIDDLE1,MIDDLE2);
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	62 e1       	ldi	r22, 0x12	; 18
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			break;
 5d2:	08 95       	ret
		case 0:
			m_port_set(ADDR,LOWERRIGHT1,LOWERRIGHT2);
 5d4:	46 e0       	ldi	r20, 0x06	; 6
 5d6:	62 e1       	ldi	r22, 0x12	; 18
 5d8:	80 e2       	ldi	r24, 0x20	; 32
 5da:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERRIGHT1,UPPERRIGHT2);
 5de:	43 e0       	ldi	r20, 0x03	; 3
 5e0:	62 e1       	ldi	r22, 0x12	; 18
 5e2:	80 e2       	ldi	r24, 0x20	; 32
 5e4:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,TOP1,TOP2);
 5e8:	42 e0       	ldi	r20, 0x02	; 2
 5ea:	62 e1       	ldi	r22, 0x12	; 18
 5ec:	80 e2       	ldi	r24, 0x20	; 32
 5ee:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,UPPERLEFT1,UPPERLEFT2);
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	62 e1       	ldi	r22, 0x12	; 18
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,LOWERLEFT1,LOWERLEFT2);
 5fc:	44 e0       	ldi	r20, 0x04	; 4
 5fe:	62 e1       	ldi	r22, 0x12	; 18
 600:	80 e2       	ldi	r24, 0x20	; 32
 602:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_set(ADDR,BOTTOM1,BOTTOM2);
 606:	45 e0       	ldi	r20, 0x05	; 5
 608:	62 e1       	ldi	r22, 0x12	; 18
 60a:	80 e2       	ldi	r24, 0x20	; 32
 60c:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
			m_port_clear(ADDR,MIDDLE1,MIDDLE2);
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	62 e1       	ldi	r22, 0x12	; 18
 614:	80 e2       	ldi	r24, 0x20	; 32
 616:	0e 94 73 03 	call	0x6e6	; 0x6e6 <m_port_clear>
 61a:	08 95       	ret

0000061c <m_num_init>:
			break;
	}
}

void m_num_init() {
	m_port_init(ADDR);
 61c:	80 e2       	ldi	r24, 0x20	; 32
 61e:	0e 94 35 03 	call	0x66a	; 0x66a <m_port_init>
	m_port_set(ADDR,DDRG,0);
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	80 e2       	ldi	r24, 0x20	; 32
 628:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
	m_port_set(ADDR,DDRG,1);
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	80 e2       	ldi	r24, 0x20	; 32
 632:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
	m_port_set(ADDR,DDRG,2);
 636:	42 e0       	ldi	r20, 0x02	; 2
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	80 e2       	ldi	r24, 0x20	; 32
 63c:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
	m_port_set(ADDR,DDRG,3);
 640:	43 e0       	ldi	r20, 0x03	; 3
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	80 e2       	ldi	r24, 0x20	; 32
 646:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
	m_port_set(ADDR,DDRG,4);
 64a:	44 e0       	ldi	r20, 0x04	; 4
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
	m_port_set(ADDR,DDRG,5);
 654:	45 e0       	ldi	r20, 0x05	; 5
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	80 e2       	ldi	r24, 0x20	; 32
 65a:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
	m_port_set(ADDR,DDRG,6);
 65e:	46 e0       	ldi	r20, 0x06	; 6
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	80 e2       	ldi	r24, 0x20	; 32
 664:	0e 94 3f 03 	call	0x67e	; 0x67e <m_port_set>
 668:	08 95       	ret

0000066a <m_port_init>:

//unsigned char m_read_register(unsigned char addr, unsigned char reg);
//unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value);

unsigned char m_port_init(unsigned char address){
	if(m_write_register(address, 0x05, 0x38))
 66a:	48 e3       	ldi	r20, 0x38	; 56
 66c:	65 e0       	ldi	r22, 0x05	; 5
 66e:	0e 94 3d 01 	call	0x27a	; 0x27a <m_write_register>
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	81 11       	cpse	r24, r1
 676:	01 c0       	rjmp	.+2      	; 0x67a <m_port_init+0x10>
 678:	90 e0       	ldi	r25, 0x00	; 0
        return 1;
    else
        return 0;
}
 67a:	89 2f       	mov	r24, r25
 67c:	08 95       	ret

0000067e <m_port_set>:

unsigned char m_port_set(unsigned char address, unsigned char reg, unsigned char pin){
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	d8 2f       	mov	r29, r24
 686:	c6 2f       	mov	r28, r22
 688:	14 2f       	mov	r17, r20
	unsigned char value = m_read_register(address, reg);
 68a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <m_read_register>
	if(reg == DDRH || reg == DDRG){
 68e:	c2 30       	cpi	r28, 0x02	; 2
 690:	88 f4       	brcc	.+34     	; 0x6b4 <m_port_set+0x36>
        m_write_register(address, reg, value &= ~(1 << pin));
 692:	a1 e0       	ldi	r26, 0x01	; 1
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	fd 01       	movw	r30, r26
 698:	02 c0       	rjmp	.+4      	; 0x69e <m_port_set+0x20>
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	1a 95       	dec	r17
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <m_port_set+0x1c>
 6a2:	e0 95       	com	r30
 6a4:	48 2f       	mov	r20, r24
 6a6:	4e 23       	and	r20, r30
 6a8:	6c 2f       	mov	r22, r28
 6aa:	8d 2f       	mov	r24, r29
 6ac:	0e 94 3d 01 	call	0x27a	; 0x27a <m_write_register>
        return 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	15 c0       	rjmp	.+42     	; 0x6de <m_port_set+0x60>
	}
	else if(reg == PORTH || reg == PORTG){
 6b4:	9c 2f       	mov	r25, r28
 6b6:	92 51       	subi	r25, 0x12	; 18
 6b8:	92 30       	cpi	r25, 0x02	; 2
 6ba:	80 f4       	brcc	.+32     	; 0x6dc <m_port_set+0x5e>
        m_write_register(address, reg, value |= 1 << pin);
 6bc:	e1 e0       	ldi	r30, 0x01	; 1
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	9f 01       	movw	r18, r30
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <m_port_set+0x4a>
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	1a 95       	dec	r17
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <m_port_set+0x46>
 6cc:	48 2f       	mov	r20, r24
 6ce:	42 2b       	or	r20, r18
 6d0:	6c 2f       	mov	r22, r28
 6d2:	8d 2f       	mov	r24, r29
 6d4:	0e 94 3d 01 	call	0x27a	; 0x27a <m_write_register>
        return 1;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	01 c0       	rjmp	.+2      	; 0x6de <m_port_set+0x60>
    }
    else return 0;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	08 95       	ret

000006e6 <m_port_clear>:

unsigned char m_port_clear(unsigned char address, unsigned char reg, unsigned char pin){
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	d8 2f       	mov	r29, r24
 6ee:	c6 2f       	mov	r28, r22
 6f0:	14 2f       	mov	r17, r20
	unsigned char value = m_read_register(address, reg);
 6f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <m_read_register>
	if(reg == PORTH || reg == PORTG){
 6f6:	9c 2f       	mov	r25, r28
 6f8:	92 51       	subi	r25, 0x12	; 18
 6fa:	92 30       	cpi	r25, 0x02	; 2
 6fc:	88 f4       	brcc	.+34     	; 0x720 <m_port_clear+0x3a>
        m_write_register(address, reg, value &= ~(1 << pin));
 6fe:	a1 e0       	ldi	r26, 0x01	; 1
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	fd 01       	movw	r30, r26
 704:	02 c0       	rjmp	.+4      	; 0x70a <m_port_clear+0x24>
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	1a 95       	dec	r17
 70c:	e2 f7       	brpl	.-8      	; 0x706 <m_port_clear+0x20>
 70e:	e0 95       	com	r30
 710:	48 2f       	mov	r20, r24
 712:	4e 23       	and	r20, r30
 714:	6c 2f       	mov	r22, r28
 716:	8d 2f       	mov	r24, r29
 718:	0e 94 3d 01 	call	0x27a	; 0x27a <m_write_register>
        return 1;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	13 c0       	rjmp	.+38     	; 0x746 <m_port_clear+0x60>
	}
	else if(reg == DDRH || reg == DDRG){
 720:	c2 30       	cpi	r28, 0x02	; 2
 722:	80 f4       	brcc	.+32     	; 0x744 <m_port_clear+0x5e>
        m_write_register(address, reg, value |= 1 << pin);
 724:	e1 e0       	ldi	r30, 0x01	; 1
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	9f 01       	movw	r18, r30
 72a:	02 c0       	rjmp	.+4      	; 0x730 <m_port_clear+0x4a>
 72c:	22 0f       	add	r18, r18
 72e:	33 1f       	adc	r19, r19
 730:	1a 95       	dec	r17
 732:	e2 f7       	brpl	.-8      	; 0x72c <m_port_clear+0x46>
 734:	48 2f       	mov	r20, r24
 736:	42 2b       	or	r20, r18
 738:	6c 2f       	mov	r22, r28
 73a:	8d 2f       	mov	r24, r29
 73c:	0e 94 3d 01 	call	0x27a	; 0x27a <m_write_register>
        return 1;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	01 c0       	rjmp	.+2      	; 0x746 <m_port_clear+0x60>
    }
    else return 0;
 744:	80 e0       	ldi	r24, 0x00	; 0
}
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	08 95       	ret

0000074e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	18 2f       	mov	r17, r24
 756:	d6 2f       	mov	r29, r22
 758:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 75a:	0e 94 cf 00 	call	0x19e	; 0x19e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 75e:	94 ea       	ldi	r25, 0xA4	; 164
 760:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 764:	ec eb       	ldi	r30, 0xBC	; 188
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	90 81       	ld	r25, Z
 76a:	99 23       	and	r25, r25
 76c:	ec f7       	brge	.-6      	; 0x768 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 76e:	90 e5       	ldi	r25, 0x50	; 80
 770:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 774:	94 e8       	ldi	r25, 0x84	; 132
 776:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 77a:	ec eb       	ldi	r30, 0xBC	; 188
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	90 81       	ld	r25, Z
 780:	99 23       	and	r25, r25
 782:	ec f7       	brge	.-6      	; 0x77e <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 784:	90 91 b9 00 	lds	r25, 0x00B9
 788:	98 7f       	andi	r25, 0xF8	; 248
 78a:	90 32       	cpi	r25, 0x20	; 32
 78c:	29 f4       	brne	.+10     	; 0x798 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 78e:	84 e9       	ldi	r24, 0x94	; 148
 790:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	2d c0       	rjmp	.+90     	; 0x7f2 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 79e:	84 e8       	ldi	r24, 0x84	; 132
 7a0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 7a4:	ec eb       	ldi	r30, 0xBC	; 188
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	90 81       	ld	r25, Z
 7aa:	99 23       	and	r25, r25
 7ac:	ec f7       	brge	.-6      	; 0x7a8 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 7ae:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 7b2:	84 e8       	ldi	r24, 0x84	; 132
 7b4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 7b8:	ec eb       	ldi	r30, 0xBC	; 188
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	88 23       	and	r24, r24
 7c0:	ec f7       	brge	.-6      	; 0x7bc <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 7c2:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 7c6:	84 e8       	ldi	r24, 0x84	; 132
 7c8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 7cc:	ec eb       	ldi	r30, 0xBC	; 188
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	88 23       	and	r24, r24
 7d4:	ec f7       	brge	.-6      	; 0x7d0 <m_rf_open+0x82>
	
	TWDR = packet_length;
 7d6:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 7da:	84 e8       	ldi	r24, 0x84	; 132
 7dc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 7e0:	ec eb       	ldi	r30, 0xBC	; 188
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	88 23       	and	r24, r24
 7e8:	ec f7       	brge	.-6      	; 0x7e4 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 7ea:	84 e9       	ldi	r24, 0x94	; 148
 7ec:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
}
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	08 95       	ret

000007fa <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
 7fe:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 800:	94 ea       	ldi	r25, 0xA4	; 164
 802:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 806:	ec eb       	ldi	r30, 0xBC	; 188
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	90 81       	ld	r25, Z
 80c:	99 23       	and	r25, r25
 80e:	ec f7       	brge	.-6      	; 0x80a <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 810:	90 e5       	ldi	r25, 0x50	; 80
 812:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 816:	94 e8       	ldi	r25, 0x84	; 132
 818:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 81c:	ec eb       	ldi	r30, 0xBC	; 188
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	90 81       	ld	r25, Z
 822:	99 23       	and	r25, r25
 824:	ec f7       	brge	.-6      	; 0x820 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 826:	90 91 b9 00 	lds	r25, 0x00B9
 82a:	98 7f       	andi	r25, 0xF8	; 248
 82c:	90 32       	cpi	r25, 0x20	; 32
 82e:	31 f4       	brne	.+12     	; 0x83c <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 830:	84 e9       	ldi	r24, 0x94	; 148
 832:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
 836:	78 94       	sei
		return 0;
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	32 c0       	rjmp	.+100    	; 0x8a0 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
 83c:	93 e0       	ldi	r25, 0x03	; 3
 83e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 842:	94 e8       	ldi	r25, 0x84	; 132
 844:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 848:	ec eb       	ldi	r30, 0xBC	; 188
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	90 81       	ld	r25, Z
 84e:	99 23       	and	r25, r25
 850:	ec f7       	brge	.-6      	; 0x84c <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
 852:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 856:	84 e8       	ldi	r24, 0x84	; 132
 858:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 85c:	ec eb       	ldi	r30, 0xBC	; 188
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	88 23       	and	r24, r24
 864:	ec f7       	brge	.-6      	; 0x860 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
 866:	24 2f       	mov	r18, r20
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	12 16       	cp	r1, r18
 86c:	13 06       	cpc	r1, r19
 86e:	9c f4       	brge	.+38     	; 0x896 <m_rf_send+0x9c>
 870:	a6 2f       	mov	r26, r22
 872:	b7 2f       	mov	r27, r23
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
 878:	cb eb       	ldi	r28, 0xBB	; 187
 87a:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
 87c:	ec eb       	ldi	r30, 0xBC	; 188
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
 882:	4d 91       	ld	r20, X+
 884:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
 886:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
 888:	40 81       	ld	r20, Z
 88a:	44 23       	and	r20, r20
 88c:	ec f7       	brge	.-6      	; 0x888 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	82 17       	cp	r24, r18
 892:	93 07       	cpc	r25, r19
 894:	b4 f3       	brlt	.-20     	; 0x882 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 896:	84 e9       	ldi	r24, 0x94	; 148
 898:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
 89c:	78 94       	sei
	
	return 1;
 89e:	81 e0       	ldi	r24, 0x01	; 1
}
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	08 95       	ret

000008a6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	8f 93       	push	r24
 8b2:	9f 93       	push	r25
 8b4:	ef 93       	push	r30
 8b6:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 8b8:	e1 ee       	ldi	r30, 0xE1	; 225
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
        UDINT = 0;
 8be:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 8c0:	83 ff       	sbrs	r24, 3
 8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <__vector_10+0x40>
		UENUM = 0;
 8c4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 8c8:	91 e0       	ldi	r25, 0x01	; 1
 8ca:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 8ce:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 8d2:	92 e1       	ldi	r25, 0x12	; 18
 8d4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 8d8:	98 e0       	ldi	r25, 0x08	; 8
 8da:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 8de:	10 92 09 01 	sts	0x0109, r1
		cdc_line_rtsdtr = 0;
 8e2:	10 92 0a 01 	sts	0x010A, r1
        }
	if (intbits & (1<<SOFI)) {
 8e6:	82 ff       	sbrs	r24, 2
 8e8:	13 c0       	rjmp	.+38     	; 0x910 <__vector_10+0x6a>
		if (usb_configuration) {
 8ea:	80 91 09 01 	lds	r24, 0x0109
 8ee:	88 23       	and	r24, r24
 8f0:	79 f0       	breq	.+30     	; 0x910 <__vector_10+0x6a>
			t = transmit_flush_timer;
 8f2:	80 91 08 01 	lds	r24, 0x0108
			if (t) {
 8f6:	88 23       	and	r24, r24
 8f8:	59 f0       	breq	.+22     	; 0x910 <__vector_10+0x6a>
				transmit_flush_timer = --t;
 8fa:	81 50       	subi	r24, 0x01	; 1
 8fc:	80 93 08 01 	sts	0x0108, r24
				if (!t) {
 900:	81 11       	cpse	r24, r1
 902:	06 c0       	rjmp	.+12     	; 0x910 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 904:	84 e0       	ldi	r24, 0x04	; 4
 906:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 90a:	8a e3       	ldi	r24, 0x3A	; 58
 90c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 922:	1f 92       	push	r1
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	0f 92       	push	r0
 92a:	11 24       	eor	r1, r1
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	2f 93       	push	r18
 932:	3f 93       	push	r19
 934:	4f 93       	push	r20
 936:	5f 93       	push	r21
 938:	6f 93       	push	r22
 93a:	7f 93       	push	r23
 93c:	8f 93       	push	r24
 93e:	9f 93       	push	r25
 940:	af 93       	push	r26
 942:	bf 93       	push	r27
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	ef 93       	push	r30
 94a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 94c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 950:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 954:	83 ff       	sbrs	r24, 3
 956:	51 c1       	rjmp	.+674    	; 0xbfa <__stack+0xfb>
                bmRequestType = UEDATX;
 958:	e1 ef       	ldi	r30, 0xF1	; 241
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	70 81       	ld	r23, Z
                bRequest = UEDATX;
 95e:	40 81       	ld	r20, Z
                wValue = UEDATX;
 960:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 962:	30 81       	ld	r19, Z
 964:	93 2f       	mov	r25, r19
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	dc 01       	movw	r26, r24
 96a:	a2 2b       	or	r26, r18
 96c:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
 96e:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
 970:	60 81       	ld	r22, Z
 972:	96 2f       	mov	r25, r22
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	85 2b       	or	r24, r21
                wLength = UEDATX;
 978:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
 97a:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 97c:	52 ef       	ldi	r21, 0xF2	; 242
 97e:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
 982:	46 30       	cpi	r20, 0x06	; 6
 984:	09 f0       	breq	.+2      	; 0x988 <__vector_11+0x66>
 986:	5c c0       	rjmp	.+184    	; 0xa40 <__vector_11+0x11e>
 988:	04 c0       	rjmp	.+8      	; 0x992 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 98a:	81 e2       	ldi	r24, 0x21	; 33
 98c:	80 93 eb 00 	sts	0x00EB, r24
					return;
 990:	3b c1       	rjmp	.+630    	; 0xc08 <__stack+0x109>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
 992:	c6 e0       	ldi	r28, 0x06	; 6
 994:	4c ea       	ldi	r20, 0xAC	; 172
 996:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 998:	fa 01       	movw	r30, r20
 99a:	65 91       	lpm	r22, Z+
 99c:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
 99e:	26 17       	cp	r18, r22
 9a0:	37 07       	cpc	r19, r23
 9a2:	19 f0       	breq	.+6      	; 0x9aa <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
 9a4:	49 5f       	subi	r20, 0xF9	; 249
 9a6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__vector_11+0xc8>
				}
				list += 2;
 9aa:	fa 01       	movw	r30, r20
 9ac:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 9ae:	65 91       	lpm	r22, Z+
 9b0:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
 9b2:	86 17       	cp	r24, r22
 9b4:	97 07       	cpc	r25, r23
 9b6:	19 f0       	breq	.+6      	; 0x9be <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
 9b8:	49 5f       	subi	r20, 0xF9	; 249
 9ba:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 9bc:	16 c0       	rjmp	.+44     	; 0x9ea <__vector_11+0xc8>
				}
				list += 2;
 9be:	fa 01       	movw	r30, r20
 9c0:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 9c2:	85 91       	lpm	r24, Z+
 9c4:	94 91       	lpm	r25, Z
 9c6:	28 2f       	mov	r18, r24
 9c8:	39 2f       	mov	r19, r25
				list += 2;
 9ca:	fa 01       	movw	r30, r20
 9cc:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 9ce:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 9d0:	9b 2f       	mov	r25, r27
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 9d6:	8f 3f       	cpi	r24, 0xFF	; 255
 9d8:	91 05       	cpc	r25, r1
 9da:	19 f0       	breq	.+6      	; 0x9e2 <__vector_11+0xc0>
 9dc:	10 f0       	brcs	.+4      	; 0x9e2 <__vector_11+0xc0>
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	84 17       	cp	r24, r20
 9e4:	28 f4       	brcc	.+10     	; 0x9f0 <__vector_11+0xce>
 9e6:	48 2f       	mov	r20, r24
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__vector_11+0xce>
 9ea:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 9ec:	a9 f6       	brne	.-86     	; 0x998 <__vector_11+0x76>
 9ee:	cd cf       	rjmp	.-102    	; 0x98a <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 9f0:	c8 ee       	ldi	r28, 0xE8	; 232
 9f2:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9f4:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 9f6:	a1 ef       	ldi	r26, 0xF1	; 241
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 9fa:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 9fc:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 9fe:	98 2f       	mov	r25, r24
 a00:	95 70       	andi	r25, 0x05	; 5
 a02:	e1 f3       	breq	.-8      	; 0x9fc <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
 a04:	82 fd       	sbrc	r24, 2
 a06:	00 c1       	rjmp	.+512    	; 0xc08 <__stack+0x109>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 a08:	64 2f       	mov	r22, r20
 a0a:	41 31       	cpi	r20, 0x11	; 17
 a0c:	08 f0       	brcs	.+2      	; 0xa10 <__vector_11+0xee>
 a0e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
 a10:	66 23       	and	r22, r22
 a12:	09 f4       	brne	.+2      	; 0xa16 <__vector_11+0xf4>
 a14:	f6 c0       	rjmp	.+492    	; 0xc02 <__stack+0x103>
 a16:	c9 01       	movw	r24, r18
 a18:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
 a1a:	fc 01       	movw	r30, r24
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	e4 91       	lpm	r30, Z
 a20:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 a22:	51 50       	subi	r21, 0x01	; 1
 a24:	d1 f7       	brne	.-12     	; 0xa1a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 a26:	86 2f       	mov	r24, r22
 a28:	81 50       	subi	r24, 0x01	; 1
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	01 96       	adiw	r24, 0x01	; 1
 a2e:	28 0f       	add	r18, r24
 a30:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 a32:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 a34:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 a36:	41 11       	cpse	r20, r1
 a38:	e1 cf       	rjmp	.-62     	; 0x9fc <__vector_11+0xda>
 a3a:	60 31       	cpi	r22, 0x10	; 16
 a3c:	f9 f2       	breq	.-66     	; 0x9fc <__vector_11+0xda>
 a3e:	e4 c0       	rjmp	.+456    	; 0xc08 <__stack+0x109>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 a40:	45 30       	cpi	r20, 0x05	; 5
 a42:	61 f4       	brne	.+24     	; 0xa5c <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 a44:	8e ef       	ldi	r24, 0xFE	; 254
 a46:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a4a:	e8 ee       	ldi	r30, 0xE8	; 232
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	80 ff       	sbrs	r24, 0
 a52:	fd cf       	rjmp	.-6      	; 0xa4e <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 a54:	20 68       	ori	r18, 0x80	; 128
 a56:	20 93 e3 00 	sts	0x00E3, r18
			return;
 a5a:	d6 c0       	rjmp	.+428    	; 0xc08 <__stack+0x109>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 a5c:	49 30       	cpi	r20, 0x09	; 9
 a5e:	a1 f5       	brne	.+104    	; 0xac8 <__vector_11+0x1a6>
 a60:	71 11       	cpse	r23, r1
 a62:	5b c0       	rjmp	.+182    	; 0xb1a <__stack+0x1b>
			usb_configuration = wValue;
 a64:	20 93 09 01 	sts	0x0109, r18
			cdc_line_rtsdtr = 0;
 a68:	10 92 0a 01 	sts	0x010A, r1
			transmit_flush_timer = 0;
 a6c:	10 92 08 01 	sts	0x0108, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 a70:	8e ef       	ldi	r24, 0xFE	; 254
 a72:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 a76:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 a78:	86 ed       	ldi	r24, 0xD6	; 214
 a7a:	90 e0       	ldi	r25, 0x00	; 0
			for (i=1; i<5; i++) {
				UENUM = i;
 a7c:	c9 ee       	ldi	r28, 0xE9	; 233
 a7e:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 a80:	ab ee       	ldi	r26, 0xEB	; 235
 a82:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 a84:	6c ee       	ldi	r22, 0xEC	; 236
 a86:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 a88:	4d ee       	ldi	r20, 0xED	; 237
 a8a:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 a8c:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
 a8e:	9c 01       	movw	r18, r24
 a90:	2f 5f       	subi	r18, 0xFF	; 255
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	fc 01       	movw	r30, r24
 a96:	04 91       	lpm	r16, Z
				UECONX = en;
 a98:	0c 93       	st	X, r16
				if (en) {
 a9a:	00 23       	and	r16, r16
 a9c:	59 f0       	breq	.+22     	; 0xab4 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
 a9e:	f9 01       	movw	r30, r18
 aa0:	24 91       	lpm	r18, Z
 aa2:	fb 01       	movw	r30, r22
 aa4:	20 83       	st	Z, r18
 aa6:	fc 01       	movw	r30, r24
 aa8:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
 aaa:	03 96       	adiw	r24, 0x03	; 3
 aac:	24 91       	lpm	r18, Z
 aae:	fa 01       	movw	r30, r20
 ab0:	20 83       	st	Z, r18
 ab2:	01 c0       	rjmp	.+2      	; 0xab6 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 ab4:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 ab6:	1f 5f       	subi	r17, 0xFF	; 255
 ab8:	15 30       	cpi	r17, 0x05	; 5
 aba:	41 f7       	brne	.-48     	; 0xa8c <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 abc:	ea ee       	ldi	r30, 0xEA	; 234
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	8e e1       	ldi	r24, 0x1E	; 30
 ac2:	80 83       	st	Z, r24
        		UERST = 0;
 ac4:	10 82       	st	Z, r1
			return;
 ac6:	a0 c0       	rjmp	.+320    	; 0xc08 <__stack+0x109>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 ac8:	48 30       	cpi	r20, 0x08	; 8
 aca:	81 f4       	brne	.+32     	; 0xaec <__vector_11+0x1ca>
 acc:	70 38       	cpi	r23, 0x80	; 128
 ace:	09 f0       	breq	.+2      	; 0xad2 <__vector_11+0x1b0>
 ad0:	3f c0       	rjmp	.+126    	; 0xb50 <__stack+0x51>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 ad2:	e8 ee       	ldi	r30, 0xE8	; 232
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	80 81       	ld	r24, Z
 ad8:	80 ff       	sbrs	r24, 0
 ada:	fd cf       	rjmp	.-6      	; 0xad6 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 adc:	80 91 09 01 	lds	r24, 0x0109
 ae0:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 ae4:	8e ef       	ldi	r24, 0xFE	; 254
 ae6:	80 93 e8 00 	sts	0x00E8, r24
 aea:	8e c0       	rjmp	.+284    	; 0xc08 <__stack+0x109>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 aec:	41 32       	cpi	r20, 0x21	; 33
 aee:	a9 f4       	brne	.+42     	; 0xb1a <__stack+0x1b>
 af0:	71 3a       	cpi	r23, 0xA1	; 161
 af2:	f1 f5       	brne	.+124    	; 0xb70 <__stack+0x71>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 af4:	e8 ee       	ldi	r30, 0xE8	; 232
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	80 ff       	sbrs	r24, 0
 afc:	fd cf       	rjmp	.-6      	; 0xaf8 <__vector_11+0x1d6>
 afe:	e0 e0       	ldi	r30, 0x00	; 0
 b00:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 b02:	a1 ef       	ldi	r26, 0xF1	; 241
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	81 91       	ld	r24, Z+
 b08:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 b0a:	41 e0       	ldi	r20, 0x01	; 1
 b0c:	e7 30       	cpi	r30, 0x07	; 7
 b0e:	f4 07       	cpc	r31, r20
 b10:	d1 f7       	brne	.-12     	; 0xb06 <__stack+0x7>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b12:	8e ef       	ldi	r24, 0xFE	; 254
 b14:	80 93 e8 00 	sts	0x00E8, r24
 b18:	77 c0       	rjmp	.+238    	; 0xc08 <__stack+0x109>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 b1a:	40 32       	cpi	r20, 0x20	; 32
 b1c:	c9 f4       	brne	.+50     	; 0xb50 <__stack+0x51>
 b1e:	71 32       	cpi	r23, 0x21	; 33
 b20:	09 f0       	breq	.+2      	; 0xb24 <__stack+0x25>
 b22:	6b c0       	rjmp	.+214    	; 0xbfa <__stack+0xfb>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 b24:	e8 ee       	ldi	r30, 0xE8	; 232
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	82 ff       	sbrs	r24, 2
 b2c:	fd cf       	rjmp	.-6      	; 0xb28 <__stack+0x29>
 b2e:	e0 e0       	ldi	r30, 0x00	; 0
 b30:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 b32:	a1 ef       	ldi	r26, 0xF1	; 241
 b34:	b0 e0       	ldi	r27, 0x00	; 0
 b36:	8c 91       	ld	r24, X
 b38:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 b3a:	51 e0       	ldi	r21, 0x01	; 1
 b3c:	e7 30       	cpi	r30, 0x07	; 7
 b3e:	f5 07       	cpc	r31, r21
 b40:	d1 f7       	brne	.-12     	; 0xb36 <__stack+0x37>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 b42:	e8 ee       	ldi	r30, 0xE8	; 232
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	8b ef       	ldi	r24, 0xFB	; 251
 b48:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b4a:	8e ef       	ldi	r24, 0xFE	; 254
 b4c:	80 83       	st	Z, r24
 b4e:	5c c0       	rjmp	.+184    	; 0xc08 <__stack+0x109>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 b50:	42 32       	cpi	r20, 0x22	; 34
 b52:	71 f4       	brne	.+28     	; 0xb70 <__stack+0x71>
 b54:	71 32       	cpi	r23, 0x21	; 33
 b56:	09 f0       	breq	.+2      	; 0xb5a <__stack+0x5b>
 b58:	50 c0       	rjmp	.+160    	; 0xbfa <__stack+0xfb>
			cdc_line_rtsdtr = wValue;
 b5a:	20 93 0a 01 	sts	0x010A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b5e:	e8 ee       	ldi	r30, 0xE8	; 232
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	80 ff       	sbrs	r24, 0
 b66:	fd cf       	rjmp	.-6      	; 0xb62 <__stack+0x63>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b68:	8e ef       	ldi	r24, 0xFE	; 254
 b6a:	80 93 e8 00 	sts	0x00E8, r24
 b6e:	4c c0       	rjmp	.+152    	; 0xc08 <__stack+0x109>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 b70:	41 11       	cpse	r20, r1
 b72:	1a c0       	rjmp	.+52     	; 0xba8 <__stack+0xa9>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b74:	e8 ee       	ldi	r30, 0xE8	; 232
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	20 81       	ld	r18, Z
 b7a:	20 ff       	sbrs	r18, 0
 b7c:	fd cf       	rjmp	.-6      	; 0xb78 <__stack+0x79>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 b7e:	72 38       	cpi	r23, 0x82	; 130
 b80:	51 f4       	brne	.+20     	; 0xb96 <__stack+0x97>
				UENUM = wIndex;
 b82:	e9 ee       	ldi	r30, 0xE9	; 233
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
 b88:	80 91 eb 00 	lds	r24, 0x00EB
 b8c:	85 fb       	bst	r24, 5
 b8e:	88 27       	eor	r24, r24
 b90:	80 f9       	bld	r24, 0
				UENUM = 0;
 b92:	10 82       	st	Z, r1
 b94:	01 c0       	rjmp	.+2      	; 0xb98 <__stack+0x99>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 b96:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 b98:	e1 ef       	ldi	r30, 0xF1	; 241
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	80 83       	st	Z, r24
			UEDATX = 0;
 b9e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 ba0:	8e ef       	ldi	r24, 0xFE	; 254
 ba2:	80 93 e8 00 	sts	0x00E8, r24
 ba6:	30 c0       	rjmp	.+96     	; 0xc08 <__stack+0x109>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 ba8:	41 30       	cpi	r20, 0x01	; 1
 baa:	11 f0       	breq	.+4      	; 0xbb0 <__stack+0xb1>
 bac:	43 30       	cpi	r20, 0x03	; 3
 bae:	29 f5       	brne	.+74     	; 0xbfa <__stack+0xfb>
		  && bmRequestType == 0x02 && wValue == 0) {
 bb0:	72 30       	cpi	r23, 0x02	; 2
 bb2:	19 f5       	brne	.+70     	; 0xbfa <__stack+0xfb>
 bb4:	23 2b       	or	r18, r19
 bb6:	09 f5       	brne	.+66     	; 0xbfa <__stack+0xfb>
			i = wIndex & 0x7F;
 bb8:	8f 77       	andi	r24, 0x7F	; 127
 bba:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
 bbc:	38 2f       	mov	r19, r24
 bbe:	31 50       	subi	r19, 0x01	; 1
 bc0:	34 30       	cpi	r19, 0x04	; 4
 bc2:	d8 f4       	brcc	.+54     	; 0xbfa <__stack+0xfb>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bc4:	3e ef       	ldi	r19, 0xFE	; 254
 bc6:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 bca:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
 bce:	43 30       	cpi	r20, 0x03	; 3
 bd0:	21 f4       	brne	.+8      	; 0xbda <__stack+0xdb>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 bd2:	81 e2       	ldi	r24, 0x21	; 33
 bd4:	80 93 eb 00 	sts	0x00EB, r24
 bd8:	17 c0       	rjmp	.+46     	; 0xc08 <__stack+0x109>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 bda:	99 e1       	ldi	r25, 0x19	; 25
 bdc:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
 be0:	21 e0       	ldi	r18, 0x01	; 1
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	d9 01       	movw	r26, r18
 be6:	02 c0       	rjmp	.+4      	; 0xbec <__stack+0xed>
 be8:	aa 0f       	add	r26, r26
 bea:	bb 1f       	adc	r27, r27
 bec:	8a 95       	dec	r24
 bee:	e2 f7       	brpl	.-8      	; 0xbe8 <__stack+0xe9>
 bf0:	ea ee       	ldi	r30, 0xEA	; 234
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	a0 83       	st	Z, r26
					UERST = 0;
 bf6:	10 82       	st	Z, r1
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <__stack+0x109>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 bfa:	81 e2       	ldi	r24, 0x21	; 33
 bfc:	80 93 eb 00 	sts	0x00EB, r24
 c00:	03 c0       	rjmp	.+6      	; 0xc08 <__stack+0x109>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c02:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 c04:	41 11       	cpse	r20, r1
 c06:	fa ce       	rjmp	.-524    	; 0x9fc <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 c08:	ff 91       	pop	r31
 c0a:	ef 91       	pop	r30
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	bf 91       	pop	r27
 c12:	af 91       	pop	r26
 c14:	9f 91       	pop	r25
 c16:	8f 91       	pop	r24
 c18:	7f 91       	pop	r23
 c1a:	6f 91       	pop	r22
 c1c:	5f 91       	pop	r21
 c1e:	4f 91       	pop	r20
 c20:	3f 91       	pop	r19
 c22:	2f 91       	pop	r18
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	0f 90       	pop	r0
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	0f 90       	pop	r0
 c2e:	1f 90       	pop	r1
 c30:	18 95       	reti

00000c32 <main>:
}

int main(void)
{
	//wireless stuffs
	m_bus_init();
 c32:	0e 94 cf 00 	call	0x19e	; 0x19e <m_bus_init>
	m_num_init();
 c36:	0e 94 0e 03 	call	0x61c	; 0x61c <m_num_init>
	m_rf_open(CHANNEL, ADDRESS, PACKET_LENGTH);
 c3a:	42 e0       	ldi	r20, 0x02	; 2
 c3c:	60 e0       	ldi	r22, 0x00	; 0
 c3e:	82 e0       	ldi	r24, 0x02	; 2
 c40:	0e 94 a7 03 	call	0x74e	; 0x74e <m_rf_open>
	int counter = 0;
	//
	
	m_clockdivide(0);
 c44:	e1 e6       	ldi	r30, 0x61	; 97
 c46:	f0 e0       	ldi	r31, 0x00	; 0
 c48:	80 e8       	ldi	r24, 0x80	; 128
 c4a:	80 83       	st	Z, r24
 c4c:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
 c4e:	85 b5       	in	r24, 0x25	; 37
 c50:	88 60       	ori	r24, 0x08	; 8
 c52:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
 c54:	84 b5       	in	r24, 0x24	; 36
 c56:	82 60       	ori	r24, 0x02	; 2
 c58:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
 c5a:	84 b5       	in	r24, 0x24	; 36
 c5c:	82 60       	ori	r24, 0x02	; 2
 c5e:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
 c60:	84 b5       	in	r24, 0x24	; 36
 c62:	80 62       	ori	r24, 0x20	; 32
 c64:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
 c66:	84 b5       	in	r24, 0x24	; 36
 c68:	8f 7e       	andi	r24, 0xEF	; 239
 c6a:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
 c6c:	85 b5       	in	r24, 0x25	; 37
 c6e:	84 60       	ori	r24, 0x04	; 4
 c70:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
 c72:	85 b5       	in	r24, 0x25	; 37
 c74:	82 60       	ori	r24, 0x02	; 2
 c76:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
 c78:	85 b5       	in	r24, 0x25	; 37
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	85 bd       	out	0x25, r24	; 37
	
	OCR1A = 0xFF;
 c7e:	c8 e8       	ldi	r28, 0x88	; 136
 c80:	d0 e0       	ldi	r29, 0x00	; 0
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	99 83       	std	Y+1, r25	; 0x01
 c88:	88 83       	st	Y, r24
	OCR1B = 0;
 c8a:	2a e8       	ldi	r18, 0x8A	; 138
 c8c:	30 e0       	ldi	r19, 0x00	; 0
 c8e:	f9 01       	movw	r30, r18
 c90:	11 82       	std	Z+1, r1	; 0x01
 c92:	10 82       	st	Z, r1
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
 c94:	e1 e8       	ldi	r30, 0x81	; 129
 c96:	f0 e0       	ldi	r31, 0x00	; 0
 c98:	80 81       	ld	r24, Z
 c9a:	80 61       	ori	r24, 0x10	; 16
 c9c:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
 c9e:	80 81       	ld	r24, Z
 ca0:	88 60       	ori	r24, 0x08	; 8
 ca2:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
 ca4:	a0 e8       	ldi	r26, 0x80	; 128
 ca6:	b0 e0       	ldi	r27, 0x00	; 0
 ca8:	8c 91       	ld	r24, X
 caa:	82 60       	ori	r24, 0x02	; 2
 cac:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
 cae:	8c 91       	ld	r24, X
 cb0:	81 60       	ori	r24, 0x01	; 1
 cb2:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
 cb4:	8c 91       	ld	r24, X
 cb6:	80 62       	ori	r24, 0x20	; 32
 cb8:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
 cba:	8c 91       	ld	r24, X
 cbc:	8f 7e       	andi	r24, 0xEF	; 239
 cbe:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
 cc0:	80 81       	ld	r24, Z
 cc2:	8b 7f       	andi	r24, 0xFB	; 251
 cc4:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
 cc6:	80 81       	ld	r24, Z
 cc8:	8d 7f       	andi	r24, 0xFD	; 253
 cca:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
 ccc:	80 81       	ld	r24, Z
 cce:	81 60       	ori	r24, 0x01	; 1
 cd0:	80 83       	st	Z, r24
	
	OCR1A = 0xFFFF;
 cd2:	8f ef       	ldi	r24, 0xFF	; 255
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	99 83       	std	Y+1, r25	; 0x01
 cd8:	88 83       	st	Y, r24
	OCR1B = 0;
 cda:	f9 01       	movw	r30, r18
 cdc:	11 82       	std	Z+1, r1	; 0x01
 cde:	10 82       	st	Z, r1
	
	//TIMER 3: For Controlling the right wheel
	
	set(TCCR3B, WGM33);
 ce0:	e1 e9       	ldi	r30, 0x91	; 145
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	20 81       	ld	r18, Z
 ce6:	20 61       	ori	r18, 0x10	; 16
 ce8:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
 cea:	20 81       	ld	r18, Z
 cec:	28 60       	ori	r18, 0x08	; 8
 cee:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
 cf0:	a0 e9       	ldi	r26, 0x90	; 144
 cf2:	b0 e0       	ldi	r27, 0x00	; 0
 cf4:	2c 91       	ld	r18, X
 cf6:	22 60       	ori	r18, 0x02	; 2
 cf8:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
 cfa:	2c 91       	ld	r18, X
 cfc:	2e 7f       	andi	r18, 0xFE	; 254
 cfe:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1);
 d00:	2c 91       	ld	r18, X
 d02:	20 68       	ori	r18, 0x80	; 128
 d04:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0);
 d06:	2c 91       	ld	r18, X
 d08:	2f 7b       	andi	r18, 0xBF	; 191
 d0a:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
 d0c:	20 81       	ld	r18, Z
 d0e:	2b 7f       	andi	r18, 0xFB	; 251
 d10:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
 d12:	20 81       	ld	r18, Z
 d14:	2d 7f       	andi	r18, 0xFD	; 253
 d16:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
 d18:	20 81       	ld	r18, Z
 d1a:	21 60       	ori	r18, 0x01	; 1
 d1c:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
 d1e:	90 93 97 00 	sts	0x0097, r25
 d22:	80 93 96 00 	sts	0x0096, r24
	OCR1A = 0;
 d26:	19 82       	std	Y+1, r1	; 0x01
 d28:	18 82       	st	Y, r1
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
 d2a:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
 d2c:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
 d2e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
 d30:	23 9a       	sbi	0x04, 3	; 4
	
	//ADC's
	sei();					//Set up interrupts
 d32:	78 94       	sei
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
 d34:	ec e7       	ldi	r30, 0x7C	; 124
 d36:	f0 e0       	ldi	r31, 0x00	; 0
 d38:	80 81       	ld	r24, Z
 d3a:	8f 77       	andi	r24, 0x7F	; 127
 d3c:	80 83       	st	Z, r24
	clear(ADMUX, REFS0);	//^
 d3e:	80 81       	ld	r24, Z
 d40:	8f 7b       	andi	r24, 0xBF	; 191
 d42:	80 83       	st	Z, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
 d44:	aa e7       	ldi	r26, 0x7A	; 122
 d46:	b0 e0       	ldi	r27, 0x00	; 0
 d48:	8c 91       	ld	r24, X
 d4a:	84 60       	ori	r24, 0x04	; 4
 d4c:	8c 93       	st	X, r24
	set(ADCSRA, ADPS1);	//^
 d4e:	8c 91       	ld	r24, X
 d50:	82 60       	ori	r24, 0x02	; 2
 d52:	8c 93       	st	X, r24
	set(ADCSRA, ADPS0);	//^
 d54:	8c 91       	ld	r24, X
 d56:	81 60       	ori	r24, 0x01	; 1
 d58:	8c 93       	st	X, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
 d5a:	ce e7       	ldi	r28, 0x7E	; 126
 d5c:	d0 e0       	ldi	r29, 0x00	; 0
 d5e:	88 81       	ld	r24, Y
 d60:	81 60       	ori	r24, 0x01	; 1
 d62:	88 83       	st	Y, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
 d64:	88 81       	ld	r24, Y
 d66:	82 60       	ori	r24, 0x02	; 2
 d68:	88 83       	st	Y, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
 d6a:	88 81       	ld	r24, Y
 d6c:	80 61       	ori	r24, 0x10	; 16
 d6e:	88 83       	st	Y, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
 d70:	88 81       	ld	r24, Y
 d72:	80 62       	ori	r24, 0x20	; 32
 d74:	88 83       	st	Y, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
 d76:	88 81       	ld	r24, Y
 d78:	80 64       	ori	r24, 0x40	; 64
 d7a:	88 83       	st	Y, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
 d7c:	cd e7       	ldi	r28, 0x7D	; 125
 d7e:	d0 e0       	ldi	r29, 0x00	; 0
 d80:	88 81       	ld	r24, Y
 d82:	81 60       	ori	r24, 0x01	; 1
 d84:	88 83       	st	Y, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
 d86:	88 81       	ld	r24, Y
 d88:	82 60       	ori	r24, 0x02	; 2
 d8a:	88 83       	st	Y, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
 d8c:	8c 91       	ld	r24, X
 d8e:	80 62       	ori	r24, 0x20	; 32
 d90:	8c 93       	st	X, r24
	
	clear(ADCSRB, MUX5);//Set analog input (F0)
 d92:	cb e7       	ldi	r28, 0x7B	; 123
 d94:	d0 e0       	ldi	r29, 0x00	; 0
 d96:	88 81       	ld	r24, Y
 d98:	8f 7d       	andi	r24, 0xDF	; 223
 d9a:	88 83       	st	Y, r24
	clear(ADMUX, MUX2);	//^
 d9c:	80 81       	ld	r24, Z
 d9e:	8b 7f       	andi	r24, 0xFB	; 251
 da0:	80 83       	st	Z, r24
	clear(ADMUX, MUX1);	//^
 da2:	80 81       	ld	r24, Z
 da4:	8d 7f       	andi	r24, 0xFD	; 253
 da6:	80 83       	st	Z, r24
	clear(ADMUX, MUX0);	//^
 da8:	80 81       	ld	r24, Z
 daa:	8e 7f       	andi	r24, 0xFE	; 254
 dac:	80 83       	st	Z, r24
	
	clear(ADCSRB, MUX5);//Set analog input (F1)
 dae:	88 81       	ld	r24, Y
 db0:	8f 7d       	andi	r24, 0xDF	; 223
 db2:	88 83       	st	Y, r24
	clear(ADMUX, MUX2);	//^
 db4:	80 81       	ld	r24, Z
 db6:	8b 7f       	andi	r24, 0xFB	; 251
 db8:	80 83       	st	Z, r24
	clear(ADMUX, MUX1);	//^
 dba:	80 81       	ld	r24, Z
 dbc:	8d 7f       	andi	r24, 0xFD	; 253
 dbe:	80 83       	st	Z, r24
	set(ADMUX, MUX0);	//^
 dc0:	80 81       	ld	r24, Z
 dc2:	81 60       	ori	r24, 0x01	; 1
 dc4:	80 83       	st	Z, r24
	
	clear(ADCSRB, MUX5);//Set analog input (F4)
 dc6:	88 81       	ld	r24, Y
 dc8:	8f 7d       	andi	r24, 0xDF	; 223
 dca:	88 83       	st	Y, r24
	set(ADMUX, MUX2);	//^
 dcc:	80 81       	ld	r24, Z
 dce:	84 60       	ori	r24, 0x04	; 4
 dd0:	80 83       	st	Z, r24
	clear(ADMUX, MUX1);	//^
 dd2:	80 81       	ld	r24, Z
 dd4:	8d 7f       	andi	r24, 0xFD	; 253
 dd6:	80 83       	st	Z, r24
	clear(ADMUX, MUX0);	//^
 dd8:	80 81       	ld	r24, Z
 dda:	8e 7f       	andi	r24, 0xFE	; 254
 ddc:	80 83       	st	Z, r24
	
	clear(ADCSRB, MUX5);//Set analog input (F5)
 dde:	88 81       	ld	r24, Y
 de0:	8f 7d       	andi	r24, 0xDF	; 223
 de2:	88 83       	st	Y, r24
	set(ADMUX, MUX2);	//^
 de4:	80 81       	ld	r24, Z
 de6:	84 60       	ori	r24, 0x04	; 4
 de8:	80 83       	st	Z, r24
	clear(ADMUX, MUX1);	//^
 dea:	80 81       	ld	r24, Z
 dec:	8d 7f       	andi	r24, 0xFD	; 253
 dee:	80 83       	st	Z, r24
	set(ADMUX, MUX0);	//^
 df0:	80 81       	ld	r24, Z
 df2:	81 60       	ori	r24, 0x01	; 1
 df4:	80 83       	st	Z, r24
	
	clear(ADCSRB, MUX5);//Set analog input (F6)
 df6:	88 81       	ld	r24, Y
 df8:	8f 7d       	andi	r24, 0xDF	; 223
 dfa:	88 83       	st	Y, r24
	set(ADMUX, MUX2);	//^
 dfc:	80 81       	ld	r24, Z
 dfe:	84 60       	ori	r24, 0x04	; 4
 e00:	80 83       	st	Z, r24
	set(ADMUX, MUX1);	//^
 e02:	80 81       	ld	r24, Z
 e04:	82 60       	ori	r24, 0x02	; 2
 e06:	80 83       	st	Z, r24
	clear(ADMUX, MUX0);	//^
 e08:	80 81       	ld	r24, Z
 e0a:	8e 7f       	andi	r24, 0xFE	; 254
 e0c:	80 83       	st	Z, r24
	
	set(ADCSRB, MUX5);//Set analog input (D4)
 e0e:	88 81       	ld	r24, Y
 e10:	80 62       	ori	r24, 0x20	; 32
 e12:	88 83       	st	Y, r24
	clear(ADMUX, MUX2);	//^
 e14:	80 81       	ld	r24, Z
 e16:	8b 7f       	andi	r24, 0xFB	; 251
 e18:	80 83       	st	Z, r24
	clear(ADMUX, MUX1);	//^
 e1a:	80 81       	ld	r24, Z
 e1c:	8d 7f       	andi	r24, 0xFD	; 253
 e1e:	80 83       	st	Z, r24
	clear(ADMUX, MUX0);	//^
 e20:	80 81       	ld	r24, Z
 e22:	8e 7f       	andi	r24, 0xFE	; 254
 e24:	80 83       	st	Z, r24
		
	set(ADCSRB, MUX5);//Set analog input (D6)
 e26:	88 81       	ld	r24, Y
 e28:	80 62       	ori	r24, 0x20	; 32
 e2a:	88 83       	st	Y, r24
	clear(ADMUX, MUX2);	//^
 e2c:	80 81       	ld	r24, Z
 e2e:	8b 7f       	andi	r24, 0xFB	; 251
 e30:	80 83       	st	Z, r24
	clear(ADMUX, MUX1);	//^
 e32:	80 81       	ld	r24, Z
 e34:	8d 7f       	andi	r24, 0xFD	; 253
 e36:	80 83       	st	Z, r24
	set(ADMUX, MUX0);	//^
 e38:	80 81       	ld	r24, Z
 e3a:	81 60       	ori	r24, 0x01	; 1
 e3c:	80 83       	st	Z, r24
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
 e3e:	8c 91       	ld	r24, X
 e40:	80 68       	ori	r24, 0x80	; 128
 e42:	8c 93       	st	X, r24
	set(ADCSRA, ADSC);	//^
 e44:	8c 91       	ld	r24, X
 e46:	80 64       	ori	r24, 0x40	; 64
 e48:	8c 93       	st	X, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
 e4a:	8c 91       	ld	r24, X
 e4c:	80 61       	ori	r24, 0x10	; 16
 e4e:	8c 93       	st	X, r24
		//wireless stuffs
		
        //manually say what each buffer[i] will be (corresponds to a state, variable output, etc.)

        //e.g.
        buffer[0] = 50;
 e50:	82 e3       	ldi	r24, 0x32	; 50
 e52:	80 93 0b 01 	sts	0x010B, r24
        buffer[1] = 2;
 e56:	82 e0       	ldi	r24, 0x02	; 2
 e58:	80 93 0c 01 	sts	0x010C, r24
	set(ADCSRA, ADIF);	//Enable reading results
	
	

	int state = -1; //state variable
	int count = 0;
 e5c:	c0 e0       	ldi	r28, 0x00	; 0
 e5e:	d0 e0       	ldi	r29, 0x00	; 0
{
	//wireless stuffs
	m_bus_init();
	m_num_init();
	m_rf_open(CHANNEL, ADDRESS, PACKET_LENGTH);
	int counter = 0;
 e60:	81 2c       	mov	r8, r1
 e62:	91 2c       	mov	r9, r1
		//switch states
        switch (state) {
			
			case -1:
				m_wait(500);
				disp(count % 10);
 e64:	0f 2e       	mov	r0, r31
 e66:	fa e0       	ldi	r31, 0x0A	; 10
 e68:	cf 2e       	mov	r12, r31
 e6a:	d1 2c       	mov	r13, r1
 e6c:	f0 2d       	mov	r31, r0
		//wireless stuffs
		
        //manually say what each buffer[i] will be (corresponds to a state, variable output, etc.)

        //e.g.
        buffer[0] = 50;
 e6e:	0b e0       	ldi	r16, 0x0B	; 11
 e70:	11 e0       	ldi	r17, 0x01	; 1
 e72:	0f 2e       	mov	r0, r31
 e74:	f2 e3       	ldi	r31, 0x32	; 50
 e76:	6f 2e       	mov	r6, r31
 e78:	f0 2d       	mov	r31, r0
        buffer[1] = 2;
 e7a:	0f 2e       	mov	r0, r31
 e7c:	fc e0       	ldi	r31, 0x0C	; 12
 e7e:	ef 2e       	mov	r14, r31
 e80:	f1 e0       	ldi	r31, 0x01	; 1
 e82:	ff 2e       	mov	r15, r31
 e84:	f0 2d       	mov	r31, r0
 e86:	68 94       	set
 e88:	77 24       	eor	r7, r7
 e8a:	71 f8       	bld	r7, 1
        
        if (counter > 30000) {
	        m_rf_send(ADDRESS,buffer,PACKET_LENGTH);
	        m_green(TOGGLE);
 e8c:	68 94       	set
 e8e:	55 24       	eor	r5, r5
 e90:	52 f8       	bld	r5, 2

	        counter = 0;
 e92:	a1 2c       	mov	r10, r1
 e94:	b1 2c       	mov	r11, r1
 e96:	0a c0       	rjmp	.+20     	; 0xeac <main+0x27a>
        //e.g.
        buffer[0] = 50;
        buffer[1] = 2;
        
        if (counter > 30000) {
	        m_rf_send(ADDRESS,buffer,PACKET_LENGTH);
 e98:	47 2d       	mov	r20, r7
 e9a:	b8 01       	movw	r22, r16
 e9c:	80 e0       	ldi	r24, 0x00	; 0
 e9e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <m_rf_send>
	        m_green(TOGGLE);
 ea2:	6a 9a       	sbi	0x0d, 2	; 13
 ea4:	8e b1       	in	r24, 0x0e	; 14
 ea6:	85 25       	eor	r24, r5
 ea8:	8e b9       	out	0x0e, r24	; 14

	        counter = 0;
 eaa:	45 01       	movw	r8, r10
        }
        
        counter++;
 eac:	ff ef       	ldi	r31, 0xFF	; 255
 eae:	8f 1a       	sub	r8, r31
 eb0:	9f 0a       	sbc	r9, r31
 eb2:	2f ef       	ldi	r18, 0xFF	; 255
 eb4:	89 e6       	ldi	r24, 0x69	; 105
 eb6:	98 e1       	ldi	r25, 0x18	; 24
 eb8:	21 50       	subi	r18, 0x01	; 1
 eba:	80 40       	sbci	r24, 0x00	; 0
 ebc:	90 40       	sbci	r25, 0x00	; 0
 ebe:	e1 f7       	brne	.-8      	; 0xeb8 <main+0x286>
 ec0:	00 c0       	rjmp	.+0      	; 0xec2 <main+0x290>
 ec2:	00 00       	nop
		//switch states
        switch (state) {
			
			case -1:
				m_wait(500);
				disp(count % 10);
 ec4:	ce 01       	movw	r24, r28
 ec6:	b6 01       	movw	r22, r12
 ec8:	0e 94 73 07 	call	0xee6	; 0xee6 <__divmodhi4>
 ecc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <disp>
				count++;
 ed0:	21 96       	adiw	r28, 0x01	; 1
		//wireless stuffs
		
        //manually say what each buffer[i] will be (corresponds to a state, variable output, etc.)

        //e.g.
        buffer[0] = 50;
 ed2:	f8 01       	movw	r30, r16
 ed4:	60 82       	st	Z, r6
        buffer[1] = 2;
 ed6:	f7 01       	movw	r30, r14
 ed8:	70 82       	st	Z, r7
        
        if (counter > 30000) {
 eda:	f1 e3       	ldi	r31, 0x31	; 49
 edc:	8f 16       	cp	r8, r31
 ede:	f5 e7       	ldi	r31, 0x75	; 117
 ee0:	9f 06       	cpc	r9, r31
 ee2:	24 f3       	brlt	.-56     	; 0xeac <main+0x27a>
 ee4:	d9 cf       	rjmp	.-78     	; 0xe98 <main+0x266>

00000ee6 <__divmodhi4>:
 ee6:	97 fb       	bst	r25, 7
 ee8:	07 2e       	mov	r0, r23
 eea:	16 f4       	brtc	.+4      	; 0xef0 <__divmodhi4+0xa>
 eec:	00 94       	com	r0
 eee:	07 d0       	rcall	.+14     	; 0xefe <__divmodhi4_neg1>
 ef0:	77 fd       	sbrc	r23, 7
 ef2:	09 d0       	rcall	.+18     	; 0xf06 <__divmodhi4_neg2>
 ef4:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
 ef8:	07 fc       	sbrc	r0, 7
 efa:	05 d0       	rcall	.+10     	; 0xf06 <__divmodhi4_neg2>
 efc:	3e f4       	brtc	.+14     	; 0xf0c <__divmodhi4_exit>

00000efe <__divmodhi4_neg1>:
 efe:	90 95       	com	r25
 f00:	81 95       	neg	r24
 f02:	9f 4f       	sbci	r25, 0xFF	; 255
 f04:	08 95       	ret

00000f06 <__divmodhi4_neg2>:
 f06:	70 95       	com	r23
 f08:	61 95       	neg	r22
 f0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f0c <__divmodhi4_exit>:
 f0c:	08 95       	ret

00000f0e <__udivmodhi4>:
 f0e:	aa 1b       	sub	r26, r26
 f10:	bb 1b       	sub	r27, r27
 f12:	51 e1       	ldi	r21, 0x11	; 17
 f14:	07 c0       	rjmp	.+14     	; 0xf24 <__udivmodhi4_ep>

00000f16 <__udivmodhi4_loop>:
 f16:	aa 1f       	adc	r26, r26
 f18:	bb 1f       	adc	r27, r27
 f1a:	a6 17       	cp	r26, r22
 f1c:	b7 07       	cpc	r27, r23
 f1e:	10 f0       	brcs	.+4      	; 0xf24 <__udivmodhi4_ep>
 f20:	a6 1b       	sub	r26, r22
 f22:	b7 0b       	sbc	r27, r23

00000f24 <__udivmodhi4_ep>:
 f24:	88 1f       	adc	r24, r24
 f26:	99 1f       	adc	r25, r25
 f28:	5a 95       	dec	r21
 f2a:	a9 f7       	brne	.-22     	; 0xf16 <__udivmodhi4_loop>
 f2c:	80 95       	com	r24
 f2e:	90 95       	com	r25
 f30:	bc 01       	movw	r22, r24
 f32:	cd 01       	movw	r24, r26
 f34:	08 95       	ret

00000f36 <_exit>:
 f36:	f8 94       	cli

00000f38 <__stop_program>:
 f38:	ff cf       	rjmp	.-2      	; 0xf38 <__stop_program>
