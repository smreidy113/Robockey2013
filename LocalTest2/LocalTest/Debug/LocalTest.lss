
LocalTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00002170  00002204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800114  00800114  00002218  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00002218  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  000058fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006a62  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  00006a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000267d  00000000  00000000  00006d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a88  00000000  00000000  000093a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010e8  00000000  00000000  00009e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000850  00000000  00000000  0000af18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007bd  00000000  00000000  0000b768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d2c  00000000  00000000  0000bf25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a0  00000000  00000000  0000ec51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_3>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_10>
      2c:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_29>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e0 e7       	ldi	r30, 0x70	; 112
     1be:	f1 e2       	ldi	r31, 0x21	; 33
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a4 31       	cpi	r26, 0x14	; 20
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a4 e1       	ldi	r26, 0x14	; 20
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a5 38       	cpi	r26, 0x85	; 133
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
     1e0:	0c 94 b6 10 	jmp	0x216c	; 0x216c <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <rotate>:

char buffer[10];
int state = 0;

void rotate(int dir) {
	OCR1B = OCR1A;
     1e8:	20 91 88 00 	lds	r18, 0x0088
     1ec:	30 91 89 00 	lds	r19, 0x0089
     1f0:	30 93 8b 00 	sts	0x008B, r19
     1f4:	20 93 8a 00 	sts	0x008A, r18
	OCR3A = ICR3;
     1f8:	20 91 96 00 	lds	r18, 0x0096
     1fc:	30 91 97 00 	lds	r19, 0x0097
     200:	30 93 99 00 	sts	0x0099, r19
     204:	20 93 98 00 	sts	0x0098, r18
	if (dir == RIGHT) {
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	19 f4       	brne	.+6      	; 0x212 <rotate+0x2a>
		set(PORTB,2);
     20c:	2a 9a       	sbi	0x05, 2	; 5
		clear(PORTB,3);
     20e:	2b 98       	cbi	0x05, 3	; 5
     210:	08 95       	ret
	}
	else if (dir == LEFT) {
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	11 f4       	brne	.+4      	; 0x21a <rotate+0x32>
		clear(PORTB,2);
     216:	2a 98       	cbi	0x05, 2	; 5
		set(PORTB,3);
     218:	2b 9a       	sbi	0x05, 3	; 5
     21a:	08 95       	ret

0000021c <turn>:
	}
}

void turn(int dir,int degree) {
	set(PORTB,2);
     21c:	2a 9a       	sbi	0x05, 2	; 5
	set(PORTB,3);
     21e:	2b 9a       	sbi	0x05, 3	; 5
	if (dir == LEFT) {
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	91 05       	cpc	r25, r1
     224:	79 f4       	brne	.+30     	; 0x244 <turn+0x28>
		OCR3A = ICR3;
     226:	80 91 96 00 	lds	r24, 0x0096
     22a:	90 91 97 00 	lds	r25, 0x0097
     22e:	90 93 99 00 	sts	0x0099, r25
     232:	80 93 98 00 	sts	0x0098, r24
		OCR1B = degree;
     236:	86 2f       	mov	r24, r22
     238:	97 2f       	mov	r25, r23
     23a:	90 93 8b 00 	sts	0x008B, r25
     23e:	80 93 8a 00 	sts	0x008A, r24
     242:	08 95       	ret
	}
	
		if (dir == RIGHT) {
     244:	89 2b       	or	r24, r25
     246:	71 f4       	brne	.+28     	; 0x264 <turn+0x48>
			OCR3A = degree;
     248:	86 2f       	mov	r24, r22
     24a:	97 2f       	mov	r25, r23
     24c:	90 93 99 00 	sts	0x0099, r25
     250:	80 93 98 00 	sts	0x0098, r24
			OCR1B = OCR1A;
     254:	80 91 88 00 	lds	r24, 0x0088
     258:	90 91 89 00 	lds	r25, 0x0089
     25c:	90 93 8b 00 	sts	0x008B, r25
     260:	80 93 8a 00 	sts	0x008A, r24
     264:	08 95       	ret

00000266 <forward>:
	clear(PORTB,2);
	clear(PORTB,3);
}

void forward() {
			OCR1B = OCR1A;
     266:	80 91 88 00 	lds	r24, 0x0088
     26a:	90 91 89 00 	lds	r25, 0x0089
     26e:	90 93 8b 00 	sts	0x008B, r25
     272:	80 93 8a 00 	sts	0x008A, r24
			OCR3A = ICR3;
     276:	80 91 96 00 	lds	r24, 0x0096
     27a:	90 91 97 00 	lds	r25, 0x0097
     27e:	90 93 99 00 	sts	0x0099, r25
     282:	80 93 98 00 	sts	0x0098, r24
			set(PORTB,2);
     286:	2a 9a       	sbi	0x05, 2	; 5
			set(PORTB,3);
     288:	2b 9a       	sbi	0x05, 3	; 5
     28a:	08 95       	ret

0000028c <shoot>:
void drive_to_goal() {
	drive_to_point(GOALBX,GOALBY);
}

void shoot() {
		set(PORTB,7);
     28c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	81 ee       	ldi	r24, 0xE1	; 225
     292:	94 e0       	ldi	r25, 0x04	; 4
     294:	21 50       	subi	r18, 0x01	; 1
     296:	80 40       	sbci	r24, 0x00	; 0
     298:	90 40       	sbci	r25, 0x00	; 0
     29a:	e1 f7       	brne	.-8      	; 0x294 <shoot+0x8>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <shoot+0x12>
     29e:	00 00       	nop
		m_wait(100);
		clear(PORTB,7);
     2a0:	2f 98       	cbi	0x05, 7	; 5
     2a2:	08 95       	ret

000002a4 <game_pause>:
}

void game_pause() {
	clear(DDRB,6);
     2a4:	26 98       	cbi	0x04, 6	; 4
	clear(DDRC,6);
     2a6:	3e 98       	cbi	0x07, 6	; 7
	clear(DDRB,2);
     2a8:	22 98       	cbi	0x04, 2	; 4
	clear(DDRB,3);
     2aa:	23 98       	cbi	0x04, 3	; 4
     2ac:	08 95       	ret

000002ae <drive_to_point>:

void drive_to_puck() {

}

void drive_to_point(int x, int y) {
     2ae:	2f 92       	push	r2
     2b0:	3f 92       	push	r3
     2b2:	4f 92       	push	r4
     2b4:	5f 92       	push	r5
     2b6:	6f 92       	push	r6
     2b8:	7f 92       	push	r7
     2ba:	8f 92       	push	r8
     2bc:	9f 92       	push	r9
     2be:	af 92       	push	r10
     2c0:	bf 92       	push	r11
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	28 97       	sbiw	r28, 0x08	; 8
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	2c 01       	movw	r4, r24
     2e4:	8b 01       	movw	r16, r22
	
	//Rotate until you are facing target
	rotate(LEFT);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <rotate>
	while(1) {
		localize(data);
		if (abs(atan2((float)y-data[1],(float)x-data[0])-data[2] < 3.14/100)) {
     2ee:	c2 01       	movw	r24, r4
     2f0:	aa 27       	eor	r26, r26
     2f2:	97 fd       	sbrc	r25, 7
     2f4:	a0 95       	com	r26
     2f6:	ba 2f       	mov	r27, r26
     2f8:	89 83       	std	Y+1, r24	; 0x01
     2fa:	9a 83       	std	Y+2, r25	; 0x02
     2fc:	ab 83       	std	Y+3, r26	; 0x03
     2fe:	bc 83       	std	Y+4, r27	; 0x04
     300:	c8 01       	movw	r24, r16
     302:	aa 27       	eor	r26, r26
     304:	97 fd       	sbrc	r25, 7
     306:	a0 95       	com	r26
     308:	ba 2f       	mov	r27, r26
     30a:	8d 83       	std	Y+5, r24	; 0x05
     30c:	9e 83       	std	Y+6, r25	; 0x06
     30e:	af 83       	std	Y+7, r26	; 0x07
     310:	b8 87       	std	Y+8, r27	; 0x08
     312:	0f 2e       	mov	r0, r31
     314:	fd e6       	ldi	r31, 0x6D	; 109
     316:	2f 2e       	mov	r2, r31
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	3f 2e       	mov	r3, r31
     31c:	f0 2d       	mov	r31, r0
     31e:	01 e7       	ldi	r16, 0x71	; 113
     320:	11 e0       	ldi	r17, 0x01	; 1
void drive_to_point(int x, int y) {
	
	//Rotate until you are facing target
	rotate(LEFT);
	while(1) {
		localize(data);
     322:	89 e6       	ldi	r24, 0x69	; 105
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 f6 06 	call	0xdec	; 0xdec <localize>
		if (abs(atan2((float)y-data[1],(float)x-data[0])-data[2] < 3.14/100)) {
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	7a 81       	ldd	r23, Y+2	; 0x02
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatsisf>
     336:	6b 01       	movw	r12, r22
     338:	7c 01       	movw	r14, r24
     33a:	6d 81       	ldd	r22, Y+5	; 0x05
     33c:	7e 81       	ldd	r23, Y+6	; 0x06
     33e:	8f 81       	ldd	r24, Y+7	; 0x07
     340:	98 85       	ldd	r25, Y+8	; 0x08
     342:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatsisf>
     346:	4b 01       	movw	r8, r22
     348:	5c 01       	movw	r10, r24
     34a:	20 91 69 01 	lds	r18, 0x0169
     34e:	30 91 6a 01 	lds	r19, 0x016A
     352:	40 91 6b 01 	lds	r20, 0x016B
     356:	50 91 6c 01 	lds	r21, 0x016C
     35a:	c7 01       	movw	r24, r14
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     362:	2b 01       	movw	r4, r22
     364:	3c 01       	movw	r6, r24
     366:	d1 01       	movw	r26, r2
     368:	2d 91       	ld	r18, X+
     36a:	3d 91       	ld	r19, X+
     36c:	4d 91       	ld	r20, X+
     36e:	5c 91       	ld	r21, X
     370:	c5 01       	movw	r24, r10
     372:	b4 01       	movw	r22, r8
     374:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     378:	a3 01       	movw	r20, r6
     37a:	92 01       	movw	r18, r4
     37c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <atan2>
     380:	f8 01       	movw	r30, r16
     382:	20 81       	ld	r18, Z
     384:	31 81       	ldd	r19, Z+1	; 0x01
     386:	42 81       	ldd	r20, Z+2	; 0x02
     388:	53 81       	ldd	r21, Z+3	; 0x03
     38a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     38e:	2a e4       	ldi	r18, 0x4A	; 74
     390:	3d e9       	ldi	r19, 0x9D	; 157
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	5d e3       	ldi	r21, 0x3D	; 61
     396:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__cmpsf2>
     39a:	88 23       	and	r24, r24
     39c:	14 f6       	brge	.-124    	; 0x322 <drive_to_point+0x74>
			break;
		}
	}
	
	//Drive until you're close to being there
	forward();
     39e:	0e 94 33 01 	call	0x266	; 0x266 <forward>
	while(1) {
		localize(data);
     3a2:	89 e6       	ldi	r24, 0x69	; 105
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 f6 06 	call	0xdec	; 0xdec <localize>
		if (sqrt((data[1]-y)*(data[1]-y)+(data[0]-x)*(data[0]-x)) < 5) {
     3aa:	a5 01       	movw	r20, r10
     3ac:	94 01       	movw	r18, r8
     3ae:	ad e6       	ldi	r26, 0x6D	; 109
     3b0:	b1 e0       	ldi	r27, 0x01	; 1
     3b2:	6d 91       	ld	r22, X+
     3b4:	7d 91       	ld	r23, X+
     3b6:	8d 91       	ld	r24, X+
     3b8:	9c 91       	ld	r25, X
     3ba:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     3be:	46 2e       	mov	r4, r22
     3c0:	57 2e       	mov	r5, r23
     3c2:	68 2e       	mov	r6, r24
     3c4:	79 2e       	mov	r7, r25
     3c6:	a7 01       	movw	r20, r14
     3c8:	96 01       	movw	r18, r12
     3ca:	60 91 69 01 	lds	r22, 0x0169
     3ce:	70 91 6a 01 	lds	r23, 0x016A
     3d2:	80 91 6b 01 	lds	r24, 0x016B
     3d6:	90 91 6c 01 	lds	r25, 0x016C
     3da:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     3de:	26 2e       	mov	r2, r22
     3e0:	37 2e       	mov	r3, r23
     3e2:	08 2f       	mov	r16, r24
     3e4:	19 2f       	mov	r17, r25
     3e6:	24 2d       	mov	r18, r4
     3e8:	35 2d       	mov	r19, r5
     3ea:	46 2d       	mov	r20, r6
     3ec:	57 2d       	mov	r21, r7
     3ee:	64 2d       	mov	r22, r4
     3f0:	75 2d       	mov	r23, r5
     3f2:	86 2d       	mov	r24, r6
     3f4:	97 2d       	mov	r25, r7
     3f6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     3fa:	2b 01       	movw	r4, r22
     3fc:	3c 01       	movw	r6, r24
     3fe:	22 2d       	mov	r18, r2
     400:	33 2d       	mov	r19, r3
     402:	40 2f       	mov	r20, r16
     404:	51 2f       	mov	r21, r17
     406:	62 2d       	mov	r22, r2
     408:	73 2d       	mov	r23, r3
     40a:	80 2f       	mov	r24, r16
     40c:	91 2f       	mov	r25, r17
     40e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     412:	9b 01       	movw	r18, r22
     414:	ac 01       	movw	r20, r24
     416:	c3 01       	movw	r24, r6
     418:	b2 01       	movw	r22, r4
     41a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__addsf3>
     41e:	0e 94 43 10 	call	0x2086	; 0x2086 <sqrt>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 ea       	ldi	r20, 0xA0	; 160
     428:	50 e4       	ldi	r21, 0x40	; 64
     42a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__cmpsf2>
     42e:	88 23       	and	r24, r24
     430:	0c f0       	brlt	.+2      	; 0x434 <drive_to_point+0x186>
     432:	b7 cf       	rjmp	.-146    	; 0x3a2 <drive_to_point+0xf4>
			break;
		}
	}
	game_pause();
     434:	0e 94 52 01 	call	0x2a4	; 0x2a4 <game_pause>
}
     438:	28 96       	adiw	r28, 0x08	; 8
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	af 90       	pop	r10
     458:	9f 90       	pop	r9
     45a:	8f 90       	pop	r8
     45c:	7f 90       	pop	r7
     45e:	6f 90       	pop	r6
     460:	5f 90       	pop	r5
     462:	4f 90       	pop	r4
     464:	3f 90       	pop	r3
     466:	2f 90       	pop	r2
     468:	08 95       	ret

0000046a <drive_to_goal>:

void drive_to_goal() {
	drive_to_point(GOALBX,GOALBY);
     46a:	64 e6       	ldi	r22, 0x64	; 100
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 57 01 	call	0x2ae	; 0x2ae <drive_to_point>
     476:	08 95       	ret

00000478 <comm_test>:
	set(DDRB,2);
	set(DDRB,3);
}

void comm_test() {
	set(PORTD,5);
     478:	5d 9a       	sbi	0x0b, 5	; 11
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	89 e6       	ldi	r24, 0x69	; 105
     47e:	98 e1       	ldi	r25, 0x18	; 24
     480:	21 50       	subi	r18, 0x01	; 1
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <comm_test+0x8>
     488:	00 c0       	rjmp	.+0      	; 0x48a <comm_test+0x12>
     48a:	00 00       	nop
	m_wait(500);
	clear(PORTD,5);
     48c:	5d 98       	cbi	0x0b, 5	; 11
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	89 e6       	ldi	r24, 0x69	; 105
     492:	98 e1       	ldi	r25, 0x18	; 24
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <comm_test+0x1c>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <comm_test+0x26>
     49e:	00 00       	nop
	m_wait(500);
	state = 0;
     4a0:	10 92 15 01 	sts	0x0115, r1
     4a4:	10 92 14 01 	sts	0x0114, r1
     4a8:	08 95       	ret

000004aa <main>:
		}
}

int main(void)
{
	set(DDRD,5);
     4aa:	55 9a       	sbi	0x0a, 5	; 10
	//wireless stuffs
	m_bus_init();
     4ac:	0e 94 22 04 	call	0x844	; 0x844 <m_bus_init>
	
	m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
     4b0:	4a e0       	ldi	r20, 0x0A	; 10
     4b2:	68 e0       	ldi	r22, 0x08	; 8
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 17 09 	call	0x122e	; 0x122e <m_rf_open>
	//
	
	//m_num_init();
	int flag;
	
	m_clockdivide(0);
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 e8       	ldi	r24, 0x80	; 128
     4c0:	80 83       	st	Z, r24
     4c2:	10 82       	st	Z, r1
	
	//TIMER 0: For Controlling the solenoid
	
	set(TCCR0B, WGM02);
     4c4:	85 b5       	in	r24, 0x25	; 37
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A, WGM01);
     4ca:	84 b5       	in	r24, 0x24	; 36
     4cc:	82 60       	ori	r24, 0x02	; 2
     4ce:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A, WGM01);
     4d0:	84 b5       	in	r24, 0x24	; 36
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0A, COM0B1);
     4d6:	84 b5       	in	r24, 0x24	; 36
     4d8:	80 62       	ori	r24, 0x20	; 32
     4da:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A, COM0B0);
     4dc:	84 b5       	in	r24, 0x24	; 36
     4de:	8f 7e       	andi	r24, 0xEF	; 239
     4e0:	84 bd       	out	0x24, r24	; 36
	
	set(TCCR0B, CS02);
     4e2:	85 b5       	in	r24, 0x25	; 37
     4e4:	84 60       	ori	r24, 0x04	; 4
     4e6:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS01);
     4e8:	85 b5       	in	r24, 0x25	; 37
     4ea:	82 60       	ori	r24, 0x02	; 2
     4ec:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B, CS00);
     4ee:	85 b5       	in	r24, 0x25	; 37
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	85 bd       	out	0x25, r24	; 37
	
	set(DDRB,7);
     4f4:	27 9a       	sbi	0x04, 7	; 4
	
	OCR0A = 0xFF;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     4fa:	18 bc       	out	0x28, r1	; 40
	
	//TIMER 1: For Controlling the left wheel
	
	set(TCCR1B, WGM13);
     4fc:	e1 e8       	ldi	r30, 0x81	; 129
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	80 61       	ori	r24, 0x10	; 16
     504:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
     506:	80 81       	ld	r24, Z
     508:	88 60       	ori	r24, 0x08	; 8
     50a:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
     50c:	a0 e8       	ldi	r26, 0x80	; 128
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	8c 91       	ld	r24, X
     512:	82 60       	ori	r24, 0x02	; 2
     514:	8c 93       	st	X, r24
	set(TCCR1A, WGM10);
     516:	8c 91       	ld	r24, X
     518:	81 60       	ori	r24, 0x01	; 1
     51a:	8c 93       	st	X, r24
	
	set(TCCR1A, COM1B1);
     51c:	8c 91       	ld	r24, X
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	8c 93       	st	X, r24
	clear(TCCR1A, COM1B0);
     522:	8c 91       	ld	r24, X
     524:	8f 7e       	andi	r24, 0xEF	; 239
     526:	8c 93       	st	X, r24
	
	clear(TCCR1B, CS12);
     528:	80 81       	ld	r24, Z
     52a:	8b 7f       	andi	r24, 0xFB	; 251
     52c:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
     52e:	80 81       	ld	r24, Z
     530:	8d 7f       	andi	r24, 0xFD	; 253
     532:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
     534:	80 81       	ld	r24, Z
     536:	81 60       	ori	r24, 0x01	; 1
     538:	80 83       	st	Z, r24
	
	set(DDRB,6);
     53a:	26 9a       	sbi	0x04, 6	; 4
	
	OCR1A = 0xFFFF;
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	90 93 89 00 	sts	0x0089, r25
     544:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
     548:	10 92 8b 00 	sts	0x008B, r1
     54c:	10 92 8a 00 	sts	0x008A, r1
	
	//TIMER 3: For Controlling the right wheel
	//up to ICR3, clear at OCR3A & set at rollover
	
	set(TCCR3B, WGM33);
     550:	e1 e9       	ldi	r30, 0x91	; 145
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	20 81       	ld	r18, Z
     556:	20 61       	ori	r18, 0x10	; 16
     558:	20 83       	st	Z, r18
	set(TCCR3B, WGM32);
     55a:	20 81       	ld	r18, Z
     55c:	28 60       	ori	r18, 0x08	; 8
     55e:	20 83       	st	Z, r18
	set(TCCR3A, WGM31);
     560:	a0 e9       	ldi	r26, 0x90	; 144
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	2c 91       	ld	r18, X
     566:	22 60       	ori	r18, 0x02	; 2
     568:	2c 93       	st	X, r18
	clear(TCCR3A, WGM30);
     56a:	2c 91       	ld	r18, X
     56c:	2e 7f       	andi	r18, 0xFE	; 254
     56e:	2c 93       	st	X, r18
	
	set(TCCR3A, COM3A1); 
     570:	2c 91       	ld	r18, X
     572:	20 68       	ori	r18, 0x80	; 128
     574:	2c 93       	st	X, r18
	clear(TCCR3A, COM3A0); 
     576:	2c 91       	ld	r18, X
     578:	2f 7b       	andi	r18, 0xBF	; 191
     57a:	2c 93       	st	X, r18
	
	clear(TCCR3B, CS32);
     57c:	20 81       	ld	r18, Z
     57e:	2b 7f       	andi	r18, 0xFB	; 251
     580:	20 83       	st	Z, r18
	clear(TCCR3B, CS31);
     582:	20 81       	ld	r18, Z
     584:	2d 7f       	andi	r18, 0xFD	; 253
     586:	20 83       	st	Z, r18
	set(TCCR3B, CS30);
     588:	20 81       	ld	r18, Z
     58a:	21 60       	ori	r18, 0x01	; 1
     58c:	20 83       	st	Z, r18
	
	ICR3 = 0xFFFF;
     58e:	90 93 97 00 	sts	0x0097, r25
     592:	80 93 96 00 	sts	0x0096, r24
	OCR3A = 0;
     596:	10 92 99 00 	sts	0x0099, r1
     59a:	10 92 98 00 	sts	0x0098, r1
	
	//Pin for controlling solenoid pulse
	set(DDRB,7);
     59e:	27 9a       	sbi	0x04, 7	; 4
	
	//Pins for controlling speed of left and right wheel
	set(DDRB,6);
     5a0:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);
     5a2:	3e 9a       	sbi	0x07, 6	; 7
	
	//Pins for determining direction of wheels
	set(DDRB,2);
     5a4:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3);
     5a6:	23 9a       	sbi	0x04, 3	; 4
	
	//Blue LED for Comm Test
	//set(DDRB,5);
	
	//ADC's
	sei();					//Set up interrupts
     5a8:	78 94       	sei
	set(ADCSRA,ADIE);
     5aa:	ea e7       	ldi	r30, 0x7A	; 122
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	80 83       	st	Z, r24
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
     5b4:	ac e7       	ldi	r26, 0x7C	; 124
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	8c 91       	ld	r24, X
     5ba:	8f 77       	andi	r24, 0x7F	; 127
     5bc:	8c 93       	st	X, r24
	clear(ADMUX, REFS0);	//^
     5be:	8c 91       	ld	r24, X
     5c0:	8f 7b       	andi	r24, 0xBF	; 191
     5c2:	8c 93       	st	X, r24
	
	set(ADCSRA, ADPS2);	//Set scale to /128
     5c4:	80 81       	ld	r24, Z
     5c6:	84 60       	ori	r24, 0x04	; 4
     5c8:	80 83       	st	Z, r24
	set(ADCSRA, ADPS1);	//^
     5ca:	80 81       	ld	r24, Z
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	80 83       	st	Z, r24
	set(ADCSRA, ADPS0);	//^
     5d0:	80 81       	ld	r24, Z
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	80 83       	st	Z, r24
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
     5d6:	ae e7       	ldi	r26, 0x7E	; 126
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	8c 91       	ld	r24, X
     5dc:	81 60       	ori	r24, 0x01	; 1
     5de:	8c 93       	st	X, r24
	set(DIDR0, ADC1D);	//Disable digital input for F1
     5e0:	8c 91       	ld	r24, X
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	8c 93       	st	X, r24
	set(DIDR0, ADC4D);	//Disable digital input for F4
     5e6:	8c 91       	ld	r24, X
     5e8:	80 61       	ori	r24, 0x10	; 16
     5ea:	8c 93       	st	X, r24
	set(DIDR0, ADC5D);	//Disable digital input for F5
     5ec:	8c 91       	ld	r24, X
     5ee:	80 62       	ori	r24, 0x20	; 32
     5f0:	8c 93       	st	X, r24
	set(DIDR0, ADC6D);	//Disable digital input for F6
     5f2:	8c 91       	ld	r24, X
     5f4:	80 64       	ori	r24, 0x40	; 64
     5f6:	8c 93       	st	X, r24
	set(DIDR2, ADC8D);	//Disable digital input for D4
     5f8:	ad e7       	ldi	r26, 0x7D	; 125
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	8c 91       	ld	r24, X
     5fe:	81 60       	ori	r24, 0x01	; 1
     600:	8c 93       	st	X, r24
	set(DIDR2, ADC9D);	//Disable digital input for D6
     602:	8c 91       	ld	r24, X
     604:	82 60       	ori	r24, 0x02	; 2
     606:	8c 93       	st	X, r24
		
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
     608:	80 81       	ld	r24, Z
     60a:	80 62       	ori	r24, 0x20	; 32
     60c:	80 83       	st	Z, r24
	
	set(ADCSRA, ADIF);	//Enable reading results
     60e:	80 81       	ld	r24, Z
     610:	80 61       	ori	r24, 0x10	; 16
     612:	80 83       	st	Z, r24
	
	//Limit Switch stuffs
	clear(DDRB,0); //set to input, RIGHT LIMIT SWITCH
     614:	20 98       	cbi	0x04, 0	; 4
	clear(DDRB,1); //set to input, LEFT LIMIT SWITCH
     616:	21 98       	cbi	0x04, 1	; 4
	
	clear(PORTB,0); //disable internal pull up resistor
     618:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1); //disable internal pull up resistor
     61a:	29 98       	cbi	0x05, 1	; 5
	
	 
	//int state; // state variable
	state = -2; //set state
     61c:	8e ef       	ldi	r24, 0xFE	; 254
     61e:	9f ef       	ldi	r25, 0xFF	; 255
     620:	90 93 15 01 	sts	0x0115, r25
     624:	80 93 14 01 	sts	0x0114, r24
	long count = 0;
	
	char yes;
	m_bus_init();
     628:	0e 94 22 04 	call	0x844	; 0x844 <m_bus_init>
	m_wii_open();
     62c:	0e 94 82 0c 	call	0x1904	; 0x1904 <m_wii_open>
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     630:	08 e8       	ldi	r16, 0x88	; 136
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	0f 2e       	mov	r0, r31
     636:	fa e8       	ldi	r31, 0x8A	; 138
     638:	af 2e       	mov	r10, r31
     63a:	b1 2c       	mov	r11, r1
     63c:	f0 2d       	mov	r31, r0
				OCR3A = ICR3;
     63e:	c6 e9       	ldi	r28, 0x96	; 150
     640:	d0 e0       	ldi	r29, 0x00	; 0
     642:	0f 2e       	mov	r0, r31
     644:	f8 e9       	ldi	r31, 0x98	; 152
     646:	cf 2e       	mov	r12, r31
     648:	d1 2c       	mov	r13, r1
     64a:	f0 2d       	mov	r31, r0
        switch (state) {
			
			case -4:
			m_wait(1000);
				shoot();
				state = -3;
     64c:	0f 2e       	mov	r0, r31
     64e:	fd ef       	ldi	r31, 0xFD	; 253
     650:	ef 2e       	mov	r14, r31
     652:	ff 24       	eor	r15, r15
     654:	fa 94       	dec	r15
     656:	f0 2d       	mov	r31, r0
        
        counter++;
		*/
		
		//constant localization
		m_red(ON);
     658:	6e 9a       	sbi	0x0d, 6	; 13
     65a:	76 98       	cbi	0x0e, 6	; 14
		m_green(OFF);
     65c:	6a 9a       	sbi	0x0d, 2	; 13
     65e:	72 9a       	sbi	0x0e, 2	; 14
		//localize(data);
		m_red(OFF);
     660:	6e 9a       	sbi	0x0d, 6	; 13
     662:	76 9a       	sbi	0x0e, 6	; 14
		m_green(ON);
     664:	6a 9a       	sbi	0x0d, 2	; 13
     666:	72 98       	cbi	0x0e, 2	; 14
			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
		}
		*/
		
		//switch states
        switch (state) {
     668:	80 91 14 01 	lds	r24, 0x0114
     66c:	90 91 15 01 	lds	r25, 0x0115
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	91 05       	cpc	r25, r1
     674:	a4 f4       	brge	.+40     	; 0x69e <main+0x1f4>
     676:	99 23       	and	r25, r25
     678:	7c f7       	brge	.-34     	; 0x658 <main+0x1ae>
     67a:	8d 3f       	cpi	r24, 0xFD	; 253
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	92 07       	cpc	r25, r18
     680:	a1 f1       	breq	.+104    	; 0x6ea <main+0x240>
     682:	24 f4       	brge	.+8      	; 0x68c <main+0x1e2>
     684:	04 96       	adiw	r24, 0x04	; 4
     686:	09 f0       	breq	.+2      	; 0x68a <main+0x1e0>
     688:	8f c0       	rjmp	.+286    	; 0x7a8 <main+0x2fe>
     68a:	1f c0       	rjmp	.+62     	; 0x6ca <main+0x220>
     68c:	8e 3f       	cpi	r24, 0xFE	; 254
     68e:	2f ef       	ldi	r18, 0xFF	; 255
     690:	92 07       	cpc	r25, r18
     692:	09 f4       	brne	.+2      	; 0x696 <main+0x1ec>
     694:	43 c0       	rjmp	.+134    	; 0x71c <main+0x272>
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	09 f0       	breq	.+2      	; 0x69c <main+0x1f2>
     69a:	86 c0       	rjmp	.+268    	; 0x7a8 <main+0x2fe>
     69c:	6c c0       	rjmp	.+216    	; 0x776 <main+0x2cc>
     69e:	80 3a       	cpi	r24, 0xA0	; 160
     6a0:	91 05       	cpc	r25, r1
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <main+0x1fc>
     6a4:	7b c0       	rjmp	.+246    	; 0x79c <main+0x2f2>
     6a6:	44 f4       	brge	.+16     	; 0x6b8 <main+0x20e>
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <main+0x206>
     6ae:	6d c0       	rjmp	.+218    	; 0x78a <main+0x2e0>
     6b0:	04 97       	sbiw	r24, 0x04	; 4
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <main+0x20c>
     6b4:	79 c0       	rjmp	.+242    	; 0x7a8 <main+0x2fe>
     6b6:	6c c0       	rjmp	.+216    	; 0x790 <main+0x2e6>
     6b8:	81 3a       	cpi	r24, 0xA1	; 161
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <main+0x216>
     6be:	71 c0       	rjmp	.+226    	; 0x7a2 <main+0x2f8>
     6c0:	84 3a       	cpi	r24, 0xA4	; 164
     6c2:	91 05       	cpc	r25, r1
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <main+0x21e>
     6c6:	70 c0       	rjmp	.+224    	; 0x7a8 <main+0x2fe>
     6c8:	66 c0       	rjmp	.+204    	; 0x796 <main+0x2ec>
     6ca:	ff ef       	ldi	r31, 0xFF	; 255
     6cc:	23 ed       	ldi	r18, 0xD3	; 211
     6ce:	80 e3       	ldi	r24, 0x30	; 48
     6d0:	f1 50       	subi	r31, 0x01	; 1
     6d2:	20 40       	sbci	r18, 0x00	; 0
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x226>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x230>
     6da:	00 00       	nop
			
			case -4:
			m_wait(1000);
				shoot();
     6dc:	0e 94 46 01 	call	0x28c	; 0x28c <shoot>
				state = -3;
     6e0:	f0 92 15 01 	sts	0x0115, r15
     6e4:	e0 92 14 01 	sts	0x0114, r14
			break;
     6e8:	b7 cf       	rjmp	.-146    	; 0x658 <main+0x1ae>
				else {
					OCR1B = 0;
					OCR3A = 0;
				}
				*/
				OCR1B = OCR1A;
     6ea:	f8 01       	movw	r30, r16
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	f5 01       	movw	r30, r10
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	80 83       	st	Z, r24
				OCR3A = ICR3;
     6f6:	88 81       	ld	r24, Y
     6f8:	99 81       	ldd	r25, Y+1	; 0x01
     6fa:	f6 01       	movw	r30, r12
     6fc:	91 83       	std	Z+1, r25	; 0x01
     6fe:	80 83       	st	Z, r24
				set(PORTB,2);
     700:	2a 9a       	sbi	0x05, 2	; 5
				set(PORTB,3);
     702:	2b 9a       	sbi	0x05, 3	; 5
     704:	ff ef       	ldi	r31, 0xFF	; 255
     706:	23 ed       	ldi	r18, 0xD3	; 211
     708:	80 e3       	ldi	r24, 0x30	; 48
     70a:	f1 50       	subi	r31, 0x01	; 1
     70c:	20 40       	sbci	r18, 0x00	; 0
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <main+0x260>
     712:	00 c0       	rjmp	.+0      	; 0x714 <main+0x26a>
     714:	00 00       	nop
				m_wait(1000);
				clear(PORTB,3);
     716:	2b 98       	cbi	0x05, 3	; 5
				clear(PORTB,2);
     718:	2a 98       	cbi	0x05, 2	; 5
			break;
     71a:	9e cf       	rjmp	.-196    	; 0x658 <main+0x1ae>
			
			case -2: //test turning n driving n stuff
			turn(LEFT,OCR1A/4);
     71c:	f8 01       	movw	r30, r16
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	76 95       	lsr	r23
     728:	67 95       	ror	r22
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 0e 01 	call	0x21c	; 0x21c <turn>
     732:	ff ef       	ldi	r31, 0xFF	; 255
     734:	23 ed       	ldi	r18, 0xD3	; 211
     736:	80 e3       	ldi	r24, 0x30	; 48
     738:	f1 50       	subi	r31, 0x01	; 1
     73a:	20 40       	sbci	r18, 0x00	; 0
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <main+0x28e>
     740:	00 c0       	rjmp	.+0      	; 0x742 <main+0x298>
     742:	00 00       	nop
			m_wait(1000);
			turn(RIGHT, ICR3/5);
     744:	28 81       	ld	r18, Y
     746:	39 81       	ldd	r19, Y+1	; 0x01
     748:	ad ec       	ldi	r26, 0xCD	; 205
     74a:	bc ec       	ldi	r27, 0xCC	; 204
     74c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__umulhisi3>
     750:	bc 01       	movw	r22, r24
     752:	76 95       	lsr	r23
     754:	67 95       	ror	r22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 0e 01 	call	0x21c	; 0x21c <turn>
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	e3 ed       	ldi	r30, 0xD3	; 211
     766:	f0 e3       	ldi	r31, 0x30	; 48
     768:	91 50       	subi	r25, 0x01	; 1
     76a:	e0 40       	sbci	r30, 0x00	; 0
     76c:	f0 40       	sbci	r31, 0x00	; 0
     76e:	e1 f7       	brne	.-8      	; 0x768 <main+0x2be>
     770:	00 c0       	rjmp	.+0      	; 0x772 <main+0x2c8>
     772:	00 00       	nop
     774:	71 cf       	rjmp	.-286    	; 0x658 <main+0x1ae>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	89 e6       	ldi	r24, 0x69	; 105
     77a:	98 e1       	ldi	r25, 0x18	; 24
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x2d2>
     784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x2dc>
     786:	00 00       	nop
     788:	67 cf       	rjmp	.-306    	; 0x658 <main+0x1ae>
			case 2:
			drive_to_puck();
			break;
			
			case 3:
			drive_to_goal();
     78a:	0e 94 35 02 	call	0x46a	; 0x46a <drive_to_goal>
			break;
     78e:	64 cf       	rjmp	.-312    	; 0x658 <main+0x1ae>
			
			case 4:
			shoot();
     790:	0e 94 46 01 	call	0x28c	; 0x28c <shoot>
			break;
     794:	61 cf       	rjmp	.-318    	; 0x658 <main+0x1ae>
			m_green(OFF);
			m_wait(500);
			break;*/
			
			case 0xA4:
			game_pause();
     796:	0e 94 52 01 	call	0x2a4	; 0x2a4 <game_pause>
			break;
     79a:	5e cf       	rjmp	.-324    	; 0x658 <main+0x1ae>
			
			case 0xA0:
			comm_test();
     79c:	0e 94 3c 02 	call	0x478	; 0x478 <comm_test>
			break;
     7a0:	5b cf       	rjmp	.-330    	; 0x658 <main+0x1ae>
			
			case 0xA1:
			drive_to_goal();
     7a2:	0e 94 35 02 	call	0x46a	; 0x46a <drive_to_goal>
			break;
     7a6:	58 cf       	rjmp	.-336    	; 0x658 <main+0x1ae>
			
			default:
			rotate(LEFT);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <rotate>
			break;
     7b0:	53 cf       	rjmp	.-346    	; 0x658 <main+0x1ae>

000007b2 <__vector_29>:
		}
        
    }
}

ISR(ADC_vect) {
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 93       	push	r18
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
	if (ADC  > 500) {
     7c2:	80 91 78 00 	lds	r24, 0x0078
     7c6:	90 91 79 00 	lds	r25, 0x0079
     7ca:	85 3f       	cpi	r24, 0xF5	; 245
     7cc:	91 40       	sbci	r25, 0x01	; 1
     7ce:	18 f0       	brcs	.+6      	; 0x7d6 <__vector_29+0x24>
		m_green(ON);
     7d0:	6a 9a       	sbi	0x0d, 2	; 13
     7d2:	72 98       	cbi	0x0e, 2	; 14
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <__vector_29+0x28>
	}
	
	else {
		m_green(OFF);
     7d6:	6a 9a       	sbi	0x0d, 2	; 13
     7d8:	72 9a       	sbi	0x0e, 2	; 14
	}
}
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	2f 91       	pop	r18
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <__vector_3>:

ISR(INT2_vect)  {
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	m_rf_read(buffer,PACKET_LENGTH);
     80c:	6a e0       	ldi	r22, 0x0A	; 10
     80e:	8f e5       	ldi	r24, 0x5F	; 95
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 6d 09 	call	0x12da	; 0x12da <m_rf_read>
	state=buffer[0];
     816:	80 91 5f 01 	lds	r24, 0x015F
     81a:	80 93 14 01 	sts	0x0114, r24
     81e:	10 92 15 01 	sts	0x0115, r1
}
     822:	ff 91       	pop	r31
     824:	ef 91       	pop	r30
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	0f 90       	pop	r0
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	0f 90       	pop	r0
     840:	1f 90       	pop	r1
     842:	18 95       	reti

00000844 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     844:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     846:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     848:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     84a:	8c e0       	ldi	r24, 0x0C	; 12
     84c:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     850:	e9 e6       	ldi	r30, 0x69	; 105
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	80 62       	ori	r24, 0x20	; 32
     858:	80 83       	st	Z, r24
     85a:	80 81       	ld	r24, Z
     85c:	8f 7e       	andi	r24, 0xEF	; 239
     85e:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     860:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     862:	78 94       	sei
     864:	08 95       	ret

00000866 <getData>:
int far1 = 0, far2 = 0, close1 = 0, close2 = 0;

int numlost = 0;
int recalibrate = 0;

unsigned char getData(unsigned int* x, unsigned int* y) {
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	8c 01       	movw	r16, r24
     870:	eb 01       	movw	r28, r22
	m_wii_read(blobs);
     872:	84 e4       	ldi	r24, 0x44	; 68
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 ed 0b 	call	0x17da	; 0x17da <m_wii_read>
	x[0] = blobs[0];
     87a:	80 91 44 01 	lds	r24, 0x0144
     87e:	90 91 45 01 	lds	r25, 0x0145
     882:	f8 01       	movw	r30, r16
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	80 83       	st	Z, r24
	x[1] = blobs[3];
     888:	80 91 4a 01 	lds	r24, 0x014A
     88c:	90 91 4b 01 	lds	r25, 0x014B
     890:	93 83       	std	Z+3, r25	; 0x03
     892:	82 83       	std	Z+2, r24	; 0x02
	x[2] = blobs[6];
     894:	80 91 50 01 	lds	r24, 0x0150
     898:	90 91 51 01 	lds	r25, 0x0151
     89c:	95 83       	std	Z+5, r25	; 0x05
     89e:	84 83       	std	Z+4, r24	; 0x04
	x[3] = blobs[9];
     8a0:	80 91 56 01 	lds	r24, 0x0156
     8a4:	90 91 57 01 	lds	r25, 0x0157
     8a8:	97 83       	std	Z+7, r25	; 0x07
     8aa:	86 83       	std	Z+6, r24	; 0x06
	y[0] = blobs[1];
     8ac:	80 91 46 01 	lds	r24, 0x0146
     8b0:	90 91 47 01 	lds	r25, 0x0147
     8b4:	99 83       	std	Y+1, r25	; 0x01
     8b6:	88 83       	st	Y, r24
	y[1] = blobs[4];
     8b8:	80 91 4c 01 	lds	r24, 0x014C
     8bc:	90 91 4d 01 	lds	r25, 0x014D
     8c0:	9b 83       	std	Y+3, r25	; 0x03
     8c2:	8a 83       	std	Y+2, r24	; 0x02
	y[2] = blobs[7];
     8c4:	80 91 52 01 	lds	r24, 0x0152
     8c8:	90 91 53 01 	lds	r25, 0x0153
     8cc:	9d 83       	std	Y+5, r25	; 0x05
     8ce:	8c 83       	std	Y+4, r24	; 0x04
	y[3] = blobs[10];
     8d0:	80 91 58 01 	lds	r24, 0x0158
     8d4:	90 91 59 01 	lds	r25, 0x0159
     8d8:	9f 83       	std	Y+7, r25	; 0x07
     8da:	8e 83       	std	Y+6, r24	; 0x06
	return 1;
} 
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <determine_blobs>:

unsigned char determine_blobs() {
     8e8:	2f 92       	push	r2
     8ea:	3f 92       	push	r3
     8ec:	4f 92       	push	r4
     8ee:	5f 92       	push	r5
     8f0:	6f 92       	push	r6
     8f2:	7f 92       	push	r7
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	6c 97       	sbiw	r28, 0x1c	; 28
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
	int exit = 0;
	distmax = 0;
     91c:	10 92 24 01 	sts	0x0124, r1
     920:	10 92 25 01 	sts	0x0125, r1
     924:	10 92 26 01 	sts	0x0126, r1
     928:	10 92 27 01 	sts	0x0127, r1
	distmin = 30000;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e6       	ldi	r25, 0x60	; 96
     930:	aa ee       	ldi	r26, 0xEA	; 234
     932:	b6 e4       	ldi	r27, 0x46	; 70
     934:	80 93 00 01 	sts	0x0100, r24
     938:	90 93 01 01 	sts	0x0101, r25
     93c:	a0 93 02 01 	sts	0x0102, r26
     940:	b0 93 03 01 	sts	0x0103, r27
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     944:	0f 2e       	mov	r0, r31
     946:	f6 e3       	ldi	r31, 0x36	; 54
     948:	cf 2e       	mov	r12, r31
     94a:	f1 e0       	ldi	r31, 0x01	; 1
     94c:	df 2e       	mov	r13, r31
     94e:	f0 2d       	mov	r31, r0
     950:	08 e3       	ldi	r16, 0x38	; 56
     952:	11 e0       	ldi	r17, 0x01	; 1
     954:	0f 2e       	mov	r0, r31
     956:	fa e3       	ldi	r31, 0x3A	; 58
     958:	ef 2e       	mov	r14, r31
     95a:	f1 e0       	ldi	r31, 0x01	; 1
     95c:	ff 2e       	mov	r15, r31
     95e:	f0 2d       	mov	r31, r0
unsigned char determine_blobs() {
	int exit = 0;
	distmax = 0;
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
     960:	6c e2       	ldi	r22, 0x2C	; 44
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	84 e3       	ldi	r24, 0x34	; 52
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 33 04 	call	0x866	; 0x866 <getData>
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
     96c:	80 91 34 01 	lds	r24, 0x0134
     970:	90 91 35 01 	lds	r25, 0x0135
     974:	8f 3f       	cpi	r24, 0xFF	; 255
     976:	93 40       	sbci	r25, 0x03	; 3
     978:	98 f7       	brcc	.-26     	; 0x960 <determine_blobs+0x78>
     97a:	f6 01       	movw	r30, r12
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	8f 3f       	cpi	r24, 0xFF	; 255
     982:	93 40       	sbci	r25, 0x03	; 3
     984:	68 f7       	brcc	.-38     	; 0x960 <determine_blobs+0x78>
     986:	f8 01       	movw	r30, r16
     988:	80 81       	ld	r24, Z
     98a:	91 81       	ldd	r25, Z+1	; 0x01
     98c:	8f 3f       	cpi	r24, 0xFF	; 255
     98e:	93 40       	sbci	r25, 0x03	; 3
     990:	38 f7       	brcc	.-50     	; 0x960 <determine_blobs+0x78>
     992:	f7 01       	movw	r30, r14
     994:	80 81       	ld	r24, Z
     996:	91 81       	ldd	r25, Z+1	; 0x01
     998:	8f 3f       	cpi	r24, 0xFF	; 255
     99a:	93 40       	sbci	r25, 0x03	; 3
     99c:	08 f7       	brcc	.-62     	; 0x960 <determine_blobs+0x78>
     99e:	80 90 28 01 	lds	r8, 0x0128
     9a2:	90 90 29 01 	lds	r9, 0x0129
     9a6:	a0 90 2a 01 	lds	r10, 0x012A
     9aa:	b0 90 2b 01 	lds	r11, 0x012B
     9ae:	20 91 24 01 	lds	r18, 0x0124
     9b2:	29 83       	std	Y+1, r18	; 0x01
     9b4:	30 91 25 01 	lds	r19, 0x0125
     9b8:	3a 83       	std	Y+2, r19	; 0x02
     9ba:	40 91 26 01 	lds	r20, 0x0126
     9be:	4b 83       	std	Y+3, r20	; 0x03
     9c0:	50 91 27 01 	lds	r21, 0x0127
     9c4:	5c 83       	std	Y+4, r21	; 0x04
     9c6:	60 91 1e 01 	lds	r22, 0x011E
     9ca:	6b 8b       	std	Y+19, r22	; 0x13
     9cc:	70 91 1f 01 	lds	r23, 0x011F
     9d0:	7c 8b       	std	Y+20, r23	; 0x14
     9d2:	80 91 1c 01 	lds	r24, 0x011C
     9d6:	89 8b       	std	Y+17, r24	; 0x11
     9d8:	90 91 1d 01 	lds	r25, 0x011D
     9dc:	9a 8b       	std	Y+18, r25	; 0x12
     9de:	e0 91 20 01 	lds	r30, 0x0120
     9e2:	ed 8b       	std	Y+21, r30	; 0x15
     9e4:	f0 91 21 01 	lds	r31, 0x0121
     9e8:	fe 8b       	std	Y+22, r31	; 0x16
     9ea:	20 91 22 01 	lds	r18, 0x0122
     9ee:	2f 8b       	std	Y+23, r18	; 0x17
     9f0:	30 91 23 01 	lds	r19, 0x0123
     9f4:	38 8f       	std	Y+24, r19	; 0x18
     9f6:	40 91 00 01 	lds	r20, 0x0100
     9fa:	4d 83       	std	Y+5, r20	; 0x05
     9fc:	50 91 01 01 	lds	r21, 0x0101
     a00:	5e 83       	std	Y+6, r21	; 0x06
     a02:	20 90 02 01 	lds	r2, 0x0102
     a06:	30 90 03 01 	lds	r3, 0x0103
     a0a:	60 91 1a 01 	lds	r22, 0x011A
     a0e:	69 8f       	std	Y+25, r22	; 0x19
     a10:	70 91 1b 01 	lds	r23, 0x011B
     a14:	7a 8f       	std	Y+26, r23	; 0x1a
     a16:	80 91 18 01 	lds	r24, 0x0118
     a1a:	90 91 19 01 	lds	r25, 0x0119
     a1e:	98 8b       	std	Y+16, r25	; 0x10
     a20:	8f 87       	std	Y+15, r24	; 0x0f
     a22:	18 86       	std	Y+8, r1	; 0x08
     a24:	1f 82       	std	Y+7, r1	; 0x07
     a26:	c1 2c       	mov	r12, r1
     a28:	d1 2c       	mov	r13, r1
     a2a:	b9 c0       	rjmp	.+370    	; 0xb9e <__stack+0x9f>
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
     a2c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a2e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a30:	e4 15       	cp	r30, r4
     a32:	f5 05       	cpc	r31, r5
     a34:	09 f4       	brne	.+2      	; 0xa38 <determine_blobs+0x150>
     a36:	9c c0       	rjmp	.+312    	; 0xb70 <__stack+0x71>
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     a38:	e9 85       	ldd	r30, Y+9	; 0x09
     a3a:	fa 85       	ldd	r31, Y+10	; 0x0a
     a3c:	60 81       	ld	r22, Z
     a3e:	71 81       	ldd	r23, Z+1	; 0x01
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     a48:	6b 01       	movw	r12, r22
     a4a:	7c 01       	movw	r14, r24
     a4c:	f3 01       	movw	r30, r6
     a4e:	60 81       	ld	r22, Z
     a50:	71 81       	ldd	r23, Z+1	; 0x01
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	c7 01       	movw	r24, r14
     a60:	b6 01       	movw	r22, r12
     a62:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     a66:	c6 2e       	mov	r12, r22
     a68:	d7 2e       	mov	r13, r23
     a6a:	e8 2e       	mov	r14, r24
     a6c:	f9 2e       	mov	r15, r25
     a6e:	eb 85       	ldd	r30, Y+11	; 0x0b
     a70:	fc 85       	ldd	r31, Y+12	; 0x0c
     a72:	60 81       	ld	r22, Z
     a74:	71 81       	ldd	r23, Z+1	; 0x01
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     a7e:	4b 01       	movw	r8, r22
     a80:	5c 01       	movw	r10, r24
     a82:	f8 01       	movw	r30, r16
     a84:	60 81       	ld	r22, Z
     a86:	71 81       	ldd	r23, Z+1	; 0x01
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	c5 01       	movw	r24, r10
     a96:	b4 01       	movw	r22, r8
     a98:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     a9c:	86 2e       	mov	r8, r22
     a9e:	97 2e       	mov	r9, r23
     aa0:	a8 2e       	mov	r10, r24
     aa2:	b9 2e       	mov	r11, r25
     aa4:	2c 2d       	mov	r18, r12
     aa6:	3d 2d       	mov	r19, r13
     aa8:	4e 2d       	mov	r20, r14
     aaa:	5f 2d       	mov	r21, r15
     aac:	6c 2d       	mov	r22, r12
     aae:	7d 2d       	mov	r23, r13
     ab0:	8e 2d       	mov	r24, r14
     ab2:	9f 2d       	mov	r25, r15
     ab4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     ab8:	6b 01       	movw	r12, r22
     aba:	7c 01       	movw	r14, r24
     abc:	28 2d       	mov	r18, r8
     abe:	39 2d       	mov	r19, r9
     ac0:	4a 2d       	mov	r20, r10
     ac2:	5b 2d       	mov	r21, r11
     ac4:	68 2d       	mov	r22, r8
     ac6:	79 2d       	mov	r23, r9
     ac8:	8a 2d       	mov	r24, r10
     aca:	9b 2d       	mov	r25, r11
     acc:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 01       	movw	r22, r12
     ad8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__addsf3>
     adc:	0e 94 43 10 	call	0x2086	; 0x2086 <sqrt>
     ae0:	86 2e       	mov	r8, r22
     ae2:	97 2e       	mov	r9, r23
     ae4:	a8 2e       	mov	r10, r24
     ae6:	b9 2e       	mov	r11, r25
					if (dist > distmax) {
     ae8:	79 81       	ldd	r23, Y+1	; 0x01
     aea:	6a 81       	ldd	r22, Y+2	; 0x02
     aec:	9b 81       	ldd	r25, Y+3	; 0x03
     aee:	8c 81       	ldd	r24, Y+4	; 0x04
     af0:	27 2f       	mov	r18, r23
     af2:	36 2f       	mov	r19, r22
     af4:	49 2f       	mov	r20, r25
     af6:	58 2f       	mov	r21, r24
     af8:	68 2d       	mov	r22, r8
     afa:	79 2d       	mov	r23, r9
     afc:	8a 2d       	mov	r24, r10
     afe:	9b 2d       	mov	r25, r11
     b00:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__gesf2>
     b04:	18 16       	cp	r1, r24
     b06:	d4 f4       	brge	.+52     	; 0xb3c <__stack+0x3d>
						distmax = dist;
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	5f e3       	ldi	r21, 0x3F	; 63
     b10:	68 2d       	mov	r22, r8
     b12:	79 2d       	mov	r23, r9
     b14:	8a 2d       	mov	r24, r10
     b16:	9b 2d       	mov	r25, r11
     b18:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     b1c:	6d 8b       	std	Y+21, r22	; 0x15
     b1e:	7e 8b       	std	Y+22, r23	; 0x16
     b20:	8f 8b       	std	Y+23, r24	; 0x17
     b22:	98 8f       	std	Y+24, r25	; 0x18
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
						far2 = j;
     b24:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b26:	f9 8b       	std	Y+17, r31	; 0x11
     b28:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b2a:	2a 8b       	std	Y+18, r18	; 0x12
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
						far1 = i;
     b2c:	3d 85       	ldd	r19, Y+13	; 0x0d
     b2e:	3b 8b       	std	Y+19, r19	; 0x13
     b30:	4e 85       	ldd	r20, Y+14	; 0x0e
     b32:	4c 8b       	std	Y+20, r20	; 0x14
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
					if (dist > distmax) {
						distmax = dist;
     b34:	89 82       	std	Y+1, r8	; 0x01
     b36:	9a 82       	std	Y+2, r9	; 0x02
     b38:	ab 82       	std	Y+3, r10	; 0x03
     b3a:	bc 82       	std	Y+4, r11	; 0x04
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
     b3c:	7d 81       	ldd	r23, Y+5	; 0x05
     b3e:	6e 81       	ldd	r22, Y+6	; 0x06
     b40:	27 2f       	mov	r18, r23
     b42:	36 2f       	mov	r19, r22
     b44:	42 2d       	mov	r20, r2
     b46:	53 2d       	mov	r21, r3
     b48:	68 2d       	mov	r22, r8
     b4a:	79 2d       	mov	r23, r9
     b4c:	8a 2d       	mov	r24, r10
     b4e:	9b 2d       	mov	r25, r11
     b50:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__cmpsf2>
     b54:	88 23       	and	r24, r24
     b56:	64 f4       	brge	.+24     	; 0xb70 <__stack+0x71>
						distmin = dist;
						close1 = i;
						close2 = j;
     b58:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b5a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b5c:	78 8b       	std	Y+16, r23	; 0x10
     b5e:	6f 87       	std	Y+15, r22	; 0x0f
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     b60:	7d 85       	ldd	r23, Y+13	; 0x0d
     b62:	79 8f       	std	Y+25, r23	; 0x19
     b64:	8e 85       	ldd	r24, Y+14	; 0x0e
     b66:	8a 8f       	std	Y+26, r24	; 0x1a
						far1 = i;
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
     b68:	8d 82       	std	Y+5, r8	; 0x05
     b6a:	9e 82       	std	Y+6, r9	; 0x06
     b6c:	2a 2c       	mov	r2, r10
     b6e:	3b 2c       	mov	r3, r11
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	69 0e       	add	r6, r25
     b74:	71 1c       	adc	r7, r1
     b76:	0e 5f       	subi	r16, 0xFE	; 254
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
     b7a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b7c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b7e:	31 96       	adiw	r30, 0x01	; 1
     b80:	fc 8f       	std	Y+28, r31	; 0x1c
     b82:	eb 8f       	std	Y+27, r30	; 0x1b
     b84:	34 97       	sbiw	r30, 0x04	; 4
     b86:	09 f0       	breq	.+2      	; 0xb8a <__stack+0x8b>
     b88:	51 cf       	rjmp	.-350    	; 0xa2c <determine_blobs+0x144>
	distmin = 30000;
	while (exit == 0) {
		getData(x, y);
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
     b8a:	2f 81       	ldd	r18, Y+7	; 0x07
     b8c:	38 85       	ldd	r19, Y+8	; 0x08
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	38 87       	std	Y+8, r19	; 0x08
     b94:	2f 83       	std	Y+7, r18	; 0x07
     b96:	69 01       	movw	r12, r18
     b98:	24 30       	cpi	r18, 0x04	; 4
     b9a:	31 05       	cpc	r19, r1
     b9c:	39 f1       	breq	.+78     	; 0xbec <__stack+0xed>
				for (int j = i; j < 4; j++) {
     b9e:	34 e0       	ldi	r19, 0x04	; 4
     ba0:	c3 16       	cp	r12, r19
     ba2:	d1 04       	cpc	r13, r1
     ba4:	94 f7       	brge	.-28     	; 0xb8a <__stack+0x8b>
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     ba6:	86 01       	movw	r16, r12
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
	y[2] = blobs[7];
	y[3] = blobs[10];
	return 1;
} 

unsigned char determine_blobs() {
     bac:	00 0f       	add	r16, r16
     bae:	11 1f       	adc	r17, r17
     bb0:	0f 2e       	mov	r0, r31
     bb2:	f4 e3       	ldi	r31, 0x34	; 52
     bb4:	ef 2e       	mov	r14, r31
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	ff 2e       	mov	r15, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	e0 0e       	add	r14, r16
     bbe:	f1 1e       	adc	r15, r17
     bc0:	04 5d       	subi	r16, 0xD4	; 212
     bc2:	1e 4f       	sbci	r17, 0xFE	; 254
		if (x[0] < 1023 && x[1] < 1023 && x[2] < 1023 && x[3] < 1023) {
			exit = 1;
			for (int i = 0; i < 4; i++) {
				for (int j = i; j < 4; j++) {
					if (i == j) continue;
					dist = sqrt(((float)x[i]-(float)x[j])*((float)x[i]-(float)x[j])+((float)y[i]-(float)y[j])*((float)y[i]-(float)y[j]));
     bc4:	c6 01       	movw	r24, r12
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	ac 01       	movw	r20, r24
     bcc:	4c 5c       	subi	r20, 0xCC	; 204
     bce:	5e 4f       	sbci	r21, 0xFE	; 254
     bd0:	5a 87       	std	Y+10, r21	; 0x0a
     bd2:	49 87       	std	Y+9, r20	; 0x09
     bd4:	bc 01       	movw	r22, r24
     bd6:	64 5d       	subi	r22, 0xD4	; 212
     bd8:	7e 4f       	sbci	r23, 0xFE	; 254
     bda:	7c 87       	std	Y+12, r23	; 0x0c
     bdc:	6b 87       	std	Y+11, r22	; 0x0b
						far2 = j;
						dcenter = dist / 2.0;
					}
					if (dist < distmin) {
						distmin = dist;
						close1 = i;
     bde:	cd 86       	std	Y+13, r12	; 0x0d
     be0:	de 86       	std	Y+14, r13	; 0x0e
     be2:	dc 8e       	std	Y+28, r13	; 0x1c
     be4:	cb 8e       	std	Y+27, r12	; 0x1b
     be6:	26 01       	movw	r4, r12
     be8:	37 01       	movw	r6, r14
     bea:	c7 cf       	rjmp	.-114    	; 0xb7a <__stack+0x7b>
     bec:	88 2d       	mov	r24, r8
     bee:	99 2d       	mov	r25, r9
     bf0:	aa 2d       	mov	r26, r10
     bf2:	bb 2d       	mov	r27, r11
     bf4:	80 93 28 01 	sts	0x0128, r24
     bf8:	90 93 29 01 	sts	0x0129, r25
     bfc:	a0 93 2a 01 	sts	0x012A, r26
     c00:	b0 93 2b 01 	sts	0x012B, r27
     c04:	59 81       	ldd	r21, Y+1	; 0x01
     c06:	4a 81       	ldd	r20, Y+2	; 0x02
     c08:	3b 81       	ldd	r19, Y+3	; 0x03
     c0a:	2c 81       	ldd	r18, Y+4	; 0x04
     c0c:	85 2f       	mov	r24, r21
     c0e:	94 2f       	mov	r25, r20
     c10:	a3 2f       	mov	r26, r19
     c12:	b2 2f       	mov	r27, r18
     c14:	80 93 24 01 	sts	0x0124, r24
     c18:	90 93 25 01 	sts	0x0125, r25
     c1c:	a0 93 26 01 	sts	0x0126, r26
     c20:	b0 93 27 01 	sts	0x0127, r27
     c24:	7b 89       	ldd	r23, Y+19	; 0x13
     c26:	70 93 1e 01 	sts	0x011E, r23
     c2a:	8c 89       	ldd	r24, Y+20	; 0x14
     c2c:	80 93 1f 01 	sts	0x011F, r24
     c30:	99 89       	ldd	r25, Y+17	; 0x11
     c32:	90 93 1c 01 	sts	0x011C, r25
     c36:	ea 89       	ldd	r30, Y+18	; 0x12
     c38:	e0 93 1d 01 	sts	0x011D, r30
     c3c:	5d 89       	ldd	r21, Y+21	; 0x15
     c3e:	4e 89       	ldd	r20, Y+22	; 0x16
     c40:	3f 89       	ldd	r19, Y+23	; 0x17
     c42:	28 8d       	ldd	r18, Y+24	; 0x18
     c44:	85 2f       	mov	r24, r21
     c46:	94 2f       	mov	r25, r20
     c48:	a3 2f       	mov	r26, r19
     c4a:	b2 2f       	mov	r27, r18
     c4c:	80 93 20 01 	sts	0x0120, r24
     c50:	90 93 21 01 	sts	0x0121, r25
     c54:	a0 93 22 01 	sts	0x0122, r26
     c58:	b0 93 23 01 	sts	0x0123, r27
     c5c:	5d 81       	ldd	r21, Y+5	; 0x05
     c5e:	4e 81       	ldd	r20, Y+6	; 0x06
     c60:	85 2f       	mov	r24, r21
     c62:	94 2f       	mov	r25, r20
     c64:	a2 2d       	mov	r26, r2
     c66:	b3 2d       	mov	r27, r3
     c68:	80 93 00 01 	sts	0x0100, r24
     c6c:	90 93 01 01 	sts	0x0101, r25
     c70:	a0 93 02 01 	sts	0x0102, r26
     c74:	b0 93 03 01 	sts	0x0103, r27
     c78:	f9 8d       	ldd	r31, Y+25	; 0x19
     c7a:	f0 93 1a 01 	sts	0x011A, r31
     c7e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c80:	20 93 1b 01 	sts	0x011B, r18
     c84:	3f 85       	ldd	r19, Y+15	; 0x0f
     c86:	30 93 18 01 	sts	0x0118, r19
     c8a:	48 89       	ldd	r20, Y+16	; 0x10
     c8c:	40 93 19 01 	sts	0x0119, r20
						close2 = j;
					}
				}
			}
			if (far1 == close1) {
     c90:	80 91 1e 01 	lds	r24, 0x011E
     c94:	90 91 1f 01 	lds	r25, 0x011F
     c98:	20 91 1a 01 	lds	r18, 0x011A
     c9c:	30 91 1b 01 	lds	r19, 0x011B
     ca0:	82 17       	cp	r24, r18
     ca2:	93 07       	cpc	r25, r19
     ca4:	19 f5       	brne	.+70     	; 0xcec <__stack+0x1ed>
				top = far1;
     ca6:	90 93 43 01 	sts	0x0143, r25
     caa:	80 93 42 01 	sts	0x0142, r24
				bottom = far2;
     cae:	40 91 1c 01 	lds	r20, 0x011C
     cb2:	50 91 1d 01 	lds	r21, 0x011D
     cb6:	50 93 41 01 	sts	0x0141, r21
     cba:	40 93 40 01 	sts	0x0140, r20
				right = close2;
     cbe:	20 91 18 01 	lds	r18, 0x0118
     cc2:	30 91 19 01 	lds	r19, 0x0119
     cc6:	30 93 3d 01 	sts	0x013D, r19
     cca:	20 93 3c 01 	sts	0x013C, r18
				//left + top + bottom + right = 1 + 2 + 3 + 4 = 10
				left = 9 - top - bottom - right;
     cce:	69 e0       	ldi	r22, 0x09	; 9
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	fb 01       	movw	r30, r22
     cd4:	e8 1b       	sub	r30, r24
     cd6:	f9 0b       	sbc	r31, r25
     cd8:	cf 01       	movw	r24, r30
     cda:	84 1b       	sub	r24, r20
     cdc:	95 0b       	sbc	r25, r21
     cde:	82 1b       	sub	r24, r18
     ce0:	93 0b       	sbc	r25, r19
     ce2:	90 93 3f 01 	sts	0x013F, r25
     ce6:	80 93 3e 01 	sts	0x013E, r24
     cea:	66 c0       	rjmp	.+204    	; 0xdb8 <__stack+0x2b9>
			}
			else if (far1 == close2) {
     cec:	4f 85       	ldd	r20, Y+15	; 0x0f
     cee:	58 89       	ldd	r21, Y+16	; 0x10
     cf0:	84 17       	cp	r24, r20
     cf2:	95 07       	cpc	r25, r21
     cf4:	f9 f4       	brne	.+62     	; 0xd34 <__stack+0x235>
				top = far1;
     cf6:	90 93 43 01 	sts	0x0143, r25
     cfa:	80 93 42 01 	sts	0x0142, r24
				bottom = far2;
     cfe:	40 91 1c 01 	lds	r20, 0x011C
     d02:	50 91 1d 01 	lds	r21, 0x011D
     d06:	50 93 41 01 	sts	0x0141, r21
     d0a:	40 93 40 01 	sts	0x0140, r20
				right = close1;
     d0e:	30 93 3d 01 	sts	0x013D, r19
     d12:	20 93 3c 01 	sts	0x013C, r18
				left = 9 - top - bottom - right;
     d16:	69 e0       	ldi	r22, 0x09	; 9
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	fb 01       	movw	r30, r22
     d1c:	e8 1b       	sub	r30, r24
     d1e:	f9 0b       	sbc	r31, r25
     d20:	cf 01       	movw	r24, r30
     d22:	84 1b       	sub	r24, r20
     d24:	95 0b       	sbc	r25, r21
     d26:	82 1b       	sub	r24, r18
     d28:	93 0b       	sbc	r25, r19
     d2a:	90 93 3f 01 	sts	0x013F, r25
     d2e:	80 93 3e 01 	sts	0x013E, r24
     d32:	42 c0       	rjmp	.+132    	; 0xdb8 <__stack+0x2b9>
			}
			else if (far2 == close1) {
     d34:	40 91 1c 01 	lds	r20, 0x011C
     d38:	50 91 1d 01 	lds	r21, 0x011D
     d3c:	24 17       	cp	r18, r20
     d3e:	35 07       	cpc	r19, r21
     d40:	01 f5       	brne	.+64     	; 0xd82 <__stack+0x283>
				top = far2;
     d42:	30 93 43 01 	sts	0x0143, r19
     d46:	20 93 42 01 	sts	0x0142, r18
				bottom = far1;
     d4a:	90 93 41 01 	sts	0x0141, r25
     d4e:	80 93 40 01 	sts	0x0140, r24
				right = close2;
     d52:	4f 85       	ldd	r20, Y+15	; 0x0f
     d54:	58 89       	ldd	r21, Y+16	; 0x10
     d56:	50 93 3d 01 	sts	0x013D, r21
     d5a:	40 93 3c 01 	sts	0x013C, r20
				left = 9 - top - bottom - right;
     d5e:	49 e0       	ldi	r20, 0x09	; 9
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	ba 01       	movw	r22, r20
     d64:	62 1b       	sub	r22, r18
     d66:	73 0b       	sbc	r23, r19
     d68:	fb 01       	movw	r30, r22
     d6a:	e8 1b       	sub	r30, r24
     d6c:	f9 0b       	sbc	r31, r25
     d6e:	cf 01       	movw	r24, r30
     d70:	2f 85       	ldd	r18, Y+15	; 0x0f
     d72:	38 89       	ldd	r19, Y+16	; 0x10
     d74:	82 1b       	sub	r24, r18
     d76:	93 0b       	sbc	r25, r19
     d78:	90 93 3f 01 	sts	0x013F, r25
     d7c:	80 93 3e 01 	sts	0x013E, r24
     d80:	1b c0       	rjmp	.+54     	; 0xdb8 <__stack+0x2b9>
			}
			else {
				top = far2;
     d82:	50 93 43 01 	sts	0x0143, r21
     d86:	40 93 42 01 	sts	0x0142, r20
				bottom = far1;
     d8a:	90 93 41 01 	sts	0x0141, r25
     d8e:	80 93 40 01 	sts	0x0140, r24
				right = close1;
     d92:	30 93 3d 01 	sts	0x013D, r19
     d96:	20 93 3c 01 	sts	0x013C, r18
				left = 9 - top - bottom - right;
     d9a:	69 e0       	ldi	r22, 0x09	; 9
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	fb 01       	movw	r30, r22
     da0:	e4 1b       	sub	r30, r20
     da2:	f5 0b       	sbc	r31, r21
     da4:	bf 01       	movw	r22, r30
     da6:	68 1b       	sub	r22, r24
     da8:	79 0b       	sbc	r23, r25
     daa:	cb 01       	movw	r24, r22
     dac:	82 1b       	sub	r24, r18
     dae:	93 0b       	sbc	r25, r19
     db0:	90 93 3f 01 	sts	0x013F, r25
     db4:	80 93 3e 01 	sts	0x013E, r24
			}
		}
	}
	return 1;
}
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	6c 96       	adiw	r28, 0x1c	; 28
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	7f 90       	pop	r7
     de0:	6f 90       	pop	r6
     de2:	5f 90       	pop	r5
     de4:	4f 90       	pop	r4
     de6:	3f 90       	pop	r3
     de8:	2f 90       	pop	r2
     dea:	08 95       	ret

00000dec <localize>:
	data[1] = blobs[1];
	data[2] = 1.0;
}
*/

unsigned char localize (float* data) {
     dec:	2f 92       	push	r2
     dee:	3f 92       	push	r3
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	2e 97       	sbiw	r28, 0x0e	; 14
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	1c 01       	movw	r2, r24
	numlost = 0;
     e22:	10 92 17 01 	sts	0x0117, r1
     e26:	10 92 16 01 	sts	0x0116, r1
	
	//if (recalibrate == 1) {
		determine_blobs();
     e2a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <determine_blobs>
	//if (numlost >= 2) {
		//recalibrate = 1;
		//return 0;
	//}
	
	if (x[top] < 1023 && x[bottom] < 1023) {
     e2e:	00 91 42 01 	lds	r16, 0x0142
     e32:	10 91 43 01 	lds	r17, 0x0143
     e36:	f8 01       	movw	r30, r16
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	ec 5c       	subi	r30, 0xCC	; 204
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	20 81       	ld	r18, Z
     e42:	31 81       	ldd	r19, Z+1	; 0x01
     e44:	3a 87       	std	Y+10, r19	; 0x0a
     e46:	29 87       	std	Y+9, r18	; 0x09
     e48:	2f 3f       	cpi	r18, 0xFF	; 255
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	38 07       	cpc	r19, r24
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <localize+0x66>
     e50:	d5 c1       	rjmp	.+938    	; 0x11fc <localize+0x410>
     e52:	c0 90 40 01 	lds	r12, 0x0140
     e56:	d0 90 41 01 	lds	r13, 0x0141
     e5a:	f6 01       	movw	r30, r12
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ec 5c       	subi	r30, 0xCC	; 204
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	e0 80       	ld	r14, Z
     e66:	f1 80       	ldd	r15, Z+1	; 0x01
     e68:	9f ef       	ldi	r25, 0xFF	; 255
     e6a:	e9 16       	cp	r14, r25
     e6c:	93 e0       	ldi	r25, 0x03	; 3
     e6e:	f9 06       	cpc	r15, r25
     e70:	08 f0       	brcs	.+2      	; 0xe74 <localize+0x88>
     e72:	c4 c1       	rjmp	.+904    	; 0x11fc <localize+0x410>
		//calculate and store pixel-space position and orientation
		posx = (float) ((float)(x[top]+x[bottom]))/2.0 - rcenterx;
     e74:	40 90 08 01 	lds	r4, 0x0108
     e78:	50 90 09 01 	lds	r5, 0x0109
     e7c:	60 90 0a 01 	lds	r6, 0x010A
     e80:	70 90 0b 01 	lds	r7, 0x010B
     e84:	b9 01       	movw	r22, r18
     e86:	6e 0d       	add	r22, r14
     e88:	7f 1d       	adc	r23, r15
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     e9e:	a3 01       	movw	r20, r6
     ea0:	92 01       	movw	r18, r4
     ea2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     ea6:	69 83       	std	Y+1, r22	; 0x01
     ea8:	7a 83       	std	Y+2, r23	; 0x02
     eaa:	8b 83       	std	Y+3, r24	; 0x03
     eac:	9c 83       	std	Y+4, r25	; 0x04
		posy = (float) ((float)(y[top]+y[bottom]))/2.0 - rcentery;
     eae:	f8 01       	movw	r30, r16
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	e4 5d       	subi	r30, 0xD4	; 212
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	a0 80       	ld	r10, Z
     eba:	b1 80       	ldd	r11, Z+1	; 0x01
     ebc:	f6 01       	movw	r30, r12
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	e4 5d       	subi	r30, 0xD4	; 212
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	00 81       	ld	r16, Z
     ec8:	11 81       	ldd	r17, Z+1	; 0x01
     eca:	b8 01       	movw	r22, r16
     ecc:	6a 0d       	add	r22, r10
     ece:	7b 1d       	adc	r23, r11
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     ee4:	20 91 04 01 	lds	r18, 0x0104
     ee8:	30 91 05 01 	lds	r19, 0x0105
     eec:	40 91 06 01 	lds	r20, 0x0106
     ef0:	50 91 07 01 	lds	r21, 0x0107
     ef4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     ef8:	6d 83       	std	Y+5, r22	; 0x05
     efa:	7e 83       	std	Y+6, r23	; 0x06
     efc:	8f 83       	std	Y+7, r24	; 0x07
     efe:	98 87       	std	Y+8, r25	; 0x08
		
		
		//calculate and store angle
		angle = (float) atan2(((double) ((float)x[top]-(float)x[bottom])),((double) ((float)y[top]-(float)y[bottom])));
     f00:	b5 01       	movw	r22, r10
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     f0a:	4b 01       	movw	r8, r22
     f0c:	5c 01       	movw	r10, r24
     f0e:	b8 01       	movw	r22, r16
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     f18:	9b 01       	movw	r18, r22
     f1a:	ac 01       	movw	r20, r24
     f1c:	c5 01       	movw	r24, r10
     f1e:	b4 01       	movw	r22, r8
     f20:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     f24:	4b 01       	movw	r8, r22
     f26:	5c 01       	movw	r10, r24
     f28:	e9 85       	ldd	r30, Y+9	; 0x09
     f2a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f2c:	bf 01       	movw	r22, r30
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     f36:	69 87       	std	Y+9, r22	; 0x09
     f38:	7a 87       	std	Y+10, r23	; 0x0a
     f3a:	8b 87       	std	Y+11, r24	; 0x0b
     f3c:	9c 87       	std	Y+12, r25	; 0x0c
     f3e:	b7 01       	movw	r22, r14
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
     f48:	9b 01       	movw	r18, r22
     f4a:	ac 01       	movw	r20, r24
     f4c:	69 85       	ldd	r22, Y+9	; 0x09
     f4e:	7a 85       	ldd	r23, Y+10	; 0x0a
     f50:	8b 85       	ldd	r24, Y+11	; 0x0b
     f52:	9c 85       	ldd	r25, Y+12	; 0x0c
     f54:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     f58:	a5 01       	movw	r20, r10
     f5a:	94 01       	movw	r18, r8
     f5c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <atan2>
     f60:	69 87       	std	Y+9, r22	; 0x09
     f62:	7a 87       	std	Y+10, r23	; 0x0a
     f64:	8b 87       	std	Y+11, r24	; 0x0b
     f66:	9c 87       	std	Y+12, r25	; 0x0c
		phi = ((float) atan2((double) posy, (double) posx));
     f68:	79 81       	ldd	r23, Y+1	; 0x01
     f6a:	6a 81       	ldd	r22, Y+2	; 0x02
     f6c:	9b 81       	ldd	r25, Y+3	; 0x03
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	27 2f       	mov	r18, r23
     f72:	36 2f       	mov	r19, r22
     f74:	49 2f       	mov	r20, r25
     f76:	58 2f       	mov	r21, r24
     f78:	bd 81       	ldd	r27, Y+5	; 0x05
     f7a:	ae 81       	ldd	r26, Y+6	; 0x06
     f7c:	ef 81       	ldd	r30, Y+7	; 0x07
     f7e:	18 85       	ldd	r17, Y+8	; 0x08
     f80:	6b 2f       	mov	r22, r27
     f82:	7a 2f       	mov	r23, r26
     f84:	8e 2f       	mov	r24, r30
     f86:	91 2f       	mov	r25, r17
     f88:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <atan2>
     f8c:	4b 01       	movw	r8, r22
     f8e:	5c 01       	movw	r10, r24
		
		r = (float) sqrt((double)((posx)*(posx) + (posy)*(posy)));
     f90:	79 81       	ldd	r23, Y+1	; 0x01
     f92:	6a 81       	ldd	r22, Y+2	; 0x02
     f94:	9b 81       	ldd	r25, Y+3	; 0x03
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	27 2f       	mov	r18, r23
     f9a:	36 2f       	mov	r19, r22
     f9c:	49 2f       	mov	r20, r25
     f9e:	58 2f       	mov	r21, r24
     fa0:	67 2f       	mov	r22, r23
     fa2:	73 2f       	mov	r23, r19
     fa4:	89 2f       	mov	r24, r25
     fa6:	95 2f       	mov	r25, r21
     fa8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     fac:	6b 01       	movw	r12, r22
     fae:	7c 01       	movw	r14, r24
     fb0:	7d 81       	ldd	r23, Y+5	; 0x05
     fb2:	6e 81       	ldd	r22, Y+6	; 0x06
     fb4:	9f 81       	ldd	r25, Y+7	; 0x07
     fb6:	88 85       	ldd	r24, Y+8	; 0x08
     fb8:	27 2f       	mov	r18, r23
     fba:	36 2f       	mov	r19, r22
     fbc:	49 2f       	mov	r20, r25
     fbe:	58 2f       	mov	r21, r24
     fc0:	67 2f       	mov	r22, r23
     fc2:	73 2f       	mov	r23, r19
     fc4:	89 2f       	mov	r24, r25
     fc6:	95 2f       	mov	r25, r21
     fc8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	c7 01       	movw	r24, r14
     fd2:	b6 01       	movw	r22, r12
     fd4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__addsf3>
     fd8:	0e 94 43 10 	call	0x2086	; 0x2086 <sqrt>
     fdc:	6b 01       	movw	r12, r22
     fde:	7c 01       	movw	r14, r24
		
		

		data[0] = (rcenterx + r * (float) sin((double) (((3 * 3.14)/2) - angle - phi)));
     fe0:	29 85       	ldd	r18, Y+9	; 0x09
     fe2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe4:	4b 85       	ldd	r20, Y+11	; 0x0b
     fe6:	5c 85       	ldd	r21, Y+12	; 0x0c
     fe8:	62 e5       	ldi	r22, 0x52	; 82
     fea:	78 eb       	ldi	r23, 0xB8	; 184
     fec:	86 e9       	ldi	r24, 0x96	; 150
     fee:	90 e4       	ldi	r25, 0x40	; 64
     ff0:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     ff4:	a5 01       	movw	r20, r10
     ff6:	94 01       	movw	r18, r8
     ff8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__subsf3>
     ffc:	6e 87       	std	Y+14, r22	; 0x0e
     ffe:	7d 87       	std	Y+13, r23	; 0x0d
    1000:	18 2f       	mov	r17, r24
    1002:	09 2f       	mov	r16, r25
    1004:	81 2f       	mov	r24, r17
    1006:	90 2f       	mov	r25, r16
    1008:	0e 94 39 10 	call	0x2072	; 0x2072 <sin>
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	c3 01       	movw	r24, r6
    101a:	b2 01       	movw	r22, r4
    101c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__addsf3>
    1020:	f1 01       	movw	r30, r2
    1022:	60 83       	st	Z, r22
    1024:	71 83       	std	Z+1, r23	; 0x01
    1026:	82 83       	std	Z+2, r24	; 0x02
    1028:	93 83       	std	Z+3, r25	; 0x03
		data[1] = rcentery + r * (float) cos((double) (((3 * 3.14)/2) - angle - phi));
    102a:	5e 85       	ldd	r21, Y+14	; 0x0e
    102c:	4d 85       	ldd	r20, Y+13	; 0x0d
    102e:	65 2f       	mov	r22, r21
    1030:	74 2f       	mov	r23, r20
    1032:	81 2f       	mov	r24, r17
    1034:	90 2f       	mov	r25, r16
    1036:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <cos>
    103a:	a7 01       	movw	r20, r14
    103c:	96 01       	movw	r18, r12
    103e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1042:	20 91 04 01 	lds	r18, 0x0104
    1046:	30 91 05 01 	lds	r19, 0x0105
    104a:	40 91 06 01 	lds	r20, 0x0106
    104e:	50 91 07 01 	lds	r21, 0x0107
    1052:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__addsf3>
    1056:	f1 01       	movw	r30, r2
    1058:	64 83       	std	Z+4, r22	; 0x04
    105a:	75 83       	std	Z+5, r23	; 0x05
    105c:	86 83       	std	Z+6, r24	; 0x06
    105e:	97 83       	std	Z+7, r25	; 0x07
		//data[0] = posx- r*(float)cos((double)phi);
		//data[1] = posy- r*(float)sin((double)phi);
		data[2] = angle * 180.0 / 3.14;
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	44 e3       	ldi	r20, 0x34	; 52
    1066:	53 e4       	ldi	r21, 0x43	; 67
    1068:	69 85       	ldd	r22, Y+9	; 0x09
    106a:	7a 85       	ldd	r23, Y+10	; 0x0a
    106c:	8b 85       	ldd	r24, Y+11	; 0x0b
    106e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1070:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1074:	23 ec       	ldi	r18, 0xC3	; 195
    1076:	35 ef       	ldi	r19, 0xF5	; 245
    1078:	48 e4       	ldi	r20, 0x48	; 72
    107a:	50 e4       	ldi	r21, 0x40	; 64
    107c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__divsf3>
    1080:	f1 01       	movw	r30, r2
    1082:	60 87       	std	Z+8, r22	; 0x08
    1084:	71 87       	std	Z+9, r23	; 0x09
    1086:	82 87       	std	Z+10, r24	; 0x0a
    1088:	93 87       	std	Z+11, r25	; 0x0b
		data[3] = x[top];
    108a:	00 91 42 01 	lds	r16, 0x0142
    108e:	10 91 43 01 	lds	r17, 0x0143
    1092:	00 0f       	add	r16, r16
    1094:	11 1f       	adc	r17, r17
    1096:	f8 01       	movw	r30, r16
    1098:	ec 5c       	subi	r30, 0xCC	; 204
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    10a8:	f1 01       	movw	r30, r2
    10aa:	64 87       	std	Z+12, r22	; 0x0c
    10ac:	75 87       	std	Z+13, r23	; 0x0d
    10ae:	86 87       	std	Z+14, r24	; 0x0e
    10b0:	97 87       	std	Z+15, r25	; 0x0f
		data[4] = y[top];
    10b2:	f8 01       	movw	r30, r16
    10b4:	e4 5d       	subi	r30, 0xD4	; 212
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    10c4:	f1 01       	movw	r30, r2
    10c6:	60 8b       	std	Z+16, r22	; 0x10
    10c8:	71 8b       	std	Z+17, r23	; 0x11
    10ca:	82 8b       	std	Z+18, r24	; 0x12
    10cc:	93 8b       	std	Z+19, r25	; 0x13
		data[5] = x[bottom];
    10ce:	00 91 40 01 	lds	r16, 0x0140
    10d2:	10 91 41 01 	lds	r17, 0x0141
    10d6:	00 0f       	add	r16, r16
    10d8:	11 1f       	adc	r17, r17
    10da:	f8 01       	movw	r30, r16
    10dc:	ec 5c       	subi	r30, 0xCC	; 204
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    10ec:	f1 01       	movw	r30, r2
    10ee:	64 8b       	std	Z+20, r22	; 0x14
    10f0:	75 8b       	std	Z+21, r23	; 0x15
    10f2:	86 8b       	std	Z+22, r24	; 0x16
    10f4:	97 8b       	std	Z+23, r25	; 0x17
		data[6] = y[bottom];
    10f6:	f8 01       	movw	r30, r16
    10f8:	e4 5d       	subi	r30, 0xD4	; 212
    10fa:	fe 4f       	sbci	r31, 0xFE	; 254
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    1108:	f1 01       	movw	r30, r2
    110a:	60 8f       	std	Z+24, r22	; 0x18
    110c:	71 8f       	std	Z+25, r23	; 0x19
    110e:	82 8f       	std	Z+26, r24	; 0x1a
    1110:	93 8f       	std	Z+27, r25	; 0x1b
		data[7] = x[right];
    1112:	00 91 3c 01 	lds	r16, 0x013C
    1116:	10 91 3d 01 	lds	r17, 0x013D
    111a:	00 0f       	add	r16, r16
    111c:	11 1f       	adc	r17, r17
    111e:	f8 01       	movw	r30, r16
    1120:	ec 5c       	subi	r30, 0xCC	; 204
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    1130:	f1 01       	movw	r30, r2
    1132:	64 8f       	std	Z+28, r22	; 0x1c
    1134:	75 8f       	std	Z+29, r23	; 0x1d
    1136:	86 8f       	std	Z+30, r24	; 0x1e
    1138:	97 8f       	std	Z+31, r25	; 0x1f
		data[8] = y[right];
    113a:	f8 01       	movw	r30, r16
    113c:	e4 5d       	subi	r30, 0xD4	; 212
    113e:	fe 4f       	sbci	r31, 0xFE	; 254
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    114c:	f1 01       	movw	r30, r2
    114e:	60 a3       	std	Z+32, r22	; 0x20
    1150:	71 a3       	std	Z+33, r23	; 0x21
    1152:	82 a3       	std	Z+34, r24	; 0x22
    1154:	93 a3       	std	Z+35, r25	; 0x23
		data[9] = x[left];
    1156:	00 91 3e 01 	lds	r16, 0x013E
    115a:	10 91 3f 01 	lds	r17, 0x013F
    115e:	00 0f       	add	r16, r16
    1160:	11 1f       	adc	r17, r17
    1162:	f8 01       	movw	r30, r16
    1164:	ec 5c       	subi	r30, 0xCC	; 204
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    1174:	f1 01       	movw	r30, r2
    1176:	64 a3       	std	Z+36, r22	; 0x24
    1178:	75 a3       	std	Z+37, r23	; 0x25
    117a:	86 a3       	std	Z+38, r24	; 0x26
    117c:	97 a3       	std	Z+39, r25	; 0x27
		data[10] = y[left];
    117e:	f8 01       	movw	r30, r16
    1180:	e4 5d       	subi	r30, 0xD4	; 212
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	60 81       	ld	r22, Z
    1186:	71 81       	ldd	r23, Z+1	; 0x01
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatunsisf>
    1190:	f1 01       	movw	r30, r2
    1192:	60 a7       	std	Z+40, r22	; 0x28
    1194:	71 a7       	std	Z+41, r23	; 0x29
    1196:	82 a7       	std	Z+42, r24	; 0x2a
    1198:	93 a7       	std	Z+43, r25	; 0x2b
		data[11] = phi * 180.0 / 3.14;
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	44 e3       	ldi	r20, 0x34	; 52
    11a0:	53 e4       	ldi	r21, 0x43	; 67
    11a2:	c5 01       	movw	r24, r10
    11a4:	b4 01       	movw	r22, r8
    11a6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    11aa:	23 ec       	ldi	r18, 0xC3	; 195
    11ac:	35 ef       	ldi	r19, 0xF5	; 245
    11ae:	48 e4       	ldi	r20, 0x48	; 72
    11b0:	50 e4       	ldi	r21, 0x40	; 64
    11b2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__divsf3>
    11b6:	f1 01       	movw	r30, r2
    11b8:	64 a7       	std	Z+44, r22	; 0x2c
    11ba:	75 a7       	std	Z+45, r23	; 0x2d
    11bc:	86 a7       	std	Z+46, r24	; 0x2e
    11be:	97 a7       	std	Z+47, r25	; 0x2f
		data[12] = posx;
    11c0:	59 81       	ldd	r21, Y+1	; 0x01
    11c2:	4a 81       	ldd	r20, Y+2	; 0x02
    11c4:	3b 81       	ldd	r19, Y+3	; 0x03
    11c6:	2c 81       	ldd	r18, Y+4	; 0x04
    11c8:	85 2f       	mov	r24, r21
    11ca:	94 2f       	mov	r25, r20
    11cc:	a3 2f       	mov	r26, r19
    11ce:	b2 2f       	mov	r27, r18
    11d0:	80 ab       	std	Z+48, r24	; 0x30
    11d2:	91 ab       	std	Z+49, r25	; 0x31
    11d4:	a2 ab       	std	Z+50, r26	; 0x32
    11d6:	b3 ab       	std	Z+51, r27	; 0x33
		data[13] = posy;
    11d8:	5d 81       	ldd	r21, Y+5	; 0x05
    11da:	4e 81       	ldd	r20, Y+6	; 0x06
    11dc:	3f 81       	ldd	r19, Y+7	; 0x07
    11de:	28 85       	ldd	r18, Y+8	; 0x08
    11e0:	85 2f       	mov	r24, r21
    11e2:	94 2f       	mov	r25, r20
    11e4:	a3 2f       	mov	r26, r19
    11e6:	b2 2f       	mov	r27, r18
    11e8:	84 ab       	std	Z+52, r24	; 0x34
    11ea:	95 ab       	std	Z+53, r25	; 0x35
    11ec:	a6 ab       	std	Z+54, r26	; 0x36
    11ee:	b7 ab       	std	Z+55, r27	; 0x37
		data[14] = r;
    11f0:	c0 ae       	std	Z+56, r12	; 0x38
    11f2:	d1 ae       	std	Z+57, r13	; 0x39
    11f4:	e2 ae       	std	Z+58, r14	; 0x3a
    11f6:	f3 ae       	std	Z+59, r15	; 0x3b
		return 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <localize+0x410>
		return 1;
	}
	
	return 0;
	*/
    11fc:	2e 96       	adiw	r28, 0x0e	; 14
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	7f 90       	pop	r7
    1222:	6f 90       	pop	r6
    1224:	5f 90       	pop	r5
    1226:	4f 90       	pop	r4
    1228:	3f 90       	pop	r3
    122a:	2f 90       	pop	r2
    122c:	08 95       	ret

0000122e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	18 2f       	mov	r17, r24
    1236:	d6 2f       	mov	r29, r22
    1238:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    123a:	0e 94 22 04 	call	0x844	; 0x844 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    123e:	94 ea       	ldi	r25, 0xA4	; 164
    1240:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1244:	ec eb       	ldi	r30, 0xBC	; 188
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	90 81       	ld	r25, Z
    124a:	99 23       	and	r25, r25
    124c:	ec f7       	brge	.-6      	; 0x1248 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    124e:	90 e5       	ldi	r25, 0x50	; 80
    1250:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1254:	94 e8       	ldi	r25, 0x84	; 132
    1256:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    125a:	ec eb       	ldi	r30, 0xBC	; 188
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	90 81       	ld	r25, Z
    1260:	99 23       	and	r25, r25
    1262:	ec f7       	brge	.-6      	; 0x125e <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1264:	90 91 b9 00 	lds	r25, 0x00B9
    1268:	98 7f       	andi	r25, 0xF8	; 248
    126a:	90 32       	cpi	r25, 0x20	; 32
    126c:	29 f4       	brne	.+10     	; 0x1278 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    126e:	84 e9       	ldi	r24, 0x94	; 148
    1270:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	2d c0       	rjmp	.+90     	; 0x12d2 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    127e:	84 e8       	ldi	r24, 0x84	; 132
    1280:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1284:	ec eb       	ldi	r30, 0xBC	; 188
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	90 81       	ld	r25, Z
    128a:	99 23       	and	r25, r25
    128c:	ec f7       	brge	.-6      	; 0x1288 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    128e:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1292:	84 e8       	ldi	r24, 0x84	; 132
    1294:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1298:	ec eb       	ldi	r30, 0xBC	; 188
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	88 23       	and	r24, r24
    12a0:	ec f7       	brge	.-6      	; 0x129c <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    12a2:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    12a6:	84 e8       	ldi	r24, 0x84	; 132
    12a8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    12ac:	ec eb       	ldi	r30, 0xBC	; 188
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	88 23       	and	r24, r24
    12b4:	ec f7       	brge	.-6      	; 0x12b0 <m_rf_open+0x82>
	
	TWDR = packet_length;
    12b6:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    12ba:	84 e8       	ldi	r24, 0x84	; 132
    12bc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    12c0:	ec eb       	ldi	r30, 0xBC	; 188
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 23       	and	r24, r24
    12c8:	ec f7       	brge	.-6      	; 0x12c4 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    12ca:	84 e9       	ldi	r24, 0x94	; 148
    12cc:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	08 95       	ret

000012da <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    12de:	24 ea       	ldi	r18, 0xA4	; 164
    12e0:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    12e4:	ec eb       	ldi	r30, 0xBC	; 188
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	20 81       	ld	r18, Z
    12ea:	22 23       	and	r18, r18
    12ec:	ec f7       	brge	.-6      	; 0x12e8 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    12ee:	21 e5       	ldi	r18, 0x51	; 81
    12f0:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    12f4:	24 e8       	ldi	r18, 0x84	; 132
    12f6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    12fa:	ec eb       	ldi	r30, 0xBC	; 188
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	20 81       	ld	r18, Z
    1300:	22 23       	and	r18, r18
    1302:	ec f7       	brge	.-6      	; 0x12fe <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1304:	20 91 b9 00 	lds	r18, 0x00B9
    1308:	28 7f       	andi	r18, 0xF8	; 248
    130a:	28 34       	cpi	r18, 0x48	; 72
    130c:	29 f4       	brne	.+10     	; 0x1318 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    130e:	84 e9       	ldi	r24, 0x94	; 148
    1310:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1318:	24 ec       	ldi	r18, 0xC4	; 196
    131a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    131e:	ec eb       	ldi	r30, 0xBC	; 188
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	20 81       	ld	r18, Z
    1324:	22 23       	and	r18, r18
    1326:	ec f7       	brge	.-6      	; 0x1322 <m_rf_read+0x48>
	bytes = TWDR;
    1328:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    132c:	46 13       	cpse	r20, r22
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	41 50       	subi	r20, 0x01	; 1
    1334:	51 09       	sbc	r21, r1
    1336:	14 16       	cp	r1, r20
    1338:	15 06       	cpc	r1, r21
    133a:	44 f0       	brlt	.+16     	; 0x134c <m_rf_read+0x72>
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	18 c0       	rjmp	.+48     	; 0x1372 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1342:	84 e9       	ldi	r24, 0x94	; 148
    1344:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	25 c0       	rjmp	.+74     	; 0x1396 <m_rf_read+0xbc>
    134c:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1352:	ec eb       	ldi	r30, 0xBC	; 188
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1358:	cb eb       	ldi	r28, 0xBB	; 187
    135a:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    135c:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    135e:	60 81       	ld	r22, Z
    1360:	66 23       	and	r22, r22
    1362:	ec f7       	brge	.-6      	; 0x135e <m_rf_read+0x84>
		buffer[i] = TWDR;
    1364:	68 81       	ld	r22, Y
    1366:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1368:	2f 5f       	subi	r18, 0xFF	; 255
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	24 17       	cp	r18, r20
    136e:	35 07       	cpc	r19, r21
    1370:	ac f3       	brlt	.-22     	; 0x135c <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1372:	24 e8       	ldi	r18, 0x84	; 132
    1374:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1378:	ec eb       	ldi	r30, 0xBC	; 188
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	20 81       	ld	r18, Z
    137e:	22 23       	and	r18, r18
    1380:	ec f7       	brge	.-6      	; 0x137c <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    1382:	20 91 bb 00 	lds	r18, 0x00BB
    1386:	fc 01       	movw	r30, r24
    1388:	e4 0f       	add	r30, r20
    138a:	f5 1f       	adc	r31, r21
    138c:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    138e:	84 e9       	ldi	r24, 0x94	; 148
    1390:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
}
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    13ae:	e1 ee       	ldi	r30, 0xE1	; 225
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
        UDINT = 0;
    13b4:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    13b6:	83 ff       	sbrs	r24, 3
    13b8:	11 c0       	rjmp	.+34     	; 0x13dc <__vector_10+0x40>
		UENUM = 0;
    13ba:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    13c4:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    13c8:	92 e1       	ldi	r25, 0x12	; 18
    13ca:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    13ce:	98 e0       	ldi	r25, 0x08	; 8
    13d0:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    13d4:	10 92 5d 01 	sts	0x015D, r1
		cdc_line_rtsdtr = 0;
    13d8:	10 92 5e 01 	sts	0x015E, r1
        }
	if (intbits & (1<<SOFI)) {
    13dc:	82 ff       	sbrs	r24, 2
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <__vector_10+0x6a>
		if (usb_configuration) {
    13e0:	80 91 5d 01 	lds	r24, 0x015D
    13e4:	88 23       	and	r24, r24
    13e6:	79 f0       	breq	.+30     	; 0x1406 <__vector_10+0x6a>
			t = transmit_flush_timer;
    13e8:	80 91 5c 01 	lds	r24, 0x015C
			if (t) {
    13ec:	88 23       	and	r24, r24
    13ee:	59 f0       	breq	.+22     	; 0x1406 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    13f0:	81 50       	subi	r24, 0x01	; 1
    13f2:	80 93 5c 01 	sts	0x015C, r24
				if (!t) {
    13f6:	81 11       	cpse	r24, r1
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    13fa:	84 e0       	ldi	r24, 0x04	; 4
    13fc:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1400:	8a e3       	ldi	r24, 0x3A	; 58
    1402:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1442:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1446:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    144a:	83 ff       	sbrs	r24, 3
    144c:	51 c1       	rjmp	.+674    	; 0x16f0 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    144e:	e1 ef       	ldi	r30, 0xF1	; 241
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1454:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1456:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1458:	30 81       	ld	r19, Z
    145a:	93 2f       	mov	r25, r19
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	dc 01       	movw	r26, r24
    1460:	a2 2b       	or	r26, r18
    1462:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1464:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1466:	60 81       	ld	r22, Z
    1468:	96 2f       	mov	r25, r22
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	85 2b       	or	r24, r21
                wLength = UEDATX;
    146e:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    1470:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1472:	52 ef       	ldi	r21, 0xF2	; 242
    1474:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1478:	46 30       	cpi	r20, 0x06	; 6
    147a:	09 f0       	breq	.+2      	; 0x147e <__vector_11+0x66>
    147c:	5c c0       	rjmp	.+184    	; 0x1536 <__vector_11+0x11e>
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1480:	81 e2       	ldi	r24, 0x21	; 33
    1482:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1486:	3b c1       	rjmp	.+630    	; 0x16fe <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1488:	c6 e0       	ldi	r28, 0x06	; 6
    148a:	47 ef       	ldi	r20, 0xF7	; 247
    148c:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    148e:	fa 01       	movw	r30, r20
    1490:	65 91       	lpm	r22, Z+
    1492:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1494:	26 17       	cp	r18, r22
    1496:	37 07       	cpc	r19, r23
    1498:	19 f0       	breq	.+6      	; 0x14a0 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    149a:	49 5f       	subi	r20, 0xF9	; 249
    149c:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    149e:	20 c0       	rjmp	.+64     	; 0x14e0 <__vector_11+0xc8>
				}
				list += 2;
    14a0:	fa 01       	movw	r30, r20
    14a2:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    14a4:	65 91       	lpm	r22, Z+
    14a6:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    14a8:	86 17       	cp	r24, r22
    14aa:	97 07       	cpc	r25, r23
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    14ae:	49 5f       	subi	r20, 0xF9	; 249
    14b0:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    14b2:	16 c0       	rjmp	.+44     	; 0x14e0 <__vector_11+0xc8>
				}
				list += 2;
    14b4:	fa 01       	movw	r30, r20
    14b6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    14b8:	85 91       	lpm	r24, Z+
    14ba:	94 91       	lpm	r25, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	39 2f       	mov	r19, r25
				list += 2;
    14c0:	fa 01       	movw	r30, r20
    14c2:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    14c4:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    14c6:	9b 2f       	mov	r25, r27
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    14cc:	8f 3f       	cpi	r24, 0xFF	; 255
    14ce:	91 05       	cpc	r25, r1
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <__vector_11+0xc0>
    14d2:	10 f0       	brcs	.+4      	; 0x14d8 <__vector_11+0xc0>
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	84 17       	cp	r24, r20
    14da:	28 f4       	brcc	.+10     	; 0x14e6 <__vector_11+0xce>
    14dc:	48 2f       	mov	r20, r24
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <__vector_11+0xce>
    14e0:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    14e2:	a9 f6       	brne	.-86     	; 0x148e <__vector_11+0x76>
    14e4:	cd cf       	rjmp	.-102    	; 0x1480 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    14e6:	c8 ee       	ldi	r28, 0xE8	; 232
    14e8:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    14ea:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    14ec:	a1 ef       	ldi	r26, 0xF1	; 241
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    14f0:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    14f2:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    14f4:	98 2f       	mov	r25, r24
    14f6:	95 70       	andi	r25, 0x05	; 5
    14f8:	e1 f3       	breq	.-8      	; 0x14f2 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    14fa:	82 fd       	sbrc	r24, 2
    14fc:	00 c1       	rjmp	.+512    	; 0x16fe <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    14fe:	64 2f       	mov	r22, r20
    1500:	41 31       	cpi	r20, 0x11	; 17
    1502:	08 f0       	brcs	.+2      	; 0x1506 <__vector_11+0xee>
    1504:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1506:	66 23       	and	r22, r22
    1508:	09 f4       	brne	.+2      	; 0x150c <__vector_11+0xf4>
    150a:	f6 c0       	rjmp	.+492    	; 0x16f8 <__vector_11+0x2e0>
    150c:	c9 01       	movw	r24, r18
    150e:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    1510:	fc 01       	movw	r30, r24
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	e4 91       	lpm	r30, Z
    1516:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1518:	51 50       	subi	r21, 0x01	; 1
    151a:	d1 f7       	brne	.-12     	; 0x1510 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    151c:	86 2f       	mov	r24, r22
    151e:	81 50       	subi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	28 0f       	add	r18, r24
    1526:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1528:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    152a:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    152c:	41 11       	cpse	r20, r1
    152e:	e1 cf       	rjmp	.-62     	; 0x14f2 <__vector_11+0xda>
    1530:	60 31       	cpi	r22, 0x10	; 16
    1532:	f9 f2       	breq	.-66     	; 0x14f2 <__vector_11+0xda>
    1534:	e4 c0       	rjmp	.+456    	; 0x16fe <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1536:	45 30       	cpi	r20, 0x05	; 5
    1538:	61 f4       	brne	.+24     	; 0x1552 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    153a:	8e ef       	ldi	r24, 0xFE	; 254
    153c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1540:	e8 ee       	ldi	r30, 0xE8	; 232
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 ff       	sbrs	r24, 0
    1548:	fd cf       	rjmp	.-6      	; 0x1544 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    154a:	20 68       	ori	r18, 0x80	; 128
    154c:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1550:	d6 c0       	rjmp	.+428    	; 0x16fe <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1552:	49 30       	cpi	r20, 0x09	; 9
    1554:	a1 f5       	brne	.+104    	; 0x15be <__vector_11+0x1a6>
    1556:	71 11       	cpse	r23, r1
    1558:	5b c0       	rjmp	.+182    	; 0x1610 <__vector_11+0x1f8>
			usb_configuration = wValue;
    155a:	20 93 5d 01 	sts	0x015D, r18
			cdc_line_rtsdtr = 0;
    155e:	10 92 5e 01 	sts	0x015E, r1
			transmit_flush_timer = 0;
    1562:	10 92 5c 01 	sts	0x015C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1566:	8e ef       	ldi	r24, 0xFE	; 254
    1568:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    156c:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    156e:	81 e2       	ldi	r24, 0x21	; 33
    1570:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1572:	c9 ee       	ldi	r28, 0xE9	; 233
    1574:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1576:	ab ee       	ldi	r26, 0xEB	; 235
    1578:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    157a:	6c ee       	ldi	r22, 0xEC	; 236
    157c:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    157e:	4d ee       	ldi	r20, 0xED	; 237
    1580:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1582:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1584:	9c 01       	movw	r18, r24
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	fc 01       	movw	r30, r24
    158c:	04 91       	lpm	r16, Z
				UECONX = en;
    158e:	0c 93       	st	X, r16
				if (en) {
    1590:	00 23       	and	r16, r16
    1592:	59 f0       	breq	.+22     	; 0x15aa <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1594:	f9 01       	movw	r30, r18
    1596:	24 91       	lpm	r18, Z
    1598:	fb 01       	movw	r30, r22
    159a:	20 83       	st	Z, r18
    159c:	fc 01       	movw	r30, r24
    159e:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    15a0:	03 96       	adiw	r24, 0x03	; 3
    15a2:	24 91       	lpm	r18, Z
    15a4:	fa 01       	movw	r30, r20
    15a6:	20 83       	st	Z, r18
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    15aa:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    15ac:	1f 5f       	subi	r17, 0xFF	; 255
    15ae:	15 30       	cpi	r17, 0x05	; 5
    15b0:	41 f7       	brne	.-48     	; 0x1582 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    15b2:	ea ee       	ldi	r30, 0xEA	; 234
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8e e1       	ldi	r24, 0x1E	; 30
    15b8:	80 83       	st	Z, r24
        		UERST = 0;
    15ba:	10 82       	st	Z, r1
			return;
    15bc:	a0 c0       	rjmp	.+320    	; 0x16fe <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    15be:	48 30       	cpi	r20, 0x08	; 8
    15c0:	81 f4       	brne	.+32     	; 0x15e2 <__vector_11+0x1ca>
    15c2:	70 38       	cpi	r23, 0x80	; 128
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <__vector_11+0x1b0>
    15c6:	3f c0       	rjmp	.+126    	; 0x1646 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    15c8:	e8 ee       	ldi	r30, 0xE8	; 232
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 ff       	sbrs	r24, 0
    15d0:	fd cf       	rjmp	.-6      	; 0x15cc <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    15d2:	80 91 5d 01 	lds	r24, 0x015D
    15d6:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    15da:	8e ef       	ldi	r24, 0xFE	; 254
    15dc:	80 93 e8 00 	sts	0x00E8, r24
    15e0:	8e c0       	rjmp	.+284    	; 0x16fe <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    15e2:	41 32       	cpi	r20, 0x21	; 33
    15e4:	a9 f4       	brne	.+42     	; 0x1610 <__vector_11+0x1f8>
    15e6:	71 3a       	cpi	r23, 0xA1	; 161
    15e8:	f1 f5       	brne	.+124    	; 0x1666 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    15ea:	e8 ee       	ldi	r30, 0xE8	; 232
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 ff       	sbrs	r24, 0
    15f2:	fd cf       	rjmp	.-6      	; 0x15ee <__vector_11+0x1d6>
    15f4:	ec e0       	ldi	r30, 0x0C	; 12
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    15f8:	a1 ef       	ldi	r26, 0xF1	; 241
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	81 91       	ld	r24, Z+
    15fe:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	e3 31       	cpi	r30, 0x13	; 19
    1604:	f4 07       	cpc	r31, r20
    1606:	d1 f7       	brne	.-12     	; 0x15fc <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1608:	8e ef       	ldi	r24, 0xFE	; 254
    160a:	80 93 e8 00 	sts	0x00E8, r24
    160e:	77 c0       	rjmp	.+238    	; 0x16fe <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1610:	40 32       	cpi	r20, 0x20	; 32
    1612:	c9 f4       	brne	.+50     	; 0x1646 <__vector_11+0x22e>
    1614:	71 32       	cpi	r23, 0x21	; 33
    1616:	09 f0       	breq	.+2      	; 0x161a <__vector_11+0x202>
    1618:	6b c0       	rjmp	.+214    	; 0x16f0 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    161a:	e8 ee       	ldi	r30, 0xE8	; 232
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	82 ff       	sbrs	r24, 2
    1622:	fd cf       	rjmp	.-6      	; 0x161e <__vector_11+0x206>
    1624:	ec e0       	ldi	r30, 0x0C	; 12
    1626:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1628:	a1 ef       	ldi	r26, 0xF1	; 241
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	8c 91       	ld	r24, X
    162e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1630:	51 e0       	ldi	r21, 0x01	; 1
    1632:	e3 31       	cpi	r30, 0x13	; 19
    1634:	f5 07       	cpc	r31, r21
    1636:	d1 f7       	brne	.-12     	; 0x162c <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1638:	e8 ee       	ldi	r30, 0xE8	; 232
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8b ef       	ldi	r24, 0xFB	; 251
    163e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1640:	8e ef       	ldi	r24, 0xFE	; 254
    1642:	80 83       	st	Z, r24
    1644:	5c c0       	rjmp	.+184    	; 0x16fe <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1646:	42 32       	cpi	r20, 0x22	; 34
    1648:	71 f4       	brne	.+28     	; 0x1666 <__vector_11+0x24e>
    164a:	71 32       	cpi	r23, 0x21	; 33
    164c:	09 f0       	breq	.+2      	; 0x1650 <__vector_11+0x238>
    164e:	50 c0       	rjmp	.+160    	; 0x16f0 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1650:	20 93 5e 01 	sts	0x015E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1654:	e8 ee       	ldi	r30, 0xE8	; 232
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 ff       	sbrs	r24, 0
    165c:	fd cf       	rjmp	.-6      	; 0x1658 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    165e:	8e ef       	ldi	r24, 0xFE	; 254
    1660:	80 93 e8 00 	sts	0x00E8, r24
    1664:	4c c0       	rjmp	.+152    	; 0x16fe <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1666:	41 11       	cpse	r20, r1
    1668:	1a c0       	rjmp	.+52     	; 0x169e <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    166a:	e8 ee       	ldi	r30, 0xE8	; 232
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	20 81       	ld	r18, Z
    1670:	20 ff       	sbrs	r18, 0
    1672:	fd cf       	rjmp	.-6      	; 0x166e <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1674:	72 38       	cpi	r23, 0x82	; 130
    1676:	51 f4       	brne	.+20     	; 0x168c <__vector_11+0x274>
				UENUM = wIndex;
    1678:	e9 ee       	ldi	r30, 0xE9	; 233
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    167e:	80 91 eb 00 	lds	r24, 0x00EB
    1682:	85 fb       	bst	r24, 5
    1684:	88 27       	eor	r24, r24
    1686:	80 f9       	bld	r24, 0
				UENUM = 0;
    1688:	10 82       	st	Z, r1
    168a:	01 c0       	rjmp	.+2      	; 0x168e <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    168c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    168e:	e1 ef       	ldi	r30, 0xF1	; 241
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 83       	st	Z, r24
			UEDATX = 0;
    1694:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1696:	8e ef       	ldi	r24, 0xFE	; 254
    1698:	80 93 e8 00 	sts	0x00E8, r24
    169c:	30 c0       	rjmp	.+96     	; 0x16fe <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    169e:	41 30       	cpi	r20, 0x01	; 1
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <__vector_11+0x28e>
    16a2:	43 30       	cpi	r20, 0x03	; 3
    16a4:	29 f5       	brne	.+74     	; 0x16f0 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    16a6:	72 30       	cpi	r23, 0x02	; 2
    16a8:	19 f5       	brne	.+70     	; 0x16f0 <__vector_11+0x2d8>
    16aa:	23 2b       	or	r18, r19
    16ac:	09 f5       	brne	.+66     	; 0x16f0 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    16ae:	8f 77       	andi	r24, 0x7F	; 127
    16b0:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    16b2:	38 2f       	mov	r19, r24
    16b4:	31 50       	subi	r19, 0x01	; 1
    16b6:	34 30       	cpi	r19, 0x04	; 4
    16b8:	d8 f4       	brcc	.+54     	; 0x16f0 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    16ba:	3e ef       	ldi	r19, 0xFE	; 254
    16bc:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    16c0:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    16c4:	43 30       	cpi	r20, 0x03	; 3
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    16c8:	81 e2       	ldi	r24, 0x21	; 33
    16ca:	80 93 eb 00 	sts	0x00EB, r24
    16ce:	17 c0       	rjmp	.+46     	; 0x16fe <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    16d0:	99 e1       	ldi	r25, 0x19	; 25
    16d2:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	d9 01       	movw	r26, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <__vector_11+0x2ca>
    16de:	aa 0f       	add	r26, r26
    16e0:	bb 1f       	adc	r27, r27
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <__vector_11+0x2c6>
    16e6:	ea ee       	ldi	r30, 0xEA	; 234
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	a0 83       	st	Z, r26
					UERST = 0;
    16ec:	10 82       	st	Z, r1
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    16f0:	81 e2       	ldi	r24, 0x21	; 33
    16f2:	80 93 eb 00 	sts	0x00EB, r24
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    16f8:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    16fa:	41 11       	cpse	r20, r1
    16fc:	fa ce       	rjmp	.-524    	; 0x14f2 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    172c:	ec eb       	ldi	r30, 0xBC	; 188
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	34 f0       	brlt	.+12     	; 0x1742 <twi_wait+0x1a>
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	29 3e       	cpi	r18, 0xE9	; 233
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	38 07       	cpc	r19, r24
    1740:	b9 f7       	brne	.-18     	; 0x1730 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	28 3e       	cpi	r18, 0xE8	; 232
    1746:	33 40       	sbci	r19, 0x03	; 3
    1748:	09 f4       	brne	.+2      	; 0x174c <twi_wait+0x24>
    174a:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    174c:	08 95       	ret

0000174e <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    174e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1752:	84 e8       	ldi	r24, 0x84	; 132
    1754:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1758:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_wait>
    175c:	88 23       	and	r24, r24
    175e:	21 f0       	breq	.+8      	; 0x1768 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1760:	80 91 b9 00 	lds	r24, 0x00B9
    1764:	88 7f       	andi	r24, 0xF8	; 248
    1766:	08 95       	ret
	} else {
		return 0;					// comm failure
    1768:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    176a:	08 95       	ret

0000176c <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    176c:	cf 93       	push	r28
    176e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1770:	94 ea       	ldi	r25, 0xA4	; 164
    1772:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1776:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_wait>
    177a:	88 23       	and	r24, r24
    177c:	61 f0       	breq	.+24     	; 0x1796 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    177e:	8c 2f       	mov	r24, r28
    1780:	88 0f       	add	r24, r24
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1788:	88 34       	cpi	r24, 0x48	; 72
    178a:	39 f4       	brne	.+14     	; 0x179a <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    178c:	84 e9       	ldi	r24, 0x94	; 148
    178e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	03 c0       	rjmp	.+6      	; 0x179c <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	01 c0       	rjmp	.+2      	; 0x179c <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    179a:	81 e0       	ldi	r24, 0x01	; 1
}	
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    17a0:	cf 93       	push	r28
    17a2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    17a4:	94 ea       	ldi	r25, 0xA4	; 164
    17a6:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    17aa:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_wait>
    17ae:	88 23       	and	r24, r24
    17b0:	59 f0       	breq	.+22     	; 0x17c8 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    17b2:	8c 2f       	mov	r24, r28
    17b4:	88 0f       	add	r24, r24
    17b6:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    17ba:	80 32       	cpi	r24, 0x20	; 32
    17bc:	39 f4       	brne	.+14     	; 0x17cc <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    17be:	84 e9       	ldi	r24, 0x94	; 148
    17c0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    17cc:	81 e0       	ldi	r24, 0x01	; 1
}	
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17d2:	84 e9       	ldi	r24, 0x94	; 148
    17d4:	80 93 bc 00 	sts	0x00BC, r24
    17d8:	08 95       	ret

000017da <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	60 97       	sbiw	r28, 0x10	; 16
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	e8 2e       	mov	r14, r24
    17f8:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    17fa:	fe 01       	movw	r30, r28
    17fc:	31 96       	adiw	r30, 0x01	; 1
    17fe:	80 e1       	ldi	r24, 0x10	; 16
    1800:	df 01       	movw	r26, r30
    1802:	1d 92       	st	X+, r1
    1804:	8a 95       	dec	r24
    1806:	e9 f7       	brne	.-6      	; 0x1802 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1808:	88 e5       	ldi	r24, 0x58	; 88
    180a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <m_wii_read+0x3a>
    1812:	66 c0       	rjmp	.+204    	; 0x18e0 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1814:	86 e3       	ldi	r24, 0x36	; 54
    1816:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <m_wii_read+0x46>
    181e:	62 c0       	rjmp	.+196    	; 0x18e4 <m_wii_read+0x10a>
	end();
    1820:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1824:	b8 e0       	ldi	r27, 0x08	; 8
    1826:	ba 95       	dec	r27
    1828:	f1 f7       	brne	.-4      	; 0x1826 <m_wii_read+0x4c>
    182a:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    182c:	88 e5       	ldi	r24, 0x58	; 88
    182e:	0e 94 b6 0b 	call	0x176c	; 0x176c <start_read>
    1832:	88 23       	and	r24, r24
    1834:	09 f4       	brne	.+2      	; 0x1838 <m_wii_read+0x5e>
    1836:	58 c0       	rjmp	.+176    	; 0x18e8 <m_wii_read+0x10e>
    1838:	ae 01       	movw	r20, r28
    183a:	4f 5f       	subi	r20, 0xFF	; 255
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    183e:	8e 01       	movw	r16, r28
    1840:	00 5f       	subi	r16, 0xF0	; 240
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1844:	ec eb       	ldi	r30, 0xBC	; 188
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    184a:	2b eb       	ldi	r18, 0xBB	; 187
    184c:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    184e:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1850:	80 81       	ld	r24, Z
    1852:	88 23       	and	r24, r24
    1854:	ec f7       	brge	.-6      	; 0x1850 <m_wii_read+0x76>
		temp[i] = TWDR;
    1856:	d9 01       	movw	r26, r18
    1858:	8c 91       	ld	r24, X
    185a:	da 01       	movw	r26, r20
    185c:	8d 93       	st	X+, r24
    185e:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1860:	a0 17       	cp	r26, r16
    1862:	b1 07       	cpc	r27, r17
    1864:	a1 f7       	brne	.-24     	; 0x184e <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1866:	84 e8       	ldi	r24, 0x84	; 132
    1868:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    186c:	ec eb       	ldi	r30, 0xBC	; 188
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 23       	and	r24, r24
    1874:	ec f7       	brge	.-6      	; 0x1870 <m_wii_read+0x96>
	temp[15] = TWDR;
    1876:	80 91 bb 00 	lds	r24, 0x00BB
    187a:	88 8b       	std	Y+16, r24	; 0x10
	end();
    187c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
    1880:	de 01       	movw	r26, r28
    1882:	14 96       	adiw	r26, 0x04	; 4
    1884:	6e 2d       	mov	r22, r14
    1886:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1888:	4c 91       	ld	r20, X
    188a:	24 2f       	mov	r18, r20
    188c:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    188e:	cd 01       	movw	r24, r26
    1890:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1892:	fc 01       	movw	r30, r24
    1894:	80 81       	ld	r24, Z
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	f0 e1       	ldi	r31, 0x10	; 16
    189a:	2f 9f       	mul	r18, r31
    189c:	80 0d       	add	r24, r0
    189e:	91 1d       	adc	r25, r1
    18a0:	11 24       	eor	r1, r1
    18a2:	fb 01       	movw	r30, r22
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    18a8:	84 2f       	mov	r24, r20
    18aa:	80 7c       	andi	r24, 0xC0	; 192
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    18b6:	9d 01       	movw	r18, r26
    18b8:	21 50       	subi	r18, 0x01	; 1
    18ba:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    18bc:	f9 01       	movw	r30, r18
    18be:	20 81       	ld	r18, Z
    18c0:	82 0f       	add	r24, r18
    18c2:	91 1d       	adc	r25, r1
    18c4:	fb 01       	movw	r30, r22
    18c6:	93 83       	std	Z+3, r25	; 0x03
    18c8:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    18ca:	4f 70       	andi	r20, 0x0F	; 15
    18cc:	44 83       	std	Z+4, r20	; 0x04
    18ce:	15 82       	std	Z+5, r1	; 0x05
    18d0:	13 96       	adiw	r26, 0x03	; 3
    18d2:	6a 5f       	subi	r22, 0xFA	; 250
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    18d6:	0a 17       	cp	r16, r26
    18d8:	1b 07       	cpc	r17, r27
    18da:	b1 f6       	brne	.-84     	; 0x1888 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    18e8:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    18ea:	60 96       	adiw	r28, 0x10	; 16
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	ff 90       	pop	r15
    1900:	ef 90       	pop	r14
    1902:	08 95       	ret

00001904 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1904:	0e 94 22 04 	call	0x844	; 0x844 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1908:	88 e5       	ldi	r24, 0x58	; 88
    190a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    190e:	88 23       	and	r24, r24
    1910:	09 f4       	brne	.+2      	; 0x1914 <m_wii_open+0x10>
    1912:	c7 c0       	rjmp	.+398    	; 0x1aa2 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1914:	80 e3       	ldi	r24, 0x30	; 48
    1916:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    191a:	88 23       	and	r24, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <m_wii_open+0x1c>
    191e:	c3 c0       	rjmp	.+390    	; 0x1aa6 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1926:	88 23       	and	r24, r24
    1928:	09 f4       	brne	.+2      	; 0x192c <m_wii_open+0x28>
    192a:	bf c0       	rjmp	.+382    	; 0x1aaa <m_wii_open+0x1a6>
	end();
    192c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1930:	83 ec       	ldi	r24, 0xC3	; 195
    1932:	99 e0       	ldi	r25, 0x09	; 9
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <m_wii_open+0x30>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <m_wii_open+0x36>
    193a:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    193c:	88 e5       	ldi	r24, 0x58	; 88
    193e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    1942:	88 23       	and	r24, r24
    1944:	09 f4       	brne	.+2      	; 0x1948 <m_wii_open+0x44>
    1946:	b3 c0       	rjmp	.+358    	; 0x1aae <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    194e:	88 23       	and	r24, r24
    1950:	09 f4       	brne	.+2      	; 0x1954 <m_wii_open+0x50>
    1952:	af c0       	rjmp	.+350    	; 0x1ab2 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    195a:	88 23       	and	r24, r24
    195c:	09 f4       	brne	.+2      	; 0x1960 <m_wii_open+0x5c>
    195e:	ab c0       	rjmp	.+342    	; 0x1ab6 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1966:	88 23       	and	r24, r24
    1968:	09 f4       	brne	.+2      	; 0x196c <m_wii_open+0x68>
    196a:	a7 c0       	rjmp	.+334    	; 0x1aba <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <m_wii_open+0x74>
    1976:	a3 c0       	rjmp	.+326    	; 0x1abe <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <m_wii_open+0x80>
    1982:	9f c0       	rjmp	.+318    	; 0x1ac2 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    198a:	88 23       	and	r24, r24
    198c:	09 f4       	brne	.+2      	; 0x1990 <m_wii_open+0x8c>
    198e:	9b c0       	rjmp	.+310    	; 0x1ac6 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <m_wii_open+0x98>
    199a:	97 c0       	rjmp	.+302    	; 0x1aca <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    199c:	80 e9       	ldi	r24, 0x90	; 144
    199e:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    19a2:	88 23       	and	r24, r24
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <m_wii_open+0xa4>
    19a6:	93 c0       	rjmp	.+294    	; 0x1ace <m_wii_open+0x1ca>
	end();
    19a8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
    19ac:	83 ec       	ldi	r24, 0xC3	; 195
    19ae:	99 e0       	ldi	r25, 0x09	; 9
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <m_wii_open+0xac>
    19b4:	00 c0       	rjmp	.+0      	; 0x19b6 <m_wii_open+0xb2>
    19b6:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    19b8:	88 e5       	ldi	r24, 0x58	; 88
    19ba:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    19be:	88 23       	and	r24, r24
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <m_wii_open+0xc0>
    19c2:	87 c0       	rjmp	.+270    	; 0x1ad2 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    19c4:	87 e0       	ldi	r24, 0x07	; 7
    19c6:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    19ca:	88 23       	and	r24, r24
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <m_wii_open+0xcc>
    19ce:	83 c0       	rjmp	.+262    	; 0x1ad6 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    19d6:	88 23       	and	r24, r24
    19d8:	09 f4       	brne	.+2      	; 0x19dc <m_wii_open+0xd8>
    19da:	7f c0       	rjmp	.+254    	; 0x1ada <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    19dc:	81 e4       	ldi	r24, 0x41	; 65
    19de:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    19e2:	88 23       	and	r24, r24
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <m_wii_open+0xe4>
    19e6:	7b c0       	rjmp	.+246    	; 0x1ade <m_wii_open+0x1da>
	end();
    19e8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
    19ec:	83 ec       	ldi	r24, 0xC3	; 195
    19ee:	99 e0       	ldi	r25, 0x09	; 9
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <m_wii_open+0xec>
    19f4:	00 c0       	rjmp	.+0      	; 0x19f6 <m_wii_open+0xf2>
    19f6:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    19f8:	88 e5       	ldi	r24, 0x58	; 88
    19fa:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    19fe:	88 23       	and	r24, r24
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <m_wii_open+0x100>
    1a02:	6f c0       	rjmp	.+222    	; 0x1ae2 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1a04:	8a e1       	ldi	r24, 0x1A	; 26
    1a06:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a0a:	88 23       	and	r24, r24
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <m_wii_open+0x10c>
    1a0e:	6b c0       	rjmp	.+214    	; 0x1ae6 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1a10:	80 e4       	ldi	r24, 0x40	; 64
    1a12:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <m_wii_open+0x118>
    1a1a:	67 c0       	rjmp	.+206    	; 0x1aea <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a22:	88 23       	and	r24, r24
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <m_wii_open+0x124>
    1a26:	63 c0       	rjmp	.+198    	; 0x1aee <m_wii_open+0x1ea>
	end();
    1a28:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
    1a2c:	83 ec       	ldi	r24, 0xC3	; 195
    1a2e:	99 e0       	ldi	r25, 0x09	; 9
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <m_wii_open+0x12c>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <m_wii_open+0x132>
    1a36:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1a38:	88 e5       	ldi	r24, 0x58	; 88
    1a3a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <m_wii_open+0x140>
    1a42:	57 c0       	rjmp	.+174    	; 0x1af2 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1a44:	83 e3       	ldi	r24, 0x33	; 51
    1a46:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <m_wii_open+0x14c>
    1a4e:	53 c0       	rjmp	.+166    	; 0x1af6 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a56:	88 23       	and	r24, r24
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <m_wii_open+0x158>
    1a5a:	4f c0       	rjmp	.+158    	; 0x1afa <m_wii_open+0x1f6>
	end();
    1a5c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
    1a60:	83 ec       	ldi	r24, 0xC3	; 195
    1a62:	99 e0       	ldi	r25, 0x09	; 9
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <m_wii_open+0x160>
    1a68:	00 c0       	rjmp	.+0      	; 0x1a6a <m_wii_open+0x166>
    1a6a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1a6c:	88 e5       	ldi	r24, 0x58	; 88
    1a6e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <start_write>
    1a72:	88 23       	and	r24, r24
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <m_wii_open+0x174>
    1a76:	43 c0       	rjmp	.+134    	; 0x1afe <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1a78:	80 e3       	ldi	r24, 0x30	; 48
    1a7a:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a7e:	88 23       	and	r24, r24
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <m_wii_open+0x180>
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1a84:	88 e0       	ldi	r24, 0x08	; 8
    1a86:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    1a8a:	88 23       	and	r24, r24
    1a8c:	e1 f1       	breq	.+120    	; 0x1b06 <m_wii_open+0x202>
	end();
    1a8e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <end>
    1a92:	83 ec       	ldi	r24, 0xC3	; 195
    1a94:	99 e0       	ldi	r25, 0x09	; 9
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <m_wii_open+0x192>
    1a9a:	00 c0       	rjmp	.+0      	; 0x1a9c <m_wii_open+0x198>
    1a9c:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1b06:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1b08:	08 95       	ret

00001b0a <__subsf3>:
    1b0a:	50 58       	subi	r21, 0x80	; 128

00001b0c <__addsf3>:
    1b0c:	bb 27       	eor	r27, r27
    1b0e:	aa 27       	eor	r26, r26
    1b10:	0e d0       	rcall	.+28     	; 0x1b2e <__addsf3x>
    1b12:	f6 c1       	rjmp	.+1004   	; 0x1f00 <__fp_round>
    1b14:	bf d1       	rcall	.+894    	; 0x1e94 <__fp_pscA>
    1b16:	30 f0       	brcs	.+12     	; 0x1b24 <__addsf3+0x18>
    1b18:	c4 d1       	rcall	.+904    	; 0x1ea2 <__fp_pscB>
    1b1a:	20 f0       	brcs	.+8      	; 0x1b24 <__addsf3+0x18>
    1b1c:	31 f4       	brne	.+12     	; 0x1b2a <__addsf3+0x1e>
    1b1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <__addsf3+0x1a>
    1b22:	1e f4       	brtc	.+6      	; 0x1b2a <__addsf3+0x1e>
    1b24:	8f c1       	rjmp	.+798    	; 0x1e44 <__fp_nan>
    1b26:	0e f4       	brtc	.+2      	; 0x1b2a <__addsf3+0x1e>
    1b28:	e0 95       	com	r30
    1b2a:	e7 fb       	bst	r30, 7
    1b2c:	85 c1       	rjmp	.+778    	; 0x1e38 <__fp_inf>

00001b2e <__addsf3x>:
    1b2e:	e9 2f       	mov	r30, r25
    1b30:	09 d2       	rcall	.+1042   	; 0x1f44 <__fp_split3>
    1b32:	80 f3       	brcs	.-32     	; 0x1b14 <__addsf3+0x8>
    1b34:	ba 17       	cp	r27, r26
    1b36:	62 07       	cpc	r22, r18
    1b38:	73 07       	cpc	r23, r19
    1b3a:	84 07       	cpc	r24, r20
    1b3c:	95 07       	cpc	r25, r21
    1b3e:	18 f0       	brcs	.+6      	; 0x1b46 <__addsf3x+0x18>
    1b40:	71 f4       	brne	.+28     	; 0x1b5e <__addsf3x+0x30>
    1b42:	9e f5       	brtc	.+102    	; 0x1baa <__addsf3x+0x7c>
    1b44:	21 c2       	rjmp	.+1090   	; 0x1f88 <__fp_zero>
    1b46:	0e f4       	brtc	.+2      	; 0x1b4a <__addsf3x+0x1c>
    1b48:	e0 95       	com	r30
    1b4a:	0b 2e       	mov	r0, r27
    1b4c:	ba 2f       	mov	r27, r26
    1b4e:	a0 2d       	mov	r26, r0
    1b50:	0b 01       	movw	r0, r22
    1b52:	b9 01       	movw	r22, r18
    1b54:	90 01       	movw	r18, r0
    1b56:	0c 01       	movw	r0, r24
    1b58:	ca 01       	movw	r24, r20
    1b5a:	a0 01       	movw	r20, r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	ff 27       	eor	r31, r31
    1b60:	59 1b       	sub	r21, r25
    1b62:	99 f0       	breq	.+38     	; 0x1b8a <__addsf3x+0x5c>
    1b64:	59 3f       	cpi	r21, 0xF9	; 249
    1b66:	50 f4       	brcc	.+20     	; 0x1b7c <__addsf3x+0x4e>
    1b68:	50 3e       	cpi	r21, 0xE0	; 224
    1b6a:	68 f1       	brcs	.+90     	; 0x1bc6 <__addsf3x+0x98>
    1b6c:	1a 16       	cp	r1, r26
    1b6e:	f0 40       	sbci	r31, 0x00	; 0
    1b70:	a2 2f       	mov	r26, r18
    1b72:	23 2f       	mov	r18, r19
    1b74:	34 2f       	mov	r19, r20
    1b76:	44 27       	eor	r20, r20
    1b78:	58 5f       	subi	r21, 0xF8	; 248
    1b7a:	f3 cf       	rjmp	.-26     	; 0x1b62 <__addsf3x+0x34>
    1b7c:	46 95       	lsr	r20
    1b7e:	37 95       	ror	r19
    1b80:	27 95       	ror	r18
    1b82:	a7 95       	ror	r26
    1b84:	f0 40       	sbci	r31, 0x00	; 0
    1b86:	53 95       	inc	r21
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__addsf3x+0x4e>
    1b8a:	7e f4       	brtc	.+30     	; 0x1baa <__addsf3x+0x7c>
    1b8c:	1f 16       	cp	r1, r31
    1b8e:	ba 0b       	sbc	r27, r26
    1b90:	62 0b       	sbc	r22, r18
    1b92:	73 0b       	sbc	r23, r19
    1b94:	84 0b       	sbc	r24, r20
    1b96:	ba f0       	brmi	.+46     	; 0x1bc6 <__addsf3x+0x98>
    1b98:	91 50       	subi	r25, 0x01	; 1
    1b9a:	a1 f0       	breq	.+40     	; 0x1bc4 <__addsf3x+0x96>
    1b9c:	ff 0f       	add	r31, r31
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	66 1f       	adc	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	c2 f7       	brpl	.-16     	; 0x1b98 <__addsf3x+0x6a>
    1ba8:	0e c0       	rjmp	.+28     	; 0x1bc6 <__addsf3x+0x98>
    1baa:	ba 0f       	add	r27, r26
    1bac:	62 1f       	adc	r22, r18
    1bae:	73 1f       	adc	r23, r19
    1bb0:	84 1f       	adc	r24, r20
    1bb2:	48 f4       	brcc	.+18     	; 0x1bc6 <__addsf3x+0x98>
    1bb4:	87 95       	ror	r24
    1bb6:	77 95       	ror	r23
    1bb8:	67 95       	ror	r22
    1bba:	b7 95       	ror	r27
    1bbc:	f7 95       	ror	r31
    1bbe:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <__addsf3x+0x96>
    1bc2:	b3 cf       	rjmp	.-154    	; 0x1b2a <__addsf3+0x1e>
    1bc4:	93 95       	inc	r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <__addsf3x+0x9e>
    1bca:	99 27       	eor	r25, r25
    1bcc:	ee 0f       	add	r30, r30
    1bce:	97 95       	ror	r25
    1bd0:	87 95       	ror	r24
    1bd2:	08 95       	ret
    1bd4:	5f d1       	rcall	.+702    	; 0x1e94 <__fp_pscA>
    1bd6:	58 f0       	brcs	.+22     	; 0x1bee <__addsf3x+0xc0>
    1bd8:	80 e8       	ldi	r24, 0x80	; 128
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <__addsf3x+0xb2>
    1bde:	9e ef       	ldi	r25, 0xFE	; 254
    1be0:	60 d1       	rcall	.+704    	; 0x1ea2 <__fp_pscB>
    1be2:	28 f0       	brcs	.+10     	; 0x1bee <__addsf3x+0xc0>
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	51 e0       	ldi	r21, 0x01	; 1
    1be8:	59 f4       	brne	.+22     	; 0x1c00 <atan2+0xe>
    1bea:	5e ef       	ldi	r21, 0xFE	; 254
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <atan2+0xe>
    1bee:	2a c1       	rjmp	.+596    	; 0x1e44 <__fp_nan>
    1bf0:	cb c1       	rjmp	.+918    	; 0x1f88 <__fp_zero>

00001bf2 <atan2>:
    1bf2:	e9 2f       	mov	r30, r25
    1bf4:	e0 78       	andi	r30, 0x80	; 128
    1bf6:	a6 d1       	rcall	.+844    	; 0x1f44 <__fp_split3>
    1bf8:	68 f3       	brcs	.-38     	; 0x1bd4 <__addsf3x+0xa6>
    1bfa:	09 2e       	mov	r0, r25
    1bfc:	05 2a       	or	r0, r21
    1bfe:	c1 f3       	breq	.-16     	; 0x1bf0 <__addsf3x+0xc2>
    1c00:	26 17       	cp	r18, r22
    1c02:	37 07       	cpc	r19, r23
    1c04:	48 07       	cpc	r20, r24
    1c06:	59 07       	cpc	r21, r25
    1c08:	38 f0       	brcs	.+14     	; 0x1c18 <atan2+0x26>
    1c0a:	0e 2e       	mov	r0, r30
    1c0c:	07 f8       	bld	r0, 7
    1c0e:	e0 25       	eor	r30, r0
    1c10:	69 f0       	breq	.+26     	; 0x1c2c <atan2+0x3a>
    1c12:	e0 25       	eor	r30, r0
    1c14:	e0 64       	ori	r30, 0x40	; 64
    1c16:	0a c0       	rjmp	.+20     	; 0x1c2c <atan2+0x3a>
    1c18:	ef 63       	ori	r30, 0x3F	; 63
    1c1a:	07 f8       	bld	r0, 7
    1c1c:	00 94       	com	r0
    1c1e:	07 fa       	bst	r0, 7
    1c20:	db 01       	movw	r26, r22
    1c22:	b9 01       	movw	r22, r18
    1c24:	9d 01       	movw	r18, r26
    1c26:	dc 01       	movw	r26, r24
    1c28:	ca 01       	movw	r24, r20
    1c2a:	ad 01       	movw	r20, r26
    1c2c:	ef 93       	push	r30
    1c2e:	4a d0       	rcall	.+148    	; 0x1cc4 <__divsf3_pse>
    1c30:	67 d1       	rcall	.+718    	; 0x1f00 <__fp_round>
    1c32:	0a d0       	rcall	.+20     	; 0x1c48 <atan>
    1c34:	5f 91       	pop	r21
    1c36:	55 23       	and	r21, r21
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <atan2+0x54>
    1c3a:	2b ed       	ldi	r18, 0xDB	; 219
    1c3c:	3f e0       	ldi	r19, 0x0F	; 15
    1c3e:	49 e4       	ldi	r20, 0x49	; 73
    1c40:	50 fd       	sbrc	r21, 0
    1c42:	49 ec       	ldi	r20, 0xC9	; 201
    1c44:	63 cf       	rjmp	.-314    	; 0x1b0c <__addsf3>
    1c46:	08 95       	ret

00001c48 <atan>:
    1c48:	df 93       	push	r29
    1c4a:	dd 27       	eor	r29, r29
    1c4c:	b9 2f       	mov	r27, r25
    1c4e:	bf 77       	andi	r27, 0x7F	; 127
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	16 16       	cp	r1, r22
    1c56:	17 06       	cpc	r1, r23
    1c58:	48 07       	cpc	r20, r24
    1c5a:	5b 07       	cpc	r21, r27
    1c5c:	10 f4       	brcc	.+4      	; 0x1c62 <atan+0x1a>
    1c5e:	d9 2f       	mov	r29, r25
    1c60:	9e d1       	rcall	.+828    	; 0x1f9e <inverse>
    1c62:	9f 93       	push	r25
    1c64:	8f 93       	push	r24
    1c66:	7f 93       	push	r23
    1c68:	6f 93       	push	r22
    1c6a:	4b d2       	rcall	.+1174   	; 0x2102 <square>
    1c6c:	ec ea       	ldi	r30, 0xAC	; 172
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	ec d0       	rcall	.+472    	; 0x1e4a <__fp_powser>
    1c72:	46 d1       	rcall	.+652    	; 0x1f00 <__fp_round>
    1c74:	2f 91       	pop	r18
    1c76:	3f 91       	pop	r19
    1c78:	4f 91       	pop	r20
    1c7a:	5f 91       	pop	r21
    1c7c:	a3 d1       	rcall	.+838    	; 0x1fc4 <__mulsf3x>
    1c7e:	dd 23       	and	r29, r29
    1c80:	49 f0       	breq	.+18     	; 0x1c94 <atan+0x4c>
    1c82:	90 58       	subi	r25, 0x80	; 128
    1c84:	a2 ea       	ldi	r26, 0xA2	; 162
    1c86:	2a ed       	ldi	r18, 0xDA	; 218
    1c88:	3f e0       	ldi	r19, 0x0F	; 15
    1c8a:	49 ec       	ldi	r20, 0xC9	; 201
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	d0 78       	andi	r29, 0x80	; 128
    1c90:	5d 27       	eor	r21, r29
    1c92:	4d df       	rcall	.-358    	; 0x1b2e <__addsf3x>
    1c94:	df 91       	pop	r29
    1c96:	34 c1       	rjmp	.+616    	; 0x1f00 <__fp_round>

00001c98 <__cmpsf2>:
    1c98:	ab d0       	rcall	.+342    	; 0x1df0 <__fp_cmp>
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <__cmpsf2+0x6>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	08 95       	ret

00001ca0 <cos>:
    1ca0:	08 d1       	rcall	.+528    	; 0x1eb2 <__fp_rempio2>
    1ca2:	e3 95       	inc	r30
    1ca4:	3e c1       	rjmp	.+636    	; 0x1f22 <__fp_sinus>

00001ca6 <__divsf3>:
    1ca6:	0c d0       	rcall	.+24     	; 0x1cc0 <__divsf3x>
    1ca8:	2b c1       	rjmp	.+598    	; 0x1f00 <__fp_round>
    1caa:	fb d0       	rcall	.+502    	; 0x1ea2 <__fp_pscB>
    1cac:	40 f0       	brcs	.+16     	; 0x1cbe <__divsf3+0x18>
    1cae:	f2 d0       	rcall	.+484    	; 0x1e94 <__fp_pscA>
    1cb0:	30 f0       	brcs	.+12     	; 0x1cbe <__divsf3+0x18>
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <__divsf3+0x16>
    1cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb6:	19 f0       	breq	.+6      	; 0x1cbe <__divsf3+0x18>
    1cb8:	bf c0       	rjmp	.+382    	; 0x1e38 <__fp_inf>
    1cba:	51 11       	cpse	r21, r1
    1cbc:	66 c1       	rjmp	.+716    	; 0x1f8a <__fp_szero>
    1cbe:	c2 c0       	rjmp	.+388    	; 0x1e44 <__fp_nan>

00001cc0 <__divsf3x>:
    1cc0:	41 d1       	rcall	.+642    	; 0x1f44 <__fp_split3>
    1cc2:	98 f3       	brcs	.-26     	; 0x1caa <__divsf3+0x4>

00001cc4 <__divsf3_pse>:
    1cc4:	99 23       	and	r25, r25
    1cc6:	c9 f3       	breq	.-14     	; 0x1cba <__divsf3+0x14>
    1cc8:	55 23       	and	r21, r21
    1cca:	b1 f3       	breq	.-20     	; 0x1cb8 <__divsf3+0x12>
    1ccc:	95 1b       	sub	r25, r21
    1cce:	55 0b       	sbc	r21, r21
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	aa 27       	eor	r26, r26
    1cd4:	62 17       	cp	r22, r18
    1cd6:	73 07       	cpc	r23, r19
    1cd8:	84 07       	cpc	r24, r20
    1cda:	38 f0       	brcs	.+14     	; 0x1cea <__divsf3_pse+0x26>
    1cdc:	9f 5f       	subi	r25, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	44 1f       	adc	r20, r20
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	a9 f3       	breq	.-22     	; 0x1cd4 <__divsf3_pse+0x10>
    1cea:	33 d0       	rcall	.+102    	; 0x1d52 <__divsf3_pse+0x8e>
    1cec:	0e 2e       	mov	r0, r30
    1cee:	3a f0       	brmi	.+14     	; 0x1cfe <__divsf3_pse+0x3a>
    1cf0:	e0 e8       	ldi	r30, 0x80	; 128
    1cf2:	30 d0       	rcall	.+96     	; 0x1d54 <__divsf3_pse+0x90>
    1cf4:	91 50       	subi	r25, 0x01	; 1
    1cf6:	50 40       	sbci	r21, 0x00	; 0
    1cf8:	e6 95       	lsr	r30
    1cfa:	00 1c       	adc	r0, r0
    1cfc:	ca f7       	brpl	.-14     	; 0x1cf0 <__divsf3_pse+0x2c>
    1cfe:	29 d0       	rcall	.+82     	; 0x1d52 <__divsf3_pse+0x8e>
    1d00:	fe 2f       	mov	r31, r30
    1d02:	27 d0       	rcall	.+78     	; 0x1d52 <__divsf3_pse+0x8e>
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	26 17       	cp	r18, r22
    1d0e:	37 07       	cpc	r19, r23
    1d10:	48 07       	cpc	r20, r24
    1d12:	ab 07       	cpc	r26, r27
    1d14:	b0 e8       	ldi	r27, 0x80	; 128
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <__divsf3_pse+0x56>
    1d18:	bb 0b       	sbc	r27, r27
    1d1a:	80 2d       	mov	r24, r0
    1d1c:	bf 01       	movw	r22, r30
    1d1e:	ff 27       	eor	r31, r31
    1d20:	93 58       	subi	r25, 0x83	; 131
    1d22:	5f 4f       	sbci	r21, 0xFF	; 255
    1d24:	2a f0       	brmi	.+10     	; 0x1d30 <__divsf3_pse+0x6c>
    1d26:	9e 3f       	cpi	r25, 0xFE	; 254
    1d28:	51 05       	cpc	r21, r1
    1d2a:	68 f0       	brcs	.+26     	; 0x1d46 <__divsf3_pse+0x82>
    1d2c:	85 c0       	rjmp	.+266    	; 0x1e38 <__fp_inf>
    1d2e:	2d c1       	rjmp	.+602    	; 0x1f8a <__fp_szero>
    1d30:	5f 3f       	cpi	r21, 0xFF	; 255
    1d32:	ec f3       	brlt	.-6      	; 0x1d2e <__divsf3_pse+0x6a>
    1d34:	98 3e       	cpi	r25, 0xE8	; 232
    1d36:	dc f3       	brlt	.-10     	; 0x1d2e <__divsf3_pse+0x6a>
    1d38:	86 95       	lsr	r24
    1d3a:	77 95       	ror	r23
    1d3c:	67 95       	ror	r22
    1d3e:	b7 95       	ror	r27
    1d40:	f7 95       	ror	r31
    1d42:	9f 5f       	subi	r25, 0xFF	; 255
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <__divsf3_pse+0x74>
    1d46:	88 0f       	add	r24, r24
    1d48:	91 1d       	adc	r25, r1
    1d4a:	96 95       	lsr	r25
    1d4c:	87 95       	ror	r24
    1d4e:	97 f9       	bld	r25, 7
    1d50:	08 95       	ret
    1d52:	e1 e0       	ldi	r30, 0x01	; 1
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	62 17       	cp	r22, r18
    1d5e:	73 07       	cpc	r23, r19
    1d60:	84 07       	cpc	r24, r20
    1d62:	ba 07       	cpc	r27, r26
    1d64:	20 f0       	brcs	.+8      	; 0x1d6e <__divsf3_pse+0xaa>
    1d66:	62 1b       	sub	r22, r18
    1d68:	73 0b       	sbc	r23, r19
    1d6a:	84 0b       	sbc	r24, r20
    1d6c:	ba 0b       	sbc	r27, r26
    1d6e:	ee 1f       	adc	r30, r30
    1d70:	88 f7       	brcc	.-30     	; 0x1d54 <__divsf3_pse+0x90>
    1d72:	e0 95       	com	r30
    1d74:	08 95       	ret

00001d76 <__floatunsisf>:
    1d76:	e8 94       	clt
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <__floatsisf+0x12>

00001d7a <__floatsisf>:
    1d7a:	97 fb       	bst	r25, 7
    1d7c:	3e f4       	brtc	.+14     	; 0x1d8c <__floatsisf+0x12>
    1d7e:	90 95       	com	r25
    1d80:	80 95       	com	r24
    1d82:	70 95       	com	r23
    1d84:	61 95       	neg	r22
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	99 23       	and	r25, r25
    1d8e:	a9 f0       	breq	.+42     	; 0x1dba <__floatsisf+0x40>
    1d90:	f9 2f       	mov	r31, r25
    1d92:	96 e9       	ldi	r25, 0x96	; 150
    1d94:	bb 27       	eor	r27, r27
    1d96:	93 95       	inc	r25
    1d98:	f6 95       	lsr	r31
    1d9a:	87 95       	ror	r24
    1d9c:	77 95       	ror	r23
    1d9e:	67 95       	ror	r22
    1da0:	b7 95       	ror	r27
    1da2:	f1 11       	cpse	r31, r1
    1da4:	f8 cf       	rjmp	.-16     	; 0x1d96 <__floatsisf+0x1c>
    1da6:	fa f4       	brpl	.+62     	; 0x1de6 <__floatsisf+0x6c>
    1da8:	bb 0f       	add	r27, r27
    1daa:	11 f4       	brne	.+4      	; 0x1db0 <__floatsisf+0x36>
    1dac:	60 ff       	sbrs	r22, 0
    1dae:	1b c0       	rjmp	.+54     	; 0x1de6 <__floatsisf+0x6c>
    1db0:	6f 5f       	subi	r22, 0xFF	; 255
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	8f 4f       	sbci	r24, 0xFF	; 255
    1db6:	9f 4f       	sbci	r25, 0xFF	; 255
    1db8:	16 c0       	rjmp	.+44     	; 0x1de6 <__floatsisf+0x6c>
    1dba:	88 23       	and	r24, r24
    1dbc:	11 f0       	breq	.+4      	; 0x1dc2 <__floatsisf+0x48>
    1dbe:	96 e9       	ldi	r25, 0x96	; 150
    1dc0:	11 c0       	rjmp	.+34     	; 0x1de4 <__floatsisf+0x6a>
    1dc2:	77 23       	and	r23, r23
    1dc4:	21 f0       	breq	.+8      	; 0x1dce <__floatsisf+0x54>
    1dc6:	9e e8       	ldi	r25, 0x8E	; 142
    1dc8:	87 2f       	mov	r24, r23
    1dca:	76 2f       	mov	r23, r22
    1dcc:	05 c0       	rjmp	.+10     	; 0x1dd8 <__floatsisf+0x5e>
    1dce:	66 23       	and	r22, r22
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <__floatsisf+0x74>
    1dd2:	96 e8       	ldi	r25, 0x86	; 134
    1dd4:	86 2f       	mov	r24, r22
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	2a f0       	brmi	.+10     	; 0x1de6 <__floatsisf+0x6c>
    1ddc:	9a 95       	dec	r25
    1dde:	66 0f       	add	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	da f7       	brpl	.-10     	; 0x1ddc <__floatsisf+0x62>
    1de6:	88 0f       	add	r24, r24
    1de8:	96 95       	lsr	r25
    1dea:	87 95       	ror	r24
    1dec:	97 f9       	bld	r25, 7
    1dee:	08 95       	ret

00001df0 <__fp_cmp>:
    1df0:	99 0f       	add	r25, r25
    1df2:	00 08       	sbc	r0, r0
    1df4:	55 0f       	add	r21, r21
    1df6:	aa 0b       	sbc	r26, r26
    1df8:	e0 e8       	ldi	r30, 0x80	; 128
    1dfa:	fe ef       	ldi	r31, 0xFE	; 254
    1dfc:	16 16       	cp	r1, r22
    1dfe:	17 06       	cpc	r1, r23
    1e00:	e8 07       	cpc	r30, r24
    1e02:	f9 07       	cpc	r31, r25
    1e04:	c0 f0       	brcs	.+48     	; 0x1e36 <__fp_cmp+0x46>
    1e06:	12 16       	cp	r1, r18
    1e08:	13 06       	cpc	r1, r19
    1e0a:	e4 07       	cpc	r30, r20
    1e0c:	f5 07       	cpc	r31, r21
    1e0e:	98 f0       	brcs	.+38     	; 0x1e36 <__fp_cmp+0x46>
    1e10:	62 1b       	sub	r22, r18
    1e12:	73 0b       	sbc	r23, r19
    1e14:	84 0b       	sbc	r24, r20
    1e16:	95 0b       	sbc	r25, r21
    1e18:	39 f4       	brne	.+14     	; 0x1e28 <__fp_cmp+0x38>
    1e1a:	0a 26       	eor	r0, r26
    1e1c:	61 f0       	breq	.+24     	; 0x1e36 <__fp_cmp+0x46>
    1e1e:	23 2b       	or	r18, r19
    1e20:	24 2b       	or	r18, r20
    1e22:	25 2b       	or	r18, r21
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <__fp_cmp+0x3e>
    1e26:	08 95       	ret
    1e28:	0a 26       	eor	r0, r26
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <__fp_cmp+0x3e>
    1e2c:	a1 40       	sbci	r26, 0x01	; 1
    1e2e:	a6 95       	lsr	r26
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	81 1d       	adc	r24, r1
    1e34:	81 1d       	adc	r24, r1
    1e36:	08 95       	ret

00001e38 <__fp_inf>:
    1e38:	97 f9       	bld	r25, 7
    1e3a:	9f 67       	ori	r25, 0x7F	; 127
    1e3c:	80 e8       	ldi	r24, 0x80	; 128
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	08 95       	ret

00001e44 <__fp_nan>:
    1e44:	9f ef       	ldi	r25, 0xFF	; 255
    1e46:	80 ec       	ldi	r24, 0xC0	; 192
    1e48:	08 95       	ret

00001e4a <__fp_powser>:
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	1f 93       	push	r17
    1e50:	0f 93       	push	r16
    1e52:	ff 92       	push	r15
    1e54:	ef 92       	push	r14
    1e56:	df 92       	push	r13
    1e58:	7b 01       	movw	r14, r22
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	68 94       	set
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <__fp_powser+0x20>
    1e60:	da 2e       	mov	r13, r26
    1e62:	ef 01       	movw	r28, r30
    1e64:	af d0       	rcall	.+350    	; 0x1fc4 <__mulsf3x>
    1e66:	fe 01       	movw	r30, r28
    1e68:	e8 94       	clt
    1e6a:	a5 91       	lpm	r26, Z+
    1e6c:	25 91       	lpm	r18, Z+
    1e6e:	35 91       	lpm	r19, Z+
    1e70:	45 91       	lpm	r20, Z+
    1e72:	55 91       	lpm	r21, Z+
    1e74:	ae f3       	brts	.-22     	; 0x1e60 <__fp_powser+0x16>
    1e76:	ef 01       	movw	r28, r30
    1e78:	5a de       	rcall	.-844    	; 0x1b2e <__addsf3x>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	97 01       	movw	r18, r14
    1e7e:	a8 01       	movw	r20, r16
    1e80:	da 94       	dec	r13
    1e82:	79 f7       	brne	.-34     	; 0x1e62 <__fp_powser+0x18>
    1e84:	df 90       	pop	r13
    1e86:	ef 90       	pop	r14
    1e88:	ff 90       	pop	r15
    1e8a:	0f 91       	pop	r16
    1e8c:	1f 91       	pop	r17
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <__fp_pscA>:
    1e94:	00 24       	eor	r0, r0
    1e96:	0a 94       	dec	r0
    1e98:	16 16       	cp	r1, r22
    1e9a:	17 06       	cpc	r1, r23
    1e9c:	18 06       	cpc	r1, r24
    1e9e:	09 06       	cpc	r0, r25
    1ea0:	08 95       	ret

00001ea2 <__fp_pscB>:
    1ea2:	00 24       	eor	r0, r0
    1ea4:	0a 94       	dec	r0
    1ea6:	12 16       	cp	r1, r18
    1ea8:	13 06       	cpc	r1, r19
    1eaa:	14 06       	cpc	r1, r20
    1eac:	05 06       	cpc	r0, r21
    1eae:	08 95       	ret
    1eb0:	c9 cf       	rjmp	.-110    	; 0x1e44 <__fp_nan>

00001eb2 <__fp_rempio2>:
    1eb2:	50 d0       	rcall	.+160    	; 0x1f54 <__fp_splitA>
    1eb4:	e8 f3       	brcs	.-6      	; 0x1eb0 <__fp_pscB+0xe>
    1eb6:	e8 94       	clt
    1eb8:	e0 e0       	ldi	r30, 0x00	; 0
    1eba:	bb 27       	eor	r27, r27
    1ebc:	9f 57       	subi	r25, 0x7F	; 127
    1ebe:	f0 f0       	brcs	.+60     	; 0x1efc <__fp_rempio2+0x4a>
    1ec0:	2a ed       	ldi	r18, 0xDA	; 218
    1ec2:	3f e0       	ldi	r19, 0x0F	; 15
    1ec4:	49 ec       	ldi	r20, 0xC9	; 201
    1ec6:	06 c0       	rjmp	.+12     	; 0x1ed4 <__fp_rempio2+0x22>
    1ec8:	ee 0f       	add	r30, r30
    1eca:	bb 0f       	add	r27, r27
    1ecc:	66 1f       	adc	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	28 f0       	brcs	.+10     	; 0x1ede <__fp_rempio2+0x2c>
    1ed4:	b2 3a       	cpi	r27, 0xA2	; 162
    1ed6:	62 07       	cpc	r22, r18
    1ed8:	73 07       	cpc	r23, r19
    1eda:	84 07       	cpc	r24, r20
    1edc:	28 f0       	brcs	.+10     	; 0x1ee8 <__fp_rempio2+0x36>
    1ede:	b2 5a       	subi	r27, 0xA2	; 162
    1ee0:	62 0b       	sbc	r22, r18
    1ee2:	73 0b       	sbc	r23, r19
    1ee4:	84 0b       	sbc	r24, r20
    1ee6:	e3 95       	inc	r30
    1ee8:	9a 95       	dec	r25
    1eea:	72 f7       	brpl	.-36     	; 0x1ec8 <__fp_rempio2+0x16>
    1eec:	80 38       	cpi	r24, 0x80	; 128
    1eee:	30 f4       	brcc	.+12     	; 0x1efc <__fp_rempio2+0x4a>
    1ef0:	9a 95       	dec	r25
    1ef2:	bb 0f       	add	r27, r27
    1ef4:	66 1f       	adc	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	d2 f7       	brpl	.-12     	; 0x1ef0 <__fp_rempio2+0x3e>
    1efc:	90 48       	sbci	r25, 0x80	; 128
    1efe:	06 c1       	rjmp	.+524    	; 0x210c <__fp_mpack_finite>

00001f00 <__fp_round>:
    1f00:	09 2e       	mov	r0, r25
    1f02:	03 94       	inc	r0
    1f04:	00 0c       	add	r0, r0
    1f06:	11 f4       	brne	.+4      	; 0x1f0c <__fp_round+0xc>
    1f08:	88 23       	and	r24, r24
    1f0a:	52 f0       	brmi	.+20     	; 0x1f20 <__fp_round+0x20>
    1f0c:	bb 0f       	add	r27, r27
    1f0e:	40 f4       	brcc	.+16     	; 0x1f20 <__fp_round+0x20>
    1f10:	bf 2b       	or	r27, r31
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <__fp_round+0x18>
    1f14:	60 ff       	sbrs	r22, 0
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <__fp_round+0x20>
    1f18:	6f 5f       	subi	r22, 0xFF	; 255
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	08 95       	ret

00001f22 <__fp_sinus>:
    1f22:	ef 93       	push	r30
    1f24:	e0 ff       	sbrs	r30, 0
    1f26:	06 c0       	rjmp	.+12     	; 0x1f34 <__fp_sinus+0x12>
    1f28:	a2 ea       	ldi	r26, 0xA2	; 162
    1f2a:	2a ed       	ldi	r18, 0xDA	; 218
    1f2c:	3f e0       	ldi	r19, 0x0F	; 15
    1f2e:	49 ec       	ldi	r20, 0xC9	; 201
    1f30:	5f eb       	ldi	r21, 0xBF	; 191
    1f32:	fd dd       	rcall	.-1030   	; 0x1b2e <__addsf3x>
    1f34:	e5 df       	rcall	.-54     	; 0x1f00 <__fp_round>
    1f36:	0f 90       	pop	r0
    1f38:	03 94       	inc	r0
    1f3a:	01 fc       	sbrc	r0, 1
    1f3c:	90 58       	subi	r25, 0x80	; 128
    1f3e:	e9 ed       	ldi	r30, 0xD9	; 217
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	f7 c0       	rjmp	.+494    	; 0x2132 <__fp_powsodd>

00001f44 <__fp_split3>:
    1f44:	57 fd       	sbrc	r21, 7
    1f46:	90 58       	subi	r25, 0x80	; 128
    1f48:	44 0f       	add	r20, r20
    1f4a:	55 1f       	adc	r21, r21
    1f4c:	59 f0       	breq	.+22     	; 0x1f64 <__fp_splitA+0x10>
    1f4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f50:	71 f0       	breq	.+28     	; 0x1f6e <__fp_splitA+0x1a>
    1f52:	47 95       	ror	r20

00001f54 <__fp_splitA>:
    1f54:	88 0f       	add	r24, r24
    1f56:	97 fb       	bst	r25, 7
    1f58:	99 1f       	adc	r25, r25
    1f5a:	61 f0       	breq	.+24     	; 0x1f74 <__fp_splitA+0x20>
    1f5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f5e:	79 f0       	breq	.+30     	; 0x1f7e <__fp_splitA+0x2a>
    1f60:	87 95       	ror	r24
    1f62:	08 95       	ret
    1f64:	12 16       	cp	r1, r18
    1f66:	13 06       	cpc	r1, r19
    1f68:	14 06       	cpc	r1, r20
    1f6a:	55 1f       	adc	r21, r21
    1f6c:	f2 cf       	rjmp	.-28     	; 0x1f52 <__fp_split3+0xe>
    1f6e:	46 95       	lsr	r20
    1f70:	f1 df       	rcall	.-30     	; 0x1f54 <__fp_splitA>
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <__fp_splitA+0x30>
    1f74:	16 16       	cp	r1, r22
    1f76:	17 06       	cpc	r1, r23
    1f78:	18 06       	cpc	r1, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	f1 cf       	rjmp	.-30     	; 0x1f60 <__fp_splitA+0xc>
    1f7e:	86 95       	lsr	r24
    1f80:	71 05       	cpc	r23, r1
    1f82:	61 05       	cpc	r22, r1
    1f84:	08 94       	sec
    1f86:	08 95       	ret

00001f88 <__fp_zero>:
    1f88:	e8 94       	clt

00001f8a <__fp_szero>:
    1f8a:	bb 27       	eor	r27, r27
    1f8c:	66 27       	eor	r22, r22
    1f8e:	77 27       	eor	r23, r23
    1f90:	cb 01       	movw	r24, r22
    1f92:	97 f9       	bld	r25, 7
    1f94:	08 95       	ret

00001f96 <__gesf2>:
    1f96:	2c df       	rcall	.-424    	; 0x1df0 <__fp_cmp>
    1f98:	08 f4       	brcc	.+2      	; 0x1f9c <__gesf2+0x6>
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	08 95       	ret

00001f9e <inverse>:
    1f9e:	9b 01       	movw	r18, r22
    1fa0:	ac 01       	movw	r20, r24
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	80 e8       	ldi	r24, 0x80	; 128
    1fa8:	9f e3       	ldi	r25, 0x3F	; 63
    1faa:	7d ce       	rjmp	.-774    	; 0x1ca6 <__divsf3>

00001fac <__mulsf3>:
    1fac:	0b d0       	rcall	.+22     	; 0x1fc4 <__mulsf3x>
    1fae:	a8 cf       	rjmp	.-176    	; 0x1f00 <__fp_round>
    1fb0:	71 df       	rcall	.-286    	; 0x1e94 <__fp_pscA>
    1fb2:	28 f0       	brcs	.+10     	; 0x1fbe <__mulsf3+0x12>
    1fb4:	76 df       	rcall	.-276    	; 0x1ea2 <__fp_pscB>
    1fb6:	18 f0       	brcs	.+6      	; 0x1fbe <__mulsf3+0x12>
    1fb8:	95 23       	and	r25, r21
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <__mulsf3+0x12>
    1fbc:	3d cf       	rjmp	.-390    	; 0x1e38 <__fp_inf>
    1fbe:	42 cf       	rjmp	.-380    	; 0x1e44 <__fp_nan>
    1fc0:	11 24       	eor	r1, r1
    1fc2:	e3 cf       	rjmp	.-58     	; 0x1f8a <__fp_szero>

00001fc4 <__mulsf3x>:
    1fc4:	bf df       	rcall	.-130    	; 0x1f44 <__fp_split3>
    1fc6:	a0 f3       	brcs	.-24     	; 0x1fb0 <__mulsf3+0x4>

00001fc8 <__mulsf3_pse>:
    1fc8:	95 9f       	mul	r25, r21
    1fca:	d1 f3       	breq	.-12     	; 0x1fc0 <__mulsf3+0x14>
    1fcc:	95 0f       	add	r25, r21
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	55 1f       	adc	r21, r21
    1fd2:	62 9f       	mul	r22, r18
    1fd4:	f0 01       	movw	r30, r0
    1fd6:	72 9f       	mul	r23, r18
    1fd8:	bb 27       	eor	r27, r27
    1fda:	f0 0d       	add	r31, r0
    1fdc:	b1 1d       	adc	r27, r1
    1fde:	63 9f       	mul	r22, r19
    1fe0:	aa 27       	eor	r26, r26
    1fe2:	f0 0d       	add	r31, r0
    1fe4:	b1 1d       	adc	r27, r1
    1fe6:	aa 1f       	adc	r26, r26
    1fe8:	64 9f       	mul	r22, r20
    1fea:	66 27       	eor	r22, r22
    1fec:	b0 0d       	add	r27, r0
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	66 1f       	adc	r22, r22
    1ff2:	82 9f       	mul	r24, r18
    1ff4:	22 27       	eor	r18, r18
    1ff6:	b0 0d       	add	r27, r0
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	62 1f       	adc	r22, r18
    1ffc:	73 9f       	mul	r23, r19
    1ffe:	b0 0d       	add	r27, r0
    2000:	a1 1d       	adc	r26, r1
    2002:	62 1f       	adc	r22, r18
    2004:	83 9f       	mul	r24, r19
    2006:	a0 0d       	add	r26, r0
    2008:	61 1d       	adc	r22, r1
    200a:	22 1f       	adc	r18, r18
    200c:	74 9f       	mul	r23, r20
    200e:	33 27       	eor	r19, r19
    2010:	a0 0d       	add	r26, r0
    2012:	61 1d       	adc	r22, r1
    2014:	23 1f       	adc	r18, r19
    2016:	84 9f       	mul	r24, r20
    2018:	60 0d       	add	r22, r0
    201a:	21 1d       	adc	r18, r1
    201c:	82 2f       	mov	r24, r18
    201e:	76 2f       	mov	r23, r22
    2020:	6a 2f       	mov	r22, r26
    2022:	11 24       	eor	r1, r1
    2024:	9f 57       	subi	r25, 0x7F	; 127
    2026:	50 40       	sbci	r21, 0x00	; 0
    2028:	8a f0       	brmi	.+34     	; 0x204c <__mulsf3_pse+0x84>
    202a:	e1 f0       	breq	.+56     	; 0x2064 <__mulsf3_pse+0x9c>
    202c:	88 23       	and	r24, r24
    202e:	4a f0       	brmi	.+18     	; 0x2042 <__mulsf3_pse+0x7a>
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	bb 1f       	adc	r27, r27
    2036:	66 1f       	adc	r22, r22
    2038:	77 1f       	adc	r23, r23
    203a:	88 1f       	adc	r24, r24
    203c:	91 50       	subi	r25, 0x01	; 1
    203e:	50 40       	sbci	r21, 0x00	; 0
    2040:	a9 f7       	brne	.-22     	; 0x202c <__mulsf3_pse+0x64>
    2042:	9e 3f       	cpi	r25, 0xFE	; 254
    2044:	51 05       	cpc	r21, r1
    2046:	70 f0       	brcs	.+28     	; 0x2064 <__mulsf3_pse+0x9c>
    2048:	f7 ce       	rjmp	.-530    	; 0x1e38 <__fp_inf>
    204a:	9f cf       	rjmp	.-194    	; 0x1f8a <__fp_szero>
    204c:	5f 3f       	cpi	r21, 0xFF	; 255
    204e:	ec f3       	brlt	.-6      	; 0x204a <__mulsf3_pse+0x82>
    2050:	98 3e       	cpi	r25, 0xE8	; 232
    2052:	dc f3       	brlt	.-10     	; 0x204a <__mulsf3_pse+0x82>
    2054:	86 95       	lsr	r24
    2056:	77 95       	ror	r23
    2058:	67 95       	ror	r22
    205a:	b7 95       	ror	r27
    205c:	f7 95       	ror	r31
    205e:	e7 95       	ror	r30
    2060:	9f 5f       	subi	r25, 0xFF	; 255
    2062:	c1 f7       	brne	.-16     	; 0x2054 <__mulsf3_pse+0x8c>
    2064:	fe 2b       	or	r31, r30
    2066:	88 0f       	add	r24, r24
    2068:	91 1d       	adc	r25, r1
    206a:	96 95       	lsr	r25
    206c:	87 95       	ror	r24
    206e:	97 f9       	bld	r25, 7
    2070:	08 95       	ret

00002072 <sin>:
    2072:	9f 93       	push	r25
    2074:	1e df       	rcall	.-452    	; 0x1eb2 <__fp_rempio2>
    2076:	0f 90       	pop	r0
    2078:	07 fc       	sbrc	r0, 7
    207a:	ee 5f       	subi	r30, 0xFE	; 254
    207c:	52 cf       	rjmp	.-348    	; 0x1f22 <__fp_sinus>
    207e:	11 f4       	brne	.+4      	; 0x2084 <sin+0x12>
    2080:	0e f4       	brtc	.+2      	; 0x2084 <sin+0x12>
    2082:	e0 ce       	rjmp	.-576    	; 0x1e44 <__fp_nan>
    2084:	41 c0       	rjmp	.+130    	; 0x2108 <__fp_mpack>

00002086 <sqrt>:
    2086:	66 df       	rcall	.-308    	; 0x1f54 <__fp_splitA>
    2088:	d0 f3       	brcs	.-12     	; 0x207e <sin+0xc>
    208a:	99 23       	and	r25, r25
    208c:	d9 f3       	breq	.-10     	; 0x2084 <sin+0x12>
    208e:	ce f3       	brts	.-14     	; 0x2082 <sin+0x10>
    2090:	9f 57       	subi	r25, 0x7F	; 127
    2092:	55 0b       	sbc	r21, r21
    2094:	87 ff       	sbrs	r24, 7
    2096:	46 d0       	rcall	.+140    	; 0x2124 <__fp_norm2>
    2098:	00 24       	eor	r0, r0
    209a:	a0 e6       	ldi	r26, 0x60	; 96
    209c:	40 ea       	ldi	r20, 0xA0	; 160
    209e:	90 01       	movw	r18, r0
    20a0:	80 58       	subi	r24, 0x80	; 128
    20a2:	56 95       	lsr	r21
    20a4:	97 95       	ror	r25
    20a6:	28 f4       	brcc	.+10     	; 0x20b2 <sqrt+0x2c>
    20a8:	80 5c       	subi	r24, 0xC0	; 192
    20aa:	66 0f       	add	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	20 f0       	brcs	.+8      	; 0x20ba <sqrt+0x34>
    20b2:	26 17       	cp	r18, r22
    20b4:	37 07       	cpc	r19, r23
    20b6:	48 07       	cpc	r20, r24
    20b8:	30 f4       	brcc	.+12     	; 0x20c6 <sqrt+0x40>
    20ba:	62 1b       	sub	r22, r18
    20bc:	73 0b       	sbc	r23, r19
    20be:	84 0b       	sbc	r24, r20
    20c0:	20 29       	or	r18, r0
    20c2:	31 29       	or	r19, r1
    20c4:	4a 2b       	or	r20, r26
    20c6:	a6 95       	lsr	r26
    20c8:	17 94       	ror	r1
    20ca:	07 94       	ror	r0
    20cc:	20 25       	eor	r18, r0
    20ce:	31 25       	eor	r19, r1
    20d0:	4a 27       	eor	r20, r26
    20d2:	58 f7       	brcc	.-42     	; 0x20aa <sqrt+0x24>
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	88 1f       	adc	r24, r24
    20da:	20 f0       	brcs	.+8      	; 0x20e4 <sqrt+0x5e>
    20dc:	26 17       	cp	r18, r22
    20de:	37 07       	cpc	r19, r23
    20e0:	48 07       	cpc	r20, r24
    20e2:	30 f4       	brcc	.+12     	; 0x20f0 <sqrt+0x6a>
    20e4:	62 0b       	sbc	r22, r18
    20e6:	73 0b       	sbc	r23, r19
    20e8:	84 0b       	sbc	r24, r20
    20ea:	20 0d       	add	r18, r0
    20ec:	31 1d       	adc	r19, r1
    20ee:	41 1d       	adc	r20, r1
    20f0:	a0 95       	com	r26
    20f2:	81 f7       	brne	.-32     	; 0x20d4 <sqrt+0x4e>
    20f4:	b9 01       	movw	r22, r18
    20f6:	84 2f       	mov	r24, r20
    20f8:	91 58       	subi	r25, 0x81	; 129
    20fa:	88 0f       	add	r24, r24
    20fc:	96 95       	lsr	r25
    20fe:	87 95       	ror	r24
    2100:	08 95       	ret

00002102 <square>:
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	52 cf       	rjmp	.-348    	; 0x1fac <__mulsf3>

00002108 <__fp_mpack>:
    2108:	9f 3f       	cpi	r25, 0xFF	; 255
    210a:	31 f0       	breq	.+12     	; 0x2118 <__fp_mpack_finite+0xc>

0000210c <__fp_mpack_finite>:
    210c:	91 50       	subi	r25, 0x01	; 1
    210e:	20 f4       	brcc	.+8      	; 0x2118 <__fp_mpack_finite+0xc>
    2110:	87 95       	ror	r24
    2112:	77 95       	ror	r23
    2114:	67 95       	ror	r22
    2116:	b7 95       	ror	r27
    2118:	88 0f       	add	r24, r24
    211a:	91 1d       	adc	r25, r1
    211c:	96 95       	lsr	r25
    211e:	87 95       	ror	r24
    2120:	97 f9       	bld	r25, 7
    2122:	08 95       	ret

00002124 <__fp_norm2>:
    2124:	91 50       	subi	r25, 0x01	; 1
    2126:	50 40       	sbci	r21, 0x00	; 0
    2128:	66 0f       	add	r22, r22
    212a:	77 1f       	adc	r23, r23
    212c:	88 1f       	adc	r24, r24
    212e:	d2 f7       	brpl	.-12     	; 0x2124 <__fp_norm2>
    2130:	08 95       	ret

00002132 <__fp_powsodd>:
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	7f 93       	push	r23
    2138:	6f 93       	push	r22
    213a:	ff 93       	push	r31
    213c:	ef 93       	push	r30
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	34 df       	rcall	.-408    	; 0x1fac <__mulsf3>
    2144:	ef 91       	pop	r30
    2146:	ff 91       	pop	r31
    2148:	80 de       	rcall	.-768    	; 0x1e4a <__fp_powser>
    214a:	2f 91       	pop	r18
    214c:	3f 91       	pop	r19
    214e:	4f 91       	pop	r20
    2150:	5f 91       	pop	r21
    2152:	2c cf       	rjmp	.-424    	; 0x1fac <__mulsf3>

00002154 <__umulhisi3>:
    2154:	a2 9f       	mul	r26, r18
    2156:	b0 01       	movw	r22, r0
    2158:	b3 9f       	mul	r27, r19
    215a:	c0 01       	movw	r24, r0
    215c:	a3 9f       	mul	r26, r19
    215e:	01 d0       	rcall	.+2      	; 0x2162 <__umulhisi3+0xe>
    2160:	b2 9f       	mul	r27, r18
    2162:	70 0d       	add	r23, r0
    2164:	81 1d       	adc	r24, r1
    2166:	11 24       	eor	r1, r1
    2168:	91 1d       	adc	r25, r1
    216a:	08 95       	ret

0000216c <_exit>:
    216c:	f8 94       	cli

0000216e <__stop_program>:
    216e:	ff cf       	rjmp	.-2      	; 0x216e <__stop_program>
