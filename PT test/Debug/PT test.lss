
PT test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000896  0000092a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000932  2**0
                  ALLOC
  3 .stab         0000099c  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ed  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ed5  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000343  00000000  00000000  000025c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000653  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000348  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000044a  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018c9  00000000  00000000  000036ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00004fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_10>
  2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
  bc:	00 00 35 01 04 01 03 09 04 39 01 12 02 03 09 04     ..5......9......
  cc:	4d 01 06 03 03 09 04 55 01 08                       M......U..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
 149:	65 00 00 00                                         e...

0000014d <string2>:
 14d:	06 03 4d 00 32 00 00 00                             ..M.2...

00000155 <string3>:
 155:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e6 e9       	ldi	r30, 0x96	; 150
 174:	f8 e0       	ldi	r31, 0x08	; 8
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ac 30       	cpi	r26, 0x0C	; 12
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 85 03 	call	0x70a	; 0x70a <main>
 196:	0c 94 49 04 	jmp	0x892	; 0x892 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <m_usb_init>:
			case 54: UEDATX = *buffer++;
			case 53: UEDATX = *buffer++;
			case 52: UEDATX = *buffer++;
			case 51: UEDATX = *buffer++;
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 d7 00 	sts	0x00D7, r24
			case 48: UEDATX = *buffer++;
 1a4:	80 ea       	ldi	r24, 0xA0	; 160
 1a6:	80 93 d8 00 	sts	0x00D8, r24
 1aa:	82 e1       	ldi	r24, 0x12	; 18
			case 47: UEDATX = *buffer++;
 1ac:	89 bd       	out	0x29, r24	; 41
 1ae:	09 b4       	in	r0, 0x29	; 41
 1b0:	00 fe       	sbrs	r0, 0
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <m_usb_init+0x10>
 1b4:	80 e9       	ldi	r24, 0x90	; 144
			case 46: UEDATX = *buffer++;
 1b6:	80 93 d8 00 	sts	0x00D8, r24
 1ba:	10 92 e0 00 	sts	0x00E0, r1
 1be:	10 92 09 01 	sts	0x0109, r1
			case 45: UEDATX = *buffer++;
 1c2:	10 92 0a 01 	sts	0x010A, r1
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	80 93 e2 00 	sts	0x00E2, r24
			case 44: UEDATX = *buffer++;
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <m_usb_isconnected>:
 1d0:	80 91 09 01 	lds	r24, 0x0109
			case 43: UEDATX = *buffer++;
 1d4:	08 95       	ret

000001d6 <m_usb_rx_char>:
 1d6:	9f b7       	in	r25, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	80 91 09 01 	lds	r24, 0x0109
			case 42: UEDATX = *buffer++;
 1de:	81 11       	cpse	r24, r1
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <m_usb_rx_char+0x12>
 1e2:	9f bf       	out	0x3f, r25	; 63
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	08 95       	ret
			case 41: UEDATX = *buffer++;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	80 93 e9 00 	sts	0x00E9, r24
 1ee:	80 91 e8 00 	lds	r24, 0x00E8
			case 40: UEDATX = *buffer++;
 1f2:	85 fd       	sbrc	r24, 5
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <m_usb_rx_char+0x26>
 1f6:	9f bf       	out	0x3f, r25	; 63
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	08 95       	ret
			case 39: UEDATX = *buffer++;
 1fc:	80 91 f1 00 	lds	r24, 0x00F1
 200:	20 91 e8 00 	lds	r18, 0x00E8
 204:	25 fd       	sbrc	r18, 5
			case 38: UEDATX = *buffer++;
 206:	03 c0       	rjmp	.+6      	; 0x20e <m_usb_rx_char+0x38>
 208:	2b e6       	ldi	r18, 0x6B	; 107
 20a:	20 93 e8 00 	sts	0x00E8, r18
 20e:	9f bf       	out	0x3f, r25	; 63
			case 37: UEDATX = *buffer++;
 210:	08 95       	ret

00000212 <m_usb_rx_available>:
 212:	9f b7       	in	r25, 0x3f	; 63
 214:	f8 94       	cli
 216:	80 91 09 01 	lds	r24, 0x0109
			case 36: UEDATX = *buffer++;
 21a:	88 23       	and	r24, r24
 21c:	31 f0       	breq	.+12     	; 0x22a <m_usb_rx_available+0x18>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 e9 00 	sts	0x00E9, r24
			case 35: UEDATX = *buffer++;
 224:	80 91 f2 00 	lds	r24, 0x00F2
 228:	01 c0       	rjmp	.+2      	; 0x22c <m_usb_rx_available+0x1a>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	9f bf       	out	0x3f, r25	; 63
			case 34: UEDATX = *buffer++;
 22e:	08 95       	ret

00000230 <m_usb_rx_flush>:
 230:	80 91 09 01 	lds	r24, 0x0109
 234:	88 23       	and	r24, r24
 236:	89 f0       	breq	.+34     	; 0x25a <m_usb_rx_flush+0x2a>
			case 33: UEDATX = *buffer++;
 238:	2f b7       	in	r18, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	80 93 e9 00 	sts	0x00E9, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 242:	80 91 e8 00 	lds	r24, 0x00E8
 246:	85 ff       	sbrs	r24, 5
 248:	07 c0       	rjmp	.+14     	; 0x258 <m_usb_rx_flush+0x28>
 24a:	e8 ee       	ldi	r30, 0xE8	; 232
			case 31: UEDATX = *buffer++;
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	9b e6       	ldi	r25, 0x6B	; 107
 250:	90 83       	st	Z, r25
 252:	80 81       	ld	r24, Z
 254:	85 fd       	sbrc	r24, 5
			case 30: UEDATX = *buffer++;
 256:	fc cf       	rjmp	.-8      	; 0x250 <m_usb_rx_flush+0x20>
 258:	2f bf       	out	0x3f, r18	; 63
 25a:	08 95       	ret

0000025c <m_usb_tx_char>:
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
			case 29: UEDATX = *buffer++;
 260:	90 91 09 01 	lds	r25, 0x0109
 264:	99 23       	and	r25, r25
 266:	09 f4       	brne	.+2      	; 0x26a <m_usb_tx_char+0xe>
 268:	4d c0       	rjmp	.+154    	; 0x304 <m_usb_tx_char+0xa8>
			case 28: UEDATX = *buffer++;
 26a:	9f b7       	in	r25, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	24 e0       	ldi	r18, 0x04	; 4
 270:	20 93 e9 00 	sts	0x00E9, r18
			case 27: UEDATX = *buffer++;
 274:	20 91 0b 01 	lds	r18, 0x010B
 278:	22 23       	and	r18, r18
 27a:	49 f0       	breq	.+18     	; 0x28e <m_usb_tx_char+0x32>
 27c:	20 91 e8 00 	lds	r18, 0x00E8
			case 26: UEDATX = *buffer++;
 280:	25 fd       	sbrc	r18, 5
 282:	03 c0       	rjmp	.+6      	; 0x28a <m_usb_tx_char+0x2e>
 284:	9f bf       	out	0x3f, r25	; 63
 286:	8f ef       	ldi	r24, 0xFF	; 255
			case 25: UEDATX = *buffer++;
 288:	42 c0       	rjmp	.+132    	; 0x30e <m_usb_tx_char+0xb2>
 28a:	10 92 0b 01 	sts	0x010B, r1
 28e:	30 91 e4 00 	lds	r19, 0x00E4
			case 24: UEDATX = *buffer++;
 292:	37 5e       	subi	r19, 0xE7	; 231
 294:	20 91 e8 00 	lds	r18, 0x00E8
 298:	25 fd       	sbrc	r18, 5
 29a:	25 c0       	rjmp	.+74     	; 0x2e6 <m_usb_tx_char+0x8a>
			case 23: UEDATX = *buffer++;
 29c:	9f bf       	out	0x3f, r25	; 63
 29e:	90 91 e4 00 	lds	r25, 0x00E4
 2a2:	93 17       	cp	r25, r19
 2a4:	49 f0       	breq	.+18     	; 0x2b8 <m_usb_tx_char+0x5c>
			case 22: UEDATX = *buffer++;
 2a6:	90 91 09 01 	lds	r25, 0x0109
 2aa:	91 11       	cpse	r25, r1
 2ac:	0f c0       	rjmp	.+30     	; 0x2cc <m_usb_tx_char+0x70>
 2ae:	2c c0       	rjmp	.+88     	; 0x308 <m_usb_tx_char+0xac>
			case 21: UEDATX = *buffer++;
 2b0:	9f bf       	out	0x3f, r25	; 63
 2b2:	98 81       	ld	r25, Y
 2b4:	93 13       	cpse	r25, r19
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <m_usb_tx_char+0x66>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
			case 20: UEDATX = *buffer++;
 2ba:	80 93 0b 01 	sts	0x010B, r24
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	26 c0       	rjmp	.+76     	; 0x30e <m_usb_tx_char+0xb2>
 2c2:	90 91 09 01 	lds	r25, 0x0109
			case 19: UEDATX = *buffer++;
 2c6:	91 11       	cpse	r25, r1
 2c8:	08 c0       	rjmp	.+16     	; 0x2da <m_usb_tx_char+0x7e>
 2ca:	20 c0       	rjmp	.+64     	; 0x30c <m_usb_tx_char+0xb0>
 2cc:	a9 ee       	ldi	r26, 0xE9	; 233
			case 18: UEDATX = *buffer++;
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	44 e0       	ldi	r20, 0x04	; 4
 2d2:	e8 ee       	ldi	r30, 0xE8	; 232
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	c4 ee       	ldi	r28, 0xE4	; 228
			case 17: UEDATX = *buffer++;
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
 2da:	9f b7       	in	r25, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	4c 93       	st	X, r20
 2e0:	20 81       	ld	r18, Z
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 2e2:	25 ff       	sbrs	r18, 5
 2e4:	e5 cf       	rjmp	.-54     	; 0x2b0 <m_usb_tx_char+0x54>
 2e6:	80 93 f1 00 	sts	0x00F1, r24
 2ea:	80 91 e8 00 	lds	r24, 0x00E8
			case 15: UEDATX = *buffer++;
 2ee:	85 fd       	sbrc	r24, 5
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <m_usb_tx_char+0x9c>
 2f2:	8a e3       	ldi	r24, 0x3A	; 58
 2f4:	80 93 e8 00 	sts	0x00E8, r24
			case 14: UEDATX = *buffer++;
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	80 93 08 01 	sts	0x0108, r24
 2fe:	9f bf       	out	0x3f, r25	; 63
			case 13: UEDATX = *buffer++;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	05 c0       	rjmp	.+10     	; 0x30e <m_usb_tx_char+0xb2>
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	03 c0       	rjmp	.+6      	; 0x30e <m_usb_tx_char+0xb2>
 308:	8f ef       	ldi	r24, 0xFF	; 255
			case 12: UEDATX = *buffer++;
 30a:	01 c0       	rjmp	.+2      	; 0x30e <m_usb_tx_char+0xb2>
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <__vector_10>:
			case 11: UEDATX = *buffer++;
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
			case 10: UEDATX = *buffer++;
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
 326:	e1 ee       	ldi	r30, 0xE1	; 225
			case  9: UEDATX = *buffer++;
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	10 82       	st	Z, r1
 32e:	83 ff       	sbrs	r24, 3
 330:	11 c0       	rjmp	.+34     	; 0x354 <__vector_10+0x40>
			#endif
			case  8: UEDATX = *buffer++;
 332:	10 92 e9 00 	sts	0x00E9, r1
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	90 93 eb 00 	sts	0x00EB, r25
			case  7: UEDATX = *buffer++;
 33c:	10 92 ec 00 	sts	0x00EC, r1
 340:	92 e1       	ldi	r25, 0x12	; 18
 342:	90 93 ed 00 	sts	0x00ED, r25
			case  6: UEDATX = *buffer++;
 346:	98 e0       	ldi	r25, 0x08	; 8
 348:	90 93 f0 00 	sts	0x00F0, r25
 34c:	10 92 09 01 	sts	0x0109, r1
			case  5: UEDATX = *buffer++;
 350:	10 92 0a 01 	sts	0x010A, r1
 354:	82 ff       	sbrs	r24, 2
 356:	13 c0       	rjmp	.+38     	; 0x37e <__vector_10+0x6a>
 358:	80 91 09 01 	lds	r24, 0x0109
			case  4: UEDATX = *buffer++;
 35c:	88 23       	and	r24, r24
 35e:	79 f0       	breq	.+30     	; 0x37e <__vector_10+0x6a>
 360:	80 91 08 01 	lds	r24, 0x0108
			case  3: UEDATX = *buffer++;
 364:	88 23       	and	r24, r24
 366:	59 f0       	breq	.+22     	; 0x37e <__vector_10+0x6a>
 368:	81 50       	subi	r24, 0x01	; 1
 36a:	80 93 08 01 	sts	0x0108, r24
			case  2: UEDATX = *buffer++;
 36e:	81 11       	cpse	r24, r1
 370:	06 c0       	rjmp	.+12     	; 0x37e <__vector_10+0x6a>
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	80 93 e9 00 	sts	0x00E9, r24
			default:
			case  1: UEDATX = *buffer++;
 378:	8a e3       	ldi	r24, 0x3A	; 58
 37a:	80 93 e8 00 	sts	0x00E8, r24
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 38e:	18 95       	reti

00000390 <__vector_11>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 396:	0f 92       	push	r0
	return 0;
 398:	11 24       	eor	r1, r1
 39a:	0f 93       	push	r16
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 39c:	1f 93       	push	r17
 39e:	2f 93       	push	r18
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
 3ba:	10 92 e9 00 	sts	0x00E9, r1
 3be:	80 91 e8 00 	lds	r24, 0x00E8
 3c2:	83 ff       	sbrs	r24, 3
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
        intbits = UEINTX;
        if (intbits & (1<<RXSTPI)) {
 3c4:	51 c1       	rjmp	.+674    	; 0x668 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
 3c6:	e1 ef       	ldi	r30, 0xF1	; 241
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	70 81       	ld	r23, Z
                bRequest = UEDATX;
 3cc:	40 81       	ld	r20, Z
                wValue = UEDATX;
 3ce:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 3d0:	30 81       	ld	r19, Z
 3d2:	93 2f       	mov	r25, r19
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	dc 01       	movw	r26, r24
 3d8:	a2 2b       	or	r26, r18
 3da:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
 3dc:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
 3de:	60 81       	ld	r22, Z
 3e0:	96 2f       	mov	r25, r22
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	85 2b       	or	r24, r21
                wLength = UEDATX;
 3e6:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
 3e8:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 3ea:	52 ef       	ldi	r21, 0xF2	; 242
 3ec:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
 3f0:	46 30       	cpi	r20, 0x06	; 6
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <__vector_11+0x66>
 3f4:	5c c0       	rjmp	.+184    	; 0x4ae <__vector_11+0x11e>
 3f6:	04 c0       	rjmp	.+8      	; 0x400 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 3f8:	81 e2       	ldi	r24, 0x21	; 33
 3fa:	80 93 eb 00 	sts	0x00EB, r24
					return;
 3fe:	3b c1       	rjmp	.+630    	; 0x676 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
 400:	c6 e0       	ldi	r28, 0x06	; 6
 402:	4c ea       	ldi	r20, 0xAC	; 172
 404:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 406:	fa 01       	movw	r30, r20
 408:	65 91       	lpm	r22, Z+
 40a:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
 40c:	26 17       	cp	r18, r22
 40e:	37 07       	cpc	r19, r23
 410:	19 f0       	breq	.+6      	; 0x418 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
 412:	49 5f       	subi	r20, 0xF9	; 249
 414:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 416:	20 c0       	rjmp	.+64     	; 0x458 <__vector_11+0xc8>
				}
				list += 2;
 418:	fa 01       	movw	r30, r20
 41a:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 41c:	65 91       	lpm	r22, Z+
 41e:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
 420:	86 17       	cp	r24, r22
 422:	97 07       	cpc	r25, r23
 424:	19 f0       	breq	.+6      	; 0x42c <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
 426:	49 5f       	subi	r20, 0xF9	; 249
 428:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 42a:	16 c0       	rjmp	.+44     	; 0x458 <__vector_11+0xc8>
				}
				list += 2;
 42c:	fa 01       	movw	r30, r20
 42e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 430:	85 91       	lpm	r24, Z+
 432:	94 91       	lpm	r25, Z
 434:	28 2f       	mov	r18, r24
 436:	39 2f       	mov	r19, r25
				list += 2;
 438:	fa 01       	movw	r30, r20
 43a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 43c:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 43e:	9b 2f       	mov	r25, r27
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 444:	8f 3f       	cpi	r24, 0xFF	; 255
 446:	91 05       	cpc	r25, r1
 448:	19 f0       	breq	.+6      	; 0x450 <__vector_11+0xc0>
 44a:	10 f0       	brcs	.+4      	; 0x450 <__vector_11+0xc0>
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	84 17       	cp	r24, r20
 452:	28 f4       	brcc	.+10     	; 0x45e <__vector_11+0xce>
 454:	48 2f       	mov	r20, r24
 456:	03 c0       	rjmp	.+6      	; 0x45e <__vector_11+0xce>
 458:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 45a:	a9 f6       	brne	.-86     	; 0x406 <__vector_11+0x76>
 45c:	cd cf       	rjmp	.-102    	; 0x3f8 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 45e:	c8 ee       	ldi	r28, 0xE8	; 232
 460:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 462:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 464:	a1 ef       	ldi	r26, 0xF1	; 241
 466:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 468:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 46a:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 46c:	98 2f       	mov	r25, r24
 46e:	95 70       	andi	r25, 0x05	; 5
 470:	e1 f3       	breq	.-8      	; 0x46a <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
 472:	82 fd       	sbrc	r24, 2
 474:	00 c1       	rjmp	.+512    	; 0x676 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 476:	64 2f       	mov	r22, r20
 478:	41 31       	cpi	r20, 0x11	; 17
 47a:	08 f0       	brcs	.+2      	; 0x47e <__vector_11+0xee>
 47c:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
 47e:	66 23       	and	r22, r22
 480:	09 f4       	brne	.+2      	; 0x484 <__vector_11+0xf4>
 482:	f6 c0       	rjmp	.+492    	; 0x670 <__vector_11+0x2e0>
 484:	c9 01       	movw	r24, r18
 486:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
 488:	fc 01       	movw	r30, r24
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	e4 91       	lpm	r30, Z
 48e:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 490:	51 50       	subi	r21, 0x01	; 1
 492:	d1 f7       	brne	.-12     	; 0x488 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 494:	86 2f       	mov	r24, r22
 496:	81 50       	subi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	28 0f       	add	r18, r24
 49e:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 4a0:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4a2:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 4a4:	41 11       	cpse	r20, r1
 4a6:	e1 cf       	rjmp	.-62     	; 0x46a <__vector_11+0xda>
 4a8:	60 31       	cpi	r22, 0x10	; 16
 4aa:	f9 f2       	breq	.-66     	; 0x46a <__vector_11+0xda>
 4ac:	e4 c0       	rjmp	.+456    	; 0x676 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 4ae:	45 30       	cpi	r20, 0x05	; 5
 4b0:	61 f4       	brne	.+24     	; 0x4ca <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4b2:	8e ef       	ldi	r24, 0xFE	; 254
 4b4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4b8:	e8 ee       	ldi	r30, 0xE8	; 232
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	80 ff       	sbrs	r24, 0
 4c0:	fd cf       	rjmp	.-6      	; 0x4bc <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 4c2:	20 68       	ori	r18, 0x80	; 128
 4c4:	20 93 e3 00 	sts	0x00E3, r18
			return;
 4c8:	d6 c0       	rjmp	.+428    	; 0x676 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 4ca:	49 30       	cpi	r20, 0x09	; 9
 4cc:	a1 f5       	brne	.+104    	; 0x536 <__vector_11+0x1a6>
 4ce:	71 11       	cpse	r23, r1
 4d0:	5b c0       	rjmp	.+182    	; 0x588 <__vector_11+0x1f8>
			usb_configuration = wValue;
 4d2:	20 93 09 01 	sts	0x0109, r18
			cdc_line_rtsdtr = 0;
 4d6:	10 92 0a 01 	sts	0x010A, r1
			transmit_flush_timer = 0;
 4da:	10 92 08 01 	sts	0x0108, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4de:	8e ef       	ldi	r24, 0xFE	; 254
 4e0:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4e4:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 4e6:	86 ed       	ldi	r24, 0xD6	; 214
 4e8:	90 e0       	ldi	r25, 0x00	; 0
			for (i=1; i<5; i++) {
				UENUM = i;
 4ea:	c9 ee       	ldi	r28, 0xE9	; 233
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 4ee:	ab ee       	ldi	r26, 0xEB	; 235
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 4f2:	6c ee       	ldi	r22, 0xEC	; 236
 4f4:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 4f6:	4d ee       	ldi	r20, 0xED	; 237
 4f8:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 4fa:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
 4fc:	9c 01       	movw	r18, r24
 4fe:	2f 5f       	subi	r18, 0xFF	; 255
 500:	3f 4f       	sbci	r19, 0xFF	; 255
 502:	fc 01       	movw	r30, r24
 504:	04 91       	lpm	r16, Z
				UECONX = en;
 506:	0c 93       	st	X, r16
				if (en) {
 508:	00 23       	and	r16, r16
 50a:	59 f0       	breq	.+22     	; 0x522 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
 50c:	f9 01       	movw	r30, r18
 50e:	24 91       	lpm	r18, Z
 510:	fb 01       	movw	r30, r22
 512:	20 83       	st	Z, r18
 514:	fc 01       	movw	r30, r24
 516:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
 518:	03 96       	adiw	r24, 0x03	; 3
 51a:	24 91       	lpm	r18, Z
 51c:	fa 01       	movw	r30, r20
 51e:	20 83       	st	Z, r18
 520:	01 c0       	rjmp	.+2      	; 0x524 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 522:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 524:	1f 5f       	subi	r17, 0xFF	; 255
 526:	15 30       	cpi	r17, 0x05	; 5
 528:	41 f7       	brne	.-48     	; 0x4fa <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 52a:	ea ee       	ldi	r30, 0xEA	; 234
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	8e e1       	ldi	r24, 0x1E	; 30
 530:	80 83       	st	Z, r24
        		UERST = 0;
 532:	10 82       	st	Z, r1
			return;
 534:	a0 c0       	rjmp	.+320    	; 0x676 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 536:	48 30       	cpi	r20, 0x08	; 8
 538:	81 f4       	brne	.+32     	; 0x55a <__vector_11+0x1ca>
 53a:	70 38       	cpi	r23, 0x80	; 128
 53c:	09 f0       	breq	.+2      	; 0x540 <__vector_11+0x1b0>
 53e:	3f c0       	rjmp	.+126    	; 0x5be <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 540:	e8 ee       	ldi	r30, 0xE8	; 232
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 ff       	sbrs	r24, 0
 548:	fd cf       	rjmp	.-6      	; 0x544 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 54a:	80 91 09 01 	lds	r24, 0x0109
 54e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 552:	8e ef       	ldi	r24, 0xFE	; 254
 554:	80 93 e8 00 	sts	0x00E8, r24
 558:	8e c0       	rjmp	.+284    	; 0x676 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 55a:	41 32       	cpi	r20, 0x21	; 33
 55c:	a9 f4       	brne	.+42     	; 0x588 <__vector_11+0x1f8>
 55e:	71 3a       	cpi	r23, 0xA1	; 161
 560:	f1 f5       	brne	.+124    	; 0x5de <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 562:	e8 ee       	ldi	r30, 0xE8	; 232
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	80 ff       	sbrs	r24, 0
 56a:	fd cf       	rjmp	.-6      	; 0x566 <__vector_11+0x1d6>
 56c:	e0 e0       	ldi	r30, 0x00	; 0
 56e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 570:	a1 ef       	ldi	r26, 0xF1	; 241
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	81 91       	ld	r24, Z+
 576:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	e7 30       	cpi	r30, 0x07	; 7
 57c:	f4 07       	cpc	r31, r20
 57e:	d1 f7       	brne	.-12     	; 0x574 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 580:	8e ef       	ldi	r24, 0xFE	; 254
 582:	80 93 e8 00 	sts	0x00E8, r24
 586:	77 c0       	rjmp	.+238    	; 0x676 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 588:	40 32       	cpi	r20, 0x20	; 32
 58a:	c9 f4       	brne	.+50     	; 0x5be <__vector_11+0x22e>
 58c:	71 32       	cpi	r23, 0x21	; 33
 58e:	09 f0       	breq	.+2      	; 0x592 <__vector_11+0x202>
 590:	6b c0       	rjmp	.+214    	; 0x668 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 592:	e8 ee       	ldi	r30, 0xE8	; 232
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	82 ff       	sbrs	r24, 2
 59a:	fd cf       	rjmp	.-6      	; 0x596 <__vector_11+0x206>
 59c:	e0 e0       	ldi	r30, 0x00	; 0
 59e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 5a0:	a1 ef       	ldi	r26, 0xF1	; 241
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	8c 91       	ld	r24, X
 5a6:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5a8:	51 e0       	ldi	r21, 0x01	; 1
 5aa:	e7 30       	cpi	r30, 0x07	; 7
 5ac:	f5 07       	cpc	r31, r21
 5ae:	d1 f7       	brne	.-12     	; 0x5a4 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 5b0:	e8 ee       	ldi	r30, 0xE8	; 232
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	8b ef       	ldi	r24, 0xFB	; 251
 5b6:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b8:	8e ef       	ldi	r24, 0xFE	; 254
 5ba:	80 83       	st	Z, r24
 5bc:	5c c0       	rjmp	.+184    	; 0x676 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 5be:	42 32       	cpi	r20, 0x22	; 34
 5c0:	71 f4       	brne	.+28     	; 0x5de <__vector_11+0x24e>
 5c2:	71 32       	cpi	r23, 0x21	; 33
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <__vector_11+0x238>
 5c6:	50 c0       	rjmp	.+160    	; 0x668 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
 5c8:	20 93 0a 01 	sts	0x010A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5cc:	e8 ee       	ldi	r30, 0xE8	; 232
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	80 ff       	sbrs	r24, 0
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5d6:	8e ef       	ldi	r24, 0xFE	; 254
 5d8:	80 93 e8 00 	sts	0x00E8, r24
 5dc:	4c c0       	rjmp	.+152    	; 0x676 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 5de:	41 11       	cpse	r20, r1
 5e0:	1a c0       	rjmp	.+52     	; 0x616 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5e2:	e8 ee       	ldi	r30, 0xE8	; 232
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	20 81       	ld	r18, Z
 5e8:	20 ff       	sbrs	r18, 0
 5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 5ec:	72 38       	cpi	r23, 0x82	; 130
 5ee:	51 f4       	brne	.+20     	; 0x604 <__vector_11+0x274>
				UENUM = wIndex;
 5f0:	e9 ee       	ldi	r30, 0xE9	; 233
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
 5f6:	80 91 eb 00 	lds	r24, 0x00EB
 5fa:	85 fb       	bst	r24, 5
 5fc:	88 27       	eor	r24, r24
 5fe:	80 f9       	bld	r24, 0
				UENUM = 0;
 600:	10 82       	st	Z, r1
 602:	01 c0       	rjmp	.+2      	; 0x606 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 604:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 606:	e1 ef       	ldi	r30, 0xF1	; 241
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 83       	st	Z, r24
			UEDATX = 0;
 60c:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 60e:	8e ef       	ldi	r24, 0xFE	; 254
 610:	80 93 e8 00 	sts	0x00E8, r24
 614:	30 c0       	rjmp	.+96     	; 0x676 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 616:	41 30       	cpi	r20, 0x01	; 1
 618:	11 f0       	breq	.+4      	; 0x61e <__vector_11+0x28e>
 61a:	43 30       	cpi	r20, 0x03	; 3
 61c:	29 f5       	brne	.+74     	; 0x668 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
 61e:	72 30       	cpi	r23, 0x02	; 2
 620:	19 f5       	brne	.+70     	; 0x668 <__vector_11+0x2d8>
 622:	23 2b       	or	r18, r19
 624:	09 f5       	brne	.+66     	; 0x668 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
 626:	8f 77       	andi	r24, 0x7F	; 127
 628:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
 62a:	38 2f       	mov	r19, r24
 62c:	31 50       	subi	r19, 0x01	; 1
 62e:	34 30       	cpi	r19, 0x04	; 4
 630:	d8 f4       	brcc	.+54     	; 0x668 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 632:	3e ef       	ldi	r19, 0xFE	; 254
 634:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 638:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
 63c:	43 30       	cpi	r20, 0x03	; 3
 63e:	21 f4       	brne	.+8      	; 0x648 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 640:	81 e2       	ldi	r24, 0x21	; 33
 642:	80 93 eb 00 	sts	0x00EB, r24
 646:	17 c0       	rjmp	.+46     	; 0x676 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 648:	99 e1       	ldi	r25, 0x19	; 25
 64a:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	d9 01       	movw	r26, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <__vector_11+0x2ca>
 656:	aa 0f       	add	r26, r26
 658:	bb 1f       	adc	r27, r27
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <__vector_11+0x2c6>
 65e:	ea ee       	ldi	r30, 0xEA	; 234
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	a0 83       	st	Z, r26
					UERST = 0;
 664:	10 82       	st	Z, r1
 666:	07 c0       	rjmp	.+14     	; 0x676 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 668:	81 e2       	ldi	r24, 0x21	; 33
 66a:	80 93 eb 00 	sts	0x00EB, r24
 66e:	03 c0       	rjmp	.+6      	; 0x676 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 670:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 672:	41 11       	cpse	r20, r1
 674:	fa ce       	rjmp	.-524    	; 0x46a <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	27 97       	sbiw	r28, 0x07	; 7
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 6bc:	8e 01       	movw	r16, r28
 6be:	0f 5f       	subi	r16, 0xFF	; 255
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	27 e0       	ldi	r18, 0x07	; 7
 6c4:	f8 01       	movw	r30, r16
 6c6:	11 92       	st	Z+, r1
 6c8:	2a 95       	dec	r18
 6ca:	e9 f7       	brne	.-6      	; 0x6c6 <m_usb_tx_int+0x26>
	itoa(i,string,10);
 6cc:	4a e0       	ldi	r20, 0x0A	; 10
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	b8 01       	movw	r22, r16
 6d2:	0e 94 04 04 	call	0x808	; 0x808 <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
 6d6:	7e 01       	movw	r14, r28
 6d8:	f8 e0       	ldi	r31, 0x08	; 8
 6da:	ef 0e       	add	r14, r31
 6dc:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 6de:	f8 01       	movw	r30, r16
 6e0:	81 91       	ld	r24, Z+
 6e2:	8f 01       	movw	r16, r30
 6e4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 6e6:	0e 94 2e 01 	call	0x25c	; 0x25c <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 6ea:	0e 15       	cp	r16, r14
 6ec:	1f 05       	cpc	r17, r15
 6ee:	b9 f7       	brne	.-18     	; 0x6de <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 6f0:	27 96       	adiw	r28, 0x07	; 7
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	08 95       	ret

0000070a <main>:
volatile int flag = 0;

int main(void)
{
	
	m_clockdivide(0);
 70a:	c1 e6       	ldi	r28, 0x61	; 97
 70c:	d0 e0       	ldi	r29, 0x00	; 0
 70e:	80 e8       	ldi	r24, 0x80	; 128
 710:	88 83       	st	Y, r24
 712:	18 82       	st	Y, r1
	
	clear(ADCSRB, MUX5);//Set analog input (F6) PHOTOTRANSISTOR 1
 714:	eb e7       	ldi	r30, 0x7B	; 123
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	90 81       	ld	r25, Z
 71a:	9f 7d       	andi	r25, 0xDF	; 223
 71c:	90 83       	st	Z, r25
	set(ADMUX, MUX2);	//^
 71e:	ac e7       	ldi	r26, 0x7C	; 124
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	9c 91       	ld	r25, X
 724:	94 60       	ori	r25, 0x04	; 4
 726:	9c 93       	st	X, r25
	set(ADMUX, MUX1);	//^
 728:	9c 91       	ld	r25, X
 72a:	92 60       	ori	r25, 0x02	; 2
 72c:	9c 93       	st	X, r25
	clear(ADMUX, MUX0);	//^
 72e:	9c 91       	ld	r25, X
 730:	9e 7f       	andi	r25, 0xFE	; 254
 732:	9c 93       	st	X, r25
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
 734:	ea e7       	ldi	r30, 0x7A	; 122
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	90 81       	ld	r25, Z
 73a:	90 68       	ori	r25, 0x80	; 128
 73c:	90 83       	st	Z, r25
	set(ADCSRA, ADSC);	//^
 73e:	90 81       	ld	r25, Z
 740:	90 64       	ori	r25, 0x40	; 64
 742:	90 83       	st	Z, r25
	
	//ADC's
	sei();					//Set up interrupts
 744:	78 94       	sei
	set(ADCSRA,ADIE);
 746:	90 81       	ld	r25, Z
 748:	98 60       	ori	r25, 0x08	; 8
 74a:	90 83       	st	Z, r25
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
 74c:	9c 91       	ld	r25, X
 74e:	9f 77       	andi	r25, 0x7F	; 127
 750:	9c 93       	st	X, r25
	clear(ADMUX, REFS0);	//^
 752:	9c 91       	ld	r25, X
 754:	9f 7b       	andi	r25, 0xBF	; 191
 756:	9c 93       	st	X, r25
	
	set(ADCSRA, ADPS2);	//Set scale to /128
 758:	90 81       	ld	r25, Z
 75a:	94 60       	ori	r25, 0x04	; 4
 75c:	90 83       	st	Z, r25
	set(ADCSRA, ADPS1);	//^
 75e:	90 81       	ld	r25, Z
 760:	92 60       	ori	r25, 0x02	; 2
 762:	90 83       	st	Z, r25
	set(ADCSRA, ADPS0);	//^
 764:	90 81       	ld	r25, Z
 766:	91 60       	ori	r25, 0x01	; 1
 768:	90 83       	st	Z, r25
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
 76a:	ae e7       	ldi	r26, 0x7E	; 126
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	9c 91       	ld	r25, X
 770:	91 60       	ori	r25, 0x01	; 1
 772:	9c 93       	st	X, r25
	set(DIDR0, ADC1D);	//Disable digital input for F1
 774:	9c 91       	ld	r25, X
 776:	92 60       	ori	r25, 0x02	; 2
 778:	9c 93       	st	X, r25
	set(DIDR0, ADC4D);	//Disable digital input for F4
 77a:	9c 91       	ld	r25, X
 77c:	90 61       	ori	r25, 0x10	; 16
 77e:	9c 93       	st	X, r25
	set(DIDR0, ADC5D);	//Disable digital input for F5
 780:	9c 91       	ld	r25, X
 782:	90 62       	ori	r25, 0x20	; 32
 784:	9c 93       	st	X, r25
	set(DIDR0, ADC6D);	//Disable digital input for F6
 786:	9c 91       	ld	r25, X
 788:	90 64       	ori	r25, 0x40	; 64
 78a:	9c 93       	st	X, r25
	set(DIDR2, ADC8D);	//Disable digital input for D4
 78c:	ad e7       	ldi	r26, 0x7D	; 125
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	9c 91       	ld	r25, X
 792:	91 60       	ori	r25, 0x01	; 1
 794:	9c 93       	st	X, r25
	set(DIDR2, ADC9D);	//Disable digital input for D6
 796:	9c 91       	ld	r25, X
 798:	92 60       	ori	r25, 0x02	; 2
 79a:	9c 93       	st	X, r25
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
 79c:	90 81       	ld	r25, Z
 79e:	90 62       	ori	r25, 0x20	; 32
 7a0:	90 83       	st	Z, r25
	
	set(ADCSRA, ADIF);	//Enable reading results
 7a2:	90 81       	ld	r25, Z
 7a4:	90 61       	ori	r25, 0x10	; 16
 7a6:	90 83       	st	Z, r25
	
	//MATLAB PLOTTING STUFFS*****************************************************************
	m_clockdivide(0);
 7a8:	88 83       	st	Y, r24
 7aa:	18 82       	st	Y, r1
	
	
	m_red(ON);
 7ac:	6e 9a       	sbi	0x0d, 6	; 13
 7ae:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
 7b0:	6a 9a       	sbi	0x0d, 2	; 13
 7b2:	72 98       	cbi	0x0e, 2	; 14

	m_usb_init(); // connect usb
 7b4:	0e 94 cf 00 	call	0x19e	; 0x19e <m_usb_init>
	while(!m_usb_isconnected()){};  //wait for connection
 7b8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <m_usb_isconnected>
 7bc:	88 23       	and	r24, r24
 7be:	e1 f3       	breq	.-8      	; 0x7b8 <main+0xae>

	m_red(OFF);
 7c0:	6e 9a       	sbi	0x0d, 6	; 13
 7c2:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
 7c4:	6a 9a       	sbi	0x0d, 2	; 13
 7c6:	72 9a       	sbi	0x0e, 2	; 14

		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5

			
				m_usb_tx_int(ADC);
 7c8:	c8 e7       	ldi	r28, 0x78	; 120
 7ca:	d0 e0       	ldi	r29, 0x00	; 0
	
	int i;

	while(1){

		m_red(ON);
 7cc:	6e 9a       	sbi	0x0d, 6	; 13
 7ce:	76 98       	cbi	0x0e, 6	; 14
		m_green(OFF);
 7d0:	6a 9a       	sbi	0x0d, 2	; 13
 7d2:	72 9a       	sbi	0x0e, 2	; 14
		m_red(OFF);
 7d4:	6e 9a       	sbi	0x0d, 6	; 13
 7d6:	76 9a       	sbi	0x0e, 6	; 14
		m_green(ON);
 7d8:	6a 9a       	sbi	0x0d, 2	; 13
 7da:	72 98       	cbi	0x0e, 2	; 14

		while(!m_usb_rx_available());  	//wait for an indication from the computer
 7dc:	0e 94 09 01 	call	0x212	; 0x212 <m_usb_rx_available>
 7e0:	88 23       	and	r24, r24
 7e2:	e1 f3       	breq	.-8      	; 0x7dc <main+0xd2>
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
 7e4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <m_usb_rx_char>
 7e8:	18 2f       	mov	r17, r24

		m_usb_rx_flush();  				//clear buffer
 7ea:	0e 94 18 01 	call	0x230	; 0x230 <m_usb_rx_flush>

		if(rx_buffer == 1) {  			//computer wants ir buffer
 7ee:	11 30       	cpi	r17, 0x01	; 1
 7f0:	69 f7       	brne	.-38     	; 0x7cc <main+0xc2>
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5

			
				m_usb_tx_int(ADC);
 7f2:	88 81       	ld	r24, Y
 7f4:	99 81       	ldd	r25, Y+1	; 0x01
 7f6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <m_usb_tx_int>
				m_usb_tx_char('\t');
 7fa:	89 e0       	ldi	r24, 0x09	; 9
 7fc:	0e 94 2e 01 	call	0x25c	; 0x25c <m_usb_tx_char>


			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
 800:	8a e0       	ldi	r24, 0x0A	; 10
 802:	0e 94 2e 01 	call	0x25c	; 0x25c <m_usb_tx_char>
 806:	e2 cf       	rjmp	.-60     	; 0x7cc <main+0xc2>

00000808 <itoa>:
 808:	fb 01       	movw	r30, r22
 80a:	9f 01       	movw	r18, r30
 80c:	e8 94       	clt
 80e:	42 30       	cpi	r20, 0x02	; 2
 810:	c4 f0       	brlt	.+48     	; 0x842 <itoa+0x3a>
 812:	45 32       	cpi	r20, 0x25	; 37
 814:	b4 f4       	brge	.+44     	; 0x842 <itoa+0x3a>
 816:	4a 30       	cpi	r20, 0x0A	; 10
 818:	29 f4       	brne	.+10     	; 0x824 <itoa+0x1c>
 81a:	97 fb       	bst	r25, 7
 81c:	1e f4       	brtc	.+6      	; 0x824 <itoa+0x1c>
 81e:	90 95       	com	r25
 820:	81 95       	neg	r24
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	64 2f       	mov	r22, r20
 826:	77 27       	eor	r23, r23
 828:	0e 94 35 04 	call	0x86a	; 0x86a <__udivmodhi4>
 82c:	80 5d       	subi	r24, 0xD0	; 208
 82e:	8a 33       	cpi	r24, 0x3A	; 58
 830:	0c f0       	brlt	.+2      	; 0x834 <itoa+0x2c>
 832:	89 5d       	subi	r24, 0xD9	; 217
 834:	81 93       	st	Z+, r24
 836:	cb 01       	movw	r24, r22
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	a1 f7       	brne	.-24     	; 0x824 <itoa+0x1c>
 83c:	16 f4       	brtc	.+4      	; 0x842 <itoa+0x3a>
 83e:	5d e2       	ldi	r21, 0x2D	; 45
 840:	51 93       	st	Z+, r21
 842:	10 82       	st	Z, r1
 844:	c9 01       	movw	r24, r18
 846:	0c 94 25 04 	jmp	0x84a	; 0x84a <strrev>

0000084a <strrev>:
 84a:	dc 01       	movw	r26, r24
 84c:	fc 01       	movw	r30, r24
 84e:	67 2f       	mov	r22, r23
 850:	71 91       	ld	r23, Z+
 852:	77 23       	and	r23, r23
 854:	e1 f7       	brne	.-8      	; 0x84e <strrev+0x4>
 856:	32 97       	sbiw	r30, 0x02	; 2
 858:	04 c0       	rjmp	.+8      	; 0x862 <strrev+0x18>
 85a:	7c 91       	ld	r23, X
 85c:	6d 93       	st	X+, r22
 85e:	70 83       	st	Z, r23
 860:	62 91       	ld	r22, -Z
 862:	ae 17       	cp	r26, r30
 864:	bf 07       	cpc	r27, r31
 866:	c8 f3       	brcs	.-14     	; 0x85a <strrev+0x10>
 868:	08 95       	ret

0000086a <__udivmodhi4>:
 86a:	aa 1b       	sub	r26, r26
 86c:	bb 1b       	sub	r27, r27
 86e:	51 e1       	ldi	r21, 0x11	; 17
 870:	07 c0       	rjmp	.+14     	; 0x880 <__udivmodhi4_ep>

00000872 <__udivmodhi4_loop>:
 872:	aa 1f       	adc	r26, r26
 874:	bb 1f       	adc	r27, r27
 876:	a6 17       	cp	r26, r22
 878:	b7 07       	cpc	r27, r23
 87a:	10 f0       	brcs	.+4      	; 0x880 <__udivmodhi4_ep>
 87c:	a6 1b       	sub	r26, r22
 87e:	b7 0b       	sbc	r27, r23

00000880 <__udivmodhi4_ep>:
 880:	88 1f       	adc	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	5a 95       	dec	r21
 886:	a9 f7       	brne	.-22     	; 0x872 <__udivmodhi4_loop>
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	bc 01       	movw	r22, r24
 88e:	cd 01       	movw	r24, r26
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
