
PT test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a1c  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800108  00800108  00000ab8  2**0
                  ALLOC
  3 .stab         0000099c  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ed  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001741  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ff4  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000042e  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000752  00000000  00000000  00002ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000374  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004c4  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019de  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_10>
  2c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_29>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
  bc:	00 00 35 01 04 01 03 09 04 39 01 12 02 03 09 04     ..5......9......
  cc:	4d 01 06 03 03 09 04 55 01 08                       M......U..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
 149:	65 00 00 00                                         e...

0000014d <string2>:
 14d:	06 03 4d 00 32 00 00 00                             ..M.2...

00000155 <string3>:
 155:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ec e1       	ldi	r30, 0x1C	; 28
 174:	fa e0       	ldi	r31, 0x0A	; 10
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ac 31       	cpi	r26, 0x1C	; 28
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 14 04 	call	0x828	; 0x828 <main>
 196:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <m_usb_init>:
			case 54: UEDATX = *buffer++;
			case 53: UEDATX = *buffer++;
			case 52: UEDATX = *buffer++;
			case 51: UEDATX = *buffer++;
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 d7 00 	sts	0x00D7, r24
			case 48: UEDATX = *buffer++;
 1a4:	80 ea       	ldi	r24, 0xA0	; 160
 1a6:	80 93 d8 00 	sts	0x00D8, r24
 1aa:	82 e1       	ldi	r24, 0x12	; 18
			case 47: UEDATX = *buffer++;
 1ac:	89 bd       	out	0x29, r24	; 41
 1ae:	09 b4       	in	r0, 0x29	; 41
 1b0:	00 fe       	sbrs	r0, 0
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <m_usb_init+0x10>
 1b4:	80 e9       	ldi	r24, 0x90	; 144
			case 46: UEDATX = *buffer++;
 1b6:	80 93 d8 00 	sts	0x00D8, r24
 1ba:	10 92 e0 00 	sts	0x00E0, r1
 1be:	10 92 09 01 	sts	0x0109, r1
			case 45: UEDATX = *buffer++;
 1c2:	10 92 0a 01 	sts	0x010A, r1
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	80 93 e2 00 	sts	0x00E2, r24
			case 44: UEDATX = *buffer++;
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <m_usb_isconnected>:
 1d0:	80 91 09 01 	lds	r24, 0x0109
			case 43: UEDATX = *buffer++;
 1d4:	08 95       	ret

000001d6 <m_usb_rx_char>:
 1d6:	9f b7       	in	r25, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	80 91 09 01 	lds	r24, 0x0109
			case 42: UEDATX = *buffer++;
 1de:	81 11       	cpse	r24, r1
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <m_usb_rx_char+0x12>
 1e2:	9f bf       	out	0x3f, r25	; 63
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	08 95       	ret
			case 41: UEDATX = *buffer++;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	80 93 e9 00 	sts	0x00E9, r24
 1ee:	80 91 e8 00 	lds	r24, 0x00E8
			case 40: UEDATX = *buffer++;
 1f2:	85 fd       	sbrc	r24, 5
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <m_usb_rx_char+0x26>
 1f6:	9f bf       	out	0x3f, r25	; 63
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	08 95       	ret
			case 39: UEDATX = *buffer++;
 1fc:	80 91 f1 00 	lds	r24, 0x00F1
 200:	20 91 e8 00 	lds	r18, 0x00E8
 204:	25 fd       	sbrc	r18, 5
			case 38: UEDATX = *buffer++;
 206:	03 c0       	rjmp	.+6      	; 0x20e <m_usb_rx_char+0x38>
 208:	2b e6       	ldi	r18, 0x6B	; 107
 20a:	20 93 e8 00 	sts	0x00E8, r18
 20e:	9f bf       	out	0x3f, r25	; 63
			case 37: UEDATX = *buffer++;
 210:	08 95       	ret

00000212 <m_usb_rx_flush>:
 212:	80 91 09 01 	lds	r24, 0x0109
 216:	88 23       	and	r24, r24
 218:	89 f0       	breq	.+34     	; 0x23c <m_usb_rx_flush+0x2a>
			case 36: UEDATX = *buffer++;
 21a:	2f b7       	in	r18, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 e9 00 	sts	0x00E9, r24
			case 35: UEDATX = *buffer++;
 224:	80 91 e8 00 	lds	r24, 0x00E8
 228:	85 ff       	sbrs	r24, 5
 22a:	07 c0       	rjmp	.+14     	; 0x23a <m_usb_rx_flush+0x28>
 22c:	e8 ee       	ldi	r30, 0xE8	; 232
			case 34: UEDATX = *buffer++;
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	9b e6       	ldi	r25, 0x6B	; 107
 232:	90 83       	st	Z, r25
 234:	80 81       	ld	r24, Z
 236:	85 fd       	sbrc	r24, 5
			case 33: UEDATX = *buffer++;
 238:	fc cf       	rjmp	.-8      	; 0x232 <m_usb_rx_flush+0x20>
 23a:	2f bf       	out	0x3f, r18	; 63
 23c:	08 95       	ret

0000023e <m_usb_tx_char>:
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 242:	90 91 09 01 	lds	r25, 0x0109
 246:	99 23       	and	r25, r25
 248:	09 f4       	brne	.+2      	; 0x24c <m_usb_tx_char+0xe>
 24a:	4d c0       	rjmp	.+154    	; 0x2e6 <m_usb_tx_char+0xa8>
			case 31: UEDATX = *buffer++;
 24c:	9f b7       	in	r25, 0x3f	; 63
 24e:	f8 94       	cli
 250:	24 e0       	ldi	r18, 0x04	; 4
 252:	20 93 e9 00 	sts	0x00E9, r18
			case 30: UEDATX = *buffer++;
 256:	20 91 0b 01 	lds	r18, 0x010B
 25a:	22 23       	and	r18, r18
 25c:	49 f0       	breq	.+18     	; 0x270 <m_usb_tx_char+0x32>
 25e:	20 91 e8 00 	lds	r18, 0x00E8
			case 29: UEDATX = *buffer++;
 262:	25 fd       	sbrc	r18, 5
 264:	03 c0       	rjmp	.+6      	; 0x26c <m_usb_tx_char+0x2e>
 266:	9f bf       	out	0x3f, r25	; 63
 268:	8f ef       	ldi	r24, 0xFF	; 255
			case 28: UEDATX = *buffer++;
 26a:	42 c0       	rjmp	.+132    	; 0x2f0 <m_usb_tx_char+0xb2>
 26c:	10 92 0b 01 	sts	0x010B, r1
 270:	30 91 e4 00 	lds	r19, 0x00E4
			case 27: UEDATX = *buffer++;
 274:	37 5e       	subi	r19, 0xE7	; 231
 276:	20 91 e8 00 	lds	r18, 0x00E8
 27a:	25 fd       	sbrc	r18, 5
 27c:	25 c0       	rjmp	.+74     	; 0x2c8 <m_usb_tx_char+0x8a>
			case 26: UEDATX = *buffer++;
 27e:	9f bf       	out	0x3f, r25	; 63
 280:	90 91 e4 00 	lds	r25, 0x00E4
 284:	93 17       	cp	r25, r19
 286:	49 f0       	breq	.+18     	; 0x29a <m_usb_tx_char+0x5c>
			case 25: UEDATX = *buffer++;
 288:	90 91 09 01 	lds	r25, 0x0109
 28c:	91 11       	cpse	r25, r1
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <m_usb_tx_char+0x70>
 290:	2c c0       	rjmp	.+88     	; 0x2ea <m_usb_tx_char+0xac>
			case 24: UEDATX = *buffer++;
 292:	9f bf       	out	0x3f, r25	; 63
 294:	98 81       	ld	r25, Y
 296:	93 13       	cpse	r25, r19
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <m_usb_tx_char+0x66>
 29a:	81 e0       	ldi	r24, 0x01	; 1
			case 23: UEDATX = *buffer++;
 29c:	80 93 0b 01 	sts	0x010B, r24
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	26 c0       	rjmp	.+76     	; 0x2f0 <m_usb_tx_char+0xb2>
 2a4:	90 91 09 01 	lds	r25, 0x0109
			case 22: UEDATX = *buffer++;
 2a8:	91 11       	cpse	r25, r1
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <m_usb_tx_char+0x7e>
 2ac:	20 c0       	rjmp	.+64     	; 0x2ee <m_usb_tx_char+0xb0>
 2ae:	a9 ee       	ldi	r26, 0xE9	; 233
			case 21: UEDATX = *buffer++;
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	44 e0       	ldi	r20, 0x04	; 4
 2b4:	e8 ee       	ldi	r30, 0xE8	; 232
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	c4 ee       	ldi	r28, 0xE4	; 228
			case 20: UEDATX = *buffer++;
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
 2bc:	9f b7       	in	r25, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	4c 93       	st	X, r20
 2c2:	20 81       	ld	r18, Z
			case 19: UEDATX = *buffer++;
 2c4:	25 ff       	sbrs	r18, 5
 2c6:	e5 cf       	rjmp	.-54     	; 0x292 <m_usb_tx_char+0x54>
 2c8:	80 93 f1 00 	sts	0x00F1, r24
 2cc:	80 91 e8 00 	lds	r24, 0x00E8
			case 18: UEDATX = *buffer++;
 2d0:	85 fd       	sbrc	r24, 5
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <m_usb_tx_char+0x9c>
 2d4:	8a e3       	ldi	r24, 0x3A	; 58
 2d6:	80 93 e8 00 	sts	0x00E8, r24
			case 17: UEDATX = *buffer++;
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	80 93 08 01 	sts	0x0108, r24
 2e0:	9f bf       	out	0x3f, r25	; 63
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <m_usb_tx_char+0xb2>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <m_usb_tx_char+0xb2>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
			case 15: UEDATX = *buffer++;
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <m_usb_tx_char+0xb2>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <__vector_10>:
			case 14: UEDATX = *buffer++;
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
			case 13: UEDATX = *buffer++;
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
 308:	e1 ee       	ldi	r30, 0xE1	; 225
			case 12: UEDATX = *buffer++;
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	10 82       	st	Z, r1
 310:	83 ff       	sbrs	r24, 3
 312:	11 c0       	rjmp	.+34     	; 0x336 <__vector_10+0x40>
			case 11: UEDATX = *buffer++;
 314:	10 92 e9 00 	sts	0x00E9, r1
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	90 93 eb 00 	sts	0x00EB, r25
			case 10: UEDATX = *buffer++;
 31e:	10 92 ec 00 	sts	0x00EC, r1
 322:	92 e1       	ldi	r25, 0x12	; 18
 324:	90 93 ed 00 	sts	0x00ED, r25
			case  9: UEDATX = *buffer++;
 328:	98 e0       	ldi	r25, 0x08	; 8
 32a:	90 93 f0 00 	sts	0x00F0, r25
 32e:	10 92 09 01 	sts	0x0109, r1
			#endif
			case  8: UEDATX = *buffer++;
 332:	10 92 0a 01 	sts	0x010A, r1
 336:	82 ff       	sbrs	r24, 2
 338:	13 c0       	rjmp	.+38     	; 0x360 <__vector_10+0x6a>
 33a:	80 91 09 01 	lds	r24, 0x0109
			case  7: UEDATX = *buffer++;
 33e:	88 23       	and	r24, r24
 340:	79 f0       	breq	.+30     	; 0x360 <__vector_10+0x6a>
 342:	80 91 08 01 	lds	r24, 0x0108
			case  6: UEDATX = *buffer++;
 346:	88 23       	and	r24, r24
 348:	59 f0       	breq	.+22     	; 0x360 <__vector_10+0x6a>
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	80 93 08 01 	sts	0x0108, r24
			case  5: UEDATX = *buffer++;
 350:	81 11       	cpse	r24, r1
 352:	06 c0       	rjmp	.+12     	; 0x360 <__vector_10+0x6a>
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	80 93 e9 00 	sts	0x00E9, r24
			case  4: UEDATX = *buffer++;
 35a:	8a e3       	ldi	r24, 0x3A	; 58
 35c:	80 93 e8 00 	sts	0x00E8, r24
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
			case  3: UEDATX = *buffer++;
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
			case  2: UEDATX = *buffer++;
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_11>:
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
			default:
			case  1: UEDATX = *buffer++;
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	2f 93       	push	r18
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	cf 93       	push	r28
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 396:	df 93       	push	r29
	return 0;
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 39c:	10 92 e9 00 	sts	0x00E9, r1
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
 3a4:	83 ff       	sbrs	r24, 3
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 3a6:	51 c1       	rjmp	.+674    	; 0x64a <__vector_11+0x2d8>
 3a8:	e1 ef       	ldi	r30, 0xF1	; 241
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	70 81       	ld	r23, Z
 3ae:	40 81       	ld	r20, Z
 3b0:	20 81       	ld	r18, Z
 3b2:	30 81       	ld	r19, Z
 3b4:	93 2f       	mov	r25, r19
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	dc 01       	movw	r26, r24
 3ba:	a2 2b       	or	r26, r18
 3bc:	9d 01       	movw	r18, r26
 3be:	50 81       	ld	r21, Z
 3c0:	60 81       	ld	r22, Z
 3c2:	96 2f       	mov	r25, r22
                bmRequestType = UEDATX;
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	85 2b       	or	r24, r21
                wLength = UEDATX;
 3c8:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
 3ca:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 3cc:	52 ef       	ldi	r21, 0xF2	; 242
 3ce:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
 3d2:	46 30       	cpi	r20, 0x06	; 6
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <__vector_11+0x66>
 3d6:	5c c0       	rjmp	.+184    	; 0x490 <__vector_11+0x11e>
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 3da:	81 e2       	ldi	r24, 0x21	; 33
 3dc:	80 93 eb 00 	sts	0x00EB, r24
					return;
 3e0:	3b c1       	rjmp	.+630    	; 0x658 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
 3e2:	c6 e0       	ldi	r28, 0x06	; 6
 3e4:	4c ea       	ldi	r20, 0xAC	; 172
 3e6:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 3e8:	fa 01       	movw	r30, r20
 3ea:	65 91       	lpm	r22, Z+
 3ec:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
 3ee:	26 17       	cp	r18, r22
 3f0:	37 07       	cpc	r19, r23
 3f2:	19 f0       	breq	.+6      	; 0x3fa <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
 3f4:	49 5f       	subi	r20, 0xF9	; 249
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 3f8:	20 c0       	rjmp	.+64     	; 0x43a <__vector_11+0xc8>
				}
				list += 2;
 3fa:	fa 01       	movw	r30, r20
 3fc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 3fe:	65 91       	lpm	r22, Z+
 400:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
 402:	86 17       	cp	r24, r22
 404:	97 07       	cpc	r25, r23
 406:	19 f0       	breq	.+6      	; 0x40e <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
 408:	49 5f       	subi	r20, 0xF9	; 249
 40a:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
 40c:	16 c0       	rjmp	.+44     	; 0x43a <__vector_11+0xc8>
				}
				list += 2;
 40e:	fa 01       	movw	r30, r20
 410:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 412:	85 91       	lpm	r24, Z+
 414:	94 91       	lpm	r25, Z
 416:	28 2f       	mov	r18, r24
 418:	39 2f       	mov	r19, r25
				list += 2;
 41a:	fa 01       	movw	r30, r20
 41c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 41e:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 420:	9b 2f       	mov	r25, r27
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 426:	8f 3f       	cpi	r24, 0xFF	; 255
 428:	91 05       	cpc	r25, r1
 42a:	19 f0       	breq	.+6      	; 0x432 <__vector_11+0xc0>
 42c:	10 f0       	brcs	.+4      	; 0x432 <__vector_11+0xc0>
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	84 17       	cp	r24, r20
 434:	28 f4       	brcc	.+10     	; 0x440 <__vector_11+0xce>
 436:	48 2f       	mov	r20, r24
 438:	03 c0       	rjmp	.+6      	; 0x440 <__vector_11+0xce>
 43a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 43c:	a9 f6       	brne	.-86     	; 0x3e8 <__vector_11+0x76>
 43e:	cd cf       	rjmp	.-102    	; 0x3da <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 440:	c8 ee       	ldi	r28, 0xE8	; 232
 442:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 444:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 446:	a1 ef       	ldi	r26, 0xF1	; 241
 448:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 44a:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 44c:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 44e:	98 2f       	mov	r25, r24
 450:	95 70       	andi	r25, 0x05	; 5
 452:	e1 f3       	breq	.-8      	; 0x44c <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
 454:	82 fd       	sbrc	r24, 2
 456:	00 c1       	rjmp	.+512    	; 0x658 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 458:	64 2f       	mov	r22, r20
 45a:	41 31       	cpi	r20, 0x11	; 17
 45c:	08 f0       	brcs	.+2      	; 0x460 <__vector_11+0xee>
 45e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
 460:	66 23       	and	r22, r22
 462:	09 f4       	brne	.+2      	; 0x466 <__vector_11+0xf4>
 464:	f6 c0       	rjmp	.+492    	; 0x652 <__vector_11+0x2e0>
 466:	c9 01       	movw	r24, r18
 468:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
 46a:	fc 01       	movw	r30, r24
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	e4 91       	lpm	r30, Z
 470:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 472:	51 50       	subi	r21, 0x01	; 1
 474:	d1 f7       	brne	.-12     	; 0x46a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 476:	86 2f       	mov	r24, r22
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	28 0f       	add	r18, r24
 480:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 482:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 484:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 486:	41 11       	cpse	r20, r1
 488:	e1 cf       	rjmp	.-62     	; 0x44c <__vector_11+0xda>
 48a:	60 31       	cpi	r22, 0x10	; 16
 48c:	f9 f2       	breq	.-66     	; 0x44c <__vector_11+0xda>
 48e:	e4 c0       	rjmp	.+456    	; 0x658 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 490:	45 30       	cpi	r20, 0x05	; 5
 492:	61 f4       	brne	.+24     	; 0x4ac <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 494:	8e ef       	ldi	r24, 0xFE	; 254
 496:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 49a:	e8 ee       	ldi	r30, 0xE8	; 232
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	80 ff       	sbrs	r24, 0
 4a2:	fd cf       	rjmp	.-6      	; 0x49e <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 4a4:	20 68       	ori	r18, 0x80	; 128
 4a6:	20 93 e3 00 	sts	0x00E3, r18
			return;
 4aa:	d6 c0       	rjmp	.+428    	; 0x658 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 4ac:	49 30       	cpi	r20, 0x09	; 9
 4ae:	a1 f5       	brne	.+104    	; 0x518 <__vector_11+0x1a6>
 4b0:	71 11       	cpse	r23, r1
 4b2:	5b c0       	rjmp	.+182    	; 0x56a <__vector_11+0x1f8>
			usb_configuration = wValue;
 4b4:	20 93 09 01 	sts	0x0109, r18
			cdc_line_rtsdtr = 0;
 4b8:	10 92 0a 01 	sts	0x010A, r1
			transmit_flush_timer = 0;
 4bc:	10 92 08 01 	sts	0x0108, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4c0:	8e ef       	ldi	r24, 0xFE	; 254
 4c2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4c6:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 4c8:	86 ed       	ldi	r24, 0xD6	; 214
 4ca:	90 e0       	ldi	r25, 0x00	; 0
			for (i=1; i<5; i++) {
				UENUM = i;
 4cc:	c9 ee       	ldi	r28, 0xE9	; 233
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 4d0:	ab ee       	ldi	r26, 0xEB	; 235
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 4d4:	6c ee       	ldi	r22, 0xEC	; 236
 4d6:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 4d8:	4d ee       	ldi	r20, 0xED	; 237
 4da:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 4dc:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
 4de:	9c 01       	movw	r18, r24
 4e0:	2f 5f       	subi	r18, 0xFF	; 255
 4e2:	3f 4f       	sbci	r19, 0xFF	; 255
 4e4:	fc 01       	movw	r30, r24
 4e6:	04 91       	lpm	r16, Z
				UECONX = en;
 4e8:	0c 93       	st	X, r16
				if (en) {
 4ea:	00 23       	and	r16, r16
 4ec:	59 f0       	breq	.+22     	; 0x504 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
 4ee:	f9 01       	movw	r30, r18
 4f0:	24 91       	lpm	r18, Z
 4f2:	fb 01       	movw	r30, r22
 4f4:	20 83       	st	Z, r18
 4f6:	fc 01       	movw	r30, r24
 4f8:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
 4fa:	03 96       	adiw	r24, 0x03	; 3
 4fc:	24 91       	lpm	r18, Z
 4fe:	fa 01       	movw	r30, r20
 500:	20 83       	st	Z, r18
 502:	01 c0       	rjmp	.+2      	; 0x506 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 504:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 506:	1f 5f       	subi	r17, 0xFF	; 255
 508:	15 30       	cpi	r17, 0x05	; 5
 50a:	41 f7       	brne	.-48     	; 0x4dc <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 50c:	ea ee       	ldi	r30, 0xEA	; 234
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	8e e1       	ldi	r24, 0x1E	; 30
 512:	80 83       	st	Z, r24
        		UERST = 0;
 514:	10 82       	st	Z, r1
			return;
 516:	a0 c0       	rjmp	.+320    	; 0x658 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 518:	48 30       	cpi	r20, 0x08	; 8
 51a:	81 f4       	brne	.+32     	; 0x53c <__vector_11+0x1ca>
 51c:	70 38       	cpi	r23, 0x80	; 128
 51e:	09 f0       	breq	.+2      	; 0x522 <__vector_11+0x1b0>
 520:	3f c0       	rjmp	.+126    	; 0x5a0 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 522:	e8 ee       	ldi	r30, 0xE8	; 232
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	80 ff       	sbrs	r24, 0
 52a:	fd cf       	rjmp	.-6      	; 0x526 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 52c:	80 91 09 01 	lds	r24, 0x0109
 530:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 534:	8e ef       	ldi	r24, 0xFE	; 254
 536:	80 93 e8 00 	sts	0x00E8, r24
 53a:	8e c0       	rjmp	.+284    	; 0x658 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 53c:	41 32       	cpi	r20, 0x21	; 33
 53e:	a9 f4       	brne	.+42     	; 0x56a <__vector_11+0x1f8>
 540:	71 3a       	cpi	r23, 0xA1	; 161
 542:	f1 f5       	brne	.+124    	; 0x5c0 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 544:	e8 ee       	ldi	r30, 0xE8	; 232
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	80 ff       	sbrs	r24, 0
 54c:	fd cf       	rjmp	.-6      	; 0x548 <__vector_11+0x1d6>
 54e:	e0 e0       	ldi	r30, 0x00	; 0
 550:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 552:	a1 ef       	ldi	r26, 0xF1	; 241
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	81 91       	ld	r24, Z+
 558:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	e7 30       	cpi	r30, 0x07	; 7
 55e:	f4 07       	cpc	r31, r20
 560:	d1 f7       	brne	.-12     	; 0x556 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 562:	8e ef       	ldi	r24, 0xFE	; 254
 564:	80 93 e8 00 	sts	0x00E8, r24
 568:	77 c0       	rjmp	.+238    	; 0x658 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 56a:	40 32       	cpi	r20, 0x20	; 32
 56c:	c9 f4       	brne	.+50     	; 0x5a0 <__vector_11+0x22e>
 56e:	71 32       	cpi	r23, 0x21	; 33
 570:	09 f0       	breq	.+2      	; 0x574 <__vector_11+0x202>
 572:	6b c0       	rjmp	.+214    	; 0x64a <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 574:	e8 ee       	ldi	r30, 0xE8	; 232
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	82 ff       	sbrs	r24, 2
 57c:	fd cf       	rjmp	.-6      	; 0x578 <__vector_11+0x206>
 57e:	e0 e0       	ldi	r30, 0x00	; 0
 580:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 582:	a1 ef       	ldi	r26, 0xF1	; 241
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	8c 91       	ld	r24, X
 588:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 58a:	51 e0       	ldi	r21, 0x01	; 1
 58c:	e7 30       	cpi	r30, 0x07	; 7
 58e:	f5 07       	cpc	r31, r21
 590:	d1 f7       	brne	.-12     	; 0x586 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 592:	e8 ee       	ldi	r30, 0xE8	; 232
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	8b ef       	ldi	r24, 0xFB	; 251
 598:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 59a:	8e ef       	ldi	r24, 0xFE	; 254
 59c:	80 83       	st	Z, r24
 59e:	5c c0       	rjmp	.+184    	; 0x658 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 5a0:	42 32       	cpi	r20, 0x22	; 34
 5a2:	71 f4       	brne	.+28     	; 0x5c0 <__vector_11+0x24e>
 5a4:	71 32       	cpi	r23, 0x21	; 33
 5a6:	09 f0       	breq	.+2      	; 0x5aa <__vector_11+0x238>
 5a8:	50 c0       	rjmp	.+160    	; 0x64a <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
 5aa:	20 93 0a 01 	sts	0x010A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5ae:	e8 ee       	ldi	r30, 0xE8	; 232
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	80 ff       	sbrs	r24, 0
 5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b8:	8e ef       	ldi	r24, 0xFE	; 254
 5ba:	80 93 e8 00 	sts	0x00E8, r24
 5be:	4c c0       	rjmp	.+152    	; 0x658 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 5c0:	41 11       	cpse	r20, r1
 5c2:	1a c0       	rjmp	.+52     	; 0x5f8 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5c4:	e8 ee       	ldi	r30, 0xE8	; 232
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	20 81       	ld	r18, Z
 5ca:	20 ff       	sbrs	r18, 0
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 5ce:	72 38       	cpi	r23, 0x82	; 130
 5d0:	51 f4       	brne	.+20     	; 0x5e6 <__vector_11+0x274>
				UENUM = wIndex;
 5d2:	e9 ee       	ldi	r30, 0xE9	; 233
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
 5d8:	80 91 eb 00 	lds	r24, 0x00EB
 5dc:	85 fb       	bst	r24, 5
 5de:	88 27       	eor	r24, r24
 5e0:	80 f9       	bld	r24, 0
				UENUM = 0;
 5e2:	10 82       	st	Z, r1
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 5e8:	e1 ef       	ldi	r30, 0xF1	; 241
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 83       	st	Z, r24
			UEDATX = 0;
 5ee:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f0:	8e ef       	ldi	r24, 0xFE	; 254
 5f2:	80 93 e8 00 	sts	0x00E8, r24
 5f6:	30 c0       	rjmp	.+96     	; 0x658 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 5f8:	41 30       	cpi	r20, 0x01	; 1
 5fa:	11 f0       	breq	.+4      	; 0x600 <__vector_11+0x28e>
 5fc:	43 30       	cpi	r20, 0x03	; 3
 5fe:	29 f5       	brne	.+74     	; 0x64a <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
 600:	72 30       	cpi	r23, 0x02	; 2
 602:	19 f5       	brne	.+70     	; 0x64a <__vector_11+0x2d8>
 604:	23 2b       	or	r18, r19
 606:	09 f5       	brne	.+66     	; 0x64a <__vector_11+0x2d8>
			i = wIndex & 0x7F;
 608:	8f 77       	andi	r24, 0x7F	; 127
 60a:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
 60c:	38 2f       	mov	r19, r24
 60e:	31 50       	subi	r19, 0x01	; 1
 610:	34 30       	cpi	r19, 0x04	; 4
 612:	d8 f4       	brcc	.+54     	; 0x64a <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 614:	3e ef       	ldi	r19, 0xFE	; 254
 616:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 61a:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
 61e:	43 30       	cpi	r20, 0x03	; 3
 620:	21 f4       	brne	.+8      	; 0x62a <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 622:	81 e2       	ldi	r24, 0x21	; 33
 624:	80 93 eb 00 	sts	0x00EB, r24
 628:	17 c0       	rjmp	.+46     	; 0x658 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 62a:	99 e1       	ldi	r25, 0x19	; 25
 62c:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	d9 01       	movw	r26, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <__vector_11+0x2ca>
 638:	aa 0f       	add	r26, r26
 63a:	bb 1f       	adc	r27, r27
 63c:	8a 95       	dec	r24
 63e:	e2 f7       	brpl	.-8      	; 0x638 <__vector_11+0x2c6>
 640:	ea ee       	ldi	r30, 0xEA	; 234
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	a0 83       	st	Z, r26
					UERST = 0;
 646:	10 82       	st	Z, r1
 648:	07 c0       	rjmp	.+14     	; 0x658 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 64a:	81 e2       	ldi	r24, 0x21	; 33
 64c:	80 93 eb 00 	sts	0x00EB, r24
 650:	03 c0       	rjmp	.+6      	; 0x658 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 652:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 654:	41 11       	cpse	r20, r1
 656:	fa ce       	rjmp	.-524    	; 0x44c <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	27 97       	sbiw	r28, 0x07	; 7
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 69e:	8e 01       	movw	r16, r28
 6a0:	0f 5f       	subi	r16, 0xFF	; 255
 6a2:	1f 4f       	sbci	r17, 0xFF	; 255
 6a4:	27 e0       	ldi	r18, 0x07	; 7
 6a6:	f8 01       	movw	r30, r16
 6a8:	11 92       	st	Z+, r1
 6aa:	2a 95       	dec	r18
 6ac:	e9 f7       	brne	.-6      	; 0x6a8 <m_usb_tx_int+0x26>
	itoa(i,string,10);
 6ae:	4a e0       	ldi	r20, 0x0A	; 10
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	b8 01       	movw	r22, r16
 6b4:	0e 94 c7 04 	call	0x98e	; 0x98e <itoa>
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
 6b8:	7e 01       	movw	r14, r28
 6ba:	f8 e0       	ldi	r31, 0x08	; 8
 6bc:	ef 0e       	add	r14, r31
 6be:	f1 1c       	adc	r15, r1
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 6c0:	f8 01       	movw	r30, r16
 6c2:	81 91       	ld	r24, Z+
 6c4:	8f 01       	movw	r16, r30
 6c6:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 6c8:	0e 94 1f 01 	call	0x23e	; 0x23e <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 6cc:	0e 15       	cp	r16, r14
 6ce:	1f 05       	cpc	r17, r15
 6d0:	b9 f7       	brne	.-18     	; 0x6c0 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 6d2:	27 96       	adiw	r28, 0x07	; 7
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	08 95       	ret

000006ec <chooseInput>:

int i = 0;
int ADCarr[7] = {0, 0, 0, 0, 0, 0, 0};

void chooseInput(int i) {
	switch (i) {
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	91 05       	cpc	r25, r1
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <chooseInput+0x8>
 6f2:	45 c0       	rjmp	.+138    	; 0x77e <chooseInput+0x92>
 6f4:	3c f4       	brge	.+14     	; 0x704 <chooseInput+0x18>
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	91 05       	cpc	r25, r1
 6fa:	f9 f0       	breq	.+62     	; 0x73a <chooseInput+0x4e>
 6fc:	7c f5       	brge	.+94     	; 0x75c <chooseInput+0x70>
 6fe:	89 2b       	or	r24, r25
 700:	59 f0       	breq	.+22     	; 0x718 <chooseInput+0x2c>
 702:	81 c0       	rjmp	.+258    	; 0x806 <chooseInput+0x11a>
 704:	85 30       	cpi	r24, 0x05	; 5
 706:	91 05       	cpc	r25, r1
 708:	09 f4       	brne	.+2      	; 0x70c <chooseInput+0x20>
 70a:	5b c0       	rjmp	.+182    	; 0x7c2 <chooseInput+0xd6>
 70c:	0c f4       	brge	.+2      	; 0x710 <chooseInput+0x24>
 70e:	48 c0       	rjmp	.+144    	; 0x7a0 <chooseInput+0xb4>
 710:	06 97       	sbiw	r24, 0x06	; 6
 712:	09 f0       	breq	.+2      	; 0x716 <chooseInput+0x2a>
 714:	78 c0       	rjmp	.+240    	; 0x806 <chooseInput+0x11a>
 716:	66 c0       	rjmp	.+204    	; 0x7e4 <chooseInput+0xf8>
		case 0:
		clear(ADCSRB, MUX5);//Set analog input (F6) PHOTOTRANSISTOR 1
 718:	eb e7       	ldi	r30, 0x7B	; 123
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	8f 7d       	andi	r24, 0xDF	; 223
 720:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 722:	ec e7       	ldi	r30, 0x7C	; 124
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	84 60       	ori	r24, 0x04	; 4
 72a:	80 83       	st	Z, r24
		set(ADMUX, MUX1);	//^
 72c:	80 81       	ld	r24, Z
 72e:	82 60       	ori	r24, 0x02	; 2
 730:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 732:	80 81       	ld	r24, Z
 734:	8e 7f       	andi	r24, 0xFE	; 254
 736:	80 83       	st	Z, r24
		break;
 738:	08 95       	ret
		case 1:
		clear(ADCSRB, MUX5);//Set analog input (F5)
 73a:	eb e7       	ldi	r30, 0x7B	; 123
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	8f 7d       	andi	r24, 0xDF	; 223
 742:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 744:	ec e7       	ldi	r30, 0x7C	; 124
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	84 60       	ori	r24, 0x04	; 4
 74c:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 74e:	80 81       	ld	r24, Z
 750:	8d 7f       	andi	r24, 0xFD	; 253
 752:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 754:	80 81       	ld	r24, Z
 756:	81 60       	ori	r24, 0x01	; 1
 758:	80 83       	st	Z, r24
		break;
 75a:	08 95       	ret
		case 2:
		clear(ADCSRB, MUX5);//Set analog input (F4)
 75c:	eb e7       	ldi	r30, 0x7B	; 123
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8f 7d       	andi	r24, 0xDF	; 223
 764:	80 83       	st	Z, r24
		set(ADMUX, MUX2);	//^
 766:	ec e7       	ldi	r30, 0x7C	; 124
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	84 60       	ori	r24, 0x04	; 4
 76e:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 770:	80 81       	ld	r24, Z
 772:	8d 7f       	andi	r24, 0xFD	; 253
 774:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 776:	80 81       	ld	r24, Z
 778:	8e 7f       	andi	r24, 0xFE	; 254
 77a:	80 83       	st	Z, r24
		break;
 77c:	08 95       	ret
		case 3:
		clear(ADCSRB, MUX5);//Set analog input (F1)
 77e:	eb e7       	ldi	r30, 0x7B	; 123
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	8f 7d       	andi	r24, 0xDF	; 223
 786:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 788:	ec e7       	ldi	r30, 0x7C	; 124
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	8b 7f       	andi	r24, 0xFB	; 251
 790:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 792:	80 81       	ld	r24, Z
 794:	8d 7f       	andi	r24, 0xFD	; 253
 796:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 798:	80 81       	ld	r24, Z
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	80 83       	st	Z, r24
		break;
 79e:	08 95       	ret
		case 4:
		clear(ADCSRB, MUX5);//Set analog input (F0)
 7a0:	eb e7       	ldi	r30, 0x7B	; 123
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	8f 7d       	andi	r24, 0xDF	; 223
 7a8:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 7aa:	ec e7       	ldi	r30, 0x7C	; 124
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	8b 7f       	andi	r24, 0xFB	; 251
 7b2:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 7b4:	80 81       	ld	r24, Z
 7b6:	8d 7f       	andi	r24, 0xFD	; 253
 7b8:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 7ba:	80 81       	ld	r24, Z
 7bc:	8e 7f       	andi	r24, 0xFE	; 254
 7be:	80 83       	st	Z, r24
		break;
 7c0:	08 95       	ret
		case 5:
		set(ADCSRB, MUX5);//Set analog input (D4)
 7c2:	eb e7       	ldi	r30, 0x7B	; 123
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	80 62       	ori	r24, 0x20	; 32
 7ca:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 7cc:	ec e7       	ldi	r30, 0x7C	; 124
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	8b 7f       	andi	r24, 0xFB	; 251
 7d4:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 7d6:	80 81       	ld	r24, Z
 7d8:	8d 7f       	andi	r24, 0xFD	; 253
 7da:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 7dc:	80 81       	ld	r24, Z
 7de:	8e 7f       	andi	r24, 0xFE	; 254
 7e0:	80 83       	st	Z, r24
		break;
 7e2:	08 95       	ret
		case 6:
		set(ADCSRB, MUX5);//Set analog input (D6)
 7e4:	eb e7       	ldi	r30, 0x7B	; 123
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	80 62       	ori	r24, 0x20	; 32
 7ec:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 7ee:	ec e7       	ldi	r30, 0x7C	; 124
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	8b 7f       	andi	r24, 0xFB	; 251
 7f6:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 7f8:	80 81       	ld	r24, Z
 7fa:	8d 7f       	andi	r24, 0xFD	; 253
 7fc:	80 83       	st	Z, r24
		set(ADMUX, MUX0);	//^
 7fe:	80 81       	ld	r24, Z
 800:	81 60       	ori	r24, 0x01	; 1
 802:	80 83       	st	Z, r24
		break;
 804:	08 95       	ret
		default:
		i = 0;
		clear(ADCSRB, MUX5);//Set analog input (F0)
 806:	eb e7       	ldi	r30, 0x7B	; 123
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	8f 7d       	andi	r24, 0xDF	; 223
 80e:	80 83       	st	Z, r24
		clear(ADMUX, MUX2);	//^
 810:	ec e7       	ldi	r30, 0x7C	; 124
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	8b 7f       	andi	r24, 0xFB	; 251
 818:	80 83       	st	Z, r24
		clear(ADMUX, MUX1);	//^
 81a:	80 81       	ld	r24, Z
 81c:	8d 7f       	andi	r24, 0xFD	; 253
 81e:	80 83       	st	Z, r24
		clear(ADMUX, MUX0);	//^
 820:	80 81       	ld	r24, Z
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	80 83       	st	Z, r24
 826:	08 95       	ret

00000828 <main>:


int main(void)
{
	
	m_clockdivide(0);
 828:	a1 e6       	ldi	r26, 0x61	; 97
 82a:	b0 e0       	ldi	r27, 0x00	; 0
 82c:	80 e8       	ldi	r24, 0x80	; 128
 82e:	8c 93       	st	X, r24
 830:	1c 92       	st	X, r1
	
	
	sei();					//Set up interrupts
 832:	78 94       	sei
	set(ADCSRA, ADIE);
 834:	ea e7       	ldi	r30, 0x7A	; 122
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	90 81       	ld	r25, Z
 83a:	98 60       	ori	r25, 0x08	; 8
 83c:	90 83       	st	Z, r25
	
	clear(ADMUX, REFS1);	//Voltage reference is AR pin (5V)
 83e:	cc e7       	ldi	r28, 0x7C	; 124
 840:	d0 e0       	ldi	r29, 0x00	; 0
 842:	98 81       	ld	r25, Y
 844:	9f 77       	andi	r25, 0x7F	; 127
 846:	98 83       	st	Y, r25
	clear(ADMUX, REFS0);	//^
 848:	98 81       	ld	r25, Y
 84a:	9f 7b       	andi	r25, 0xBF	; 191
 84c:	98 83       	st	Y, r25
	
	set(ADCSRA, ADPS2);	//Set scale to /128
 84e:	90 81       	ld	r25, Z
 850:	94 60       	ori	r25, 0x04	; 4
 852:	90 83       	st	Z, r25
	set(ADCSRA, ADPS1);	//^
 854:	90 81       	ld	r25, Z
 856:	92 60       	ori	r25, 0x02	; 2
 858:	90 83       	st	Z, r25
	set(ADCSRA, ADPS0);	//^
 85a:	90 81       	ld	r25, Z
 85c:	91 60       	ori	r25, 0x01	; 1
 85e:	90 83       	st	Z, r25
	
	set(DIDR0, ADC0D);	//Disable digital input for F0
 860:	ce e7       	ldi	r28, 0x7E	; 126
 862:	d0 e0       	ldi	r29, 0x00	; 0
 864:	98 81       	ld	r25, Y
 866:	91 60       	ori	r25, 0x01	; 1
 868:	98 83       	st	Y, r25
	
	set(ADCSRA, ADATE);	//Set trigger to free-running mode
 86a:	90 81       	ld	r25, Z
 86c:	90 62       	ori	r25, 0x20	; 32
 86e:	90 83       	st	Z, r25
	
	set(ADCSRA, ADEN);	//Enable/Start conversion
 870:	90 81       	ld	r25, Z
 872:	90 68       	ori	r25, 0x80	; 128
 874:	90 83       	st	Z, r25
	set(ADCSRA, ADSC);	//^
 876:	90 81       	ld	r25, Z
 878:	90 64       	ori	r25, 0x40	; 64
 87a:	90 83       	st	Z, r25
	
	set(ADCSRA, ADIF);	//Enable reading results
 87c:	90 81       	ld	r25, Z
 87e:	90 61       	ori	r25, 0x10	; 16
 880:	90 83       	st	Z, r25
	
	//MATLAB PLOTTING STUFFS*****************************************************************
	m_clockdivide(0);
 882:	8c 93       	st	X, r24
 884:	1c 92       	st	X, r1
	
	
	m_red(ON);
 886:	6e 9a       	sbi	0x0d, 6	; 13
 888:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
 88a:	6a 9a       	sbi	0x0d, 2	; 13
 88c:	72 98       	cbi	0x0e, 2	; 14

	m_usb_init(); // connect usb
 88e:	0e 94 cf 00 	call	0x19e	; 0x19e <m_usb_init>
	while(!m_usb_isconnected());  //wait for connection
 892:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <m_usb_isconnected>
 896:	88 23       	and	r24, r24
 898:	e1 f3       	breq	.-8      	; 0x892 <main+0x6a>

	m_red(OFF);
 89a:	6e 9a       	sbi	0x0d, 6	; 13
 89c:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
 89e:	6a 9a       	sbi	0x0d, 2	; 13
 8a0:	72 9a       	sbi	0x0e, 2	; 14
	
	long counter = 0;

	while(1){
		
	m_green(TOGGLE);		
 8a2:	68 94       	set
 8a4:	aa 24       	eor	r10, r10
 8a6:	a2 f8       	bld	r10, 2
					if (i < 7 && i >= 0) {
						ADCarr[i] = (int) ADC;
 8a8:	0f 2e       	mov	r0, r31
 8aa:	f8 e7       	ldi	r31, 0x78	; 120
 8ac:	ef 2e       	mov	r14, r31
 8ae:	f1 2c       	mov	r15, r1
 8b0:	f0 2d       	mov	r31, r0
					}
					i++;
					clear(ADCSRA, ADEN);	//Enable/Start conversion
 8b2:	ca e7       	ldi	r28, 0x7A	; 122
 8b4:	d0 e0       	ldi	r29, 0x00	; 0
					set(ADCSRA, ADEN);	//Enable/Start conversion
					set(ADCSRA, ADSC);	//^
					
					set(ADCSRA, ADIF);	//Enable reading results
					m_wait(500);
					m_red(TOGGLE);
 8b6:	68 94       	set
 8b8:	bb 24       	eor	r11, r11
 8ba:	b6 f8       	bld	r11, 6
		counter = 0;
		
		}
		counter++;*/
		
		if(rx_buffer == 1) {  			//computer wants ir buffer
 8bc:	0f 2e       	mov	r0, r31
 8be:	f7 e0       	ldi	r31, 0x07	; 7
 8c0:	cf 2e       	mov	r12, r31
 8c2:	d1 2c       	mov	r13, r1
 8c4:	f0 2d       	mov	r31, r0
	
	long counter = 0;

	while(1){
		
	m_green(TOGGLE);		
 8c6:	6a 9a       	sbi	0x0d, 2	; 13
 8c8:	8e b1       	in	r24, 0x0e	; 14
 8ca:	8a 25       	eor	r24, r10
 8cc:	8e b9       	out	0x0e, r24	; 14
					if (i < 7 && i >= 0) {
 8ce:	80 91 1a 01 	lds	r24, 0x011A
 8d2:	90 91 1b 01 	lds	r25, 0x011B
 8d6:	87 30       	cpi	r24, 0x07	; 7
 8d8:	91 05       	cpc	r25, r1
 8da:	50 f4       	brcc	.+20     	; 0x8f0 <main+0xc8>
						ADCarr[i] = (int) ADC;
 8dc:	f7 01       	movw	r30, r14
 8de:	20 81       	ld	r18, Z
 8e0:	31 81       	ldd	r19, Z+1	; 0x01
 8e2:	fc 01       	movw	r30, r24
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	e4 5f       	subi	r30, 0xF4	; 244
 8ea:	fe 4f       	sbci	r31, 0xFE	; 254
 8ec:	31 83       	std	Z+1, r19	; 0x01
 8ee:	20 83       	st	Z, r18
					}
					i++;
 8f0:	01 96       	adiw	r24, 0x01	; 1
 8f2:	90 93 1b 01 	sts	0x011B, r25
 8f6:	80 93 1a 01 	sts	0x011A, r24
					clear(ADCSRA, ADEN);	//Enable/Start conversion
 8fa:	28 81       	ld	r18, Y
 8fc:	2f 77       	andi	r18, 0x7F	; 127
 8fe:	28 83       	st	Y, r18
					clear(ADCSRA, ADSC);	//^
 900:	28 81       	ld	r18, Y
 902:	2f 7b       	andi	r18, 0xBF	; 191
 904:	28 83       	st	Y, r18
					chooseInput(i);
 906:	0e 94 76 03 	call	0x6ec	; 0x6ec <chooseInput>
					set(ADCSRA, ADATE);	//Set trigger to free-running mode
 90a:	88 81       	ld	r24, Y
 90c:	80 62       	ori	r24, 0x20	; 32
 90e:	88 83       	st	Y, r24
					set(ADCSRA, ADEN);	//Enable/Start conversion
 910:	88 81       	ld	r24, Y
 912:	80 68       	ori	r24, 0x80	; 128
 914:	88 83       	st	Y, r24
					set(ADCSRA, ADSC);	//^
 916:	88 81       	ld	r24, Y
 918:	80 64       	ori	r24, 0x40	; 64
 91a:	88 83       	st	Y, r24
					
					set(ADCSRA, ADIF);	//Enable reading results
 91c:	88 81       	ld	r24, Y
 91e:	80 61       	ori	r24, 0x10	; 16
 920:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 922:	ff ef       	ldi	r31, 0xFF	; 255
 924:	29 e6       	ldi	r18, 0x69	; 105
 926:	88 e1       	ldi	r24, 0x18	; 24
 928:	f1 50       	subi	r31, 0x01	; 1
 92a:	20 40       	sbci	r18, 0x00	; 0
 92c:	80 40       	sbci	r24, 0x00	; 0
 92e:	e1 f7       	brne	.-8      	; 0x928 <main+0x100>
 930:	00 c0       	rjmp	.+0      	; 0x932 <main+0x10a>
 932:	00 00       	nop
					m_wait(500);
					m_red(TOGGLE);
 934:	6e 9a       	sbi	0x0d, 6	; 13
 936:	8e b1       	in	r24, 0x0e	; 14
 938:	8b 25       	eor	r24, r11
 93a:	8e b9       	out	0x0e, r24	; 14
					
		

		//while(!m_usb_rx_available());  	//wait for an indication from the computer
		rx_buffer = m_usb_rx_char();  	//grab the computer packet
 93c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <m_usb_rx_char>
 940:	18 2f       	mov	r17, r24

		m_usb_rx_flush();  				//clear buffer
 942:	0e 94 09 01 	call	0x212	; 0x212 <m_usb_rx_flush>
		counter = 0;
		
		}
		counter++;*/
		
		if(rx_buffer == 1) {  			//computer wants ir buffer
 946:	11 30       	cpi	r17, 0x01	; 1
 948:	09 f0       	breq	.+2      	; 0x94c <main+0x124>
 94a:	bd cf       	rjmp	.-134    	; 0x8c6 <main+0x9e>
 94c:	86 01       	movw	r16, r12
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5

			for (int j = 0 ; j < 7 ; j++){
				m_usb_tx_int(ADCarr[i]);
 94e:	e0 91 1a 01 	lds	r30, 0x011A
 952:	f0 91 1b 01 	lds	r31, 0x011B
 956:	ee 0f       	add	r30, r30
 958:	ff 1f       	adc	r31, r31
 95a:	e4 5f       	subi	r30, 0xF4	; 244
 95c:	fe 4f       	sbci	r31, 0xFE	; 254
 95e:	80 81       	ld	r24, Z
 960:	91 81       	ldd	r25, Z+1	; 0x01
 962:	0e 94 41 03 	call	0x682	; 0x682 <m_usb_tx_int>
				m_usb_tx_char('\t');
 966:	89 e0       	ldi	r24, 0x09	; 9
 968:	0e 94 1f 01 	call	0x23e	; 0x23e <m_usb_tx_char>
 96c:	01 50       	subi	r16, 0x01	; 1
 96e:	11 09       	sbc	r17, r1
		counter++;*/
		
		if(rx_buffer == 1) {  			//computer wants ir buffer
			//write ir buffer as concatenated hex:  i.e. f0f1f4f5

			for (int j = 0 ; j < 7 ; j++){
 970:	71 f7       	brne	.-36     	; 0x94e <main+0x126>
				m_usb_tx_int(ADCarr[i]);
				m_usb_tx_char('\t');

			}

			m_usb_tx_char('\n');  //MATLAB serial command reads 1 line at a time
 972:	8a e0       	ldi	r24, 0x0A	; 10
 974:	0e 94 1f 01 	call	0x23e	; 0x23e <m_usb_tx_char>
 978:	a6 cf       	rjmp	.-180    	; 0x8c6 <main+0x9e>

0000097a <__vector_29>:
		
	}
	
}

ISR(ADC_vect) {
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1

 984:	0f 90       	pop	r0
 986:	0f be       	out	0x3f, r0	; 63
 988:	0f 90       	pop	r0
 98a:	1f 90       	pop	r1
 98c:	18 95       	reti

0000098e <itoa>:
 98e:	fb 01       	movw	r30, r22
 990:	9f 01       	movw	r18, r30
 992:	e8 94       	clt
 994:	42 30       	cpi	r20, 0x02	; 2
 996:	c4 f0       	brlt	.+48     	; 0x9c8 <itoa+0x3a>
 998:	45 32       	cpi	r20, 0x25	; 37
 99a:	b4 f4       	brge	.+44     	; 0x9c8 <itoa+0x3a>
 99c:	4a 30       	cpi	r20, 0x0A	; 10
 99e:	29 f4       	brne	.+10     	; 0x9aa <itoa+0x1c>
 9a0:	97 fb       	bst	r25, 7
 9a2:	1e f4       	brtc	.+6      	; 0x9aa <itoa+0x1c>
 9a4:	90 95       	com	r25
 9a6:	81 95       	neg	r24
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	64 2f       	mov	r22, r20
 9ac:	77 27       	eor	r23, r23
 9ae:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__udivmodhi4>
 9b2:	80 5d       	subi	r24, 0xD0	; 208
 9b4:	8a 33       	cpi	r24, 0x3A	; 58
 9b6:	0c f0       	brlt	.+2      	; 0x9ba <itoa+0x2c>
 9b8:	89 5d       	subi	r24, 0xD9	; 217
 9ba:	81 93       	st	Z+, r24
 9bc:	cb 01       	movw	r24, r22
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	a1 f7       	brne	.-24     	; 0x9aa <itoa+0x1c>
 9c2:	16 f4       	brtc	.+4      	; 0x9c8 <itoa+0x3a>
 9c4:	5d e2       	ldi	r21, 0x2D	; 45
 9c6:	51 93       	st	Z+, r21
 9c8:	10 82       	st	Z, r1
 9ca:	c9 01       	movw	r24, r18
 9cc:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <strrev>

000009d0 <strrev>:
 9d0:	dc 01       	movw	r26, r24
 9d2:	fc 01       	movw	r30, r24
 9d4:	67 2f       	mov	r22, r23
 9d6:	71 91       	ld	r23, Z+
 9d8:	77 23       	and	r23, r23
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <strrev+0x4>
 9dc:	32 97       	sbiw	r30, 0x02	; 2
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <strrev+0x18>
 9e0:	7c 91       	ld	r23, X
 9e2:	6d 93       	st	X+, r22
 9e4:	70 83       	st	Z, r23
 9e6:	62 91       	ld	r22, -Z
 9e8:	ae 17       	cp	r26, r30
 9ea:	bf 07       	cpc	r27, r31
 9ec:	c8 f3       	brcs	.-14     	; 0x9e0 <strrev+0x10>
 9ee:	08 95       	ret

000009f0 <__udivmodhi4>:
 9f0:	aa 1b       	sub	r26, r26
 9f2:	bb 1b       	sub	r27, r27
 9f4:	51 e1       	ldi	r21, 0x11	; 17
 9f6:	07 c0       	rjmp	.+14     	; 0xa06 <__udivmodhi4_ep>

000009f8 <__udivmodhi4_loop>:
 9f8:	aa 1f       	adc	r26, r26
 9fa:	bb 1f       	adc	r27, r27
 9fc:	a6 17       	cp	r26, r22
 9fe:	b7 07       	cpc	r27, r23
 a00:	10 f0       	brcs	.+4      	; 0xa06 <__udivmodhi4_ep>
 a02:	a6 1b       	sub	r26, r22
 a04:	b7 0b       	sbc	r27, r23

00000a06 <__udivmodhi4_ep>:
 a06:	88 1f       	adc	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	5a 95       	dec	r21
 a0c:	a9 f7       	brne	.-22     	; 0x9f8 <__udivmodhi4_loop>
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	bc 01       	movw	r22, r24
 a14:	cd 01       	movw	r24, r26
 a16:	08 95       	ret

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
