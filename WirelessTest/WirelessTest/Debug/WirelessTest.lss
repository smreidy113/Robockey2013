
WirelessTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000372  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b0  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005de  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002bd  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000453  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001bb  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005b0  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000021af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_3>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	aa 30       	cpi	r26, 0x0A	; 10
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 32 01 	call	0x264	; 0x264 <main>
  cc:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
  d4:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
  d6:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
  d8:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
  e0:	e9 e6       	ldi	r30, 0x69	; 105
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 83       	st	Z, r24
  ea:	80 81       	ld	r24, Z
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
  f0:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	18 2f       	mov	r17, r24
  fe:	d6 2f       	mov	r29, r22
 100:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 102:	0e 94 6a 00 	call	0xd4	; 0xd4 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 106:	94 ea       	ldi	r25, 0xA4	; 164
 108:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 10c:	ec eb       	ldi	r30, 0xBC	; 188
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	99 23       	and	r25, r25
 114:	ec f7       	brge	.-6      	; 0x110 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 116:	90 e5       	ldi	r25, 0x50	; 80
 118:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 11c:	94 e8       	ldi	r25, 0x84	; 132
 11e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	99 23       	and	r25, r25
 12a:	ec f7       	brge	.-6      	; 0x126 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 12c:	90 91 b9 00 	lds	r25, 0x00B9
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	90 32       	cpi	r25, 0x20	; 32
 134:	29 f4       	brne	.+10     	; 0x140 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 136:	84 e9       	ldi	r24, 0x94	; 148
 138:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	2d c0       	rjmp	.+90     	; 0x19a <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	99 23       	and	r25, r25
 154:	ec f7       	brge	.-6      	; 0x150 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 156:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 16a:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	ec f7       	brge	.-6      	; 0x178 <m_rf_open+0x82>
	
	TWDR = packet_length;
 17e:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 1a6:	24 ea       	ldi	r18, 0xA4	; 164
 1a8:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	20 81       	ld	r18, Z
 1b2:	22 23       	and	r18, r18
 1b4:	ec f7       	brge	.-6      	; 0x1b0 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
 1b6:	21 e5       	ldi	r18, 0x51	; 81
 1b8:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 1bc:	24 e8       	ldi	r18, 0x84	; 132
 1be:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
 1c2:	ec eb       	ldi	r30, 0xBC	; 188
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	20 81       	ld	r18, Z
 1c8:	22 23       	and	r18, r18
 1ca:	ec f7       	brge	.-6      	; 0x1c6 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
 1cc:	20 91 b9 00 	lds	r18, 0x00B9
 1d0:	28 7f       	andi	r18, 0xF8	; 248
 1d2:	28 34       	cpi	r18, 0x48	; 72
 1d4:	29 f4       	brne	.+10     	; 0x1e0 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 1d6:	84 e9       	ldi	r24, 0x94	; 148
 1d8:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	3f c0       	rjmp	.+126    	; 0x25e <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 1e0:	24 ec       	ldi	r18, 0xC4	; 196
 1e2:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	20 81       	ld	r18, Z
 1ec:	22 23       	and	r18, r18
 1ee:	ec f7       	brge	.-6      	; 0x1ea <m_rf_read+0x48>
	bytes = TWDR;
 1f0:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
 1f4:	46 13       	cpse	r20, r22
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	41 50       	subi	r20, 0x01	; 1
 1fc:	51 09       	sbc	r21, r1
 1fe:	14 16       	cp	r1, r20
 200:	15 06       	cpc	r1, r21
 202:	44 f0       	brlt	.+16     	; 0x214 <m_rf_read+0x72>
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	18 c0       	rjmp	.+48     	; 0x23a <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	25 c0       	rjmp	.+74     	; 0x25e <m_rf_read+0xbc>
 214:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 21a:	ec eb       	ldi	r30, 0xBC	; 188
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 220:	cb eb       	ldi	r28, 0xBB	; 187
 222:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 224:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 226:	60 81       	ld	r22, Z
 228:	66 23       	and	r22, r22
 22a:	ec f7       	brge	.-6      	; 0x226 <m_rf_read+0x84>
		buffer[i] = TWDR;
 22c:	68 81       	ld	r22, Y
 22e:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	24 17       	cp	r18, r20
 236:	35 07       	cpc	r19, r21
 238:	ac f3       	brlt	.-22     	; 0x224 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 23a:	24 e8       	ldi	r18, 0x84	; 132
 23c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 240:	ec eb       	ldi	r30, 0xBC	; 188
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	20 81       	ld	r18, Z
 246:	22 23       	and	r18, r18
 248:	ec f7       	brge	.-6      	; 0x244 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
 24a:	20 91 bb 00 	lds	r18, 0x00BB
 24e:	fc 01       	movw	r30, r24
 250:	e4 0f       	add	r30, r20
 252:	f5 1f       	adc	r31, r21
 254:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 256:	84 e9       	ldi	r24, 0x94	; 148
 258:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <main>:

char buffer[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int main(void)
{
	m_clockdivide(0);
 264:	e1 e6       	ldi	r30, 0x61	; 97
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	80 83       	st	Z, r24
 26c:	10 82       	st	Z, r1
	sei();
 26e:	78 94       	sei
	m_bus_init();
 270:	0e 94 6a 00 	call	0xd4	; 0xd4 <m_bus_init>
	char yes = m_rf_open(CHANNEL, RXADDRESS, PACKET_LENGTH);
 274:	4a e0       	ldi	r20, 0x0A	; 10
 276:	68 e0       	ldi	r22, 0x08	; 8
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 7b 00 	call	0xf6	; 0xf6 <m_rf_open>
	
	if (yes == 1) {
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	11 f4       	brne	.+4      	; 0x286 <main+0x22>
		m_red(ON);
 282:	6e 9a       	sbi	0x0d, 6	; 13
 284:	76 98       	cbi	0x0e, 6	; 14
 286:	ff cf       	rjmp	.-2      	; 0x286 <main+0x22>

00000288 <__vector_3>:
			m_green(TOGGLE);
		}*/
    }
}

ISR(INT2_vect) {
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	//cli();
	m_green(ON);
 2aa:	6a 9a       	sbi	0x0d, 2	; 13
 2ac:	72 98       	cbi	0x0e, 2	; 14
	m_rf_read(buffer, PACKET_LENGTH);
 2ae:	6a e0       	ldi	r22, 0x0A	; 10
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <m_rf_read>
	//m_green(OFF);
	//sei();
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
