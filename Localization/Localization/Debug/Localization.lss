
Localization.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000053a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  000005d6  2**0
                  ALLOC
  3 .stab         000033a8  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001008  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  000049b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f44  00000000  00000000  00004bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a7  00000000  00000000  00006afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c15  00000000  00000000  000072a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000648  00000000  00000000  00007eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000699  00000000  00000000  00008500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a02  00000000  00000000  00008b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000218  00000000  00000000  0000b59b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
    if(!twi_wait_for_ack()){
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
        twi_stop();
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
        return 0; // COMM failure
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
    }
    
    // ADDRESS packet:
    if(readwrite)
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_10>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_11>
            twi_stop();    
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
            return 0;	// failure
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
            twi_stop();
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
            return 0;	// failure
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
        }	        
    }
    return 1;	// success
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
    
}
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(reg == PORTH || reg == PORTG){
        m_write_register(address, reg, value &= ~(1 << pin));
        return 1;
	}
	else if(reg == DDRH || reg == DDRG){
        m_write_register(address, reg, value |= 1 << pin);
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
        return 1;
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
    }
    else return 0;
}
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
	if(!send_byte(0x00)){return 0;}
	if(!send_byte(0x00)){return 0;}
	if(!send_byte(0x00)){return 0;}
	if(!send_byte(0x00)){return 0;}
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x00)){return 0;}
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	if(!send_byte(0x90)){return 0;} // p0
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	end();
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
  bc:	00 00 35 01 04 01 03 09 04 39 01 12 02 03 09 04     ..5......9......
	if(!send_byte(0x07)){return 0;}
	if(!send_byte(0x00)){return 0;}
  cc:	4d 01 06 03 03 09 04 55 01 08                       M......U..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
	if(!send_byte(0x41)){return 0;} // p1
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
	if(!send_byte(0x1A)){return 0;}
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
	if(!send_byte(0x40)){return 0;} // p2
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
	if(!send_byte(0x00)){return 0;} // p3
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
	if(!send_byte(0x33)){return 0;}
 149:	65 00 00 00                                         e...

0000014d <string2>:
	if(!send_byte(0x03)){return 0;}
 14d:	06 03 4d 00 32 00 00 00                             ..M.2...

00000155 <string3>:
 155:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ea e3       	ldi	r30, 0x3A	; 58
	if(!send_byte(0x30)){return 0;}
 174:	f5 e0       	ldi	r31, 0x05	; 5
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
	if(!send_byte(0x08)){return 0;}
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
	end();
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ab 30       	cpi	r26, 0x0B	; 11
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

0000019a <__bad_interrupt>:
	
	m_wait(INTERPACKET);

	return 1;
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
	if(!send_byte(0x30)){return 0;}
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
	if(!send_byte(0x01)){return 0;}
 1a6:	10 82       	st	Z, r1
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0xa>

000001aa <__vector_10>:
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
	if(!send_byte(0x00)){return 0;}
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
	if(!send_byte(0x00)){return 0;}
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
	if(!send_byte(0x00)){return 0;}
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
	if(!send_byte(0x00)){return 0;}
 1ba:	ff 93       	push	r31
 1bc:	e1 ee       	ldi	r30, 0xE1	; 225
	if(!send_byte(0x00)){return 0;}
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
	if(!send_byte(0x00)){return 0;}
 1c2:	10 82       	st	Z, r1
 1c4:	83 ff       	sbrs	r24, 3
	if(!send_byte(0x00)){return 0;}
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <__vector_10+0x40>
 1c8:	10 92 e9 00 	sts	0x00E9, r1
	if(!send_byte(0x90)){return 0;} // p0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 1ce:	90 93 eb 00 	sts	0x00EB, r25
	if(!send_byte(0x07)){return 0;}
 1d2:	10 92 ec 00 	sts	0x00EC, r1
	if(!send_byte(0x00)){return 0;}
 1d6:	92 e1       	ldi	r25, 0x12	; 18
 1d8:	90 93 ed 00 	sts	0x00ED, r25
	if(!send_byte(0x41)){return 0;} // p1
 1dc:	98 e0       	ldi	r25, 0x08	; 8
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 1de:	90 93 f0 00 	sts	0x00F0, r25
	if(!send_byte(0x1A)){return 0;}
 1e2:	10 92 09 01 	sts	0x0109, r1
	if(!send_byte(0x40)){return 0;} // p2
 1e6:	10 92 0a 01 	sts	0x010A, r1
	if(!send_byte(0x00)){return 0;} // p3
 1ea:	82 ff       	sbrs	r24, 2
 1ec:	13 c0       	rjmp	.+38     	; 0x214 <__vector_10+0x6a>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 1ee:	80 91 09 01 	lds	r24, 0x0109
	if(!send_byte(0x33)){return 0;}
 1f2:	88 23       	and	r24, r24
 1f4:	79 f0       	breq	.+30     	; 0x214 <__vector_10+0x6a>
	if(!send_byte(0x03)){return 0;}
 1f6:	80 91 08 01 	lds	r24, 0x0108
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 1fa:	88 23       	and	r24, r24
 1fc:	59 f0       	breq	.+22     	; 0x214 <__vector_10+0x6a>
	if(!send_byte(0x30)){return 0;}
 1fe:	81 50       	subi	r24, 0x01	; 1
 200:	80 93 08 01 	sts	0x0108, r24
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
 204:	81 11       	cpse	r24, r1
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
			case 38: UEDATX = *buffer++;
 206:	06 c0       	rjmp	.+12     	; 0x214 <__vector_10+0x6a>
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	80 93 e9 00 	sts	0x00E9, r24
 20e:	8a e3       	ldi	r24, 0x3A	; 58
			case 37: UEDATX = *buffer++;
 210:	80 93 e8 00 	sts	0x00E8, r24
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	9f 91       	pop	r25
			case 36: UEDATX = *buffer++;
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
			case 35: UEDATX = *buffer++;
 224:	18 95       	reti

00000226 <__vector_11>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
			case 34: UEDATX = *buffer++;
 22e:	11 24       	eor	r1, r1
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
			case 33: UEDATX = *buffer++;
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
			case 31: UEDATX = *buffer++;
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	10 92 e9 00 	sts	0x00E9, r1
 254:	80 91 e8 00 	lds	r24, 0x00E8
			case 30: UEDATX = *buffer++;
 258:	83 ff       	sbrs	r24, 3
 25a:	51 c1       	rjmp	.+674    	; 0x4fe <__vector_11+0x2d8>
 25c:	e1 ef       	ldi	r30, 0xF1	; 241
 25e:	f0 e0       	ldi	r31, 0x00	; 0
			case 29: UEDATX = *buffer++;
 260:	70 81       	ld	r23, Z
 262:	40 81       	ld	r20, Z
 264:	20 81       	ld	r18, Z
 266:	30 81       	ld	r19, Z
 268:	93 2f       	mov	r25, r19
			case 28: UEDATX = *buffer++;
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	dc 01       	movw	r26, r24
 26e:	a2 2b       	or	r26, r18
 270:	9d 01       	movw	r18, r26
 272:	50 81       	ld	r21, Z
			case 27: UEDATX = *buffer++;
 274:	60 81       	ld	r22, Z
 276:	96 2f       	mov	r25, r22
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	85 2b       	or	r24, r21
 27c:	a0 81       	ld	r26, Z
			case 26: UEDATX = *buffer++;
 27e:	b0 81       	ld	r27, Z
 280:	52 ef       	ldi	r21, 0xF2	; 242
 282:	50 93 e8 00 	sts	0x00E8, r21
 286:	46 30       	cpi	r20, 0x06	; 6
			case 25: UEDATX = *buffer++;
 288:	09 f0       	breq	.+2      	; 0x28c <__vector_11+0x66>
 28a:	5c c0       	rjmp	.+184    	; 0x344 <__vector_11+0x11e>
 28c:	04 c0       	rjmp	.+8      	; 0x296 <__vector_11+0x70>
 28e:	81 e2       	ldi	r24, 0x21	; 33
 290:	80 93 eb 00 	sts	0x00EB, r24
			case 24: UEDATX = *buffer++;
 294:	3b c1       	rjmp	.+630    	; 0x50c <__vector_11+0x2e6>
 296:	c6 e0       	ldi	r28, 0x06	; 6
 298:	4c ea       	ldi	r20, 0xAC	; 172
 29a:	50 e0       	ldi	r21, 0x00	; 0
			case 23: UEDATX = *buffer++;
 29c:	fa 01       	movw	r30, r20
 29e:	65 91       	lpm	r22, Z+
 2a0:	74 91       	lpm	r23, Z
 2a2:	26 17       	cp	r18, r22
 2a4:	37 07       	cpc	r19, r23
			case 22: UEDATX = *buffer++;
 2a6:	19 f0       	breq	.+6      	; 0x2ae <__vector_11+0x88>
 2a8:	49 5f       	subi	r20, 0xF9	; 249
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	20 c0       	rjmp	.+64     	; 0x2ee <__vector_11+0xc8>
 2ae:	fa 01       	movw	r30, r20
			case 21: UEDATX = *buffer++;
 2b0:	32 96       	adiw	r30, 0x02	; 2
 2b2:	65 91       	lpm	r22, Z+
 2b4:	74 91       	lpm	r23, Z
 2b6:	86 17       	cp	r24, r22
 2b8:	97 07       	cpc	r25, r23
			case 20: UEDATX = *buffer++;
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <__vector_11+0x9c>
 2bc:	49 5f       	subi	r20, 0xF9	; 249
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	16 c0       	rjmp	.+44     	; 0x2ee <__vector_11+0xc8>
 2c2:	fa 01       	movw	r30, r20
			case 19: UEDATX = *buffer++;
 2c4:	34 96       	adiw	r30, 0x04	; 4
 2c6:	85 91       	lpm	r24, Z+
 2c8:	94 91       	lpm	r25, Z
 2ca:	28 2f       	mov	r18, r24
 2cc:	39 2f       	mov	r19, r25
			case 18: UEDATX = *buffer++;
 2ce:	fa 01       	movw	r30, r20
 2d0:	36 96       	adiw	r30, 0x06	; 6
 2d2:	44 91       	lpm	r20, Z
 2d4:	9b 2f       	mov	r25, r27
 2d6:	80 e0       	ldi	r24, 0x00	; 0
			case 17: UEDATX = *buffer++;
 2d8:	8a 2b       	or	r24, r26
 2da:	8f 3f       	cpi	r24, 0xFF	; 255
 2dc:	91 05       	cpc	r25, r1
 2de:	19 f0       	breq	.+6      	; 0x2e6 <__vector_11+0xc0>
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <__vector_11+0xc0>
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	84 17       	cp	r24, r20
 2e8:	28 f4       	brcc	.+10     	; 0x2f4 <__vector_11+0xce>
 2ea:	48 2f       	mov	r20, r24
			case 15: UEDATX = *buffer++;
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <__vector_11+0xce>
 2ee:	c1 50       	subi	r28, 0x01	; 1
 2f0:	a9 f6       	brne	.-86     	; 0x29c <__vector_11+0x76>
 2f2:	cd cf       	rjmp	.-102    	; 0x28e <__vector_11+0x68>
 2f4:	c8 ee       	ldi	r28, 0xE8	; 232
			case 14: UEDATX = *buffer++;
 2f6:	d0 e0       	ldi	r29, 0x00	; 0
 2f8:	7e ef       	ldi	r23, 0xFE	; 254
 2fa:	a1 ef       	ldi	r26, 0xF1	; 241
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	10 e1       	ldi	r17, 0x10	; 16
			case 13: UEDATX = *buffer++;
 300:	88 81       	ld	r24, Y
 302:	98 2f       	mov	r25, r24
 304:	95 70       	andi	r25, 0x05	; 5
 306:	e1 f3       	breq	.-8      	; 0x300 <__vector_11+0xda>
 308:	82 fd       	sbrc	r24, 2
			case 12: UEDATX = *buffer++;
 30a:	00 c1       	rjmp	.+512    	; 0x50c <__vector_11+0x2e6>
 30c:	64 2f       	mov	r22, r20
 30e:	41 31       	cpi	r20, 0x11	; 17
 310:	08 f0       	brcs	.+2      	; 0x314 <__vector_11+0xee>
 312:	61 2f       	mov	r22, r17
			case 11: UEDATX = *buffer++;
 314:	66 23       	and	r22, r22
 316:	09 f4       	brne	.+2      	; 0x31a <__vector_11+0xf4>
 318:	f6 c0       	rjmp	.+492    	; 0x506 <__vector_11+0x2e0>
 31a:	c9 01       	movw	r24, r18
 31c:	56 2f       	mov	r21, r22
			case 10: UEDATX = *buffer++;
 31e:	fc 01       	movw	r30, r24
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	e4 91       	lpm	r30, Z
 324:	ec 93       	st	X, r30
 326:	51 50       	subi	r21, 0x01	; 1
			case  9: UEDATX = *buffer++;
 328:	d1 f7       	brne	.-12     	; 0x31e <__vector_11+0xf8>
 32a:	86 2f       	mov	r24, r22
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 96       	adiw	r24, 0x01	; 1
			#endif
			case  8: UEDATX = *buffer++;
 332:	28 0f       	add	r18, r24
 334:	39 1f       	adc	r19, r25
 336:	46 1b       	sub	r20, r22
 338:	78 83       	st	Y, r23
 33a:	41 11       	cpse	r20, r1
			case  7: UEDATX = *buffer++;
 33c:	e1 cf       	rjmp	.-62     	; 0x300 <__vector_11+0xda>
 33e:	60 31       	cpi	r22, 0x10	; 16
 340:	f9 f2       	breq	.-66     	; 0x300 <__vector_11+0xda>
 342:	e4 c0       	rjmp	.+456    	; 0x50c <__vector_11+0x2e6>
 344:	45 30       	cpi	r20, 0x05	; 5
			case  6: UEDATX = *buffer++;
 346:	61 f4       	brne	.+24     	; 0x360 <__vector_11+0x13a>
 348:	8e ef       	ldi	r24, 0xFE	; 254
 34a:	80 93 e8 00 	sts	0x00E8, r24
 34e:	e8 ee       	ldi	r30, 0xE8	; 232
			case  5: UEDATX = *buffer++;
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 ff       	sbrs	r24, 0
 356:	fd cf       	rjmp	.-6      	; 0x352 <__vector_11+0x12c>
 358:	20 68       	ori	r18, 0x80	; 128
			case  4: UEDATX = *buffer++;
 35a:	20 93 e3 00 	sts	0x00E3, r18
 35e:	d6 c0       	rjmp	.+428    	; 0x50c <__vector_11+0x2e6>
 360:	49 30       	cpi	r20, 0x09	; 9
 362:	a1 f5       	brne	.+104    	; 0x3cc <__vector_11+0x1a6>
			case  3: UEDATX = *buffer++;
 364:	71 11       	cpse	r23, r1
 366:	5b c0       	rjmp	.+182    	; 0x41e <__vector_11+0x1f8>
 368:	20 93 09 01 	sts	0x0109, r18
 36c:	10 92 0a 01 	sts	0x010A, r1
			case  2: UEDATX = *buffer++;
 370:	10 92 08 01 	sts	0x0108, r1
 374:	8e ef       	ldi	r24, 0xFE	; 254
 376:	80 93 e8 00 	sts	0x00E8, r24
			default:
			case  1: UEDATX = *buffer++;
 37a:	11 e0       	ldi	r17, 0x01	; 1
 37c:	86 ed       	ldi	r24, 0xD6	; 214
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	c9 ee       	ldi	r28, 0xE9	; 233
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	ab ee       	ldi	r26, 0xEB	; 235
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	6c ee       	ldi	r22, 0xEC	; 236
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	4d ee       	ldi	r20, 0xED	; 237
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	18 83       	st	Y, r17
 392:	9c 01       	movw	r18, r24
 394:	2f 5f       	subi	r18, 0xFF	; 255
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 396:	3f 4f       	sbci	r19, 0xFF	; 255
	return 0;
 398:	fc 01       	movw	r30, r24
 39a:	04 91       	lpm	r16, Z
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 39c:	0c 93       	st	X, r16
 39e:	00 23       	and	r16, r16
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <__vector_11+0x192>
 3a2:	f9 01       	movw	r30, r18
 3a4:	24 91       	lpm	r18, Z
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 3a6:	fb 01       	movw	r30, r22
 3a8:	20 83       	st	Z, r18
 3aa:	fc 01       	movw	r30, r24
 3ac:	32 96       	adiw	r30, 0x02	; 2
 3ae:	03 96       	adiw	r24, 0x03	; 3
 3b0:	24 91       	lpm	r18, Z
 3b2:	fa 01       	movw	r30, r20
 3b4:	20 83       	st	Z, r18
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <__vector_11+0x194>
 3b8:	c9 01       	movw	r24, r18
 3ba:	1f 5f       	subi	r17, 0xFF	; 255
 3bc:	15 30       	cpi	r17, 0x05	; 5
 3be:	41 f7       	brne	.-48     	; 0x390 <__vector_11+0x16a>
 3c0:	ea ee       	ldi	r30, 0xEA	; 234
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 3c4:	8e e1       	ldi	r24, 0x1E	; 30
 3c6:	80 83       	st	Z, r24
        		UERST = 0;
 3c8:	10 82       	st	Z, r1
			return;
 3ca:	a0 c0       	rjmp	.+320    	; 0x50c <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 3cc:	48 30       	cpi	r20, 0x08	; 8
 3ce:	81 f4       	brne	.+32     	; 0x3f0 <__vector_11+0x1ca>
 3d0:	70 38       	cpi	r23, 0x80	; 128
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <__vector_11+0x1b0>
 3d4:	3f c0       	rjmp	.+126    	; 0x454 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 3d6:	e8 ee       	ldi	r30, 0xE8	; 232
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	80 ff       	sbrs	r24, 0
 3de:	fd cf       	rjmp	.-6      	; 0x3da <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 3e0:	80 91 09 01 	lds	r24, 0x0109
 3e4:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 3e8:	8e ef       	ldi	r24, 0xFE	; 254
 3ea:	80 93 e8 00 	sts	0x00E8, r24
 3ee:	8e c0       	rjmp	.+284    	; 0x50c <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 3f0:	41 32       	cpi	r20, 0x21	; 33
 3f2:	a9 f4       	brne	.+42     	; 0x41e <__vector_11+0x1f8>
 3f4:	71 3a       	cpi	r23, 0xA1	; 161
 3f6:	f1 f5       	brne	.+124    	; 0x474 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 3f8:	e8 ee       	ldi	r30, 0xE8	; 232
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	80 ff       	sbrs	r24, 0
 400:	fd cf       	rjmp	.-6      	; 0x3fc <__vector_11+0x1d6>
 402:	e0 e0       	ldi	r30, 0x00	; 0
 404:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 406:	a1 ef       	ldi	r26, 0xF1	; 241
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	81 91       	ld	r24, Z+
 40c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	e7 30       	cpi	r30, 0x07	; 7
 412:	f4 07       	cpc	r31, r20
 414:	d1 f7       	brne	.-12     	; 0x40a <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 416:	8e ef       	ldi	r24, 0xFE	; 254
 418:	80 93 e8 00 	sts	0x00E8, r24
 41c:	77 c0       	rjmp	.+238    	; 0x50c <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 41e:	40 32       	cpi	r20, 0x20	; 32
 420:	c9 f4       	brne	.+50     	; 0x454 <__vector_11+0x22e>
 422:	71 32       	cpi	r23, 0x21	; 33
 424:	09 f0       	breq	.+2      	; 0x428 <__vector_11+0x202>
 426:	6b c0       	rjmp	.+214    	; 0x4fe <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 428:	e8 ee       	ldi	r30, 0xE8	; 232
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 ff       	sbrs	r24, 2
 430:	fd cf       	rjmp	.-6      	; 0x42c <__vector_11+0x206>
 432:	e0 e0       	ldi	r30, 0x00	; 0
 434:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 436:	a1 ef       	ldi	r26, 0xF1	; 241
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	8c 91       	ld	r24, X
 43c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 43e:	51 e0       	ldi	r21, 0x01	; 1
 440:	e7 30       	cpi	r30, 0x07	; 7
 442:	f5 07       	cpc	r31, r21
 444:	d1 f7       	brne	.-12     	; 0x43a <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 446:	e8 ee       	ldi	r30, 0xE8	; 232
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	8b ef       	ldi	r24, 0xFB	; 251
 44c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 44e:	8e ef       	ldi	r24, 0xFE	; 254
 450:	80 83       	st	Z, r24
 452:	5c c0       	rjmp	.+184    	; 0x50c <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 454:	42 32       	cpi	r20, 0x22	; 34
 456:	71 f4       	brne	.+28     	; 0x474 <__vector_11+0x24e>
 458:	71 32       	cpi	r23, 0x21	; 33
 45a:	09 f0       	breq	.+2      	; 0x45e <__vector_11+0x238>
 45c:	50 c0       	rjmp	.+160    	; 0x4fe <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
 45e:	20 93 0a 01 	sts	0x010A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 462:	e8 ee       	ldi	r30, 0xE8	; 232
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	80 ff       	sbrs	r24, 0
 46a:	fd cf       	rjmp	.-6      	; 0x466 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 46c:	8e ef       	ldi	r24, 0xFE	; 254
 46e:	80 93 e8 00 	sts	0x00E8, r24
 472:	4c c0       	rjmp	.+152    	; 0x50c <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 474:	41 11       	cpse	r20, r1
 476:	1a c0       	rjmp	.+52     	; 0x4ac <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 478:	e8 ee       	ldi	r30, 0xE8	; 232
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	20 81       	ld	r18, Z
 47e:	20 ff       	sbrs	r18, 0
 480:	fd cf       	rjmp	.-6      	; 0x47c <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 482:	72 38       	cpi	r23, 0x82	; 130
 484:	51 f4       	brne	.+20     	; 0x49a <__vector_11+0x274>
				UENUM = wIndex;
 486:	e9 ee       	ldi	r30, 0xE9	; 233
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
 48c:	80 91 eb 00 	lds	r24, 0x00EB
 490:	85 fb       	bst	r24, 5
 492:	88 27       	eor	r24, r24
 494:	80 f9       	bld	r24, 0
				UENUM = 0;
 496:	10 82       	st	Z, r1
 498:	01 c0       	rjmp	.+2      	; 0x49c <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 49a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 49c:	e1 ef       	ldi	r30, 0xF1	; 241
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 83       	st	Z, r24
			UEDATX = 0;
 4a2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4a4:	8e ef       	ldi	r24, 0xFE	; 254
 4a6:	80 93 e8 00 	sts	0x00E8, r24
 4aa:	30 c0       	rjmp	.+96     	; 0x50c <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <__vector_11+0x28e>
 4b0:	43 30       	cpi	r20, 0x03	; 3
 4b2:	29 f5       	brne	.+74     	; 0x4fe <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
 4b4:	72 30       	cpi	r23, 0x02	; 2
 4b6:	19 f5       	brne	.+70     	; 0x4fe <__vector_11+0x2d8>
 4b8:	23 2b       	or	r18, r19
 4ba:	09 f5       	brne	.+66     	; 0x4fe <__vector_11+0x2d8>
			i = wIndex & 0x7F;
 4bc:	8f 77       	andi	r24, 0x7F	; 127
 4be:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
 4c0:	38 2f       	mov	r19, r24
 4c2:	31 50       	subi	r19, 0x01	; 1
 4c4:	34 30       	cpi	r19, 0x04	; 4
 4c6:	d8 f4       	brcc	.+54     	; 0x4fe <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4c8:	3e ef       	ldi	r19, 0xFE	; 254
 4ca:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 4ce:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
 4d2:	43 30       	cpi	r20, 0x03	; 3
 4d4:	21 f4       	brne	.+8      	; 0x4de <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 4d6:	81 e2       	ldi	r24, 0x21	; 33
 4d8:	80 93 eb 00 	sts	0x00EB, r24
 4dc:	17 c0       	rjmp	.+46     	; 0x50c <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 4de:	99 e1       	ldi	r25, 0x19	; 25
 4e0:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	d9 01       	movw	r26, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__vector_11+0x2ca>
 4ec:	aa 0f       	add	r26, r26
 4ee:	bb 1f       	adc	r27, r27
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__vector_11+0x2c6>
 4f4:	ea ee       	ldi	r30, 0xEA	; 234
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	a0 83       	st	Z, r26
					UERST = 0;
 4fa:	10 82       	st	Z, r1
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 4fe:	81 e2       	ldi	r24, 0x21	; 33
 500:	80 93 eb 00 	sts	0x00EB, r24
 504:	03 c0       	rjmp	.+6      	; 0x50c <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 506:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 508:	41 11       	cpse	r20, r1
 50a:	fa ce       	rjmp	.-524    	; 0x300 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
